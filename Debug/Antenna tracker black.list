
Antenna tracker black.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e384  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800e528  0800e528  0001e528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8b0  0800e8b0  00020364  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8b0  0800e8b0  0001e8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8b8  0800e8b8  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8b8  0800e8b8  0001e8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8bc  0800e8bc  0001e8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800e8c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001060  20000368  0800ec24  00020368  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200013c8  0800ec24  000213c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee22  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004559  00000000  00000000  0003f1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a0  00000000  00000000  00043710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001478  00000000  00000000  00044db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b883  00000000  00000000  00046228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000167c3  00000000  00000000  00061aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096904  00000000  00000000  0007826e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010eb72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b34  00000000  00000000  0010ebf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000368 	.word	0x20000368
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e50c 	.word	0x0800e50c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000036c 	.word	0x2000036c
 80001dc:	0800e50c 	.word	0x0800e50c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <GPS_CallBack>:
	GPS.rxIndex=0;
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
}
//##################################################################################################################
void	GPS_CallBack(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8000f9c:	f001 fb22 	bl	80025e4 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fa4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000faa:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fae:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000fb2:	d210      	bcs.n	8000fd6 <GPS_CallBack+0x3e>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fb6:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fbe:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fc4:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fc8:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fd2:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}	
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4903      	ldr	r1, [pc, #12]	; (8000fe8 <GPS_CallBack+0x50>)
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <GPS_CallBack+0x54>)
 8000fdc:	f005 fb04 	bl	80065e8 <HAL_UART_Receive_IT>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200003c0 	.word	0x200003c0
 8000fe8:	200005c2 	.word	0x200005c2
 8000fec:	200009a0 	.word	0x200009a0

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <MX_ADC1_Init+0xb8>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800100a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800100e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001018:	2201      	movs	r2, #1
 800101a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800101e:	2201      	movs	r2, #1
 8001020:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001032:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <MX_ADC1_Init+0xbc>)
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800103e:	2202      	movs	r2, #2
 8001040:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800104c:	2201      	movs	r2, #1
 800104e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001052:	f001 faf5 	bl	8002640 <HAL_ADC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800105c:	f000 fbf0 	bl	8001840 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001060:	2304      	movs	r3, #4
 8001062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001068:	2307      	movs	r3, #7
 800106a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001072:	f001 fc87 	bl	8002984 <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800107c:	f000 fbe0 	bl	8001840 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001080:	2305      	movs	r3, #5
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800108e:	f001 fc79 	bl	8002984 <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001098:	f000 fbd2 	bl	8001840 <Error_Handler>
  }

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000610 	.word	0x20000610
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a33      	ldr	r2, [pc, #204]	; (800119c <HAL_ADC_MspInit+0xec>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d15f      	bne.n	8001192 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800110a:	2330      	movs	r3, #48	; 0x30
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4821      	ldr	r0, [pc, #132]	; (80011a4 <HAL_ADC_MspInit+0xf4>)
 800111e:	f002 fa85 	bl	800362c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800114c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001168:	f001 ff56 	bl	8003018 <HAL_DMA_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001172:	f000 fb65 	bl	8001840 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2012      	movs	r0, #18
 8001188:	f001 ff0f 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800118c:	2012      	movs	r0, #18
 800118e:	f001 ff28 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40012000 	.word	0x40012000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	20000658 	.word	0x20000658
 80011ac:	40026410 	.word	0x40026410

080011b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_DMA_Init+0x3c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2038      	movs	r0, #56	; 0x38
 80011d8:	f001 fee7 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011dc:	2038      	movs	r0, #56	; 0x38
 80011de:	f001 ff00 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <MX_GPIO_Init+0xbc>)
 800127e:	f002 fb57 	bl	8003930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin;
 8001282:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_GPIO_Init+0xbc>)
 800129c:	f002 f9c6 	bl	800362c <HAL_GPIO_Init>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400

080012b0 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 GPS_CallBack();
 80012b8:	f7ff fe6e 	bl	8000f98 <GPS_CallBack>
 //HAL_UART_Transmit_IT(&huart1, "RAMKA", sizeof("RAMKA"));
// HAL_UART_Transmit_IT(&huart1, &Received, 1); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
// HAL_UART_Receive_IT(&huart3, &Received, 1); // Ponowne włączenie nasłuchiwania

 //		GPS.GPGGA.LatitudeDecimal, GPS.GPGGA.LongitudeDecimal, GPS.GPGGA.MSL_Altitude
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d102      	bne.n	80012da <HAL_TIM_PeriodElapsedCallback+0x16>
			//obsługa przerwania co 1ms
		flaga1ms = 1;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
	}
	if(htim == &htim5){
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d102      	bne.n	80012e8 <HAL_TIM_PeriodElapsedCallback+0x24>
			//obsługa przerwania co 1ms
		flaga1s = 1;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
	}
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000860 	.word	0x20000860
 80012f8:	20000388 	.word	0x20000388
 80012fc:	200008a0 	.word	0x200008a0
 8001300:	2000038c 	.word	0x2000038c
 8001304:	00000000 	.word	0x00000000

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b598      	push	{r3, r4, r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130c:	f001 f904 	bl	8002518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001310:	f000 fa2e 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001314:	f7ff ff6c 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001318:	f7ff ff4a 	bl	80011b0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800131c:	f008 fe6e 	bl	8009ffc <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001320:	f000 fce6 	bl	8001cf0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001324:	f000 fd92 	bl	8001e4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001328:	f000 fde4 	bl	8001ef4 <MX_TIM3_Init>
  MX_ADC1_Init();
 800132c:	f7ff fe60 	bl	8000ff0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001330:	f000 ffe8 	bl	8002304 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001334:	f001 f810 	bl	8002358 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001338:	f000 fe30 	bl	8001f9c <MX_TIM4_Init>
  MX_TIM5_Init();
 800133c:	f000 fe7c 	bl	8002038 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001340:	2100      	movs	r1, #0
 8001342:	489b      	ldr	r0, [pc, #620]	; (80015b0 <main+0x2a8>)
 8001344:	f004 ffdf 	bl	8006306 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001348:	2104      	movs	r1, #4
 800134a:	4899      	ldr	r0, [pc, #612]	; (80015b0 <main+0x2a8>)
 800134c:	f004 ffdb 	bl	8006306 <HAL_TIMEx_PWMN_Start>

  TIM2->CNT = 1600;
 8001350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001354:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 1240;
 800135a:	4b96      	ldr	r3, [pc, #600]	; (80015b4 <main+0x2ac>)
 800135c:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8001360:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001362:	213c      	movs	r1, #60	; 0x3c
 8001364:	4894      	ldr	r0, [pc, #592]	; (80015b8 <main+0x2b0>)
 8001366:	f004 fa1d 	bl	80057a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800136a:	213c      	movs	r1, #60	; 0x3c
 800136c:	4893      	ldr	r0, [pc, #588]	; (80015bc <main+0x2b4>)
 800136e:	f004 fa19 	bl	80057a4 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 8001372:	4893      	ldr	r0, [pc, #588]	; (80015c0 <main+0x2b8>)
 8001374:	f004 f8f9 	bl	800556a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001378:	4892      	ldr	r0, [pc, #584]	; (80015c4 <main+0x2bc>)
 800137a:	f004 f8f6 	bl	800556a <HAL_TIM_Base_Start_IT>

//  HAL_ADC_Start_DMA(&hadc1, feedback, 2);

  pid_init(&pid_azimuth, 80.0f, 0.0f, 50.0f, 10, 1);
 800137e:	2201      	movs	r2, #1
 8001380:	210a      	movs	r1, #10
 8001382:	ed9f 1a91 	vldr	s2, [pc, #580]	; 80015c8 <main+0x2c0>
 8001386:	eddf 0a91 	vldr	s1, [pc, #580]	; 80015cc <main+0x2c4>
 800138a:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80015d0 <main+0x2c8>
 800138e:	4891      	ldr	r0, [pc, #580]	; (80015d4 <main+0x2cc>)
 8001390:	f000 fa5d 	bl	800184e <pid_init>
  pid_azimuth.p_max = pid_scale(&pid_azimuth, 4095);
 8001394:	ed9f 0a90 	vldr	s0, [pc, #576]	; 80015d8 <main+0x2d0>
 8001398:	488e      	ldr	r0, [pc, #568]	; (80015d4 <main+0x2cc>)
 800139a:	f000 fb9b 	bl	8001ad4 <pid_scale>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b8c      	ldr	r3, [pc, #560]	; (80015d4 <main+0x2cc>)
 80013a2:	619a      	str	r2, [r3, #24]
  pid_azimuth.p_min = pid_scale(&pid_azimuth, -4095);
 80013a4:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80015dc <main+0x2d4>
 80013a8:	488a      	ldr	r0, [pc, #552]	; (80015d4 <main+0x2cc>)
 80013aa:	f000 fb93 	bl	8001ad4 <pid_scale>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <main+0x2cc>)
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
  pid_azimuth.i_max = pid_scale(&pid_azimuth, 4095);
 80013b4:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80015d8 <main+0x2d0>
 80013b8:	4886      	ldr	r0, [pc, #536]	; (80015d4 <main+0x2cc>)
 80013ba:	f000 fb8b 	bl	8001ad4 <pid_scale>
 80013be:	4602      	mov	r2, r0
 80013c0:	4b84      	ldr	r3, [pc, #528]	; (80015d4 <main+0x2cc>)
 80013c2:	61da      	str	r2, [r3, #28]
  pid_azimuth.i_min = pid_scale(&pid_azimuth, -4095);
 80013c4:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80015dc <main+0x2d4>
 80013c8:	4882      	ldr	r0, [pc, #520]	; (80015d4 <main+0x2cc>)
 80013ca:	f000 fb83 	bl	8001ad4 <pid_scale>
 80013ce:	4602      	mov	r2, r0
 80013d0:	4b80      	ldr	r3, [pc, #512]	; (80015d4 <main+0x2cc>)
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  pid_azimuth.d_max = pid_scale(&pid_azimuth, 4095);
 80013d4:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80015d8 <main+0x2d0>
 80013d8:	487e      	ldr	r0, [pc, #504]	; (80015d4 <main+0x2cc>)
 80013da:	f000 fb7b 	bl	8001ad4 <pid_scale>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b7c      	ldr	r3, [pc, #496]	; (80015d4 <main+0x2cc>)
 80013e2:	621a      	str	r2, [r3, #32]
  pid_azimuth.d_min = pid_scale(&pid_azimuth, -4095);
 80013e4:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80015dc <main+0x2d4>
 80013e8:	487a      	ldr	r0, [pc, #488]	; (80015d4 <main+0x2cc>)
 80013ea:	f000 fb73 	bl	8001ad4 <pid_scale>
 80013ee:	4602      	mov	r2, r0
 80013f0:	4b78      	ldr	r3, [pc, #480]	; (80015d4 <main+0x2cc>)
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_azimuth.total_max = pid_scale(&pid_azimuth, 4095);
 80013f4:	ed9f 0a78 	vldr	s0, [pc, #480]	; 80015d8 <main+0x2d0>
 80013f8:	4876      	ldr	r0, [pc, #472]	; (80015d4 <main+0x2cc>)
 80013fa:	f000 fb6b 	bl	8001ad4 <pid_scale>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b74      	ldr	r3, [pc, #464]	; (80015d4 <main+0x2cc>)
 8001402:	649a      	str	r2, [r3, #72]	; 0x48
  pid_azimuth.total_min = pid_scale(&pid_azimuth, -4095);
 8001404:	ed9f 0a75 	vldr	s0, [pc, #468]	; 80015dc <main+0x2d4>
 8001408:	4872      	ldr	r0, [pc, #456]	; (80015d4 <main+0x2cc>)
 800140a:	f000 fb63 	bl	8001ad4 <pid_scale>
 800140e:	4602      	mov	r2, r0
 8001410:	4b70      	ldr	r3, [pc, #448]	; (80015d4 <main+0x2cc>)
 8001412:	64da      	str	r2, [r3, #76]	; 0x4c

  pid_init(&pid_height, 60.0f, 0.0f, 30.0f, 10, 1);//1ms - okres
 8001414:	2201      	movs	r2, #1
 8001416:	210a      	movs	r1, #10
 8001418:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 800141c:	eddf 0a6b 	vldr	s1, [pc, #428]	; 80015cc <main+0x2c4>
 8001420:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80015e0 <main+0x2d8>
 8001424:	486f      	ldr	r0, [pc, #444]	; (80015e4 <main+0x2dc>)
 8001426:	f000 fa12 	bl	800184e <pid_init>
  pid_height.p_max = pid_scale(&pid_height, 4095);
 800142a:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80015d8 <main+0x2d0>
 800142e:	486d      	ldr	r0, [pc, #436]	; (80015e4 <main+0x2dc>)
 8001430:	f000 fb50 	bl	8001ad4 <pid_scale>
 8001434:	4602      	mov	r2, r0
 8001436:	4b6b      	ldr	r3, [pc, #428]	; (80015e4 <main+0x2dc>)
 8001438:	619a      	str	r2, [r3, #24]
  pid_height.p_min = pid_scale(&pid_height, -4095);
 800143a:	ed9f 0a68 	vldr	s0, [pc, #416]	; 80015dc <main+0x2d4>
 800143e:	4869      	ldr	r0, [pc, #420]	; (80015e4 <main+0x2dc>)
 8001440:	f000 fb48 	bl	8001ad4 <pid_scale>
 8001444:	4602      	mov	r2, r0
 8001446:	4b67      	ldr	r3, [pc, #412]	; (80015e4 <main+0x2dc>)
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
  pid_height.i_max = pid_scale(&pid_height, 4095);
 800144a:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80015d8 <main+0x2d0>
 800144e:	4865      	ldr	r0, [pc, #404]	; (80015e4 <main+0x2dc>)
 8001450:	f000 fb40 	bl	8001ad4 <pid_scale>
 8001454:	4602      	mov	r2, r0
 8001456:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <main+0x2dc>)
 8001458:	61da      	str	r2, [r3, #28]
  pid_height.i_min = pid_scale(&pid_height, -4095);
 800145a:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80015dc <main+0x2d4>
 800145e:	4861      	ldr	r0, [pc, #388]	; (80015e4 <main+0x2dc>)
 8001460:	f000 fb38 	bl	8001ad4 <pid_scale>
 8001464:	4602      	mov	r2, r0
 8001466:	4b5f      	ldr	r3, [pc, #380]	; (80015e4 <main+0x2dc>)
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
  pid_height.d_max = pid_scale(&pid_height, 4095);
 800146a:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 80015d8 <main+0x2d0>
 800146e:	485d      	ldr	r0, [pc, #372]	; (80015e4 <main+0x2dc>)
 8001470:	f000 fb30 	bl	8001ad4 <pid_scale>
 8001474:	4602      	mov	r2, r0
 8001476:	4b5b      	ldr	r3, [pc, #364]	; (80015e4 <main+0x2dc>)
 8001478:	621a      	str	r2, [r3, #32]
  pid_height.d_min = pid_scale(&pid_height, -4095);
 800147a:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80015dc <main+0x2d4>
 800147e:	4859      	ldr	r0, [pc, #356]	; (80015e4 <main+0x2dc>)
 8001480:	f000 fb28 	bl	8001ad4 <pid_scale>
 8001484:	4602      	mov	r2, r0
 8001486:	4b57      	ldr	r3, [pc, #348]	; (80015e4 <main+0x2dc>)
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_height.total_max = pid_scale(&pid_height, 4095);
 800148a:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80015d8 <main+0x2d0>
 800148e:	4855      	ldr	r0, [pc, #340]	; (80015e4 <main+0x2dc>)
 8001490:	f000 fb20 	bl	8001ad4 <pid_scale>
 8001494:	4602      	mov	r2, r0
 8001496:	4b53      	ldr	r3, [pc, #332]	; (80015e4 <main+0x2dc>)
 8001498:	649a      	str	r2, [r3, #72]	; 0x48
  pid_height.total_min = pid_scale(&pid_height, -4095);
 800149a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80015dc <main+0x2d4>
 800149e:	4851      	ldr	r0, [pc, #324]	; (80015e4 <main+0x2dc>)
 80014a0:	f000 fb18 	bl	8001ad4 <pid_scale>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <main+0x2dc>)
 80014a8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80014aa:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <main+0x2a8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014b2:	2100      	movs	r1, #0
 80014b4:	483e      	ldr	r0, [pc, #248]	; (80015b0 <main+0x2a8>)
 80014b6:	f004 f8b1 	bl	800561c <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <main+0x2a8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014c2:	2104      	movs	r1, #4
 80014c4:	483a      	ldr	r0, [pc, #232]	; (80015b0 <main+0x2a8>)
 80014c6:	f004 f8a9 	bl	800561c <HAL_TIM_PWM_Start>

		HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d0:	4845      	ldr	r0, [pc, #276]	; (80015e8 <main+0x2e0>)
 80014d2:	f002 fa2d 	bl	8003930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014dc:	4842      	ldr	r0, [pc, #264]	; (80015e8 <main+0x2e0>)
 80014de:	f002 fa27 	bl	8003930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e8:	483f      	ldr	r0, [pc, #252]	; (80015e8 <main+0x2e0>)
 80014ea:	f002 fa21 	bl	8003930 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f4:	483c      	ldr	r0, [pc, #240]	; (80015e8 <main+0x2e0>)
 80014f6:	f002 fa1b 	bl	8003930 <HAL_GPIO_WritePin>
  while (1)
  {
	  timer_val = __HAL_TIM_GET_COUNTER(&htim4);
 80014fa:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <main+0x2b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	461a      	mov	r2, r3
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <main+0x2e4>)
 8001504:	601a      	str	r2, [r3, #0]

	  //send_json((int)feedback[0], (int)feedback[1] );
	  pulse_count_azimuth = TIM2->CNT; // przepisanie wartosci z rejestru timera
 8001506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	b29a      	uxth	r2, r3
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <main+0x2e8>)
 8001510:	801a      	strh	r2, [r3, #0]
	  positions_azimuth = pulse_count_azimuth/8.88889; // zeskalowanie impulsow do stopni
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <main+0x2e8>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f80b 	bl	8000534 <__aeabi_i2d>
 800151e:	a320      	add	r3, pc, #128	; (adr r3, 80015a0 <main+0x298>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f7ff f99a 	bl	800085c <__aeabi_ddiv>
 8001528:	4603      	mov	r3, r0
 800152a:	460c      	mov	r4, r1
 800152c:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <main+0x2ec>)
 800152e:	e9c2 3400 	strd	r3, r4, [r2]

	  pulse_count_height = TIM3->CNT; // przepisanie wartosci z rejestru timera
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <main+0x2ac>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <main+0x2f0>)
 800153a:	801a      	strh	r2, [r3, #0]
	  positions_height = pulse_count_height/6.88889; // zeskalowanie impulsow do stopni
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <main+0x2f0>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fff6 	bl	8000534 <__aeabi_i2d>
 8001548:	a317      	add	r3, pc, #92	; (adr r3, 80015a8 <main+0x2a0>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7ff f985 	bl	800085c <__aeabi_ddiv>
 8001552:	4603      	mov	r3, r0
 8001554:	460c      	mov	r4, r1
 8001556:	4a29      	ldr	r2, [pc, #164]	; (80015fc <main+0x2f4>)
 8001558:	e9c2 3400 	strd	r3, r4, [r2]

	  //send_json( positions_height, positions_azimuth );

	  	  if( flaga1ms == 1 ){
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <main+0x2f8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	f040 80cc 	bne.w	80016fe <main+0x3f6>
	  		  flaga1ms = 0;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <main+0x2f8>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

				  pwm_control_height = pid_calc(&pid_height, (int)positions_height, setpoint_height);
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <main+0x2f4>)
 800156e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001572:	4618      	mov	r0, r3
 8001574:	4621      	mov	r1, r4
 8001576:	f7ff faf7 	bl	8000b68 <__aeabi_d2iz>
 800157a:	4601      	mov	r1, r0
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <main+0x2fc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4818      	ldr	r0, [pc, #96]	; (80015e4 <main+0x2dc>)
 8001584:	f000 f9ee 	bl	8001964 <pid_calc>
 8001588:	4602      	mov	r2, r0
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <main+0x300>)
 800158c:	601a      	str	r2, [r3, #0]
				  if( pwm_control_height >= 0 ) pwm_dir_height = 1;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <main+0x300>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db3c      	blt.n	8001610 <main+0x308>
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <main+0x304>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e03b      	b.n	8001616 <main+0x30e>
 800159e:	bf00      	nop
 80015a0:	970f7b9e 	.word	0x970f7b9e
 80015a4:	4021c71c 	.word	0x4021c71c
 80015a8:	2e1ef73c 	.word	0x2e1ef73c
 80015ac:	401b8e39 	.word	0x401b8e39
 80015b0:	20000920 	.word	0x20000920
 80015b4:	40000400 	.word	0x40000400
 80015b8:	20000960 	.word	0x20000960
 80015bc:	200008e0 	.word	0x200008e0
 80015c0:	20000860 	.word	0x20000860
 80015c4:	200008a0 	.word	0x200008a0
 80015c8:	42480000 	.word	0x42480000
 80015cc:	00000000 	.word	0x00000000
 80015d0:	42a00000 	.word	0x42a00000
 80015d4:	200006b8 	.word	0x200006b8
 80015d8:	457ff000 	.word	0x457ff000
 80015dc:	c57ff000 	.word	0xc57ff000
 80015e0:	42700000 	.word	0x42700000
 80015e4:	20000800 	.word	0x20000800
 80015e8:	40020400 	.word	0x40020400
 80015ec:	200003a8 	.word	0x200003a8
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000858 	.word	0x20000858
 80015f8:	20000002 	.word	0x20000002
 80015fc:	20000710 	.word	0x20000710
 8001600:	20000388 	.word	0x20000388
 8001604:	20000008 	.word	0x20000008
 8001608:	20000390 	.word	0x20000390
 800160c:	200003a0 	.word	0x200003a0
				  else pwm_dir_height = 0;
 8001610:	4b4a      	ldr	r3, [pc, #296]	; (800173c <main+0x434>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
				  pwm_control_height_abs = abs(pwm_control_height);
 8001616:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <main+0x438>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	bfb8      	it	lt
 800161e:	425b      	neglt	r3, r3
 8001620:	4a48      	ldr	r2, [pc, #288]	; (8001744 <main+0x43c>)
 8001622:	6013      	str	r3, [r2, #0]

					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_control_height_abs );
 8001624:	4b47      	ldr	r3, [pc, #284]	; (8001744 <main+0x43c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b47      	ldr	r3, [pc, #284]	; (8001748 <main+0x440>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	635a      	str	r2, [r3, #52]	; 0x34

					if(pwm_dir_height == 1){
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <main+0x434>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10b      	bne.n	800164e <main+0x346>
						HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800163c:	4843      	ldr	r0, [pc, #268]	; (800174c <main+0x444>)
 800163e:	f002 f977 	bl	8003930 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001648:	4840      	ldr	r0, [pc, #256]	; (800174c <main+0x444>)
 800164a:	f002 f971 	bl	8003930 <HAL_GPIO_WritePin>
					}

					if(pwm_dir_height == 0){
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <main+0x434>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <main+0x366>
						HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800165c:	483b      	ldr	r0, [pc, #236]	; (800174c <main+0x444>)
 800165e:	f002 f967 	bl	8003930 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001668:	4838      	ldr	r0, [pc, #224]	; (800174c <main+0x444>)
 800166a:	f002 f961 	bl	8003930 <HAL_GPIO_WritePin>
					}

		  		  pwm_control_azimuth = pid_calc(&pid_azimuth, (int)positions_azimuth, setpoint_azimuth);
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <main+0x448>)
 8001670:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001674:	4618      	mov	r0, r3
 8001676:	4621      	mov	r1, r4
 8001678:	f7ff fa76 	bl	8000b68 <__aeabi_d2iz>
 800167c:	4601      	mov	r1, r0
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <main+0x44c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4834      	ldr	r0, [pc, #208]	; (8001758 <main+0x450>)
 8001686:	f000 f96d 	bl	8001964 <pid_calc>
 800168a:	4602      	mov	r2, r0
 800168c:	4b33      	ldr	r3, [pc, #204]	; (800175c <main+0x454>)
 800168e:	601a      	str	r2, [r3, #0]
		  		  if( pwm_control_azimuth >= 0 ) pwm_dir_azimuth = 1;
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <main+0x454>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db03      	blt.n	80016a0 <main+0x398>
 8001698:	4b31      	ldr	r3, [pc, #196]	; (8001760 <main+0x458>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e002      	b.n	80016a6 <main+0x39e>
		  		  else pwm_dir_azimuth = 0;
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <main+0x458>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
		  		  pwm_control_azimuth_abs = abs(pwm_control_azimuth);
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <main+0x454>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bfb8      	it	lt
 80016ae:	425b      	neglt	r3, r3
 80016b0:	4a2c      	ldr	r2, [pc, #176]	; (8001764 <main+0x45c>)
 80016b2:	6013      	str	r3, [r2, #0]

		    		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_control_azimuth_abs );
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <main+0x45c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <main+0x440>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38

		    		if(pwm_dir_azimuth == 1){
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <main+0x458>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d10b      	bne.n	80016de <main+0x3d6>
		      			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016cc:	481f      	ldr	r0, [pc, #124]	; (800174c <main+0x444>)
 80016ce:	f002 f92f 	bl	8003930 <HAL_GPIO_WritePin>
		      			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d8:	481c      	ldr	r0, [pc, #112]	; (800174c <main+0x444>)
 80016da:	f002 f929 	bl	8003930 <HAL_GPIO_WritePin>
		    		}

		    		if(pwm_dir_azimuth == 0){
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <main+0x458>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10b      	bne.n	80016fe <main+0x3f6>
		      			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ec:	4817      	ldr	r0, [pc, #92]	; (800174c <main+0x444>)
 80016ee:	f002 f91f 	bl	8003930 <HAL_GPIO_WritePin>
		      			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f8:	4814      	ldr	r0, [pc, #80]	; (800174c <main+0x444>)
 80016fa:	f002 f919 	bl	8003930 <HAL_GPIO_WritePin>



	  	  }

	  	if( flaga1s == 1 ){
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <main+0x460>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	f47f aef9 	bne.w	80014fa <main+0x1f2>
	  		flaga1s = 0;
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <main+0x460>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
	  		if(setpoint_height == 180) setpoint_height = 150;
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <main+0x464>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2bb4      	cmp	r3, #180	; 0xb4
 8001714:	d103      	bne.n	800171e <main+0x416>
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <main+0x464>)
 8001718:	2296      	movs	r2, #150	; 0x96
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e002      	b.n	8001724 <main+0x41c>
	  		else setpoint_height = 180;
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <main+0x464>)
 8001720:	22b4      	movs	r2, #180	; 0xb4
 8001722:	601a      	str	r2, [r3, #0]
	  		if(setpoint_azimuth == 180) setpoint_azimuth = 150;
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <main+0x44c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2bb4      	cmp	r3, #180	; 0xb4
 800172a:	d103      	bne.n	8001734 <main+0x42c>
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <main+0x44c>)
 800172e:	2296      	movs	r2, #150	; 0x96
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e6e2      	b.n	80014fa <main+0x1f2>
	  		else setpoint_azimuth = 180;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <main+0x44c>)
 8001736:	22b4      	movs	r2, #180	; 0xb4
 8001738:	601a      	str	r2, [r3, #0]
	  timer_val = __HAL_TIM_GET_COUNTER(&htim4);
 800173a:	e6de      	b.n	80014fa <main+0x1f2>
 800173c:	200003a0 	.word	0x200003a0
 8001740:	20000390 	.word	0x20000390
 8001744:	2000039c 	.word	0x2000039c
 8001748:	20000920 	.word	0x20000920
 800174c:	40020400 	.word	0x40020400
 8001750:	20000858 	.word	0x20000858
 8001754:	20000004 	.word	0x20000004
 8001758:	200006b8 	.word	0x200006b8
 800175c:	20000394 	.word	0x20000394
 8001760:	200003a4 	.word	0x200003a4
 8001764:	20000398 	.word	0x20000398
 8001768:	2000038c 	.word	0x2000038c
 800176c:	20000008 	.word	0x20000008

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b094      	sub	sp, #80	; 0x50
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	2230      	movs	r2, #48	; 0x30
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f009 f976 	bl	800aa70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <SystemClock_Config+0xc8>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	4a26      	ldr	r2, [pc, #152]	; (8001838 <SystemClock_Config+0xc8>)
 800179e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a2:	6413      	str	r3, [r2, #64]	; 0x40
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <SystemClock_Config+0xc8>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	4b21      	ldr	r3, [pc, #132]	; (800183c <SystemClock_Config+0xcc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a20      	ldr	r2, [pc, #128]	; (800183c <SystemClock_Config+0xcc>)
 80017ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <SystemClock_Config+0xcc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d6:	2302      	movs	r3, #2
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017e0:	2319      	movs	r3, #25
 80017e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80017e4:	23c0      	movs	r3, #192	; 0xc0
 80017e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017ec:	2304      	movs	r3, #4
 80017ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f0:	f107 0320 	add.w	r3, r7, #32
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fa51 	bl	8004c9c <HAL_RCC_OscConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001800:	f000 f81e 	bl	8001840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001804:	230f      	movs	r3, #15
 8001806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	2103      	movs	r1, #3
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fcab 	bl	800517c <HAL_RCC_ClockConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800182c:	f000 f808 	bl	8001840 <Error_Handler>
  }
}
 8001830:	bf00      	nop
 8001832:	3750      	adds	r7, #80	; 0x50
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <pid_init>:
 *
 * Created on: 09.03.2018
 * Author: Wojciech Domski
 */
#include "pid.h"
void pid_init(cpid_t *pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 800184e:	b480      	push	{r7}
 8001850:	b089      	sub	sp, #36	; 0x24
 8001852:	af00      	add	r7, sp, #0
 8001854:	6178      	str	r0, [r7, #20]
 8001856:	ed87 0a04 	vstr	s0, [r7, #16]
 800185a:	edc7 0a03 	vstr	s1, [r7, #12]
 800185e:	ed87 1a02 	vstr	s2, [r7, #8]
 8001862:	460b      	mov	r3, r1
 8001864:	603a      	str	r2, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
	uint32_t k;
	pid->power = 1;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2201      	movs	r2, #1
 800186c:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e007      	b.n	8001884 <pid_init+0x36>
		pid->power = pid->power * 2;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001878:	005a      	lsls	r2, r3, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	429a      	cmp	r2, r3
 800188a:	d3f3      	bcc.n	8001874 <pid_init+0x26>
	}
	pid->f = f;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pid->p = (int32_t) (p * pid->power);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ac:	ee17 2a90 	vmov	r2, s15
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	601a      	str	r2, [r3, #0]
	pid->i = (int32_t) (i * pid->power);
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018cc:	ee17 2a90 	vmov	r2, s15
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	605a      	str	r2, [r3, #4]
	pid->d = (int32_t) (d * pid->power);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ec:	ee17 2a90 	vmov	r2, s15
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	609a      	str	r2, [r3, #8]
	pid->p_val = 0;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
	pid->i_val = 0;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
	pid->d_val = 0;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
	pid->p_max = INT32_MAX;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800190c:	619a      	str	r2, [r3, #24]
	pid->p_min = INT32_MIN;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
	pid->i_max = INT32_MAX;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800191c:	61da      	str	r2, [r3, #28]
	pid->i_min = INT32_MIN;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
	pid->d_max = INT32_MAX;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800192c:	621a      	str	r2, [r3, #32]
	pid->d_min = INT32_MIN;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_last = 0;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2200      	movs	r2, #0
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
	pid->sum = 0;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2200      	movs	r2, #0
 8001940:	645a      	str	r2, [r3, #68]	; 0x44
	pid->total_max = INT32_MAX;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001948:	649a      	str	r2, [r3, #72]	; 0x48
	pid->total_min = INT32_MIN;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001950:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->dt_ms = dt_ms;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001958:	bf00      	nop
 800195a:	3724      	adds	r7, #36	; 0x24
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <pid_calc>:
int32_t pid_calc(cpid_t *pid, int32_t mv, int32_t dv) {
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	; 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	int32_t p, i, d, e, total;
	pid->mv = mv;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->dv = dv;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
//UZUPELNIJ WYLICZANIE BLEDU
	e = dv-mv;
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON PROPORCJONALNY
	p = pid->p*e;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
	if (p > pid->p_max)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	429a      	cmp	r2, r3
 8001998:	dd03      	ble.n	80019a2 <pid_calc+0x3e>
		p = pid->p_max;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	e007      	b.n	80019b2 <pid_calc+0x4e>
	else if (p < pid->p_min)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a8:	429a      	cmp	r2, r3
 80019aa:	da02      	bge.n	80019b2 <pid_calc+0x4e>
		p = pid->p_min;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
	pid->p_val = p >> pid->f;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019b8:	461a      	mov	r2, r3
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	fa43 f202 	asr.w	r2, r3, r2
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	60da      	str	r2, [r3, #12]
	i = pid->sum;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	623b      	str	r3, [r7, #32]
//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON CALKUJACY
//PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
	i += pid->i*(pid->dt_ms/1000);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	493f      	ldr	r1, [pc, #252]	; (8001ad0 <pid_calc+0x16c>)
 80019d4:	fb81 0103 	smull	r0, r1, r1, r3
 80019d8:	1189      	asrs	r1, r1, #6
 80019da:	17db      	asrs	r3, r3, #31
 80019dc:	1acb      	subs	r3, r1, r3
 80019de:	fb03 f302 	mul.w	r3, r3, r2
 80019e2:	6a3a      	ldr	r2, [r7, #32]
 80019e4:	4413      	add	r3, r2
 80019e6:	623b      	str	r3, [r7, #32]
	if (i > pid->i_max)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	6a3a      	ldr	r2, [r7, #32]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dd03      	ble.n	80019fa <pid_calc+0x96>
		i = pid->i_max;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	623b      	str	r3, [r7, #32]
 80019f8:	e007      	b.n	8001a0a <pid_calc+0xa6>
	else if (i < pid->i_min)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	6a3a      	ldr	r2, [r7, #32]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	da02      	bge.n	8001a0a <pid_calc+0xa6>
		i = pid->i_min;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	623b      	str	r3, [r7, #32]
	pid->sum = i;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a3a      	ldr	r2, [r7, #32]
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
	pid->i_val = i >> pid->f;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a16:	461a      	mov	r2, r3
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	fa43 f202 	asr.w	r2, r3, r2
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	611a      	str	r2, [r3, #16]
//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON ROZNICZKUJACEGO
//PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
	d = pid->d*(e-pid->e_last)/(1000/pid->dt_ms);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a2a:	6979      	ldr	r1, [r7, #20]
 8001a2c:	1a8a      	subs	r2, r1, r2
 8001a2e:	fb02 f203 	mul.w	r2, r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a3a:	fb91 f3f3 	sdiv	r3, r1, r3
 8001a3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a42:	61fb      	str	r3, [r7, #28]
	if (d > pid->d_max)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dd03      	ble.n	8001a56 <pid_calc+0xf2>
		d = pid->d_max;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	e007      	b.n	8001a66 <pid_calc+0x102>
	else if (d < pid->d_min)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	da02      	bge.n	8001a66 <pid_calc+0x102>
		d = pid->d_min;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	61fb      	str	r3, [r7, #28]
	pid->d_val = d >> pid->f;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa43 f202 	asr.w	r2, r3, r2
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	615a      	str	r2, [r3, #20]
	total = p + i + d;
 8001a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	4413      	add	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
	if (total > pid->total_max)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dd03      	ble.n	8001a96 <pid_calc+0x132>
		total = pid->total_max;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	e007      	b.n	8001aa6 <pid_calc+0x142>
	else if (total < pid->total_min)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	da02      	bge.n	8001aa6 <pid_calc+0x142>
		total = pid->total_min;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	61bb      	str	r3, [r7, #24]
	pid->control = total >> pid->f;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aac:	461a      	mov	r2, r3
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	fa43 f202 	asr.w	r2, r3, r2
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	651a      	str	r2, [r3, #80]	; 0x50
	pid->e_last = e;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
	return pid->control;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	372c      	adds	r7, #44	; 0x2c
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	10624dd3 	.word	0x10624dd3

08001ad4 <pid_scale>:
int32_t pid_scale(cpid_t *pid, float v) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	ed87 0a00 	vstr	s0, [r7]
	return v * pid->power;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aec:	edd7 7a00 	vldr	s15, [r7]
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af8:	ee17 3a90 	vmov	r3, s15
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_MspInit+0x58>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <HAL_MspInit+0x58>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_MspInit+0x58>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_MspInit+0x58>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_MspInit+0x58>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x58>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f001 fa2d 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f001 fa46 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 fd00 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001bc4:	f003 f850 	bl	8004c68 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <ADC_IRQHandler+0x10>)
 8001bd2:	f000 fd78 	bl	80026c6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000610 	.word	0x20000610

08001be0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001be6:	f003 fe14 	bl	8005812 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000920 	.word	0x20000920

08001bf4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <TIM4_IRQHandler+0x10>)
 8001bfa:	f003 fe0a 	bl	8005812 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000860 	.word	0x20000860

08001c08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <USART1_IRQHandler+0x10>)
 8001c0e:	f004 fd41 	bl	8006694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200009a0 	.word	0x200009a0

08001c1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <USART2_IRQHandler+0x10>)
 8001c22:	f004 fd37 	bl	8006694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200009e0 	.word	0x200009e0

08001c30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <TIM5_IRQHandler+0x10>)
 8001c36:	f003 fdec 	bl	8005812 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200008a0 	.word	0x200008a0

08001c44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <DMA2_Stream0_IRQHandler+0x10>)
 8001c4a:	f001 fab5 	bl	80031b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000658 	.word	0x20000658

08001c58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <OTG_FS_IRQHandler+0x10>)
 8001c5e:	f001 ffd0 	bl	8003c02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000fbc 	.word	0x20000fbc

08001c6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x50>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <_sbrk+0x16>
		heap_end = &end;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <_sbrk+0x50>)
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <_sbrk+0x54>)
 8001c80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <_sbrk+0x50>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <_sbrk+0x50>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	466a      	mov	r2, sp
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d907      	bls.n	8001ca6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c96:	f008 feb1 	bl	800a9fc <__errno>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	e006      	b.n	8001cb4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <_sbrk+0x50>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	4a03      	ldr	r2, [pc, #12]	; (8001cbc <_sbrk+0x50>)
 8001cb0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200003ac 	.word	0x200003ac
 8001cc0:	200013c8 	.word	0x200013c8

08001cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <SystemInit+0x28>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	4a07      	ldr	r2, [pc, #28]	; (8001cec <SystemInit+0x28>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SystemInit+0x28>)
 8001cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cde:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b096      	sub	sp, #88	; 0x58
 8001cf4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
 8001d1e:	615a      	str	r2, [r3, #20]
 8001d20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2220      	movs	r2, #32
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f008 fea1 	bl	800aa70 <memset>

  htim1.Instance = TIM1;
 8001d2e:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d30:	4a45      	ldr	r2, [pc, #276]	; (8001e48 <MX_TIM1_Init+0x158>)
 8001d32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d50:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d5c:	4839      	ldr	r0, [pc, #228]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d5e:	f003 fbd9 	bl	8005514 <HAL_TIM_Base_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001d68:	f7ff fd6a 	bl	8001840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d76:	4619      	mov	r1, r3
 8001d78:	4832      	ldr	r0, [pc, #200]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d7a:	f003 ff19 	bl	8005bb0 <HAL_TIM_ConfigClockSource>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001d84:	f7ff fd5c 	bl	8001840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d88:	482e      	ldr	r0, [pc, #184]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001d8a:	f003 fc12 	bl	80055b2 <HAL_TIM_PWM_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001d94:	f7ff fd54 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001da4:	4619      	mov	r1, r3
 8001da6:	4827      	ldr	r0, [pc, #156]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001da8:	f004 fad8 	bl	800635c <HAL_TIMEx_MasterConfigSynchronization>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001db2:	f7ff fd45 	bl	8001840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db6:	2360      	movs	r3, #96	; 0x60
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481a      	ldr	r0, [pc, #104]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001ddc:	f003 fe22 	bl	8005a24 <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001de6:	f7ff fd2b 	bl	8001840 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dee:	2204      	movs	r2, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4814      	ldr	r0, [pc, #80]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001df4:	f003 fe16 	bl	8005a24 <HAL_TIM_PWM_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001dfe:	f7ff fd1f 	bl	8001840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001e26:	f004 fb07 	bl	8006438 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001e30:	f7ff fd06 	bl	8001840 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM1_Init+0x154>)
 8001e36:	f000 fa2b 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001e3a:	bf00      	nop
 8001e3c:	3758      	adds	r7, #88	; 0x58
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000920 	.word	0x20000920
 8001e48:	40010000 	.word	0x40010000

08001e4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08c      	sub	sp, #48	; 0x30
 8001e50:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	2224      	movs	r2, #36	; 0x24
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f008 fe08 	bl	800aa70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <MX_TIM2_Init+0xa4>)
 8001e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <MX_TIM2_Init+0xa4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <MX_TIM2_Init+0xa4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <MX_TIM2_Init+0xa4>)
 8001e7e:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001e82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <MX_TIM2_Init+0xa4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <MX_TIM2_Init+0xa4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e90:	2301      	movs	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <MX_TIM2_Init+0xa4>)
 8001ebc:	f003 fbe0 	bl	8005680 <HAL_TIM_Encoder_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ec6:	f7ff fcbb 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <MX_TIM2_Init+0xa4>)
 8001ed8:	f004 fa40 	bl	800635c <HAL_TIMEx_MasterConfigSynchronization>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ee2:	f7ff fcad 	bl	8001840 <Error_Handler>
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3730      	adds	r7, #48	; 0x30
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000960 	.word	0x20000960

08001ef4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08c      	sub	sp, #48	; 0x30
 8001ef8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	2224      	movs	r2, #36	; 0x24
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f008 fdb4 	bl	800aa70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001f10:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <MX_TIM3_Init+0xa0>)
 8001f12:	4a21      	ldr	r2, [pc, #132]	; (8001f98 <MX_TIM3_Init+0xa4>)
 8001f14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <MX_TIM3_Init+0xa0>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <MX_TIM3_Init+0xa0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2479;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <MX_TIM3_Init+0xa0>)
 8001f24:	f640 12af 	movw	r2, #2479	; 0x9af
 8001f28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <MX_TIM3_Init+0xa0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <MX_TIM3_Init+0xa0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <MX_TIM3_Init+0xa0>)
 8001f62:	f003 fb8d 	bl	8005680 <HAL_TIM_Encoder_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f6c:	f7ff fc68 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_TIM3_Init+0xa0>)
 8001f7e:	f004 f9ed 	bl	800635c <HAL_TIMEx_MasterConfigSynchronization>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f88:	f7ff fc5a 	bl	8001840 <Error_Handler>
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3730      	adds	r7, #48	; 0x30
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200008e0 	.word	0x200008e0
 8001f98:	40000400 	.word	0x40000400

08001f9c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <MX_TIM4_Init+0x94>)
 8001fba:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <MX_TIM4_Init+0x98>)
 8001fbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9600;
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <MX_TIM4_Init+0x94>)
 8001fc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <MX_TIM4_Init+0x94>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <MX_TIM4_Init+0x94>)
 8001fce:	220a      	movs	r2, #10
 8001fd0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <MX_TIM4_Init+0x94>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_TIM4_Init+0x94>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fde:	4814      	ldr	r0, [pc, #80]	; (8002030 <MX_TIM4_Init+0x94>)
 8001fe0:	f003 fa98 	bl	8005514 <HAL_TIM_Base_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001fea:	f7ff fc29 	bl	8001840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ff4:	f107 0308 	add.w	r3, r7, #8
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480d      	ldr	r0, [pc, #52]	; (8002030 <MX_TIM4_Init+0x94>)
 8001ffc:	f003 fdd8 	bl	8005bb0 <HAL_TIM_ConfigClockSource>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002006:	f7ff fc1b 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002012:	463b      	mov	r3, r7
 8002014:	4619      	mov	r1, r3
 8002016:	4806      	ldr	r0, [pc, #24]	; (8002030 <MX_TIM4_Init+0x94>)
 8002018:	f004 f9a0 	bl	800635c <HAL_TIMEx_MasterConfigSynchronization>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002022:	f7ff fc0d 	bl	8001840 <Error_Handler>
  }

}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000860 	.word	0x20000860
 8002034:	40000800 	.word	0x40000800

08002038 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203e:	f107 0308 	add.w	r3, r7, #8
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204c:	463b      	mov	r3, r7
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <MX_TIM5_Init+0x94>)
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <MX_TIM5_Init+0x98>)
 8002058:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9600;
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <MX_TIM5_Init+0x94>)
 800205c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002060:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <MX_TIM5_Init+0x94>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <MX_TIM5_Init+0x94>)
 800206a:	f242 7210 	movw	r2, #10000	; 0x2710
 800206e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <MX_TIM5_Init+0x94>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <MX_TIM5_Init+0x94>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800207c:	4813      	ldr	r0, [pc, #76]	; (80020cc <MX_TIM5_Init+0x94>)
 800207e:	f003 fa49 	bl	8005514 <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002088:	f7ff fbda 	bl	8001840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002090:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	4619      	mov	r1, r3
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <MX_TIM5_Init+0x94>)
 800209a:	f003 fd89 	bl	8005bb0 <HAL_TIM_ConfigClockSource>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80020a4:	f7ff fbcc 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020b0:	463b      	mov	r3, r7
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_TIM5_Init+0x94>)
 80020b6:	f004 f951 	bl	800635c <HAL_TIMEx_MasterConfigSynchronization>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80020c0:	f7ff fbbe 	bl	8001840 <Error_Handler>
  }

}
 80020c4:	bf00      	nop
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200008a0 	.word	0x200008a0
 80020d0:	40000c00 	.word	0x40000c00

080020d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2a      	ldr	r2, [pc, #168]	; (800218c <HAL_TIM_Base_MspInit+0xb8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d116      	bne.n	8002114 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_TIM_Base_MspInit+0xbc>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a28      	ldr	r2, [pc, #160]	; (8002190 <HAL_TIM_Base_MspInit+0xbc>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <HAL_TIM_Base_MspInit+0xbc>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	2019      	movs	r0, #25
 8002108:	f000 ff4f 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800210c:	2019      	movs	r0, #25
 800210e:	f000 ff68 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002112:	e036      	b.n	8002182 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <HAL_TIM_Base_MspInit+0xc0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d116      	bne.n	800214c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_TIM_Base_MspInit+0xbc>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a1a      	ldr	r2, [pc, #104]	; (8002190 <HAL_TIM_Base_MspInit+0xbc>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_TIM_Base_MspInit+0xbc>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	201e      	movs	r0, #30
 8002140:	f000 ff33 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002144:	201e      	movs	r0, #30
 8002146:	f000 ff4c 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 800214a:	e01a      	b.n	8002182 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_TIM_Base_MspInit+0xc4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d115      	bne.n	8002182 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_TIM_Base_MspInit+0xbc>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <HAL_TIM_Base_MspInit+0xbc>)
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_TIM_Base_MspInit+0xbc>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2032      	movs	r0, #50	; 0x32
 8002178:	f000 ff17 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800217c:	2032      	movs	r0, #50	; 0x32
 800217e:	f000 ff30 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40010000 	.word	0x40010000
 8002190:	40023800 	.word	0x40023800
 8002194:	40000800 	.word	0x40000800
 8002198:	40000c00 	.word	0x40000c00

0800219c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	; 0x30
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021bc:	d12c      	bne.n	8002218 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a28      	ldr	r2, [pc, #160]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021f6:	2303      	movs	r3, #3
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002206:	2301      	movs	r3, #1
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	4619      	mov	r1, r3
 8002210:	481d      	ldr	r0, [pc, #116]	; (8002288 <HAL_TIM_Encoder_MspInit+0xec>)
 8002212:	f001 fa0b 	bl	800362c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002216:	e030      	b.n	800227a <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HAL_TIM_Encoder_MspInit+0xf0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12b      	bne.n	800227a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a0f      	ldr	r2, [pc, #60]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800225a:	23c0      	movs	r3, #192	; 0xc0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800226a:	2302      	movs	r3, #2
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	4619      	mov	r1, r3
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <HAL_TIM_Encoder_MspInit+0xec>)
 8002276:	f001 f9d9 	bl	800362c <HAL_GPIO_Init>
}
 800227a:	bf00      	nop
 800227c:	3730      	adds	r7, #48	; 0x30
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000
 800228c:	40000400 	.word	0x40000400

08002290 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <HAL_TIM_MspPostInit+0x68>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d11e      	bne.n	80022f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_TIM_MspPostInit+0x6c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_TIM_MspPostInit+0x70>)
 80022ec:	f001 f99e 	bl	800362c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022f0:	bf00      	nop
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000

08002304 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <MX_USART1_UART_Init+0x4c>)
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <MX_USART1_UART_Init+0x50>)
 800230c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <MX_USART1_UART_Init+0x4c>)
 8002310:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <MX_USART1_UART_Init+0x4c>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <MX_USART1_UART_Init+0x4c>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <MX_USART1_UART_Init+0x4c>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <MX_USART1_UART_Init+0x4c>)
 800232a:	220c      	movs	r2, #12
 800232c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <MX_USART1_UART_Init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <MX_USART1_UART_Init+0x4c>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <MX_USART1_UART_Init+0x4c>)
 800233c:	f004 f907 	bl	800654e <HAL_UART_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002346:	f7ff fa7b 	bl	8001840 <Error_Handler>
  }

}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200009a0 	.word	0x200009a0
 8002354:	40011000 	.word	0x40011000

08002358 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 8002360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002390:	f004 f8dd 	bl	800654e <HAL_UART_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800239a:	f7ff fa51 	bl	8001840 <Error_Handler>
  }

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200009e0 	.word	0x200009e0
 80023a8:	40004400 	.word	0x40004400

080023ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	; 0x30
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <HAL_UART_MspInit+0x108>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d135      	bne.n	800243a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4a38      	ldr	r2, [pc, #224]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 80023d8:	f043 0310 	orr.w	r3, r3, #16
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
 80023de:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002406:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002418:	2307      	movs	r3, #7
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	4826      	ldr	r0, [pc, #152]	; (80024bc <HAL_UART_MspInit+0x110>)
 8002424:	f001 f902 	bl	800362c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2100      	movs	r1, #0
 800242c:	2025      	movs	r0, #37	; 0x25
 800242e:	f000 fdbc 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002432:	2025      	movs	r0, #37	; 0x25
 8002434:	f000 fdd5 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002438:	e038      	b.n	80024ac <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <HAL_UART_MspInit+0x114>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d133      	bne.n	80024ac <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 800244e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6313      	str	r3, [r2, #48]	; 0x30
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_UART_MspInit+0x10c>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800247c:	230c      	movs	r3, #12
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800248c:	2307      	movs	r3, #7
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	4809      	ldr	r0, [pc, #36]	; (80024bc <HAL_UART_MspInit+0x110>)
 8002498:	f001 f8c8 	bl	800362c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	2100      	movs	r1, #0
 80024a0:	2026      	movs	r0, #38	; 0x26
 80024a2:	f000 fd82 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024a6:	2026      	movs	r0, #38	; 0x26
 80024a8:	f000 fd9b 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 80024ac:	bf00      	nop
 80024ae:	3730      	adds	r7, #48	; 0x30
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40011000 	.word	0x40011000
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40004400 	.word	0x40004400

080024c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024ca:	e003      	b.n	80024d4 <LoopCopyDataInit>

080024cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024d2:	3104      	adds	r1, #4

080024d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024d4:	480b      	ldr	r0, [pc, #44]	; (8002504 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024dc:	d3f6      	bcc.n	80024cc <CopyDataInit>
  ldr  r2, =_sbss
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024e0:	e002      	b.n	80024e8 <LoopFillZerobss>

080024e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024e4:	f842 3b04 	str.w	r3, [r2], #4

080024e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024ec:	d3f9      	bcc.n	80024e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024ee:	f7ff fbe9 	bl	8001cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f2:	f008 fa89 	bl	800aa08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f6:	f7fe ff07 	bl	8001308 <main>
  bx  lr    
 80024fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002500:	0800e8c0 	.word	0x0800e8c0
  ldr  r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002508:	20000364 	.word	0x20000364
  ldr  r2, =_sbss
 800250c:	20000368 	.word	0x20000368
  ldr  r3, = _ebss
 8002510:	200013c8 	.word	0x200013c8

08002514 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <DMA1_Stream0_IRQHandler>
	...

08002518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <HAL_Init+0x40>)
 8002522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_Init+0x40>)
 800252e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <HAL_Init+0x40>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f000 fd27 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f808 	bl	800255c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800254c:	f7ff fadc 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_InitTick+0x54>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_InitTick+0x58>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	fbb3 f3f1 	udiv	r3, r3, r1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fd3f 	bl	8002ffe <HAL_SYSTICK_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e00e      	b.n	80025a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b0f      	cmp	r3, #15
 800258e:	d80a      	bhi.n	80025a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002590:	2200      	movs	r2, #0
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f000 fd07 	bl	8002faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <HAL_InitTick+0x5c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	2000000c 	.word	0x2000000c
 80025b4:	20000014 	.word	0x20000014
 80025b8:	20000010 	.word	0x20000010

080025bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x20>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_IncTick+0x24>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_IncTick+0x24>)
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000014 	.word	0x20000014
 80025e0:	20000a20 	.word	0x20000a20

080025e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return uwTick;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_GetTick+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000a20 	.word	0x20000a20

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff ffee 	bl	80025e4 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_Delay+0x40>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffde 	bl	80025e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000014 	.word	0x20000014

08002640 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e033      	b.n	80026be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fd26 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d118      	bne.n	80026b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002686:	f023 0302 	bic.w	r3, r3, #2
 800268a:	f043 0202 	orr.w	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 faa8 	bl	8002be8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f023 0303 	bic.w	r3, r3, #3
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
 80026ae:	e001      	b.n	80026b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d049      	beq.n	800279c <HAL_ADC_IRQHandler+0xd6>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d046      	beq.n	800279c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d12b      	bne.n	800278c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d127      	bne.n	800278c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002754:	2b00      	cmp	r3, #0
 8002756:	d119      	bne.n	800278c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0220 	bic.w	r2, r2, #32
 8002766:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f8db 	bl	8002948 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f06f 0212 	mvn.w	r2, #18
 800279a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d057      	beq.n	800287e <HAL_ADC_IRQHandler+0x1b8>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d054      	beq.n	800287e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d139      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002812:	2b00      	cmp	r3, #0
 8002814:	d12b      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002820:	2b00      	cmp	r3, #0
 8002822:	d124      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d11d      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002836:	2b00      	cmp	r3, #0
 8002838:	d119      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002848:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fab6 	bl	8002de0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 020c 	mvn.w	r2, #12
 800287c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d017      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x21a>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10d      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f843 	bl	800295c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f06f 0201 	mvn.w	r2, #1
 80028de:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	bf0c      	ite	eq
 80028ee:	2301      	moveq	r3, #1
 80028f0:	2300      	movne	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_ADC_IRQHandler+0x27a>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d012      	beq.n	8002940 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f043 0202 	orr.w	r2, r3, #2
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0220 	mvn.w	r2, #32
 800292e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f81d 	bl	8002970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f06f 0220 	mvn.w	r2, #32
 800293e:	601a      	str	r2, [r3, #0]
  }
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x1c>
 800299c:	2302      	movs	r3, #2
 800299e:	e113      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x244>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b09      	cmp	r3, #9
 80029ae:	d925      	bls.n	80029fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	3b1e      	subs	r3, #30
 80029c6:	2207      	movs	r2, #7
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43da      	mvns	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	400a      	ands	r2, r1
 80029d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68d9      	ldr	r1, [r3, #12]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	4603      	mov	r3, r0
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4403      	add	r3, r0
 80029ee:	3b1e      	subs	r3, #30
 80029f0:	409a      	lsls	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	e022      	b.n	8002a42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6919      	ldr	r1, [r3, #16]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	2207      	movs	r2, #7
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6919      	ldr	r1, [r3, #16]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4403      	add	r3, r0
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d824      	bhi.n	8002a94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b05      	subs	r3, #5
 8002a5c:	221f      	movs	r2, #31
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	400a      	ands	r2, r1
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	3b05      	subs	r3, #5
 8002a86:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34
 8002a92:	e04c      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d824      	bhi.n	8002ae6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b23      	subs	r3, #35	; 0x23
 8002aae:	221f      	movs	r2, #31
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	400a      	ands	r2, r1
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b23      	subs	r3, #35	; 0x23
 8002ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae4:	e023      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	3b41      	subs	r3, #65	; 0x41
 8002af8:	221f      	movs	r2, #31
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	400a      	ands	r2, r1
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4618      	mov	r0, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b41      	subs	r3, #65	; 0x41
 8002b22:	fa00 f203 	lsl.w	r2, r0, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_ADC_ConfigChannel+0x250>)
 8002b30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a28      	ldr	r2, [pc, #160]	; (8002bd8 <HAL_ADC_ConfigChannel+0x254>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d10f      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1d8>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b12      	cmp	r3, #18
 8002b42:	d10b      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_ADC_ConfigChannel+0x254>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d12b      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x23a>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <HAL_ADC_ConfigChannel+0x258>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x1f4>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b11      	cmp	r3, #17
 8002b76:	d122      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <HAL_ADC_ConfigChannel+0x258>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d111      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <HAL_ADC_ConfigChannel+0x25c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a11      	ldr	r2, [pc, #68]	; (8002be4 <HAL_ADC_ConfigChannel+0x260>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	0c9a      	lsrs	r2, r3, #18
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bb0:	e002      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f9      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40012300 	.word	0x40012300
 8002bd8:	40012000 	.word	0x40012000
 8002bdc:	10000012 	.word	0x10000012
 8002be0:	2000000c 	.word	0x2000000c
 8002be4:	431bde83 	.word	0x431bde83

08002be8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf0:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <ADC_Init+0x1f0>)
 8002bf2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	021a      	lsls	r2, r3, #8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6899      	ldr	r1, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <ADC_Init+0x1f4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d022      	beq.n	8002cc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	e00f      	b.n	8002ce6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ce4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0202 	bic.w	r2, r2, #2
 8002cf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6899      	ldr	r1, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7e1b      	ldrb	r3, [r3, #24]
 8002d00:	005a      	lsls	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01b      	beq.n	8002d4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	035a      	lsls	r2, r3, #13
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	e007      	b.n	8002d5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	051a      	lsls	r2, r3, #20
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d9e:	025a      	lsls	r2, r3, #9
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	029a      	lsls	r2, r3, #10
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40012300 	.word	0x40012300
 8002ddc:	0f000001 	.word	0x0f000001

08002de0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e26:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	60d3      	str	r3, [r2, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <__NVIC_GetPriorityGrouping+0x18>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0307 	and.w	r3, r3, #7
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db0b      	blt.n	8002e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4907      	ldr	r1, [pc, #28]	; (8002e90 <__NVIC_EnableIRQ+0x38>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2001      	movs	r0, #1
 8002e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	; (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	; (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
         );
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f60:	d301      	bcc.n	8002f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00f      	b.n	8002f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <SysTick_Config+0x40>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6e:	210f      	movs	r1, #15
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f7ff ff8e 	bl	8002e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <SysTick_Config+0x40>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <SysTick_Config+0x40>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff29 	bl	8002df4 <__NVIC_SetPriorityGrouping>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fbc:	f7ff ff3e 	bl	8002e3c <__NVIC_GetPriorityGrouping>
 8002fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7ff ff8e 	bl	8002ee8 <NVIC_EncodePriority>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff5d 	bl	8002e94 <__NVIC_SetPriority>
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff31 	bl	8002e58 <__NVIC_EnableIRQ>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffa2 	bl	8002f50 <SysTick_Config>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff fade 	bl	80025e4 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e099      	b.n	8003168 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003054:	e00f      	b.n	8003076 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003056:	f7ff fac5 	bl	80025e4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b05      	cmp	r3, #5
 8003062:	d908      	bls.n	8003076 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e078      	b.n	8003168 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e8      	bne.n	8003056 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4b38      	ldr	r3, [pc, #224]	; (8003170 <HAL_DMA_Init+0x158>)
 8003090:	4013      	ands	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d107      	bne.n	80030e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	4313      	orrs	r3, r2
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b04      	cmp	r3, #4
 8003108:	d117      	bne.n	800313a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00e      	beq.n	800313a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fa0b 	bl	8003538 <DMA_CheckFifoParam>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003136:	2301      	movs	r3, #1
 8003138:	e016      	b.n	8003168 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f9c2 	bl	80034cc <DMA_CalcBaseAndBitshift>
 8003148:	4603      	mov	r3, r0
 800314a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	223f      	movs	r2, #63	; 0x3f
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	f010803f 	.word	0xf010803f

08003174 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d004      	beq.n	8003192 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2280      	movs	r2, #128	; 0x80
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e00c      	b.n	80031ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2205      	movs	r2, #5
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031c4:	4b92      	ldr	r3, [pc, #584]	; (8003410 <HAL_DMA_IRQHandler+0x258>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a92      	ldr	r2, [pc, #584]	; (8003414 <HAL_DMA_IRQHandler+0x25c>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0a9b      	lsrs	r3, r3, #10
 80031d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	2208      	movs	r2, #8
 80031e4:	409a      	lsls	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01a      	beq.n	8003224 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0204 	bic.w	r2, r2, #4
 800320a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003210:	2208      	movs	r2, #8
 8003212:	409a      	lsls	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	2201      	movs	r2, #1
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d012      	beq.n	800325a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	2201      	movs	r2, #1
 8003248:	409a      	lsls	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f043 0202 	orr.w	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	2204      	movs	r2, #4
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d012      	beq.n	8003290 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00b      	beq.n	8003290 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	2204      	movs	r2, #4
 800327e:	409a      	lsls	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	2210      	movs	r2, #16
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d043      	beq.n	8003328 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d03c      	beq.n	8003328 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	2210      	movs	r2, #16
 80032b4:	409a      	lsls	r2, r3
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d018      	beq.n	80032fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d108      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d024      	beq.n	8003328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	4798      	blx	r3
 80032e6:	e01f      	b.n	8003328 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
 80032f8:	e016      	b.n	8003328 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0208 	bic.w	r2, r2, #8
 8003316:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	2220      	movs	r2, #32
 800332e:	409a      	lsls	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 808e 	beq.w	8003456 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8086 	beq.w	8003456 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	2220      	movs	r2, #32
 8003350:	409a      	lsls	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b05      	cmp	r3, #5
 8003360:	d136      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0216 	bic.w	r2, r2, #22
 8003370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003380:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <HAL_DMA_IRQHandler+0x1da>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0208 	bic.w	r2, r2, #8
 80033a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a6:	223f      	movs	r2, #63	; 0x3f
 80033a8:	409a      	lsls	r2, r3
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d07d      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	4798      	blx	r3
        }
        return;
 80033ce:	e078      	b.n	80034c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01c      	beq.n	8003418 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d108      	bne.n	80033fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d030      	beq.n	8003456 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
 80033fc:	e02b      	b.n	8003456 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d027      	beq.n	8003456 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4798      	blx	r3
 800340e:	e022      	b.n	8003456 <HAL_DMA_IRQHandler+0x29e>
 8003410:	2000000c 	.word	0x2000000c
 8003414:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10f      	bne.n	8003446 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0210 	bic.w	r2, r2, #16
 8003434:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	2b00      	cmp	r3, #0
 800345c:	d032      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d022      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2205      	movs	r2, #5
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3301      	adds	r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	429a      	cmp	r2, r3
 800348c:	d307      	bcc.n	800349e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f2      	bne.n	8003482 <HAL_DMA_IRQHandler+0x2ca>
 800349c:	e000      	b.n	80034a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800349e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
 80034c0:	e000      	b.n	80034c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80034c2:	bf00      	nop
    }
  }
}
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop

080034cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	3b10      	subs	r3, #16
 80034dc:	4a14      	ldr	r2, [pc, #80]	; (8003530 <DMA_CalcBaseAndBitshift+0x64>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034e6:	4a13      	ldr	r2, [pc, #76]	; (8003534 <DMA_CalcBaseAndBitshift+0x68>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d909      	bls.n	800350e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	1d1a      	adds	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	659a      	str	r2, [r3, #88]	; 0x58
 800350c:	e007      	b.n	800351e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003516:	f023 0303 	bic.w	r3, r3, #3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	aaaaaaab 	.word	0xaaaaaaab
 8003534:	0800e588 	.word	0x0800e588

08003538 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11f      	bne.n	8003592 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d855      	bhi.n	8003604 <DMA_CheckFifoParam+0xcc>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <DMA_CheckFifoParam+0x28>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003571 	.word	0x08003571
 8003564:	08003583 	.word	0x08003583
 8003568:	08003571 	.word	0x08003571
 800356c:	08003605 	.word	0x08003605
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d045      	beq.n	8003608 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003580:	e042      	b.n	8003608 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800358a:	d13f      	bne.n	800360c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003590:	e03c      	b.n	800360c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359a:	d121      	bne.n	80035e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d836      	bhi.n	8003610 <DMA_CheckFifoParam+0xd8>
 80035a2:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <DMA_CheckFifoParam+0x70>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	080035b9 	.word	0x080035b9
 80035ac:	080035bf 	.word	0x080035bf
 80035b0:	080035b9 	.word	0x080035b9
 80035b4:	080035d1 	.word	0x080035d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      break;
 80035bc:	e02f      	b.n	800361e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d024      	beq.n	8003614 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ce:	e021      	b.n	8003614 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035d8:	d11e      	bne.n	8003618 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035de:	e01b      	b.n	8003618 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <DMA_CheckFifoParam+0xb4>
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d003      	beq.n	80035f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035ea:	e018      	b.n	800361e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      break;
 80035f0:	e015      	b.n	800361e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00e      	beq.n	800361c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
      break;
 8003602:	e00b      	b.n	800361c <DMA_CheckFifoParam+0xe4>
      break;
 8003604:	bf00      	nop
 8003606:	e00a      	b.n	800361e <DMA_CheckFifoParam+0xe6>
      break;
 8003608:	bf00      	nop
 800360a:	e008      	b.n	800361e <DMA_CheckFifoParam+0xe6>
      break;
 800360c:	bf00      	nop
 800360e:	e006      	b.n	800361e <DMA_CheckFifoParam+0xe6>
      break;
 8003610:	bf00      	nop
 8003612:	e004      	b.n	800361e <DMA_CheckFifoParam+0xe6>
      break;
 8003614:	bf00      	nop
 8003616:	e002      	b.n	800361e <DMA_CheckFifoParam+0xe6>
      break;   
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <DMA_CheckFifoParam+0xe6>
      break;
 800361c:	bf00      	nop
    }
  } 
  
  return status; 
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	; 0x24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	e159      	b.n	80038fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003648:	2201      	movs	r2, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	f040 8148 	bne.w	80038f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d00b      	beq.n	8003686 <HAL_GPIO_Init+0x5a>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d007      	beq.n	8003686 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800367a:	2b11      	cmp	r3, #17
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b12      	cmp	r3, #18
 8003684:	d130      	bne.n	80036e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2203      	movs	r2, #3
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036bc:	2201      	movs	r2, #1
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 0201 	and.w	r2, r3, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0xfc>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b12      	cmp	r3, #18
 8003726:	d123      	bne.n	8003770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	08da      	lsrs	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3208      	adds	r2, #8
 8003730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	220f      	movs	r2, #15
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	08da      	lsrs	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3208      	adds	r2, #8
 800376a:	69b9      	ldr	r1, [r7, #24]
 800376c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0203 	and.w	r2, r3, #3
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80a2 	beq.w	80038f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	4b56      	ldr	r3, [pc, #344]	; (8003910 <HAL_GPIO_Init+0x2e4>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a55      	ldr	r2, [pc, #340]	; (8003910 <HAL_GPIO_Init+0x2e4>)
 80037bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b53      	ldr	r3, [pc, #332]	; (8003910 <HAL_GPIO_Init+0x2e4>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ce:	4a51      	ldr	r2, [pc, #324]	; (8003914 <HAL_GPIO_Init+0x2e8>)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	3302      	adds	r3, #2
 80037d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	220f      	movs	r2, #15
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a48      	ldr	r2, [pc, #288]	; (8003918 <HAL_GPIO_Init+0x2ec>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d019      	beq.n	800382e <HAL_GPIO_Init+0x202>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a47      	ldr	r2, [pc, #284]	; (800391c <HAL_GPIO_Init+0x2f0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d013      	beq.n	800382a <HAL_GPIO_Init+0x1fe>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a46      	ldr	r2, [pc, #280]	; (8003920 <HAL_GPIO_Init+0x2f4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00d      	beq.n	8003826 <HAL_GPIO_Init+0x1fa>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a45      	ldr	r2, [pc, #276]	; (8003924 <HAL_GPIO_Init+0x2f8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d007      	beq.n	8003822 <HAL_GPIO_Init+0x1f6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a44      	ldr	r2, [pc, #272]	; (8003928 <HAL_GPIO_Init+0x2fc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_GPIO_Init+0x1f2>
 800381a:	2304      	movs	r3, #4
 800381c:	e008      	b.n	8003830 <HAL_GPIO_Init+0x204>
 800381e:	2307      	movs	r3, #7
 8003820:	e006      	b.n	8003830 <HAL_GPIO_Init+0x204>
 8003822:	2303      	movs	r3, #3
 8003824:	e004      	b.n	8003830 <HAL_GPIO_Init+0x204>
 8003826:	2302      	movs	r3, #2
 8003828:	e002      	b.n	8003830 <HAL_GPIO_Init+0x204>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_GPIO_Init+0x204>
 800382e:	2300      	movs	r3, #0
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f002 0203 	and.w	r2, r2, #3
 8003836:	0092      	lsls	r2, r2, #2
 8003838:	4093      	lsls	r3, r2
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003840:	4934      	ldr	r1, [pc, #208]	; (8003914 <HAL_GPIO_Init+0x2e8>)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	089b      	lsrs	r3, r3, #2
 8003846:	3302      	adds	r3, #2
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384e:	4b37      	ldr	r3, [pc, #220]	; (800392c <HAL_GPIO_Init+0x300>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003872:	4a2e      	ldr	r2, [pc, #184]	; (800392c <HAL_GPIO_Init+0x300>)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003878:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_GPIO_Init+0x300>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800389c:	4a23      	ldr	r2, [pc, #140]	; (800392c <HAL_GPIO_Init+0x300>)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_GPIO_Init+0x300>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c6:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_GPIO_Init+0x300>)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <HAL_GPIO_Init+0x300>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f0:	4a0e      	ldr	r2, [pc, #56]	; (800392c <HAL_GPIO_Init+0x300>)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3301      	adds	r3, #1
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	f67f aea2 	bls.w	8003648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003904:	bf00      	nop
 8003906:	3724      	adds	r7, #36	; 0x24
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40023800 	.word	0x40023800
 8003914:	40013800 	.word	0x40013800
 8003918:	40020000 	.word	0x40020000
 800391c:	40020400 	.word	0x40020400
 8003920:	40020800 	.word	0x40020800
 8003924:	40020c00 	.word	0x40020c00
 8003928:	40021000 	.word	0x40021000
 800392c:	40013c00 	.word	0x40013c00

08003930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	807b      	strh	r3, [r7, #2]
 800393c:	4613      	mov	r3, r2
 800393e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003940:	787b      	ldrb	r3, [r7, #1]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003946:	887a      	ldrh	r2, [r7, #2]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800394c:	e003      	b.n	8003956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800394e:	887b      	ldrh	r3, [r7, #2]
 8003950:	041a      	lsls	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	619a      	str	r2, [r3, #24]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003964:	b08f      	sub	sp, #60	; 0x3c
 8003966:	af0a      	add	r7, sp, #40	; 0x28
 8003968:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e10f      	b.n	8003b94 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f006 fd42 	bl	800a418 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2203      	movs	r2, #3
 8003998:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f003 fd35 	bl	8007422 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	687e      	ldr	r6, [r7, #4]
 80039c0:	466d      	mov	r5, sp
 80039c2:	f106 0410 	add.w	r4, r6, #16
 80039c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039d6:	1d33      	adds	r3, r6, #4
 80039d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039da:	6838      	ldr	r0, [r7, #0]
 80039dc:	f003 fc0c 	bl	80071f8 <USB_CoreInit>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0d0      	b.n	8003b94 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 fd23 	bl	8007444 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	e04a      	b.n	8003a9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	333d      	adds	r3, #61	; 0x3d
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	333c      	adds	r3, #60	; 0x3c
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	b298      	uxth	r0, r3
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	3342      	adds	r3, #66	; 0x42
 8003a40:	4602      	mov	r2, r0
 8003a42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	333f      	adds	r3, #63	; 0x3f
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3344      	adds	r3, #68	; 0x44
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3348      	adds	r3, #72	; 0x48
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3350      	adds	r3, #80	; 0x50
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	3301      	adds	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3af      	bcc.n	8003a04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e044      	b.n	8003b34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	3301      	adds	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d3b5      	bcc.n	8003aaa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	687e      	ldr	r6, [r7, #4]
 8003b46:	466d      	mov	r5, sp
 8003b48:	f106 0410 	add.w	r4, r6, #16
 8003b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b58:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b5c:	1d33      	adds	r3, r6, #4
 8003b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b60:	6838      	ldr	r0, [r7, #0]
 8003b62:	f003 fc99 	bl	8007498 <USB_DevInit>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e00d      	b.n	8003b94 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f004 fce1 	bl	8008554 <USB_DevDisconnect>

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_PCD_Start+0x1c>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e020      	b.n	8003bfa <HAL_PCD_Start+0x5e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d109      	bne.n	8003bdc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d005      	beq.n	8003bdc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 fc0d 	bl	8007400 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 fc91 	bl	8008512 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c02:	b590      	push	{r4, r7, lr}
 8003c04:	b08d      	sub	sp, #52	; 0x34
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f004 fd4f 	bl	80086bc <USB_GetMode>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 839d 	bne.w	8004360 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f004 fcb3 	bl	8008596 <USB_ReadInterrupts>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8393 	beq.w	800435e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f004 fcaa 	bl	8008596 <USB_ReadInterrupts>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d107      	bne.n	8003c5c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f002 0202 	and.w	r2, r2, #2
 8003c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f004 fc98 	bl	8008596 <USB_ReadInterrupts>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d161      	bne.n	8003d34 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0210 	bic.w	r2, r2, #16
 8003c7e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f003 020f 	and.w	r2, r3, #15
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	0c5b      	lsrs	r3, r3, #17
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d124      	bne.n	8003cf6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d035      	beq.n	8003d24 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6a38      	ldr	r0, [r7, #32]
 8003ccc:	f004 fafe 	bl	80082cc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cdc:	441a      	add	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cee:	441a      	add	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	619a      	str	r2, [r3, #24]
 8003cf4:	e016      	b.n	8003d24 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	0c5b      	lsrs	r3, r3, #17
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d110      	bne.n	8003d24 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d08:	2208      	movs	r2, #8
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6a38      	ldr	r0, [r7, #32]
 8003d0e:	f004 fadd 	bl	80082cc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1e:	441a      	add	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0210 	orr.w	r2, r2, #16
 8003d32:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f004 fc2c 	bl	8008596 <USB_ReadInterrupts>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d48:	d16e      	bne.n	8003e28 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f004 fc32 	bl	80085bc <USB_ReadDevAllOutEpInterrupt>
 8003d58:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d5a:	e062      	b.n	8003e22 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d057      	beq.n	8003e16 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f004 fc57 	bl	8008624 <USB_ReadDevOutEPInterrupt>
 8003d76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00c      	beq.n	8003d9c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2301      	movs	r3, #1
 8003d92:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fdb0 	bl	80048fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00c      	beq.n	8003dc0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db2:	461a      	mov	r2, r3
 8003db4:	2308      	movs	r3, #8
 8003db6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 feaa 	bl	8004b14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2310      	movs	r3, #16
 8003dda:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df2:	461a      	mov	r2, r3
 8003df4:	2320      	movs	r3, #32
 8003df6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	3301      	adds	r3, #1
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d199      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f004 fbb2 	bl	8008596 <USB_ReadInterrupts>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e3c:	f040 80c0 	bne.w	8003fc0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f004 fbd3 	bl	80085f0 <USB_ReadDevAllInEpInterrupt>
 8003e4a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003e50:	e0b2      	b.n	8003fb8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80a7 	beq.w	8003fac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 fbf9 	bl	8008660 <USB_ReadDevInEPInterrupt>
 8003e6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d057      	beq.n	8003f2a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	2201      	movs	r2, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69f9      	ldr	r1, [r7, #28]
 8003e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2301      	movs	r3, #1
 8003eae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d132      	bne.n	8003f1e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3348      	adds	r3, #72	; 0x48
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4403      	add	r3, r0
 8003ed8:	3344      	adds	r3, #68	; 0x44
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4419      	add	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4403      	add	r3, r0
 8003eec:	3348      	adds	r3, #72	; 0x48
 8003eee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d113      	bne.n	8003f1e <HAL_PCD_IRQHandler+0x31c>
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3350      	adds	r3, #80	; 0x50
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d108      	bne.n	8003f1e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f16:	461a      	mov	r2, r3
 8003f18:	2101      	movs	r1, #1
 8003f1a:	f004 fc01 	bl	8008720 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f006 faf8 	bl	800a51a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	461a      	mov	r2, r3
 8003f42:	2308      	movs	r3, #8
 8003f44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2310      	movs	r3, #16
 8003f60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2340      	movs	r3, #64	; 0x40
 8003f7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f94:	461a      	mov	r2, r3
 8003f96:	2302      	movs	r3, #2
 8003f98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fc1b 	bl	80047e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	3301      	adds	r3, #1
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f47f af49 	bne.w	8003e52 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f004 fae6 	bl	8008596 <USB_ReadInterrupts>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd4:	d122      	bne.n	800401c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d108      	bne.n	8004006 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fe26 	bl	8004c50 <HAL_PCDEx_LPM_Callback>
 8004004:	e002      	b.n	800400c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f006 faf4 	bl	800a5f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800401a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f004 fab8 	bl	8008596 <USB_ReadInterrupts>
 8004026:	4603      	mov	r3, r0
 8004028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004030:	d112      	bne.n	8004058 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d102      	bne.n	8004048 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f006 fab0 	bl	800a5a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004056:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f004 fa9a 	bl	8008596 <USB_ReadInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406c:	f040 80c7 	bne.w	80041fe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2110      	movs	r1, #16
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fb68 	bl	8007760 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004090:	2300      	movs	r3, #0
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004094:	e056      	b.n	8004144 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a2:	461a      	mov	r2, r3
 80040a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	461a      	mov	r2, r3
 80040f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410e:	0151      	lsls	r1, r2, #5
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	440a      	add	r2, r1
 8004114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004118:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800411c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	440a      	add	r2, r1
 8004134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004138:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800413c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	3301      	adds	r3, #1
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800414a:	429a      	cmp	r2, r3
 800414c:	d3a3      	bcc.n	8004096 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004160:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417a:	f043 030b 	orr.w	r3, r3, #11
 800417e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004190:	f043 030b 	orr.w	r3, r3, #11
 8004194:	6453      	str	r3, [r2, #68]	; 0x44
 8004196:	e015      	b.n	80041c4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80041ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041be:	f043 030b 	orr.w	r3, r3, #11
 80041c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041e8:	461a      	mov	r2, r3
 80041ea:	f004 fa99 	bl	8008720 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80041fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f004 f9c7 	bl	8008596 <USB_ReadInterrupts>
 8004208:	4603      	mov	r3, r0
 800420a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004212:	d124      	bne.n	800425e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f004 fa5d 	bl	80086d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f003 fafd 	bl	8007822 <USB_GetDevSpeed>
 8004228:	4603      	mov	r3, r0
 800422a:	461a      	mov	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681c      	ldr	r4, [r3, #0]
 8004234:	f001 f93a 	bl	80054ac <HAL_RCC_GetHCLKFreq>
 8004238:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	4620      	mov	r0, r4
 8004244:	f003 f83a 	bl	80072bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f006 f98e 	bl	800a56a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800425c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f004 f997 	bl	8008596 <USB_ReadInterrupts>
 8004268:	4603      	mov	r3, r0
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b08      	cmp	r3, #8
 8004270:	d10a      	bne.n	8004288 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f006 f96b 	bl	800a54e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f002 0208 	and.w	r2, r2, #8
 8004286:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f004 f982 	bl	8008596 <USB_ReadInterrupts>
 8004292:	4603      	mov	r3, r0
 8004294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429c:	d10f      	bne.n	80042be <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f006 f9c3 	bl	800a634 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80042bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f004 f967 	bl	8008596 <USB_ReadInterrupts>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042d2:	d10f      	bne.n	80042f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	4619      	mov	r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f006 f996 	bl	800a610 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80042f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f004 f94c 	bl	8008596 <USB_ReadInterrupts>
 80042fe:	4603      	mov	r3, r0
 8004300:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004308:	d10a      	bne.n	8004320 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f006 f9a4 	bl	800a658 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800431e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f004 f936 	bl	8008596 <USB_ReadInterrupts>
 800432a:	4603      	mov	r3, r0
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	d115      	bne.n	8004360 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f006 f994 	bl	800a674 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6859      	ldr	r1, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	e000      	b.n	8004360 <HAL_PCD_IRQHandler+0x75e>
      return;
 800435e:	bf00      	nop
    }
  }
}
 8004360:	3734      	adds	r7, #52	; 0x34
 8004362:	46bd      	mov	sp, r7
 8004364:	bd90      	pop	{r4, r7, pc}

08004366 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_PCD_SetAddress+0x1a>
 800437c:	2302      	movs	r3, #2
 800437e:	e013      	b.n	80043a8 <HAL_PCD_SetAddress+0x42>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f004 f894 	bl	80084c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	461a      	mov	r2, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	70fb      	strb	r3, [r7, #3]
 80043c2:	460b      	mov	r3, r1
 80043c4:	803b      	strh	r3, [r7, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	da0f      	bge.n	80043f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	3338      	adds	r3, #56	; 0x38
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	3304      	adds	r3, #4
 80043ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	705a      	strb	r2, [r3, #1]
 80043f4:	e00f      	b.n	8004416 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 020f 	and.w	r2, r3, #15
 80043fc:	4613      	mov	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4413      	add	r3, r2
 800440c:	3304      	adds	r3, #4
 800440e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	b2da      	uxtb	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004422:	883a      	ldrh	r2, [r7, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	78ba      	ldrb	r2, [r7, #2]
 800442c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	785b      	ldrb	r3, [r3, #1]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d004      	beq.n	8004440 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004440:	78bb      	ldrb	r3, [r7, #2]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d102      	bne.n	800444c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_PCD_EP_Open+0xaa>
 8004456:	2302      	movs	r3, #2
 8004458:	e00e      	b.n	8004478 <HAL_PCD_EP_Open+0xc8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	4618      	mov	r0, r3
 800446a:	f003 f9ff 	bl	800786c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004476:	7afb      	ldrb	r3, [r7, #11]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800448c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004490:	2b00      	cmp	r3, #0
 8004492:	da0f      	bge.n	80044b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	f003 020f 	and.w	r2, r3, #15
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	3338      	adds	r3, #56	; 0x38
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	4413      	add	r3, r2
 80044a8:	3304      	adds	r3, #4
 80044aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	705a      	strb	r2, [r3, #1]
 80044b2:	e00f      	b.n	80044d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	f003 020f 	and.w	r2, r3, #15
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4413      	add	r3, r2
 80044ca:	3304      	adds	r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_PCD_EP_Close+0x6e>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e00e      	b.n	800450c <HAL_PCD_EP_Close+0x8c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f003 fa3d 	bl	800797c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	460b      	mov	r3, r1
 8004522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004524:	7afb      	ldrb	r3, [r7, #11]
 8004526:	f003 020f 	and.w	r2, r3, #15
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4413      	add	r3, r2
 800453a:	3304      	adds	r3, #4
 800453c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2200      	movs	r2, #0
 800454e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004556:	7afb      	ldrb	r3, [r7, #11]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	b2da      	uxtb	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d102      	bne.n	8004570 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004570:	7afb      	ldrb	r3, [r7, #11]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	6979      	ldr	r1, [r7, #20]
 8004588:	f003 fd18 	bl	8007fbc <USB_EP0StartXfer>
 800458c:	e008      	b.n	80045a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	6979      	ldr	r1, [r7, #20]
 800459c:	f003 faca 	bl	8007b34 <USB_EPStartXfer>
  }

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	f003 020f 	and.w	r2, r3, #15
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80045cc:	681b      	ldr	r3, [r3, #0]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	460b      	mov	r3, r1
 80045e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ea:	7afb      	ldrb	r3, [r7, #11]
 80045ec:	f003 020f 	and.w	r2, r3, #15
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	3338      	adds	r3, #56	; 0x38
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	3304      	adds	r3, #4
 8004600:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2201      	movs	r2, #1
 8004618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	b2da      	uxtb	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d102      	bne.n	8004634 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004634:	7afb      	ldrb	r3, [r7, #11]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	6979      	ldr	r1, [r7, #20]
 800464c:	f003 fcb6 	bl	8007fbc <USB_EP0StartXfer>
 8004650:	e008      	b.n	8004664 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	6979      	ldr	r1, [r7, #20]
 8004660:	f003 fa68 	bl	8007b34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	f003 020f 	and.w	r2, r3, #15
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d901      	bls.n	800468c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e050      	b.n	800472e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800468c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004690:	2b00      	cmp	r3, #0
 8004692:	da0f      	bge.n	80046b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	3338      	adds	r3, #56	; 0x38
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	4413      	add	r3, r2
 80046a8:	3304      	adds	r3, #4
 80046aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	705a      	strb	r2, [r3, #1]
 80046b2:	e00d      	b.n	80046d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	4613      	mov	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	4413      	add	r3, r2
 80046c6:	3304      	adds	r3, #4
 80046c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_PCD_EP_SetStall+0x82>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e01e      	b.n	800472e <HAL_PCD_EP_SetStall+0xc0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68f9      	ldr	r1, [r7, #12]
 80046fe:	4618      	mov	r0, r3
 8004700:	f003 fe0d 	bl	800831e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	b2d9      	uxtb	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800471e:	461a      	mov	r2, r3
 8004720:	f003 fffe 	bl	8008720 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	460b      	mov	r3, r1
 8004740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	f003 020f 	and.w	r2, r3, #15
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	429a      	cmp	r2, r3
 800474e:	d901      	bls.n	8004754 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e042      	b.n	80047da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004758:	2b00      	cmp	r3, #0
 800475a:	da0f      	bge.n	800477c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	f003 020f 	and.w	r2, r3, #15
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	3338      	adds	r3, #56	; 0x38
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	4413      	add	r3, r2
 8004770:	3304      	adds	r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	705a      	strb	r2, [r3, #1]
 800477a:	e00f      	b.n	800479c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	4613      	mov	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	3304      	adds	r3, #4
 8004794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_PCD_EP_ClrStall+0x86>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e00e      	b.n	80047da <HAL_PCD_EP_ClrStall+0xa4>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f003 fe15 	bl	80083fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b08a      	sub	sp, #40	; 0x28
 80047e6:	af02      	add	r7, sp, #8
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	3338      	adds	r3, #56	; 0x38
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4413      	add	r3, r2
 8004806:	3304      	adds	r3, #4
 8004808:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	429a      	cmp	r2, r3
 8004814:	d901      	bls.n	800481a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e06c      	b.n	80048f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	429a      	cmp	r2, r3
 800482e:	d902      	bls.n	8004836 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3303      	adds	r3, #3
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800483e:	e02b      	b.n	8004898 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	429a      	cmp	r2, r3
 8004854:	d902      	bls.n	800485c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	3303      	adds	r3, #3
 8004860:	089b      	lsrs	r3, r3, #2
 8004862:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68d9      	ldr	r1, [r3, #12]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004874:	b2db      	uxtb	r3, r3
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4603      	mov	r3, r0
 800487a:	6978      	ldr	r0, [r7, #20]
 800487c:	f003 fcf1 	bl	8008262 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	441a      	add	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	441a      	add	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d809      	bhi.n	80048c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d203      	bcs.n	80048c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1be      	bne.n	8004840 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d811      	bhi.n	80048f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	2201      	movs	r2, #1
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	6939      	ldr	r1, [r7, #16]
 80048ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048ee:	4013      	ands	r3, r2
 80048f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	333c      	adds	r3, #60	; 0x3c
 8004914:	3304      	adds	r3, #4
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b01      	cmp	r3, #1
 8004930:	f040 80a0 	bne.w	8004a74 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d015      	beq.n	800496a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a72      	ldr	r2, [pc, #456]	; (8004b0c <PCD_EP_OutXfrComplete_int+0x210>)
 8004942:	4293      	cmp	r3, r2
 8004944:	f240 80dd 	bls.w	8004b02 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 80d7 	beq.w	8004b02 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	461a      	mov	r2, r3
 8004962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004966:	6093      	str	r3, [r2, #8]
 8004968:	e0cb      	b.n	8004b02 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	461a      	mov	r2, r3
 8004982:	2320      	movs	r3, #32
 8004984:	6093      	str	r3, [r2, #8]
 8004986:	e0bc      	b.n	8004b02 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 80b7 	bne.w	8004b02 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a5d      	ldr	r2, [pc, #372]	; (8004b0c <PCD_EP_OutXfrComplete_int+0x210>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d90f      	bls.n	80049bc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b2:	461a      	mov	r2, r3
 80049b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b8:	6093      	str	r3, [r2, #8]
 80049ba:	e0a2      	b.n	8004b02 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80049ce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	0159      	lsls	r1, r3, #5
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	440b      	add	r3, r1
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80049e2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4403      	add	r3, r0
 80049f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80049f6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a0a:	6819      	ldr	r1, [r3, #0]
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4403      	add	r3, r0
 8004a1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4419      	add	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4403      	add	r3, r0
 8004a30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a34:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d114      	bne.n	8004a66 <PCD_EP_OutXfrComplete_int+0x16a>
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d108      	bne.n	8004a66 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2101      	movs	r1, #1
 8004a62:	f003 fe5d 	bl	8008720 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f005 fd39 	bl	800a4e4 <HAL_PCD_DataOutStageCallback>
 8004a72:	e046      	b.n	8004b02 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a26      	ldr	r2, [pc, #152]	; (8004b10 <PCD_EP_OutXfrComplete_int+0x214>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d124      	bne.n	8004ac6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a98:	6093      	str	r3, [r2, #8]
 8004a9a:	e032      	b.n	8004b02 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	4619      	mov	r1, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f005 fd10 	bl	800a4e4 <HAL_PCD_DataOutStageCallback>
 8004ac4:	e01d      	b.n	8004b02 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d114      	bne.n	8004af6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d108      	bne.n	8004af6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004aee:	461a      	mov	r2, r3
 8004af0:	2100      	movs	r1, #0
 8004af2:	f003 fe15 	bl	8008720 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f005 fcf1 	bl	800a4e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	4f54300a 	.word	0x4f54300a
 8004b10:	4f54310a 	.word	0x4f54310a

08004b14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	333c      	adds	r3, #60	; 0x3c
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d90e      	bls.n	8004b68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b60:	461a      	mov	r2, r3
 8004b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f005 fca9 	bl	800a4c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d90c      	bls.n	8004b90 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d108      	bne.n	8004b90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	f003 fdc8 	bl	8008720 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	4f54300a 	.word	0x4f54300a

08004ba0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
 8004bac:	4613      	mov	r3, r2
 8004bae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d107      	bne.n	8004bce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bbe:	883b      	ldrh	r3, [r7, #0]
 8004bc0:	0419      	lsls	r1, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	629a      	str	r2, [r3, #40]	; 0x28
 8004bcc:	e028      	b.n	8004c20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4413      	add	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
 8004be0:	e00d      	b.n	8004bfe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	3340      	adds	r3, #64	; 0x40
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	73fb      	strb	r3, [r7, #15]
 8004bfe:	7bfa      	ldrb	r2, [r7, #15]
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d3ec      	bcc.n	8004be2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c08:	883b      	ldrh	r3, [r7, #0]
 8004c0a:	0418      	lsls	r0, r3, #16
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	4302      	orrs	r2, r0
 8004c18:	3340      	adds	r3, #64	; 0x40
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	887a      	ldrh	r2, [r7, #2]
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004c78:	f000 f808 	bl	8004c8c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004c7c:	4b02      	ldr	r3, [pc, #8]	; (8004c88 <HAL_PWR_PVD_IRQHandler+0x20>)
 8004c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c82:	615a      	str	r2, [r3, #20]
  }
}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40013c00 	.word	0x40013c00

08004c8c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e25b      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d075      	beq.n	8004da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cba:	4ba3      	ldr	r3, [pc, #652]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc6:	4ba0      	ldr	r3, [pc, #640]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d112      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd2:	4b9d      	ldr	r3, [pc, #628]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cde:	d10b      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce0:	4b99      	ldr	r3, [pc, #612]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d05b      	beq.n	8004da4 <HAL_RCC_OscConfig+0x108>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d157      	bne.n	8004da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e236      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d00:	d106      	bne.n	8004d10 <HAL_RCC_OscConfig+0x74>
 8004d02:	4b91      	ldr	r3, [pc, #580]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a90      	ldr	r2, [pc, #576]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e01d      	b.n	8004d4c <HAL_RCC_OscConfig+0xb0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x98>
 8004d1a:	4b8b      	ldr	r3, [pc, #556]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a8a      	ldr	r2, [pc, #552]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b88      	ldr	r3, [pc, #544]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a87      	ldr	r2, [pc, #540]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e00b      	b.n	8004d4c <HAL_RCC_OscConfig+0xb0>
 8004d34:	4b84      	ldr	r3, [pc, #528]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a83      	ldr	r2, [pc, #524]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b81      	ldr	r3, [pc, #516]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a80      	ldr	r2, [pc, #512]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fd fc46 	bl	80025e4 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d5c:	f7fd fc42 	bl	80025e4 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	; 0x64
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e1fb      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6e:	4b76      	ldr	r3, [pc, #472]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0xc0>
 8004d7a:	e014      	b.n	8004da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fd fc32 	bl	80025e4 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fd fc2e 	bl	80025e4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e1e7      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d96:	4b6c      	ldr	r3, [pc, #432]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0xe8>
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d063      	beq.n	8004e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db2:	4b65      	ldr	r3, [pc, #404]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dbe:	4b62      	ldr	r3, [pc, #392]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d11c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dca:	4b5f      	ldr	r3, [pc, #380]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d116      	bne.n	8004e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd6:	4b5c      	ldr	r3, [pc, #368]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_RCC_OscConfig+0x152>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d001      	beq.n	8004dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e1bb      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dee:	4b56      	ldr	r3, [pc, #344]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4952      	ldr	r1, [pc, #328]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e02:	e03a      	b.n	8004e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d020      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e0c:	4b4f      	ldr	r3, [pc, #316]	; (8004f4c <HAL_RCC_OscConfig+0x2b0>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fd fbe7 	bl	80025e4 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e1a:	f7fd fbe3 	bl	80025e4 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e19c      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2c:	4b46      	ldr	r3, [pc, #280]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e38:	4b43      	ldr	r3, [pc, #268]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4940      	ldr	r1, [pc, #256]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	600b      	str	r3, [r1, #0]
 8004e4c:	e015      	b.n	8004e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4e:	4b3f      	ldr	r3, [pc, #252]	; (8004f4c <HAL_RCC_OscConfig+0x2b0>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fd fbc6 	bl	80025e4 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e5c:	f7fd fbc2 	bl	80025e4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e17b      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6e:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d030      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d016      	beq.n	8004ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e8e:	4b30      	ldr	r3, [pc, #192]	; (8004f50 <HAL_RCC_OscConfig+0x2b4>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e94:	f7fd fba6 	bl	80025e4 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7fd fba2 	bl	80025e4 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e15b      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eae:	4b26      	ldr	r3, [pc, #152]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x200>
 8004eba:	e015      	b.n	8004ee8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ebc:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <HAL_RCC_OscConfig+0x2b4>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec2:	f7fd fb8f 	bl	80025e4 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eca:	f7fd fb8b 	bl	80025e4 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e144      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80a0 	beq.w	8005036 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10f      	bne.n	8004f26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	4a0e      	ldr	r2, [pc, #56]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6413      	str	r3, [r2, #64]	; 0x40
 8004f16:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f22:	2301      	movs	r3, #1
 8004f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCC_OscConfig+0x2b8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d121      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <HAL_RCC_OscConfig+0x2b8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a07      	ldr	r2, [pc, #28]	; (8004f54 <HAL_RCC_OscConfig+0x2b8>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3e:	f7fd fb51 	bl	80025e4 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f44:	e011      	b.n	8004f6a <HAL_RCC_OscConfig+0x2ce>
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	42470000 	.word	0x42470000
 8004f50:	42470e80 	.word	0x42470e80
 8004f54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f58:	f7fd fb44 	bl	80025e4 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e0fd      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6a:	4b81      	ldr	r3, [pc, #516]	; (8005170 <HAL_RCC_OscConfig+0x4d4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d106      	bne.n	8004f8c <HAL_RCC_OscConfig+0x2f0>
 8004f7e:	4b7d      	ldr	r3, [pc, #500]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	4a7c      	ldr	r2, [pc, #496]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8a:	e01c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x32a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	d10c      	bne.n	8004fae <HAL_RCC_OscConfig+0x312>
 8004f94:	4b77      	ldr	r3, [pc, #476]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	4a76      	ldr	r2, [pc, #472]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004f9a:	f043 0304 	orr.w	r3, r3, #4
 8004f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa0:	4b74      	ldr	r3, [pc, #464]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	4a73      	ldr	r2, [pc, #460]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	6713      	str	r3, [r2, #112]	; 0x70
 8004fac:	e00b      	b.n	8004fc6 <HAL_RCC_OscConfig+0x32a>
 8004fae:	4b71      	ldr	r3, [pc, #452]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	4a70      	ldr	r2, [pc, #448]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fba:	4b6e      	ldr	r3, [pc, #440]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbe:	4a6d      	ldr	r2, [pc, #436]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d015      	beq.n	8004ffa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fce:	f7fd fb09 	bl	80025e4 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd4:	e00a      	b.n	8004fec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd6:	f7fd fb05 	bl	80025e4 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e0bc      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fec:	4b61      	ldr	r3, [pc, #388]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ee      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x33a>
 8004ff8:	e014      	b.n	8005024 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffa:	f7fd faf3 	bl	80025e4 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005000:	e00a      	b.n	8005018 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7fd faef 	bl	80025e4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0a6      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005018:	4b56      	ldr	r3, [pc, #344]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1ee      	bne.n	8005002 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d105      	bne.n	8005036 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502a:	4b52      	ldr	r3, [pc, #328]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	4a51      	ldr	r2, [pc, #324]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8005030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005034:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8092 	beq.w	8005164 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005040:	4b4c      	ldr	r3, [pc, #304]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 030c 	and.w	r3, r3, #12
 8005048:	2b08      	cmp	r3, #8
 800504a:	d05c      	beq.n	8005106 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d141      	bne.n	80050d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005054:	4b48      	ldr	r3, [pc, #288]	; (8005178 <HAL_RCC_OscConfig+0x4dc>)
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505a:	f7fd fac3 	bl	80025e4 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005062:	f7fd fabf 	bl	80025e4 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e078      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005074:	4b3f      	ldr	r3, [pc, #252]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f0      	bne.n	8005062 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	019b      	lsls	r3, r3, #6
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	085b      	lsrs	r3, r3, #1
 8005098:	3b01      	subs	r3, #1
 800509a:	041b      	lsls	r3, r3, #16
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	4933      	ldr	r1, [pc, #204]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050aa:	4b33      	ldr	r3, [pc, #204]	; (8005178 <HAL_RCC_OscConfig+0x4dc>)
 80050ac:	2201      	movs	r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b0:	f7fd fa98 	bl	80025e4 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b8:	f7fd fa94 	bl	80025e4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e04d      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	4b2a      	ldr	r3, [pc, #168]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x41c>
 80050d6:	e045      	b.n	8005164 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d8:	4b27      	ldr	r3, [pc, #156]	; (8005178 <HAL_RCC_OscConfig+0x4dc>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050de:	f7fd fa81 	bl	80025e4 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e6:	f7fd fa7d 	bl	80025e4 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e036      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f8:	4b1e      	ldr	r3, [pc, #120]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f0      	bne.n	80050e6 <HAL_RCC_OscConfig+0x44a>
 8005104:	e02e      	b.n	8005164 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e029      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005112:	4b18      	ldr	r3, [pc, #96]	; (8005174 <HAL_RCC_OscConfig+0x4d8>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	429a      	cmp	r2, r3
 8005124:	d11c      	bne.n	8005160 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005130:	429a      	cmp	r2, r3
 8005132:	d115      	bne.n	8005160 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800513a:	4013      	ands	r3, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d10d      	bne.n	8005160 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d106      	bne.n	8005160 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40007000 	.word	0x40007000
 8005174:	40023800 	.word	0x40023800
 8005178:	42470060 	.word	0x42470060

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cc      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b68      	ldr	r3, [pc, #416]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b65      	ldr	r3, [pc, #404]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3f      	ldr	r3, [pc, #252]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e067      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b37      	ldr	r3, [pc, #220]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4934      	ldr	r1, [pc, #208]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fd f9ba 	bl	80025e4 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fd f9b6 	bl	80025e4 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b22      	ldr	r3, [pc, #136]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4601      	mov	r1, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	5cd3      	ldrb	r3, [r2, r3]
 8005316:	fa21 f303 	lsr.w	r3, r1, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fd f91a 	bl	800255c <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	0800e570 	.word	0x0800e570
 8005340:	2000000c 	.word	0x2000000c
 8005344:	20000010 	.word	0x20000010

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	2300      	movs	r3, #0
 8005358:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800535e:	4b50      	ldr	r3, [pc, #320]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
 8005366:	2b04      	cmp	r3, #4
 8005368:	d007      	beq.n	800537a <HAL_RCC_GetSysClockFreq+0x32>
 800536a:	2b08      	cmp	r3, #8
 800536c:	d008      	beq.n	8005380 <HAL_RCC_GetSysClockFreq+0x38>
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 808d 	bne.w	800548e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005374:	4b4b      	ldr	r3, [pc, #300]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005376:	60bb      	str	r3, [r7, #8]
       break;
 8005378:	e08c      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800537a:	4b4b      	ldr	r3, [pc, #300]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800537c:	60bb      	str	r3, [r7, #8]
      break;
 800537e:	e089      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005380:	4b47      	ldr	r3, [pc, #284]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005388:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800538a:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x158>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d023      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005396:	4b42      	ldr	r3, [pc, #264]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	099b      	lsrs	r3, r3, #6
 800539c:	f04f 0400 	mov.w	r4, #0
 80053a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	ea03 0501 	and.w	r5, r3, r1
 80053ac:	ea04 0602 	and.w	r6, r4, r2
 80053b0:	4a3d      	ldr	r2, [pc, #244]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80053b2:	fb02 f106 	mul.w	r1, r2, r6
 80053b6:	2200      	movs	r2, #0
 80053b8:	fb02 f205 	mul.w	r2, r2, r5
 80053bc:	440a      	add	r2, r1
 80053be:	493a      	ldr	r1, [pc, #232]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80053c0:	fba5 0101 	umull	r0, r1, r5, r1
 80053c4:	1853      	adds	r3, r2, r1
 80053c6:	4619      	mov	r1, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f04f 0400 	mov.w	r4, #0
 80053ce:	461a      	mov	r2, r3
 80053d0:	4623      	mov	r3, r4
 80053d2:	f7fb fc61 	bl	8000c98 <__aeabi_uldivmod>
 80053d6:	4603      	mov	r3, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	e049      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053de:	4b30      	ldr	r3, [pc, #192]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x158>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	099b      	lsrs	r3, r3, #6
 80053e4:	f04f 0400 	mov.w	r4, #0
 80053e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	ea03 0501 	and.w	r5, r3, r1
 80053f4:	ea04 0602 	and.w	r6, r4, r2
 80053f8:	4629      	mov	r1, r5
 80053fa:	4632      	mov	r2, r6
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	f04f 0400 	mov.w	r4, #0
 8005404:	0154      	lsls	r4, r2, #5
 8005406:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800540a:	014b      	lsls	r3, r1, #5
 800540c:	4619      	mov	r1, r3
 800540e:	4622      	mov	r2, r4
 8005410:	1b49      	subs	r1, r1, r5
 8005412:	eb62 0206 	sbc.w	r2, r2, r6
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	f04f 0400 	mov.w	r4, #0
 800541e:	0194      	lsls	r4, r2, #6
 8005420:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005424:	018b      	lsls	r3, r1, #6
 8005426:	1a5b      	subs	r3, r3, r1
 8005428:	eb64 0402 	sbc.w	r4, r4, r2
 800542c:	f04f 0100 	mov.w	r1, #0
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	00e2      	lsls	r2, r4, #3
 8005436:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800543a:	00d9      	lsls	r1, r3, #3
 800543c:	460b      	mov	r3, r1
 800543e:	4614      	mov	r4, r2
 8005440:	195b      	adds	r3, r3, r5
 8005442:	eb44 0406 	adc.w	r4, r4, r6
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	02a2      	lsls	r2, r4, #10
 8005450:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005454:	0299      	lsls	r1, r3, #10
 8005456:	460b      	mov	r3, r1
 8005458:	4614      	mov	r4, r2
 800545a:	4618      	mov	r0, r3
 800545c:	4621      	mov	r1, r4
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f04f 0400 	mov.w	r4, #0
 8005464:	461a      	mov	r2, r3
 8005466:	4623      	mov	r3, r4
 8005468:	f7fb fc16 	bl	8000c98 <__aeabi_uldivmod>
 800546c:	4603      	mov	r3, r0
 800546e:	460c      	mov	r4, r1
 8005470:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	0c1b      	lsrs	r3, r3, #16
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	3301      	adds	r3, #1
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	fbb2 f3f3 	udiv	r3, r2, r3
 800548a:	60bb      	str	r3, [r7, #8]
      break;
 800548c:	e002      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005490:	60bb      	str	r3, [r7, #8]
      break;
 8005492:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005494:	68bb      	ldr	r3, [r7, #8]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549e:	bf00      	nop
 80054a0:	40023800 	.word	0x40023800
 80054a4:	00f42400 	.word	0x00f42400
 80054a8:	017d7840 	.word	0x017d7840

080054ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054b2:	681b      	ldr	r3, [r3, #0]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	2000000c 	.word	0x2000000c

080054c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054c8:	f7ff fff0 	bl	80054ac <HAL_RCC_GetHCLKFreq>
 80054cc:	4601      	mov	r1, r0
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	0a9b      	lsrs	r3, r3, #10
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	4a03      	ldr	r2, [pc, #12]	; (80054e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054da:	5cd3      	ldrb	r3, [r2, r3]
 80054dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40023800 	.word	0x40023800
 80054e8:	0800e580 	.word	0x0800e580

080054ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054f0:	f7ff ffdc 	bl	80054ac <HAL_RCC_GetHCLKFreq>
 80054f4:	4601      	mov	r1, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <HAL_RCC_GetPCLK2Freq+0x20>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0b5b      	lsrs	r3, r3, #13
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4a03      	ldr	r2, [pc, #12]	; (8005510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	0800e580 	.word	0x0800e580

08005514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e01d      	b.n	8005562 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fc fdca 	bl	80020d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f000 fc0c 	bl	8005d70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b06      	cmp	r3, #6
 8005592:	d007      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e01d      	b.n	8005600 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f815 	bl	8005608 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2202      	movs	r2, #2
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4619      	mov	r1, r3
 80055f0:	4610      	mov	r0, r2
 80055f2:	f000 fbbd 	bl	8005d70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2201      	movs	r2, #1
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fe44 	bl	80062bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a10      	ldr	r2, [pc, #64]	; (800567c <HAL_TIM_PWM_Start+0x60>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d107      	bne.n	800564e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800564c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b06      	cmp	r3, #6
 800565e:	d007      	beq.n	8005670 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40010000 	.word	0x40010000

08005680 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e083      	b.n	800579c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d106      	bne.n	80056ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7fc fd77 	bl	800219c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c4:	f023 0307 	bic.w	r3, r3, #7
 80056c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f000 fb4b 	bl	8005d70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	4313      	orrs	r3, r2
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005720:	f023 030c 	bic.w	r3, r3, #12
 8005724:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800572c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	4313      	orrs	r3, r2
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	011a      	lsls	r2, r3, #4
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	031b      	lsls	r3, r3, #12
 8005750:	4313      	orrs	r3, r2
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800575e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005766:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	4313      	orrs	r3, r2
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_TIM_Encoder_Start+0x16>
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d008      	beq.n	80057ca <HAL_TIM_Encoder_Start+0x26>
 80057b8:	e00f      	b.n	80057da <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2201      	movs	r2, #1
 80057c0:	2100      	movs	r1, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fd7a 	bl	80062bc <TIM_CCxChannelCmd>
      break;
 80057c8:	e016      	b.n	80057f8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	2104      	movs	r1, #4
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fd72 	bl	80062bc <TIM_CCxChannelCmd>
      break;
 80057d8:	e00e      	b.n	80057f8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2201      	movs	r2, #1
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fd6a 	bl	80062bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2201      	movs	r2, #1
 80057ee:	2104      	movs	r1, #4
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fd63 	bl	80062bc <TIM_CCxChannelCmd>
      break;
 80057f6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b02      	cmp	r3, #2
 8005826:	d122      	bne.n	800586e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b02      	cmp	r3, #2
 8005834:	d11b      	bne.n	800586e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f06f 0202 	mvn.w	r2, #2
 800583e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fa6c 	bl	8005d32 <HAL_TIM_IC_CaptureCallback>
 800585a:	e005      	b.n	8005868 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fa5e 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa6f 	bl	8005d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b04      	cmp	r3, #4
 800587a:	d122      	bne.n	80058c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b04      	cmp	r3, #4
 8005888:	d11b      	bne.n	80058c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f06f 0204 	mvn.w	r2, #4
 8005892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fa42 	bl	8005d32 <HAL_TIM_IC_CaptureCallback>
 80058ae:	e005      	b.n	80058bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa34 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fa45 	bl	8005d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d122      	bne.n	8005916 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d11b      	bne.n	8005916 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f06f 0208 	mvn.w	r2, #8
 80058e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2204      	movs	r2, #4
 80058ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fa18 	bl	8005d32 <HAL_TIM_IC_CaptureCallback>
 8005902:	e005      	b.n	8005910 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fa0a 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa1b 	bl	8005d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b10      	cmp	r3, #16
 8005922:	d122      	bne.n	800596a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b10      	cmp	r3, #16
 8005930:	d11b      	bne.n	800596a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f06f 0210 	mvn.w	r2, #16
 800593a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2208      	movs	r2, #8
 8005940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f9ee 	bl	8005d32 <HAL_TIM_IC_CaptureCallback>
 8005956:	e005      	b.n	8005964 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f9e0 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9f1 	bl	8005d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d10e      	bne.n	8005996 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b01      	cmp	r3, #1
 8005984:	d107      	bne.n	8005996 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f06f 0201 	mvn.w	r2, #1
 800598e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fb fc97 	bl	80012c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a0:	2b80      	cmp	r3, #128	; 0x80
 80059a2:	d10e      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d107      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fd97 	bl	80064f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d10e      	bne.n	80059ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d107      	bne.n	80059ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f9b6 	bl	8005d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d10e      	bne.n	8005a1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d107      	bne.n	8005a1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f06f 0220 	mvn.w	r2, #32
 8005a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fd61 	bl	80064dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e0b4      	b.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b0c      	cmp	r3, #12
 8005a52:	f200 809f 	bhi.w	8005b94 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005a56:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a91 	.word	0x08005a91
 8005a60:	08005b95 	.word	0x08005b95
 8005a64:	08005b95 	.word	0x08005b95
 8005a68:	08005b95 	.word	0x08005b95
 8005a6c:	08005ad1 	.word	0x08005ad1
 8005a70:	08005b95 	.word	0x08005b95
 8005a74:	08005b95 	.word	0x08005b95
 8005a78:	08005b95 	.word	0x08005b95
 8005a7c:	08005b13 	.word	0x08005b13
 8005a80:	08005b95 	.word	0x08005b95
 8005a84:	08005b95 	.word	0x08005b95
 8005a88:	08005b95 	.word	0x08005b95
 8005a8c:	08005b53 	.word	0x08005b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f9ea 	bl	8005e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0208 	orr.w	r2, r2, #8
 8005aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0204 	bic.w	r2, r2, #4
 8005aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	619a      	str	r2, [r3, #24]
      break;
 8005ace:	e062      	b.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fa30 	bl	8005f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699a      	ldr	r2, [r3, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6999      	ldr	r1, [r3, #24]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	021a      	lsls	r2, r3, #8
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	619a      	str	r2, [r3, #24]
      break;
 8005b10:	e041      	b.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fa7b 	bl	8006014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0208 	orr.w	r2, r2, #8
 8005b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0204 	bic.w	r2, r2, #4
 8005b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69d9      	ldr	r1, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	61da      	str	r2, [r3, #28]
      break;
 8005b50:	e021      	b.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fac5 	bl	80060e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69d9      	ldr	r1, [r3, #28]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	021a      	lsls	r2, r3, #8
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	61da      	str	r2, [r3, #28]
      break;
 8005b92:	e000      	b.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005b94:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_TIM_ConfigClockSource+0x18>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e0a6      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x166>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d067      	beq.n	8005cd0 <HAL_TIM_ConfigClockSource+0x120>
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d80b      	bhi.n	8005c1c <HAL_TIM_ConfigClockSource+0x6c>
 8005c04:	2b10      	cmp	r3, #16
 8005c06:	d073      	beq.n	8005cf0 <HAL_TIM_ConfigClockSource+0x140>
 8005c08:	2b10      	cmp	r3, #16
 8005c0a:	d802      	bhi.n	8005c12 <HAL_TIM_ConfigClockSource+0x62>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d06f      	beq.n	8005cf0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c10:	e078      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d06c      	beq.n	8005cf0 <HAL_TIM_ConfigClockSource+0x140>
 8005c16:	2b30      	cmp	r3, #48	; 0x30
 8005c18:	d06a      	beq.n	8005cf0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005c1a:	e073      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c1c:	2b70      	cmp	r3, #112	; 0x70
 8005c1e:	d00d      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0x8c>
 8005c20:	2b70      	cmp	r3, #112	; 0x70
 8005c22:	d804      	bhi.n	8005c2e <HAL_TIM_ConfigClockSource+0x7e>
 8005c24:	2b50      	cmp	r3, #80	; 0x50
 8005c26:	d033      	beq.n	8005c90 <HAL_TIM_ConfigClockSource+0xe0>
 8005c28:	2b60      	cmp	r3, #96	; 0x60
 8005c2a:	d041      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005c2c:	e06a      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c32:	d066      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x152>
 8005c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c38:	d017      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c3a:	e063      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	6899      	ldr	r1, [r3, #8]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f000 fb16 	bl	800627c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	609a      	str	r2, [r3, #8]
      break;
 8005c68:	e04c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6899      	ldr	r1, [r3, #8]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f000 faff 	bl	800627c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c8c:	609a      	str	r2, [r3, #8]
      break;
 8005c8e:	e039      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f000 fa73 	bl	8006188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2150      	movs	r1, #80	; 0x50
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 facc 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005cae:	e029      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6859      	ldr	r1, [r3, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f000 fa92 	bl	80061e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2160      	movs	r1, #96	; 0x60
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fabc 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005cce:	e019      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6859      	ldr	r1, [r3, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f000 fa53 	bl	8006188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2140      	movs	r1, #64	; 0x40
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 faac 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005cee:	e009      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f000 faa3 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005d00:	e000      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a34      	ldr	r2, [pc, #208]	; (8005e54 <TIM_Base_SetConfig+0xe4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00f      	beq.n	8005da8 <TIM_Base_SetConfig+0x38>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8e:	d00b      	beq.n	8005da8 <TIM_Base_SetConfig+0x38>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a31      	ldr	r2, [pc, #196]	; (8005e58 <TIM_Base_SetConfig+0xe8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d007      	beq.n	8005da8 <TIM_Base_SetConfig+0x38>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a30      	ldr	r2, [pc, #192]	; (8005e5c <TIM_Base_SetConfig+0xec>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <TIM_Base_SetConfig+0x38>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a2f      	ldr	r2, [pc, #188]	; (8005e60 <TIM_Base_SetConfig+0xf0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d108      	bne.n	8005dba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a25      	ldr	r2, [pc, #148]	; (8005e54 <TIM_Base_SetConfig+0xe4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01b      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc8:	d017      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a22      	ldr	r2, [pc, #136]	; (8005e58 <TIM_Base_SetConfig+0xe8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d013      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a21      	ldr	r2, [pc, #132]	; (8005e5c <TIM_Base_SetConfig+0xec>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00f      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a20      	ldr	r2, [pc, #128]	; (8005e60 <TIM_Base_SetConfig+0xf0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00b      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a1f      	ldr	r2, [pc, #124]	; (8005e64 <TIM_Base_SetConfig+0xf4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <TIM_Base_SetConfig+0xf8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1d      	ldr	r2, [pc, #116]	; (8005e6c <TIM_Base_SetConfig+0xfc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d108      	bne.n	8005e0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a08      	ldr	r2, [pc, #32]	; (8005e54 <TIM_Base_SetConfig+0xe4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d103      	bne.n	8005e40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	615a      	str	r2, [r3, #20]
}
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	40000c00 	.word	0x40000c00
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800

08005e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f023 0201 	bic.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0303 	bic.w	r3, r3, #3
 8005ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f023 0302 	bic.w	r3, r3, #2
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a1c      	ldr	r2, [pc, #112]	; (8005f38 <TIM_OC1_SetConfig+0xc8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d10c      	bne.n	8005ee6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0308 	bic.w	r3, r3, #8
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f023 0304 	bic.w	r3, r3, #4
 8005ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <TIM_OC1_SetConfig+0xc8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d111      	bne.n	8005f12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	621a      	str	r2, [r3, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40010000 	.word	0x40010000

08005f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f023 0210 	bic.w	r2, r3, #16
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f023 0320 	bic.w	r3, r3, #32
 8005f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <TIM_OC2_SetConfig+0xd4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d10d      	bne.n	8005fb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a15      	ldr	r2, [pc, #84]	; (8006010 <TIM_OC2_SetConfig+0xd4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d113      	bne.n	8005fe8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40010000 	.word	0x40010000

08006014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0303 	bic.w	r3, r3, #3
 800604a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800605c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <TIM_OC3_SetConfig+0xd0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10d      	bne.n	800608e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800608c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a14      	ldr	r2, [pc, #80]	; (80060e4 <TIM_OC3_SetConfig+0xd0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d113      	bne.n	80060be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800609c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	621a      	str	r2, [r3, #32]
}
 80060d8:	bf00      	nop
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	40010000 	.word	0x40010000

080060e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	031b      	lsls	r3, r3, #12
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a10      	ldr	r2, [pc, #64]	; (8006184 <TIM_OC4_SetConfig+0x9c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d109      	bne.n	800615c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800614e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	019b      	lsls	r3, r3, #6
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40010000 	.word	0x40010000

08006188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f023 030a 	bic.w	r3, r3, #10
 80061c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b087      	sub	sp, #28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f023 0210 	bic.w	r2, r3, #16
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	031b      	lsls	r3, r3, #12
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	f043 0307 	orr.w	r3, r3, #7
 8006268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	609a      	str	r2, [r3, #8]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	431a      	orrs	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 031f 	and.w	r3, r3, #31
 80062ce:	2201      	movs	r2, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1a      	ldr	r2, [r3, #32]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	fa01 f303 	lsl.w	r3, r1, r3
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2204      	movs	r2, #4
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f000 f8f3 	bl	8006504 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800632c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b06      	cmp	r3, #6
 800633e:	d007      	beq.n	8006350 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006370:	2302      	movs	r3, #2
 8006372:	e050      	b.n	8006416 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1c      	ldr	r2, [pc, #112]	; (8006424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d018      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d013      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00e      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a16      	ldr	r2, [pc, #88]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d009      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a15      	ldr	r2, [pc, #84]	; (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d004      	beq.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a13      	ldr	r2, [pc, #76]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d10c      	bne.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40010000 	.word	0x40010000
 8006428:	40000400 	.word	0x40000400
 800642c:	40000800 	.word	0x40000800
 8006430:	40000c00 	.word	0x40000c00
 8006434:	40014000 	.word	0x40014000

08006438 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006450:	2302      	movs	r3, #2
 8006452:	e03d      	b.n	80064d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	2204      	movs	r2, #4
 8006518:	fa02 f303 	lsl.w	r3, r2, r3
 800651c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a1a      	ldr	r2, [r3, #32]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	43db      	mvns	r3, r3
 8006526:	401a      	ands	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1a      	ldr	r2, [r3, #32]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	fa01 f303 	lsl.w	r3, r1, r3
 800653c:	431a      	orrs	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e03f      	b.n	80065e0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fb ff19 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2224      	movs	r2, #36	; 0x24
 800657e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006590:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fab4 	bl	8006b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695a      	ldr	r2, [r3, #20]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d140      	bne.n	8006684 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <HAL_UART_Receive_IT+0x26>
 8006608:	88fb      	ldrh	r3, [r7, #6]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e039      	b.n	8006686 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_UART_Receive_IT+0x38>
 800661c:	2302      	movs	r3, #2
 800661e:	e032      	b.n	8006686 <HAL_UART_Receive_IT+0x9e>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	88fa      	ldrh	r2, [r7, #6]
 8006638:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2222      	movs	r2, #34	; 0x22
 8006644:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800665e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0220 	orr.w	r2, r2, #32
 800667e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	e000      	b.n	8006686 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006684:	2302      	movs	r3, #2
  }
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10d      	bne.n	80066e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d008      	beq.n	80066e6 <HAL_UART_IRQHandler+0x52>
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f98c 	bl	80069fc <UART_Receive_IT>
      return;
 80066e4:	e0d1      	b.n	800688a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80b0 	beq.w	800684e <HAL_UART_IRQHandler+0x1ba>
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d105      	bne.n	8006704 <HAL_UART_IRQHandler+0x70>
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 80a5 	beq.w	800684e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <HAL_UART_IRQHandler+0x90>
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671c:	f043 0201 	orr.w	r2, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_UART_IRQHandler+0xb0>
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673c:	f043 0202 	orr.w	r2, r3, #2
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_UART_IRQHandler+0xd0>
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675c:	f043 0204 	orr.w	r2, r3, #4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00f      	beq.n	800678e <HAL_UART_IRQHandler+0xfa>
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	d104      	bne.n	8006782 <HAL_UART_IRQHandler+0xee>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	f043 0208 	orr.w	r2, r3, #8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d078      	beq.n	8006888 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <HAL_UART_IRQHandler+0x11c>
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f926 	bl	80069fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	bf0c      	ite	eq
 80067be:	2301      	moveq	r3, #1
 80067c0:	2300      	movne	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d102      	bne.n	80067d8 <HAL_UART_IRQHandler+0x144>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d031      	beq.n	800683c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f86f 	bl	80068bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	d123      	bne.n	8006834 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695a      	ldr	r2, [r3, #20]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006800:	2b00      	cmp	r3, #0
 8006802:	d013      	beq.n	800682c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006808:	4a21      	ldr	r2, [pc, #132]	; (8006890 <HAL_UART_IRQHandler+0x1fc>)
 800680a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006810:	4618      	mov	r0, r3
 8006812:	f7fc fcaf 	bl	8003174 <HAL_DMA_Abort_IT>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d016      	beq.n	800684a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006826:	4610      	mov	r0, r2
 8006828:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682a:	e00e      	b.n	800684a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f83b 	bl	80068a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006832:	e00a      	b.n	800684a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f837 	bl	80068a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683a:	e006      	b.n	800684a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f833 	bl	80068a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006848:	e01e      	b.n	8006888 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684a:	bf00      	nop
    return;
 800684c:	e01c      	b.n	8006888 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <HAL_UART_IRQHandler+0x1d6>
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f85c 	bl	8006920 <UART_Transmit_IT>
    return;
 8006868:	e00f      	b.n	800688a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <HAL_UART_IRQHandler+0x1f6>
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f8a4 	bl	80069cc <UART_EndTransmit_IT>
    return;
 8006884:	bf00      	nop
 8006886:	e000      	b.n	800688a <HAL_UART_IRQHandler+0x1f6>
    return;
 8006888:	bf00      	nop
  }
}
 800688a:	3720      	adds	r7, #32
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	080068f9 	.word	0x080068f9

08006894 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695a      	ldr	r2, [r3, #20]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0201 	bic.w	r2, r2, #1
 80068e2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff ffc8 	bl	80068a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b21      	cmp	r3, #33	; 0x21
 8006932:	d144      	bne.n	80069be <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693c:	d11a      	bne.n	8006974 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006952:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d105      	bne.n	8006968 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	1c9a      	adds	r2, r3, #2
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	621a      	str	r2, [r3, #32]
 8006966:	e00e      	b.n	8006986 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	621a      	str	r2, [r3, #32]
 8006972:	e008      	b.n	8006986 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	1c59      	adds	r1, r3, #1
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6211      	str	r1, [r2, #32]
 800697e:	781a      	ldrb	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29b      	uxth	r3, r3
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4619      	mov	r1, r3
 8006994:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10f      	bne.n	80069ba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e000      	b.n	80069c0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff ff51 	bl	8006894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b22      	cmp	r3, #34	; 0x22
 8006a0e:	d171      	bne.n	8006af4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a18:	d123      	bne.n	8006a62 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10e      	bne.n	8006a46 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3e:	1c9a      	adds	r2, r3, #2
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	629a      	str	r2, [r3, #40]	; 0x28
 8006a44:	e029      	b.n	8006a9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a60:	e01b      	b.n	8006a9a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6858      	ldr	r0, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	1c59      	adds	r1, r3, #1
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6291      	str	r1, [r2, #40]	; 0x28
 8006a7a:	b2c2      	uxtb	r2, r0
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	e00c      	b.n	8006a9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	1c58      	adds	r0, r3, #1
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	6288      	str	r0, [r1, #40]	; 0x28
 8006a92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d120      	bne.n	8006af0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0220 	bic.w	r2, r2, #32
 8006abc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006acc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695a      	ldr	r2, [r3, #20]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fa fbe2 	bl	80012b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	e002      	b.n	8006af6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e000      	b.n	8006af6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006af4:	2302      	movs	r3, #2
  }
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b42:	f023 030c 	bic.w	r3, r3, #12
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6e:	f040 818b 	bne.w	8006e88 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4ac1      	ldr	r2, [pc, #772]	; (8006e7c <UART_SetConfig+0x37c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d005      	beq.n	8006b88 <UART_SetConfig+0x88>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4abf      	ldr	r2, [pc, #764]	; (8006e80 <UART_SetConfig+0x380>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	f040 80bd 	bne.w	8006d02 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b88:	f7fe fcb0 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
 8006b8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	461d      	mov	r5, r3
 8006b92:	f04f 0600 	mov.w	r6, #0
 8006b96:	46a8      	mov	r8, r5
 8006b98:	46b1      	mov	r9, r6
 8006b9a:	eb18 0308 	adds.w	r3, r8, r8
 8006b9e:	eb49 0409 	adc.w	r4, r9, r9
 8006ba2:	4698      	mov	r8, r3
 8006ba4:	46a1      	mov	r9, r4
 8006ba6:	eb18 0805 	adds.w	r8, r8, r5
 8006baa:	eb49 0906 	adc.w	r9, r9, r6
 8006bae:	f04f 0100 	mov.w	r1, #0
 8006bb2:	f04f 0200 	mov.w	r2, #0
 8006bb6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bbe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bc2:	4688      	mov	r8, r1
 8006bc4:	4691      	mov	r9, r2
 8006bc6:	eb18 0005 	adds.w	r0, r8, r5
 8006bca:	eb49 0106 	adc.w	r1, r9, r6
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	461d      	mov	r5, r3
 8006bd4:	f04f 0600 	mov.w	r6, #0
 8006bd8:	196b      	adds	r3, r5, r5
 8006bda:	eb46 0406 	adc.w	r4, r6, r6
 8006bde:	461a      	mov	r2, r3
 8006be0:	4623      	mov	r3, r4
 8006be2:	f7fa f859 	bl	8000c98 <__aeabi_uldivmod>
 8006be6:	4603      	mov	r3, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	461a      	mov	r2, r3
 8006bec:	4ba5      	ldr	r3, [pc, #660]	; (8006e84 <UART_SetConfig+0x384>)
 8006bee:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	461d      	mov	r5, r3
 8006bfc:	f04f 0600 	mov.w	r6, #0
 8006c00:	46a9      	mov	r9, r5
 8006c02:	46b2      	mov	sl, r6
 8006c04:	eb19 0309 	adds.w	r3, r9, r9
 8006c08:	eb4a 040a 	adc.w	r4, sl, sl
 8006c0c:	4699      	mov	r9, r3
 8006c0e:	46a2      	mov	sl, r4
 8006c10:	eb19 0905 	adds.w	r9, r9, r5
 8006c14:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c18:	f04f 0100 	mov.w	r1, #0
 8006c1c:	f04f 0200 	mov.w	r2, #0
 8006c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c2c:	4689      	mov	r9, r1
 8006c2e:	4692      	mov	sl, r2
 8006c30:	eb19 0005 	adds.w	r0, r9, r5
 8006c34:	eb4a 0106 	adc.w	r1, sl, r6
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	461d      	mov	r5, r3
 8006c3e:	f04f 0600 	mov.w	r6, #0
 8006c42:	196b      	adds	r3, r5, r5
 8006c44:	eb46 0406 	adc.w	r4, r6, r6
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4623      	mov	r3, r4
 8006c4c:	f7fa f824 	bl	8000c98 <__aeabi_uldivmod>
 8006c50:	4603      	mov	r3, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	461a      	mov	r2, r3
 8006c56:	4b8b      	ldr	r3, [pc, #556]	; (8006e84 <UART_SetConfig+0x384>)
 8006c58:	fba3 1302 	umull	r1, r3, r3, r2
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	2164      	movs	r1, #100	; 0x64
 8006c60:	fb01 f303 	mul.w	r3, r1, r3
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	3332      	adds	r3, #50	; 0x32
 8006c6a:	4a86      	ldr	r2, [pc, #536]	; (8006e84 <UART_SetConfig+0x384>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c78:	4498      	add	r8, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	461d      	mov	r5, r3
 8006c7e:	f04f 0600 	mov.w	r6, #0
 8006c82:	46a9      	mov	r9, r5
 8006c84:	46b2      	mov	sl, r6
 8006c86:	eb19 0309 	adds.w	r3, r9, r9
 8006c8a:	eb4a 040a 	adc.w	r4, sl, sl
 8006c8e:	4699      	mov	r9, r3
 8006c90:	46a2      	mov	sl, r4
 8006c92:	eb19 0905 	adds.w	r9, r9, r5
 8006c96:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c9a:	f04f 0100 	mov.w	r1, #0
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006caa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cae:	4689      	mov	r9, r1
 8006cb0:	4692      	mov	sl, r2
 8006cb2:	eb19 0005 	adds.w	r0, r9, r5
 8006cb6:	eb4a 0106 	adc.w	r1, sl, r6
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	461d      	mov	r5, r3
 8006cc0:	f04f 0600 	mov.w	r6, #0
 8006cc4:	196b      	adds	r3, r5, r5
 8006cc6:	eb46 0406 	adc.w	r4, r6, r6
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4623      	mov	r3, r4
 8006cce:	f7f9 ffe3 	bl	8000c98 <__aeabi_uldivmod>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4b6a      	ldr	r3, [pc, #424]	; (8006e84 <UART_SetConfig+0x384>)
 8006cda:	fba3 1302 	umull	r1, r3, r3, r2
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	2164      	movs	r1, #100	; 0x64
 8006ce2:	fb01 f303 	mul.w	r3, r1, r3
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	3332      	adds	r3, #50	; 0x32
 8006cec:	4a65      	ldr	r2, [pc, #404]	; (8006e84 <UART_SetConfig+0x384>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	f003 0207 	and.w	r2, r3, #7
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4442      	add	r2, r8
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	e26f      	b.n	80071e2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d02:	f7fe fbdf 	bl	80054c4 <HAL_RCC_GetPCLK1Freq>
 8006d06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	f04f 0600 	mov.w	r6, #0
 8006d10:	46a8      	mov	r8, r5
 8006d12:	46b1      	mov	r9, r6
 8006d14:	eb18 0308 	adds.w	r3, r8, r8
 8006d18:	eb49 0409 	adc.w	r4, r9, r9
 8006d1c:	4698      	mov	r8, r3
 8006d1e:	46a1      	mov	r9, r4
 8006d20:	eb18 0805 	adds.w	r8, r8, r5
 8006d24:	eb49 0906 	adc.w	r9, r9, r6
 8006d28:	f04f 0100 	mov.w	r1, #0
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d3c:	4688      	mov	r8, r1
 8006d3e:	4691      	mov	r9, r2
 8006d40:	eb18 0005 	adds.w	r0, r8, r5
 8006d44:	eb49 0106 	adc.w	r1, r9, r6
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	461d      	mov	r5, r3
 8006d4e:	f04f 0600 	mov.w	r6, #0
 8006d52:	196b      	adds	r3, r5, r5
 8006d54:	eb46 0406 	adc.w	r4, r6, r6
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4623      	mov	r3, r4
 8006d5c:	f7f9 ff9c 	bl	8000c98 <__aeabi_uldivmod>
 8006d60:	4603      	mov	r3, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	461a      	mov	r2, r3
 8006d66:	4b47      	ldr	r3, [pc, #284]	; (8006e84 <UART_SetConfig+0x384>)
 8006d68:	fba3 2302 	umull	r2, r3, r3, r2
 8006d6c:	095b      	lsrs	r3, r3, #5
 8006d6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	461d      	mov	r5, r3
 8006d76:	f04f 0600 	mov.w	r6, #0
 8006d7a:	46a9      	mov	r9, r5
 8006d7c:	46b2      	mov	sl, r6
 8006d7e:	eb19 0309 	adds.w	r3, r9, r9
 8006d82:	eb4a 040a 	adc.w	r4, sl, sl
 8006d86:	4699      	mov	r9, r3
 8006d88:	46a2      	mov	sl, r4
 8006d8a:	eb19 0905 	adds.w	r9, r9, r5
 8006d8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d92:	f04f 0100 	mov.w	r1, #0
 8006d96:	f04f 0200 	mov.w	r2, #0
 8006d9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006da2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006da6:	4689      	mov	r9, r1
 8006da8:	4692      	mov	sl, r2
 8006daa:	eb19 0005 	adds.w	r0, r9, r5
 8006dae:	eb4a 0106 	adc.w	r1, sl, r6
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	461d      	mov	r5, r3
 8006db8:	f04f 0600 	mov.w	r6, #0
 8006dbc:	196b      	adds	r3, r5, r5
 8006dbe:	eb46 0406 	adc.w	r4, r6, r6
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4623      	mov	r3, r4
 8006dc6:	f7f9 ff67 	bl	8000c98 <__aeabi_uldivmod>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	460c      	mov	r4, r1
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4b2c      	ldr	r3, [pc, #176]	; (8006e84 <UART_SetConfig+0x384>)
 8006dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd6:	095b      	lsrs	r3, r3, #5
 8006dd8:	2164      	movs	r1, #100	; 0x64
 8006dda:	fb01 f303 	mul.w	r3, r1, r3
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	3332      	adds	r3, #50	; 0x32
 8006de4:	4a27      	ldr	r2, [pc, #156]	; (8006e84 <UART_SetConfig+0x384>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006df2:	4498      	add	r8, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	461d      	mov	r5, r3
 8006df8:	f04f 0600 	mov.w	r6, #0
 8006dfc:	46a9      	mov	r9, r5
 8006dfe:	46b2      	mov	sl, r6
 8006e00:	eb19 0309 	adds.w	r3, r9, r9
 8006e04:	eb4a 040a 	adc.w	r4, sl, sl
 8006e08:	4699      	mov	r9, r3
 8006e0a:	46a2      	mov	sl, r4
 8006e0c:	eb19 0905 	adds.w	r9, r9, r5
 8006e10:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e14:	f04f 0100 	mov.w	r1, #0
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e28:	4689      	mov	r9, r1
 8006e2a:	4692      	mov	sl, r2
 8006e2c:	eb19 0005 	adds.w	r0, r9, r5
 8006e30:	eb4a 0106 	adc.w	r1, sl, r6
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	461d      	mov	r5, r3
 8006e3a:	f04f 0600 	mov.w	r6, #0
 8006e3e:	196b      	adds	r3, r5, r5
 8006e40:	eb46 0406 	adc.w	r4, r6, r6
 8006e44:	461a      	mov	r2, r3
 8006e46:	4623      	mov	r3, r4
 8006e48:	f7f9 ff26 	bl	8000c98 <__aeabi_uldivmod>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	461a      	mov	r2, r3
 8006e52:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <UART_SetConfig+0x384>)
 8006e54:	fba3 1302 	umull	r1, r3, r3, r2
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	2164      	movs	r1, #100	; 0x64
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	3332      	adds	r3, #50	; 0x32
 8006e66:	4a07      	ldr	r2, [pc, #28]	; (8006e84 <UART_SetConfig+0x384>)
 8006e68:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	f003 0207 	and.w	r2, r3, #7
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4442      	add	r2, r8
 8006e78:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006e7a:	e1b2      	b.n	80071e2 <UART_SetConfig+0x6e2>
 8006e7c:	40011000 	.word	0x40011000
 8006e80:	40011400 	.word	0x40011400
 8006e84:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4ad7      	ldr	r2, [pc, #860]	; (80071ec <UART_SetConfig+0x6ec>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d005      	beq.n	8006e9e <UART_SetConfig+0x39e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4ad6      	ldr	r2, [pc, #856]	; (80071f0 <UART_SetConfig+0x6f0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	f040 80d1 	bne.w	8007040 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e9e:	f7fe fb25 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
 8006ea2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	469a      	mov	sl, r3
 8006ea8:	f04f 0b00 	mov.w	fp, #0
 8006eac:	46d0      	mov	r8, sl
 8006eae:	46d9      	mov	r9, fp
 8006eb0:	eb18 0308 	adds.w	r3, r8, r8
 8006eb4:	eb49 0409 	adc.w	r4, r9, r9
 8006eb8:	4698      	mov	r8, r3
 8006eba:	46a1      	mov	r9, r4
 8006ebc:	eb18 080a 	adds.w	r8, r8, sl
 8006ec0:	eb49 090b 	adc.w	r9, r9, fp
 8006ec4:	f04f 0100 	mov.w	r1, #0
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ed0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ed4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ed8:	4688      	mov	r8, r1
 8006eda:	4691      	mov	r9, r2
 8006edc:	eb1a 0508 	adds.w	r5, sl, r8
 8006ee0:	eb4b 0609 	adc.w	r6, fp, r9
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	f04f 0400 	mov.w	r4, #0
 8006ef6:	0094      	lsls	r4, r2, #2
 8006ef8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006efc:	008b      	lsls	r3, r1, #2
 8006efe:	461a      	mov	r2, r3
 8006f00:	4623      	mov	r3, r4
 8006f02:	4628      	mov	r0, r5
 8006f04:	4631      	mov	r1, r6
 8006f06:	f7f9 fec7 	bl	8000c98 <__aeabi_uldivmod>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	461a      	mov	r2, r3
 8006f10:	4bb8      	ldr	r3, [pc, #736]	; (80071f4 <UART_SetConfig+0x6f4>)
 8006f12:	fba3 2302 	umull	r2, r3, r3, r2
 8006f16:	095b      	lsrs	r3, r3, #5
 8006f18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	469b      	mov	fp, r3
 8006f20:	f04f 0c00 	mov.w	ip, #0
 8006f24:	46d9      	mov	r9, fp
 8006f26:	46e2      	mov	sl, ip
 8006f28:	eb19 0309 	adds.w	r3, r9, r9
 8006f2c:	eb4a 040a 	adc.w	r4, sl, sl
 8006f30:	4699      	mov	r9, r3
 8006f32:	46a2      	mov	sl, r4
 8006f34:	eb19 090b 	adds.w	r9, r9, fp
 8006f38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f3c:	f04f 0100 	mov.w	r1, #0
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f50:	4689      	mov	r9, r1
 8006f52:	4692      	mov	sl, r2
 8006f54:	eb1b 0509 	adds.w	r5, fp, r9
 8006f58:	eb4c 060a 	adc.w	r6, ip, sl
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4619      	mov	r1, r3
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	f04f 0400 	mov.w	r4, #0
 8006f6e:	0094      	lsls	r4, r2, #2
 8006f70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f74:	008b      	lsls	r3, r1, #2
 8006f76:	461a      	mov	r2, r3
 8006f78:	4623      	mov	r3, r4
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	f7f9 fe8b 	bl	8000c98 <__aeabi_uldivmod>
 8006f82:	4603      	mov	r3, r0
 8006f84:	460c      	mov	r4, r1
 8006f86:	461a      	mov	r2, r3
 8006f88:	4b9a      	ldr	r3, [pc, #616]	; (80071f4 <UART_SetConfig+0x6f4>)
 8006f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f8e:	095b      	lsrs	r3, r3, #5
 8006f90:	2164      	movs	r1, #100	; 0x64
 8006f92:	fb01 f303 	mul.w	r3, r1, r3
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	3332      	adds	r3, #50	; 0x32
 8006f9c:	4a95      	ldr	r2, [pc, #596]	; (80071f4 <UART_SetConfig+0x6f4>)
 8006f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fa8:	4498      	add	r8, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	469b      	mov	fp, r3
 8006fae:	f04f 0c00 	mov.w	ip, #0
 8006fb2:	46d9      	mov	r9, fp
 8006fb4:	46e2      	mov	sl, ip
 8006fb6:	eb19 0309 	adds.w	r3, r9, r9
 8006fba:	eb4a 040a 	adc.w	r4, sl, sl
 8006fbe:	4699      	mov	r9, r3
 8006fc0:	46a2      	mov	sl, r4
 8006fc2:	eb19 090b 	adds.w	r9, r9, fp
 8006fc6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fca:	f04f 0100 	mov.w	r1, #0
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fde:	4689      	mov	r9, r1
 8006fe0:	4692      	mov	sl, r2
 8006fe2:	eb1b 0509 	adds.w	r5, fp, r9
 8006fe6:	eb4c 060a 	adc.w	r6, ip, sl
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	f04f 0400 	mov.w	r4, #0
 8006ffc:	0094      	lsls	r4, r2, #2
 8006ffe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007002:	008b      	lsls	r3, r1, #2
 8007004:	461a      	mov	r2, r3
 8007006:	4623      	mov	r3, r4
 8007008:	4628      	mov	r0, r5
 800700a:	4631      	mov	r1, r6
 800700c:	f7f9 fe44 	bl	8000c98 <__aeabi_uldivmod>
 8007010:	4603      	mov	r3, r0
 8007012:	460c      	mov	r4, r1
 8007014:	461a      	mov	r2, r3
 8007016:	4b77      	ldr	r3, [pc, #476]	; (80071f4 <UART_SetConfig+0x6f4>)
 8007018:	fba3 1302 	umull	r1, r3, r3, r2
 800701c:	095b      	lsrs	r3, r3, #5
 800701e:	2164      	movs	r1, #100	; 0x64
 8007020:	fb01 f303 	mul.w	r3, r1, r3
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	3332      	adds	r3, #50	; 0x32
 800702a:	4a72      	ldr	r2, [pc, #456]	; (80071f4 <UART_SetConfig+0x6f4>)
 800702c:	fba2 2303 	umull	r2, r3, r2, r3
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	f003 020f 	and.w	r2, r3, #15
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4442      	add	r2, r8
 800703c:	609a      	str	r2, [r3, #8]
 800703e:	e0d0      	b.n	80071e2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007040:	f7fe fa40 	bl	80054c4 <HAL_RCC_GetPCLK1Freq>
 8007044:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	469a      	mov	sl, r3
 800704a:	f04f 0b00 	mov.w	fp, #0
 800704e:	46d0      	mov	r8, sl
 8007050:	46d9      	mov	r9, fp
 8007052:	eb18 0308 	adds.w	r3, r8, r8
 8007056:	eb49 0409 	adc.w	r4, r9, r9
 800705a:	4698      	mov	r8, r3
 800705c:	46a1      	mov	r9, r4
 800705e:	eb18 080a 	adds.w	r8, r8, sl
 8007062:	eb49 090b 	adc.w	r9, r9, fp
 8007066:	f04f 0100 	mov.w	r1, #0
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007072:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007076:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800707a:	4688      	mov	r8, r1
 800707c:	4691      	mov	r9, r2
 800707e:	eb1a 0508 	adds.w	r5, sl, r8
 8007082:	eb4b 0609 	adc.w	r6, fp, r9
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	4619      	mov	r1, r3
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	f04f 0400 	mov.w	r4, #0
 8007098:	0094      	lsls	r4, r2, #2
 800709a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800709e:	008b      	lsls	r3, r1, #2
 80070a0:	461a      	mov	r2, r3
 80070a2:	4623      	mov	r3, r4
 80070a4:	4628      	mov	r0, r5
 80070a6:	4631      	mov	r1, r6
 80070a8:	f7f9 fdf6 	bl	8000c98 <__aeabi_uldivmod>
 80070ac:	4603      	mov	r3, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	461a      	mov	r2, r3
 80070b2:	4b50      	ldr	r3, [pc, #320]	; (80071f4 <UART_SetConfig+0x6f4>)
 80070b4:	fba3 2302 	umull	r2, r3, r3, r2
 80070b8:	095b      	lsrs	r3, r3, #5
 80070ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	469b      	mov	fp, r3
 80070c2:	f04f 0c00 	mov.w	ip, #0
 80070c6:	46d9      	mov	r9, fp
 80070c8:	46e2      	mov	sl, ip
 80070ca:	eb19 0309 	adds.w	r3, r9, r9
 80070ce:	eb4a 040a 	adc.w	r4, sl, sl
 80070d2:	4699      	mov	r9, r3
 80070d4:	46a2      	mov	sl, r4
 80070d6:	eb19 090b 	adds.w	r9, r9, fp
 80070da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070de:	f04f 0100 	mov.w	r1, #0
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070f2:	4689      	mov	r9, r1
 80070f4:	4692      	mov	sl, r2
 80070f6:	eb1b 0509 	adds.w	r5, fp, r9
 80070fa:	eb4c 060a 	adc.w	r6, ip, sl
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	4619      	mov	r1, r3
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	f04f 0400 	mov.w	r4, #0
 8007110:	0094      	lsls	r4, r2, #2
 8007112:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007116:	008b      	lsls	r3, r1, #2
 8007118:	461a      	mov	r2, r3
 800711a:	4623      	mov	r3, r4
 800711c:	4628      	mov	r0, r5
 800711e:	4631      	mov	r1, r6
 8007120:	f7f9 fdba 	bl	8000c98 <__aeabi_uldivmod>
 8007124:	4603      	mov	r3, r0
 8007126:	460c      	mov	r4, r1
 8007128:	461a      	mov	r2, r3
 800712a:	4b32      	ldr	r3, [pc, #200]	; (80071f4 <UART_SetConfig+0x6f4>)
 800712c:	fba3 1302 	umull	r1, r3, r3, r2
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	2164      	movs	r1, #100	; 0x64
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	3332      	adds	r3, #50	; 0x32
 800713e:	4a2d      	ldr	r2, [pc, #180]	; (80071f4 <UART_SetConfig+0x6f4>)
 8007140:	fba2 2303 	umull	r2, r3, r2, r3
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800714a:	4498      	add	r8, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	469b      	mov	fp, r3
 8007150:	f04f 0c00 	mov.w	ip, #0
 8007154:	46d9      	mov	r9, fp
 8007156:	46e2      	mov	sl, ip
 8007158:	eb19 0309 	adds.w	r3, r9, r9
 800715c:	eb4a 040a 	adc.w	r4, sl, sl
 8007160:	4699      	mov	r9, r3
 8007162:	46a2      	mov	sl, r4
 8007164:	eb19 090b 	adds.w	r9, r9, fp
 8007168:	eb4a 0a0c 	adc.w	sl, sl, ip
 800716c:	f04f 0100 	mov.w	r1, #0
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007178:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800717c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007180:	4689      	mov	r9, r1
 8007182:	4692      	mov	sl, r2
 8007184:	eb1b 0509 	adds.w	r5, fp, r9
 8007188:	eb4c 060a 	adc.w	r6, ip, sl
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	4619      	mov	r1, r3
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	f04f 0400 	mov.w	r4, #0
 800719e:	0094      	lsls	r4, r2, #2
 80071a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071a4:	008b      	lsls	r3, r1, #2
 80071a6:	461a      	mov	r2, r3
 80071a8:	4623      	mov	r3, r4
 80071aa:	4628      	mov	r0, r5
 80071ac:	4631      	mov	r1, r6
 80071ae:	f7f9 fd73 	bl	8000c98 <__aeabi_uldivmod>
 80071b2:	4603      	mov	r3, r0
 80071b4:	460c      	mov	r4, r1
 80071b6:	461a      	mov	r2, r3
 80071b8:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <UART_SetConfig+0x6f4>)
 80071ba:	fba3 1302 	umull	r1, r3, r3, r2
 80071be:	095b      	lsrs	r3, r3, #5
 80071c0:	2164      	movs	r1, #100	; 0x64
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	3332      	adds	r3, #50	; 0x32
 80071cc:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <UART_SetConfig+0x6f4>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	f003 020f 	and.w	r2, r3, #15
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4442      	add	r2, r8
 80071de:	609a      	str	r2, [r3, #8]
}
 80071e0:	e7ff      	b.n	80071e2 <UART_SetConfig+0x6e2>
 80071e2:	bf00      	nop
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ec:	40011000 	.word	0x40011000
 80071f0:	40011400 	.word	0x40011400
 80071f4:	51eb851f 	.word	0x51eb851f

080071f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071f8:	b084      	sub	sp, #16
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	f107 001c 	add.w	r0, r7, #28
 8007206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	2b01      	cmp	r3, #1
 800720e:	d122      	bne.n	8007256 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800723a:	2b01      	cmp	r3, #1
 800723c:	d105      	bne.n	800724a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fac6 	bl	80087dc <USB_CoreReset>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]
 8007254:	e01a      	b.n	800728c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 faba 	bl	80087dc <USB_CoreReset>
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800726c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	639a      	str	r2, [r3, #56]	; 0x38
 800727e:	e005      	b.n	800728c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	2b01      	cmp	r3, #1
 8007290:	d10b      	bne.n	80072aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f043 0206 	orr.w	r2, r3, #6
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f043 0220 	orr.w	r2, r3, #32
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072b6:	b004      	add	sp, #16
 80072b8:	4770      	bx	lr
	...

080072bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d165      	bne.n	800739c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4a41      	ldr	r2, [pc, #260]	; (80073d8 <USB_SetTurnaroundTime+0x11c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d906      	bls.n	80072e6 <USB_SetTurnaroundTime+0x2a>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4a40      	ldr	r2, [pc, #256]	; (80073dc <USB_SetTurnaroundTime+0x120>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d802      	bhi.n	80072e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80072e0:	230f      	movs	r3, #15
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e062      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	4a3c      	ldr	r2, [pc, #240]	; (80073dc <USB_SetTurnaroundTime+0x120>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d906      	bls.n	80072fc <USB_SetTurnaroundTime+0x40>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4a3b      	ldr	r2, [pc, #236]	; (80073e0 <USB_SetTurnaroundTime+0x124>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d802      	bhi.n	80072fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80072f6:	230e      	movs	r3, #14
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	e057      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4a38      	ldr	r2, [pc, #224]	; (80073e0 <USB_SetTurnaroundTime+0x124>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d906      	bls.n	8007312 <USB_SetTurnaroundTime+0x56>
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4a37      	ldr	r2, [pc, #220]	; (80073e4 <USB_SetTurnaroundTime+0x128>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d802      	bhi.n	8007312 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800730c:	230d      	movs	r3, #13
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	e04c      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	4a33      	ldr	r2, [pc, #204]	; (80073e4 <USB_SetTurnaroundTime+0x128>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d906      	bls.n	8007328 <USB_SetTurnaroundTime+0x6c>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4a32      	ldr	r2, [pc, #200]	; (80073e8 <USB_SetTurnaroundTime+0x12c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d802      	bhi.n	8007328 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007322:	230c      	movs	r3, #12
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	e041      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4a2f      	ldr	r2, [pc, #188]	; (80073e8 <USB_SetTurnaroundTime+0x12c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d906      	bls.n	800733e <USB_SetTurnaroundTime+0x82>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4a2e      	ldr	r2, [pc, #184]	; (80073ec <USB_SetTurnaroundTime+0x130>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d802      	bhi.n	800733e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007338:	230b      	movs	r3, #11
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e036      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	4a2a      	ldr	r2, [pc, #168]	; (80073ec <USB_SetTurnaroundTime+0x130>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d906      	bls.n	8007354 <USB_SetTurnaroundTime+0x98>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4a29      	ldr	r2, [pc, #164]	; (80073f0 <USB_SetTurnaroundTime+0x134>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d802      	bhi.n	8007354 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800734e:	230a      	movs	r3, #10
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	e02b      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4a26      	ldr	r2, [pc, #152]	; (80073f0 <USB_SetTurnaroundTime+0x134>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d906      	bls.n	800736a <USB_SetTurnaroundTime+0xae>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4a25      	ldr	r2, [pc, #148]	; (80073f4 <USB_SetTurnaroundTime+0x138>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d802      	bhi.n	800736a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007364:	2309      	movs	r3, #9
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	e020      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4a21      	ldr	r2, [pc, #132]	; (80073f4 <USB_SetTurnaroundTime+0x138>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d906      	bls.n	8007380 <USB_SetTurnaroundTime+0xc4>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	4a20      	ldr	r2, [pc, #128]	; (80073f8 <USB_SetTurnaroundTime+0x13c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d802      	bhi.n	8007380 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800737a:	2308      	movs	r3, #8
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	e015      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4a1d      	ldr	r2, [pc, #116]	; (80073f8 <USB_SetTurnaroundTime+0x13c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d906      	bls.n	8007396 <USB_SetTurnaroundTime+0xda>
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <USB_SetTurnaroundTime+0x140>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d802      	bhi.n	8007396 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007390:	2307      	movs	r3, #7
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	e00a      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007396:	2306      	movs	r3, #6
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	e007      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d102      	bne.n	80073a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80073a2:	2309      	movs	r3, #9
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	e001      	b.n	80073ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80073a8:	2309      	movs	r3, #9
 80073aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	029b      	lsls	r3, r3, #10
 80073c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80073c4:	431a      	orrs	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	00d8acbf 	.word	0x00d8acbf
 80073dc:	00e4e1bf 	.word	0x00e4e1bf
 80073e0:	00f423ff 	.word	0x00f423ff
 80073e4:	0106737f 	.word	0x0106737f
 80073e8:	011a499f 	.word	0x011a499f
 80073ec:	01312cff 	.word	0x01312cff
 80073f0:	014ca43f 	.word	0x014ca43f
 80073f4:	016e35ff 	.word	0x016e35ff
 80073f8:	01a6ab1f 	.word	0x01a6ab1f
 80073fc:	01e847ff 	.word	0x01e847ff

08007400 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f043 0201 	orr.w	r2, r3, #1
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f023 0201 	bic.w	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d106      	bne.n	8007470 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	e00b      	b.n	8007488 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60da      	str	r2, [r3, #12]
 8007482:	e001      	b.n	8007488 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e003      	b.n	8007490 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007488:	2032      	movs	r0, #50	; 0x32
 800748a:	f7fb f8b7 	bl	80025fc <HAL_Delay>

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007498:	b084      	sub	sp, #16
 800749a:	b580      	push	{r7, lr}
 800749c:	b086      	sub	sp, #24
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80074a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80074b2:	2300      	movs	r3, #0
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	e009      	b.n	80074cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	3340      	adds	r3, #64	; 0x40
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	2200      	movs	r2, #0
 80074c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	3301      	adds	r3, #1
 80074ca:	613b      	str	r3, [r7, #16]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	2b0e      	cmp	r3, #14
 80074d0:	d9f2      	bls.n	80074b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d11c      	bne.n	8007512 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e6:	f043 0302 	orr.w	r3, r3, #2
 80074ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007508:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	639a      	str	r2, [r3, #56]	; 0x38
 8007510:	e00b      	b.n	800752a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007530:	461a      	mov	r2, r3
 8007532:	2300      	movs	r3, #0
 8007534:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753c:	4619      	mov	r1, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007544:	461a      	mov	r2, r3
 8007546:	680b      	ldr	r3, [r1, #0]
 8007548:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	2b01      	cmp	r3, #1
 800754e:	d10c      	bne.n	800756a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d104      	bne.n	8007560 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007556:	2100      	movs	r1, #0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f949 	bl	80077f0 <USB_SetDevSpeed>
 800755e:	e008      	b.n	8007572 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007560:	2101      	movs	r1, #1
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f944 	bl	80077f0 <USB_SetDevSpeed>
 8007568:	e003      	b.n	8007572 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800756a:	2103      	movs	r1, #3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f93f 	bl	80077f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007572:	2110      	movs	r1, #16
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f8f3 	bl	8007760 <USB_FlushTxFifo>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f911 	bl	80077ac <USB_FlushRxFifo>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759a:	461a      	mov	r2, r3
 800759c:	2300      	movs	r3, #0
 800759e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a6:	461a      	mov	r2, r3
 80075a8:	2300      	movs	r3, #0
 80075aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b2:	461a      	mov	r2, r3
 80075b4:	2300      	movs	r3, #0
 80075b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b8:	2300      	movs	r3, #0
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	e043      	b.n	8007646 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d4:	d118      	bne.n	8007608 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	461a      	mov	r2, r3
 80075ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	e013      	b.n	800761a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	461a      	mov	r2, r3
 8007600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	e008      	b.n	800761a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007614:	461a      	mov	r2, r3
 8007616:	2300      	movs	r3, #0
 8007618:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007626:	461a      	mov	r2, r3
 8007628:	2300      	movs	r3, #0
 800762a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007638:	461a      	mov	r2, r3
 800763a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800763e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	3301      	adds	r3, #1
 8007644:	613b      	str	r3, [r7, #16]
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	429a      	cmp	r2, r3
 800764c:	d3b7      	bcc.n	80075be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800764e:	2300      	movs	r3, #0
 8007650:	613b      	str	r3, [r7, #16]
 8007652:	e043      	b.n	80076dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800766a:	d118      	bne.n	800769e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767e:	461a      	mov	r2, r3
 8007680:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	e013      	b.n	80076b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007694:	461a      	mov	r2, r3
 8007696:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	e008      	b.n	80076b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076aa:	461a      	mov	r2, r3
 80076ac:	2300      	movs	r3, #0
 80076ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076bc:	461a      	mov	r2, r3
 80076be:	2300      	movs	r3, #0
 80076c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ce:	461a      	mov	r2, r3
 80076d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	3301      	adds	r3, #1
 80076da:	613b      	str	r3, [r7, #16]
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d3b7      	bcc.n	8007654 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007704:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	2b00      	cmp	r3, #0
 800770a:	d105      	bne.n	8007718 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f043 0210 	orr.w	r2, r3, #16
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699a      	ldr	r2, [r3, #24]
 800771c:	4b0f      	ldr	r3, [pc, #60]	; (800775c <USB_DevInit+0x2c4>)
 800771e:	4313      	orrs	r3, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	f043 0208 	orr.w	r2, r3, #8
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d107      	bne.n	800774c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007744:	f043 0304 	orr.w	r3, r3, #4
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007758:	b004      	add	sp, #16
 800775a:	4770      	bx	lr
 800775c:	803c3800 	.word	0x803c3800

08007760 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	019b      	lsls	r3, r3, #6
 8007772:	f043 0220 	orr.w	r2, r3, #32
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a09      	ldr	r2, [pc, #36]	; (80077a8 <USB_FlushTxFifo+0x48>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d901      	bls.n	800778c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e006      	b.n	800779a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	f003 0320 	and.w	r3, r3, #32
 8007794:	2b20      	cmp	r3, #32
 8007796:	d0f0      	beq.n	800777a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	00030d40 	.word	0x00030d40

080077ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2210      	movs	r2, #16
 80077bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4a09      	ldr	r2, [pc, #36]	; (80077ec <USB_FlushRxFifo+0x40>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d901      	bls.n	80077d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e006      	b.n	80077de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f003 0310 	and.w	r3, r3, #16
 80077d8:	2b10      	cmp	r3, #16
 80077da:	d0f0      	beq.n	80077be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	00030d40 	.word	0x00030d40

080077f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007810:	4313      	orrs	r3, r2
 8007812:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007822:	b480      	push	{r7}
 8007824:	b087      	sub	sp, #28
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0306 	and.w	r3, r3, #6
 800783a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]
 8007846:	e00a      	b.n	800785e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d002      	beq.n	8007854 <USB_GetDevSpeed+0x32>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b06      	cmp	r3, #6
 8007852:	d102      	bne.n	800785a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007854:	2302      	movs	r3, #2
 8007856:	75fb      	strb	r3, [r7, #23]
 8007858:	e001      	b.n	800785e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800785a:	230f      	movs	r3, #15
 800785c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d13a      	bne.n	80078fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788e:	69da      	ldr	r2, [r3, #28]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	2101      	movs	r1, #1
 800789a:	fa01 f303 	lsl.w	r3, r1, r3
 800789e:	b29b      	uxth	r3, r3
 80078a0:	68f9      	ldr	r1, [r7, #12]
 80078a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078a6:	4313      	orrs	r3, r2
 80078a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d155      	bne.n	800796c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	78db      	ldrb	r3, [r3, #3]
 80078da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	059b      	lsls	r3, r3, #22
 80078e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078e4:	4313      	orrs	r3, r2
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	e036      	b.n	800796c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007904:	69da      	ldr	r2, [r3, #28]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	f003 030f 	and.w	r3, r3, #15
 800790e:	2101      	movs	r1, #1
 8007910:	fa01 f303 	lsl.w	r3, r1, r3
 8007914:	041b      	lsls	r3, r3, #16
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800791c:	4313      	orrs	r3, r2
 800791e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d11a      	bne.n	800796c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	78db      	ldrb	r3, [r3, #3]
 8007950:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007952:	430b      	orrs	r3, r1
 8007954:	4313      	orrs	r3, r2
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	0151      	lsls	r1, r2, #5
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	440a      	add	r2, r1
 800795e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800796a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d161      	bne.n	8007a5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079ae:	d11f      	bne.n	80079f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	0151      	lsls	r1, r2, #5
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	440a      	add	r2, r1
 80079c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	0151      	lsls	r1, r2, #5
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	440a      	add	r2, r1
 80079e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	2101      	movs	r1, #1
 8007a02:	fa01 f303 	lsl.w	r3, r1, r3
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	68f9      	ldr	r1, [r7, #12]
 8007a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a10:	4013      	ands	r3, r2
 8007a12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1a:	69da      	ldr	r2, [r3, #28]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	2101      	movs	r1, #1
 8007a26:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	43db      	mvns	r3, r3
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a34:	4013      	ands	r3, r2
 8007a36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	0159      	lsls	r1, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	440b      	add	r3, r1
 8007a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a52:	4619      	mov	r1, r3
 8007a54:	4b35      	ldr	r3, [pc, #212]	; (8007b2c <USB_DeactivateEndpoint+0x1b0>)
 8007a56:	4013      	ands	r3, r2
 8007a58:	600b      	str	r3, [r1, #0]
 8007a5a:	e060      	b.n	8007b1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a72:	d11f      	bne.n	8007ab4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 030f 	and.w	r3, r3, #15
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aca:	041b      	lsls	r3, r3, #16
 8007acc:	43db      	mvns	r3, r3
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ade:	69da      	ldr	r2, [r3, #28]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 030f 	and.w	r3, r3, #15
 8007ae8:	2101      	movs	r1, #1
 8007aea:	fa01 f303 	lsl.w	r3, r1, r3
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	43db      	mvns	r3, r3
 8007af2:	68f9      	ldr	r1, [r7, #12]
 8007af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007af8:	4013      	ands	r3, r2
 8007afa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	0159      	lsls	r1, r3, #5
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	440b      	add	r3, r1
 8007b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b16:	4619      	mov	r1, r3
 8007b18:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <USB_DeactivateEndpoint+0x1b4>)
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	ec337800 	.word	0xec337800
 8007b30:	eff37800 	.word	0xeff37800

08007b34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08a      	sub	sp, #40	; 0x28
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	785b      	ldrb	r3, [r3, #1]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	f040 815c 	bne.w	8007e0e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d132      	bne.n	8007bc4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	0151      	lsls	r1, r2, #5
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	440a      	add	r2, r1
 8007b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ba0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bbc:	0cdb      	lsrs	r3, r3, #19
 8007bbe:	04db      	lsls	r3, r3, #19
 8007bc0:	6113      	str	r3, [r2, #16]
 8007bc2:	e074      	b.n	8007cae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	0151      	lsls	r1, r2, #5
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	440a      	add	r2, r1
 8007bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bde:	0cdb      	lsrs	r3, r3, #19
 8007be0:	04db      	lsls	r3, r3, #19
 8007be2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	691a      	ldr	r2, [r3, #16]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6959      	ldr	r1, [r3, #20]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	440b      	add	r3, r1
 8007c20:	1e59      	subs	r1, r3, #1
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c2a:	04d9      	lsls	r1, r3, #19
 8007c2c:	4b9d      	ldr	r3, [pc, #628]	; (8007ea4 <USB_EPStartXfer+0x370>)
 8007c2e:	400b      	ands	r3, r1
 8007c30:	69b9      	ldr	r1, [r7, #24]
 8007c32:	0148      	lsls	r0, r1, #5
 8007c34:	69f9      	ldr	r1, [r7, #28]
 8007c36:	4401      	add	r1, r0
 8007c38:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4c:	691a      	ldr	r2, [r3, #16]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c56:	69b9      	ldr	r1, [r7, #24]
 8007c58:	0148      	lsls	r0, r1, #5
 8007c5a:	69f9      	ldr	r1, [r7, #28]
 8007c5c:	4401      	add	r1, r0
 8007c5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c62:	4313      	orrs	r3, r2
 8007c64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	78db      	ldrb	r3, [r3, #3]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d11f      	bne.n	8007cae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	0151      	lsls	r1, r2, #5
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	440a      	add	r2, r1
 8007c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c88:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007c8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	0151      	lsls	r1, r2, #5
 8007ca0:	69fa      	ldr	r2, [r7, #28]
 8007ca2:	440a      	add	r2, r1
 8007ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d14b      	bne.n	8007d4c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d009      	beq.n	8007cd0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc8:	461a      	mov	r2, r3
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	78db      	ldrb	r3, [r3, #3]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d128      	bne.n	8007d2a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d110      	bne.n	8007d0a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e00f      	b.n	8007d2a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	0151      	lsls	r1, r2, #5
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	440a      	add	r2, r1
 8007d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	69fa      	ldr	r2, [r7, #28]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	e12f      	b.n	8007fac <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	78db      	ldrb	r3, [r3, #3]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d015      	beq.n	8007da0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8117 	beq.w	8007fac <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f003 030f 	and.w	r3, r3, #15
 8007d8e:	2101      	movs	r1, #1
 8007d90:	fa01 f303 	lsl.w	r3, r1, r3
 8007d94:	69f9      	ldr	r1, [r7, #28]
 8007d96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	634b      	str	r3, [r1, #52]	; 0x34
 8007d9e:	e105      	b.n	8007fac <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d110      	bne.n	8007dd2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	e00f      	b.n	8007df2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	68d9      	ldr	r1, [r3, #12]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	b298      	uxth	r0, r3
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	4603      	mov	r3, r0
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 fa2b 	bl	8008262 <USB_WritePacket>
 8007e0c:	e0ce      	b.n	8007fac <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e28:	0cdb      	lsrs	r3, r3, #19
 8007e2a:	04db      	lsls	r3, r3, #19
 8007e2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d126      	bne.n	8007ea8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e70:	69b9      	ldr	r1, [r7, #24]
 8007e72:	0148      	lsls	r0, r1, #5
 8007e74:	69f9      	ldr	r1, [r7, #28]
 8007e76:	4401      	add	r1, r0
 8007e78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	0151      	lsls	r1, r2, #5
 8007e92:	69fa      	ldr	r2, [r7, #28]
 8007e94:	440a      	add	r2, r1
 8007e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e9e:	6113      	str	r3, [r2, #16]
 8007ea0:	e036      	b.n	8007f10 <USB_EPStartXfer+0x3dc>
 8007ea2:	bf00      	nop
 8007ea4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	695a      	ldr	r2, [r3, #20]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	1e5a      	subs	r2, r3, #1
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ebc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	8afb      	ldrh	r3, [r7, #22]
 8007ece:	04d9      	lsls	r1, r3, #19
 8007ed0:	4b39      	ldr	r3, [pc, #228]	; (8007fb8 <USB_EPStartXfer+0x484>)
 8007ed2:	400b      	ands	r3, r1
 8007ed4:	69b9      	ldr	r1, [r7, #24]
 8007ed6:	0148      	lsls	r0, r1, #5
 8007ed8:	69f9      	ldr	r1, [r7, #28]
 8007eda:	4401      	add	r1, r0
 8007edc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef0:	691a      	ldr	r2, [r3, #16]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	8af9      	ldrh	r1, [r7, #22]
 8007ef8:	fb01 f303 	mul.w	r3, r1, r3
 8007efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f00:	69b9      	ldr	r1, [r7, #24]
 8007f02:	0148      	lsls	r0, r1, #5
 8007f04:	69f9      	ldr	r1, [r7, #28]
 8007f06:	4401      	add	r1, r0
 8007f08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d10d      	bne.n	8007f32 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	68d9      	ldr	r1, [r3, #12]
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2e:	460a      	mov	r2, r1
 8007f30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	78db      	ldrb	r3, [r3, #3]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d128      	bne.n	8007f8c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d110      	bne.n	8007f6c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	0151      	lsls	r1, r2, #5
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	440a      	add	r2, r1
 8007f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	e00f      	b.n	8007f8c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	0151      	lsls	r1, r2, #5
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	440a      	add	r2, r1
 8007f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	0151      	lsls	r1, r2, #5
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	440a      	add	r2, r1
 8007fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007faa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	1ff80000 	.word	0x1ff80000

08007fbc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	f040 80cd 	bne.w	8008178 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d132      	bne.n	800804c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	0151      	lsls	r1, r2, #5
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	440a      	add	r2, r1
 8007ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008008:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	0151      	lsls	r1, r2, #5
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	440a      	add	r2, r1
 8008020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008024:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	0151      	lsls	r1, r2, #5
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	440a      	add	r2, r1
 8008040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008044:	0cdb      	lsrs	r3, r3, #19
 8008046:	04db      	lsls	r3, r3, #19
 8008048:	6113      	str	r3, [r2, #16]
 800804a:	e04e      	b.n	80080ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	4413      	add	r3, r2
 8008054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	0151      	lsls	r1, r2, #5
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	440a      	add	r2, r1
 8008062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008066:	0cdb      	lsrs	r3, r3, #19
 8008068:	04db      	lsls	r3, r3, #19
 800806a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	0151      	lsls	r1, r2, #5
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	440a      	add	r2, r1
 8008082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008086:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800808a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800808e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	695a      	ldr	r2, [r3, #20]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	429a      	cmp	r2, r3
 800809a:	d903      	bls.n	80080a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	0151      	lsls	r1, r2, #5
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	440a      	add	r2, r1
 80080ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d0:	691a      	ldr	r2, [r3, #16]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080da:	6939      	ldr	r1, [r7, #16]
 80080dc:	0148      	lsls	r0, r1, #5
 80080de:	6979      	ldr	r1, [r7, #20]
 80080e0:	4401      	add	r1, r0
 80080e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080e6:	4313      	orrs	r3, r2
 80080e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d11e      	bne.n	800812e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d009      	beq.n	800810c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008104:	461a      	mov	r2, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	0151      	lsls	r1, r2, #5
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	440a      	add	r2, r1
 8008122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008126:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	e092      	b.n	8008254 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008148:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800814c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d07e      	beq.n	8008254 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800815c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	2101      	movs	r1, #1
 8008168:	fa01 f303 	lsl.w	r3, r1, r3
 800816c:	6979      	ldr	r1, [r7, #20]
 800816e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008172:	4313      	orrs	r3, r2
 8008174:	634b      	str	r3, [r1, #52]	; 0x34
 8008176:	e06d      	b.n	8008254 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	0151      	lsls	r1, r2, #5
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	440a      	add	r2, r1
 800818e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008192:	0cdb      	lsrs	r3, r3, #19
 8008194:	04db      	lsls	r3, r3, #19
 8008196:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	0151      	lsls	r1, r2, #5
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	440a      	add	r2, r1
 80081ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081ba:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	689a      	ldr	r2, [r3, #8]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	0151      	lsls	r1, r2, #5
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	440a      	add	r2, r1
 80081e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008202:	6939      	ldr	r1, [r7, #16]
 8008204:	0148      	lsls	r0, r1, #5
 8008206:	6979      	ldr	r1, [r7, #20]
 8008208:	4401      	add	r1, r0
 800820a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800820e:	4313      	orrs	r3, r2
 8008210:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008212:	79fb      	ldrb	r3, [r7, #7]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d10d      	bne.n	8008234 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d009      	beq.n	8008234 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	68d9      	ldr	r1, [r3, #12]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008230:	460a      	mov	r2, r1
 8008232:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	440a      	add	r2, r1
 800824a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800824e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008252:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	371c      	adds	r7, #28
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008262:	b480      	push	{r7}
 8008264:	b089      	sub	sp, #36	; 0x24
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	4611      	mov	r1, r2
 800826e:	461a      	mov	r2, r3
 8008270:	460b      	mov	r3, r1
 8008272:	71fb      	strb	r3, [r7, #7]
 8008274:	4613      	mov	r3, r2
 8008276:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008280:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008284:	2b00      	cmp	r3, #0
 8008286:	d11a      	bne.n	80082be <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008288:	88bb      	ldrh	r3, [r7, #4]
 800828a:	3303      	adds	r3, #3
 800828c:	089b      	lsrs	r3, r3, #2
 800828e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008290:	2300      	movs	r3, #0
 8008292:	61bb      	str	r3, [r7, #24]
 8008294:	e00f      	b.n	80082b6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	031a      	lsls	r2, r3, #12
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	4413      	add	r3, r2
 800829e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a2:	461a      	mov	r2, r3
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	3304      	adds	r3, #4
 80082ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	3301      	adds	r3, #1
 80082b4:	61bb      	str	r3, [r7, #24]
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d3eb      	bcc.n	8008296 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3724      	adds	r7, #36	; 0x24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b089      	sub	sp, #36	; 0x24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80082e2:	88fb      	ldrh	r3, [r7, #6]
 80082e4:	3303      	adds	r3, #3
 80082e6:	089b      	lsrs	r3, r3, #2
 80082e8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80082ea:	2300      	movs	r3, #0
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	e00b      	b.n	8008308 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	3304      	adds	r3, #4
 8008300:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	3301      	adds	r3, #1
 8008306:	61bb      	str	r3, [r7, #24]
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	429a      	cmp	r2, r3
 800830e:	d3ef      	bcc.n	80082f0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008310:	69fb      	ldr	r3, [r7, #28]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3724      	adds	r7, #36	; 0x24
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d12c      	bne.n	8008394 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4413      	add	r3, r2
 8008342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	db12      	blt.n	8008372 <USB_EPSetStall+0x54>
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00f      	beq.n	8008372 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	0151      	lsls	r1, r2, #5
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	440a      	add	r2, r1
 8008368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008370:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	0151      	lsls	r1, r2, #5
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	440a      	add	r2, r1
 8008388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	e02b      	b.n	80083ec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	db12      	blt.n	80083cc <USB_EPSetStall+0xae>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00f      	beq.n	80083cc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	0151      	lsls	r1, r2, #5
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	440a      	add	r2, r1
 80083c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083ca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	0151      	lsls	r1, r2, #5
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	440a      	add	r2, r1
 80083e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b085      	sub	sp, #20
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d128      	bne.n	8008468 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	440a      	add	r2, r1
 800842c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008430:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008434:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	78db      	ldrb	r3, [r3, #3]
 800843a:	2b03      	cmp	r3, #3
 800843c:	d003      	beq.n	8008446 <USB_EPClearStall+0x4c>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	78db      	ldrb	r3, [r3, #3]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d138      	bne.n	80084b8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	440a      	add	r2, r1
 800845c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	e027      	b.n	80084b8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	440a      	add	r2, r1
 800847e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008486:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	78db      	ldrb	r3, [r3, #3]
 800848c:	2b03      	cmp	r3, #3
 800848e:	d003      	beq.n	8008498 <USB_EPClearStall+0x9e>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	78db      	ldrb	r3, [r3, #3]
 8008494:	2b02      	cmp	r3, #2
 8008496:	d10f      	bne.n	80084b8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	0151      	lsls	r1, r2, #5
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	440a      	add	r2, r1
 80084ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80084e8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	011b      	lsls	r3, r3, #4
 80084f6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80084fa:	68f9      	ldr	r1, [r7, #12]
 80084fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008500:	4313      	orrs	r3, r2
 8008502:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008512:	b480      	push	{r7}
 8008514:	b085      	sub	sp, #20
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800852c:	f023 0303 	bic.w	r3, r3, #3
 8008530:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008540:	f023 0302 	bic.w	r3, r3, #2
 8008544:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800856e:	f023 0303 	bic.w	r3, r3, #3
 8008572:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008582:	f043 0302 	orr.w	r3, r3, #2
 8008586:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4013      	ands	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085ae:	68fb      	ldr	r3, [r7, #12]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	4013      	ands	r3, r2
 80085de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	0c1b      	lsrs	r3, r3, #16
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	4013      	ands	r3, r2
 8008612:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	b29b      	uxth	r3, r3
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	4013      	ands	r3, r2
 8008650:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008652:	68bb      	ldr	r3, [r7, #8]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008682:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	fa22 f303 	lsr.w	r3, r2, r3
 8008690:	01db      	lsls	r3, r3, #7
 8008692:	b2db      	uxtb	r3, r3
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4013      	ands	r3, r2
 80086ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086ae:	68bb      	ldr	r3, [r7, #8]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	f003 0301 	and.w	r3, r3, #1
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80086f6:	f023 0307 	bic.w	r3, r3, #7
 80086fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800870a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800870e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
	...

08008720 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	460b      	mov	r3, r1
 800872a:	607a      	str	r2, [r7, #4]
 800872c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	333c      	adds	r3, #60	; 0x3c
 8008736:	3304      	adds	r3, #4
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	4a26      	ldr	r2, [pc, #152]	; (80087d8 <USB_EP0_OutStart+0xb8>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d90a      	bls.n	800875a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008754:	d101      	bne.n	800875a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	e037      	b.n	80087ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008760:	461a      	mov	r2, r3
 8008762:	2300      	movs	r3, #0
 8008764:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008788:	f043 0318 	orr.w	r3, r3, #24
 800878c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800879c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80087a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d10f      	bne.n	80087c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ae:	461a      	mov	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80087c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	371c      	adds	r7, #28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	4f54300a 	.word	0x4f54300a

080087dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3301      	adds	r3, #1
 80087ec:	60fb      	str	r3, [r7, #12]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4a13      	ldr	r2, [pc, #76]	; (8008840 <USB_CoreReset+0x64>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d901      	bls.n	80087fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e01b      	b.n	8008832 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	daf2      	bge.n	80087e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	f043 0201 	orr.w	r2, r3, #1
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3301      	adds	r3, #1
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4a09      	ldr	r2, [pc, #36]	; (8008840 <USB_CoreReset+0x64>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d901      	bls.n	8008824 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e006      	b.n	8008832 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b01      	cmp	r3, #1
 800882e:	d0f0      	beq.n	8008812 <USB_CoreReset+0x36>

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	00030d40 	.word	0x00030d40

08008844 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008850:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008854:	f002 f8fc 	bl	800aa50 <malloc>
 8008858:	4603      	mov	r3, r0
 800885a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800886a:	2302      	movs	r3, #2
 800886c:	e066      	b.n	800893c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	7c1b      	ldrb	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d119      	bne.n	80088b2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800887e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008882:	2202      	movs	r2, #2
 8008884:	2181      	movs	r1, #129	; 0x81
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 ff69 	bl	800a75e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008896:	2202      	movs	r2, #2
 8008898:	2101      	movs	r1, #1
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 ff5f 	bl	800a75e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2210      	movs	r2, #16
 80088ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80088b0:	e016      	b.n	80088e0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088b2:	2340      	movs	r3, #64	; 0x40
 80088b4:	2202      	movs	r2, #2
 80088b6:	2181      	movs	r1, #129	; 0x81
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 ff50 	bl	800a75e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088c4:	2340      	movs	r3, #64	; 0x40
 80088c6:	2202      	movs	r2, #2
 80088c8:	2101      	movs	r1, #1
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 ff47 	bl	800a75e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2210      	movs	r2, #16
 80088dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088e0:	2308      	movs	r3, #8
 80088e2:	2203      	movs	r2, #3
 80088e4:	2182      	movs	r1, #130	; 0x82
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 ff39 	bl	800a75e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7c1b      	ldrb	r3, [r3, #16]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800891c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008920:	2101      	movs	r1, #1
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f002 f80a 	bl	800a93c <USBD_LL_PrepareReceive>
 8008928:	e007      	b.n	800893a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008930:	2340      	movs	r3, #64	; 0x40
 8008932:	2101      	movs	r1, #1
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f002 f801 	bl	800a93c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008954:	2181      	movs	r1, #129	; 0x81
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 ff27 	bl	800a7aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008962:	2101      	movs	r1, #1
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 ff20 	bl	800a7aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008972:	2182      	movs	r1, #130	; 0x82
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 ff18 	bl	800a7aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00e      	beq.n	80089b2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089a4:	4618      	mov	r0, r3
 80089a6:	f002 f85b 	bl	800aa60 <free>
    pdev->pClassData = NULL;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089cc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d03a      	beq.n	8008a5c <USBD_CDC_Setup+0xa0>
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	f040 8097 	bne.w	8008b1a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	88db      	ldrh	r3, [r3, #6]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d029      	beq.n	8008a48 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	b25b      	sxtb	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	da11      	bge.n	8008a22 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008a0a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	88d2      	ldrh	r2, [r2, #6]
 8008a10:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a12:	6939      	ldr	r1, [r7, #16]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	88db      	ldrh	r3, [r3, #6]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 fa6d 	bl	8009efa <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008a20:	e082      	b.n	8008b28 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	785a      	ldrb	r2, [r3, #1]
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	88db      	ldrh	r3, [r3, #6]
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a38:	6939      	ldr	r1, [r7, #16]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 fa86 	bl	8009f52 <USBD_CtlPrepareRx>
    break;
 8008a46:	e06f      	b.n	8008b28 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	7850      	ldrb	r0, [r2, #1]
 8008a54:	2200      	movs	r2, #0
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	4798      	blx	r3
    break;
 8008a5a:	e065      	b.n	8008b28 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	785b      	ldrb	r3, [r3, #1]
 8008a60:	2b0b      	cmp	r3, #11
 8008a62:	d84f      	bhi.n	8008b04 <USBD_CDC_Setup+0x148>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <USBD_CDC_Setup+0xb0>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008a9d 	.word	0x08008a9d
 8008a70:	08008b13 	.word	0x08008b13
 8008a74:	08008b05 	.word	0x08008b05
 8008a78:	08008b05 	.word	0x08008b05
 8008a7c:	08008b05 	.word	0x08008b05
 8008a80:	08008b05 	.word	0x08008b05
 8008a84:	08008b05 	.word	0x08008b05
 8008a88:	08008b05 	.word	0x08008b05
 8008a8c:	08008b05 	.word	0x08008b05
 8008a90:	08008b05 	.word	0x08008b05
 8008a94:	08008ac5 	.word	0x08008ac5
 8008a98:	08008aed 	.word	0x08008aed
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d107      	bne.n	8008ab6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008aa6:	f107 030c 	add.w	r3, r7, #12
 8008aaa:	2202      	movs	r2, #2
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f001 fa23 	bl	8009efa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008ab4:	e030      	b.n	8008b18 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f001 f9ad 	bl	8009e18 <USBD_CtlError>
        ret = USBD_FAIL;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac2:	e029      	b.n	8008b18 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d107      	bne.n	8008ade <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ace:	f107 030f 	add.w	r3, r7, #15
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 fa0f 	bl	8009efa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008adc:	e01c      	b.n	8008b18 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 f999 	bl	8009e18 <USBD_CtlError>
        ret = USBD_FAIL;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8008aea:	e015      	b.n	8008b18 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d00f      	beq.n	8008b16 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 f98d 	bl	8009e18 <USBD_CtlError>
        ret = USBD_FAIL;
 8008afe:	2303      	movs	r3, #3
 8008b00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008b02:	e008      	b.n	8008b16 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 f986 	bl	8009e18 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b10:	e002      	b.n	8008b18 <USBD_CDC_Setup+0x15c>
      break;
 8008b12:	bf00      	nop
 8008b14:	e008      	b.n	8008b28 <USBD_CDC_Setup+0x16c>
      break;
 8008b16:	bf00      	nop
    }
    break;
 8008b18:	e006      	b.n	8008b28 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 f97b 	bl	8009e18 <USBD_CtlError>
    ret = USBD_FAIL;
 8008b22:	2303      	movs	r3, #3
 8008b24:	75fb      	strb	r3, [r7, #23]
    break;
 8008b26:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop

08008b34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e049      	b.n	8008bea <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	440b      	add	r3, r1
 8008b6c:	3318      	adds	r3, #24
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d029      	beq.n	8008bc8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b74:	78fa      	ldrb	r2, [r7, #3]
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	440b      	add	r3, r1
 8008b82:	3318      	adds	r3, #24
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	78f9      	ldrb	r1, [r7, #3]
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	1a5b      	subs	r3, r3, r1
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4403      	add	r3, r0
 8008b94:	3344      	adds	r3, #68	; 0x44
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b9c:	fb03 f301 	mul.w	r3, r3, r1
 8008ba0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d110      	bne.n	8008bc8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	6879      	ldr	r1, [r7, #4]
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	440b      	add	r3, r1
 8008bb4:	3318      	adds	r3, #24
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bba:	78f9      	ldrb	r1, [r7, #3]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 fe9a 	bl	800a8fa <USBD_LL_Transmit>
 8008bc6:	e00f      	b.n	8008be8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008be4:	78fa      	ldrb	r2, [r7, #3]
 8008be6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e015      	b.n	8008c40 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 feb0 	bl	800a97e <USBD_LL_GetRxDataSize>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c56:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d015      	beq.n	8008c8e <USBD_CDC_EP0_RxReady+0x46>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c68:	2bff      	cmp	r3, #255	; 0xff
 8008c6a:	d010      	beq.n	8008c8e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008c7a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c82:	b292      	uxth	r2, r2
 8008c84:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	22ff      	movs	r2, #255	; 0xff
 8008c8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2243      	movs	r2, #67	; 0x43
 8008ca4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008ca6:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	200000a0 	.word	0x200000a0

08008cb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2243      	movs	r2, #67	; 0x43
 8008cc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	2000005c 	.word	0x2000005c

08008cd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2243      	movs	r2, #67	; 0x43
 8008ce4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008ce6:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	200000e4 	.word	0x200000e4

08008cf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	220a      	movs	r2, #10
 8008d04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d06:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	20000018 	.word	0x20000018

08008d18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e004      	b.n	8008d36 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b087      	sub	sp, #28
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	60b9      	str	r1, [r7, #8]
 8008d4c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	371c      	adds	r7, #28
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d84:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008daa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e016      	b.n	8008de8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7c1b      	ldrb	r3, [r3, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d109      	bne.n	8008dd6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dcc:	2101      	movs	r1, #1
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fdb4 	bl	800a93c <USBD_LL_PrepareReceive>
 8008dd4:	e007      	b.n	8008de6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ddc:	2340      	movs	r3, #64	; 0x40
 8008dde:	2101      	movs	r1, #1
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f001 fdab 	bl	800a93c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e025      	b.n	8008e54 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d003      	beq.n	8008e2c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	79fa      	ldrb	r2, [r7, #7]
 8008e46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f001 fc21 	bl	800a690 <USBD_LL_Init>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e010      	b.n	8008e96 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e84:	f107 020e 	add.w	r2, r7, #14
 8008e88:	4610      	mov	r0, r2
 8008e8a:	4798      	blx	r3
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f001 fc3e 	bl	800a728 <USBD_LL_Start>
 8008eac:	4603      	mov	r3, r0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	78fa      	ldrb	r2, [r7, #3]
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	4798      	blx	r3
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d007      	beq.n	8008f2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	4798      	blx	r3
  }

  return USBD_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 ff2c 	bl	8009da4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f68:	f003 031f 	and.w	r3, r3, #31
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d00e      	beq.n	8008f8e <USBD_LL_SetupStage+0x5a>
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d302      	bcc.n	8008f7a <USBD_LL_SetupStage+0x46>
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d014      	beq.n	8008fa2 <USBD_LL_SetupStage+0x6e>
 8008f78:	e01d      	b.n	8008fb6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa18 	bl	80093b8 <USBD_StdDevReq>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f8c:	e020      	b.n	8008fd0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fa7c 	bl	8009494 <USBD_StdItfReq>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa0:	e016      	b.n	8008fd0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fab8 	bl	8009520 <USBD_StdEPReq>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fb4:	e00c      	b.n	8008fd0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 fc0f 	bl	800a7e8 <USBD_LL_StallEP>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fce:	bf00      	nop
  }

  return ret;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b086      	sub	sp, #24
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	607a      	str	r2, [r7, #4]
 8008fe6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008fe8:	7afb      	ldrb	r3, [r7, #11]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d137      	bne.n	800905e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ff4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d14a      	bne.n	8009096 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	689a      	ldr	r2, [r3, #8]
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	429a      	cmp	r2, r3
 800900a:	d913      	bls.n	8009034 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	1ad2      	subs	r2, r2, r3
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	68da      	ldr	r2, [r3, #12]
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	4293      	cmp	r3, r2
 8009024:	bf28      	it	cs
 8009026:	4613      	movcs	r3, r2
 8009028:	461a      	mov	r2, r3
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 ffad 	bl	8009f8c <USBD_CtlContinueRx>
 8009032:	e030      	b.n	8009096 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00a      	beq.n	8009056 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009046:	2b03      	cmp	r3, #3
 8009048:	d105      	bne.n	8009056 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 ffa9 	bl	8009fae <USBD_CtlSendStatus>
 800905c:	e01b      	b.n	8009096 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d013      	beq.n	8009092 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009070:	2b03      	cmp	r3, #3
 8009072:	d10e      	bne.n	8009092 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	7afa      	ldrb	r2, [r7, #11]
 800907e:	4611      	mov	r1, r2
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	4798      	blx	r3
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	e002      	b.n	8009098 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009092:	2303      	movs	r3, #3
 8009094:	e000      	b.n	8009098 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	460b      	mov	r3, r1
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d16a      	bne.n	800918a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	3314      	adds	r3, #20
 80090b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d155      	bne.n	8009170 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d914      	bls.n	80090fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	1ad2      	subs	r2, r2, r3
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	461a      	mov	r2, r3
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 ff22 	bl	8009f30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ec:	2300      	movs	r3, #0
 80090ee:	2200      	movs	r2, #0
 80090f0:	2100      	movs	r1, #0
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f001 fc22 	bl	800a93c <USBD_LL_PrepareReceive>
 80090f8:	e03a      	b.n	8009170 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	429a      	cmp	r2, r3
 8009104:	d11c      	bne.n	8009140 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	685a      	ldr	r2, [r3, #4]
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800910e:	429a      	cmp	r2, r3
 8009110:	d316      	bcc.n	8009140 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800911c:	429a      	cmp	r2, r3
 800911e:	d20f      	bcs.n	8009140 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009120:	2200      	movs	r2, #0
 8009122:	2100      	movs	r1, #0
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 ff03 	bl	8009f30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009132:	2300      	movs	r3, #0
 8009134:	2200      	movs	r2, #0
 8009136:	2100      	movs	r1, #0
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f001 fbff 	bl	800a93c <USBD_LL_PrepareReceive>
 800913e:	e017      	b.n	8009170 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00a      	beq.n	8009162 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009152:	2b03      	cmp	r3, #3
 8009154:	d105      	bne.n	8009162 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009162:	2180      	movs	r1, #128	; 0x80
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f001 fb3f 	bl	800a7e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 ff32 	bl	8009fd4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009176:	2b01      	cmp	r3, #1
 8009178:	d123      	bne.n	80091c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7ff fe9b 	bl	8008eb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009188:	e01b      	b.n	80091c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d013      	beq.n	80091be <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800919c:	2b03      	cmp	r3, #3
 800919e:	d10e      	bne.n	80091be <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	7afa      	ldrb	r2, [r7, #11]
 80091aa:	4611      	mov	r1, r2
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	4798      	blx	r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	e002      	b.n	80091c4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091be:	2303      	movs	r3, #3
 80091c0:	e000      	b.n	80091c4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d009      	beq.n	8009210 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	6852      	ldr	r2, [r2, #4]
 8009208:	b2d2      	uxtb	r2, r2
 800920a:	4611      	mov	r1, r2
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009210:	2340      	movs	r3, #64	; 0x40
 8009212:	2200      	movs	r2, #0
 8009214:	2100      	movs	r1, #0
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f001 faa1 	bl	800a75e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2240      	movs	r2, #64	; 0x40
 8009228:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800922c:	2340      	movs	r3, #64	; 0x40
 800922e:	2200      	movs	r2, #0
 8009230:	2180      	movs	r1, #128	; 0x80
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 fa93 	bl	800a75e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2240      	movs	r2, #64	; 0x40
 8009242:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	78fa      	ldrb	r2, [r7, #3]
 800925e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2204      	movs	r2, #4
 8009286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d105      	bne.n	80092b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d10b      	bne.n	80092ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d005      	beq.n	80092ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009358:	2b00      	cmp	r3, #0
 800935a:	d009      	beq.n	8009370 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6852      	ldr	r2, [r2, #4]
 8009368:	b2d2      	uxtb	r2, r2
 800936a:	4611      	mov	r1, r2
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	4798      	blx	r3
  }

  return USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800937a:	b480      	push	{r7}
 800937c:	b087      	sub	sp, #28
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	3301      	adds	r3, #1
 8009390:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009398:	8a3b      	ldrh	r3, [r7, #16]
 800939a:	021b      	lsls	r3, r3, #8
 800939c:	b21a      	sxth	r2, r3
 800939e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	b21b      	sxth	r3, r3
 80093a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093a8:	89fb      	ldrh	r3, [r7, #14]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	371c      	adds	r7, #28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
	...

080093b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	d004      	beq.n	80093dc <USBD_StdDevReq+0x24>
 80093d2:	2b40      	cmp	r3, #64	; 0x40
 80093d4:	d002      	beq.n	80093dc <USBD_StdDevReq+0x24>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <USBD_StdDevReq+0x38>
 80093da:	e050      	b.n	800947e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	4798      	blx	r3
 80093ea:	4603      	mov	r3, r0
 80093ec:	73fb      	strb	r3, [r7, #15]
    break;
 80093ee:	e04b      	b.n	8009488 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	785b      	ldrb	r3, [r3, #1]
 80093f4:	2b09      	cmp	r3, #9
 80093f6:	d83c      	bhi.n	8009472 <USBD_StdDevReq+0xba>
 80093f8:	a201      	add	r2, pc, #4	; (adr r2, 8009400 <USBD_StdDevReq+0x48>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	08009455 	.word	0x08009455
 8009404:	08009469 	.word	0x08009469
 8009408:	08009473 	.word	0x08009473
 800940c:	0800945f 	.word	0x0800945f
 8009410:	08009473 	.word	0x08009473
 8009414:	08009433 	.word	0x08009433
 8009418:	08009429 	.word	0x08009429
 800941c:	08009473 	.word	0x08009473
 8009420:	0800944b 	.word	0x0800944b
 8009424:	0800943d 	.word	0x0800943d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f9ce 	bl	80097cc <USBD_GetDescriptor>
      break;
 8009430:	e024      	b.n	800947c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fb33 	bl	8009aa0 <USBD_SetAddress>
      break;
 800943a:	e01f      	b.n	800947c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fb70 	bl	8009b24 <USBD_SetConfig>
 8009444:	4603      	mov	r3, r0
 8009446:	73fb      	strb	r3, [r7, #15]
      break;
 8009448:	e018      	b.n	800947c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fc0d 	bl	8009c6c <USBD_GetConfig>
      break;
 8009452:	e013      	b.n	800947c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fc3c 	bl	8009cd4 <USBD_GetStatus>
      break;
 800945c:	e00e      	b.n	800947c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fc6a 	bl	8009d3a <USBD_SetFeature>
      break;
 8009466:	e009      	b.n	800947c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fc79 	bl	8009d62 <USBD_ClrFeature>
      break;
 8009470:	e004      	b.n	800947c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fccf 	bl	8009e18 <USBD_CtlError>
      break;
 800947a:	bf00      	nop
    }
    break;
 800947c:	e004      	b.n	8009488 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fcc9 	bl	8009e18 <USBD_CtlError>
    break;
 8009486:	bf00      	nop
  }

  return ret;
 8009488:	7bfb      	ldrb	r3, [r7, #15]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop

08009494 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094aa:	2b20      	cmp	r3, #32
 80094ac:	d003      	beq.n	80094b6 <USBD_StdItfReq+0x22>
 80094ae:	2b40      	cmp	r3, #64	; 0x40
 80094b0:	d001      	beq.n	80094b6 <USBD_StdItfReq+0x22>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d12a      	bne.n	800950c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094bc:	3b01      	subs	r3, #1
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d81d      	bhi.n	80094fe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	889b      	ldrh	r3, [r3, #4]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d813      	bhi.n	80094f4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	4798      	blx	r3
 80094da:	4603      	mov	r3, r0
 80094dc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	88db      	ldrh	r3, [r3, #6]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d110      	bne.n	8009508 <USBD_StdItfReq+0x74>
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10d      	bne.n	8009508 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fd5e 	bl	8009fae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80094f2:	e009      	b.n	8009508 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fc8e 	bl	8009e18 <USBD_CtlError>
      break;
 80094fc:	e004      	b.n	8009508 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fc89 	bl	8009e18 <USBD_CtlError>
      break;
 8009506:	e000      	b.n	800950a <USBD_StdItfReq+0x76>
      break;
 8009508:	bf00      	nop
    }
    break;
 800950a:	e004      	b.n	8009516 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fc82 	bl	8009e18 <USBD_CtlError>
    break;
 8009514:	bf00      	nop
  }

  return ret;
 8009516:	7bfb      	ldrb	r3, [r7, #15]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	889b      	ldrh	r3, [r3, #4]
 8009532:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800953c:	2b20      	cmp	r3, #32
 800953e:	d004      	beq.n	800954a <USBD_StdEPReq+0x2a>
 8009540:	2b40      	cmp	r3, #64	; 0x40
 8009542:	d002      	beq.n	800954a <USBD_StdEPReq+0x2a>
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00a      	beq.n	800955e <USBD_StdEPReq+0x3e>
 8009548:	e135      	b.n	80097b6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	4798      	blx	r3
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
    break;
 800955c:	e130      	b.n	80097c0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	785b      	ldrb	r3, [r3, #1]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d03e      	beq.n	80095e4 <USBD_StdEPReq+0xc4>
 8009566:	2b03      	cmp	r3, #3
 8009568:	d002      	beq.n	8009570 <USBD_StdEPReq+0x50>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d077      	beq.n	800965e <USBD_StdEPReq+0x13e>
 800956e:	e11c      	b.n	80097aa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009576:	2b02      	cmp	r3, #2
 8009578:	d002      	beq.n	8009580 <USBD_StdEPReq+0x60>
 800957a:	2b03      	cmp	r3, #3
 800957c:	d015      	beq.n	80095aa <USBD_StdEPReq+0x8a>
 800957e:	e02b      	b.n	80095d8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00c      	beq.n	80095a0 <USBD_StdEPReq+0x80>
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	2b80      	cmp	r3, #128	; 0x80
 800958a:	d009      	beq.n	80095a0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 f929 	bl	800a7e8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009596:	2180      	movs	r1, #128	; 0x80
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 f925 	bl	800a7e8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800959e:	e020      	b.n	80095e2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fc38 	bl	8009e18 <USBD_CtlError>
        break;
 80095a8:	e01b      	b.n	80095e2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	885b      	ldrh	r3, [r3, #2]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10e      	bne.n	80095d0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00b      	beq.n	80095d0 <USBD_StdEPReq+0xb0>
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
 80095ba:	2b80      	cmp	r3, #128	; 0x80
 80095bc:	d008      	beq.n	80095d0 <USBD_StdEPReq+0xb0>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	88db      	ldrh	r3, [r3, #6]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d104      	bne.n	80095d0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f001 f90c 	bl	800a7e8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fcec 	bl	8009fae <USBD_CtlSendStatus>

        break;
 80095d6:	e004      	b.n	80095e2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fc1c 	bl	8009e18 <USBD_CtlError>
        break;
 80095e0:	bf00      	nop
      }
      break;
 80095e2:	e0e7      	b.n	80097b4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d002      	beq.n	80095f4 <USBD_StdEPReq+0xd4>
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	d015      	beq.n	800961e <USBD_StdEPReq+0xfe>
 80095f2:	e02d      	b.n	8009650 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00c      	beq.n	8009614 <USBD_StdEPReq+0xf4>
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	2b80      	cmp	r3, #128	; 0x80
 80095fe:	d009      	beq.n	8009614 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f001 f8ef 	bl	800a7e8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800960a:	2180      	movs	r1, #128	; 0x80
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f001 f8eb 	bl	800a7e8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009612:	e023      	b.n	800965c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fbfe 	bl	8009e18 <USBD_CtlError>
        break;
 800961c:	e01e      	b.n	800965c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	885b      	ldrh	r3, [r3, #2]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d119      	bne.n	800965a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009626:	7bbb      	ldrb	r3, [r7, #14]
 8009628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 f8f6 	bl	800a826 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fcb7 	bl	8009fae <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	4798      	blx	r3
        }
        break;
 800964e:	e004      	b.n	800965a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fbe0 	bl	8009e18 <USBD_CtlError>
        break;
 8009658:	e000      	b.n	800965c <USBD_StdEPReq+0x13c>
        break;
 800965a:	bf00      	nop
      }
      break;
 800965c:	e0aa      	b.n	80097b4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009664:	2b02      	cmp	r3, #2
 8009666:	d002      	beq.n	800966e <USBD_StdEPReq+0x14e>
 8009668:	2b03      	cmp	r3, #3
 800966a:	d032      	beq.n	80096d2 <USBD_StdEPReq+0x1b2>
 800966c:	e097      	b.n	800979e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800966e:	7bbb      	ldrb	r3, [r7, #14]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d007      	beq.n	8009684 <USBD_StdEPReq+0x164>
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	2b80      	cmp	r3, #128	; 0x80
 8009678:	d004      	beq.n	8009684 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fbcb 	bl	8009e18 <USBD_CtlError>
          break;
 8009682:	e091      	b.n	80097a8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009688:	2b00      	cmp	r3, #0
 800968a:	da0b      	bge.n	80096a4 <USBD_StdEPReq+0x184>
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	3310      	adds	r3, #16
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	4413      	add	r3, r2
 80096a0:	3304      	adds	r3, #4
 80096a2:	e00b      	b.n	80096bc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	4413      	add	r3, r2
 80096ba:	3304      	adds	r3, #4
 80096bc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2202      	movs	r2, #2
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fc15 	bl	8009efa <USBD_CtlSendData>
        break;
 80096d0:	e06a      	b.n	80097a8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80096d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	da11      	bge.n	80096fe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	f003 020f 	and.w	r2, r3, #15
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	3324      	adds	r3, #36	; 0x24
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d117      	bne.n	8009724 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fb8e 	bl	8009e18 <USBD_CtlError>
            break;
 80096fc:	e054      	b.n	80097a8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	f003 020f 	and.w	r2, r3, #15
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	4613      	mov	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	440b      	add	r3, r1
 8009710:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d104      	bne.n	8009724 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fb7b 	bl	8009e18 <USBD_CtlError>
            break;
 8009722:	e041      	b.n	80097a8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009728:	2b00      	cmp	r3, #0
 800972a:	da0b      	bge.n	8009744 <USBD_StdEPReq+0x224>
 800972c:	7bbb      	ldrb	r3, [r7, #14]
 800972e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	3310      	adds	r3, #16
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	4413      	add	r3, r2
 8009740:	3304      	adds	r3, #4
 8009742:	e00b      	b.n	800975c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	4413      	add	r3, r2
 800975a:	3304      	adds	r3, #4
 800975c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <USBD_StdEPReq+0x24a>
 8009764:	7bbb      	ldrb	r3, [r7, #14]
 8009766:	2b80      	cmp	r3, #128	; 0x80
 8009768:	d103      	bne.n	8009772 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2200      	movs	r2, #0
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	e00e      	b.n	8009790 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f001 f874 	bl	800a864 <USBD_LL_IsStallEP>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2201      	movs	r2, #1
 8009786:	601a      	str	r2, [r3, #0]
 8009788:	e002      	b.n	8009790 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2202      	movs	r2, #2
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fbaf 	bl	8009efa <USBD_CtlSendData>
          break;
 800979c:	e004      	b.n	80097a8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fb39 	bl	8009e18 <USBD_CtlError>
        break;
 80097a6:	bf00      	nop
      }
      break;
 80097a8:	e004      	b.n	80097b4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fb33 	bl	8009e18 <USBD_CtlError>
      break;
 80097b2:	bf00      	nop
    }
    break;
 80097b4:	e004      	b.n	80097c0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fb2d 	bl	8009e18 <USBD_CtlError>
    break;
 80097be:	bf00      	nop
  }

  return ret;
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
	...

080097cc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097d6:	2300      	movs	r3, #0
 80097d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	885b      	ldrh	r3, [r3, #2]
 80097e6:	0a1b      	lsrs	r3, r3, #8
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	3b01      	subs	r3, #1
 80097ec:	2b06      	cmp	r3, #6
 80097ee:	f200 8128 	bhi.w	8009a42 <USBD_GetDescriptor+0x276>
 80097f2:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <USBD_GetDescriptor+0x2c>)
 80097f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f8:	08009815 	.word	0x08009815
 80097fc:	0800982d 	.word	0x0800982d
 8009800:	0800986d 	.word	0x0800986d
 8009804:	08009a43 	.word	0x08009a43
 8009808:	08009a43 	.word	0x08009a43
 800980c:	080099e3 	.word	0x080099e3
 8009810:	08009a0f 	.word	0x08009a0f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	7c12      	ldrb	r2, [r2, #16]
 8009820:	f107 0108 	add.w	r1, r7, #8
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
 8009828:	60f8      	str	r0, [r7, #12]
    break;
 800982a:	e112      	b.n	8009a52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	7c1b      	ldrb	r3, [r3, #16]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10d      	bne.n	8009850 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800983a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983c:	f107 0208 	add.w	r2, r7, #8
 8009840:	4610      	mov	r0, r2
 8009842:	4798      	blx	r3
 8009844:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	2202      	movs	r2, #2
 800984c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800984e:	e100      	b.n	8009a52 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	f107 0208 	add.w	r2, r7, #8
 800985c:	4610      	mov	r0, r2
 800985e:	4798      	blx	r3
 8009860:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	2202      	movs	r2, #2
 8009868:	701a      	strb	r2, [r3, #0]
    break;
 800986a:	e0f2      	b.n	8009a52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	885b      	ldrh	r3, [r3, #2]
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b05      	cmp	r3, #5
 8009874:	f200 80ac 	bhi.w	80099d0 <USBD_GetDescriptor+0x204>
 8009878:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <USBD_GetDescriptor+0xb4>)
 800987a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987e:	bf00      	nop
 8009880:	08009899 	.word	0x08009899
 8009884:	080098cd 	.word	0x080098cd
 8009888:	08009901 	.word	0x08009901
 800988c:	08009935 	.word	0x08009935
 8009890:	08009969 	.word	0x08009969
 8009894:	0800999d 	.word	0x0800999d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00b      	beq.n	80098bc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7c12      	ldrb	r2, [r2, #16]
 80098b0:	f107 0108 	add.w	r1, r7, #8
 80098b4:	4610      	mov	r0, r2
 80098b6:	4798      	blx	r3
 80098b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098ba:	e091      	b.n	80099e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 faaa 	bl	8009e18 <USBD_CtlError>
        err++;
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	3301      	adds	r3, #1
 80098c8:	72fb      	strb	r3, [r7, #11]
      break;
 80098ca:	e089      	b.n	80099e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	7c12      	ldrb	r2, [r2, #16]
 80098e4:	f107 0108 	add.w	r1, r7, #8
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
 80098ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098ee:	e077      	b.n	80099e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa90 	bl	8009e18 <USBD_CtlError>
        err++;
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	3301      	adds	r3, #1
 80098fc:	72fb      	strb	r3, [r7, #11]
      break;
 80098fe:	e06f      	b.n	80099e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00b      	beq.n	8009924 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	7c12      	ldrb	r2, [r2, #16]
 8009918:	f107 0108 	add.w	r1, r7, #8
 800991c:	4610      	mov	r0, r2
 800991e:	4798      	blx	r3
 8009920:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009922:	e05d      	b.n	80099e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fa76 	bl	8009e18 <USBD_CtlError>
        err++;
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	3301      	adds	r3, #1
 8009930:	72fb      	strb	r3, [r7, #11]
      break;
 8009932:	e055      	b.n	80099e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00b      	beq.n	8009958 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	7c12      	ldrb	r2, [r2, #16]
 800994c:	f107 0108 	add.w	r1, r7, #8
 8009950:	4610      	mov	r0, r2
 8009952:	4798      	blx	r3
 8009954:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009956:	e043      	b.n	80099e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa5c 	bl	8009e18 <USBD_CtlError>
        err++;
 8009960:	7afb      	ldrb	r3, [r7, #11]
 8009962:	3301      	adds	r3, #1
 8009964:	72fb      	strb	r3, [r7, #11]
      break;
 8009966:	e03b      	b.n	80099e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	7c12      	ldrb	r2, [r2, #16]
 8009980:	f107 0108 	add.w	r1, r7, #8
 8009984:	4610      	mov	r0, r2
 8009986:	4798      	blx	r3
 8009988:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800998a:	e029      	b.n	80099e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fa42 	bl	8009e18 <USBD_CtlError>
        err++;
 8009994:	7afb      	ldrb	r3, [r7, #11]
 8009996:	3301      	adds	r3, #1
 8009998:	72fb      	strb	r3, [r7, #11]
      break;
 800999a:	e021      	b.n	80099e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00b      	beq.n	80099c0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	7c12      	ldrb	r2, [r2, #16]
 80099b4:	f107 0108 	add.w	r1, r7, #8
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
 80099bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099be:	e00f      	b.n	80099e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fa28 	bl	8009e18 <USBD_CtlError>
        err++;
 80099c8:	7afb      	ldrb	r3, [r7, #11]
 80099ca:	3301      	adds	r3, #1
 80099cc:	72fb      	strb	r3, [r7, #11]
      break;
 80099ce:	e007      	b.n	80099e0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa20 	bl	8009e18 <USBD_CtlError>
      err++;
 80099d8:	7afb      	ldrb	r3, [r7, #11]
 80099da:	3301      	adds	r3, #1
 80099dc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80099de:	bf00      	nop
    }
    break;
 80099e0:	e037      	b.n	8009a52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	7c1b      	ldrb	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d109      	bne.n	80099fe <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f2:	f107 0208 	add.w	r2, r7, #8
 80099f6:	4610      	mov	r0, r2
 80099f8:	4798      	blx	r3
 80099fa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80099fc:	e029      	b.n	8009a52 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fa09 	bl	8009e18 <USBD_CtlError>
      err++;
 8009a06:	7afb      	ldrb	r3, [r7, #11]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	72fb      	strb	r3, [r7, #11]
    break;
 8009a0c:	e021      	b.n	8009a52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	7c1b      	ldrb	r3, [r3, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10d      	bne.n	8009a32 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	f107 0208 	add.w	r2, r7, #8
 8009a22:	4610      	mov	r0, r2
 8009a24:	4798      	blx	r3
 8009a26:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	2207      	movs	r2, #7
 8009a2e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009a30:	e00f      	b.n	8009a52 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f9ef 	bl	8009e18 <USBD_CtlError>
      err++;
 8009a3a:	7afb      	ldrb	r3, [r7, #11]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	72fb      	strb	r3, [r7, #11]
    break;
 8009a40:	e007      	b.n	8009a52 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f9e7 	bl	8009e18 <USBD_CtlError>
    err++;
 8009a4a:	7afb      	ldrb	r3, [r7, #11]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	72fb      	strb	r3, [r7, #11]
    break;
 8009a50:	bf00      	nop
  }

  if (err != 0U)
 8009a52:	7afb      	ldrb	r3, [r7, #11]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d11e      	bne.n	8009a96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	88db      	ldrh	r3, [r3, #6]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d016      	beq.n	8009a8e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009a60:	893b      	ldrh	r3, [r7, #8]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00e      	beq.n	8009a84 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	88da      	ldrh	r2, [r3, #6]
 8009a6a:	893b      	ldrh	r3, [r7, #8]
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	bf28      	it	cs
 8009a70:	4613      	movcs	r3, r2
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a76:	893b      	ldrh	r3, [r7, #8]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	68f9      	ldr	r1, [r7, #12]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fa3c 	bl	8009efa <USBD_CtlSendData>
 8009a82:	e009      	b.n	8009a98 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f9c6 	bl	8009e18 <USBD_CtlError>
 8009a8c:	e004      	b.n	8009a98 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fa8d 	bl	8009fae <USBD_CtlSendStatus>
 8009a94:	e000      	b.n	8009a98 <USBD_GetDescriptor+0x2cc>
    return;
 8009a96:	bf00      	nop
    }
  }
}
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop

08009aa0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	889b      	ldrh	r3, [r3, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d130      	bne.n	8009b14 <USBD_SetAddress+0x74>
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	88db      	ldrh	r3, [r3, #6]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d12c      	bne.n	8009b14 <USBD_SetAddress+0x74>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	885b      	ldrh	r3, [r3, #2]
 8009abe:	2b7f      	cmp	r3, #127	; 0x7f
 8009ac0:	d828      	bhi.n	8009b14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	885b      	ldrh	r3, [r3, #2]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009acc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d104      	bne.n	8009ae2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f99c 	bl	8009e18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae0:	e01c      	b.n	8009b1c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	7bfa      	ldrb	r2, [r7, #15]
 8009ae6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fee4 	bl	800a8bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fa5a 	bl	8009fae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b08:	e008      	b.n	8009b1c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b12:	e003      	b.n	8009b1c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f97e 	bl	8009e18 <USBD_CtlError>
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	885b      	ldrh	r3, [r3, #2]
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	4b4b      	ldr	r3, [pc, #300]	; (8009c68 <USBD_SetConfig+0x144>)
 8009b3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b3c:	4b4a      	ldr	r3, [pc, #296]	; (8009c68 <USBD_SetConfig+0x144>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d905      	bls.n	8009b50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f966 	bl	8009e18 <USBD_CtlError>
    return USBD_FAIL;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e087      	b.n	8009c60 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d002      	beq.n	8009b60 <USBD_SetConfig+0x3c>
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d025      	beq.n	8009baa <USBD_SetConfig+0x86>
 8009b5e:	e071      	b.n	8009c44 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009b60:	4b41      	ldr	r3, [pc, #260]	; (8009c68 <USBD_SetConfig+0x144>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d01c      	beq.n	8009ba2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009b68:	4b3f      	ldr	r3, [pc, #252]	; (8009c68 <USBD_SetConfig+0x144>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b72:	4b3d      	ldr	r3, [pc, #244]	; (8009c68 <USBD_SetConfig+0x144>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff f9a7 	bl	8008ecc <USBD_SetClassConfig>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d004      	beq.n	8009b92 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f944 	bl	8009e18 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009b90:	e065      	b.n	8009c5e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa0b 	bl	8009fae <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009ba0:	e05d      	b.n	8009c5e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fa03 	bl	8009fae <USBD_CtlSendStatus>
    break;
 8009ba8:	e059      	b.n	8009c5e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009baa:	4b2f      	ldr	r3, [pc, #188]	; (8009c68 <USBD_SetConfig+0x144>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d112      	bne.n	8009bd8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009bba:	4b2b      	ldr	r3, [pc, #172]	; (8009c68 <USBD_SetConfig+0x144>)
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009bc4:	4b28      	ldr	r3, [pc, #160]	; (8009c68 <USBD_SetConfig+0x144>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7ff f99a 	bl	8008f04 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f9ec 	bl	8009fae <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009bd6:	e042      	b.n	8009c5e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009bd8:	4b23      	ldr	r3, [pc, #140]	; (8009c68 <USBD_SetConfig+0x144>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d02a      	beq.n	8009c3c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7ff f988 	bl	8008f04 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009bf4:	4b1c      	ldr	r3, [pc, #112]	; (8009c68 <USBD_SetConfig+0x144>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bfe:	4b1a      	ldr	r3, [pc, #104]	; (8009c68 <USBD_SetConfig+0x144>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff f961 	bl	8008ecc <USBD_SetClassConfig>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009c0e:	7bfb      	ldrb	r3, [r7, #15]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00f      	beq.n	8009c34 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f8fe 	bl	8009e18 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff f96d 	bl	8008f04 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009c32:	e014      	b.n	8009c5e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f9ba 	bl	8009fae <USBD_CtlSendStatus>
    break;
 8009c3a:	e010      	b.n	8009c5e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f9b6 	bl	8009fae <USBD_CtlSendStatus>
    break;
 8009c42:	e00c      	b.n	8009c5e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f8e6 	bl	8009e18 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <USBD_SetConfig+0x144>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff f956 	bl	8008f04 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c5c:	bf00      	nop
  }

  return ret;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	200003b0 	.word	0x200003b0

08009c6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	88db      	ldrh	r3, [r3, #6]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d004      	beq.n	8009c88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f8c9 	bl	8009e18 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009c86:	e021      	b.n	8009ccc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	db17      	blt.n	8009cc2 <USBD_GetConfig+0x56>
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	dd02      	ble.n	8009c9c <USBD_GetConfig+0x30>
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	d00b      	beq.n	8009cb2 <USBD_GetConfig+0x46>
 8009c9a:	e012      	b.n	8009cc2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	4619      	mov	r1, r3
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f925 	bl	8009efa <USBD_CtlSendData>
      break;
 8009cb0:	e00c      	b.n	8009ccc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f91d 	bl	8009efa <USBD_CtlSendData>
      break;
 8009cc0:	e004      	b.n	8009ccc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f8a7 	bl	8009e18 <USBD_CtlError>
      break;
 8009cca:	bf00      	nop
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d81e      	bhi.n	8009d28 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	88db      	ldrh	r3, [r3, #6]
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d004      	beq.n	8009cfc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f88f 	bl	8009e18 <USBD_CtlError>
      break;
 8009cfa:	e01a      	b.n	8009d32 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d005      	beq.n	8009d18 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	f043 0202 	orr.w	r2, r3, #2
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	330c      	adds	r3, #12
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f8ea 	bl	8009efa <USBD_CtlSendData>
    break;
 8009d26:	e004      	b.n	8009d32 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f874 	bl	8009e18 <USBD_CtlError>
    break;
 8009d30:	bf00      	nop
  }
}
 8009d32:	bf00      	nop
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	885b      	ldrh	r3, [r3, #2]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d106      	bne.n	8009d5a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f92a 	bl	8009fae <USBD_CtlSendStatus>
  }
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d72:	3b01      	subs	r3, #1
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d80b      	bhi.n	8009d90 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	885b      	ldrh	r3, [r3, #2]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d10c      	bne.n	8009d9a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f910 	bl	8009fae <USBD_CtlSendStatus>
      }
      break;
 8009d8e:	e004      	b.n	8009d9a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f840 	bl	8009e18 <USBD_CtlError>
      break;
 8009d98:	e000      	b.n	8009d9c <USBD_ClrFeature+0x3a>
      break;
 8009d9a:	bf00      	nop
  }
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	781a      	ldrb	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	781a      	ldrb	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f7ff fad3 	bl	800937a <SWAPBYTE>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	3301      	adds	r3, #1
 8009de0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f7ff fac6 	bl	800937a <SWAPBYTE>
 8009dee:	4603      	mov	r3, r0
 8009df0:	461a      	mov	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f7ff fab9 	bl	800937a <SWAPBYTE>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	80da      	strh	r2, [r3, #6]
}
 8009e10:	bf00      	nop
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e22:	2180      	movs	r1, #128	; 0x80
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fcdf 	bl	800a7e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fcdb 	bl	800a7e8 <USBD_LL_StallEP>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b086      	sub	sp, #24
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	60f8      	str	r0, [r7, #12]
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d036      	beq.n	8009ebe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e54:	6938      	ldr	r0, [r7, #16]
 8009e56:	f000 f836 	bl	8009ec6 <USBD_GetLen>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	005b      	lsls	r3, r3, #1
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e68:	7dfb      	ldrb	r3, [r7, #23]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	7812      	ldrb	r2, [r2, #0]
 8009e72:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	3301      	adds	r3, #1
 8009e78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	4413      	add	r3, r2
 8009e80:	2203      	movs	r2, #3
 8009e82:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
 8009e86:	3301      	adds	r3, #1
 8009e88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e8a:	e013      	b.n	8009eb4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4413      	add	r3, r2
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	7812      	ldrb	r2, [r2, #0]
 8009e96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	613b      	str	r3, [r7, #16]
    idx++;
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	701a      	strb	r2, [r3, #0]
    idx++;
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e7      	bne.n	8009e8c <USBD_GetString+0x52>
 8009ebc:	e000      	b.n	8009ec0 <USBD_GetString+0x86>
    return;
 8009ebe:	bf00      	nop
  }
}
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ed6:	e005      	b.n	8009ee4 <USBD_GetLen+0x1e>
  {
    len++;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	3301      	adds	r3, #1
 8009edc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1f5      	bne.n	8009ed8 <USBD_GetLen+0x12>
  }

  return len;
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2202      	movs	r2, #2
 8009f0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	2100      	movs	r1, #0
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 fcea 	bl	800a8fa <USBD_LL_Transmit>

  return USBD_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	2100      	movs	r1, #0
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 fcd9 	bl	800a8fa <USBD_LL_Transmit>

  return USBD_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2203      	movs	r2, #3
 8009f62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fcdd 	bl	800a93c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 fccc 	bl	800a93c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2204      	movs	r2, #4
 8009fba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fc98 	bl	800a8fa <USBD_LL_Transmit>

  return USBD_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2205      	movs	r2, #5
 8009fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fca6 	bl	800a93c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a000:	2200      	movs	r2, #0
 800a002:	4912      	ldr	r1, [pc, #72]	; (800a04c <MX_USB_DEVICE_Init+0x50>)
 800a004:	4812      	ldr	r0, [pc, #72]	; (800a050 <MX_USB_DEVICE_Init+0x54>)
 800a006:	f7fe fef3 	bl	8008df0 <USBD_Init>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d001      	beq.n	800a014 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a010:	f7f7 fc16 	bl	8001840 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a014:	490f      	ldr	r1, [pc, #60]	; (800a054 <MX_USB_DEVICE_Init+0x58>)
 800a016:	480e      	ldr	r0, [pc, #56]	; (800a050 <MX_USB_DEVICE_Init+0x54>)
 800a018:	f7fe ff20 	bl	8008e5c <USBD_RegisterClass>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a022:	f7f7 fc0d 	bl	8001840 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a026:	490c      	ldr	r1, [pc, #48]	; (800a058 <MX_USB_DEVICE_Init+0x5c>)
 800a028:	4809      	ldr	r0, [pc, #36]	; (800a050 <MX_USB_DEVICE_Init+0x54>)
 800a02a:	f7fe fe75 	bl	8008d18 <USBD_CDC_RegisterInterface>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a034:	f7f7 fc04 	bl	8001840 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a038:	4805      	ldr	r0, [pc, #20]	; (800a050 <MX_USB_DEVICE_Init+0x54>)
 800a03a:	f7fe ff30 	bl	8008e9e <USBD_Start>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a044:	f7f7 fbfc 	bl	8001840 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a048:	bf00      	nop
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20000144 	.word	0x20000144
 800a050:	20000a24 	.word	0x20000a24
 800a054:	20000024 	.word	0x20000024
 800a058:	20000128 	.word	0x20000128

0800a05c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a060:	2200      	movs	r2, #0
 800a062:	4905      	ldr	r1, [pc, #20]	; (800a078 <CDC_Init_FS+0x1c>)
 800a064:	4805      	ldr	r0, [pc, #20]	; (800a07c <CDC_Init_FS+0x20>)
 800a066:	f7fe fe6c 	bl	8008d42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a06a:	4905      	ldr	r1, [pc, #20]	; (800a080 <CDC_Init_FS+0x24>)
 800a06c:	4803      	ldr	r0, [pc, #12]	; (800a07c <CDC_Init_FS+0x20>)
 800a06e:	f7fe fe81 	bl	8008d74 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a072:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a074:	4618      	mov	r0, r3
 800a076:	bd80      	pop	{r7, pc}
 800a078:	20000d58 	.word	0x20000d58
 800a07c:	20000a24 	.word	0x20000a24
 800a080:	20000cf4 	.word	0x20000cf4

0800a084 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a084:	b480      	push	{r7}
 800a086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a088:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	6039      	str	r1, [r7, #0]
 800a09e:	71fb      	strb	r3, [r7, #7]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint8_t lineCoding[7] = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 }; // 115200bps, 1stop, no parity, 8bit

  switch(cmd)
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	2b23      	cmp	r3, #35	; 0x23
 800a0a8:	d85c      	bhi.n	800a164 <CDC_Control_FS+0xd0>
 800a0aa:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <CDC_Control_FS+0x1c>)
 800a0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b0:	0800a165 	.word	0x0800a165
 800a0b4:	0800a165 	.word	0x0800a165
 800a0b8:	0800a165 	.word	0x0800a165
 800a0bc:	0800a165 	.word	0x0800a165
 800a0c0:	0800a165 	.word	0x0800a165
 800a0c4:	0800a165 	.word	0x0800a165
 800a0c8:	0800a165 	.word	0x0800a165
 800a0cc:	0800a165 	.word	0x0800a165
 800a0d0:	0800a165 	.word	0x0800a165
 800a0d4:	0800a165 	.word	0x0800a165
 800a0d8:	0800a165 	.word	0x0800a165
 800a0dc:	0800a165 	.word	0x0800a165
 800a0e0:	0800a165 	.word	0x0800a165
 800a0e4:	0800a165 	.word	0x0800a165
 800a0e8:	0800a165 	.word	0x0800a165
 800a0ec:	0800a165 	.word	0x0800a165
 800a0f0:	0800a165 	.word	0x0800a165
 800a0f4:	0800a165 	.word	0x0800a165
 800a0f8:	0800a165 	.word	0x0800a165
 800a0fc:	0800a165 	.word	0x0800a165
 800a100:	0800a165 	.word	0x0800a165
 800a104:	0800a165 	.word	0x0800a165
 800a108:	0800a165 	.word	0x0800a165
 800a10c:	0800a165 	.word	0x0800a165
 800a110:	0800a165 	.word	0x0800a165
 800a114:	0800a165 	.word	0x0800a165
 800a118:	0800a165 	.word	0x0800a165
 800a11c:	0800a165 	.word	0x0800a165
 800a120:	0800a165 	.word	0x0800a165
 800a124:	0800a165 	.word	0x0800a165
 800a128:	0800a165 	.word	0x0800a165
 800a12c:	0800a165 	.word	0x0800a165
 800a130:	0800a141 	.word	0x0800a141
 800a134:	0800a153 	.word	0x0800a153
 800a138:	0800a165 	.word	0x0800a165
 800a13c:	0800a165 	.word	0x0800a165
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800a140:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <CDC_Control_FS+0xe0>)
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	6810      	ldr	r0, [r2, #0]
 800a146:	6018      	str	r0, [r3, #0]
 800a148:	8891      	ldrh	r1, [r2, #4]
 800a14a:	7992      	ldrb	r2, [r2, #6]
 800a14c:	8099      	strh	r1, [r3, #4]
 800a14e:	719a      	strb	r2, [r3, #6]
    break;
 800a150:	e009      	b.n	800a166 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	4a07      	ldr	r2, [pc, #28]	; (800a174 <CDC_Control_FS+0xe0>)
 800a156:	6810      	ldr	r0, [r2, #0]
 800a158:	6018      	str	r0, [r3, #0]
 800a15a:	8891      	ldrh	r1, [r2, #4]
 800a15c:	7992      	ldrb	r2, [r2, #6]
 800a15e:	8099      	strh	r1, [r3, #4]
 800a160:	719a      	strb	r2, [r3, #6]
    break;
 800a162:	e000      	b.n	800a166 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a164:	bf00      	nop
  }

  return (USBD_OK);
 800a166:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a168:	4618      	mov	r0, r3
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	2000013c 	.word	0x2000013c

0800a178 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a182:	6879      	ldr	r1, [r7, #4]
 800a184:	4811      	ldr	r0, [pc, #68]	; (800a1cc <CDC_Receive_FS+0x54>)
 800a186:	f7fe fdf5 	bl	8008d74 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a18a:	4810      	ldr	r0, [pc, #64]	; (800a1cc <CDC_Receive_FS+0x54>)
 800a18c:	f7fe fe06 	bl	8008d9c <USBD_CDC_ReceivePacket>
	  extern uint8_t ReceivedData[100]; // Tablica przechowujaca odebrane dane
	  extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

	  // Wyczyszczenie tablicy odebranych danych
	  uint8_t iter;
	  for(iter = 0; iter<100; ++iter){
 800a190:	2300      	movs	r3, #0
 800a192:	73fb      	strb	r3, [r7, #15]
 800a194:	e006      	b.n	800a1a4 <CDC_Receive_FS+0x2c>
		  ReceivedData[iter] = 0;
 800a196:	7bfb      	ldrb	r3, [r7, #15]
 800a198:	4a0d      	ldr	r2, [pc, #52]	; (800a1d0 <CDC_Receive_FS+0x58>)
 800a19a:	2100      	movs	r1, #0
 800a19c:	54d1      	strb	r1, [r2, r3]
	  for(iter = 0; iter<100; ++iter){
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	73fb      	strb	r3, [r7, #15]
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
 800a1a6:	2b63      	cmp	r3, #99	; 0x63
 800a1a8:	d9f5      	bls.n	800a196 <CDC_Receive_FS+0x1e>
	  }

	  strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	4806      	ldr	r0, [pc, #24]	; (800a1d0 <CDC_Receive_FS+0x58>)
 800a1b6:	f001 fb7f 	bl	800b8b8 <strlcpy>
	  ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 800a1ba:	4b06      	ldr	r3, [pc, #24]	; (800a1d4 <CDC_Receive_FS+0x5c>)
 800a1bc:	2201      	movs	r2, #1
 800a1be:	701a      	strb	r2, [r3, #0]

	  return (USBD_OK);
 800a1c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000a24 	.word	0x20000a24
 800a1d0:	20000790 	.word	0x20000790
 800a1d4:	20000384 	.word	0x20000384

0800a1d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a1ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	371c      	adds	r7, #28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
	...

0800a1fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	6039      	str	r1, [r7, #0]
 800a206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	2212      	movs	r2, #18
 800a20c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a20e:	4b03      	ldr	r3, [pc, #12]	; (800a21c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a210:	4618      	mov	r0, r3
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	20000160 	.word	0x20000160

0800a220 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	6039      	str	r1, [r7, #0]
 800a22a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	2204      	movs	r2, #4
 800a230:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a232:	4b03      	ldr	r3, [pc, #12]	; (800a240 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	20000174 	.word	0x20000174

0800a244 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	4603      	mov	r3, r0
 800a24c:	6039      	str	r1, [r7, #0]
 800a24e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a250:	79fb      	ldrb	r3, [r7, #7]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d105      	bne.n	800a262 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	4907      	ldr	r1, [pc, #28]	; (800a278 <USBD_FS_ProductStrDescriptor+0x34>)
 800a25a:	4808      	ldr	r0, [pc, #32]	; (800a27c <USBD_FS_ProductStrDescriptor+0x38>)
 800a25c:	f7ff fded 	bl	8009e3a <USBD_GetString>
 800a260:	e004      	b.n	800a26c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	4904      	ldr	r1, [pc, #16]	; (800a278 <USBD_FS_ProductStrDescriptor+0x34>)
 800a266:	4805      	ldr	r0, [pc, #20]	; (800a27c <USBD_FS_ProductStrDescriptor+0x38>)
 800a268:	f7ff fde7 	bl	8009e3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a26c:	4b02      	ldr	r3, [pc, #8]	; (800a278 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	20000dbc 	.word	0x20000dbc
 800a27c:	0800e528 	.word	0x0800e528

0800a280 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	4603      	mov	r3, r0
 800a288:	6039      	str	r1, [r7, #0]
 800a28a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	4904      	ldr	r1, [pc, #16]	; (800a2a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a290:	4804      	ldr	r0, [pc, #16]	; (800a2a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a292:	f7ff fdd2 	bl	8009e3a <USBD_GetString>
  return USBD_StrDesc;
 800a296:	4b02      	ldr	r3, [pc, #8]	; (800a2a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	20000dbc 	.word	0x20000dbc
 800a2a4:	0800e540 	.word	0x0800e540

0800a2a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	6039      	str	r1, [r7, #0]
 800a2b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	221a      	movs	r2, #26
 800a2b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2ba:	f000 f843 	bl	800a344 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2be:	4b02      	ldr	r3, [pc, #8]	; (800a2c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	20000178 	.word	0x20000178

0800a2cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	6039      	str	r1, [r7, #0]
 800a2d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2d8:	79fb      	ldrb	r3, [r7, #7]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d105      	bne.n	800a2ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	4907      	ldr	r1, [pc, #28]	; (800a300 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2e2:	4808      	ldr	r0, [pc, #32]	; (800a304 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2e4:	f7ff fda9 	bl	8009e3a <USBD_GetString>
 800a2e8:	e004      	b.n	800a2f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	4904      	ldr	r1, [pc, #16]	; (800a300 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2ee:	4805      	ldr	r0, [pc, #20]	; (800a304 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2f0:	f7ff fda3 	bl	8009e3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f4:	4b02      	ldr	r3, [pc, #8]	; (800a300 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20000dbc 	.word	0x20000dbc
 800a304:	0800e554 	.word	0x0800e554

0800a308 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	6039      	str	r1, [r7, #0]
 800a312:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d105      	bne.n	800a326 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	4907      	ldr	r1, [pc, #28]	; (800a33c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a31e:	4808      	ldr	r0, [pc, #32]	; (800a340 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a320:	f7ff fd8b 	bl	8009e3a <USBD_GetString>
 800a324:	e004      	b.n	800a330 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	4904      	ldr	r1, [pc, #16]	; (800a33c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a32a:	4805      	ldr	r0, [pc, #20]	; (800a340 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a32c:	f7ff fd85 	bl	8009e3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a330:	4b02      	ldr	r3, [pc, #8]	; (800a33c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a332:	4618      	mov	r0, r3
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000dbc 	.word	0x20000dbc
 800a340:	0800e560 	.word	0x0800e560

0800a344 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a34a:	4b0f      	ldr	r3, [pc, #60]	; (800a388 <Get_SerialNum+0x44>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a350:	4b0e      	ldr	r3, [pc, #56]	; (800a38c <Get_SerialNum+0x48>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a356:	4b0e      	ldr	r3, [pc, #56]	; (800a390 <Get_SerialNum+0x4c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4413      	add	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d009      	beq.n	800a37e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a36a:	2208      	movs	r2, #8
 800a36c:	4909      	ldr	r1, [pc, #36]	; (800a394 <Get_SerialNum+0x50>)
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f000 f814 	bl	800a39c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a374:	2204      	movs	r2, #4
 800a376:	4908      	ldr	r1, [pc, #32]	; (800a398 <Get_SerialNum+0x54>)
 800a378:	68b8      	ldr	r0, [r7, #8]
 800a37a:	f000 f80f 	bl	800a39c <IntToUnicode>
  }
}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	1fff7a10 	.word	0x1fff7a10
 800a38c:	1fff7a14 	.word	0x1fff7a14
 800a390:	1fff7a18 	.word	0x1fff7a18
 800a394:	2000017a 	.word	0x2000017a
 800a398:	2000018a 	.word	0x2000018a

0800a39c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	75fb      	strb	r3, [r7, #23]
 800a3b2:	e027      	b.n	800a404 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	0f1b      	lsrs	r3, r3, #28
 800a3b8:	2b09      	cmp	r3, #9
 800a3ba:	d80b      	bhi.n	800a3d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	0f1b      	lsrs	r3, r3, #28
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	440b      	add	r3, r1
 800a3cc:	3230      	adds	r2, #48	; 0x30
 800a3ce:	b2d2      	uxtb	r2, r2
 800a3d0:	701a      	strb	r2, [r3, #0]
 800a3d2:	e00a      	b.n	800a3ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	0f1b      	lsrs	r3, r3, #28
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	4619      	mov	r1, r3
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	440b      	add	r3, r1
 800a3e4:	3237      	adds	r2, #55	; 0x37
 800a3e6:	b2d2      	uxtb	r2, r2
 800a3e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	011b      	lsls	r3, r3, #4
 800a3ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	3301      	adds	r3, #1
 800a402:	75fb      	strb	r3, [r7, #23]
 800a404:	7dfa      	ldrb	r2, [r7, #23]
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d3d3      	bcc.n	800a3b4 <IntToUnicode+0x18>
  }
}
 800a40c:	bf00      	nop
 800a40e:	371c      	adds	r7, #28
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08a      	sub	sp, #40	; 0x28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a420:	f107 0314 	add.w	r3, r7, #20
 800a424:	2200      	movs	r2, #0
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	605a      	str	r2, [r3, #4]
 800a42a:	609a      	str	r2, [r3, #8]
 800a42c:	60da      	str	r2, [r3, #12]
 800a42e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a438:	d13a      	bne.n	800a4b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a43a:	2300      	movs	r3, #0
 800a43c:	613b      	str	r3, [r7, #16]
 800a43e:	4b1e      	ldr	r3, [pc, #120]	; (800a4b8 <HAL_PCD_MspInit+0xa0>)
 800a440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a442:	4a1d      	ldr	r2, [pc, #116]	; (800a4b8 <HAL_PCD_MspInit+0xa0>)
 800a444:	f043 0301 	orr.w	r3, r3, #1
 800a448:	6313      	str	r3, [r2, #48]	; 0x30
 800a44a:	4b1b      	ldr	r3, [pc, #108]	; (800a4b8 <HAL_PCD_MspInit+0xa0>)
 800a44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	613b      	str	r3, [r7, #16]
 800a454:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a456:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a45a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a45c:	2302      	movs	r3, #2
 800a45e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a460:	2300      	movs	r3, #0
 800a462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a464:	2303      	movs	r3, #3
 800a466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a468:	230a      	movs	r3, #10
 800a46a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a46c:	f107 0314 	add.w	r3, r7, #20
 800a470:	4619      	mov	r1, r3
 800a472:	4812      	ldr	r0, [pc, #72]	; (800a4bc <HAL_PCD_MspInit+0xa4>)
 800a474:	f7f9 f8da 	bl	800362c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a478:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <HAL_PCD_MspInit+0xa0>)
 800a47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a47c:	4a0e      	ldr	r2, [pc, #56]	; (800a4b8 <HAL_PCD_MspInit+0xa0>)
 800a47e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a482:	6353      	str	r3, [r2, #52]	; 0x34
 800a484:	2300      	movs	r3, #0
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	4b0b      	ldr	r3, [pc, #44]	; (800a4b8 <HAL_PCD_MspInit+0xa0>)
 800a48a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a48c:	4a0a      	ldr	r2, [pc, #40]	; (800a4b8 <HAL_PCD_MspInit+0xa0>)
 800a48e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a492:	6453      	str	r3, [r2, #68]	; 0x44
 800a494:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <HAL_PCD_MspInit+0xa0>)
 800a496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a49c:	60fb      	str	r3, [r7, #12]
 800a49e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	2043      	movs	r0, #67	; 0x43
 800a4a6:	f7f8 fd80 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a4aa:	2043      	movs	r0, #67	; 0x43
 800a4ac:	f7f8 fd99 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a4b0:	bf00      	nop
 800a4b2:	3728      	adds	r7, #40	; 0x28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	40023800 	.word	0x40023800
 800a4bc:	40020000 	.word	0x40020000

0800a4c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	f7fe fd2c 	bl	8008f34 <USBD_LL_SetupStage>
}
 800a4dc:	bf00      	nop
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a4f6:	78fa      	ldrb	r2, [r7, #3]
 800a4f8:	6879      	ldr	r1, [r7, #4]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	00db      	lsls	r3, r3, #3
 800a4fe:	1a9b      	subs	r3, r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	440b      	add	r3, r1
 800a504:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	4619      	mov	r1, r3
 800a50e:	f7fe fd64 	bl	8008fda <USBD_LL_DataOutStage>
}
 800a512:	bf00      	nop
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a52c:	78fa      	ldrb	r2, [r7, #3]
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	4613      	mov	r3, r2
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	1a9b      	subs	r3, r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	440b      	add	r3, r1
 800a53a:	3348      	adds	r3, #72	; 0x48
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	78fb      	ldrb	r3, [r7, #3]
 800a540:	4619      	mov	r1, r3
 800a542:	f7fe fdad 	bl	80090a0 <USBD_LL_DataInStage>
}
 800a546:	bf00      	nop
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fe feb1 	bl	80092c4 <USBD_LL_SOF>
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a572:	2301      	movs	r3, #1
 800a574:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d001      	beq.n	800a582 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a57e:	f7f7 f95f 	bl	8001840 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a588:	7bfa      	ldrb	r2, [r7, #15]
 800a58a:	4611      	mov	r1, r2
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fe fe5e 	bl	800924e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a598:	4618      	mov	r0, r3
 800a59a:	f7fe fe17 	bl	80091cc <USBD_LL_Reset>
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fe fe59 	bl	800926e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	6812      	ldr	r2, [r2, #0]
 800a5ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5ce:	f043 0301 	orr.w	r3, r3, #1
 800a5d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d005      	beq.n	800a5e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5dc:	4b04      	ldr	r3, [pc, #16]	; (800a5f0 <HAL_PCD_SuspendCallback+0x48>)
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	4a03      	ldr	r2, [pc, #12]	; (800a5f0 <HAL_PCD_SuspendCallback+0x48>)
 800a5e2:	f043 0306 	orr.w	r3, r3, #6
 800a5e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5e8:	bf00      	nop
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	e000ed00 	.word	0xe000ed00

0800a5f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a602:	4618      	mov	r0, r3
 800a604:	f7fe fe48 	bl	8009298 <USBD_LL_Resume>
}
 800a608:	bf00      	nop
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	460b      	mov	r3, r1
 800a61a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a622:	78fa      	ldrb	r2, [r7, #3]
 800a624:	4611      	mov	r1, r2
 800a626:	4618      	mov	r0, r3
 800a628:	f7fe fe73 	bl	8009312 <USBD_LL_IsoOUTIncomplete>
}
 800a62c:	bf00      	nop
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a646:	78fa      	ldrb	r2, [r7, #3]
 800a648:	4611      	mov	r1, r2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fe fe54 	bl	80092f8 <USBD_LL_IsoINIncomplete>
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fe60 	bl	800932c <USBD_LL_DevConnected>
}
 800a66c:	bf00      	nop
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe fe5d 	bl	8009342 <USBD_LL_DevDisconnected>
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d13c      	bne.n	800a71a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a6a0:	4a20      	ldr	r2, [pc, #128]	; (800a724 <USBD_LL_Init+0x94>)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a1e      	ldr	r2, [pc, #120]	; (800a724 <USBD_LL_Init+0x94>)
 800a6ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a6b0:	4b1c      	ldr	r3, [pc, #112]	; (800a724 <USBD_LL_Init+0x94>)
 800a6b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a6b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a6b8:	4b1a      	ldr	r3, [pc, #104]	; (800a724 <USBD_LL_Init+0x94>)
 800a6ba:	2204      	movs	r2, #4
 800a6bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a6be:	4b19      	ldr	r3, [pc, #100]	; (800a724 <USBD_LL_Init+0x94>)
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a6c4:	4b17      	ldr	r3, [pc, #92]	; (800a724 <USBD_LL_Init+0x94>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6ca:	4b16      	ldr	r3, [pc, #88]	; (800a724 <USBD_LL_Init+0x94>)
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a6d0:	4b14      	ldr	r3, [pc, #80]	; (800a724 <USBD_LL_Init+0x94>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a6d6:	4b13      	ldr	r3, [pc, #76]	; (800a724 <USBD_LL_Init+0x94>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a6dc:	4b11      	ldr	r3, [pc, #68]	; (800a724 <USBD_LL_Init+0x94>)
 800a6de:	2200      	movs	r2, #0
 800a6e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a6e2:	4b10      	ldr	r3, [pc, #64]	; (800a724 <USBD_LL_Init+0x94>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a6e8:	4b0e      	ldr	r3, [pc, #56]	; (800a724 <USBD_LL_Init+0x94>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a6ee:	480d      	ldr	r0, [pc, #52]	; (800a724 <USBD_LL_Init+0x94>)
 800a6f0:	f7f9 f937 	bl	8003962 <HAL_PCD_Init>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a6fa:	f7f7 f8a1 	bl	8001840 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a6fe:	2180      	movs	r1, #128	; 0x80
 800a700:	4808      	ldr	r0, [pc, #32]	; (800a724 <USBD_LL_Init+0x94>)
 800a702:	f7fa fa94 	bl	8004c2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a706:	2240      	movs	r2, #64	; 0x40
 800a708:	2100      	movs	r1, #0
 800a70a:	4806      	ldr	r0, [pc, #24]	; (800a724 <USBD_LL_Init+0x94>)
 800a70c:	f7fa fa48 	bl	8004ba0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a710:	2280      	movs	r2, #128	; 0x80
 800a712:	2101      	movs	r1, #1
 800a714:	4803      	ldr	r0, [pc, #12]	; (800a724 <USBD_LL_Init+0x94>)
 800a716:	f7fa fa43 	bl	8004ba0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	20000fbc 	.word	0x20000fbc

0800a728 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a73e:	4618      	mov	r0, r3
 800a740:	f7f9 fa2c 	bl	8003b9c <HAL_PCD_Start>
 800a744:	4603      	mov	r3, r0
 800a746:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800a748:	7bfb      	ldrb	r3, [r7, #15]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 f92a 	bl	800a9a4 <USBD_Get_USB_Status>
 800a750:	4603      	mov	r3, r0
 800a752:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a754:	7bbb      	ldrb	r3, [r7, #14]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	4608      	mov	r0, r1
 800a768:	4611      	mov	r1, r2
 800a76a:	461a      	mov	r2, r3
 800a76c:	4603      	mov	r3, r0
 800a76e:	70fb      	strb	r3, [r7, #3]
 800a770:	460b      	mov	r3, r1
 800a772:	70bb      	strb	r3, [r7, #2]
 800a774:	4613      	mov	r3, r2
 800a776:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a786:	78bb      	ldrb	r3, [r7, #2]
 800a788:	883a      	ldrh	r2, [r7, #0]
 800a78a:	78f9      	ldrb	r1, [r7, #3]
 800a78c:	f7f9 fe10 	bl	80043b0 <HAL_PCD_EP_Open>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	4618      	mov	r0, r3
 800a798:	f000 f904 	bl	800a9a4 <USBD_Get_USB_Status>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7c4:	78fa      	ldrb	r2, [r7, #3]
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7f9 fe59 	bl	8004480 <HAL_PCD_EP_Close>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 f8e5 	bl	800a9a4 <USBD_Get_USB_Status>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a802:	78fa      	ldrb	r2, [r7, #3]
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f7f9 ff31 	bl	800466e <HAL_PCD_EP_SetStall>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f8c6 	bl	800a9a4 <USBD_Get_USB_Status>
 800a818:	4603      	mov	r3, r0
 800a81a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b084      	sub	sp, #16
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	460b      	mov	r3, r1
 800a830:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a840:	78fa      	ldrb	r2, [r7, #3]
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f7f9 ff76 	bl	8004736 <HAL_PCD_EP_ClrStall>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f8a7 	bl	800a9a4 <USBD_Get_USB_Status>
 800a856:	4603      	mov	r3, r0
 800a858:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a876:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	da0b      	bge.n	800a898 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a880:	78fb      	ldrb	r3, [r7, #3]
 800a882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a886:	68f9      	ldr	r1, [r7, #12]
 800a888:	4613      	mov	r3, r2
 800a88a:	00db      	lsls	r3, r3, #3
 800a88c:	1a9b      	subs	r3, r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	440b      	add	r3, r1
 800a892:	333e      	adds	r3, #62	; 0x3e
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	e00b      	b.n	800a8b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a898:	78fb      	ldrb	r3, [r7, #3]
 800a89a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a89e:	68f9      	ldr	r1, [r7, #12]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	00db      	lsls	r3, r3, #3
 800a8a4:	1a9b      	subs	r3, r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	440b      	add	r3, r1
 800a8aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a8ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8d6:	78fa      	ldrb	r2, [r7, #3]
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f9 fd43 	bl	8004366 <HAL_PCD_SetAddress>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 f85c 	bl	800a9a4 <USBD_Get_USB_Status>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800a8f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b086      	sub	sp, #24
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	603b      	str	r3, [r7, #0]
 800a906:	460b      	mov	r3, r1
 800a908:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a918:	7af9      	ldrb	r1, [r7, #11]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	f7f9 fe5c 	bl	80045da <HAL_PCD_EP_Transmit>
 800a922:	4603      	mov	r3, r0
 800a924:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800a926:	7dfb      	ldrb	r3, [r7, #23]
 800a928:	4618      	mov	r0, r3
 800a92a:	f000 f83b 	bl	800a9a4 <USBD_Get_USB_Status>
 800a92e:	4603      	mov	r3, r0
 800a930:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800a932:	7dbb      	ldrb	r3, [r7, #22]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3718      	adds	r7, #24
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	607a      	str	r2, [r7, #4]
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	460b      	mov	r3, r1
 800a94a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a95a:	7af9      	ldrb	r1, [r7, #11]
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	f7f9 fdd8 	bl	8004514 <HAL_PCD_EP_Receive>
 800a964:	4603      	mov	r3, r0
 800a966:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800a968:	7dfb      	ldrb	r3, [r7, #23]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 f81a 	bl	800a9a4 <USBD_Get_USB_Status>
 800a970:	4603      	mov	r3, r0
 800a972:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800a974:	7dbb      	ldrb	r3, [r7, #22]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b082      	sub	sp, #8
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a990:	78fa      	ldrb	r2, [r7, #3]
 800a992:	4611      	mov	r1, r2
 800a994:	4618      	mov	r0, r3
 800a996:	f7f9 fe08 	bl	80045aa <HAL_PCD_EP_GetRxCount>
 800a99a:	4603      	mov	r3, r0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
 800a9b4:	2b03      	cmp	r3, #3
 800a9b6:	d817      	bhi.n	800a9e8 <USBD_Get_USB_Status+0x44>
 800a9b8:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <USBD_Get_USB_Status+0x1c>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800a9d1 	.word	0x0800a9d1
 800a9c4:	0800a9d7 	.word	0x0800a9d7
 800a9c8:	0800a9dd 	.word	0x0800a9dd
 800a9cc:	0800a9e3 	.word	0x0800a9e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d4:	e00b      	b.n	800a9ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9da:	e008      	b.n	800a9ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e0:	e005      	b.n	800a9ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e6:	e002      	b.n	800a9ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ec:	bf00      	nop
  }
  return usb_status;
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3714      	adds	r7, #20
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <__errno>:
 800a9fc:	4b01      	ldr	r3, [pc, #4]	; (800aa04 <__errno+0x8>)
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	20000194 	.word	0x20000194

0800aa08 <__libc_init_array>:
 800aa08:	b570      	push	{r4, r5, r6, lr}
 800aa0a:	4e0d      	ldr	r6, [pc, #52]	; (800aa40 <__libc_init_array+0x38>)
 800aa0c:	4c0d      	ldr	r4, [pc, #52]	; (800aa44 <__libc_init_array+0x3c>)
 800aa0e:	1ba4      	subs	r4, r4, r6
 800aa10:	10a4      	asrs	r4, r4, #2
 800aa12:	2500      	movs	r5, #0
 800aa14:	42a5      	cmp	r5, r4
 800aa16:	d109      	bne.n	800aa2c <__libc_init_array+0x24>
 800aa18:	4e0b      	ldr	r6, [pc, #44]	; (800aa48 <__libc_init_array+0x40>)
 800aa1a:	4c0c      	ldr	r4, [pc, #48]	; (800aa4c <__libc_init_array+0x44>)
 800aa1c:	f003 fd76 	bl	800e50c <_init>
 800aa20:	1ba4      	subs	r4, r4, r6
 800aa22:	10a4      	asrs	r4, r4, #2
 800aa24:	2500      	movs	r5, #0
 800aa26:	42a5      	cmp	r5, r4
 800aa28:	d105      	bne.n	800aa36 <__libc_init_array+0x2e>
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa30:	4798      	blx	r3
 800aa32:	3501      	adds	r5, #1
 800aa34:	e7ee      	b.n	800aa14 <__libc_init_array+0xc>
 800aa36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa3a:	4798      	blx	r3
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	e7f2      	b.n	800aa26 <__libc_init_array+0x1e>
 800aa40:	0800e8b8 	.word	0x0800e8b8
 800aa44:	0800e8b8 	.word	0x0800e8b8
 800aa48:	0800e8b8 	.word	0x0800e8b8
 800aa4c:	0800e8bc 	.word	0x0800e8bc

0800aa50 <malloc>:
 800aa50:	4b02      	ldr	r3, [pc, #8]	; (800aa5c <malloc+0xc>)
 800aa52:	4601      	mov	r1, r0
 800aa54:	6818      	ldr	r0, [r3, #0]
 800aa56:	f000 b861 	b.w	800ab1c <_malloc_r>
 800aa5a:	bf00      	nop
 800aa5c:	20000194 	.word	0x20000194

0800aa60 <free>:
 800aa60:	4b02      	ldr	r3, [pc, #8]	; (800aa6c <free+0xc>)
 800aa62:	4601      	mov	r1, r0
 800aa64:	6818      	ldr	r0, [r3, #0]
 800aa66:	f000 b80b 	b.w	800aa80 <_free_r>
 800aa6a:	bf00      	nop
 800aa6c:	20000194 	.word	0x20000194

0800aa70 <memset>:
 800aa70:	4402      	add	r2, r0
 800aa72:	4603      	mov	r3, r0
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d100      	bne.n	800aa7a <memset+0xa>
 800aa78:	4770      	bx	lr
 800aa7a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa7e:	e7f9      	b.n	800aa74 <memset+0x4>

0800aa80 <_free_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4605      	mov	r5, r0
 800aa84:	2900      	cmp	r1, #0
 800aa86:	d045      	beq.n	800ab14 <_free_r+0x94>
 800aa88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa8c:	1f0c      	subs	r4, r1, #4
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	bfb8      	it	lt
 800aa92:	18e4      	addlt	r4, r4, r3
 800aa94:	f002 ff73 	bl	800d97e <__malloc_lock>
 800aa98:	4a1f      	ldr	r2, [pc, #124]	; (800ab18 <_free_r+0x98>)
 800aa9a:	6813      	ldr	r3, [r2, #0]
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	b933      	cbnz	r3, 800aaae <_free_r+0x2e>
 800aaa0:	6063      	str	r3, [r4, #4]
 800aaa2:	6014      	str	r4, [r2, #0]
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaaa:	f002 bf69 	b.w	800d980 <__malloc_unlock>
 800aaae:	42a3      	cmp	r3, r4
 800aab0:	d90c      	bls.n	800aacc <_free_r+0x4c>
 800aab2:	6821      	ldr	r1, [r4, #0]
 800aab4:	1862      	adds	r2, r4, r1
 800aab6:	4293      	cmp	r3, r2
 800aab8:	bf04      	itt	eq
 800aaba:	681a      	ldreq	r2, [r3, #0]
 800aabc:	685b      	ldreq	r3, [r3, #4]
 800aabe:	6063      	str	r3, [r4, #4]
 800aac0:	bf04      	itt	eq
 800aac2:	1852      	addeq	r2, r2, r1
 800aac4:	6022      	streq	r2, [r4, #0]
 800aac6:	6004      	str	r4, [r0, #0]
 800aac8:	e7ec      	b.n	800aaa4 <_free_r+0x24>
 800aaca:	4613      	mov	r3, r2
 800aacc:	685a      	ldr	r2, [r3, #4]
 800aace:	b10a      	cbz	r2, 800aad4 <_free_r+0x54>
 800aad0:	42a2      	cmp	r2, r4
 800aad2:	d9fa      	bls.n	800aaca <_free_r+0x4a>
 800aad4:	6819      	ldr	r1, [r3, #0]
 800aad6:	1858      	adds	r0, r3, r1
 800aad8:	42a0      	cmp	r0, r4
 800aada:	d10b      	bne.n	800aaf4 <_free_r+0x74>
 800aadc:	6820      	ldr	r0, [r4, #0]
 800aade:	4401      	add	r1, r0
 800aae0:	1858      	adds	r0, r3, r1
 800aae2:	4282      	cmp	r2, r0
 800aae4:	6019      	str	r1, [r3, #0]
 800aae6:	d1dd      	bne.n	800aaa4 <_free_r+0x24>
 800aae8:	6810      	ldr	r0, [r2, #0]
 800aaea:	6852      	ldr	r2, [r2, #4]
 800aaec:	605a      	str	r2, [r3, #4]
 800aaee:	4401      	add	r1, r0
 800aaf0:	6019      	str	r1, [r3, #0]
 800aaf2:	e7d7      	b.n	800aaa4 <_free_r+0x24>
 800aaf4:	d902      	bls.n	800aafc <_free_r+0x7c>
 800aaf6:	230c      	movs	r3, #12
 800aaf8:	602b      	str	r3, [r5, #0]
 800aafa:	e7d3      	b.n	800aaa4 <_free_r+0x24>
 800aafc:	6820      	ldr	r0, [r4, #0]
 800aafe:	1821      	adds	r1, r4, r0
 800ab00:	428a      	cmp	r2, r1
 800ab02:	bf04      	itt	eq
 800ab04:	6811      	ldreq	r1, [r2, #0]
 800ab06:	6852      	ldreq	r2, [r2, #4]
 800ab08:	6062      	str	r2, [r4, #4]
 800ab0a:	bf04      	itt	eq
 800ab0c:	1809      	addeq	r1, r1, r0
 800ab0e:	6021      	streq	r1, [r4, #0]
 800ab10:	605c      	str	r4, [r3, #4]
 800ab12:	e7c7      	b.n	800aaa4 <_free_r+0x24>
 800ab14:	bd38      	pop	{r3, r4, r5, pc}
 800ab16:	bf00      	nop
 800ab18:	200003b4 	.word	0x200003b4

0800ab1c <_malloc_r>:
 800ab1c:	b570      	push	{r4, r5, r6, lr}
 800ab1e:	1ccd      	adds	r5, r1, #3
 800ab20:	f025 0503 	bic.w	r5, r5, #3
 800ab24:	3508      	adds	r5, #8
 800ab26:	2d0c      	cmp	r5, #12
 800ab28:	bf38      	it	cc
 800ab2a:	250c      	movcc	r5, #12
 800ab2c:	2d00      	cmp	r5, #0
 800ab2e:	4606      	mov	r6, r0
 800ab30:	db01      	blt.n	800ab36 <_malloc_r+0x1a>
 800ab32:	42a9      	cmp	r1, r5
 800ab34:	d903      	bls.n	800ab3e <_malloc_r+0x22>
 800ab36:	230c      	movs	r3, #12
 800ab38:	6033      	str	r3, [r6, #0]
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	bd70      	pop	{r4, r5, r6, pc}
 800ab3e:	f002 ff1e 	bl	800d97e <__malloc_lock>
 800ab42:	4a21      	ldr	r2, [pc, #132]	; (800abc8 <_malloc_r+0xac>)
 800ab44:	6814      	ldr	r4, [r2, #0]
 800ab46:	4621      	mov	r1, r4
 800ab48:	b991      	cbnz	r1, 800ab70 <_malloc_r+0x54>
 800ab4a:	4c20      	ldr	r4, [pc, #128]	; (800abcc <_malloc_r+0xb0>)
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	b91b      	cbnz	r3, 800ab58 <_malloc_r+0x3c>
 800ab50:	4630      	mov	r0, r6
 800ab52:	f000 fe7b 	bl	800b84c <_sbrk_r>
 800ab56:	6020      	str	r0, [r4, #0]
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f000 fe76 	bl	800b84c <_sbrk_r>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d124      	bne.n	800abae <_malloc_r+0x92>
 800ab64:	230c      	movs	r3, #12
 800ab66:	6033      	str	r3, [r6, #0]
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f002 ff09 	bl	800d980 <__malloc_unlock>
 800ab6e:	e7e4      	b.n	800ab3a <_malloc_r+0x1e>
 800ab70:	680b      	ldr	r3, [r1, #0]
 800ab72:	1b5b      	subs	r3, r3, r5
 800ab74:	d418      	bmi.n	800aba8 <_malloc_r+0x8c>
 800ab76:	2b0b      	cmp	r3, #11
 800ab78:	d90f      	bls.n	800ab9a <_malloc_r+0x7e>
 800ab7a:	600b      	str	r3, [r1, #0]
 800ab7c:	50cd      	str	r5, [r1, r3]
 800ab7e:	18cc      	adds	r4, r1, r3
 800ab80:	4630      	mov	r0, r6
 800ab82:	f002 fefd 	bl	800d980 <__malloc_unlock>
 800ab86:	f104 000b 	add.w	r0, r4, #11
 800ab8a:	1d23      	adds	r3, r4, #4
 800ab8c:	f020 0007 	bic.w	r0, r0, #7
 800ab90:	1ac3      	subs	r3, r0, r3
 800ab92:	d0d3      	beq.n	800ab3c <_malloc_r+0x20>
 800ab94:	425a      	negs	r2, r3
 800ab96:	50e2      	str	r2, [r4, r3]
 800ab98:	e7d0      	b.n	800ab3c <_malloc_r+0x20>
 800ab9a:	428c      	cmp	r4, r1
 800ab9c:	684b      	ldr	r3, [r1, #4]
 800ab9e:	bf16      	itet	ne
 800aba0:	6063      	strne	r3, [r4, #4]
 800aba2:	6013      	streq	r3, [r2, #0]
 800aba4:	460c      	movne	r4, r1
 800aba6:	e7eb      	b.n	800ab80 <_malloc_r+0x64>
 800aba8:	460c      	mov	r4, r1
 800abaa:	6849      	ldr	r1, [r1, #4]
 800abac:	e7cc      	b.n	800ab48 <_malloc_r+0x2c>
 800abae:	1cc4      	adds	r4, r0, #3
 800abb0:	f024 0403 	bic.w	r4, r4, #3
 800abb4:	42a0      	cmp	r0, r4
 800abb6:	d005      	beq.n	800abc4 <_malloc_r+0xa8>
 800abb8:	1a21      	subs	r1, r4, r0
 800abba:	4630      	mov	r0, r6
 800abbc:	f000 fe46 	bl	800b84c <_sbrk_r>
 800abc0:	3001      	adds	r0, #1
 800abc2:	d0cf      	beq.n	800ab64 <_malloc_r+0x48>
 800abc4:	6025      	str	r5, [r4, #0]
 800abc6:	e7db      	b.n	800ab80 <_malloc_r+0x64>
 800abc8:	200003b4 	.word	0x200003b4
 800abcc:	200003b8 	.word	0x200003b8

0800abd0 <__cvt>:
 800abd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abd4:	ec55 4b10 	vmov	r4, r5, d0
 800abd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800abda:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800abde:	2d00      	cmp	r5, #0
 800abe0:	460e      	mov	r6, r1
 800abe2:	4691      	mov	r9, r2
 800abe4:	4619      	mov	r1, r3
 800abe6:	bfb8      	it	lt
 800abe8:	4622      	movlt	r2, r4
 800abea:	462b      	mov	r3, r5
 800abec:	f027 0720 	bic.w	r7, r7, #32
 800abf0:	bfbb      	ittet	lt
 800abf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800abf6:	461d      	movlt	r5, r3
 800abf8:	2300      	movge	r3, #0
 800abfa:	232d      	movlt	r3, #45	; 0x2d
 800abfc:	bfb8      	it	lt
 800abfe:	4614      	movlt	r4, r2
 800ac00:	2f46      	cmp	r7, #70	; 0x46
 800ac02:	700b      	strb	r3, [r1, #0]
 800ac04:	d004      	beq.n	800ac10 <__cvt+0x40>
 800ac06:	2f45      	cmp	r7, #69	; 0x45
 800ac08:	d100      	bne.n	800ac0c <__cvt+0x3c>
 800ac0a:	3601      	adds	r6, #1
 800ac0c:	2102      	movs	r1, #2
 800ac0e:	e000      	b.n	800ac12 <__cvt+0x42>
 800ac10:	2103      	movs	r1, #3
 800ac12:	ab03      	add	r3, sp, #12
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	ab02      	add	r3, sp, #8
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	4632      	mov	r2, r6
 800ac1c:	4653      	mov	r3, sl
 800ac1e:	ec45 4b10 	vmov	d0, r4, r5
 800ac22:	f001 fd9d 	bl	800c760 <_dtoa_r>
 800ac26:	2f47      	cmp	r7, #71	; 0x47
 800ac28:	4680      	mov	r8, r0
 800ac2a:	d102      	bne.n	800ac32 <__cvt+0x62>
 800ac2c:	f019 0f01 	tst.w	r9, #1
 800ac30:	d026      	beq.n	800ac80 <__cvt+0xb0>
 800ac32:	2f46      	cmp	r7, #70	; 0x46
 800ac34:	eb08 0906 	add.w	r9, r8, r6
 800ac38:	d111      	bne.n	800ac5e <__cvt+0x8e>
 800ac3a:	f898 3000 	ldrb.w	r3, [r8]
 800ac3e:	2b30      	cmp	r3, #48	; 0x30
 800ac40:	d10a      	bne.n	800ac58 <__cvt+0x88>
 800ac42:	2200      	movs	r2, #0
 800ac44:	2300      	movs	r3, #0
 800ac46:	4620      	mov	r0, r4
 800ac48:	4629      	mov	r1, r5
 800ac4a:	f7f5 ff45 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac4e:	b918      	cbnz	r0, 800ac58 <__cvt+0x88>
 800ac50:	f1c6 0601 	rsb	r6, r6, #1
 800ac54:	f8ca 6000 	str.w	r6, [sl]
 800ac58:	f8da 3000 	ldr.w	r3, [sl]
 800ac5c:	4499      	add	r9, r3
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2300      	movs	r3, #0
 800ac62:	4620      	mov	r0, r4
 800ac64:	4629      	mov	r1, r5
 800ac66:	f7f5 ff37 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac6a:	b938      	cbnz	r0, 800ac7c <__cvt+0xac>
 800ac6c:	2230      	movs	r2, #48	; 0x30
 800ac6e:	9b03      	ldr	r3, [sp, #12]
 800ac70:	454b      	cmp	r3, r9
 800ac72:	d205      	bcs.n	800ac80 <__cvt+0xb0>
 800ac74:	1c59      	adds	r1, r3, #1
 800ac76:	9103      	str	r1, [sp, #12]
 800ac78:	701a      	strb	r2, [r3, #0]
 800ac7a:	e7f8      	b.n	800ac6e <__cvt+0x9e>
 800ac7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac80:	9b03      	ldr	r3, [sp, #12]
 800ac82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac84:	eba3 0308 	sub.w	r3, r3, r8
 800ac88:	4640      	mov	r0, r8
 800ac8a:	6013      	str	r3, [r2, #0]
 800ac8c:	b004      	add	sp, #16
 800ac8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ac92 <__exponent>:
 800ac92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac94:	2900      	cmp	r1, #0
 800ac96:	4604      	mov	r4, r0
 800ac98:	bfba      	itte	lt
 800ac9a:	4249      	neglt	r1, r1
 800ac9c:	232d      	movlt	r3, #45	; 0x2d
 800ac9e:	232b      	movge	r3, #43	; 0x2b
 800aca0:	2909      	cmp	r1, #9
 800aca2:	f804 2b02 	strb.w	r2, [r4], #2
 800aca6:	7043      	strb	r3, [r0, #1]
 800aca8:	dd20      	ble.n	800acec <__exponent+0x5a>
 800acaa:	f10d 0307 	add.w	r3, sp, #7
 800acae:	461f      	mov	r7, r3
 800acb0:	260a      	movs	r6, #10
 800acb2:	fb91 f5f6 	sdiv	r5, r1, r6
 800acb6:	fb06 1115 	mls	r1, r6, r5, r1
 800acba:	3130      	adds	r1, #48	; 0x30
 800acbc:	2d09      	cmp	r5, #9
 800acbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800acc2:	f103 32ff 	add.w	r2, r3, #4294967295
 800acc6:	4629      	mov	r1, r5
 800acc8:	dc09      	bgt.n	800acde <__exponent+0x4c>
 800acca:	3130      	adds	r1, #48	; 0x30
 800accc:	3b02      	subs	r3, #2
 800acce:	f802 1c01 	strb.w	r1, [r2, #-1]
 800acd2:	42bb      	cmp	r3, r7
 800acd4:	4622      	mov	r2, r4
 800acd6:	d304      	bcc.n	800ace2 <__exponent+0x50>
 800acd8:	1a10      	subs	r0, r2, r0
 800acda:	b003      	add	sp, #12
 800acdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acde:	4613      	mov	r3, r2
 800ace0:	e7e7      	b.n	800acb2 <__exponent+0x20>
 800ace2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ace6:	f804 2b01 	strb.w	r2, [r4], #1
 800acea:	e7f2      	b.n	800acd2 <__exponent+0x40>
 800acec:	2330      	movs	r3, #48	; 0x30
 800acee:	4419      	add	r1, r3
 800acf0:	7083      	strb	r3, [r0, #2]
 800acf2:	1d02      	adds	r2, r0, #4
 800acf4:	70c1      	strb	r1, [r0, #3]
 800acf6:	e7ef      	b.n	800acd8 <__exponent+0x46>

0800acf8 <_printf_float>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	b08d      	sub	sp, #52	; 0x34
 800acfe:	460c      	mov	r4, r1
 800ad00:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ad04:	4616      	mov	r6, r2
 800ad06:	461f      	mov	r7, r3
 800ad08:	4605      	mov	r5, r0
 800ad0a:	f002 fe0d 	bl	800d928 <_localeconv_r>
 800ad0e:	6803      	ldr	r3, [r0, #0]
 800ad10:	9304      	str	r3, [sp, #16]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7f5 fa64 	bl	80001e0 <strlen>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ad20:	9005      	str	r0, [sp, #20]
 800ad22:	3307      	adds	r3, #7
 800ad24:	f023 0307 	bic.w	r3, r3, #7
 800ad28:	f103 0208 	add.w	r2, r3, #8
 800ad2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad30:	f8d4 b000 	ldr.w	fp, [r4]
 800ad34:	f8c8 2000 	str.w	r2, [r8]
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ad40:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ad44:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad48:	9307      	str	r3, [sp, #28]
 800ad4a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad52:	4ba7      	ldr	r3, [pc, #668]	; (800aff0 <_printf_float+0x2f8>)
 800ad54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad58:	f7f5 fef0 	bl	8000b3c <__aeabi_dcmpun>
 800ad5c:	bb70      	cbnz	r0, 800adbc <_printf_float+0xc4>
 800ad5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad62:	4ba3      	ldr	r3, [pc, #652]	; (800aff0 <_printf_float+0x2f8>)
 800ad64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad68:	f7f5 feca 	bl	8000b00 <__aeabi_dcmple>
 800ad6c:	bb30      	cbnz	r0, 800adbc <_printf_float+0xc4>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2300      	movs	r3, #0
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 feb9 	bl	8000aec <__aeabi_dcmplt>
 800ad7a:	b110      	cbz	r0, 800ad82 <_printf_float+0x8a>
 800ad7c:	232d      	movs	r3, #45	; 0x2d
 800ad7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad82:	4a9c      	ldr	r2, [pc, #624]	; (800aff4 <_printf_float+0x2fc>)
 800ad84:	4b9c      	ldr	r3, [pc, #624]	; (800aff8 <_printf_float+0x300>)
 800ad86:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ad8a:	bf8c      	ite	hi
 800ad8c:	4690      	movhi	r8, r2
 800ad8e:	4698      	movls	r8, r3
 800ad90:	2303      	movs	r3, #3
 800ad92:	f02b 0204 	bic.w	r2, fp, #4
 800ad96:	6123      	str	r3, [r4, #16]
 800ad98:	6022      	str	r2, [r4, #0]
 800ad9a:	f04f 0900 	mov.w	r9, #0
 800ad9e:	9700      	str	r7, [sp, #0]
 800ada0:	4633      	mov	r3, r6
 800ada2:	aa0b      	add	r2, sp, #44	; 0x2c
 800ada4:	4621      	mov	r1, r4
 800ada6:	4628      	mov	r0, r5
 800ada8:	f000 f9e6 	bl	800b178 <_printf_common>
 800adac:	3001      	adds	r0, #1
 800adae:	f040 808d 	bne.w	800aecc <_printf_float+0x1d4>
 800adb2:	f04f 30ff 	mov.w	r0, #4294967295
 800adb6:	b00d      	add	sp, #52	; 0x34
 800adb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbc:	4642      	mov	r2, r8
 800adbe:	464b      	mov	r3, r9
 800adc0:	4640      	mov	r0, r8
 800adc2:	4649      	mov	r1, r9
 800adc4:	f7f5 feba 	bl	8000b3c <__aeabi_dcmpun>
 800adc8:	b110      	cbz	r0, 800add0 <_printf_float+0xd8>
 800adca:	4a8c      	ldr	r2, [pc, #560]	; (800affc <_printf_float+0x304>)
 800adcc:	4b8c      	ldr	r3, [pc, #560]	; (800b000 <_printf_float+0x308>)
 800adce:	e7da      	b.n	800ad86 <_printf_float+0x8e>
 800add0:	6861      	ldr	r1, [r4, #4]
 800add2:	1c4b      	adds	r3, r1, #1
 800add4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800add8:	a80a      	add	r0, sp, #40	; 0x28
 800adda:	d13e      	bne.n	800ae5a <_printf_float+0x162>
 800addc:	2306      	movs	r3, #6
 800adde:	6063      	str	r3, [r4, #4]
 800ade0:	2300      	movs	r3, #0
 800ade2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ade6:	ab09      	add	r3, sp, #36	; 0x24
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	ec49 8b10 	vmov	d0, r8, r9
 800adee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800adf2:	6022      	str	r2, [r4, #0]
 800adf4:	f8cd a004 	str.w	sl, [sp, #4]
 800adf8:	6861      	ldr	r1, [r4, #4]
 800adfa:	4628      	mov	r0, r5
 800adfc:	f7ff fee8 	bl	800abd0 <__cvt>
 800ae00:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ae04:	2b47      	cmp	r3, #71	; 0x47
 800ae06:	4680      	mov	r8, r0
 800ae08:	d109      	bne.n	800ae1e <_printf_float+0x126>
 800ae0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae0c:	1cd8      	adds	r0, r3, #3
 800ae0e:	db02      	blt.n	800ae16 <_printf_float+0x11e>
 800ae10:	6862      	ldr	r2, [r4, #4]
 800ae12:	4293      	cmp	r3, r2
 800ae14:	dd47      	ble.n	800aea6 <_printf_float+0x1ae>
 800ae16:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae1a:	fa5f fa8a 	uxtb.w	sl, sl
 800ae1e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ae22:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae24:	d824      	bhi.n	800ae70 <_printf_float+0x178>
 800ae26:	3901      	subs	r1, #1
 800ae28:	4652      	mov	r2, sl
 800ae2a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae2e:	9109      	str	r1, [sp, #36]	; 0x24
 800ae30:	f7ff ff2f 	bl	800ac92 <__exponent>
 800ae34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae36:	1813      	adds	r3, r2, r0
 800ae38:	2a01      	cmp	r2, #1
 800ae3a:	4681      	mov	r9, r0
 800ae3c:	6123      	str	r3, [r4, #16]
 800ae3e:	dc02      	bgt.n	800ae46 <_printf_float+0x14e>
 800ae40:	6822      	ldr	r2, [r4, #0]
 800ae42:	07d1      	lsls	r1, r2, #31
 800ae44:	d501      	bpl.n	800ae4a <_printf_float+0x152>
 800ae46:	3301      	adds	r3, #1
 800ae48:	6123      	str	r3, [r4, #16]
 800ae4a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0a5      	beq.n	800ad9e <_printf_float+0xa6>
 800ae52:	232d      	movs	r3, #45	; 0x2d
 800ae54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae58:	e7a1      	b.n	800ad9e <_printf_float+0xa6>
 800ae5a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ae5e:	f000 8177 	beq.w	800b150 <_printf_float+0x458>
 800ae62:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ae66:	d1bb      	bne.n	800ade0 <_printf_float+0xe8>
 800ae68:	2900      	cmp	r1, #0
 800ae6a:	d1b9      	bne.n	800ade0 <_printf_float+0xe8>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e7b6      	b.n	800adde <_printf_float+0xe6>
 800ae70:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ae74:	d119      	bne.n	800aeaa <_printf_float+0x1b2>
 800ae76:	2900      	cmp	r1, #0
 800ae78:	6863      	ldr	r3, [r4, #4]
 800ae7a:	dd0c      	ble.n	800ae96 <_printf_float+0x19e>
 800ae7c:	6121      	str	r1, [r4, #16]
 800ae7e:	b913      	cbnz	r3, 800ae86 <_printf_float+0x18e>
 800ae80:	6822      	ldr	r2, [r4, #0]
 800ae82:	07d2      	lsls	r2, r2, #31
 800ae84:	d502      	bpl.n	800ae8c <_printf_float+0x194>
 800ae86:	3301      	adds	r3, #1
 800ae88:	440b      	add	r3, r1
 800ae8a:	6123      	str	r3, [r4, #16]
 800ae8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8e:	65a3      	str	r3, [r4, #88]	; 0x58
 800ae90:	f04f 0900 	mov.w	r9, #0
 800ae94:	e7d9      	b.n	800ae4a <_printf_float+0x152>
 800ae96:	b913      	cbnz	r3, 800ae9e <_printf_float+0x1a6>
 800ae98:	6822      	ldr	r2, [r4, #0]
 800ae9a:	07d0      	lsls	r0, r2, #31
 800ae9c:	d501      	bpl.n	800aea2 <_printf_float+0x1aa>
 800ae9e:	3302      	adds	r3, #2
 800aea0:	e7f3      	b.n	800ae8a <_printf_float+0x192>
 800aea2:	2301      	movs	r3, #1
 800aea4:	e7f1      	b.n	800ae8a <_printf_float+0x192>
 800aea6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800aeaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	db05      	blt.n	800aebe <_printf_float+0x1c6>
 800aeb2:	6822      	ldr	r2, [r4, #0]
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	07d1      	lsls	r1, r2, #31
 800aeb8:	d5e8      	bpl.n	800ae8c <_printf_float+0x194>
 800aeba:	3301      	adds	r3, #1
 800aebc:	e7e5      	b.n	800ae8a <_printf_float+0x192>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	bfd4      	ite	le
 800aec2:	f1c3 0302 	rsble	r3, r3, #2
 800aec6:	2301      	movgt	r3, #1
 800aec8:	4413      	add	r3, r2
 800aeca:	e7de      	b.n	800ae8a <_printf_float+0x192>
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	055a      	lsls	r2, r3, #21
 800aed0:	d407      	bmi.n	800aee2 <_printf_float+0x1ea>
 800aed2:	6923      	ldr	r3, [r4, #16]
 800aed4:	4642      	mov	r2, r8
 800aed6:	4631      	mov	r1, r6
 800aed8:	4628      	mov	r0, r5
 800aeda:	47b8      	blx	r7
 800aedc:	3001      	adds	r0, #1
 800aede:	d12b      	bne.n	800af38 <_printf_float+0x240>
 800aee0:	e767      	b.n	800adb2 <_printf_float+0xba>
 800aee2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800aee6:	f240 80dc 	bls.w	800b0a2 <_printf_float+0x3aa>
 800aeea:	2200      	movs	r2, #0
 800aeec:	2300      	movs	r3, #0
 800aeee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aef2:	f7f5 fdf1 	bl	8000ad8 <__aeabi_dcmpeq>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d033      	beq.n	800af62 <_printf_float+0x26a>
 800aefa:	2301      	movs	r3, #1
 800aefc:	4a41      	ldr	r2, [pc, #260]	; (800b004 <_printf_float+0x30c>)
 800aefe:	4631      	mov	r1, r6
 800af00:	4628      	mov	r0, r5
 800af02:	47b8      	blx	r7
 800af04:	3001      	adds	r0, #1
 800af06:	f43f af54 	beq.w	800adb2 <_printf_float+0xba>
 800af0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af0e:	429a      	cmp	r2, r3
 800af10:	db02      	blt.n	800af18 <_printf_float+0x220>
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	07d8      	lsls	r0, r3, #31
 800af16:	d50f      	bpl.n	800af38 <_printf_float+0x240>
 800af18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af1c:	4631      	mov	r1, r6
 800af1e:	4628      	mov	r0, r5
 800af20:	47b8      	blx	r7
 800af22:	3001      	adds	r0, #1
 800af24:	f43f af45 	beq.w	800adb2 <_printf_float+0xba>
 800af28:	f04f 0800 	mov.w	r8, #0
 800af2c:	f104 091a 	add.w	r9, r4, #26
 800af30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af32:	3b01      	subs	r3, #1
 800af34:	4543      	cmp	r3, r8
 800af36:	dc09      	bgt.n	800af4c <_printf_float+0x254>
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	079b      	lsls	r3, r3, #30
 800af3c:	f100 8103 	bmi.w	800b146 <_printf_float+0x44e>
 800af40:	68e0      	ldr	r0, [r4, #12]
 800af42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af44:	4298      	cmp	r0, r3
 800af46:	bfb8      	it	lt
 800af48:	4618      	movlt	r0, r3
 800af4a:	e734      	b.n	800adb6 <_printf_float+0xbe>
 800af4c:	2301      	movs	r3, #1
 800af4e:	464a      	mov	r2, r9
 800af50:	4631      	mov	r1, r6
 800af52:	4628      	mov	r0, r5
 800af54:	47b8      	blx	r7
 800af56:	3001      	adds	r0, #1
 800af58:	f43f af2b 	beq.w	800adb2 <_printf_float+0xba>
 800af5c:	f108 0801 	add.w	r8, r8, #1
 800af60:	e7e6      	b.n	800af30 <_printf_float+0x238>
 800af62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af64:	2b00      	cmp	r3, #0
 800af66:	dc2b      	bgt.n	800afc0 <_printf_float+0x2c8>
 800af68:	2301      	movs	r3, #1
 800af6a:	4a26      	ldr	r2, [pc, #152]	; (800b004 <_printf_float+0x30c>)
 800af6c:	4631      	mov	r1, r6
 800af6e:	4628      	mov	r0, r5
 800af70:	47b8      	blx	r7
 800af72:	3001      	adds	r0, #1
 800af74:	f43f af1d 	beq.w	800adb2 <_printf_float+0xba>
 800af78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af7a:	b923      	cbnz	r3, 800af86 <_printf_float+0x28e>
 800af7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af7e:	b913      	cbnz	r3, 800af86 <_printf_float+0x28e>
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	07d9      	lsls	r1, r3, #31
 800af84:	d5d8      	bpl.n	800af38 <_printf_float+0x240>
 800af86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af8a:	4631      	mov	r1, r6
 800af8c:	4628      	mov	r0, r5
 800af8e:	47b8      	blx	r7
 800af90:	3001      	adds	r0, #1
 800af92:	f43f af0e 	beq.w	800adb2 <_printf_float+0xba>
 800af96:	f04f 0900 	mov.w	r9, #0
 800af9a:	f104 0a1a 	add.w	sl, r4, #26
 800af9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa0:	425b      	negs	r3, r3
 800afa2:	454b      	cmp	r3, r9
 800afa4:	dc01      	bgt.n	800afaa <_printf_float+0x2b2>
 800afa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afa8:	e794      	b.n	800aed4 <_printf_float+0x1dc>
 800afaa:	2301      	movs	r3, #1
 800afac:	4652      	mov	r2, sl
 800afae:	4631      	mov	r1, r6
 800afb0:	4628      	mov	r0, r5
 800afb2:	47b8      	blx	r7
 800afb4:	3001      	adds	r0, #1
 800afb6:	f43f aefc 	beq.w	800adb2 <_printf_float+0xba>
 800afba:	f109 0901 	add.w	r9, r9, #1
 800afbe:	e7ee      	b.n	800af9e <_printf_float+0x2a6>
 800afc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afc4:	429a      	cmp	r2, r3
 800afc6:	bfa8      	it	ge
 800afc8:	461a      	movge	r2, r3
 800afca:	2a00      	cmp	r2, #0
 800afcc:	4691      	mov	r9, r2
 800afce:	dd07      	ble.n	800afe0 <_printf_float+0x2e8>
 800afd0:	4613      	mov	r3, r2
 800afd2:	4631      	mov	r1, r6
 800afd4:	4642      	mov	r2, r8
 800afd6:	4628      	mov	r0, r5
 800afd8:	47b8      	blx	r7
 800afda:	3001      	adds	r0, #1
 800afdc:	f43f aee9 	beq.w	800adb2 <_printf_float+0xba>
 800afe0:	f104 031a 	add.w	r3, r4, #26
 800afe4:	f04f 0b00 	mov.w	fp, #0
 800afe8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afec:	9306      	str	r3, [sp, #24]
 800afee:	e015      	b.n	800b01c <_printf_float+0x324>
 800aff0:	7fefffff 	.word	0x7fefffff
 800aff4:	0800e594 	.word	0x0800e594
 800aff8:	0800e590 	.word	0x0800e590
 800affc:	0800e59c 	.word	0x0800e59c
 800b000:	0800e598 	.word	0x0800e598
 800b004:	0800e5a0 	.word	0x0800e5a0
 800b008:	2301      	movs	r3, #1
 800b00a:	9a06      	ldr	r2, [sp, #24]
 800b00c:	4631      	mov	r1, r6
 800b00e:	4628      	mov	r0, r5
 800b010:	47b8      	blx	r7
 800b012:	3001      	adds	r0, #1
 800b014:	f43f aecd 	beq.w	800adb2 <_printf_float+0xba>
 800b018:	f10b 0b01 	add.w	fp, fp, #1
 800b01c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b020:	ebaa 0309 	sub.w	r3, sl, r9
 800b024:	455b      	cmp	r3, fp
 800b026:	dcef      	bgt.n	800b008 <_printf_float+0x310>
 800b028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b02c:	429a      	cmp	r2, r3
 800b02e:	44d0      	add	r8, sl
 800b030:	db15      	blt.n	800b05e <_printf_float+0x366>
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	07da      	lsls	r2, r3, #31
 800b036:	d412      	bmi.n	800b05e <_printf_float+0x366>
 800b038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b03a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b03c:	eba3 020a 	sub.w	r2, r3, sl
 800b040:	eba3 0a01 	sub.w	sl, r3, r1
 800b044:	4592      	cmp	sl, r2
 800b046:	bfa8      	it	ge
 800b048:	4692      	movge	sl, r2
 800b04a:	f1ba 0f00 	cmp.w	sl, #0
 800b04e:	dc0e      	bgt.n	800b06e <_printf_float+0x376>
 800b050:	f04f 0800 	mov.w	r8, #0
 800b054:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b058:	f104 091a 	add.w	r9, r4, #26
 800b05c:	e019      	b.n	800b092 <_printf_float+0x39a>
 800b05e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b062:	4631      	mov	r1, r6
 800b064:	4628      	mov	r0, r5
 800b066:	47b8      	blx	r7
 800b068:	3001      	adds	r0, #1
 800b06a:	d1e5      	bne.n	800b038 <_printf_float+0x340>
 800b06c:	e6a1      	b.n	800adb2 <_printf_float+0xba>
 800b06e:	4653      	mov	r3, sl
 800b070:	4642      	mov	r2, r8
 800b072:	4631      	mov	r1, r6
 800b074:	4628      	mov	r0, r5
 800b076:	47b8      	blx	r7
 800b078:	3001      	adds	r0, #1
 800b07a:	d1e9      	bne.n	800b050 <_printf_float+0x358>
 800b07c:	e699      	b.n	800adb2 <_printf_float+0xba>
 800b07e:	2301      	movs	r3, #1
 800b080:	464a      	mov	r2, r9
 800b082:	4631      	mov	r1, r6
 800b084:	4628      	mov	r0, r5
 800b086:	47b8      	blx	r7
 800b088:	3001      	adds	r0, #1
 800b08a:	f43f ae92 	beq.w	800adb2 <_printf_float+0xba>
 800b08e:	f108 0801 	add.w	r8, r8, #1
 800b092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b096:	1a9b      	subs	r3, r3, r2
 800b098:	eba3 030a 	sub.w	r3, r3, sl
 800b09c:	4543      	cmp	r3, r8
 800b09e:	dcee      	bgt.n	800b07e <_printf_float+0x386>
 800b0a0:	e74a      	b.n	800af38 <_printf_float+0x240>
 800b0a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0a4:	2a01      	cmp	r2, #1
 800b0a6:	dc01      	bgt.n	800b0ac <_printf_float+0x3b4>
 800b0a8:	07db      	lsls	r3, r3, #31
 800b0aa:	d53a      	bpl.n	800b122 <_printf_float+0x42a>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	4642      	mov	r2, r8
 800b0b0:	4631      	mov	r1, r6
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	47b8      	blx	r7
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	f43f ae7b 	beq.w	800adb2 <_printf_float+0xba>
 800b0bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0c0:	4631      	mov	r1, r6
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	47b8      	blx	r7
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	f108 0801 	add.w	r8, r8, #1
 800b0cc:	f43f ae71 	beq.w	800adb2 <_printf_float+0xba>
 800b0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f103 3aff 	add.w	sl, r3, #4294967295
 800b0d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f7f5 fcfb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0e2:	b9c8      	cbnz	r0, 800b118 <_printf_float+0x420>
 800b0e4:	4653      	mov	r3, sl
 800b0e6:	4642      	mov	r2, r8
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	47b8      	blx	r7
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d10e      	bne.n	800b110 <_printf_float+0x418>
 800b0f2:	e65e      	b.n	800adb2 <_printf_float+0xba>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	4652      	mov	r2, sl
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	47b8      	blx	r7
 800b0fe:	3001      	adds	r0, #1
 800b100:	f43f ae57 	beq.w	800adb2 <_printf_float+0xba>
 800b104:	f108 0801 	add.w	r8, r8, #1
 800b108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b10a:	3b01      	subs	r3, #1
 800b10c:	4543      	cmp	r3, r8
 800b10e:	dcf1      	bgt.n	800b0f4 <_printf_float+0x3fc>
 800b110:	464b      	mov	r3, r9
 800b112:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b116:	e6de      	b.n	800aed6 <_printf_float+0x1de>
 800b118:	f04f 0800 	mov.w	r8, #0
 800b11c:	f104 0a1a 	add.w	sl, r4, #26
 800b120:	e7f2      	b.n	800b108 <_printf_float+0x410>
 800b122:	2301      	movs	r3, #1
 800b124:	e7df      	b.n	800b0e6 <_printf_float+0x3ee>
 800b126:	2301      	movs	r3, #1
 800b128:	464a      	mov	r2, r9
 800b12a:	4631      	mov	r1, r6
 800b12c:	4628      	mov	r0, r5
 800b12e:	47b8      	blx	r7
 800b130:	3001      	adds	r0, #1
 800b132:	f43f ae3e 	beq.w	800adb2 <_printf_float+0xba>
 800b136:	f108 0801 	add.w	r8, r8, #1
 800b13a:	68e3      	ldr	r3, [r4, #12]
 800b13c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b13e:	1a9b      	subs	r3, r3, r2
 800b140:	4543      	cmp	r3, r8
 800b142:	dcf0      	bgt.n	800b126 <_printf_float+0x42e>
 800b144:	e6fc      	b.n	800af40 <_printf_float+0x248>
 800b146:	f04f 0800 	mov.w	r8, #0
 800b14a:	f104 0919 	add.w	r9, r4, #25
 800b14e:	e7f4      	b.n	800b13a <_printf_float+0x442>
 800b150:	2900      	cmp	r1, #0
 800b152:	f43f ae8b 	beq.w	800ae6c <_printf_float+0x174>
 800b156:	2300      	movs	r3, #0
 800b158:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b15c:	ab09      	add	r3, sp, #36	; 0x24
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	ec49 8b10 	vmov	d0, r8, r9
 800b164:	6022      	str	r2, [r4, #0]
 800b166:	f8cd a004 	str.w	sl, [sp, #4]
 800b16a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b16e:	4628      	mov	r0, r5
 800b170:	f7ff fd2e 	bl	800abd0 <__cvt>
 800b174:	4680      	mov	r8, r0
 800b176:	e648      	b.n	800ae0a <_printf_float+0x112>

0800b178 <_printf_common>:
 800b178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b17c:	4691      	mov	r9, r2
 800b17e:	461f      	mov	r7, r3
 800b180:	688a      	ldr	r2, [r1, #8]
 800b182:	690b      	ldr	r3, [r1, #16]
 800b184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b188:	4293      	cmp	r3, r2
 800b18a:	bfb8      	it	lt
 800b18c:	4613      	movlt	r3, r2
 800b18e:	f8c9 3000 	str.w	r3, [r9]
 800b192:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b196:	4606      	mov	r6, r0
 800b198:	460c      	mov	r4, r1
 800b19a:	b112      	cbz	r2, 800b1a2 <_printf_common+0x2a>
 800b19c:	3301      	adds	r3, #1
 800b19e:	f8c9 3000 	str.w	r3, [r9]
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	0699      	lsls	r1, r3, #26
 800b1a6:	bf42      	ittt	mi
 800b1a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b1ac:	3302      	addmi	r3, #2
 800b1ae:	f8c9 3000 	strmi.w	r3, [r9]
 800b1b2:	6825      	ldr	r5, [r4, #0]
 800b1b4:	f015 0506 	ands.w	r5, r5, #6
 800b1b8:	d107      	bne.n	800b1ca <_printf_common+0x52>
 800b1ba:	f104 0a19 	add.w	sl, r4, #25
 800b1be:	68e3      	ldr	r3, [r4, #12]
 800b1c0:	f8d9 2000 	ldr.w	r2, [r9]
 800b1c4:	1a9b      	subs	r3, r3, r2
 800b1c6:	42ab      	cmp	r3, r5
 800b1c8:	dc28      	bgt.n	800b21c <_printf_common+0xa4>
 800b1ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b1ce:	6822      	ldr	r2, [r4, #0]
 800b1d0:	3300      	adds	r3, #0
 800b1d2:	bf18      	it	ne
 800b1d4:	2301      	movne	r3, #1
 800b1d6:	0692      	lsls	r2, r2, #26
 800b1d8:	d42d      	bmi.n	800b236 <_printf_common+0xbe>
 800b1da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1de:	4639      	mov	r1, r7
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	47c0      	blx	r8
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d020      	beq.n	800b22a <_printf_common+0xb2>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	68e5      	ldr	r5, [r4, #12]
 800b1ec:	f8d9 2000 	ldr.w	r2, [r9]
 800b1f0:	f003 0306 	and.w	r3, r3, #6
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	bf08      	it	eq
 800b1f8:	1aad      	subeq	r5, r5, r2
 800b1fa:	68a3      	ldr	r3, [r4, #8]
 800b1fc:	6922      	ldr	r2, [r4, #16]
 800b1fe:	bf0c      	ite	eq
 800b200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b204:	2500      	movne	r5, #0
 800b206:	4293      	cmp	r3, r2
 800b208:	bfc4      	itt	gt
 800b20a:	1a9b      	subgt	r3, r3, r2
 800b20c:	18ed      	addgt	r5, r5, r3
 800b20e:	f04f 0900 	mov.w	r9, #0
 800b212:	341a      	adds	r4, #26
 800b214:	454d      	cmp	r5, r9
 800b216:	d11a      	bne.n	800b24e <_printf_common+0xd6>
 800b218:	2000      	movs	r0, #0
 800b21a:	e008      	b.n	800b22e <_printf_common+0xb6>
 800b21c:	2301      	movs	r3, #1
 800b21e:	4652      	mov	r2, sl
 800b220:	4639      	mov	r1, r7
 800b222:	4630      	mov	r0, r6
 800b224:	47c0      	blx	r8
 800b226:	3001      	adds	r0, #1
 800b228:	d103      	bne.n	800b232 <_printf_common+0xba>
 800b22a:	f04f 30ff 	mov.w	r0, #4294967295
 800b22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b232:	3501      	adds	r5, #1
 800b234:	e7c3      	b.n	800b1be <_printf_common+0x46>
 800b236:	18e1      	adds	r1, r4, r3
 800b238:	1c5a      	adds	r2, r3, #1
 800b23a:	2030      	movs	r0, #48	; 0x30
 800b23c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b240:	4422      	add	r2, r4
 800b242:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b246:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b24a:	3302      	adds	r3, #2
 800b24c:	e7c5      	b.n	800b1da <_printf_common+0x62>
 800b24e:	2301      	movs	r3, #1
 800b250:	4622      	mov	r2, r4
 800b252:	4639      	mov	r1, r7
 800b254:	4630      	mov	r0, r6
 800b256:	47c0      	blx	r8
 800b258:	3001      	adds	r0, #1
 800b25a:	d0e6      	beq.n	800b22a <_printf_common+0xb2>
 800b25c:	f109 0901 	add.w	r9, r9, #1
 800b260:	e7d8      	b.n	800b214 <_printf_common+0x9c>
	...

0800b264 <_printf_i>:
 800b264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b268:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b26c:	460c      	mov	r4, r1
 800b26e:	7e09      	ldrb	r1, [r1, #24]
 800b270:	b085      	sub	sp, #20
 800b272:	296e      	cmp	r1, #110	; 0x6e
 800b274:	4617      	mov	r7, r2
 800b276:	4606      	mov	r6, r0
 800b278:	4698      	mov	r8, r3
 800b27a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b27c:	f000 80b3 	beq.w	800b3e6 <_printf_i+0x182>
 800b280:	d822      	bhi.n	800b2c8 <_printf_i+0x64>
 800b282:	2963      	cmp	r1, #99	; 0x63
 800b284:	d036      	beq.n	800b2f4 <_printf_i+0x90>
 800b286:	d80a      	bhi.n	800b29e <_printf_i+0x3a>
 800b288:	2900      	cmp	r1, #0
 800b28a:	f000 80b9 	beq.w	800b400 <_printf_i+0x19c>
 800b28e:	2958      	cmp	r1, #88	; 0x58
 800b290:	f000 8083 	beq.w	800b39a <_printf_i+0x136>
 800b294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b298:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b29c:	e032      	b.n	800b304 <_printf_i+0xa0>
 800b29e:	2964      	cmp	r1, #100	; 0x64
 800b2a0:	d001      	beq.n	800b2a6 <_printf_i+0x42>
 800b2a2:	2969      	cmp	r1, #105	; 0x69
 800b2a4:	d1f6      	bne.n	800b294 <_printf_i+0x30>
 800b2a6:	6820      	ldr	r0, [r4, #0]
 800b2a8:	6813      	ldr	r3, [r2, #0]
 800b2aa:	0605      	lsls	r5, r0, #24
 800b2ac:	f103 0104 	add.w	r1, r3, #4
 800b2b0:	d52a      	bpl.n	800b308 <_printf_i+0xa4>
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6011      	str	r1, [r2, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	da03      	bge.n	800b2c2 <_printf_i+0x5e>
 800b2ba:	222d      	movs	r2, #45	; 0x2d
 800b2bc:	425b      	negs	r3, r3
 800b2be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b2c2:	486f      	ldr	r0, [pc, #444]	; (800b480 <_printf_i+0x21c>)
 800b2c4:	220a      	movs	r2, #10
 800b2c6:	e039      	b.n	800b33c <_printf_i+0xd8>
 800b2c8:	2973      	cmp	r1, #115	; 0x73
 800b2ca:	f000 809d 	beq.w	800b408 <_printf_i+0x1a4>
 800b2ce:	d808      	bhi.n	800b2e2 <_printf_i+0x7e>
 800b2d0:	296f      	cmp	r1, #111	; 0x6f
 800b2d2:	d020      	beq.n	800b316 <_printf_i+0xb2>
 800b2d4:	2970      	cmp	r1, #112	; 0x70
 800b2d6:	d1dd      	bne.n	800b294 <_printf_i+0x30>
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	f043 0320 	orr.w	r3, r3, #32
 800b2de:	6023      	str	r3, [r4, #0]
 800b2e0:	e003      	b.n	800b2ea <_printf_i+0x86>
 800b2e2:	2975      	cmp	r1, #117	; 0x75
 800b2e4:	d017      	beq.n	800b316 <_printf_i+0xb2>
 800b2e6:	2978      	cmp	r1, #120	; 0x78
 800b2e8:	d1d4      	bne.n	800b294 <_printf_i+0x30>
 800b2ea:	2378      	movs	r3, #120	; 0x78
 800b2ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2f0:	4864      	ldr	r0, [pc, #400]	; (800b484 <_printf_i+0x220>)
 800b2f2:	e055      	b.n	800b3a0 <_printf_i+0x13c>
 800b2f4:	6813      	ldr	r3, [r2, #0]
 800b2f6:	1d19      	adds	r1, r3, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	6011      	str	r1, [r2, #0]
 800b2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b304:	2301      	movs	r3, #1
 800b306:	e08c      	b.n	800b422 <_printf_i+0x1be>
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	6011      	str	r1, [r2, #0]
 800b30c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b310:	bf18      	it	ne
 800b312:	b21b      	sxthne	r3, r3
 800b314:	e7cf      	b.n	800b2b6 <_printf_i+0x52>
 800b316:	6813      	ldr	r3, [r2, #0]
 800b318:	6825      	ldr	r5, [r4, #0]
 800b31a:	1d18      	adds	r0, r3, #4
 800b31c:	6010      	str	r0, [r2, #0]
 800b31e:	0628      	lsls	r0, r5, #24
 800b320:	d501      	bpl.n	800b326 <_printf_i+0xc2>
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	e002      	b.n	800b32c <_printf_i+0xc8>
 800b326:	0668      	lsls	r0, r5, #25
 800b328:	d5fb      	bpl.n	800b322 <_printf_i+0xbe>
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	4854      	ldr	r0, [pc, #336]	; (800b480 <_printf_i+0x21c>)
 800b32e:	296f      	cmp	r1, #111	; 0x6f
 800b330:	bf14      	ite	ne
 800b332:	220a      	movne	r2, #10
 800b334:	2208      	moveq	r2, #8
 800b336:	2100      	movs	r1, #0
 800b338:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b33c:	6865      	ldr	r5, [r4, #4]
 800b33e:	60a5      	str	r5, [r4, #8]
 800b340:	2d00      	cmp	r5, #0
 800b342:	f2c0 8095 	blt.w	800b470 <_printf_i+0x20c>
 800b346:	6821      	ldr	r1, [r4, #0]
 800b348:	f021 0104 	bic.w	r1, r1, #4
 800b34c:	6021      	str	r1, [r4, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d13d      	bne.n	800b3ce <_printf_i+0x16a>
 800b352:	2d00      	cmp	r5, #0
 800b354:	f040 808e 	bne.w	800b474 <_printf_i+0x210>
 800b358:	4665      	mov	r5, ip
 800b35a:	2a08      	cmp	r2, #8
 800b35c:	d10b      	bne.n	800b376 <_printf_i+0x112>
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	07db      	lsls	r3, r3, #31
 800b362:	d508      	bpl.n	800b376 <_printf_i+0x112>
 800b364:	6923      	ldr	r3, [r4, #16]
 800b366:	6862      	ldr	r2, [r4, #4]
 800b368:	429a      	cmp	r2, r3
 800b36a:	bfde      	ittt	le
 800b36c:	2330      	movle	r3, #48	; 0x30
 800b36e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b372:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b376:	ebac 0305 	sub.w	r3, ip, r5
 800b37a:	6123      	str	r3, [r4, #16]
 800b37c:	f8cd 8000 	str.w	r8, [sp]
 800b380:	463b      	mov	r3, r7
 800b382:	aa03      	add	r2, sp, #12
 800b384:	4621      	mov	r1, r4
 800b386:	4630      	mov	r0, r6
 800b388:	f7ff fef6 	bl	800b178 <_printf_common>
 800b38c:	3001      	adds	r0, #1
 800b38e:	d14d      	bne.n	800b42c <_printf_i+0x1c8>
 800b390:	f04f 30ff 	mov.w	r0, #4294967295
 800b394:	b005      	add	sp, #20
 800b396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b39a:	4839      	ldr	r0, [pc, #228]	; (800b480 <_printf_i+0x21c>)
 800b39c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b3a0:	6813      	ldr	r3, [r2, #0]
 800b3a2:	6821      	ldr	r1, [r4, #0]
 800b3a4:	1d1d      	adds	r5, r3, #4
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6015      	str	r5, [r2, #0]
 800b3aa:	060a      	lsls	r2, r1, #24
 800b3ac:	d50b      	bpl.n	800b3c6 <_printf_i+0x162>
 800b3ae:	07ca      	lsls	r2, r1, #31
 800b3b0:	bf44      	itt	mi
 800b3b2:	f041 0120 	orrmi.w	r1, r1, #32
 800b3b6:	6021      	strmi	r1, [r4, #0]
 800b3b8:	b91b      	cbnz	r3, 800b3c2 <_printf_i+0x15e>
 800b3ba:	6822      	ldr	r2, [r4, #0]
 800b3bc:	f022 0220 	bic.w	r2, r2, #32
 800b3c0:	6022      	str	r2, [r4, #0]
 800b3c2:	2210      	movs	r2, #16
 800b3c4:	e7b7      	b.n	800b336 <_printf_i+0xd2>
 800b3c6:	064d      	lsls	r5, r1, #25
 800b3c8:	bf48      	it	mi
 800b3ca:	b29b      	uxthmi	r3, r3
 800b3cc:	e7ef      	b.n	800b3ae <_printf_i+0x14a>
 800b3ce:	4665      	mov	r5, ip
 800b3d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3d4:	fb02 3311 	mls	r3, r2, r1, r3
 800b3d8:	5cc3      	ldrb	r3, [r0, r3]
 800b3da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b3de:	460b      	mov	r3, r1
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	d1f5      	bne.n	800b3d0 <_printf_i+0x16c>
 800b3e4:	e7b9      	b.n	800b35a <_printf_i+0xf6>
 800b3e6:	6813      	ldr	r3, [r2, #0]
 800b3e8:	6825      	ldr	r5, [r4, #0]
 800b3ea:	6961      	ldr	r1, [r4, #20]
 800b3ec:	1d18      	adds	r0, r3, #4
 800b3ee:	6010      	str	r0, [r2, #0]
 800b3f0:	0628      	lsls	r0, r5, #24
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	d501      	bpl.n	800b3fa <_printf_i+0x196>
 800b3f6:	6019      	str	r1, [r3, #0]
 800b3f8:	e002      	b.n	800b400 <_printf_i+0x19c>
 800b3fa:	066a      	lsls	r2, r5, #25
 800b3fc:	d5fb      	bpl.n	800b3f6 <_printf_i+0x192>
 800b3fe:	8019      	strh	r1, [r3, #0]
 800b400:	2300      	movs	r3, #0
 800b402:	6123      	str	r3, [r4, #16]
 800b404:	4665      	mov	r5, ip
 800b406:	e7b9      	b.n	800b37c <_printf_i+0x118>
 800b408:	6813      	ldr	r3, [r2, #0]
 800b40a:	1d19      	adds	r1, r3, #4
 800b40c:	6011      	str	r1, [r2, #0]
 800b40e:	681d      	ldr	r5, [r3, #0]
 800b410:	6862      	ldr	r2, [r4, #4]
 800b412:	2100      	movs	r1, #0
 800b414:	4628      	mov	r0, r5
 800b416:	f7f4 feeb 	bl	80001f0 <memchr>
 800b41a:	b108      	cbz	r0, 800b420 <_printf_i+0x1bc>
 800b41c:	1b40      	subs	r0, r0, r5
 800b41e:	6060      	str	r0, [r4, #4]
 800b420:	6863      	ldr	r3, [r4, #4]
 800b422:	6123      	str	r3, [r4, #16]
 800b424:	2300      	movs	r3, #0
 800b426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b42a:	e7a7      	b.n	800b37c <_printf_i+0x118>
 800b42c:	6923      	ldr	r3, [r4, #16]
 800b42e:	462a      	mov	r2, r5
 800b430:	4639      	mov	r1, r7
 800b432:	4630      	mov	r0, r6
 800b434:	47c0      	blx	r8
 800b436:	3001      	adds	r0, #1
 800b438:	d0aa      	beq.n	800b390 <_printf_i+0x12c>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	079b      	lsls	r3, r3, #30
 800b43e:	d413      	bmi.n	800b468 <_printf_i+0x204>
 800b440:	68e0      	ldr	r0, [r4, #12]
 800b442:	9b03      	ldr	r3, [sp, #12]
 800b444:	4298      	cmp	r0, r3
 800b446:	bfb8      	it	lt
 800b448:	4618      	movlt	r0, r3
 800b44a:	e7a3      	b.n	800b394 <_printf_i+0x130>
 800b44c:	2301      	movs	r3, #1
 800b44e:	464a      	mov	r2, r9
 800b450:	4639      	mov	r1, r7
 800b452:	4630      	mov	r0, r6
 800b454:	47c0      	blx	r8
 800b456:	3001      	adds	r0, #1
 800b458:	d09a      	beq.n	800b390 <_printf_i+0x12c>
 800b45a:	3501      	adds	r5, #1
 800b45c:	68e3      	ldr	r3, [r4, #12]
 800b45e:	9a03      	ldr	r2, [sp, #12]
 800b460:	1a9b      	subs	r3, r3, r2
 800b462:	42ab      	cmp	r3, r5
 800b464:	dcf2      	bgt.n	800b44c <_printf_i+0x1e8>
 800b466:	e7eb      	b.n	800b440 <_printf_i+0x1dc>
 800b468:	2500      	movs	r5, #0
 800b46a:	f104 0919 	add.w	r9, r4, #25
 800b46e:	e7f5      	b.n	800b45c <_printf_i+0x1f8>
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1ac      	bne.n	800b3ce <_printf_i+0x16a>
 800b474:	7803      	ldrb	r3, [r0, #0]
 800b476:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b47a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b47e:	e76c      	b.n	800b35a <_printf_i+0xf6>
 800b480:	0800e5a2 	.word	0x0800e5a2
 800b484:	0800e5b3 	.word	0x0800e5b3

0800b488 <_scanf_float>:
 800b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48c:	469a      	mov	sl, r3
 800b48e:	688b      	ldr	r3, [r1, #8]
 800b490:	4616      	mov	r6, r2
 800b492:	1e5a      	subs	r2, r3, #1
 800b494:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b498:	b087      	sub	sp, #28
 800b49a:	bf83      	ittte	hi
 800b49c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b4a0:	189b      	addhi	r3, r3, r2
 800b4a2:	9301      	strhi	r3, [sp, #4]
 800b4a4:	2300      	movls	r3, #0
 800b4a6:	bf86      	itte	hi
 800b4a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b4ac:	608b      	strhi	r3, [r1, #8]
 800b4ae:	9301      	strls	r3, [sp, #4]
 800b4b0:	680b      	ldr	r3, [r1, #0]
 800b4b2:	4688      	mov	r8, r1
 800b4b4:	f04f 0b00 	mov.w	fp, #0
 800b4b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b4bc:	f848 3b1c 	str.w	r3, [r8], #28
 800b4c0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b4c4:	4607      	mov	r7, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	4645      	mov	r5, r8
 800b4ca:	465a      	mov	r2, fp
 800b4cc:	46d9      	mov	r9, fp
 800b4ce:	f8cd b008 	str.w	fp, [sp, #8]
 800b4d2:	68a1      	ldr	r1, [r4, #8]
 800b4d4:	b181      	cbz	r1, 800b4f8 <_scanf_float+0x70>
 800b4d6:	6833      	ldr	r3, [r6, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2b49      	cmp	r3, #73	; 0x49
 800b4dc:	d071      	beq.n	800b5c2 <_scanf_float+0x13a>
 800b4de:	d84d      	bhi.n	800b57c <_scanf_float+0xf4>
 800b4e0:	2b39      	cmp	r3, #57	; 0x39
 800b4e2:	d840      	bhi.n	800b566 <_scanf_float+0xde>
 800b4e4:	2b31      	cmp	r3, #49	; 0x31
 800b4e6:	f080 8088 	bcs.w	800b5fa <_scanf_float+0x172>
 800b4ea:	2b2d      	cmp	r3, #45	; 0x2d
 800b4ec:	f000 8090 	beq.w	800b610 <_scanf_float+0x188>
 800b4f0:	d815      	bhi.n	800b51e <_scanf_float+0x96>
 800b4f2:	2b2b      	cmp	r3, #43	; 0x2b
 800b4f4:	f000 808c 	beq.w	800b610 <_scanf_float+0x188>
 800b4f8:	f1b9 0f00 	cmp.w	r9, #0
 800b4fc:	d003      	beq.n	800b506 <_scanf_float+0x7e>
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	3a01      	subs	r2, #1
 800b508:	2a01      	cmp	r2, #1
 800b50a:	f200 80ea 	bhi.w	800b6e2 <_scanf_float+0x25a>
 800b50e:	4545      	cmp	r5, r8
 800b510:	f200 80dc 	bhi.w	800b6cc <_scanf_float+0x244>
 800b514:	2601      	movs	r6, #1
 800b516:	4630      	mov	r0, r6
 800b518:	b007      	add	sp, #28
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	2b2e      	cmp	r3, #46	; 0x2e
 800b520:	f000 809f 	beq.w	800b662 <_scanf_float+0x1da>
 800b524:	2b30      	cmp	r3, #48	; 0x30
 800b526:	d1e7      	bne.n	800b4f8 <_scanf_float+0x70>
 800b528:	6820      	ldr	r0, [r4, #0]
 800b52a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b52e:	d064      	beq.n	800b5fa <_scanf_float+0x172>
 800b530:	9b01      	ldr	r3, [sp, #4]
 800b532:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b536:	6020      	str	r0, [r4, #0]
 800b538:	f109 0901 	add.w	r9, r9, #1
 800b53c:	b11b      	cbz	r3, 800b546 <_scanf_float+0xbe>
 800b53e:	3b01      	subs	r3, #1
 800b540:	3101      	adds	r1, #1
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	60a1      	str	r1, [r4, #8]
 800b546:	68a3      	ldr	r3, [r4, #8]
 800b548:	3b01      	subs	r3, #1
 800b54a:	60a3      	str	r3, [r4, #8]
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	3301      	adds	r3, #1
 800b550:	6123      	str	r3, [r4, #16]
 800b552:	6873      	ldr	r3, [r6, #4]
 800b554:	3b01      	subs	r3, #1
 800b556:	2b00      	cmp	r3, #0
 800b558:	6073      	str	r3, [r6, #4]
 800b55a:	f340 80ac 	ble.w	800b6b6 <_scanf_float+0x22e>
 800b55e:	6833      	ldr	r3, [r6, #0]
 800b560:	3301      	adds	r3, #1
 800b562:	6033      	str	r3, [r6, #0]
 800b564:	e7b5      	b.n	800b4d2 <_scanf_float+0x4a>
 800b566:	2b45      	cmp	r3, #69	; 0x45
 800b568:	f000 8085 	beq.w	800b676 <_scanf_float+0x1ee>
 800b56c:	2b46      	cmp	r3, #70	; 0x46
 800b56e:	d06a      	beq.n	800b646 <_scanf_float+0x1be>
 800b570:	2b41      	cmp	r3, #65	; 0x41
 800b572:	d1c1      	bne.n	800b4f8 <_scanf_float+0x70>
 800b574:	2a01      	cmp	r2, #1
 800b576:	d1bf      	bne.n	800b4f8 <_scanf_float+0x70>
 800b578:	2202      	movs	r2, #2
 800b57a:	e046      	b.n	800b60a <_scanf_float+0x182>
 800b57c:	2b65      	cmp	r3, #101	; 0x65
 800b57e:	d07a      	beq.n	800b676 <_scanf_float+0x1ee>
 800b580:	d818      	bhi.n	800b5b4 <_scanf_float+0x12c>
 800b582:	2b54      	cmp	r3, #84	; 0x54
 800b584:	d066      	beq.n	800b654 <_scanf_float+0x1cc>
 800b586:	d811      	bhi.n	800b5ac <_scanf_float+0x124>
 800b588:	2b4e      	cmp	r3, #78	; 0x4e
 800b58a:	d1b5      	bne.n	800b4f8 <_scanf_float+0x70>
 800b58c:	2a00      	cmp	r2, #0
 800b58e:	d146      	bne.n	800b61e <_scanf_float+0x196>
 800b590:	f1b9 0f00 	cmp.w	r9, #0
 800b594:	d145      	bne.n	800b622 <_scanf_float+0x19a>
 800b596:	6821      	ldr	r1, [r4, #0]
 800b598:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b59c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b5a0:	d13f      	bne.n	800b622 <_scanf_float+0x19a>
 800b5a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b5a6:	6021      	str	r1, [r4, #0]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	e02e      	b.n	800b60a <_scanf_float+0x182>
 800b5ac:	2b59      	cmp	r3, #89	; 0x59
 800b5ae:	d01e      	beq.n	800b5ee <_scanf_float+0x166>
 800b5b0:	2b61      	cmp	r3, #97	; 0x61
 800b5b2:	e7de      	b.n	800b572 <_scanf_float+0xea>
 800b5b4:	2b6e      	cmp	r3, #110	; 0x6e
 800b5b6:	d0e9      	beq.n	800b58c <_scanf_float+0x104>
 800b5b8:	d815      	bhi.n	800b5e6 <_scanf_float+0x15e>
 800b5ba:	2b66      	cmp	r3, #102	; 0x66
 800b5bc:	d043      	beq.n	800b646 <_scanf_float+0x1be>
 800b5be:	2b69      	cmp	r3, #105	; 0x69
 800b5c0:	d19a      	bne.n	800b4f8 <_scanf_float+0x70>
 800b5c2:	f1bb 0f00 	cmp.w	fp, #0
 800b5c6:	d138      	bne.n	800b63a <_scanf_float+0x1b2>
 800b5c8:	f1b9 0f00 	cmp.w	r9, #0
 800b5cc:	d197      	bne.n	800b4fe <_scanf_float+0x76>
 800b5ce:	6821      	ldr	r1, [r4, #0]
 800b5d0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b5d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b5d8:	d195      	bne.n	800b506 <_scanf_float+0x7e>
 800b5da:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b5de:	6021      	str	r1, [r4, #0]
 800b5e0:	f04f 0b01 	mov.w	fp, #1
 800b5e4:	e011      	b.n	800b60a <_scanf_float+0x182>
 800b5e6:	2b74      	cmp	r3, #116	; 0x74
 800b5e8:	d034      	beq.n	800b654 <_scanf_float+0x1cc>
 800b5ea:	2b79      	cmp	r3, #121	; 0x79
 800b5ec:	d184      	bne.n	800b4f8 <_scanf_float+0x70>
 800b5ee:	f1bb 0f07 	cmp.w	fp, #7
 800b5f2:	d181      	bne.n	800b4f8 <_scanf_float+0x70>
 800b5f4:	f04f 0b08 	mov.w	fp, #8
 800b5f8:	e007      	b.n	800b60a <_scanf_float+0x182>
 800b5fa:	eb12 0f0b 	cmn.w	r2, fp
 800b5fe:	f47f af7b 	bne.w	800b4f8 <_scanf_float+0x70>
 800b602:	6821      	ldr	r1, [r4, #0]
 800b604:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b608:	6021      	str	r1, [r4, #0]
 800b60a:	702b      	strb	r3, [r5, #0]
 800b60c:	3501      	adds	r5, #1
 800b60e:	e79a      	b.n	800b546 <_scanf_float+0xbe>
 800b610:	6821      	ldr	r1, [r4, #0]
 800b612:	0608      	lsls	r0, r1, #24
 800b614:	f57f af70 	bpl.w	800b4f8 <_scanf_float+0x70>
 800b618:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b61c:	e7f4      	b.n	800b608 <_scanf_float+0x180>
 800b61e:	2a02      	cmp	r2, #2
 800b620:	d047      	beq.n	800b6b2 <_scanf_float+0x22a>
 800b622:	f1bb 0f01 	cmp.w	fp, #1
 800b626:	d003      	beq.n	800b630 <_scanf_float+0x1a8>
 800b628:	f1bb 0f04 	cmp.w	fp, #4
 800b62c:	f47f af64 	bne.w	800b4f8 <_scanf_float+0x70>
 800b630:	f10b 0b01 	add.w	fp, fp, #1
 800b634:	fa5f fb8b 	uxtb.w	fp, fp
 800b638:	e7e7      	b.n	800b60a <_scanf_float+0x182>
 800b63a:	f1bb 0f03 	cmp.w	fp, #3
 800b63e:	d0f7      	beq.n	800b630 <_scanf_float+0x1a8>
 800b640:	f1bb 0f05 	cmp.w	fp, #5
 800b644:	e7f2      	b.n	800b62c <_scanf_float+0x1a4>
 800b646:	f1bb 0f02 	cmp.w	fp, #2
 800b64a:	f47f af55 	bne.w	800b4f8 <_scanf_float+0x70>
 800b64e:	f04f 0b03 	mov.w	fp, #3
 800b652:	e7da      	b.n	800b60a <_scanf_float+0x182>
 800b654:	f1bb 0f06 	cmp.w	fp, #6
 800b658:	f47f af4e 	bne.w	800b4f8 <_scanf_float+0x70>
 800b65c:	f04f 0b07 	mov.w	fp, #7
 800b660:	e7d3      	b.n	800b60a <_scanf_float+0x182>
 800b662:	6821      	ldr	r1, [r4, #0]
 800b664:	0588      	lsls	r0, r1, #22
 800b666:	f57f af47 	bpl.w	800b4f8 <_scanf_float+0x70>
 800b66a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b66e:	6021      	str	r1, [r4, #0]
 800b670:	f8cd 9008 	str.w	r9, [sp, #8]
 800b674:	e7c9      	b.n	800b60a <_scanf_float+0x182>
 800b676:	6821      	ldr	r1, [r4, #0]
 800b678:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b67c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b680:	d006      	beq.n	800b690 <_scanf_float+0x208>
 800b682:	0548      	lsls	r0, r1, #21
 800b684:	f57f af38 	bpl.w	800b4f8 <_scanf_float+0x70>
 800b688:	f1b9 0f00 	cmp.w	r9, #0
 800b68c:	f43f af3b 	beq.w	800b506 <_scanf_float+0x7e>
 800b690:	0588      	lsls	r0, r1, #22
 800b692:	bf58      	it	pl
 800b694:	9802      	ldrpl	r0, [sp, #8]
 800b696:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b69a:	bf58      	it	pl
 800b69c:	eba9 0000 	subpl.w	r0, r9, r0
 800b6a0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b6a4:	bf58      	it	pl
 800b6a6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b6aa:	6021      	str	r1, [r4, #0]
 800b6ac:	f04f 0900 	mov.w	r9, #0
 800b6b0:	e7ab      	b.n	800b60a <_scanf_float+0x182>
 800b6b2:	2203      	movs	r2, #3
 800b6b4:	e7a9      	b.n	800b60a <_scanf_float+0x182>
 800b6b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b6ba:	9205      	str	r2, [sp, #20]
 800b6bc:	4631      	mov	r1, r6
 800b6be:	4638      	mov	r0, r7
 800b6c0:	4798      	blx	r3
 800b6c2:	9a05      	ldr	r2, [sp, #20]
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	f43f af04 	beq.w	800b4d2 <_scanf_float+0x4a>
 800b6ca:	e715      	b.n	800b4f8 <_scanf_float+0x70>
 800b6cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b6d4:	4632      	mov	r2, r6
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	4798      	blx	r3
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	6123      	str	r3, [r4, #16]
 800b6e0:	e715      	b.n	800b50e <_scanf_float+0x86>
 800b6e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b6e6:	2b06      	cmp	r3, #6
 800b6e8:	d80a      	bhi.n	800b700 <_scanf_float+0x278>
 800b6ea:	f1bb 0f02 	cmp.w	fp, #2
 800b6ee:	d968      	bls.n	800b7c2 <_scanf_float+0x33a>
 800b6f0:	f1ab 0b03 	sub.w	fp, fp, #3
 800b6f4:	fa5f fb8b 	uxtb.w	fp, fp
 800b6f8:	eba5 0b0b 	sub.w	fp, r5, fp
 800b6fc:	455d      	cmp	r5, fp
 800b6fe:	d14b      	bne.n	800b798 <_scanf_float+0x310>
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	05da      	lsls	r2, r3, #23
 800b704:	d51f      	bpl.n	800b746 <_scanf_float+0x2be>
 800b706:	055b      	lsls	r3, r3, #21
 800b708:	d468      	bmi.n	800b7dc <_scanf_float+0x354>
 800b70a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	2965      	cmp	r1, #101	; 0x65
 800b712:	f103 33ff 	add.w	r3, r3, #4294967295
 800b716:	f105 3bff 	add.w	fp, r5, #4294967295
 800b71a:	6123      	str	r3, [r4, #16]
 800b71c:	d00d      	beq.n	800b73a <_scanf_float+0x2b2>
 800b71e:	2945      	cmp	r1, #69	; 0x45
 800b720:	d00b      	beq.n	800b73a <_scanf_float+0x2b2>
 800b722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b726:	4632      	mov	r2, r6
 800b728:	4638      	mov	r0, r7
 800b72a:	4798      	blx	r3
 800b72c:	6923      	ldr	r3, [r4, #16]
 800b72e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b732:	3b01      	subs	r3, #1
 800b734:	f1a5 0b02 	sub.w	fp, r5, #2
 800b738:	6123      	str	r3, [r4, #16]
 800b73a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b73e:	4632      	mov	r2, r6
 800b740:	4638      	mov	r0, r7
 800b742:	4798      	blx	r3
 800b744:	465d      	mov	r5, fp
 800b746:	6826      	ldr	r6, [r4, #0]
 800b748:	f016 0610 	ands.w	r6, r6, #16
 800b74c:	d17a      	bne.n	800b844 <_scanf_float+0x3bc>
 800b74e:	702e      	strb	r6, [r5, #0]
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b75a:	d142      	bne.n	800b7e2 <_scanf_float+0x35a>
 800b75c:	9b02      	ldr	r3, [sp, #8]
 800b75e:	eba9 0303 	sub.w	r3, r9, r3
 800b762:	425a      	negs	r2, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d149      	bne.n	800b7fc <_scanf_float+0x374>
 800b768:	2200      	movs	r2, #0
 800b76a:	4641      	mov	r1, r8
 800b76c:	4638      	mov	r0, r7
 800b76e:	f000 fecb 	bl	800c508 <_strtod_r>
 800b772:	6825      	ldr	r5, [r4, #0]
 800b774:	f8da 3000 	ldr.w	r3, [sl]
 800b778:	f015 0f02 	tst.w	r5, #2
 800b77c:	f103 0204 	add.w	r2, r3, #4
 800b780:	ec59 8b10 	vmov	r8, r9, d0
 800b784:	f8ca 2000 	str.w	r2, [sl]
 800b788:	d043      	beq.n	800b812 <_scanf_float+0x38a>
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	e9c3 8900 	strd	r8, r9, [r3]
 800b790:	68e3      	ldr	r3, [r4, #12]
 800b792:	3301      	adds	r3, #1
 800b794:	60e3      	str	r3, [r4, #12]
 800b796:	e6be      	b.n	800b516 <_scanf_float+0x8e>
 800b798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b79c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	4638      	mov	r0, r7
 800b7a4:	4798      	blx	r3
 800b7a6:	6923      	ldr	r3, [r4, #16]
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	6123      	str	r3, [r4, #16]
 800b7ac:	e7a6      	b.n	800b6fc <_scanf_float+0x274>
 800b7ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7b2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b7b6:	4632      	mov	r2, r6
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	4798      	blx	r3
 800b7bc:	6923      	ldr	r3, [r4, #16]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	6123      	str	r3, [r4, #16]
 800b7c2:	4545      	cmp	r5, r8
 800b7c4:	d8f3      	bhi.n	800b7ae <_scanf_float+0x326>
 800b7c6:	e6a5      	b.n	800b514 <_scanf_float+0x8c>
 800b7c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b7d0:	4632      	mov	r2, r6
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	4798      	blx	r3
 800b7d6:	6923      	ldr	r3, [r4, #16]
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	6123      	str	r3, [r4, #16]
 800b7dc:	4545      	cmp	r5, r8
 800b7de:	d8f3      	bhi.n	800b7c8 <_scanf_float+0x340>
 800b7e0:	e698      	b.n	800b514 <_scanf_float+0x8c>
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d0bf      	beq.n	800b768 <_scanf_float+0x2e0>
 800b7e8:	9904      	ldr	r1, [sp, #16]
 800b7ea:	230a      	movs	r3, #10
 800b7ec:	4632      	mov	r2, r6
 800b7ee:	3101      	adds	r1, #1
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f000 ff15 	bl	800c620 <_strtol_r>
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	9d04      	ldr	r5, [sp, #16]
 800b7fa:	1ac2      	subs	r2, r0, r3
 800b7fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b800:	429d      	cmp	r5, r3
 800b802:	bf28      	it	cs
 800b804:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b808:	490f      	ldr	r1, [pc, #60]	; (800b848 <_scanf_float+0x3c0>)
 800b80a:	4628      	mov	r0, r5
 800b80c:	f000 f834 	bl	800b878 <siprintf>
 800b810:	e7aa      	b.n	800b768 <_scanf_float+0x2e0>
 800b812:	f015 0504 	ands.w	r5, r5, #4
 800b816:	d1b8      	bne.n	800b78a <_scanf_float+0x302>
 800b818:	681f      	ldr	r7, [r3, #0]
 800b81a:	ee10 2a10 	vmov	r2, s0
 800b81e:	464b      	mov	r3, r9
 800b820:	ee10 0a10 	vmov	r0, s0
 800b824:	4649      	mov	r1, r9
 800b826:	f7f5 f989 	bl	8000b3c <__aeabi_dcmpun>
 800b82a:	b128      	cbz	r0, 800b838 <_scanf_float+0x3b0>
 800b82c:	4628      	mov	r0, r5
 800b82e:	f000 f81d 	bl	800b86c <nanf>
 800b832:	ed87 0a00 	vstr	s0, [r7]
 800b836:	e7ab      	b.n	800b790 <_scanf_float+0x308>
 800b838:	4640      	mov	r0, r8
 800b83a:	4649      	mov	r1, r9
 800b83c:	f7f5 f9dc 	bl	8000bf8 <__aeabi_d2f>
 800b840:	6038      	str	r0, [r7, #0]
 800b842:	e7a5      	b.n	800b790 <_scanf_float+0x308>
 800b844:	2600      	movs	r6, #0
 800b846:	e666      	b.n	800b516 <_scanf_float+0x8e>
 800b848:	0800e5c4 	.word	0x0800e5c4

0800b84c <_sbrk_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4c06      	ldr	r4, [pc, #24]	; (800b868 <_sbrk_r+0x1c>)
 800b850:	2300      	movs	r3, #0
 800b852:	4605      	mov	r5, r0
 800b854:	4608      	mov	r0, r1
 800b856:	6023      	str	r3, [r4, #0]
 800b858:	f7f6 fa08 	bl	8001c6c <_sbrk>
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	d102      	bne.n	800b866 <_sbrk_r+0x1a>
 800b860:	6823      	ldr	r3, [r4, #0]
 800b862:	b103      	cbz	r3, 800b866 <_sbrk_r+0x1a>
 800b864:	602b      	str	r3, [r5, #0]
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	200013c4 	.word	0x200013c4

0800b86c <nanf>:
 800b86c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b874 <nanf+0x8>
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	7fc00000 	.word	0x7fc00000

0800b878 <siprintf>:
 800b878:	b40e      	push	{r1, r2, r3}
 800b87a:	b500      	push	{lr}
 800b87c:	b09c      	sub	sp, #112	; 0x70
 800b87e:	ab1d      	add	r3, sp, #116	; 0x74
 800b880:	9002      	str	r0, [sp, #8]
 800b882:	9006      	str	r0, [sp, #24]
 800b884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b888:	4809      	ldr	r0, [pc, #36]	; (800b8b0 <siprintf+0x38>)
 800b88a:	9107      	str	r1, [sp, #28]
 800b88c:	9104      	str	r1, [sp, #16]
 800b88e:	4909      	ldr	r1, [pc, #36]	; (800b8b4 <siprintf+0x3c>)
 800b890:	f853 2b04 	ldr.w	r2, [r3], #4
 800b894:	9105      	str	r1, [sp, #20]
 800b896:	6800      	ldr	r0, [r0, #0]
 800b898:	9301      	str	r3, [sp, #4]
 800b89a:	a902      	add	r1, sp, #8
 800b89c:	f002 fcd8 	bl	800e250 <_svfiprintf_r>
 800b8a0:	9b02      	ldr	r3, [sp, #8]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	701a      	strb	r2, [r3, #0]
 800b8a6:	b01c      	add	sp, #112	; 0x70
 800b8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8ac:	b003      	add	sp, #12
 800b8ae:	4770      	bx	lr
 800b8b0:	20000194 	.word	0x20000194
 800b8b4:	ffff0208 	.word	0xffff0208

0800b8b8 <strlcpy>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	b162      	cbz	r2, 800b8d8 <strlcpy+0x20>
 800b8be:	3a01      	subs	r2, #1
 800b8c0:	d008      	beq.n	800b8d4 <strlcpy+0x1c>
 800b8c2:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b8c6:	f800 4b01 	strb.w	r4, [r0], #1
 800b8ca:	2c00      	cmp	r4, #0
 800b8cc:	d1f7      	bne.n	800b8be <strlcpy+0x6>
 800b8ce:	1a58      	subs	r0, r3, r1
 800b8d0:	3801      	subs	r0, #1
 800b8d2:	bd10      	pop	{r4, pc}
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	7002      	strb	r2, [r0, #0]
 800b8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8dc:	2a00      	cmp	r2, #0
 800b8de:	d1fb      	bne.n	800b8d8 <strlcpy+0x20>
 800b8e0:	e7f5      	b.n	800b8ce <strlcpy+0x16>

0800b8e2 <sulp>:
 800b8e2:	b570      	push	{r4, r5, r6, lr}
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	ec45 4b10 	vmov	d0, r4, r5
 800b8ec:	4616      	mov	r6, r2
 800b8ee:	f002 fb13 	bl	800df18 <__ulp>
 800b8f2:	ec51 0b10 	vmov	r0, r1, d0
 800b8f6:	b17e      	cbz	r6, 800b918 <sulp+0x36>
 800b8f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b8fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b900:	2b00      	cmp	r3, #0
 800b902:	dd09      	ble.n	800b918 <sulp+0x36>
 800b904:	051b      	lsls	r3, r3, #20
 800b906:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b90a:	2400      	movs	r4, #0
 800b90c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b910:	4622      	mov	r2, r4
 800b912:	462b      	mov	r3, r5
 800b914:	f7f4 fe78 	bl	8000608 <__aeabi_dmul>
 800b918:	bd70      	pop	{r4, r5, r6, pc}
 800b91a:	0000      	movs	r0, r0
 800b91c:	0000      	movs	r0, r0
	...

0800b920 <_strtod_l>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	461f      	mov	r7, r3
 800b926:	b0a1      	sub	sp, #132	; 0x84
 800b928:	2300      	movs	r3, #0
 800b92a:	4681      	mov	r9, r0
 800b92c:	4638      	mov	r0, r7
 800b92e:	460e      	mov	r6, r1
 800b930:	9217      	str	r2, [sp, #92]	; 0x5c
 800b932:	931c      	str	r3, [sp, #112]	; 0x70
 800b934:	f001 fff5 	bl	800d922 <__localeconv_l>
 800b938:	4680      	mov	r8, r0
 800b93a:	6800      	ldr	r0, [r0, #0]
 800b93c:	f7f4 fc50 	bl	80001e0 <strlen>
 800b940:	f04f 0a00 	mov.w	sl, #0
 800b944:	4604      	mov	r4, r0
 800b946:	f04f 0b00 	mov.w	fp, #0
 800b94a:	961b      	str	r6, [sp, #108]	; 0x6c
 800b94c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b94e:	781a      	ldrb	r2, [r3, #0]
 800b950:	2a0d      	cmp	r2, #13
 800b952:	d832      	bhi.n	800b9ba <_strtod_l+0x9a>
 800b954:	2a09      	cmp	r2, #9
 800b956:	d236      	bcs.n	800b9c6 <_strtod_l+0xa6>
 800b958:	2a00      	cmp	r2, #0
 800b95a:	d03e      	beq.n	800b9da <_strtod_l+0xba>
 800b95c:	2300      	movs	r3, #0
 800b95e:	930d      	str	r3, [sp, #52]	; 0x34
 800b960:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b962:	782b      	ldrb	r3, [r5, #0]
 800b964:	2b30      	cmp	r3, #48	; 0x30
 800b966:	f040 80ac 	bne.w	800bac2 <_strtod_l+0x1a2>
 800b96a:	786b      	ldrb	r3, [r5, #1]
 800b96c:	2b58      	cmp	r3, #88	; 0x58
 800b96e:	d001      	beq.n	800b974 <_strtod_l+0x54>
 800b970:	2b78      	cmp	r3, #120	; 0x78
 800b972:	d167      	bne.n	800ba44 <_strtod_l+0x124>
 800b974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	ab1c      	add	r3, sp, #112	; 0x70
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	9702      	str	r7, [sp, #8]
 800b97e:	ab1d      	add	r3, sp, #116	; 0x74
 800b980:	4a88      	ldr	r2, [pc, #544]	; (800bba4 <_strtod_l+0x284>)
 800b982:	a91b      	add	r1, sp, #108	; 0x6c
 800b984:	4648      	mov	r0, r9
 800b986:	f001 fcf2 	bl	800d36e <__gethex>
 800b98a:	f010 0407 	ands.w	r4, r0, #7
 800b98e:	4606      	mov	r6, r0
 800b990:	d005      	beq.n	800b99e <_strtod_l+0x7e>
 800b992:	2c06      	cmp	r4, #6
 800b994:	d12b      	bne.n	800b9ee <_strtod_l+0xce>
 800b996:	3501      	adds	r5, #1
 800b998:	2300      	movs	r3, #0
 800b99a:	951b      	str	r5, [sp, #108]	; 0x6c
 800b99c:	930d      	str	r3, [sp, #52]	; 0x34
 800b99e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f040 859a 	bne.w	800c4da <_strtod_l+0xbba>
 800b9a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9a8:	b1e3      	cbz	r3, 800b9e4 <_strtod_l+0xc4>
 800b9aa:	4652      	mov	r2, sl
 800b9ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b9b0:	ec43 2b10 	vmov	d0, r2, r3
 800b9b4:	b021      	add	sp, #132	; 0x84
 800b9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ba:	2a2b      	cmp	r2, #43	; 0x2b
 800b9bc:	d015      	beq.n	800b9ea <_strtod_l+0xca>
 800b9be:	2a2d      	cmp	r2, #45	; 0x2d
 800b9c0:	d004      	beq.n	800b9cc <_strtod_l+0xac>
 800b9c2:	2a20      	cmp	r2, #32
 800b9c4:	d1ca      	bne.n	800b95c <_strtod_l+0x3c>
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b9ca:	e7bf      	b.n	800b94c <_strtod_l+0x2c>
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	920d      	str	r2, [sp, #52]	; 0x34
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9d4:	785b      	ldrb	r3, [r3, #1]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1c2      	bne.n	800b960 <_strtod_l+0x40>
 800b9da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9dc:	961b      	str	r6, [sp, #108]	; 0x6c
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f040 8579 	bne.w	800c4d6 <_strtod_l+0xbb6>
 800b9e4:	4652      	mov	r2, sl
 800b9e6:	465b      	mov	r3, fp
 800b9e8:	e7e2      	b.n	800b9b0 <_strtod_l+0x90>
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	e7ef      	b.n	800b9ce <_strtod_l+0xae>
 800b9ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b9f0:	b13a      	cbz	r2, 800ba02 <_strtod_l+0xe2>
 800b9f2:	2135      	movs	r1, #53	; 0x35
 800b9f4:	a81e      	add	r0, sp, #120	; 0x78
 800b9f6:	f002 fb87 	bl	800e108 <__copybits>
 800b9fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b9fc:	4648      	mov	r0, r9
 800b9fe:	f001 fff4 	bl	800d9ea <_Bfree>
 800ba02:	3c01      	subs	r4, #1
 800ba04:	2c04      	cmp	r4, #4
 800ba06:	d806      	bhi.n	800ba16 <_strtod_l+0xf6>
 800ba08:	e8df f004 	tbb	[pc, r4]
 800ba0c:	1714030a 	.word	0x1714030a
 800ba10:	0a          	.byte	0x0a
 800ba11:	00          	.byte	0x00
 800ba12:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ba16:	0730      	lsls	r0, r6, #28
 800ba18:	d5c1      	bpl.n	800b99e <_strtod_l+0x7e>
 800ba1a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ba1e:	e7be      	b.n	800b99e <_strtod_l+0x7e>
 800ba20:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ba24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ba26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ba2a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ba2e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba32:	e7f0      	b.n	800ba16 <_strtod_l+0xf6>
 800ba34:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bba8 <_strtod_l+0x288>
 800ba38:	e7ed      	b.n	800ba16 <_strtod_l+0xf6>
 800ba3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ba3e:	f04f 3aff 	mov.w	sl, #4294967295
 800ba42:	e7e8      	b.n	800ba16 <_strtod_l+0xf6>
 800ba44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	921b      	str	r2, [sp, #108]	; 0x6c
 800ba4a:	785b      	ldrb	r3, [r3, #1]
 800ba4c:	2b30      	cmp	r3, #48	; 0x30
 800ba4e:	d0f9      	beq.n	800ba44 <_strtod_l+0x124>
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d0a4      	beq.n	800b99e <_strtod_l+0x7e>
 800ba54:	2301      	movs	r3, #1
 800ba56:	2500      	movs	r5, #0
 800ba58:	9306      	str	r3, [sp, #24]
 800ba5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba5c:	9308      	str	r3, [sp, #32]
 800ba5e:	9507      	str	r5, [sp, #28]
 800ba60:	9505      	str	r5, [sp, #20]
 800ba62:	220a      	movs	r2, #10
 800ba64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ba66:	7807      	ldrb	r7, [r0, #0]
 800ba68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ba6c:	b2d9      	uxtb	r1, r3
 800ba6e:	2909      	cmp	r1, #9
 800ba70:	d929      	bls.n	800bac6 <_strtod_l+0x1a6>
 800ba72:	4622      	mov	r2, r4
 800ba74:	f8d8 1000 	ldr.w	r1, [r8]
 800ba78:	f002 fce2 	bl	800e440 <strncmp>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d031      	beq.n	800bae4 <_strtod_l+0x1c4>
 800ba80:	2000      	movs	r0, #0
 800ba82:	9c05      	ldr	r4, [sp, #20]
 800ba84:	9004      	str	r0, [sp, #16]
 800ba86:	463b      	mov	r3, r7
 800ba88:	4602      	mov	r2, r0
 800ba8a:	2b65      	cmp	r3, #101	; 0x65
 800ba8c:	d001      	beq.n	800ba92 <_strtod_l+0x172>
 800ba8e:	2b45      	cmp	r3, #69	; 0x45
 800ba90:	d114      	bne.n	800babc <_strtod_l+0x19c>
 800ba92:	b924      	cbnz	r4, 800ba9e <_strtod_l+0x17e>
 800ba94:	b910      	cbnz	r0, 800ba9c <_strtod_l+0x17c>
 800ba96:	9b06      	ldr	r3, [sp, #24]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d09e      	beq.n	800b9da <_strtod_l+0xba>
 800ba9c:	2400      	movs	r4, #0
 800ba9e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800baa0:	1c73      	adds	r3, r6, #1
 800baa2:	931b      	str	r3, [sp, #108]	; 0x6c
 800baa4:	7873      	ldrb	r3, [r6, #1]
 800baa6:	2b2b      	cmp	r3, #43	; 0x2b
 800baa8:	d078      	beq.n	800bb9c <_strtod_l+0x27c>
 800baaa:	2b2d      	cmp	r3, #45	; 0x2d
 800baac:	d070      	beq.n	800bb90 <_strtod_l+0x270>
 800baae:	f04f 0c00 	mov.w	ip, #0
 800bab2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bab6:	2f09      	cmp	r7, #9
 800bab8:	d97c      	bls.n	800bbb4 <_strtod_l+0x294>
 800baba:	961b      	str	r6, [sp, #108]	; 0x6c
 800babc:	f04f 0e00 	mov.w	lr, #0
 800bac0:	e09a      	b.n	800bbf8 <_strtod_l+0x2d8>
 800bac2:	2300      	movs	r3, #0
 800bac4:	e7c7      	b.n	800ba56 <_strtod_l+0x136>
 800bac6:	9905      	ldr	r1, [sp, #20]
 800bac8:	2908      	cmp	r1, #8
 800baca:	bfdd      	ittte	le
 800bacc:	9907      	ldrle	r1, [sp, #28]
 800bace:	fb02 3301 	mlale	r3, r2, r1, r3
 800bad2:	9307      	strle	r3, [sp, #28]
 800bad4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bad8:	9b05      	ldr	r3, [sp, #20]
 800bada:	3001      	adds	r0, #1
 800badc:	3301      	adds	r3, #1
 800bade:	9305      	str	r3, [sp, #20]
 800bae0:	901b      	str	r0, [sp, #108]	; 0x6c
 800bae2:	e7bf      	b.n	800ba64 <_strtod_l+0x144>
 800bae4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bae6:	191a      	adds	r2, r3, r4
 800bae8:	921b      	str	r2, [sp, #108]	; 0x6c
 800baea:	9a05      	ldr	r2, [sp, #20]
 800baec:	5d1b      	ldrb	r3, [r3, r4]
 800baee:	2a00      	cmp	r2, #0
 800baf0:	d037      	beq.n	800bb62 <_strtod_l+0x242>
 800baf2:	9c05      	ldr	r4, [sp, #20]
 800baf4:	4602      	mov	r2, r0
 800baf6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bafa:	2909      	cmp	r1, #9
 800bafc:	d913      	bls.n	800bb26 <_strtod_l+0x206>
 800bafe:	2101      	movs	r1, #1
 800bb00:	9104      	str	r1, [sp, #16]
 800bb02:	e7c2      	b.n	800ba8a <_strtod_l+0x16a>
 800bb04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	921b      	str	r2, [sp, #108]	; 0x6c
 800bb0a:	785b      	ldrb	r3, [r3, #1]
 800bb0c:	3001      	adds	r0, #1
 800bb0e:	2b30      	cmp	r3, #48	; 0x30
 800bb10:	d0f8      	beq.n	800bb04 <_strtod_l+0x1e4>
 800bb12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bb16:	2a08      	cmp	r2, #8
 800bb18:	f200 84e4 	bhi.w	800c4e4 <_strtod_l+0xbc4>
 800bb1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bb1e:	9208      	str	r2, [sp, #32]
 800bb20:	4602      	mov	r2, r0
 800bb22:	2000      	movs	r0, #0
 800bb24:	4604      	mov	r4, r0
 800bb26:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bb2a:	f100 0101 	add.w	r1, r0, #1
 800bb2e:	d012      	beq.n	800bb56 <_strtod_l+0x236>
 800bb30:	440a      	add	r2, r1
 800bb32:	eb00 0c04 	add.w	ip, r0, r4
 800bb36:	4621      	mov	r1, r4
 800bb38:	270a      	movs	r7, #10
 800bb3a:	458c      	cmp	ip, r1
 800bb3c:	d113      	bne.n	800bb66 <_strtod_l+0x246>
 800bb3e:	1821      	adds	r1, r4, r0
 800bb40:	2908      	cmp	r1, #8
 800bb42:	f104 0401 	add.w	r4, r4, #1
 800bb46:	4404      	add	r4, r0
 800bb48:	dc19      	bgt.n	800bb7e <_strtod_l+0x25e>
 800bb4a:	9b07      	ldr	r3, [sp, #28]
 800bb4c:	210a      	movs	r1, #10
 800bb4e:	fb01 e303 	mla	r3, r1, r3, lr
 800bb52:	9307      	str	r3, [sp, #28]
 800bb54:	2100      	movs	r1, #0
 800bb56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb58:	1c58      	adds	r0, r3, #1
 800bb5a:	901b      	str	r0, [sp, #108]	; 0x6c
 800bb5c:	785b      	ldrb	r3, [r3, #1]
 800bb5e:	4608      	mov	r0, r1
 800bb60:	e7c9      	b.n	800baf6 <_strtod_l+0x1d6>
 800bb62:	9805      	ldr	r0, [sp, #20]
 800bb64:	e7d3      	b.n	800bb0e <_strtod_l+0x1ee>
 800bb66:	2908      	cmp	r1, #8
 800bb68:	f101 0101 	add.w	r1, r1, #1
 800bb6c:	dc03      	bgt.n	800bb76 <_strtod_l+0x256>
 800bb6e:	9b07      	ldr	r3, [sp, #28]
 800bb70:	437b      	muls	r3, r7
 800bb72:	9307      	str	r3, [sp, #28]
 800bb74:	e7e1      	b.n	800bb3a <_strtod_l+0x21a>
 800bb76:	2910      	cmp	r1, #16
 800bb78:	bfd8      	it	le
 800bb7a:	437d      	mulle	r5, r7
 800bb7c:	e7dd      	b.n	800bb3a <_strtod_l+0x21a>
 800bb7e:	2c10      	cmp	r4, #16
 800bb80:	bfdc      	itt	le
 800bb82:	210a      	movle	r1, #10
 800bb84:	fb01 e505 	mlale	r5, r1, r5, lr
 800bb88:	e7e4      	b.n	800bb54 <_strtod_l+0x234>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	e781      	b.n	800ba94 <_strtod_l+0x174>
 800bb90:	f04f 0c01 	mov.w	ip, #1
 800bb94:	1cb3      	adds	r3, r6, #2
 800bb96:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb98:	78b3      	ldrb	r3, [r6, #2]
 800bb9a:	e78a      	b.n	800bab2 <_strtod_l+0x192>
 800bb9c:	f04f 0c00 	mov.w	ip, #0
 800bba0:	e7f8      	b.n	800bb94 <_strtod_l+0x274>
 800bba2:	bf00      	nop
 800bba4:	0800e5cc 	.word	0x0800e5cc
 800bba8:	7ff00000 	.word	0x7ff00000
 800bbac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bbae:	1c5f      	adds	r7, r3, #1
 800bbb0:	971b      	str	r7, [sp, #108]	; 0x6c
 800bbb2:	785b      	ldrb	r3, [r3, #1]
 800bbb4:	2b30      	cmp	r3, #48	; 0x30
 800bbb6:	d0f9      	beq.n	800bbac <_strtod_l+0x28c>
 800bbb8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800bbbc:	2f08      	cmp	r7, #8
 800bbbe:	f63f af7d 	bhi.w	800babc <_strtod_l+0x19c>
 800bbc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bbc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bbc8:	930a      	str	r3, [sp, #40]	; 0x28
 800bbca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bbcc:	1c5f      	adds	r7, r3, #1
 800bbce:	971b      	str	r7, [sp, #108]	; 0x6c
 800bbd0:	785b      	ldrb	r3, [r3, #1]
 800bbd2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800bbd6:	f1b8 0f09 	cmp.w	r8, #9
 800bbda:	d937      	bls.n	800bc4c <_strtod_l+0x32c>
 800bbdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bbde:	1a7f      	subs	r7, r7, r1
 800bbe0:	2f08      	cmp	r7, #8
 800bbe2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bbe6:	dc37      	bgt.n	800bc58 <_strtod_l+0x338>
 800bbe8:	45be      	cmp	lr, r7
 800bbea:	bfa8      	it	ge
 800bbec:	46be      	movge	lr, r7
 800bbee:	f1bc 0f00 	cmp.w	ip, #0
 800bbf2:	d001      	beq.n	800bbf8 <_strtod_l+0x2d8>
 800bbf4:	f1ce 0e00 	rsb	lr, lr, #0
 800bbf8:	2c00      	cmp	r4, #0
 800bbfa:	d151      	bne.n	800bca0 <_strtod_l+0x380>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	f47f aece 	bne.w	800b99e <_strtod_l+0x7e>
 800bc02:	9a06      	ldr	r2, [sp, #24]
 800bc04:	2a00      	cmp	r2, #0
 800bc06:	f47f aeca 	bne.w	800b99e <_strtod_l+0x7e>
 800bc0a:	9a04      	ldr	r2, [sp, #16]
 800bc0c:	2a00      	cmp	r2, #0
 800bc0e:	f47f aee4 	bne.w	800b9da <_strtod_l+0xba>
 800bc12:	2b4e      	cmp	r3, #78	; 0x4e
 800bc14:	d027      	beq.n	800bc66 <_strtod_l+0x346>
 800bc16:	dc21      	bgt.n	800bc5c <_strtod_l+0x33c>
 800bc18:	2b49      	cmp	r3, #73	; 0x49
 800bc1a:	f47f aede 	bne.w	800b9da <_strtod_l+0xba>
 800bc1e:	49a0      	ldr	r1, [pc, #640]	; (800bea0 <_strtod_l+0x580>)
 800bc20:	a81b      	add	r0, sp, #108	; 0x6c
 800bc22:	f001 fdd7 	bl	800d7d4 <__match>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f43f aed7 	beq.w	800b9da <_strtod_l+0xba>
 800bc2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc2e:	499d      	ldr	r1, [pc, #628]	; (800bea4 <_strtod_l+0x584>)
 800bc30:	3b01      	subs	r3, #1
 800bc32:	a81b      	add	r0, sp, #108	; 0x6c
 800bc34:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc36:	f001 fdcd 	bl	800d7d4 <__match>
 800bc3a:	b910      	cbnz	r0, 800bc42 <_strtod_l+0x322>
 800bc3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc3e:	3301      	adds	r3, #1
 800bc40:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc42:	f8df b274 	ldr.w	fp, [pc, #628]	; 800beb8 <_strtod_l+0x598>
 800bc46:	f04f 0a00 	mov.w	sl, #0
 800bc4a:	e6a8      	b.n	800b99e <_strtod_l+0x7e>
 800bc4c:	210a      	movs	r1, #10
 800bc4e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bc52:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bc56:	e7b8      	b.n	800bbca <_strtod_l+0x2aa>
 800bc58:	46be      	mov	lr, r7
 800bc5a:	e7c8      	b.n	800bbee <_strtod_l+0x2ce>
 800bc5c:	2b69      	cmp	r3, #105	; 0x69
 800bc5e:	d0de      	beq.n	800bc1e <_strtod_l+0x2fe>
 800bc60:	2b6e      	cmp	r3, #110	; 0x6e
 800bc62:	f47f aeba 	bne.w	800b9da <_strtod_l+0xba>
 800bc66:	4990      	ldr	r1, [pc, #576]	; (800bea8 <_strtod_l+0x588>)
 800bc68:	a81b      	add	r0, sp, #108	; 0x6c
 800bc6a:	f001 fdb3 	bl	800d7d4 <__match>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	f43f aeb3 	beq.w	800b9da <_strtod_l+0xba>
 800bc74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	2b28      	cmp	r3, #40	; 0x28
 800bc7a:	d10e      	bne.n	800bc9a <_strtod_l+0x37a>
 800bc7c:	aa1e      	add	r2, sp, #120	; 0x78
 800bc7e:	498b      	ldr	r1, [pc, #556]	; (800beac <_strtod_l+0x58c>)
 800bc80:	a81b      	add	r0, sp, #108	; 0x6c
 800bc82:	f001 fdbb 	bl	800d7fc <__hexnan>
 800bc86:	2805      	cmp	r0, #5
 800bc88:	d107      	bne.n	800bc9a <_strtod_l+0x37a>
 800bc8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc8c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800bc90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bc94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bc98:	e681      	b.n	800b99e <_strtod_l+0x7e>
 800bc9a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800bec0 <_strtod_l+0x5a0>
 800bc9e:	e7d2      	b.n	800bc46 <_strtod_l+0x326>
 800bca0:	ebae 0302 	sub.w	r3, lr, r2
 800bca4:	9306      	str	r3, [sp, #24]
 800bca6:	9b05      	ldr	r3, [sp, #20]
 800bca8:	9807      	ldr	r0, [sp, #28]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	bf08      	it	eq
 800bcae:	4623      	moveq	r3, r4
 800bcb0:	2c10      	cmp	r4, #16
 800bcb2:	9305      	str	r3, [sp, #20]
 800bcb4:	46a0      	mov	r8, r4
 800bcb6:	bfa8      	it	ge
 800bcb8:	f04f 0810 	movge.w	r8, #16
 800bcbc:	f7f4 fc2a 	bl	8000514 <__aeabi_ui2d>
 800bcc0:	2c09      	cmp	r4, #9
 800bcc2:	4682      	mov	sl, r0
 800bcc4:	468b      	mov	fp, r1
 800bcc6:	dc13      	bgt.n	800bcf0 <_strtod_l+0x3d0>
 800bcc8:	9b06      	ldr	r3, [sp, #24]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f43f ae67 	beq.w	800b99e <_strtod_l+0x7e>
 800bcd0:	9b06      	ldr	r3, [sp, #24]
 800bcd2:	dd7a      	ble.n	800bdca <_strtod_l+0x4aa>
 800bcd4:	2b16      	cmp	r3, #22
 800bcd6:	dc61      	bgt.n	800bd9c <_strtod_l+0x47c>
 800bcd8:	4a75      	ldr	r2, [pc, #468]	; (800beb0 <_strtod_l+0x590>)
 800bcda:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bcde:	e9de 0100 	ldrd	r0, r1, [lr]
 800bce2:	4652      	mov	r2, sl
 800bce4:	465b      	mov	r3, fp
 800bce6:	f7f4 fc8f 	bl	8000608 <__aeabi_dmul>
 800bcea:	4682      	mov	sl, r0
 800bcec:	468b      	mov	fp, r1
 800bcee:	e656      	b.n	800b99e <_strtod_l+0x7e>
 800bcf0:	4b6f      	ldr	r3, [pc, #444]	; (800beb0 <_strtod_l+0x590>)
 800bcf2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bcf6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bcfa:	f7f4 fc85 	bl	8000608 <__aeabi_dmul>
 800bcfe:	4606      	mov	r6, r0
 800bd00:	4628      	mov	r0, r5
 800bd02:	460f      	mov	r7, r1
 800bd04:	f7f4 fc06 	bl	8000514 <__aeabi_ui2d>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	4639      	mov	r1, r7
 800bd10:	f7f4 fac4 	bl	800029c <__adddf3>
 800bd14:	2c0f      	cmp	r4, #15
 800bd16:	4682      	mov	sl, r0
 800bd18:	468b      	mov	fp, r1
 800bd1a:	ddd5      	ble.n	800bcc8 <_strtod_l+0x3a8>
 800bd1c:	9b06      	ldr	r3, [sp, #24]
 800bd1e:	eba4 0808 	sub.w	r8, r4, r8
 800bd22:	4498      	add	r8, r3
 800bd24:	f1b8 0f00 	cmp.w	r8, #0
 800bd28:	f340 8096 	ble.w	800be58 <_strtod_l+0x538>
 800bd2c:	f018 030f 	ands.w	r3, r8, #15
 800bd30:	d00a      	beq.n	800bd48 <_strtod_l+0x428>
 800bd32:	495f      	ldr	r1, [pc, #380]	; (800beb0 <_strtod_l+0x590>)
 800bd34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd38:	4652      	mov	r2, sl
 800bd3a:	465b      	mov	r3, fp
 800bd3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd40:	f7f4 fc62 	bl	8000608 <__aeabi_dmul>
 800bd44:	4682      	mov	sl, r0
 800bd46:	468b      	mov	fp, r1
 800bd48:	f038 080f 	bics.w	r8, r8, #15
 800bd4c:	d073      	beq.n	800be36 <_strtod_l+0x516>
 800bd4e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bd52:	dd47      	ble.n	800bde4 <_strtod_l+0x4c4>
 800bd54:	2400      	movs	r4, #0
 800bd56:	46a0      	mov	r8, r4
 800bd58:	9407      	str	r4, [sp, #28]
 800bd5a:	9405      	str	r4, [sp, #20]
 800bd5c:	2322      	movs	r3, #34	; 0x22
 800bd5e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800beb8 <_strtod_l+0x598>
 800bd62:	f8c9 3000 	str.w	r3, [r9]
 800bd66:	f04f 0a00 	mov.w	sl, #0
 800bd6a:	9b07      	ldr	r3, [sp, #28]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f43f ae16 	beq.w	800b99e <_strtod_l+0x7e>
 800bd72:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bd74:	4648      	mov	r0, r9
 800bd76:	f001 fe38 	bl	800d9ea <_Bfree>
 800bd7a:	9905      	ldr	r1, [sp, #20]
 800bd7c:	4648      	mov	r0, r9
 800bd7e:	f001 fe34 	bl	800d9ea <_Bfree>
 800bd82:	4641      	mov	r1, r8
 800bd84:	4648      	mov	r0, r9
 800bd86:	f001 fe30 	bl	800d9ea <_Bfree>
 800bd8a:	9907      	ldr	r1, [sp, #28]
 800bd8c:	4648      	mov	r0, r9
 800bd8e:	f001 fe2c 	bl	800d9ea <_Bfree>
 800bd92:	4621      	mov	r1, r4
 800bd94:	4648      	mov	r0, r9
 800bd96:	f001 fe28 	bl	800d9ea <_Bfree>
 800bd9a:	e600      	b.n	800b99e <_strtod_l+0x7e>
 800bd9c:	9a06      	ldr	r2, [sp, #24]
 800bd9e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bda2:	4293      	cmp	r3, r2
 800bda4:	dbba      	blt.n	800bd1c <_strtod_l+0x3fc>
 800bda6:	4d42      	ldr	r5, [pc, #264]	; (800beb0 <_strtod_l+0x590>)
 800bda8:	f1c4 040f 	rsb	r4, r4, #15
 800bdac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bdb0:	4652      	mov	r2, sl
 800bdb2:	465b      	mov	r3, fp
 800bdb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdb8:	f7f4 fc26 	bl	8000608 <__aeabi_dmul>
 800bdbc:	9b06      	ldr	r3, [sp, #24]
 800bdbe:	1b1c      	subs	r4, r3, r4
 800bdc0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bdc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdc8:	e78d      	b.n	800bce6 <_strtod_l+0x3c6>
 800bdca:	f113 0f16 	cmn.w	r3, #22
 800bdce:	dba5      	blt.n	800bd1c <_strtod_l+0x3fc>
 800bdd0:	4a37      	ldr	r2, [pc, #220]	; (800beb0 <_strtod_l+0x590>)
 800bdd2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800bdd6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bdda:	4650      	mov	r0, sl
 800bddc:	4659      	mov	r1, fp
 800bdde:	f7f4 fd3d 	bl	800085c <__aeabi_ddiv>
 800bde2:	e782      	b.n	800bcea <_strtod_l+0x3ca>
 800bde4:	2300      	movs	r3, #0
 800bde6:	4e33      	ldr	r6, [pc, #204]	; (800beb4 <_strtod_l+0x594>)
 800bde8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bdec:	4650      	mov	r0, sl
 800bdee:	4659      	mov	r1, fp
 800bdf0:	461d      	mov	r5, r3
 800bdf2:	f1b8 0f01 	cmp.w	r8, #1
 800bdf6:	dc21      	bgt.n	800be3c <_strtod_l+0x51c>
 800bdf8:	b10b      	cbz	r3, 800bdfe <_strtod_l+0x4de>
 800bdfa:	4682      	mov	sl, r0
 800bdfc:	468b      	mov	fp, r1
 800bdfe:	4b2d      	ldr	r3, [pc, #180]	; (800beb4 <_strtod_l+0x594>)
 800be00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800be04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800be08:	4652      	mov	r2, sl
 800be0a:	465b      	mov	r3, fp
 800be0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800be10:	f7f4 fbfa 	bl	8000608 <__aeabi_dmul>
 800be14:	4b28      	ldr	r3, [pc, #160]	; (800beb8 <_strtod_l+0x598>)
 800be16:	460a      	mov	r2, r1
 800be18:	400b      	ands	r3, r1
 800be1a:	4928      	ldr	r1, [pc, #160]	; (800bebc <_strtod_l+0x59c>)
 800be1c:	428b      	cmp	r3, r1
 800be1e:	4682      	mov	sl, r0
 800be20:	d898      	bhi.n	800bd54 <_strtod_l+0x434>
 800be22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800be26:	428b      	cmp	r3, r1
 800be28:	bf86      	itte	hi
 800be2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bec4 <_strtod_l+0x5a4>
 800be2e:	f04f 3aff 	movhi.w	sl, #4294967295
 800be32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800be36:	2300      	movs	r3, #0
 800be38:	9304      	str	r3, [sp, #16]
 800be3a:	e077      	b.n	800bf2c <_strtod_l+0x60c>
 800be3c:	f018 0f01 	tst.w	r8, #1
 800be40:	d006      	beq.n	800be50 <_strtod_l+0x530>
 800be42:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 fbdd 	bl	8000608 <__aeabi_dmul>
 800be4e:	2301      	movs	r3, #1
 800be50:	3501      	adds	r5, #1
 800be52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800be56:	e7cc      	b.n	800bdf2 <_strtod_l+0x4d2>
 800be58:	d0ed      	beq.n	800be36 <_strtod_l+0x516>
 800be5a:	f1c8 0800 	rsb	r8, r8, #0
 800be5e:	f018 020f 	ands.w	r2, r8, #15
 800be62:	d00a      	beq.n	800be7a <_strtod_l+0x55a>
 800be64:	4b12      	ldr	r3, [pc, #72]	; (800beb0 <_strtod_l+0x590>)
 800be66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be6a:	4650      	mov	r0, sl
 800be6c:	4659      	mov	r1, fp
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	f7f4 fcf3 	bl	800085c <__aeabi_ddiv>
 800be76:	4682      	mov	sl, r0
 800be78:	468b      	mov	fp, r1
 800be7a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800be7e:	d0da      	beq.n	800be36 <_strtod_l+0x516>
 800be80:	f1b8 0f1f 	cmp.w	r8, #31
 800be84:	dd20      	ble.n	800bec8 <_strtod_l+0x5a8>
 800be86:	2400      	movs	r4, #0
 800be88:	46a0      	mov	r8, r4
 800be8a:	9407      	str	r4, [sp, #28]
 800be8c:	9405      	str	r4, [sp, #20]
 800be8e:	2322      	movs	r3, #34	; 0x22
 800be90:	f04f 0a00 	mov.w	sl, #0
 800be94:	f04f 0b00 	mov.w	fp, #0
 800be98:	f8c9 3000 	str.w	r3, [r9]
 800be9c:	e765      	b.n	800bd6a <_strtod_l+0x44a>
 800be9e:	bf00      	nop
 800bea0:	0800e595 	.word	0x0800e595
 800bea4:	0800e623 	.word	0x0800e623
 800bea8:	0800e59d 	.word	0x0800e59d
 800beac:	0800e5e0 	.word	0x0800e5e0
 800beb0:	0800e6c8 	.word	0x0800e6c8
 800beb4:	0800e6a0 	.word	0x0800e6a0
 800beb8:	7ff00000 	.word	0x7ff00000
 800bebc:	7ca00000 	.word	0x7ca00000
 800bec0:	fff80000 	.word	0xfff80000
 800bec4:	7fefffff 	.word	0x7fefffff
 800bec8:	f018 0310 	ands.w	r3, r8, #16
 800becc:	bf18      	it	ne
 800bece:	236a      	movne	r3, #106	; 0x6a
 800bed0:	4da0      	ldr	r5, [pc, #640]	; (800c154 <_strtod_l+0x834>)
 800bed2:	9304      	str	r3, [sp, #16]
 800bed4:	4650      	mov	r0, sl
 800bed6:	4659      	mov	r1, fp
 800bed8:	2300      	movs	r3, #0
 800beda:	f1b8 0f00 	cmp.w	r8, #0
 800bede:	f300 810a 	bgt.w	800c0f6 <_strtod_l+0x7d6>
 800bee2:	b10b      	cbz	r3, 800bee8 <_strtod_l+0x5c8>
 800bee4:	4682      	mov	sl, r0
 800bee6:	468b      	mov	fp, r1
 800bee8:	9b04      	ldr	r3, [sp, #16]
 800beea:	b1bb      	cbz	r3, 800bf1c <_strtod_l+0x5fc>
 800beec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bef0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	4659      	mov	r1, fp
 800bef8:	dd10      	ble.n	800bf1c <_strtod_l+0x5fc>
 800befa:	2b1f      	cmp	r3, #31
 800befc:	f340 8107 	ble.w	800c10e <_strtod_l+0x7ee>
 800bf00:	2b34      	cmp	r3, #52	; 0x34
 800bf02:	bfde      	ittt	le
 800bf04:	3b20      	suble	r3, #32
 800bf06:	f04f 32ff 	movle.w	r2, #4294967295
 800bf0a:	fa02 f303 	lslle.w	r3, r2, r3
 800bf0e:	f04f 0a00 	mov.w	sl, #0
 800bf12:	bfcc      	ite	gt
 800bf14:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bf18:	ea03 0b01 	andle.w	fp, r3, r1
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4650      	mov	r0, sl
 800bf22:	4659      	mov	r1, fp
 800bf24:	f7f4 fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d1ac      	bne.n	800be86 <_strtod_l+0x566>
 800bf2c:	9b07      	ldr	r3, [sp, #28]
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	9a05      	ldr	r2, [sp, #20]
 800bf32:	9908      	ldr	r1, [sp, #32]
 800bf34:	4623      	mov	r3, r4
 800bf36:	4648      	mov	r0, r9
 800bf38:	f001 fda9 	bl	800da8e <__s2b>
 800bf3c:	9007      	str	r0, [sp, #28]
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	f43f af08 	beq.w	800bd54 <_strtod_l+0x434>
 800bf44:	9a06      	ldr	r2, [sp, #24]
 800bf46:	9b06      	ldr	r3, [sp, #24]
 800bf48:	2a00      	cmp	r2, #0
 800bf4a:	f1c3 0300 	rsb	r3, r3, #0
 800bf4e:	bfa8      	it	ge
 800bf50:	2300      	movge	r3, #0
 800bf52:	930e      	str	r3, [sp, #56]	; 0x38
 800bf54:	2400      	movs	r4, #0
 800bf56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf5a:	9316      	str	r3, [sp, #88]	; 0x58
 800bf5c:	46a0      	mov	r8, r4
 800bf5e:	9b07      	ldr	r3, [sp, #28]
 800bf60:	4648      	mov	r0, r9
 800bf62:	6859      	ldr	r1, [r3, #4]
 800bf64:	f001 fd0d 	bl	800d982 <_Balloc>
 800bf68:	9005      	str	r0, [sp, #20]
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	f43f aef6 	beq.w	800bd5c <_strtod_l+0x43c>
 800bf70:	9b07      	ldr	r3, [sp, #28]
 800bf72:	691a      	ldr	r2, [r3, #16]
 800bf74:	3202      	adds	r2, #2
 800bf76:	f103 010c 	add.w	r1, r3, #12
 800bf7a:	0092      	lsls	r2, r2, #2
 800bf7c:	300c      	adds	r0, #12
 800bf7e:	f001 fcf3 	bl	800d968 <memcpy>
 800bf82:	aa1e      	add	r2, sp, #120	; 0x78
 800bf84:	a91d      	add	r1, sp, #116	; 0x74
 800bf86:	ec4b ab10 	vmov	d0, sl, fp
 800bf8a:	4648      	mov	r0, r9
 800bf8c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800bf90:	f002 f838 	bl	800e004 <__d2b>
 800bf94:	901c      	str	r0, [sp, #112]	; 0x70
 800bf96:	2800      	cmp	r0, #0
 800bf98:	f43f aee0 	beq.w	800bd5c <_strtod_l+0x43c>
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	4648      	mov	r0, r9
 800bfa0:	f001 fe01 	bl	800dba6 <__i2b>
 800bfa4:	4680      	mov	r8, r0
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	f43f aed8 	beq.w	800bd5c <_strtod_l+0x43c>
 800bfac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bfae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bfb0:	2e00      	cmp	r6, #0
 800bfb2:	bfab      	itete	ge
 800bfb4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800bfb6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800bfb8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800bfba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800bfbc:	bfac      	ite	ge
 800bfbe:	18f7      	addge	r7, r6, r3
 800bfc0:	1b9d      	sublt	r5, r3, r6
 800bfc2:	9b04      	ldr	r3, [sp, #16]
 800bfc4:	1af6      	subs	r6, r6, r3
 800bfc6:	4416      	add	r6, r2
 800bfc8:	4b63      	ldr	r3, [pc, #396]	; (800c158 <_strtod_l+0x838>)
 800bfca:	3e01      	subs	r6, #1
 800bfcc:	429e      	cmp	r6, r3
 800bfce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bfd2:	f280 80af 	bge.w	800c134 <_strtod_l+0x814>
 800bfd6:	1b9b      	subs	r3, r3, r6
 800bfd8:	2b1f      	cmp	r3, #31
 800bfda:	eba2 0203 	sub.w	r2, r2, r3
 800bfde:	f04f 0101 	mov.w	r1, #1
 800bfe2:	f300 809b 	bgt.w	800c11c <_strtod_l+0x7fc>
 800bfe6:	fa01 f303 	lsl.w	r3, r1, r3
 800bfea:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfec:	2300      	movs	r3, #0
 800bfee:	930a      	str	r3, [sp, #40]	; 0x28
 800bff0:	18be      	adds	r6, r7, r2
 800bff2:	9b04      	ldr	r3, [sp, #16]
 800bff4:	42b7      	cmp	r7, r6
 800bff6:	4415      	add	r5, r2
 800bff8:	441d      	add	r5, r3
 800bffa:	463b      	mov	r3, r7
 800bffc:	bfa8      	it	ge
 800bffe:	4633      	movge	r3, r6
 800c000:	42ab      	cmp	r3, r5
 800c002:	bfa8      	it	ge
 800c004:	462b      	movge	r3, r5
 800c006:	2b00      	cmp	r3, #0
 800c008:	bfc2      	ittt	gt
 800c00a:	1af6      	subgt	r6, r6, r3
 800c00c:	1aed      	subgt	r5, r5, r3
 800c00e:	1aff      	subgt	r7, r7, r3
 800c010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c012:	b1bb      	cbz	r3, 800c044 <_strtod_l+0x724>
 800c014:	4641      	mov	r1, r8
 800c016:	461a      	mov	r2, r3
 800c018:	4648      	mov	r0, r9
 800c01a:	f001 fe63 	bl	800dce4 <__pow5mult>
 800c01e:	4680      	mov	r8, r0
 800c020:	2800      	cmp	r0, #0
 800c022:	f43f ae9b 	beq.w	800bd5c <_strtod_l+0x43c>
 800c026:	4601      	mov	r1, r0
 800c028:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c02a:	4648      	mov	r0, r9
 800c02c:	f001 fdc4 	bl	800dbb8 <__multiply>
 800c030:	900c      	str	r0, [sp, #48]	; 0x30
 800c032:	2800      	cmp	r0, #0
 800c034:	f43f ae92 	beq.w	800bd5c <_strtod_l+0x43c>
 800c038:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c03a:	4648      	mov	r0, r9
 800c03c:	f001 fcd5 	bl	800d9ea <_Bfree>
 800c040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c042:	931c      	str	r3, [sp, #112]	; 0x70
 800c044:	2e00      	cmp	r6, #0
 800c046:	dc7a      	bgt.n	800c13e <_strtod_l+0x81e>
 800c048:	9b06      	ldr	r3, [sp, #24]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dd08      	ble.n	800c060 <_strtod_l+0x740>
 800c04e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c050:	9905      	ldr	r1, [sp, #20]
 800c052:	4648      	mov	r0, r9
 800c054:	f001 fe46 	bl	800dce4 <__pow5mult>
 800c058:	9005      	str	r0, [sp, #20]
 800c05a:	2800      	cmp	r0, #0
 800c05c:	f43f ae7e 	beq.w	800bd5c <_strtod_l+0x43c>
 800c060:	2d00      	cmp	r5, #0
 800c062:	dd08      	ble.n	800c076 <_strtod_l+0x756>
 800c064:	462a      	mov	r2, r5
 800c066:	9905      	ldr	r1, [sp, #20]
 800c068:	4648      	mov	r0, r9
 800c06a:	f001 fe89 	bl	800dd80 <__lshift>
 800c06e:	9005      	str	r0, [sp, #20]
 800c070:	2800      	cmp	r0, #0
 800c072:	f43f ae73 	beq.w	800bd5c <_strtod_l+0x43c>
 800c076:	2f00      	cmp	r7, #0
 800c078:	dd08      	ble.n	800c08c <_strtod_l+0x76c>
 800c07a:	4641      	mov	r1, r8
 800c07c:	463a      	mov	r2, r7
 800c07e:	4648      	mov	r0, r9
 800c080:	f001 fe7e 	bl	800dd80 <__lshift>
 800c084:	4680      	mov	r8, r0
 800c086:	2800      	cmp	r0, #0
 800c088:	f43f ae68 	beq.w	800bd5c <_strtod_l+0x43c>
 800c08c:	9a05      	ldr	r2, [sp, #20]
 800c08e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c090:	4648      	mov	r0, r9
 800c092:	f001 fee3 	bl	800de5c <__mdiff>
 800c096:	4604      	mov	r4, r0
 800c098:	2800      	cmp	r0, #0
 800c09a:	f43f ae5f 	beq.w	800bd5c <_strtod_l+0x43c>
 800c09e:	68c3      	ldr	r3, [r0, #12]
 800c0a0:	930c      	str	r3, [sp, #48]	; 0x30
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	60c3      	str	r3, [r0, #12]
 800c0a6:	4641      	mov	r1, r8
 800c0a8:	f001 febe 	bl	800de28 <__mcmp>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	da55      	bge.n	800c15c <_strtod_l+0x83c>
 800c0b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0b2:	b9e3      	cbnz	r3, 800c0ee <_strtod_l+0x7ce>
 800c0b4:	f1ba 0f00 	cmp.w	sl, #0
 800c0b8:	d119      	bne.n	800c0ee <_strtod_l+0x7ce>
 800c0ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0be:	b9b3      	cbnz	r3, 800c0ee <_strtod_l+0x7ce>
 800c0c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0c4:	0d1b      	lsrs	r3, r3, #20
 800c0c6:	051b      	lsls	r3, r3, #20
 800c0c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c0cc:	d90f      	bls.n	800c0ee <_strtod_l+0x7ce>
 800c0ce:	6963      	ldr	r3, [r4, #20]
 800c0d0:	b913      	cbnz	r3, 800c0d8 <_strtod_l+0x7b8>
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	dd0a      	ble.n	800c0ee <_strtod_l+0x7ce>
 800c0d8:	4621      	mov	r1, r4
 800c0da:	2201      	movs	r2, #1
 800c0dc:	4648      	mov	r0, r9
 800c0de:	f001 fe4f 	bl	800dd80 <__lshift>
 800c0e2:	4641      	mov	r1, r8
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	f001 fe9f 	bl	800de28 <__mcmp>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	dc67      	bgt.n	800c1be <_strtod_l+0x89e>
 800c0ee:	9b04      	ldr	r3, [sp, #16]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d171      	bne.n	800c1d8 <_strtod_l+0x8b8>
 800c0f4:	e63d      	b.n	800bd72 <_strtod_l+0x452>
 800c0f6:	f018 0f01 	tst.w	r8, #1
 800c0fa:	d004      	beq.n	800c106 <_strtod_l+0x7e6>
 800c0fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c100:	f7f4 fa82 	bl	8000608 <__aeabi_dmul>
 800c104:	2301      	movs	r3, #1
 800c106:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c10a:	3508      	adds	r5, #8
 800c10c:	e6e5      	b.n	800beda <_strtod_l+0x5ba>
 800c10e:	f04f 32ff 	mov.w	r2, #4294967295
 800c112:	fa02 f303 	lsl.w	r3, r2, r3
 800c116:	ea03 0a0a 	and.w	sl, r3, sl
 800c11a:	e6ff      	b.n	800bf1c <_strtod_l+0x5fc>
 800c11c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c120:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c124:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c128:	36e2      	adds	r6, #226	; 0xe2
 800c12a:	fa01 f306 	lsl.w	r3, r1, r6
 800c12e:	930a      	str	r3, [sp, #40]	; 0x28
 800c130:	910f      	str	r1, [sp, #60]	; 0x3c
 800c132:	e75d      	b.n	800bff0 <_strtod_l+0x6d0>
 800c134:	2300      	movs	r3, #0
 800c136:	930a      	str	r3, [sp, #40]	; 0x28
 800c138:	2301      	movs	r3, #1
 800c13a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c13c:	e758      	b.n	800bff0 <_strtod_l+0x6d0>
 800c13e:	4632      	mov	r2, r6
 800c140:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c142:	4648      	mov	r0, r9
 800c144:	f001 fe1c 	bl	800dd80 <__lshift>
 800c148:	901c      	str	r0, [sp, #112]	; 0x70
 800c14a:	2800      	cmp	r0, #0
 800c14c:	f47f af7c 	bne.w	800c048 <_strtod_l+0x728>
 800c150:	e604      	b.n	800bd5c <_strtod_l+0x43c>
 800c152:	bf00      	nop
 800c154:	0800e5f8 	.word	0x0800e5f8
 800c158:	fffffc02 	.word	0xfffffc02
 800c15c:	465d      	mov	r5, fp
 800c15e:	f040 8086 	bne.w	800c26e <_strtod_l+0x94e>
 800c162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c164:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c168:	b32a      	cbz	r2, 800c1b6 <_strtod_l+0x896>
 800c16a:	4aaf      	ldr	r2, [pc, #700]	; (800c428 <_strtod_l+0xb08>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d153      	bne.n	800c218 <_strtod_l+0x8f8>
 800c170:	9b04      	ldr	r3, [sp, #16]
 800c172:	4650      	mov	r0, sl
 800c174:	b1d3      	cbz	r3, 800c1ac <_strtod_l+0x88c>
 800c176:	4aad      	ldr	r2, [pc, #692]	; (800c42c <_strtod_l+0xb0c>)
 800c178:	402a      	ands	r2, r5
 800c17a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c17e:	f04f 31ff 	mov.w	r1, #4294967295
 800c182:	d816      	bhi.n	800c1b2 <_strtod_l+0x892>
 800c184:	0d12      	lsrs	r2, r2, #20
 800c186:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c18a:	fa01 f303 	lsl.w	r3, r1, r3
 800c18e:	4298      	cmp	r0, r3
 800c190:	d142      	bne.n	800c218 <_strtod_l+0x8f8>
 800c192:	4ba7      	ldr	r3, [pc, #668]	; (800c430 <_strtod_l+0xb10>)
 800c194:	429d      	cmp	r5, r3
 800c196:	d102      	bne.n	800c19e <_strtod_l+0x87e>
 800c198:	3001      	adds	r0, #1
 800c19a:	f43f addf 	beq.w	800bd5c <_strtod_l+0x43c>
 800c19e:	4ba3      	ldr	r3, [pc, #652]	; (800c42c <_strtod_l+0xb0c>)
 800c1a0:	402b      	ands	r3, r5
 800c1a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c1a6:	f04f 0a00 	mov.w	sl, #0
 800c1aa:	e7a0      	b.n	800c0ee <_strtod_l+0x7ce>
 800c1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b0:	e7ed      	b.n	800c18e <_strtod_l+0x86e>
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	e7eb      	b.n	800c18e <_strtod_l+0x86e>
 800c1b6:	bb7b      	cbnz	r3, 800c218 <_strtod_l+0x8f8>
 800c1b8:	f1ba 0f00 	cmp.w	sl, #0
 800c1bc:	d12c      	bne.n	800c218 <_strtod_l+0x8f8>
 800c1be:	9904      	ldr	r1, [sp, #16]
 800c1c0:	4a9a      	ldr	r2, [pc, #616]	; (800c42c <_strtod_l+0xb0c>)
 800c1c2:	465b      	mov	r3, fp
 800c1c4:	b1f1      	cbz	r1, 800c204 <_strtod_l+0x8e4>
 800c1c6:	ea02 010b 	and.w	r1, r2, fp
 800c1ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c1ce:	dc19      	bgt.n	800c204 <_strtod_l+0x8e4>
 800c1d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c1d4:	f77f ae5b 	ble.w	800be8e <_strtod_l+0x56e>
 800c1d8:	4a96      	ldr	r2, [pc, #600]	; (800c434 <_strtod_l+0xb14>)
 800c1da:	2300      	movs	r3, #0
 800c1dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c1e0:	4650      	mov	r0, sl
 800c1e2:	4659      	mov	r1, fp
 800c1e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c1e8:	f7f4 fa0e 	bl	8000608 <__aeabi_dmul>
 800c1ec:	4682      	mov	sl, r0
 800c1ee:	468b      	mov	fp, r1
 800c1f0:	2900      	cmp	r1, #0
 800c1f2:	f47f adbe 	bne.w	800bd72 <_strtod_l+0x452>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f47f adbb 	bne.w	800bd72 <_strtod_l+0x452>
 800c1fc:	2322      	movs	r3, #34	; 0x22
 800c1fe:	f8c9 3000 	str.w	r3, [r9]
 800c202:	e5b6      	b.n	800bd72 <_strtod_l+0x452>
 800c204:	4013      	ands	r3, r2
 800c206:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c20a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c20e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c212:	f04f 3aff 	mov.w	sl, #4294967295
 800c216:	e76a      	b.n	800c0ee <_strtod_l+0x7ce>
 800c218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c21a:	b193      	cbz	r3, 800c242 <_strtod_l+0x922>
 800c21c:	422b      	tst	r3, r5
 800c21e:	f43f af66 	beq.w	800c0ee <_strtod_l+0x7ce>
 800c222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c224:	9a04      	ldr	r2, [sp, #16]
 800c226:	4650      	mov	r0, sl
 800c228:	4659      	mov	r1, fp
 800c22a:	b173      	cbz	r3, 800c24a <_strtod_l+0x92a>
 800c22c:	f7ff fb59 	bl	800b8e2 <sulp>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c238:	f7f4 f830 	bl	800029c <__adddf3>
 800c23c:	4682      	mov	sl, r0
 800c23e:	468b      	mov	fp, r1
 800c240:	e755      	b.n	800c0ee <_strtod_l+0x7ce>
 800c242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c244:	ea13 0f0a 	tst.w	r3, sl
 800c248:	e7e9      	b.n	800c21e <_strtod_l+0x8fe>
 800c24a:	f7ff fb4a 	bl	800b8e2 <sulp>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c256:	f7f4 f81f 	bl	8000298 <__aeabi_dsub>
 800c25a:	2200      	movs	r2, #0
 800c25c:	2300      	movs	r3, #0
 800c25e:	4682      	mov	sl, r0
 800c260:	468b      	mov	fp, r1
 800c262:	f7f4 fc39 	bl	8000ad8 <__aeabi_dcmpeq>
 800c266:	2800      	cmp	r0, #0
 800c268:	f47f ae11 	bne.w	800be8e <_strtod_l+0x56e>
 800c26c:	e73f      	b.n	800c0ee <_strtod_l+0x7ce>
 800c26e:	4641      	mov	r1, r8
 800c270:	4620      	mov	r0, r4
 800c272:	f001 ff16 	bl	800e0a2 <__ratio>
 800c276:	ec57 6b10 	vmov	r6, r7, d0
 800c27a:	2200      	movs	r2, #0
 800c27c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c280:	ee10 0a10 	vmov	r0, s0
 800c284:	4639      	mov	r1, r7
 800c286:	f7f4 fc3b 	bl	8000b00 <__aeabi_dcmple>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d077      	beq.n	800c37e <_strtod_l+0xa5e>
 800c28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c290:	2b00      	cmp	r3, #0
 800c292:	d04a      	beq.n	800c32a <_strtod_l+0xa0a>
 800c294:	4b68      	ldr	r3, [pc, #416]	; (800c438 <_strtod_l+0xb18>)
 800c296:	2200      	movs	r2, #0
 800c298:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c29c:	4f66      	ldr	r7, [pc, #408]	; (800c438 <_strtod_l+0xb18>)
 800c29e:	2600      	movs	r6, #0
 800c2a0:	4b62      	ldr	r3, [pc, #392]	; (800c42c <_strtod_l+0xb0c>)
 800c2a2:	402b      	ands	r3, r5
 800c2a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c2a8:	4b64      	ldr	r3, [pc, #400]	; (800c43c <_strtod_l+0xb1c>)
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	f040 80ce 	bne.w	800c44c <_strtod_l+0xb2c>
 800c2b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c2b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c2bc:	ec4b ab10 	vmov	d0, sl, fp
 800c2c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c2c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c2c8:	f001 fe26 	bl	800df18 <__ulp>
 800c2cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2d0:	ec53 2b10 	vmov	r2, r3, d0
 800c2d4:	f7f4 f998 	bl	8000608 <__aeabi_dmul>
 800c2d8:	4652      	mov	r2, sl
 800c2da:	465b      	mov	r3, fp
 800c2dc:	f7f3 ffde 	bl	800029c <__adddf3>
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4952      	ldr	r1, [pc, #328]	; (800c42c <_strtod_l+0xb0c>)
 800c2e4:	4a56      	ldr	r2, [pc, #344]	; (800c440 <_strtod_l+0xb20>)
 800c2e6:	4019      	ands	r1, r3
 800c2e8:	4291      	cmp	r1, r2
 800c2ea:	4682      	mov	sl, r0
 800c2ec:	d95b      	bls.n	800c3a6 <_strtod_l+0xa86>
 800c2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d103      	bne.n	800c300 <_strtod_l+0x9e0>
 800c2f8:	9b08      	ldr	r3, [sp, #32]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	f43f ad2e 	beq.w	800bd5c <_strtod_l+0x43c>
 800c300:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c430 <_strtod_l+0xb10>
 800c304:	f04f 3aff 	mov.w	sl, #4294967295
 800c308:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c30a:	4648      	mov	r0, r9
 800c30c:	f001 fb6d 	bl	800d9ea <_Bfree>
 800c310:	9905      	ldr	r1, [sp, #20]
 800c312:	4648      	mov	r0, r9
 800c314:	f001 fb69 	bl	800d9ea <_Bfree>
 800c318:	4641      	mov	r1, r8
 800c31a:	4648      	mov	r0, r9
 800c31c:	f001 fb65 	bl	800d9ea <_Bfree>
 800c320:	4621      	mov	r1, r4
 800c322:	4648      	mov	r0, r9
 800c324:	f001 fb61 	bl	800d9ea <_Bfree>
 800c328:	e619      	b.n	800bf5e <_strtod_l+0x63e>
 800c32a:	f1ba 0f00 	cmp.w	sl, #0
 800c32e:	d11a      	bne.n	800c366 <_strtod_l+0xa46>
 800c330:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c334:	b9eb      	cbnz	r3, 800c372 <_strtod_l+0xa52>
 800c336:	2200      	movs	r2, #0
 800c338:	4b3f      	ldr	r3, [pc, #252]	; (800c438 <_strtod_l+0xb18>)
 800c33a:	4630      	mov	r0, r6
 800c33c:	4639      	mov	r1, r7
 800c33e:	f7f4 fbd5 	bl	8000aec <__aeabi_dcmplt>
 800c342:	b9c8      	cbnz	r0, 800c378 <_strtod_l+0xa58>
 800c344:	4630      	mov	r0, r6
 800c346:	4639      	mov	r1, r7
 800c348:	2200      	movs	r2, #0
 800c34a:	4b3e      	ldr	r3, [pc, #248]	; (800c444 <_strtod_l+0xb24>)
 800c34c:	f7f4 f95c 	bl	8000608 <__aeabi_dmul>
 800c350:	4606      	mov	r6, r0
 800c352:	460f      	mov	r7, r1
 800c354:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c358:	9618      	str	r6, [sp, #96]	; 0x60
 800c35a:	9319      	str	r3, [sp, #100]	; 0x64
 800c35c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c360:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c364:	e79c      	b.n	800c2a0 <_strtod_l+0x980>
 800c366:	f1ba 0f01 	cmp.w	sl, #1
 800c36a:	d102      	bne.n	800c372 <_strtod_l+0xa52>
 800c36c:	2d00      	cmp	r5, #0
 800c36e:	f43f ad8e 	beq.w	800be8e <_strtod_l+0x56e>
 800c372:	2200      	movs	r2, #0
 800c374:	4b34      	ldr	r3, [pc, #208]	; (800c448 <_strtod_l+0xb28>)
 800c376:	e78f      	b.n	800c298 <_strtod_l+0x978>
 800c378:	2600      	movs	r6, #0
 800c37a:	4f32      	ldr	r7, [pc, #200]	; (800c444 <_strtod_l+0xb24>)
 800c37c:	e7ea      	b.n	800c354 <_strtod_l+0xa34>
 800c37e:	4b31      	ldr	r3, [pc, #196]	; (800c444 <_strtod_l+0xb24>)
 800c380:	4630      	mov	r0, r6
 800c382:	4639      	mov	r1, r7
 800c384:	2200      	movs	r2, #0
 800c386:	f7f4 f93f 	bl	8000608 <__aeabi_dmul>
 800c38a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c38c:	4606      	mov	r6, r0
 800c38e:	460f      	mov	r7, r1
 800c390:	b933      	cbnz	r3, 800c3a0 <_strtod_l+0xa80>
 800c392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c396:	9010      	str	r0, [sp, #64]	; 0x40
 800c398:	9311      	str	r3, [sp, #68]	; 0x44
 800c39a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c39e:	e7df      	b.n	800c360 <_strtod_l+0xa40>
 800c3a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c3a4:	e7f9      	b.n	800c39a <_strtod_l+0xa7a>
 800c3a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c3aa:	9b04      	ldr	r3, [sp, #16]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d1ab      	bne.n	800c308 <_strtod_l+0x9e8>
 800c3b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c3b4:	0d1b      	lsrs	r3, r3, #20
 800c3b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3b8:	051b      	lsls	r3, r3, #20
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	465d      	mov	r5, fp
 800c3be:	d1a3      	bne.n	800c308 <_strtod_l+0x9e8>
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f7f4 fbd0 	bl	8000b68 <__aeabi_d2iz>
 800c3c8:	f7f4 f8b4 	bl	8000534 <__aeabi_i2d>
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f7f3 ff60 	bl	8000298 <__aeabi_dsub>
 800c3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3da:	4606      	mov	r6, r0
 800c3dc:	460f      	mov	r7, r1
 800c3de:	b933      	cbnz	r3, 800c3ee <_strtod_l+0xace>
 800c3e0:	f1ba 0f00 	cmp.w	sl, #0
 800c3e4:	d103      	bne.n	800c3ee <_strtod_l+0xace>
 800c3e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c3ea:	2d00      	cmp	r5, #0
 800c3ec:	d06d      	beq.n	800c4ca <_strtod_l+0xbaa>
 800c3ee:	a30a      	add	r3, pc, #40	; (adr r3, 800c418 <_strtod_l+0xaf8>)
 800c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	4639      	mov	r1, r7
 800c3f8:	f7f4 fb78 	bl	8000aec <__aeabi_dcmplt>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	f47f acb8 	bne.w	800bd72 <_strtod_l+0x452>
 800c402:	a307      	add	r3, pc, #28	; (adr r3, 800c420 <_strtod_l+0xb00>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	4630      	mov	r0, r6
 800c40a:	4639      	mov	r1, r7
 800c40c:	f7f4 fb8c 	bl	8000b28 <__aeabi_dcmpgt>
 800c410:	2800      	cmp	r0, #0
 800c412:	f43f af79 	beq.w	800c308 <_strtod_l+0x9e8>
 800c416:	e4ac      	b.n	800bd72 <_strtod_l+0x452>
 800c418:	94a03595 	.word	0x94a03595
 800c41c:	3fdfffff 	.word	0x3fdfffff
 800c420:	35afe535 	.word	0x35afe535
 800c424:	3fe00000 	.word	0x3fe00000
 800c428:	000fffff 	.word	0x000fffff
 800c42c:	7ff00000 	.word	0x7ff00000
 800c430:	7fefffff 	.word	0x7fefffff
 800c434:	39500000 	.word	0x39500000
 800c438:	3ff00000 	.word	0x3ff00000
 800c43c:	7fe00000 	.word	0x7fe00000
 800c440:	7c9fffff 	.word	0x7c9fffff
 800c444:	3fe00000 	.word	0x3fe00000
 800c448:	bff00000 	.word	0xbff00000
 800c44c:	9b04      	ldr	r3, [sp, #16]
 800c44e:	b333      	cbz	r3, 800c49e <_strtod_l+0xb7e>
 800c450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c452:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c456:	d822      	bhi.n	800c49e <_strtod_l+0xb7e>
 800c458:	a327      	add	r3, pc, #156	; (adr r3, 800c4f8 <_strtod_l+0xbd8>)
 800c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45e:	4630      	mov	r0, r6
 800c460:	4639      	mov	r1, r7
 800c462:	f7f4 fb4d 	bl	8000b00 <__aeabi_dcmple>
 800c466:	b1a0      	cbz	r0, 800c492 <_strtod_l+0xb72>
 800c468:	4639      	mov	r1, r7
 800c46a:	4630      	mov	r0, r6
 800c46c:	f7f4 fba4 	bl	8000bb8 <__aeabi_d2uiz>
 800c470:	2800      	cmp	r0, #0
 800c472:	bf08      	it	eq
 800c474:	2001      	moveq	r0, #1
 800c476:	f7f4 f84d 	bl	8000514 <__aeabi_ui2d>
 800c47a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c47c:	4606      	mov	r6, r0
 800c47e:	460f      	mov	r7, r1
 800c480:	bb03      	cbnz	r3, 800c4c4 <_strtod_l+0xba4>
 800c482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c486:	9012      	str	r0, [sp, #72]	; 0x48
 800c488:	9313      	str	r3, [sp, #76]	; 0x4c
 800c48a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c48e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c496:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c49a:	1a9b      	subs	r3, r3, r2
 800c49c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c49e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c4a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c4a6:	f001 fd37 	bl	800df18 <__ulp>
 800c4aa:	4650      	mov	r0, sl
 800c4ac:	ec53 2b10 	vmov	r2, r3, d0
 800c4b0:	4659      	mov	r1, fp
 800c4b2:	f7f4 f8a9 	bl	8000608 <__aeabi_dmul>
 800c4b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c4ba:	f7f3 feef 	bl	800029c <__adddf3>
 800c4be:	4682      	mov	sl, r0
 800c4c0:	468b      	mov	fp, r1
 800c4c2:	e772      	b.n	800c3aa <_strtod_l+0xa8a>
 800c4c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c4c8:	e7df      	b.n	800c48a <_strtod_l+0xb6a>
 800c4ca:	a30d      	add	r3, pc, #52	; (adr r3, 800c500 <_strtod_l+0xbe0>)
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	f7f4 fb0c 	bl	8000aec <__aeabi_dcmplt>
 800c4d4:	e79c      	b.n	800c410 <_strtod_l+0xaf0>
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	930d      	str	r3, [sp, #52]	; 0x34
 800c4da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c4dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4de:	6013      	str	r3, [r2, #0]
 800c4e0:	f7ff ba61 	b.w	800b9a6 <_strtod_l+0x86>
 800c4e4:	2b65      	cmp	r3, #101	; 0x65
 800c4e6:	f04f 0200 	mov.w	r2, #0
 800c4ea:	f43f ab4e 	beq.w	800bb8a <_strtod_l+0x26a>
 800c4ee:	2101      	movs	r1, #1
 800c4f0:	4614      	mov	r4, r2
 800c4f2:	9104      	str	r1, [sp, #16]
 800c4f4:	f7ff bacb 	b.w	800ba8e <_strtod_l+0x16e>
 800c4f8:	ffc00000 	.word	0xffc00000
 800c4fc:	41dfffff 	.word	0x41dfffff
 800c500:	94a03595 	.word	0x94a03595
 800c504:	3fcfffff 	.word	0x3fcfffff

0800c508 <_strtod_r>:
 800c508:	4b05      	ldr	r3, [pc, #20]	; (800c520 <_strtod_r+0x18>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	b410      	push	{r4}
 800c50e:	6a1b      	ldr	r3, [r3, #32]
 800c510:	4c04      	ldr	r4, [pc, #16]	; (800c524 <_strtod_r+0x1c>)
 800c512:	2b00      	cmp	r3, #0
 800c514:	bf08      	it	eq
 800c516:	4623      	moveq	r3, r4
 800c518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c51c:	f7ff ba00 	b.w	800b920 <_strtod_l>
 800c520:	20000194 	.word	0x20000194
 800c524:	200001f8 	.word	0x200001f8

0800c528 <_strtol_l.isra.0>:
 800c528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c52c:	4680      	mov	r8, r0
 800c52e:	4689      	mov	r9, r1
 800c530:	4692      	mov	sl, r2
 800c532:	461e      	mov	r6, r3
 800c534:	460f      	mov	r7, r1
 800c536:	463d      	mov	r5, r7
 800c538:	9808      	ldr	r0, [sp, #32]
 800c53a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c53e:	f001 f9ed 	bl	800d91c <__locale_ctype_ptr_l>
 800c542:	4420      	add	r0, r4
 800c544:	7843      	ldrb	r3, [r0, #1]
 800c546:	f013 0308 	ands.w	r3, r3, #8
 800c54a:	d132      	bne.n	800c5b2 <_strtol_l.isra.0+0x8a>
 800c54c:	2c2d      	cmp	r4, #45	; 0x2d
 800c54e:	d132      	bne.n	800c5b6 <_strtol_l.isra.0+0x8e>
 800c550:	787c      	ldrb	r4, [r7, #1]
 800c552:	1cbd      	adds	r5, r7, #2
 800c554:	2201      	movs	r2, #1
 800c556:	2e00      	cmp	r6, #0
 800c558:	d05d      	beq.n	800c616 <_strtol_l.isra.0+0xee>
 800c55a:	2e10      	cmp	r6, #16
 800c55c:	d109      	bne.n	800c572 <_strtol_l.isra.0+0x4a>
 800c55e:	2c30      	cmp	r4, #48	; 0x30
 800c560:	d107      	bne.n	800c572 <_strtol_l.isra.0+0x4a>
 800c562:	782b      	ldrb	r3, [r5, #0]
 800c564:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c568:	2b58      	cmp	r3, #88	; 0x58
 800c56a:	d14f      	bne.n	800c60c <_strtol_l.isra.0+0xe4>
 800c56c:	786c      	ldrb	r4, [r5, #1]
 800c56e:	2610      	movs	r6, #16
 800c570:	3502      	adds	r5, #2
 800c572:	2a00      	cmp	r2, #0
 800c574:	bf14      	ite	ne
 800c576:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c57a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c57e:	2700      	movs	r7, #0
 800c580:	fbb1 fcf6 	udiv	ip, r1, r6
 800c584:	4638      	mov	r0, r7
 800c586:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c58a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c58e:	2b09      	cmp	r3, #9
 800c590:	d817      	bhi.n	800c5c2 <_strtol_l.isra.0+0x9a>
 800c592:	461c      	mov	r4, r3
 800c594:	42a6      	cmp	r6, r4
 800c596:	dd23      	ble.n	800c5e0 <_strtol_l.isra.0+0xb8>
 800c598:	1c7b      	adds	r3, r7, #1
 800c59a:	d007      	beq.n	800c5ac <_strtol_l.isra.0+0x84>
 800c59c:	4584      	cmp	ip, r0
 800c59e:	d31c      	bcc.n	800c5da <_strtol_l.isra.0+0xb2>
 800c5a0:	d101      	bne.n	800c5a6 <_strtol_l.isra.0+0x7e>
 800c5a2:	45a6      	cmp	lr, r4
 800c5a4:	db19      	blt.n	800c5da <_strtol_l.isra.0+0xb2>
 800c5a6:	fb00 4006 	mla	r0, r0, r6, r4
 800c5aa:	2701      	movs	r7, #1
 800c5ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5b0:	e7eb      	b.n	800c58a <_strtol_l.isra.0+0x62>
 800c5b2:	462f      	mov	r7, r5
 800c5b4:	e7bf      	b.n	800c536 <_strtol_l.isra.0+0xe>
 800c5b6:	2c2b      	cmp	r4, #43	; 0x2b
 800c5b8:	bf04      	itt	eq
 800c5ba:	1cbd      	addeq	r5, r7, #2
 800c5bc:	787c      	ldrbeq	r4, [r7, #1]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	e7c9      	b.n	800c556 <_strtol_l.isra.0+0x2e>
 800c5c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c5c6:	2b19      	cmp	r3, #25
 800c5c8:	d801      	bhi.n	800c5ce <_strtol_l.isra.0+0xa6>
 800c5ca:	3c37      	subs	r4, #55	; 0x37
 800c5cc:	e7e2      	b.n	800c594 <_strtol_l.isra.0+0x6c>
 800c5ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c5d2:	2b19      	cmp	r3, #25
 800c5d4:	d804      	bhi.n	800c5e0 <_strtol_l.isra.0+0xb8>
 800c5d6:	3c57      	subs	r4, #87	; 0x57
 800c5d8:	e7dc      	b.n	800c594 <_strtol_l.isra.0+0x6c>
 800c5da:	f04f 37ff 	mov.w	r7, #4294967295
 800c5de:	e7e5      	b.n	800c5ac <_strtol_l.isra.0+0x84>
 800c5e0:	1c7b      	adds	r3, r7, #1
 800c5e2:	d108      	bne.n	800c5f6 <_strtol_l.isra.0+0xce>
 800c5e4:	2322      	movs	r3, #34	; 0x22
 800c5e6:	f8c8 3000 	str.w	r3, [r8]
 800c5ea:	4608      	mov	r0, r1
 800c5ec:	f1ba 0f00 	cmp.w	sl, #0
 800c5f0:	d107      	bne.n	800c602 <_strtol_l.isra.0+0xda>
 800c5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f6:	b102      	cbz	r2, 800c5fa <_strtol_l.isra.0+0xd2>
 800c5f8:	4240      	negs	r0, r0
 800c5fa:	f1ba 0f00 	cmp.w	sl, #0
 800c5fe:	d0f8      	beq.n	800c5f2 <_strtol_l.isra.0+0xca>
 800c600:	b10f      	cbz	r7, 800c606 <_strtol_l.isra.0+0xde>
 800c602:	f105 39ff 	add.w	r9, r5, #4294967295
 800c606:	f8ca 9000 	str.w	r9, [sl]
 800c60a:	e7f2      	b.n	800c5f2 <_strtol_l.isra.0+0xca>
 800c60c:	2430      	movs	r4, #48	; 0x30
 800c60e:	2e00      	cmp	r6, #0
 800c610:	d1af      	bne.n	800c572 <_strtol_l.isra.0+0x4a>
 800c612:	2608      	movs	r6, #8
 800c614:	e7ad      	b.n	800c572 <_strtol_l.isra.0+0x4a>
 800c616:	2c30      	cmp	r4, #48	; 0x30
 800c618:	d0a3      	beq.n	800c562 <_strtol_l.isra.0+0x3a>
 800c61a:	260a      	movs	r6, #10
 800c61c:	e7a9      	b.n	800c572 <_strtol_l.isra.0+0x4a>
	...

0800c620 <_strtol_r>:
 800c620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c622:	4c06      	ldr	r4, [pc, #24]	; (800c63c <_strtol_r+0x1c>)
 800c624:	4d06      	ldr	r5, [pc, #24]	; (800c640 <_strtol_r+0x20>)
 800c626:	6824      	ldr	r4, [r4, #0]
 800c628:	6a24      	ldr	r4, [r4, #32]
 800c62a:	2c00      	cmp	r4, #0
 800c62c:	bf08      	it	eq
 800c62e:	462c      	moveq	r4, r5
 800c630:	9400      	str	r4, [sp, #0]
 800c632:	f7ff ff79 	bl	800c528 <_strtol_l.isra.0>
 800c636:	b003      	add	sp, #12
 800c638:	bd30      	pop	{r4, r5, pc}
 800c63a:	bf00      	nop
 800c63c:	20000194 	.word	0x20000194
 800c640:	200001f8 	.word	0x200001f8

0800c644 <quorem>:
 800c644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c648:	6903      	ldr	r3, [r0, #16]
 800c64a:	690c      	ldr	r4, [r1, #16]
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	4680      	mov	r8, r0
 800c650:	f2c0 8082 	blt.w	800c758 <quorem+0x114>
 800c654:	3c01      	subs	r4, #1
 800c656:	f101 0714 	add.w	r7, r1, #20
 800c65a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c65e:	f100 0614 	add.w	r6, r0, #20
 800c662:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c666:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c66a:	eb06 030c 	add.w	r3, r6, ip
 800c66e:	3501      	adds	r5, #1
 800c670:	eb07 090c 	add.w	r9, r7, ip
 800c674:	9301      	str	r3, [sp, #4]
 800c676:	fbb0 f5f5 	udiv	r5, r0, r5
 800c67a:	b395      	cbz	r5, 800c6e2 <quorem+0x9e>
 800c67c:	f04f 0a00 	mov.w	sl, #0
 800c680:	4638      	mov	r0, r7
 800c682:	46b6      	mov	lr, r6
 800c684:	46d3      	mov	fp, sl
 800c686:	f850 2b04 	ldr.w	r2, [r0], #4
 800c68a:	b293      	uxth	r3, r2
 800c68c:	fb05 a303 	mla	r3, r5, r3, sl
 800c690:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c694:	b29b      	uxth	r3, r3
 800c696:	ebab 0303 	sub.w	r3, fp, r3
 800c69a:	0c12      	lsrs	r2, r2, #16
 800c69c:	f8de b000 	ldr.w	fp, [lr]
 800c6a0:	fb05 a202 	mla	r2, r5, r2, sl
 800c6a4:	fa13 f38b 	uxtah	r3, r3, fp
 800c6a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c6ac:	fa1f fb82 	uxth.w	fp, r2
 800c6b0:	f8de 2000 	ldr.w	r2, [lr]
 800c6b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c6b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6c2:	4581      	cmp	r9, r0
 800c6c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c6c8:	f84e 3b04 	str.w	r3, [lr], #4
 800c6cc:	d2db      	bcs.n	800c686 <quorem+0x42>
 800c6ce:	f856 300c 	ldr.w	r3, [r6, ip]
 800c6d2:	b933      	cbnz	r3, 800c6e2 <quorem+0x9e>
 800c6d4:	9b01      	ldr	r3, [sp, #4]
 800c6d6:	3b04      	subs	r3, #4
 800c6d8:	429e      	cmp	r6, r3
 800c6da:	461a      	mov	r2, r3
 800c6dc:	d330      	bcc.n	800c740 <quorem+0xfc>
 800c6de:	f8c8 4010 	str.w	r4, [r8, #16]
 800c6e2:	4640      	mov	r0, r8
 800c6e4:	f001 fba0 	bl	800de28 <__mcmp>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	db25      	blt.n	800c738 <quorem+0xf4>
 800c6ec:	3501      	adds	r5, #1
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f04f 0c00 	mov.w	ip, #0
 800c6f4:	f857 2b04 	ldr.w	r2, [r7], #4
 800c6f8:	f8d0 e000 	ldr.w	lr, [r0]
 800c6fc:	b293      	uxth	r3, r2
 800c6fe:	ebac 0303 	sub.w	r3, ip, r3
 800c702:	0c12      	lsrs	r2, r2, #16
 800c704:	fa13 f38e 	uxtah	r3, r3, lr
 800c708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c70c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c710:	b29b      	uxth	r3, r3
 800c712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c716:	45b9      	cmp	r9, r7
 800c718:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c71c:	f840 3b04 	str.w	r3, [r0], #4
 800c720:	d2e8      	bcs.n	800c6f4 <quorem+0xb0>
 800c722:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c726:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c72a:	b92a      	cbnz	r2, 800c738 <quorem+0xf4>
 800c72c:	3b04      	subs	r3, #4
 800c72e:	429e      	cmp	r6, r3
 800c730:	461a      	mov	r2, r3
 800c732:	d30b      	bcc.n	800c74c <quorem+0x108>
 800c734:	f8c8 4010 	str.w	r4, [r8, #16]
 800c738:	4628      	mov	r0, r5
 800c73a:	b003      	add	sp, #12
 800c73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c740:	6812      	ldr	r2, [r2, #0]
 800c742:	3b04      	subs	r3, #4
 800c744:	2a00      	cmp	r2, #0
 800c746:	d1ca      	bne.n	800c6de <quorem+0x9a>
 800c748:	3c01      	subs	r4, #1
 800c74a:	e7c5      	b.n	800c6d8 <quorem+0x94>
 800c74c:	6812      	ldr	r2, [r2, #0]
 800c74e:	3b04      	subs	r3, #4
 800c750:	2a00      	cmp	r2, #0
 800c752:	d1ef      	bne.n	800c734 <quorem+0xf0>
 800c754:	3c01      	subs	r4, #1
 800c756:	e7ea      	b.n	800c72e <quorem+0xea>
 800c758:	2000      	movs	r0, #0
 800c75a:	e7ee      	b.n	800c73a <quorem+0xf6>
 800c75c:	0000      	movs	r0, r0
	...

0800c760 <_dtoa_r>:
 800c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	ec57 6b10 	vmov	r6, r7, d0
 800c768:	b097      	sub	sp, #92	; 0x5c
 800c76a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c76c:	9106      	str	r1, [sp, #24]
 800c76e:	4604      	mov	r4, r0
 800c770:	920b      	str	r2, [sp, #44]	; 0x2c
 800c772:	9312      	str	r3, [sp, #72]	; 0x48
 800c774:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c778:	e9cd 6700 	strd	r6, r7, [sp]
 800c77c:	b93d      	cbnz	r5, 800c78e <_dtoa_r+0x2e>
 800c77e:	2010      	movs	r0, #16
 800c780:	f7fe f966 	bl	800aa50 <malloc>
 800c784:	6260      	str	r0, [r4, #36]	; 0x24
 800c786:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c78a:	6005      	str	r5, [r0, #0]
 800c78c:	60c5      	str	r5, [r0, #12]
 800c78e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c790:	6819      	ldr	r1, [r3, #0]
 800c792:	b151      	cbz	r1, 800c7aa <_dtoa_r+0x4a>
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	604a      	str	r2, [r1, #4]
 800c798:	2301      	movs	r3, #1
 800c79a:	4093      	lsls	r3, r2
 800c79c:	608b      	str	r3, [r1, #8]
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f001 f923 	bl	800d9ea <_Bfree>
 800c7a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	601a      	str	r2, [r3, #0]
 800c7aa:	1e3b      	subs	r3, r7, #0
 800c7ac:	bfbb      	ittet	lt
 800c7ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7b2:	9301      	strlt	r3, [sp, #4]
 800c7b4:	2300      	movge	r3, #0
 800c7b6:	2201      	movlt	r2, #1
 800c7b8:	bfac      	ite	ge
 800c7ba:	f8c8 3000 	strge.w	r3, [r8]
 800c7be:	f8c8 2000 	strlt.w	r2, [r8]
 800c7c2:	4baf      	ldr	r3, [pc, #700]	; (800ca80 <_dtoa_r+0x320>)
 800c7c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c7c8:	ea33 0308 	bics.w	r3, r3, r8
 800c7cc:	d114      	bne.n	800c7f8 <_dtoa_r+0x98>
 800c7ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7d4:	6013      	str	r3, [r2, #0]
 800c7d6:	9b00      	ldr	r3, [sp, #0]
 800c7d8:	b923      	cbnz	r3, 800c7e4 <_dtoa_r+0x84>
 800c7da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	f000 8542 	beq.w	800d268 <_dtoa_r+0xb08>
 800c7e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ca94 <_dtoa_r+0x334>
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	f000 8544 	beq.w	800d278 <_dtoa_r+0xb18>
 800c7f0:	f10b 0303 	add.w	r3, fp, #3
 800c7f4:	f000 bd3e 	b.w	800d274 <_dtoa_r+0xb14>
 800c7f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	2300      	movs	r3, #0
 800c800:	4630      	mov	r0, r6
 800c802:	4639      	mov	r1, r7
 800c804:	f7f4 f968 	bl	8000ad8 <__aeabi_dcmpeq>
 800c808:	4681      	mov	r9, r0
 800c80a:	b168      	cbz	r0, 800c828 <_dtoa_r+0xc8>
 800c80c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c80e:	2301      	movs	r3, #1
 800c810:	6013      	str	r3, [r2, #0]
 800c812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 8524 	beq.w	800d262 <_dtoa_r+0xb02>
 800c81a:	4b9a      	ldr	r3, [pc, #616]	; (800ca84 <_dtoa_r+0x324>)
 800c81c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c81e:	f103 3bff 	add.w	fp, r3, #4294967295
 800c822:	6013      	str	r3, [r2, #0]
 800c824:	f000 bd28 	b.w	800d278 <_dtoa_r+0xb18>
 800c828:	aa14      	add	r2, sp, #80	; 0x50
 800c82a:	a915      	add	r1, sp, #84	; 0x54
 800c82c:	ec47 6b10 	vmov	d0, r6, r7
 800c830:	4620      	mov	r0, r4
 800c832:	f001 fbe7 	bl	800e004 <__d2b>
 800c836:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c83a:	9004      	str	r0, [sp, #16]
 800c83c:	2d00      	cmp	r5, #0
 800c83e:	d07c      	beq.n	800c93a <_dtoa_r+0x1da>
 800c840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c844:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c848:	46b2      	mov	sl, r6
 800c84a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c84e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c852:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c856:	2200      	movs	r2, #0
 800c858:	4b8b      	ldr	r3, [pc, #556]	; (800ca88 <_dtoa_r+0x328>)
 800c85a:	4650      	mov	r0, sl
 800c85c:	4659      	mov	r1, fp
 800c85e:	f7f3 fd1b 	bl	8000298 <__aeabi_dsub>
 800c862:	a381      	add	r3, pc, #516	; (adr r3, 800ca68 <_dtoa_r+0x308>)
 800c864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c868:	f7f3 fece 	bl	8000608 <__aeabi_dmul>
 800c86c:	a380      	add	r3, pc, #512	; (adr r3, 800ca70 <_dtoa_r+0x310>)
 800c86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c872:	f7f3 fd13 	bl	800029c <__adddf3>
 800c876:	4606      	mov	r6, r0
 800c878:	4628      	mov	r0, r5
 800c87a:	460f      	mov	r7, r1
 800c87c:	f7f3 fe5a 	bl	8000534 <__aeabi_i2d>
 800c880:	a37d      	add	r3, pc, #500	; (adr r3, 800ca78 <_dtoa_r+0x318>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f7f3 febf 	bl	8000608 <__aeabi_dmul>
 800c88a:	4602      	mov	r2, r0
 800c88c:	460b      	mov	r3, r1
 800c88e:	4630      	mov	r0, r6
 800c890:	4639      	mov	r1, r7
 800c892:	f7f3 fd03 	bl	800029c <__adddf3>
 800c896:	4606      	mov	r6, r0
 800c898:	460f      	mov	r7, r1
 800c89a:	f7f4 f965 	bl	8000b68 <__aeabi_d2iz>
 800c89e:	2200      	movs	r2, #0
 800c8a0:	4682      	mov	sl, r0
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	4639      	mov	r1, r7
 800c8a8:	f7f4 f920 	bl	8000aec <__aeabi_dcmplt>
 800c8ac:	b148      	cbz	r0, 800c8c2 <_dtoa_r+0x162>
 800c8ae:	4650      	mov	r0, sl
 800c8b0:	f7f3 fe40 	bl	8000534 <__aeabi_i2d>
 800c8b4:	4632      	mov	r2, r6
 800c8b6:	463b      	mov	r3, r7
 800c8b8:	f7f4 f90e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8bc:	b908      	cbnz	r0, 800c8c2 <_dtoa_r+0x162>
 800c8be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8c2:	f1ba 0f16 	cmp.w	sl, #22
 800c8c6:	d859      	bhi.n	800c97c <_dtoa_r+0x21c>
 800c8c8:	4970      	ldr	r1, [pc, #448]	; (800ca8c <_dtoa_r+0x32c>)
 800c8ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c8ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8d6:	f7f4 f927 	bl	8000b28 <__aeabi_dcmpgt>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d050      	beq.n	800c980 <_dtoa_r+0x220>
 800c8de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8e8:	1b5d      	subs	r5, r3, r5
 800c8ea:	f1b5 0801 	subs.w	r8, r5, #1
 800c8ee:	bf49      	itett	mi
 800c8f0:	f1c5 0301 	rsbmi	r3, r5, #1
 800c8f4:	2300      	movpl	r3, #0
 800c8f6:	9305      	strmi	r3, [sp, #20]
 800c8f8:	f04f 0800 	movmi.w	r8, #0
 800c8fc:	bf58      	it	pl
 800c8fe:	9305      	strpl	r3, [sp, #20]
 800c900:	f1ba 0f00 	cmp.w	sl, #0
 800c904:	db3e      	blt.n	800c984 <_dtoa_r+0x224>
 800c906:	2300      	movs	r3, #0
 800c908:	44d0      	add	r8, sl
 800c90a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c90e:	9307      	str	r3, [sp, #28]
 800c910:	9b06      	ldr	r3, [sp, #24]
 800c912:	2b09      	cmp	r3, #9
 800c914:	f200 8090 	bhi.w	800ca38 <_dtoa_r+0x2d8>
 800c918:	2b05      	cmp	r3, #5
 800c91a:	bfc4      	itt	gt
 800c91c:	3b04      	subgt	r3, #4
 800c91e:	9306      	strgt	r3, [sp, #24]
 800c920:	9b06      	ldr	r3, [sp, #24]
 800c922:	f1a3 0302 	sub.w	r3, r3, #2
 800c926:	bfcc      	ite	gt
 800c928:	2500      	movgt	r5, #0
 800c92a:	2501      	movle	r5, #1
 800c92c:	2b03      	cmp	r3, #3
 800c92e:	f200 808f 	bhi.w	800ca50 <_dtoa_r+0x2f0>
 800c932:	e8df f003 	tbb	[pc, r3]
 800c936:	7f7d      	.short	0x7f7d
 800c938:	7131      	.short	0x7131
 800c93a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c93e:	441d      	add	r5, r3
 800c940:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c944:	2820      	cmp	r0, #32
 800c946:	dd13      	ble.n	800c970 <_dtoa_r+0x210>
 800c948:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c94c:	9b00      	ldr	r3, [sp, #0]
 800c94e:	fa08 f800 	lsl.w	r8, r8, r0
 800c952:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c956:	fa23 f000 	lsr.w	r0, r3, r0
 800c95a:	ea48 0000 	orr.w	r0, r8, r0
 800c95e:	f7f3 fdd9 	bl	8000514 <__aeabi_ui2d>
 800c962:	2301      	movs	r3, #1
 800c964:	4682      	mov	sl, r0
 800c966:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c96a:	3d01      	subs	r5, #1
 800c96c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c96e:	e772      	b.n	800c856 <_dtoa_r+0xf6>
 800c970:	9b00      	ldr	r3, [sp, #0]
 800c972:	f1c0 0020 	rsb	r0, r0, #32
 800c976:	fa03 f000 	lsl.w	r0, r3, r0
 800c97a:	e7f0      	b.n	800c95e <_dtoa_r+0x1fe>
 800c97c:	2301      	movs	r3, #1
 800c97e:	e7b1      	b.n	800c8e4 <_dtoa_r+0x184>
 800c980:	900f      	str	r0, [sp, #60]	; 0x3c
 800c982:	e7b0      	b.n	800c8e6 <_dtoa_r+0x186>
 800c984:	9b05      	ldr	r3, [sp, #20]
 800c986:	eba3 030a 	sub.w	r3, r3, sl
 800c98a:	9305      	str	r3, [sp, #20]
 800c98c:	f1ca 0300 	rsb	r3, sl, #0
 800c990:	9307      	str	r3, [sp, #28]
 800c992:	2300      	movs	r3, #0
 800c994:	930e      	str	r3, [sp, #56]	; 0x38
 800c996:	e7bb      	b.n	800c910 <_dtoa_r+0x1b0>
 800c998:	2301      	movs	r3, #1
 800c99a:	930a      	str	r3, [sp, #40]	; 0x28
 800c99c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	dd59      	ble.n	800ca56 <_dtoa_r+0x2f6>
 800c9a2:	9302      	str	r3, [sp, #8]
 800c9a4:	4699      	mov	r9, r3
 800c9a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	6072      	str	r2, [r6, #4]
 800c9ac:	2204      	movs	r2, #4
 800c9ae:	f102 0014 	add.w	r0, r2, #20
 800c9b2:	4298      	cmp	r0, r3
 800c9b4:	6871      	ldr	r1, [r6, #4]
 800c9b6:	d953      	bls.n	800ca60 <_dtoa_r+0x300>
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f000 ffe2 	bl	800d982 <_Balloc>
 800c9be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9c0:	6030      	str	r0, [r6, #0]
 800c9c2:	f1b9 0f0e 	cmp.w	r9, #14
 800c9c6:	f8d3 b000 	ldr.w	fp, [r3]
 800c9ca:	f200 80e6 	bhi.w	800cb9a <_dtoa_r+0x43a>
 800c9ce:	2d00      	cmp	r5, #0
 800c9d0:	f000 80e3 	beq.w	800cb9a <_dtoa_r+0x43a>
 800c9d4:	ed9d 7b00 	vldr	d7, [sp]
 800c9d8:	f1ba 0f00 	cmp.w	sl, #0
 800c9dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c9e0:	dd74      	ble.n	800cacc <_dtoa_r+0x36c>
 800c9e2:	4a2a      	ldr	r2, [pc, #168]	; (800ca8c <_dtoa_r+0x32c>)
 800c9e4:	f00a 030f 	and.w	r3, sl, #15
 800c9e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9ec:	ed93 7b00 	vldr	d7, [r3]
 800c9f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c9f4:	06f0      	lsls	r0, r6, #27
 800c9f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c9fa:	d565      	bpl.n	800cac8 <_dtoa_r+0x368>
 800c9fc:	4b24      	ldr	r3, [pc, #144]	; (800ca90 <_dtoa_r+0x330>)
 800c9fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca06:	f7f3 ff29 	bl	800085c <__aeabi_ddiv>
 800ca0a:	e9cd 0100 	strd	r0, r1, [sp]
 800ca0e:	f006 060f 	and.w	r6, r6, #15
 800ca12:	2503      	movs	r5, #3
 800ca14:	4f1e      	ldr	r7, [pc, #120]	; (800ca90 <_dtoa_r+0x330>)
 800ca16:	e04c      	b.n	800cab2 <_dtoa_r+0x352>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca1e:	4453      	add	r3, sl
 800ca20:	f103 0901 	add.w	r9, r3, #1
 800ca24:	9302      	str	r3, [sp, #8]
 800ca26:	464b      	mov	r3, r9
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	bfb8      	it	lt
 800ca2c:	2301      	movlt	r3, #1
 800ca2e:	e7ba      	b.n	800c9a6 <_dtoa_r+0x246>
 800ca30:	2300      	movs	r3, #0
 800ca32:	e7b2      	b.n	800c99a <_dtoa_r+0x23a>
 800ca34:	2300      	movs	r3, #0
 800ca36:	e7f0      	b.n	800ca1a <_dtoa_r+0x2ba>
 800ca38:	2501      	movs	r5, #1
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	9306      	str	r3, [sp, #24]
 800ca3e:	950a      	str	r5, [sp, #40]	; 0x28
 800ca40:	f04f 33ff 	mov.w	r3, #4294967295
 800ca44:	9302      	str	r3, [sp, #8]
 800ca46:	4699      	mov	r9, r3
 800ca48:	2200      	movs	r2, #0
 800ca4a:	2312      	movs	r3, #18
 800ca4c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca4e:	e7aa      	b.n	800c9a6 <_dtoa_r+0x246>
 800ca50:	2301      	movs	r3, #1
 800ca52:	930a      	str	r3, [sp, #40]	; 0x28
 800ca54:	e7f4      	b.n	800ca40 <_dtoa_r+0x2e0>
 800ca56:	2301      	movs	r3, #1
 800ca58:	9302      	str	r3, [sp, #8]
 800ca5a:	4699      	mov	r9, r3
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	e7f5      	b.n	800ca4c <_dtoa_r+0x2ec>
 800ca60:	3101      	adds	r1, #1
 800ca62:	6071      	str	r1, [r6, #4]
 800ca64:	0052      	lsls	r2, r2, #1
 800ca66:	e7a2      	b.n	800c9ae <_dtoa_r+0x24e>
 800ca68:	636f4361 	.word	0x636f4361
 800ca6c:	3fd287a7 	.word	0x3fd287a7
 800ca70:	8b60c8b3 	.word	0x8b60c8b3
 800ca74:	3fc68a28 	.word	0x3fc68a28
 800ca78:	509f79fb 	.word	0x509f79fb
 800ca7c:	3fd34413 	.word	0x3fd34413
 800ca80:	7ff00000 	.word	0x7ff00000
 800ca84:	0800e5a1 	.word	0x0800e5a1
 800ca88:	3ff80000 	.word	0x3ff80000
 800ca8c:	0800e6c8 	.word	0x0800e6c8
 800ca90:	0800e6a0 	.word	0x0800e6a0
 800ca94:	0800e629 	.word	0x0800e629
 800ca98:	07f1      	lsls	r1, r6, #31
 800ca9a:	d508      	bpl.n	800caae <_dtoa_r+0x34e>
 800ca9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800caa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caa4:	f7f3 fdb0 	bl	8000608 <__aeabi_dmul>
 800caa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800caac:	3501      	adds	r5, #1
 800caae:	1076      	asrs	r6, r6, #1
 800cab0:	3708      	adds	r7, #8
 800cab2:	2e00      	cmp	r6, #0
 800cab4:	d1f0      	bne.n	800ca98 <_dtoa_r+0x338>
 800cab6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800caba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cabe:	f7f3 fecd 	bl	800085c <__aeabi_ddiv>
 800cac2:	e9cd 0100 	strd	r0, r1, [sp]
 800cac6:	e01a      	b.n	800cafe <_dtoa_r+0x39e>
 800cac8:	2502      	movs	r5, #2
 800caca:	e7a3      	b.n	800ca14 <_dtoa_r+0x2b4>
 800cacc:	f000 80a0 	beq.w	800cc10 <_dtoa_r+0x4b0>
 800cad0:	f1ca 0600 	rsb	r6, sl, #0
 800cad4:	4b9f      	ldr	r3, [pc, #636]	; (800cd54 <_dtoa_r+0x5f4>)
 800cad6:	4fa0      	ldr	r7, [pc, #640]	; (800cd58 <_dtoa_r+0x5f8>)
 800cad8:	f006 020f 	and.w	r2, r6, #15
 800cadc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cae8:	f7f3 fd8e 	bl	8000608 <__aeabi_dmul>
 800caec:	e9cd 0100 	strd	r0, r1, [sp]
 800caf0:	1136      	asrs	r6, r6, #4
 800caf2:	2300      	movs	r3, #0
 800caf4:	2502      	movs	r5, #2
 800caf6:	2e00      	cmp	r6, #0
 800caf8:	d17f      	bne.n	800cbfa <_dtoa_r+0x49a>
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1e1      	bne.n	800cac2 <_dtoa_r+0x362>
 800cafe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f000 8087 	beq.w	800cc14 <_dtoa_r+0x4b4>
 800cb06:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	4b93      	ldr	r3, [pc, #588]	; (800cd5c <_dtoa_r+0x5fc>)
 800cb0e:	4630      	mov	r0, r6
 800cb10:	4639      	mov	r1, r7
 800cb12:	f7f3 ffeb 	bl	8000aec <__aeabi_dcmplt>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d07c      	beq.n	800cc14 <_dtoa_r+0x4b4>
 800cb1a:	f1b9 0f00 	cmp.w	r9, #0
 800cb1e:	d079      	beq.n	800cc14 <_dtoa_r+0x4b4>
 800cb20:	9b02      	ldr	r3, [sp, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	dd35      	ble.n	800cb92 <_dtoa_r+0x432>
 800cb26:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cb2a:	9308      	str	r3, [sp, #32]
 800cb2c:	4639      	mov	r1, r7
 800cb2e:	2200      	movs	r2, #0
 800cb30:	4b8b      	ldr	r3, [pc, #556]	; (800cd60 <_dtoa_r+0x600>)
 800cb32:	4630      	mov	r0, r6
 800cb34:	f7f3 fd68 	bl	8000608 <__aeabi_dmul>
 800cb38:	e9cd 0100 	strd	r0, r1, [sp]
 800cb3c:	9f02      	ldr	r7, [sp, #8]
 800cb3e:	3501      	adds	r5, #1
 800cb40:	4628      	mov	r0, r5
 800cb42:	f7f3 fcf7 	bl	8000534 <__aeabi_i2d>
 800cb46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb4a:	f7f3 fd5d 	bl	8000608 <__aeabi_dmul>
 800cb4e:	2200      	movs	r2, #0
 800cb50:	4b84      	ldr	r3, [pc, #528]	; (800cd64 <_dtoa_r+0x604>)
 800cb52:	f7f3 fba3 	bl	800029c <__adddf3>
 800cb56:	4605      	mov	r5, r0
 800cb58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cb5c:	2f00      	cmp	r7, #0
 800cb5e:	d15d      	bne.n	800cc1c <_dtoa_r+0x4bc>
 800cb60:	2200      	movs	r2, #0
 800cb62:	4b81      	ldr	r3, [pc, #516]	; (800cd68 <_dtoa_r+0x608>)
 800cb64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb68:	f7f3 fb96 	bl	8000298 <__aeabi_dsub>
 800cb6c:	462a      	mov	r2, r5
 800cb6e:	4633      	mov	r3, r6
 800cb70:	e9cd 0100 	strd	r0, r1, [sp]
 800cb74:	f7f3 ffd8 	bl	8000b28 <__aeabi_dcmpgt>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	f040 8288 	bne.w	800d08e <_dtoa_r+0x92e>
 800cb7e:	462a      	mov	r2, r5
 800cb80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cb84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb88:	f7f3 ffb0 	bl	8000aec <__aeabi_dcmplt>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	f040 827c 	bne.w	800d08a <_dtoa_r+0x92a>
 800cb92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cb96:	e9cd 2300 	strd	r2, r3, [sp]
 800cb9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f2c0 8150 	blt.w	800ce42 <_dtoa_r+0x6e2>
 800cba2:	f1ba 0f0e 	cmp.w	sl, #14
 800cba6:	f300 814c 	bgt.w	800ce42 <_dtoa_r+0x6e2>
 800cbaa:	4b6a      	ldr	r3, [pc, #424]	; (800cd54 <_dtoa_r+0x5f4>)
 800cbac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cbb0:	ed93 7b00 	vldr	d7, [r3]
 800cbb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbbc:	f280 80d8 	bge.w	800cd70 <_dtoa_r+0x610>
 800cbc0:	f1b9 0f00 	cmp.w	r9, #0
 800cbc4:	f300 80d4 	bgt.w	800cd70 <_dtoa_r+0x610>
 800cbc8:	f040 825e 	bne.w	800d088 <_dtoa_r+0x928>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4b66      	ldr	r3, [pc, #408]	; (800cd68 <_dtoa_r+0x608>)
 800cbd0:	ec51 0b17 	vmov	r0, r1, d7
 800cbd4:	f7f3 fd18 	bl	8000608 <__aeabi_dmul>
 800cbd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbdc:	f7f3 ff9a 	bl	8000b14 <__aeabi_dcmpge>
 800cbe0:	464f      	mov	r7, r9
 800cbe2:	464e      	mov	r6, r9
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	f040 8234 	bne.w	800d052 <_dtoa_r+0x8f2>
 800cbea:	2331      	movs	r3, #49	; 0x31
 800cbec:	f10b 0501 	add.w	r5, fp, #1
 800cbf0:	f88b 3000 	strb.w	r3, [fp]
 800cbf4:	f10a 0a01 	add.w	sl, sl, #1
 800cbf8:	e22f      	b.n	800d05a <_dtoa_r+0x8fa>
 800cbfa:	07f2      	lsls	r2, r6, #31
 800cbfc:	d505      	bpl.n	800cc0a <_dtoa_r+0x4aa>
 800cbfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc02:	f7f3 fd01 	bl	8000608 <__aeabi_dmul>
 800cc06:	3501      	adds	r5, #1
 800cc08:	2301      	movs	r3, #1
 800cc0a:	1076      	asrs	r6, r6, #1
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	e772      	b.n	800caf6 <_dtoa_r+0x396>
 800cc10:	2502      	movs	r5, #2
 800cc12:	e774      	b.n	800cafe <_dtoa_r+0x39e>
 800cc14:	f8cd a020 	str.w	sl, [sp, #32]
 800cc18:	464f      	mov	r7, r9
 800cc1a:	e791      	b.n	800cb40 <_dtoa_r+0x3e0>
 800cc1c:	4b4d      	ldr	r3, [pc, #308]	; (800cd54 <_dtoa_r+0x5f4>)
 800cc1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cc26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d047      	beq.n	800ccbc <_dtoa_r+0x55c>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	2000      	movs	r0, #0
 800cc32:	494e      	ldr	r1, [pc, #312]	; (800cd6c <_dtoa_r+0x60c>)
 800cc34:	f7f3 fe12 	bl	800085c <__aeabi_ddiv>
 800cc38:	462a      	mov	r2, r5
 800cc3a:	4633      	mov	r3, r6
 800cc3c:	f7f3 fb2c 	bl	8000298 <__aeabi_dsub>
 800cc40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc44:	465d      	mov	r5, fp
 800cc46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc4a:	f7f3 ff8d 	bl	8000b68 <__aeabi_d2iz>
 800cc4e:	4606      	mov	r6, r0
 800cc50:	f7f3 fc70 	bl	8000534 <__aeabi_i2d>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc5c:	f7f3 fb1c 	bl	8000298 <__aeabi_dsub>
 800cc60:	3630      	adds	r6, #48	; 0x30
 800cc62:	f805 6b01 	strb.w	r6, [r5], #1
 800cc66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc6a:	e9cd 0100 	strd	r0, r1, [sp]
 800cc6e:	f7f3 ff3d 	bl	8000aec <__aeabi_dcmplt>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d163      	bne.n	800cd3e <_dtoa_r+0x5de>
 800cc76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	4937      	ldr	r1, [pc, #220]	; (800cd5c <_dtoa_r+0x5fc>)
 800cc7e:	f7f3 fb0b 	bl	8000298 <__aeabi_dsub>
 800cc82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc86:	f7f3 ff31 	bl	8000aec <__aeabi_dcmplt>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	f040 80b7 	bne.w	800cdfe <_dtoa_r+0x69e>
 800cc90:	eba5 030b 	sub.w	r3, r5, fp
 800cc94:	429f      	cmp	r7, r3
 800cc96:	f77f af7c 	ble.w	800cb92 <_dtoa_r+0x432>
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	4b30      	ldr	r3, [pc, #192]	; (800cd60 <_dtoa_r+0x600>)
 800cc9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cca2:	f7f3 fcb1 	bl	8000608 <__aeabi_dmul>
 800cca6:	2200      	movs	r2, #0
 800cca8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ccac:	4b2c      	ldr	r3, [pc, #176]	; (800cd60 <_dtoa_r+0x600>)
 800ccae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccb2:	f7f3 fca9 	bl	8000608 <__aeabi_dmul>
 800ccb6:	e9cd 0100 	strd	r0, r1, [sp]
 800ccba:	e7c4      	b.n	800cc46 <_dtoa_r+0x4e6>
 800ccbc:	462a      	mov	r2, r5
 800ccbe:	4633      	mov	r3, r6
 800ccc0:	f7f3 fca2 	bl	8000608 <__aeabi_dmul>
 800ccc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ccc8:	eb0b 0507 	add.w	r5, fp, r7
 800cccc:	465e      	mov	r6, fp
 800ccce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccd2:	f7f3 ff49 	bl	8000b68 <__aeabi_d2iz>
 800ccd6:	4607      	mov	r7, r0
 800ccd8:	f7f3 fc2c 	bl	8000534 <__aeabi_i2d>
 800ccdc:	3730      	adds	r7, #48	; 0x30
 800ccde:	4602      	mov	r2, r0
 800cce0:	460b      	mov	r3, r1
 800cce2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cce6:	f7f3 fad7 	bl	8000298 <__aeabi_dsub>
 800ccea:	f806 7b01 	strb.w	r7, [r6], #1
 800ccee:	42ae      	cmp	r6, r5
 800ccf0:	e9cd 0100 	strd	r0, r1, [sp]
 800ccf4:	f04f 0200 	mov.w	r2, #0
 800ccf8:	d126      	bne.n	800cd48 <_dtoa_r+0x5e8>
 800ccfa:	4b1c      	ldr	r3, [pc, #112]	; (800cd6c <_dtoa_r+0x60c>)
 800ccfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd00:	f7f3 facc 	bl	800029c <__adddf3>
 800cd04:	4602      	mov	r2, r0
 800cd06:	460b      	mov	r3, r1
 800cd08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd0c:	f7f3 ff0c 	bl	8000b28 <__aeabi_dcmpgt>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d174      	bne.n	800cdfe <_dtoa_r+0x69e>
 800cd14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cd18:	2000      	movs	r0, #0
 800cd1a:	4914      	ldr	r1, [pc, #80]	; (800cd6c <_dtoa_r+0x60c>)
 800cd1c:	f7f3 fabc 	bl	8000298 <__aeabi_dsub>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd28:	f7f3 fee0 	bl	8000aec <__aeabi_dcmplt>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	f43f af30 	beq.w	800cb92 <_dtoa_r+0x432>
 800cd32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd36:	2b30      	cmp	r3, #48	; 0x30
 800cd38:	f105 32ff 	add.w	r2, r5, #4294967295
 800cd3c:	d002      	beq.n	800cd44 <_dtoa_r+0x5e4>
 800cd3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cd42:	e04a      	b.n	800cdda <_dtoa_r+0x67a>
 800cd44:	4615      	mov	r5, r2
 800cd46:	e7f4      	b.n	800cd32 <_dtoa_r+0x5d2>
 800cd48:	4b05      	ldr	r3, [pc, #20]	; (800cd60 <_dtoa_r+0x600>)
 800cd4a:	f7f3 fc5d 	bl	8000608 <__aeabi_dmul>
 800cd4e:	e9cd 0100 	strd	r0, r1, [sp]
 800cd52:	e7bc      	b.n	800ccce <_dtoa_r+0x56e>
 800cd54:	0800e6c8 	.word	0x0800e6c8
 800cd58:	0800e6a0 	.word	0x0800e6a0
 800cd5c:	3ff00000 	.word	0x3ff00000
 800cd60:	40240000 	.word	0x40240000
 800cd64:	401c0000 	.word	0x401c0000
 800cd68:	40140000 	.word	0x40140000
 800cd6c:	3fe00000 	.word	0x3fe00000
 800cd70:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd74:	465d      	mov	r5, fp
 800cd76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	4639      	mov	r1, r7
 800cd7e:	f7f3 fd6d 	bl	800085c <__aeabi_ddiv>
 800cd82:	f7f3 fef1 	bl	8000b68 <__aeabi_d2iz>
 800cd86:	4680      	mov	r8, r0
 800cd88:	f7f3 fbd4 	bl	8000534 <__aeabi_i2d>
 800cd8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd90:	f7f3 fc3a 	bl	8000608 <__aeabi_dmul>
 800cd94:	4602      	mov	r2, r0
 800cd96:	460b      	mov	r3, r1
 800cd98:	4630      	mov	r0, r6
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cda0:	f7f3 fa7a 	bl	8000298 <__aeabi_dsub>
 800cda4:	f805 6b01 	strb.w	r6, [r5], #1
 800cda8:	eba5 060b 	sub.w	r6, r5, fp
 800cdac:	45b1      	cmp	r9, r6
 800cdae:	4602      	mov	r2, r0
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	d139      	bne.n	800ce28 <_dtoa_r+0x6c8>
 800cdb4:	f7f3 fa72 	bl	800029c <__adddf3>
 800cdb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	460f      	mov	r7, r1
 800cdc0:	f7f3 feb2 	bl	8000b28 <__aeabi_dcmpgt>
 800cdc4:	b9c8      	cbnz	r0, 800cdfa <_dtoa_r+0x69a>
 800cdc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdca:	4630      	mov	r0, r6
 800cdcc:	4639      	mov	r1, r7
 800cdce:	f7f3 fe83 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdd2:	b110      	cbz	r0, 800cdda <_dtoa_r+0x67a>
 800cdd4:	f018 0f01 	tst.w	r8, #1
 800cdd8:	d10f      	bne.n	800cdfa <_dtoa_r+0x69a>
 800cdda:	9904      	ldr	r1, [sp, #16]
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 fe04 	bl	800d9ea <_Bfree>
 800cde2:	2300      	movs	r3, #0
 800cde4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cde6:	702b      	strb	r3, [r5, #0]
 800cde8:	f10a 0301 	add.w	r3, sl, #1
 800cdec:	6013      	str	r3, [r2, #0]
 800cdee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 8241 	beq.w	800d278 <_dtoa_r+0xb18>
 800cdf6:	601d      	str	r5, [r3, #0]
 800cdf8:	e23e      	b.n	800d278 <_dtoa_r+0xb18>
 800cdfa:	f8cd a020 	str.w	sl, [sp, #32]
 800cdfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce02:	2a39      	cmp	r2, #57	; 0x39
 800ce04:	f105 33ff 	add.w	r3, r5, #4294967295
 800ce08:	d108      	bne.n	800ce1c <_dtoa_r+0x6bc>
 800ce0a:	459b      	cmp	fp, r3
 800ce0c:	d10a      	bne.n	800ce24 <_dtoa_r+0x6c4>
 800ce0e:	9b08      	ldr	r3, [sp, #32]
 800ce10:	3301      	adds	r3, #1
 800ce12:	9308      	str	r3, [sp, #32]
 800ce14:	2330      	movs	r3, #48	; 0x30
 800ce16:	f88b 3000 	strb.w	r3, [fp]
 800ce1a:	465b      	mov	r3, fp
 800ce1c:	781a      	ldrb	r2, [r3, #0]
 800ce1e:	3201      	adds	r2, #1
 800ce20:	701a      	strb	r2, [r3, #0]
 800ce22:	e78c      	b.n	800cd3e <_dtoa_r+0x5de>
 800ce24:	461d      	mov	r5, r3
 800ce26:	e7ea      	b.n	800cdfe <_dtoa_r+0x69e>
 800ce28:	2200      	movs	r2, #0
 800ce2a:	4b9b      	ldr	r3, [pc, #620]	; (800d098 <_dtoa_r+0x938>)
 800ce2c:	f7f3 fbec 	bl	8000608 <__aeabi_dmul>
 800ce30:	2200      	movs	r2, #0
 800ce32:	2300      	movs	r3, #0
 800ce34:	4606      	mov	r6, r0
 800ce36:	460f      	mov	r7, r1
 800ce38:	f7f3 fe4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d09a      	beq.n	800cd76 <_dtoa_r+0x616>
 800ce40:	e7cb      	b.n	800cdda <_dtoa_r+0x67a>
 800ce42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce44:	2a00      	cmp	r2, #0
 800ce46:	f000 808b 	beq.w	800cf60 <_dtoa_r+0x800>
 800ce4a:	9a06      	ldr	r2, [sp, #24]
 800ce4c:	2a01      	cmp	r2, #1
 800ce4e:	dc6e      	bgt.n	800cf2e <_dtoa_r+0x7ce>
 800ce50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce52:	2a00      	cmp	r2, #0
 800ce54:	d067      	beq.n	800cf26 <_dtoa_r+0x7c6>
 800ce56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce5a:	9f07      	ldr	r7, [sp, #28]
 800ce5c:	9d05      	ldr	r5, [sp, #20]
 800ce5e:	9a05      	ldr	r2, [sp, #20]
 800ce60:	2101      	movs	r1, #1
 800ce62:	441a      	add	r2, r3
 800ce64:	4620      	mov	r0, r4
 800ce66:	9205      	str	r2, [sp, #20]
 800ce68:	4498      	add	r8, r3
 800ce6a:	f000 fe9c 	bl	800dba6 <__i2b>
 800ce6e:	4606      	mov	r6, r0
 800ce70:	2d00      	cmp	r5, #0
 800ce72:	dd0c      	ble.n	800ce8e <_dtoa_r+0x72e>
 800ce74:	f1b8 0f00 	cmp.w	r8, #0
 800ce78:	dd09      	ble.n	800ce8e <_dtoa_r+0x72e>
 800ce7a:	4545      	cmp	r5, r8
 800ce7c:	9a05      	ldr	r2, [sp, #20]
 800ce7e:	462b      	mov	r3, r5
 800ce80:	bfa8      	it	ge
 800ce82:	4643      	movge	r3, r8
 800ce84:	1ad2      	subs	r2, r2, r3
 800ce86:	9205      	str	r2, [sp, #20]
 800ce88:	1aed      	subs	r5, r5, r3
 800ce8a:	eba8 0803 	sub.w	r8, r8, r3
 800ce8e:	9b07      	ldr	r3, [sp, #28]
 800ce90:	b1eb      	cbz	r3, 800cece <_dtoa_r+0x76e>
 800ce92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d067      	beq.n	800cf68 <_dtoa_r+0x808>
 800ce98:	b18f      	cbz	r7, 800cebe <_dtoa_r+0x75e>
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	463a      	mov	r2, r7
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f000 ff20 	bl	800dce4 <__pow5mult>
 800cea4:	9a04      	ldr	r2, [sp, #16]
 800cea6:	4601      	mov	r1, r0
 800cea8:	4606      	mov	r6, r0
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f000 fe84 	bl	800dbb8 <__multiply>
 800ceb0:	9904      	ldr	r1, [sp, #16]
 800ceb2:	9008      	str	r0, [sp, #32]
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f000 fd98 	bl	800d9ea <_Bfree>
 800ceba:	9b08      	ldr	r3, [sp, #32]
 800cebc:	9304      	str	r3, [sp, #16]
 800cebe:	9b07      	ldr	r3, [sp, #28]
 800cec0:	1bda      	subs	r2, r3, r7
 800cec2:	d004      	beq.n	800cece <_dtoa_r+0x76e>
 800cec4:	9904      	ldr	r1, [sp, #16]
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 ff0c 	bl	800dce4 <__pow5mult>
 800cecc:	9004      	str	r0, [sp, #16]
 800cece:	2101      	movs	r1, #1
 800ced0:	4620      	mov	r0, r4
 800ced2:	f000 fe68 	bl	800dba6 <__i2b>
 800ced6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ced8:	4607      	mov	r7, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	f000 81d0 	beq.w	800d280 <_dtoa_r+0xb20>
 800cee0:	461a      	mov	r2, r3
 800cee2:	4601      	mov	r1, r0
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 fefd 	bl	800dce4 <__pow5mult>
 800ceea:	9b06      	ldr	r3, [sp, #24]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	4607      	mov	r7, r0
 800cef0:	dc40      	bgt.n	800cf74 <_dtoa_r+0x814>
 800cef2:	9b00      	ldr	r3, [sp, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d139      	bne.n	800cf6c <_dtoa_r+0x80c>
 800cef8:	9b01      	ldr	r3, [sp, #4]
 800cefa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d136      	bne.n	800cf70 <_dtoa_r+0x810>
 800cf02:	9b01      	ldr	r3, [sp, #4]
 800cf04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf08:	0d1b      	lsrs	r3, r3, #20
 800cf0a:	051b      	lsls	r3, r3, #20
 800cf0c:	b12b      	cbz	r3, 800cf1a <_dtoa_r+0x7ba>
 800cf0e:	9b05      	ldr	r3, [sp, #20]
 800cf10:	3301      	adds	r3, #1
 800cf12:	9305      	str	r3, [sp, #20]
 800cf14:	f108 0801 	add.w	r8, r8, #1
 800cf18:	2301      	movs	r3, #1
 800cf1a:	9307      	str	r3, [sp, #28]
 800cf1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d12a      	bne.n	800cf78 <_dtoa_r+0x818>
 800cf22:	2001      	movs	r0, #1
 800cf24:	e030      	b.n	800cf88 <_dtoa_r+0x828>
 800cf26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf2c:	e795      	b.n	800ce5a <_dtoa_r+0x6fa>
 800cf2e:	9b07      	ldr	r3, [sp, #28]
 800cf30:	f109 37ff 	add.w	r7, r9, #4294967295
 800cf34:	42bb      	cmp	r3, r7
 800cf36:	bfbf      	itttt	lt
 800cf38:	9b07      	ldrlt	r3, [sp, #28]
 800cf3a:	9707      	strlt	r7, [sp, #28]
 800cf3c:	1afa      	sublt	r2, r7, r3
 800cf3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cf40:	bfbb      	ittet	lt
 800cf42:	189b      	addlt	r3, r3, r2
 800cf44:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cf46:	1bdf      	subge	r7, r3, r7
 800cf48:	2700      	movlt	r7, #0
 800cf4a:	f1b9 0f00 	cmp.w	r9, #0
 800cf4e:	bfb5      	itete	lt
 800cf50:	9b05      	ldrlt	r3, [sp, #20]
 800cf52:	9d05      	ldrge	r5, [sp, #20]
 800cf54:	eba3 0509 	sublt.w	r5, r3, r9
 800cf58:	464b      	movge	r3, r9
 800cf5a:	bfb8      	it	lt
 800cf5c:	2300      	movlt	r3, #0
 800cf5e:	e77e      	b.n	800ce5e <_dtoa_r+0x6fe>
 800cf60:	9f07      	ldr	r7, [sp, #28]
 800cf62:	9d05      	ldr	r5, [sp, #20]
 800cf64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cf66:	e783      	b.n	800ce70 <_dtoa_r+0x710>
 800cf68:	9a07      	ldr	r2, [sp, #28]
 800cf6a:	e7ab      	b.n	800cec4 <_dtoa_r+0x764>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	e7d4      	b.n	800cf1a <_dtoa_r+0x7ba>
 800cf70:	9b00      	ldr	r3, [sp, #0]
 800cf72:	e7d2      	b.n	800cf1a <_dtoa_r+0x7ba>
 800cf74:	2300      	movs	r3, #0
 800cf76:	9307      	str	r3, [sp, #28]
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cf7e:	6918      	ldr	r0, [r3, #16]
 800cf80:	f000 fdc3 	bl	800db0a <__hi0bits>
 800cf84:	f1c0 0020 	rsb	r0, r0, #32
 800cf88:	4440      	add	r0, r8
 800cf8a:	f010 001f 	ands.w	r0, r0, #31
 800cf8e:	d047      	beq.n	800d020 <_dtoa_r+0x8c0>
 800cf90:	f1c0 0320 	rsb	r3, r0, #32
 800cf94:	2b04      	cmp	r3, #4
 800cf96:	dd3b      	ble.n	800d010 <_dtoa_r+0x8b0>
 800cf98:	9b05      	ldr	r3, [sp, #20]
 800cf9a:	f1c0 001c 	rsb	r0, r0, #28
 800cf9e:	4403      	add	r3, r0
 800cfa0:	9305      	str	r3, [sp, #20]
 800cfa2:	4405      	add	r5, r0
 800cfa4:	4480      	add	r8, r0
 800cfa6:	9b05      	ldr	r3, [sp, #20]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	dd05      	ble.n	800cfb8 <_dtoa_r+0x858>
 800cfac:	461a      	mov	r2, r3
 800cfae:	9904      	ldr	r1, [sp, #16]
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f000 fee5 	bl	800dd80 <__lshift>
 800cfb6:	9004      	str	r0, [sp, #16]
 800cfb8:	f1b8 0f00 	cmp.w	r8, #0
 800cfbc:	dd05      	ble.n	800cfca <_dtoa_r+0x86a>
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	4642      	mov	r2, r8
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f000 fedc 	bl	800dd80 <__lshift>
 800cfc8:	4607      	mov	r7, r0
 800cfca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfcc:	b353      	cbz	r3, 800d024 <_dtoa_r+0x8c4>
 800cfce:	4639      	mov	r1, r7
 800cfd0:	9804      	ldr	r0, [sp, #16]
 800cfd2:	f000 ff29 	bl	800de28 <__mcmp>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	da24      	bge.n	800d024 <_dtoa_r+0x8c4>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	220a      	movs	r2, #10
 800cfde:	9904      	ldr	r1, [sp, #16]
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f000 fd19 	bl	800da18 <__multadd>
 800cfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfe8:	9004      	str	r0, [sp, #16]
 800cfea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f000 814d 	beq.w	800d28e <_dtoa_r+0xb2e>
 800cff4:	2300      	movs	r3, #0
 800cff6:	4631      	mov	r1, r6
 800cff8:	220a      	movs	r2, #10
 800cffa:	4620      	mov	r0, r4
 800cffc:	f000 fd0c 	bl	800da18 <__multadd>
 800d000:	9b02      	ldr	r3, [sp, #8]
 800d002:	2b00      	cmp	r3, #0
 800d004:	4606      	mov	r6, r0
 800d006:	dc4f      	bgt.n	800d0a8 <_dtoa_r+0x948>
 800d008:	9b06      	ldr	r3, [sp, #24]
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	dd4c      	ble.n	800d0a8 <_dtoa_r+0x948>
 800d00e:	e011      	b.n	800d034 <_dtoa_r+0x8d4>
 800d010:	d0c9      	beq.n	800cfa6 <_dtoa_r+0x846>
 800d012:	9a05      	ldr	r2, [sp, #20]
 800d014:	331c      	adds	r3, #28
 800d016:	441a      	add	r2, r3
 800d018:	9205      	str	r2, [sp, #20]
 800d01a:	441d      	add	r5, r3
 800d01c:	4498      	add	r8, r3
 800d01e:	e7c2      	b.n	800cfa6 <_dtoa_r+0x846>
 800d020:	4603      	mov	r3, r0
 800d022:	e7f6      	b.n	800d012 <_dtoa_r+0x8b2>
 800d024:	f1b9 0f00 	cmp.w	r9, #0
 800d028:	dc38      	bgt.n	800d09c <_dtoa_r+0x93c>
 800d02a:	9b06      	ldr	r3, [sp, #24]
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	dd35      	ble.n	800d09c <_dtoa_r+0x93c>
 800d030:	f8cd 9008 	str.w	r9, [sp, #8]
 800d034:	9b02      	ldr	r3, [sp, #8]
 800d036:	b963      	cbnz	r3, 800d052 <_dtoa_r+0x8f2>
 800d038:	4639      	mov	r1, r7
 800d03a:	2205      	movs	r2, #5
 800d03c:	4620      	mov	r0, r4
 800d03e:	f000 fceb 	bl	800da18 <__multadd>
 800d042:	4601      	mov	r1, r0
 800d044:	4607      	mov	r7, r0
 800d046:	9804      	ldr	r0, [sp, #16]
 800d048:	f000 feee 	bl	800de28 <__mcmp>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	f73f adcc 	bgt.w	800cbea <_dtoa_r+0x48a>
 800d052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d054:	465d      	mov	r5, fp
 800d056:	ea6f 0a03 	mvn.w	sl, r3
 800d05a:	f04f 0900 	mov.w	r9, #0
 800d05e:	4639      	mov	r1, r7
 800d060:	4620      	mov	r0, r4
 800d062:	f000 fcc2 	bl	800d9ea <_Bfree>
 800d066:	2e00      	cmp	r6, #0
 800d068:	f43f aeb7 	beq.w	800cdda <_dtoa_r+0x67a>
 800d06c:	f1b9 0f00 	cmp.w	r9, #0
 800d070:	d005      	beq.n	800d07e <_dtoa_r+0x91e>
 800d072:	45b1      	cmp	r9, r6
 800d074:	d003      	beq.n	800d07e <_dtoa_r+0x91e>
 800d076:	4649      	mov	r1, r9
 800d078:	4620      	mov	r0, r4
 800d07a:	f000 fcb6 	bl	800d9ea <_Bfree>
 800d07e:	4631      	mov	r1, r6
 800d080:	4620      	mov	r0, r4
 800d082:	f000 fcb2 	bl	800d9ea <_Bfree>
 800d086:	e6a8      	b.n	800cdda <_dtoa_r+0x67a>
 800d088:	2700      	movs	r7, #0
 800d08a:	463e      	mov	r6, r7
 800d08c:	e7e1      	b.n	800d052 <_dtoa_r+0x8f2>
 800d08e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d092:	463e      	mov	r6, r7
 800d094:	e5a9      	b.n	800cbea <_dtoa_r+0x48a>
 800d096:	bf00      	nop
 800d098:	40240000 	.word	0x40240000
 800d09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d09e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f000 80fa 	beq.w	800d29c <_dtoa_r+0xb3c>
 800d0a8:	2d00      	cmp	r5, #0
 800d0aa:	dd05      	ble.n	800d0b8 <_dtoa_r+0x958>
 800d0ac:	4631      	mov	r1, r6
 800d0ae:	462a      	mov	r2, r5
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f000 fe65 	bl	800dd80 <__lshift>
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	9b07      	ldr	r3, [sp, #28]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d04c      	beq.n	800d158 <_dtoa_r+0x9f8>
 800d0be:	6871      	ldr	r1, [r6, #4]
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f000 fc5e 	bl	800d982 <_Balloc>
 800d0c6:	6932      	ldr	r2, [r6, #16]
 800d0c8:	3202      	adds	r2, #2
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	0092      	lsls	r2, r2, #2
 800d0ce:	f106 010c 	add.w	r1, r6, #12
 800d0d2:	300c      	adds	r0, #12
 800d0d4:	f000 fc48 	bl	800d968 <memcpy>
 800d0d8:	2201      	movs	r2, #1
 800d0da:	4629      	mov	r1, r5
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 fe4f 	bl	800dd80 <__lshift>
 800d0e2:	9b00      	ldr	r3, [sp, #0]
 800d0e4:	f8cd b014 	str.w	fp, [sp, #20]
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	46b1      	mov	r9, r6
 800d0ee:	9307      	str	r3, [sp, #28]
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	9804      	ldr	r0, [sp, #16]
 800d0f6:	f7ff faa5 	bl	800c644 <quorem>
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	4605      	mov	r5, r0
 800d0fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d102:	9804      	ldr	r0, [sp, #16]
 800d104:	f000 fe90 	bl	800de28 <__mcmp>
 800d108:	4632      	mov	r2, r6
 800d10a:	9000      	str	r0, [sp, #0]
 800d10c:	4639      	mov	r1, r7
 800d10e:	4620      	mov	r0, r4
 800d110:	f000 fea4 	bl	800de5c <__mdiff>
 800d114:	68c3      	ldr	r3, [r0, #12]
 800d116:	4602      	mov	r2, r0
 800d118:	bb03      	cbnz	r3, 800d15c <_dtoa_r+0x9fc>
 800d11a:	4601      	mov	r1, r0
 800d11c:	9008      	str	r0, [sp, #32]
 800d11e:	9804      	ldr	r0, [sp, #16]
 800d120:	f000 fe82 	bl	800de28 <__mcmp>
 800d124:	9a08      	ldr	r2, [sp, #32]
 800d126:	4603      	mov	r3, r0
 800d128:	4611      	mov	r1, r2
 800d12a:	4620      	mov	r0, r4
 800d12c:	9308      	str	r3, [sp, #32]
 800d12e:	f000 fc5c 	bl	800d9ea <_Bfree>
 800d132:	9b08      	ldr	r3, [sp, #32]
 800d134:	b9a3      	cbnz	r3, 800d160 <_dtoa_r+0xa00>
 800d136:	9a06      	ldr	r2, [sp, #24]
 800d138:	b992      	cbnz	r2, 800d160 <_dtoa_r+0xa00>
 800d13a:	9a07      	ldr	r2, [sp, #28]
 800d13c:	b982      	cbnz	r2, 800d160 <_dtoa_r+0xa00>
 800d13e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d142:	d029      	beq.n	800d198 <_dtoa_r+0xa38>
 800d144:	9b00      	ldr	r3, [sp, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	dd01      	ble.n	800d14e <_dtoa_r+0x9ee>
 800d14a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d14e:	9b05      	ldr	r3, [sp, #20]
 800d150:	1c5d      	adds	r5, r3, #1
 800d152:	f883 8000 	strb.w	r8, [r3]
 800d156:	e782      	b.n	800d05e <_dtoa_r+0x8fe>
 800d158:	4630      	mov	r0, r6
 800d15a:	e7c2      	b.n	800d0e2 <_dtoa_r+0x982>
 800d15c:	2301      	movs	r3, #1
 800d15e:	e7e3      	b.n	800d128 <_dtoa_r+0x9c8>
 800d160:	9a00      	ldr	r2, [sp, #0]
 800d162:	2a00      	cmp	r2, #0
 800d164:	db04      	blt.n	800d170 <_dtoa_r+0xa10>
 800d166:	d125      	bne.n	800d1b4 <_dtoa_r+0xa54>
 800d168:	9a06      	ldr	r2, [sp, #24]
 800d16a:	bb1a      	cbnz	r2, 800d1b4 <_dtoa_r+0xa54>
 800d16c:	9a07      	ldr	r2, [sp, #28]
 800d16e:	bb0a      	cbnz	r2, 800d1b4 <_dtoa_r+0xa54>
 800d170:	2b00      	cmp	r3, #0
 800d172:	ddec      	ble.n	800d14e <_dtoa_r+0x9ee>
 800d174:	2201      	movs	r2, #1
 800d176:	9904      	ldr	r1, [sp, #16]
 800d178:	4620      	mov	r0, r4
 800d17a:	f000 fe01 	bl	800dd80 <__lshift>
 800d17e:	4639      	mov	r1, r7
 800d180:	9004      	str	r0, [sp, #16]
 800d182:	f000 fe51 	bl	800de28 <__mcmp>
 800d186:	2800      	cmp	r0, #0
 800d188:	dc03      	bgt.n	800d192 <_dtoa_r+0xa32>
 800d18a:	d1e0      	bne.n	800d14e <_dtoa_r+0x9ee>
 800d18c:	f018 0f01 	tst.w	r8, #1
 800d190:	d0dd      	beq.n	800d14e <_dtoa_r+0x9ee>
 800d192:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d196:	d1d8      	bne.n	800d14a <_dtoa_r+0x9ea>
 800d198:	9b05      	ldr	r3, [sp, #20]
 800d19a:	9a05      	ldr	r2, [sp, #20]
 800d19c:	1c5d      	adds	r5, r3, #1
 800d19e:	2339      	movs	r3, #57	; 0x39
 800d1a0:	7013      	strb	r3, [r2, #0]
 800d1a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1a6:	2b39      	cmp	r3, #57	; 0x39
 800d1a8:	f105 32ff 	add.w	r2, r5, #4294967295
 800d1ac:	d04f      	beq.n	800d24e <_dtoa_r+0xaee>
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	7013      	strb	r3, [r2, #0]
 800d1b2:	e754      	b.n	800d05e <_dtoa_r+0x8fe>
 800d1b4:	9a05      	ldr	r2, [sp, #20]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f102 0501 	add.w	r5, r2, #1
 800d1bc:	dd06      	ble.n	800d1cc <_dtoa_r+0xa6c>
 800d1be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d1c2:	d0e9      	beq.n	800d198 <_dtoa_r+0xa38>
 800d1c4:	f108 0801 	add.w	r8, r8, #1
 800d1c8:	9b05      	ldr	r3, [sp, #20]
 800d1ca:	e7c2      	b.n	800d152 <_dtoa_r+0x9f2>
 800d1cc:	9a02      	ldr	r2, [sp, #8]
 800d1ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d1d2:	eba5 030b 	sub.w	r3, r5, fp
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d021      	beq.n	800d21e <_dtoa_r+0xabe>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	220a      	movs	r2, #10
 800d1de:	9904      	ldr	r1, [sp, #16]
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f000 fc19 	bl	800da18 <__multadd>
 800d1e6:	45b1      	cmp	r9, r6
 800d1e8:	9004      	str	r0, [sp, #16]
 800d1ea:	f04f 0300 	mov.w	r3, #0
 800d1ee:	f04f 020a 	mov.w	r2, #10
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	d105      	bne.n	800d204 <_dtoa_r+0xaa4>
 800d1f8:	f000 fc0e 	bl	800da18 <__multadd>
 800d1fc:	4681      	mov	r9, r0
 800d1fe:	4606      	mov	r6, r0
 800d200:	9505      	str	r5, [sp, #20]
 800d202:	e776      	b.n	800d0f2 <_dtoa_r+0x992>
 800d204:	f000 fc08 	bl	800da18 <__multadd>
 800d208:	4631      	mov	r1, r6
 800d20a:	4681      	mov	r9, r0
 800d20c:	2300      	movs	r3, #0
 800d20e:	220a      	movs	r2, #10
 800d210:	4620      	mov	r0, r4
 800d212:	f000 fc01 	bl	800da18 <__multadd>
 800d216:	4606      	mov	r6, r0
 800d218:	e7f2      	b.n	800d200 <_dtoa_r+0xaa0>
 800d21a:	f04f 0900 	mov.w	r9, #0
 800d21e:	2201      	movs	r2, #1
 800d220:	9904      	ldr	r1, [sp, #16]
 800d222:	4620      	mov	r0, r4
 800d224:	f000 fdac 	bl	800dd80 <__lshift>
 800d228:	4639      	mov	r1, r7
 800d22a:	9004      	str	r0, [sp, #16]
 800d22c:	f000 fdfc 	bl	800de28 <__mcmp>
 800d230:	2800      	cmp	r0, #0
 800d232:	dcb6      	bgt.n	800d1a2 <_dtoa_r+0xa42>
 800d234:	d102      	bne.n	800d23c <_dtoa_r+0xadc>
 800d236:	f018 0f01 	tst.w	r8, #1
 800d23a:	d1b2      	bne.n	800d1a2 <_dtoa_r+0xa42>
 800d23c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d240:	2b30      	cmp	r3, #48	; 0x30
 800d242:	f105 32ff 	add.w	r2, r5, #4294967295
 800d246:	f47f af0a 	bne.w	800d05e <_dtoa_r+0x8fe>
 800d24a:	4615      	mov	r5, r2
 800d24c:	e7f6      	b.n	800d23c <_dtoa_r+0xadc>
 800d24e:	4593      	cmp	fp, r2
 800d250:	d105      	bne.n	800d25e <_dtoa_r+0xafe>
 800d252:	2331      	movs	r3, #49	; 0x31
 800d254:	f10a 0a01 	add.w	sl, sl, #1
 800d258:	f88b 3000 	strb.w	r3, [fp]
 800d25c:	e6ff      	b.n	800d05e <_dtoa_r+0x8fe>
 800d25e:	4615      	mov	r5, r2
 800d260:	e79f      	b.n	800d1a2 <_dtoa_r+0xa42>
 800d262:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d2c8 <_dtoa_r+0xb68>
 800d266:	e007      	b.n	800d278 <_dtoa_r+0xb18>
 800d268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d26a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d2cc <_dtoa_r+0xb6c>
 800d26e:	b11b      	cbz	r3, 800d278 <_dtoa_r+0xb18>
 800d270:	f10b 0308 	add.w	r3, fp, #8
 800d274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	4658      	mov	r0, fp
 800d27a:	b017      	add	sp, #92	; 0x5c
 800d27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d280:	9b06      	ldr	r3, [sp, #24]
 800d282:	2b01      	cmp	r3, #1
 800d284:	f77f ae35 	ble.w	800cef2 <_dtoa_r+0x792>
 800d288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d28a:	9307      	str	r3, [sp, #28]
 800d28c:	e649      	b.n	800cf22 <_dtoa_r+0x7c2>
 800d28e:	9b02      	ldr	r3, [sp, #8]
 800d290:	2b00      	cmp	r3, #0
 800d292:	dc03      	bgt.n	800d29c <_dtoa_r+0xb3c>
 800d294:	9b06      	ldr	r3, [sp, #24]
 800d296:	2b02      	cmp	r3, #2
 800d298:	f73f aecc 	bgt.w	800d034 <_dtoa_r+0x8d4>
 800d29c:	465d      	mov	r5, fp
 800d29e:	4639      	mov	r1, r7
 800d2a0:	9804      	ldr	r0, [sp, #16]
 800d2a2:	f7ff f9cf 	bl	800c644 <quorem>
 800d2a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d2aa:	f805 8b01 	strb.w	r8, [r5], #1
 800d2ae:	9a02      	ldr	r2, [sp, #8]
 800d2b0:	eba5 030b 	sub.w	r3, r5, fp
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	ddb0      	ble.n	800d21a <_dtoa_r+0xaba>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	220a      	movs	r2, #10
 800d2bc:	9904      	ldr	r1, [sp, #16]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 fbaa 	bl	800da18 <__multadd>
 800d2c4:	9004      	str	r0, [sp, #16]
 800d2c6:	e7ea      	b.n	800d29e <_dtoa_r+0xb3e>
 800d2c8:	0800e5a0 	.word	0x0800e5a0
 800d2cc:	0800e620 	.word	0x0800e620

0800d2d0 <rshift>:
 800d2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2d2:	6906      	ldr	r6, [r0, #16]
 800d2d4:	114b      	asrs	r3, r1, #5
 800d2d6:	429e      	cmp	r6, r3
 800d2d8:	f100 0414 	add.w	r4, r0, #20
 800d2dc:	dd30      	ble.n	800d340 <rshift+0x70>
 800d2de:	f011 011f 	ands.w	r1, r1, #31
 800d2e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d2e6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d2ea:	d108      	bne.n	800d2fe <rshift+0x2e>
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	42b2      	cmp	r2, r6
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	d211      	bcs.n	800d318 <rshift+0x48>
 800d2f4:	f852 3b04 	ldr.w	r3, [r2], #4
 800d2f8:	f841 3b04 	str.w	r3, [r1], #4
 800d2fc:	e7f7      	b.n	800d2ee <rshift+0x1e>
 800d2fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d302:	f1c1 0c20 	rsb	ip, r1, #32
 800d306:	40cd      	lsrs	r5, r1
 800d308:	3204      	adds	r2, #4
 800d30a:	4623      	mov	r3, r4
 800d30c:	42b2      	cmp	r2, r6
 800d30e:	4617      	mov	r7, r2
 800d310:	d30c      	bcc.n	800d32c <rshift+0x5c>
 800d312:	601d      	str	r5, [r3, #0]
 800d314:	b105      	cbz	r5, 800d318 <rshift+0x48>
 800d316:	3304      	adds	r3, #4
 800d318:	1b1a      	subs	r2, r3, r4
 800d31a:	42a3      	cmp	r3, r4
 800d31c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d320:	bf08      	it	eq
 800d322:	2300      	moveq	r3, #0
 800d324:	6102      	str	r2, [r0, #16]
 800d326:	bf08      	it	eq
 800d328:	6143      	streq	r3, [r0, #20]
 800d32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d32c:	683f      	ldr	r7, [r7, #0]
 800d32e:	fa07 f70c 	lsl.w	r7, r7, ip
 800d332:	433d      	orrs	r5, r7
 800d334:	f843 5b04 	str.w	r5, [r3], #4
 800d338:	f852 5b04 	ldr.w	r5, [r2], #4
 800d33c:	40cd      	lsrs	r5, r1
 800d33e:	e7e5      	b.n	800d30c <rshift+0x3c>
 800d340:	4623      	mov	r3, r4
 800d342:	e7e9      	b.n	800d318 <rshift+0x48>

0800d344 <__hexdig_fun>:
 800d344:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d348:	2b09      	cmp	r3, #9
 800d34a:	d802      	bhi.n	800d352 <__hexdig_fun+0xe>
 800d34c:	3820      	subs	r0, #32
 800d34e:	b2c0      	uxtb	r0, r0
 800d350:	4770      	bx	lr
 800d352:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d356:	2b05      	cmp	r3, #5
 800d358:	d801      	bhi.n	800d35e <__hexdig_fun+0x1a>
 800d35a:	3847      	subs	r0, #71	; 0x47
 800d35c:	e7f7      	b.n	800d34e <__hexdig_fun+0xa>
 800d35e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d362:	2b05      	cmp	r3, #5
 800d364:	d801      	bhi.n	800d36a <__hexdig_fun+0x26>
 800d366:	3827      	subs	r0, #39	; 0x27
 800d368:	e7f1      	b.n	800d34e <__hexdig_fun+0xa>
 800d36a:	2000      	movs	r0, #0
 800d36c:	4770      	bx	lr

0800d36e <__gethex>:
 800d36e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d372:	b08b      	sub	sp, #44	; 0x2c
 800d374:	468a      	mov	sl, r1
 800d376:	9002      	str	r0, [sp, #8]
 800d378:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d37a:	9306      	str	r3, [sp, #24]
 800d37c:	4690      	mov	r8, r2
 800d37e:	f000 fad0 	bl	800d922 <__localeconv_l>
 800d382:	6803      	ldr	r3, [r0, #0]
 800d384:	9303      	str	r3, [sp, #12]
 800d386:	4618      	mov	r0, r3
 800d388:	f7f2 ff2a 	bl	80001e0 <strlen>
 800d38c:	9b03      	ldr	r3, [sp, #12]
 800d38e:	9001      	str	r0, [sp, #4]
 800d390:	4403      	add	r3, r0
 800d392:	f04f 0b00 	mov.w	fp, #0
 800d396:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d39a:	9307      	str	r3, [sp, #28]
 800d39c:	f8da 3000 	ldr.w	r3, [sl]
 800d3a0:	3302      	adds	r3, #2
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d3a8:	2830      	cmp	r0, #48	; 0x30
 800d3aa:	d06c      	beq.n	800d486 <__gethex+0x118>
 800d3ac:	f7ff ffca 	bl	800d344 <__hexdig_fun>
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d16a      	bne.n	800d48c <__gethex+0x11e>
 800d3b6:	9a01      	ldr	r2, [sp, #4]
 800d3b8:	9903      	ldr	r1, [sp, #12]
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	f001 f840 	bl	800e440 <strncmp>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d166      	bne.n	800d492 <__gethex+0x124>
 800d3c4:	9b01      	ldr	r3, [sp, #4]
 800d3c6:	5cf8      	ldrb	r0, [r7, r3]
 800d3c8:	18fe      	adds	r6, r7, r3
 800d3ca:	f7ff ffbb 	bl	800d344 <__hexdig_fun>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d062      	beq.n	800d498 <__gethex+0x12a>
 800d3d2:	4633      	mov	r3, r6
 800d3d4:	7818      	ldrb	r0, [r3, #0]
 800d3d6:	2830      	cmp	r0, #48	; 0x30
 800d3d8:	461f      	mov	r7, r3
 800d3da:	f103 0301 	add.w	r3, r3, #1
 800d3de:	d0f9      	beq.n	800d3d4 <__gethex+0x66>
 800d3e0:	f7ff ffb0 	bl	800d344 <__hexdig_fun>
 800d3e4:	fab0 f580 	clz	r5, r0
 800d3e8:	096d      	lsrs	r5, r5, #5
 800d3ea:	4634      	mov	r4, r6
 800d3ec:	f04f 0b01 	mov.w	fp, #1
 800d3f0:	463a      	mov	r2, r7
 800d3f2:	4616      	mov	r6, r2
 800d3f4:	3201      	adds	r2, #1
 800d3f6:	7830      	ldrb	r0, [r6, #0]
 800d3f8:	f7ff ffa4 	bl	800d344 <__hexdig_fun>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	d1f8      	bne.n	800d3f2 <__gethex+0x84>
 800d400:	9a01      	ldr	r2, [sp, #4]
 800d402:	9903      	ldr	r1, [sp, #12]
 800d404:	4630      	mov	r0, r6
 800d406:	f001 f81b 	bl	800e440 <strncmp>
 800d40a:	b950      	cbnz	r0, 800d422 <__gethex+0xb4>
 800d40c:	b954      	cbnz	r4, 800d424 <__gethex+0xb6>
 800d40e:	9b01      	ldr	r3, [sp, #4]
 800d410:	18f4      	adds	r4, r6, r3
 800d412:	4622      	mov	r2, r4
 800d414:	4616      	mov	r6, r2
 800d416:	3201      	adds	r2, #1
 800d418:	7830      	ldrb	r0, [r6, #0]
 800d41a:	f7ff ff93 	bl	800d344 <__hexdig_fun>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d1f8      	bne.n	800d414 <__gethex+0xa6>
 800d422:	b10c      	cbz	r4, 800d428 <__gethex+0xba>
 800d424:	1ba4      	subs	r4, r4, r6
 800d426:	00a4      	lsls	r4, r4, #2
 800d428:	7833      	ldrb	r3, [r6, #0]
 800d42a:	2b50      	cmp	r3, #80	; 0x50
 800d42c:	d001      	beq.n	800d432 <__gethex+0xc4>
 800d42e:	2b70      	cmp	r3, #112	; 0x70
 800d430:	d140      	bne.n	800d4b4 <__gethex+0x146>
 800d432:	7873      	ldrb	r3, [r6, #1]
 800d434:	2b2b      	cmp	r3, #43	; 0x2b
 800d436:	d031      	beq.n	800d49c <__gethex+0x12e>
 800d438:	2b2d      	cmp	r3, #45	; 0x2d
 800d43a:	d033      	beq.n	800d4a4 <__gethex+0x136>
 800d43c:	1c71      	adds	r1, r6, #1
 800d43e:	f04f 0900 	mov.w	r9, #0
 800d442:	7808      	ldrb	r0, [r1, #0]
 800d444:	f7ff ff7e 	bl	800d344 <__hexdig_fun>
 800d448:	1e43      	subs	r3, r0, #1
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	2b18      	cmp	r3, #24
 800d44e:	d831      	bhi.n	800d4b4 <__gethex+0x146>
 800d450:	f1a0 0210 	sub.w	r2, r0, #16
 800d454:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d458:	f7ff ff74 	bl	800d344 <__hexdig_fun>
 800d45c:	1e43      	subs	r3, r0, #1
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	2b18      	cmp	r3, #24
 800d462:	d922      	bls.n	800d4aa <__gethex+0x13c>
 800d464:	f1b9 0f00 	cmp.w	r9, #0
 800d468:	d000      	beq.n	800d46c <__gethex+0xfe>
 800d46a:	4252      	negs	r2, r2
 800d46c:	4414      	add	r4, r2
 800d46e:	f8ca 1000 	str.w	r1, [sl]
 800d472:	b30d      	cbz	r5, 800d4b8 <__gethex+0x14a>
 800d474:	f1bb 0f00 	cmp.w	fp, #0
 800d478:	bf0c      	ite	eq
 800d47a:	2706      	moveq	r7, #6
 800d47c:	2700      	movne	r7, #0
 800d47e:	4638      	mov	r0, r7
 800d480:	b00b      	add	sp, #44	; 0x2c
 800d482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d486:	f10b 0b01 	add.w	fp, fp, #1
 800d48a:	e78a      	b.n	800d3a2 <__gethex+0x34>
 800d48c:	2500      	movs	r5, #0
 800d48e:	462c      	mov	r4, r5
 800d490:	e7ae      	b.n	800d3f0 <__gethex+0x82>
 800d492:	463e      	mov	r6, r7
 800d494:	2501      	movs	r5, #1
 800d496:	e7c7      	b.n	800d428 <__gethex+0xba>
 800d498:	4604      	mov	r4, r0
 800d49a:	e7fb      	b.n	800d494 <__gethex+0x126>
 800d49c:	f04f 0900 	mov.w	r9, #0
 800d4a0:	1cb1      	adds	r1, r6, #2
 800d4a2:	e7ce      	b.n	800d442 <__gethex+0xd4>
 800d4a4:	f04f 0901 	mov.w	r9, #1
 800d4a8:	e7fa      	b.n	800d4a0 <__gethex+0x132>
 800d4aa:	230a      	movs	r3, #10
 800d4ac:	fb03 0202 	mla	r2, r3, r2, r0
 800d4b0:	3a10      	subs	r2, #16
 800d4b2:	e7cf      	b.n	800d454 <__gethex+0xe6>
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	e7da      	b.n	800d46e <__gethex+0x100>
 800d4b8:	1bf3      	subs	r3, r6, r7
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	4629      	mov	r1, r5
 800d4be:	2b07      	cmp	r3, #7
 800d4c0:	dc49      	bgt.n	800d556 <__gethex+0x1e8>
 800d4c2:	9802      	ldr	r0, [sp, #8]
 800d4c4:	f000 fa5d 	bl	800d982 <_Balloc>
 800d4c8:	9b01      	ldr	r3, [sp, #4]
 800d4ca:	f100 0914 	add.w	r9, r0, #20
 800d4ce:	f04f 0b00 	mov.w	fp, #0
 800d4d2:	f1c3 0301 	rsb	r3, r3, #1
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	f8cd 9010 	str.w	r9, [sp, #16]
 800d4dc:	46da      	mov	sl, fp
 800d4de:	9308      	str	r3, [sp, #32]
 800d4e0:	42b7      	cmp	r7, r6
 800d4e2:	d33b      	bcc.n	800d55c <__gethex+0x1ee>
 800d4e4:	9804      	ldr	r0, [sp, #16]
 800d4e6:	f840 ab04 	str.w	sl, [r0], #4
 800d4ea:	eba0 0009 	sub.w	r0, r0, r9
 800d4ee:	1080      	asrs	r0, r0, #2
 800d4f0:	6128      	str	r0, [r5, #16]
 800d4f2:	0147      	lsls	r7, r0, #5
 800d4f4:	4650      	mov	r0, sl
 800d4f6:	f000 fb08 	bl	800db0a <__hi0bits>
 800d4fa:	f8d8 6000 	ldr.w	r6, [r8]
 800d4fe:	1a3f      	subs	r7, r7, r0
 800d500:	42b7      	cmp	r7, r6
 800d502:	dd64      	ble.n	800d5ce <__gethex+0x260>
 800d504:	1bbf      	subs	r7, r7, r6
 800d506:	4639      	mov	r1, r7
 800d508:	4628      	mov	r0, r5
 800d50a:	f000 fe17 	bl	800e13c <__any_on>
 800d50e:	4682      	mov	sl, r0
 800d510:	b178      	cbz	r0, 800d532 <__gethex+0x1c4>
 800d512:	1e7b      	subs	r3, r7, #1
 800d514:	1159      	asrs	r1, r3, #5
 800d516:	f003 021f 	and.w	r2, r3, #31
 800d51a:	f04f 0a01 	mov.w	sl, #1
 800d51e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d522:	fa0a f202 	lsl.w	r2, sl, r2
 800d526:	420a      	tst	r2, r1
 800d528:	d003      	beq.n	800d532 <__gethex+0x1c4>
 800d52a:	4553      	cmp	r3, sl
 800d52c:	dc46      	bgt.n	800d5bc <__gethex+0x24e>
 800d52e:	f04f 0a02 	mov.w	sl, #2
 800d532:	4639      	mov	r1, r7
 800d534:	4628      	mov	r0, r5
 800d536:	f7ff fecb 	bl	800d2d0 <rshift>
 800d53a:	443c      	add	r4, r7
 800d53c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d540:	42a3      	cmp	r3, r4
 800d542:	da52      	bge.n	800d5ea <__gethex+0x27c>
 800d544:	4629      	mov	r1, r5
 800d546:	9802      	ldr	r0, [sp, #8]
 800d548:	f000 fa4f 	bl	800d9ea <_Bfree>
 800d54c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d54e:	2300      	movs	r3, #0
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	27a3      	movs	r7, #163	; 0xa3
 800d554:	e793      	b.n	800d47e <__gethex+0x110>
 800d556:	3101      	adds	r1, #1
 800d558:	105b      	asrs	r3, r3, #1
 800d55a:	e7b0      	b.n	800d4be <__gethex+0x150>
 800d55c:	1e73      	subs	r3, r6, #1
 800d55e:	9305      	str	r3, [sp, #20]
 800d560:	9a07      	ldr	r2, [sp, #28]
 800d562:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d566:	4293      	cmp	r3, r2
 800d568:	d018      	beq.n	800d59c <__gethex+0x22e>
 800d56a:	f1bb 0f20 	cmp.w	fp, #32
 800d56e:	d107      	bne.n	800d580 <__gethex+0x212>
 800d570:	9b04      	ldr	r3, [sp, #16]
 800d572:	f8c3 a000 	str.w	sl, [r3]
 800d576:	3304      	adds	r3, #4
 800d578:	f04f 0a00 	mov.w	sl, #0
 800d57c:	9304      	str	r3, [sp, #16]
 800d57e:	46d3      	mov	fp, sl
 800d580:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d584:	f7ff fede 	bl	800d344 <__hexdig_fun>
 800d588:	f000 000f 	and.w	r0, r0, #15
 800d58c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d590:	ea4a 0a00 	orr.w	sl, sl, r0
 800d594:	f10b 0b04 	add.w	fp, fp, #4
 800d598:	9b05      	ldr	r3, [sp, #20]
 800d59a:	e00d      	b.n	800d5b8 <__gethex+0x24a>
 800d59c:	9b05      	ldr	r3, [sp, #20]
 800d59e:	9a08      	ldr	r2, [sp, #32]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	42bb      	cmp	r3, r7
 800d5a4:	d3e1      	bcc.n	800d56a <__gethex+0x1fc>
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	9a01      	ldr	r2, [sp, #4]
 800d5aa:	9903      	ldr	r1, [sp, #12]
 800d5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ae:	f000 ff47 	bl	800e440 <strncmp>
 800d5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d1d8      	bne.n	800d56a <__gethex+0x1fc>
 800d5b8:	461e      	mov	r6, r3
 800d5ba:	e791      	b.n	800d4e0 <__gethex+0x172>
 800d5bc:	1eb9      	subs	r1, r7, #2
 800d5be:	4628      	mov	r0, r5
 800d5c0:	f000 fdbc 	bl	800e13c <__any_on>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d0b2      	beq.n	800d52e <__gethex+0x1c0>
 800d5c8:	f04f 0a03 	mov.w	sl, #3
 800d5cc:	e7b1      	b.n	800d532 <__gethex+0x1c4>
 800d5ce:	da09      	bge.n	800d5e4 <__gethex+0x276>
 800d5d0:	1bf7      	subs	r7, r6, r7
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	463a      	mov	r2, r7
 800d5d6:	9802      	ldr	r0, [sp, #8]
 800d5d8:	f000 fbd2 	bl	800dd80 <__lshift>
 800d5dc:	1be4      	subs	r4, r4, r7
 800d5de:	4605      	mov	r5, r0
 800d5e0:	f100 0914 	add.w	r9, r0, #20
 800d5e4:	f04f 0a00 	mov.w	sl, #0
 800d5e8:	e7a8      	b.n	800d53c <__gethex+0x1ce>
 800d5ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d5ee:	42a0      	cmp	r0, r4
 800d5f0:	dd6a      	ble.n	800d6c8 <__gethex+0x35a>
 800d5f2:	1b04      	subs	r4, r0, r4
 800d5f4:	42a6      	cmp	r6, r4
 800d5f6:	dc2e      	bgt.n	800d656 <__gethex+0x2e8>
 800d5f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	d022      	beq.n	800d646 <__gethex+0x2d8>
 800d600:	2b03      	cmp	r3, #3
 800d602:	d024      	beq.n	800d64e <__gethex+0x2e0>
 800d604:	2b01      	cmp	r3, #1
 800d606:	d115      	bne.n	800d634 <__gethex+0x2c6>
 800d608:	42a6      	cmp	r6, r4
 800d60a:	d113      	bne.n	800d634 <__gethex+0x2c6>
 800d60c:	2e01      	cmp	r6, #1
 800d60e:	dc0b      	bgt.n	800d628 <__gethex+0x2ba>
 800d610:	9a06      	ldr	r2, [sp, #24]
 800d612:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d616:	6013      	str	r3, [r2, #0]
 800d618:	2301      	movs	r3, #1
 800d61a:	612b      	str	r3, [r5, #16]
 800d61c:	f8c9 3000 	str.w	r3, [r9]
 800d620:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d622:	2762      	movs	r7, #98	; 0x62
 800d624:	601d      	str	r5, [r3, #0]
 800d626:	e72a      	b.n	800d47e <__gethex+0x110>
 800d628:	1e71      	subs	r1, r6, #1
 800d62a:	4628      	mov	r0, r5
 800d62c:	f000 fd86 	bl	800e13c <__any_on>
 800d630:	2800      	cmp	r0, #0
 800d632:	d1ed      	bne.n	800d610 <__gethex+0x2a2>
 800d634:	4629      	mov	r1, r5
 800d636:	9802      	ldr	r0, [sp, #8]
 800d638:	f000 f9d7 	bl	800d9ea <_Bfree>
 800d63c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d63e:	2300      	movs	r3, #0
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	2750      	movs	r7, #80	; 0x50
 800d644:	e71b      	b.n	800d47e <__gethex+0x110>
 800d646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d0e1      	beq.n	800d610 <__gethex+0x2a2>
 800d64c:	e7f2      	b.n	800d634 <__gethex+0x2c6>
 800d64e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1dd      	bne.n	800d610 <__gethex+0x2a2>
 800d654:	e7ee      	b.n	800d634 <__gethex+0x2c6>
 800d656:	1e67      	subs	r7, r4, #1
 800d658:	f1ba 0f00 	cmp.w	sl, #0
 800d65c:	d131      	bne.n	800d6c2 <__gethex+0x354>
 800d65e:	b127      	cbz	r7, 800d66a <__gethex+0x2fc>
 800d660:	4639      	mov	r1, r7
 800d662:	4628      	mov	r0, r5
 800d664:	f000 fd6a 	bl	800e13c <__any_on>
 800d668:	4682      	mov	sl, r0
 800d66a:	117a      	asrs	r2, r7, #5
 800d66c:	2301      	movs	r3, #1
 800d66e:	f007 071f 	and.w	r7, r7, #31
 800d672:	fa03 f707 	lsl.w	r7, r3, r7
 800d676:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d67a:	4621      	mov	r1, r4
 800d67c:	421f      	tst	r7, r3
 800d67e:	4628      	mov	r0, r5
 800d680:	bf18      	it	ne
 800d682:	f04a 0a02 	orrne.w	sl, sl, #2
 800d686:	1b36      	subs	r6, r6, r4
 800d688:	f7ff fe22 	bl	800d2d0 <rshift>
 800d68c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d690:	2702      	movs	r7, #2
 800d692:	f1ba 0f00 	cmp.w	sl, #0
 800d696:	d048      	beq.n	800d72a <__gethex+0x3bc>
 800d698:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d015      	beq.n	800d6cc <__gethex+0x35e>
 800d6a0:	2b03      	cmp	r3, #3
 800d6a2:	d017      	beq.n	800d6d4 <__gethex+0x366>
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d109      	bne.n	800d6bc <__gethex+0x34e>
 800d6a8:	f01a 0f02 	tst.w	sl, #2
 800d6ac:	d006      	beq.n	800d6bc <__gethex+0x34e>
 800d6ae:	f8d9 3000 	ldr.w	r3, [r9]
 800d6b2:	ea4a 0a03 	orr.w	sl, sl, r3
 800d6b6:	f01a 0f01 	tst.w	sl, #1
 800d6ba:	d10e      	bne.n	800d6da <__gethex+0x36c>
 800d6bc:	f047 0710 	orr.w	r7, r7, #16
 800d6c0:	e033      	b.n	800d72a <__gethex+0x3bc>
 800d6c2:	f04f 0a01 	mov.w	sl, #1
 800d6c6:	e7d0      	b.n	800d66a <__gethex+0x2fc>
 800d6c8:	2701      	movs	r7, #1
 800d6ca:	e7e2      	b.n	800d692 <__gethex+0x324>
 800d6cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6ce:	f1c3 0301 	rsb	r3, r3, #1
 800d6d2:	9315      	str	r3, [sp, #84]	; 0x54
 800d6d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d0f0      	beq.n	800d6bc <__gethex+0x34e>
 800d6da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d6de:	f105 0314 	add.w	r3, r5, #20
 800d6e2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d6e6:	eb03 010a 	add.w	r1, r3, sl
 800d6ea:	f04f 0c00 	mov.w	ip, #0
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d6f8:	d01c      	beq.n	800d734 <__gethex+0x3c6>
 800d6fa:	3201      	adds	r2, #1
 800d6fc:	6002      	str	r2, [r0, #0]
 800d6fe:	2f02      	cmp	r7, #2
 800d700:	f105 0314 	add.w	r3, r5, #20
 800d704:	d138      	bne.n	800d778 <__gethex+0x40a>
 800d706:	f8d8 2000 	ldr.w	r2, [r8]
 800d70a:	3a01      	subs	r2, #1
 800d70c:	42b2      	cmp	r2, r6
 800d70e:	d10a      	bne.n	800d726 <__gethex+0x3b8>
 800d710:	1171      	asrs	r1, r6, #5
 800d712:	2201      	movs	r2, #1
 800d714:	f006 061f 	and.w	r6, r6, #31
 800d718:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d71c:	fa02 f606 	lsl.w	r6, r2, r6
 800d720:	421e      	tst	r6, r3
 800d722:	bf18      	it	ne
 800d724:	4617      	movne	r7, r2
 800d726:	f047 0720 	orr.w	r7, r7, #32
 800d72a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d72c:	601d      	str	r5, [r3, #0]
 800d72e:	9b06      	ldr	r3, [sp, #24]
 800d730:	601c      	str	r4, [r3, #0]
 800d732:	e6a4      	b.n	800d47e <__gethex+0x110>
 800d734:	4299      	cmp	r1, r3
 800d736:	f843 cc04 	str.w	ip, [r3, #-4]
 800d73a:	d8d8      	bhi.n	800d6ee <__gethex+0x380>
 800d73c:	68ab      	ldr	r3, [r5, #8]
 800d73e:	4599      	cmp	r9, r3
 800d740:	db12      	blt.n	800d768 <__gethex+0x3fa>
 800d742:	6869      	ldr	r1, [r5, #4]
 800d744:	9802      	ldr	r0, [sp, #8]
 800d746:	3101      	adds	r1, #1
 800d748:	f000 f91b 	bl	800d982 <_Balloc>
 800d74c:	692a      	ldr	r2, [r5, #16]
 800d74e:	3202      	adds	r2, #2
 800d750:	f105 010c 	add.w	r1, r5, #12
 800d754:	4683      	mov	fp, r0
 800d756:	0092      	lsls	r2, r2, #2
 800d758:	300c      	adds	r0, #12
 800d75a:	f000 f905 	bl	800d968 <memcpy>
 800d75e:	4629      	mov	r1, r5
 800d760:	9802      	ldr	r0, [sp, #8]
 800d762:	f000 f942 	bl	800d9ea <_Bfree>
 800d766:	465d      	mov	r5, fp
 800d768:	692b      	ldr	r3, [r5, #16]
 800d76a:	1c5a      	adds	r2, r3, #1
 800d76c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d770:	612a      	str	r2, [r5, #16]
 800d772:	2201      	movs	r2, #1
 800d774:	615a      	str	r2, [r3, #20]
 800d776:	e7c2      	b.n	800d6fe <__gethex+0x390>
 800d778:	692a      	ldr	r2, [r5, #16]
 800d77a:	454a      	cmp	r2, r9
 800d77c:	dd0b      	ble.n	800d796 <__gethex+0x428>
 800d77e:	2101      	movs	r1, #1
 800d780:	4628      	mov	r0, r5
 800d782:	f7ff fda5 	bl	800d2d0 <rshift>
 800d786:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d78a:	3401      	adds	r4, #1
 800d78c:	42a3      	cmp	r3, r4
 800d78e:	f6ff aed9 	blt.w	800d544 <__gethex+0x1d6>
 800d792:	2701      	movs	r7, #1
 800d794:	e7c7      	b.n	800d726 <__gethex+0x3b8>
 800d796:	f016 061f 	ands.w	r6, r6, #31
 800d79a:	d0fa      	beq.n	800d792 <__gethex+0x424>
 800d79c:	449a      	add	sl, r3
 800d79e:	f1c6 0620 	rsb	r6, r6, #32
 800d7a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d7a6:	f000 f9b0 	bl	800db0a <__hi0bits>
 800d7aa:	42b0      	cmp	r0, r6
 800d7ac:	dbe7      	blt.n	800d77e <__gethex+0x410>
 800d7ae:	e7f0      	b.n	800d792 <__gethex+0x424>

0800d7b0 <L_shift>:
 800d7b0:	f1c2 0208 	rsb	r2, r2, #8
 800d7b4:	0092      	lsls	r2, r2, #2
 800d7b6:	b570      	push	{r4, r5, r6, lr}
 800d7b8:	f1c2 0620 	rsb	r6, r2, #32
 800d7bc:	6843      	ldr	r3, [r0, #4]
 800d7be:	6804      	ldr	r4, [r0, #0]
 800d7c0:	fa03 f506 	lsl.w	r5, r3, r6
 800d7c4:	432c      	orrs	r4, r5
 800d7c6:	40d3      	lsrs	r3, r2
 800d7c8:	6004      	str	r4, [r0, #0]
 800d7ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800d7ce:	4288      	cmp	r0, r1
 800d7d0:	d3f4      	bcc.n	800d7bc <L_shift+0xc>
 800d7d2:	bd70      	pop	{r4, r5, r6, pc}

0800d7d4 <__match>:
 800d7d4:	b530      	push	{r4, r5, lr}
 800d7d6:	6803      	ldr	r3, [r0, #0]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7de:	b914      	cbnz	r4, 800d7e6 <__match+0x12>
 800d7e0:	6003      	str	r3, [r0, #0]
 800d7e2:	2001      	movs	r0, #1
 800d7e4:	bd30      	pop	{r4, r5, pc}
 800d7e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d7ee:	2d19      	cmp	r5, #25
 800d7f0:	bf98      	it	ls
 800d7f2:	3220      	addls	r2, #32
 800d7f4:	42a2      	cmp	r2, r4
 800d7f6:	d0f0      	beq.n	800d7da <__match+0x6>
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	e7f3      	b.n	800d7e4 <__match+0x10>

0800d7fc <__hexnan>:
 800d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d800:	680b      	ldr	r3, [r1, #0]
 800d802:	6801      	ldr	r1, [r0, #0]
 800d804:	115f      	asrs	r7, r3, #5
 800d806:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d80a:	f013 031f 	ands.w	r3, r3, #31
 800d80e:	b087      	sub	sp, #28
 800d810:	bf18      	it	ne
 800d812:	3704      	addne	r7, #4
 800d814:	2500      	movs	r5, #0
 800d816:	1f3e      	subs	r6, r7, #4
 800d818:	4682      	mov	sl, r0
 800d81a:	4690      	mov	r8, r2
 800d81c:	9301      	str	r3, [sp, #4]
 800d81e:	f847 5c04 	str.w	r5, [r7, #-4]
 800d822:	46b1      	mov	r9, r6
 800d824:	4634      	mov	r4, r6
 800d826:	9502      	str	r5, [sp, #8]
 800d828:	46ab      	mov	fp, r5
 800d82a:	784a      	ldrb	r2, [r1, #1]
 800d82c:	1c4b      	adds	r3, r1, #1
 800d82e:	9303      	str	r3, [sp, #12]
 800d830:	b342      	cbz	r2, 800d884 <__hexnan+0x88>
 800d832:	4610      	mov	r0, r2
 800d834:	9105      	str	r1, [sp, #20]
 800d836:	9204      	str	r2, [sp, #16]
 800d838:	f7ff fd84 	bl	800d344 <__hexdig_fun>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d143      	bne.n	800d8c8 <__hexnan+0xcc>
 800d840:	9a04      	ldr	r2, [sp, #16]
 800d842:	9905      	ldr	r1, [sp, #20]
 800d844:	2a20      	cmp	r2, #32
 800d846:	d818      	bhi.n	800d87a <__hexnan+0x7e>
 800d848:	9b02      	ldr	r3, [sp, #8]
 800d84a:	459b      	cmp	fp, r3
 800d84c:	dd13      	ble.n	800d876 <__hexnan+0x7a>
 800d84e:	454c      	cmp	r4, r9
 800d850:	d206      	bcs.n	800d860 <__hexnan+0x64>
 800d852:	2d07      	cmp	r5, #7
 800d854:	dc04      	bgt.n	800d860 <__hexnan+0x64>
 800d856:	462a      	mov	r2, r5
 800d858:	4649      	mov	r1, r9
 800d85a:	4620      	mov	r0, r4
 800d85c:	f7ff ffa8 	bl	800d7b0 <L_shift>
 800d860:	4544      	cmp	r4, r8
 800d862:	d944      	bls.n	800d8ee <__hexnan+0xf2>
 800d864:	2300      	movs	r3, #0
 800d866:	f1a4 0904 	sub.w	r9, r4, #4
 800d86a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d86e:	f8cd b008 	str.w	fp, [sp, #8]
 800d872:	464c      	mov	r4, r9
 800d874:	461d      	mov	r5, r3
 800d876:	9903      	ldr	r1, [sp, #12]
 800d878:	e7d7      	b.n	800d82a <__hexnan+0x2e>
 800d87a:	2a29      	cmp	r2, #41	; 0x29
 800d87c:	d14a      	bne.n	800d914 <__hexnan+0x118>
 800d87e:	3102      	adds	r1, #2
 800d880:	f8ca 1000 	str.w	r1, [sl]
 800d884:	f1bb 0f00 	cmp.w	fp, #0
 800d888:	d044      	beq.n	800d914 <__hexnan+0x118>
 800d88a:	454c      	cmp	r4, r9
 800d88c:	d206      	bcs.n	800d89c <__hexnan+0xa0>
 800d88e:	2d07      	cmp	r5, #7
 800d890:	dc04      	bgt.n	800d89c <__hexnan+0xa0>
 800d892:	462a      	mov	r2, r5
 800d894:	4649      	mov	r1, r9
 800d896:	4620      	mov	r0, r4
 800d898:	f7ff ff8a 	bl	800d7b0 <L_shift>
 800d89c:	4544      	cmp	r4, r8
 800d89e:	d928      	bls.n	800d8f2 <__hexnan+0xf6>
 800d8a0:	4643      	mov	r3, r8
 800d8a2:	f854 2b04 	ldr.w	r2, [r4], #4
 800d8a6:	f843 2b04 	str.w	r2, [r3], #4
 800d8aa:	42a6      	cmp	r6, r4
 800d8ac:	d2f9      	bcs.n	800d8a2 <__hexnan+0xa6>
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f843 2b04 	str.w	r2, [r3], #4
 800d8b4:	429e      	cmp	r6, r3
 800d8b6:	d2fb      	bcs.n	800d8b0 <__hexnan+0xb4>
 800d8b8:	6833      	ldr	r3, [r6, #0]
 800d8ba:	b91b      	cbnz	r3, 800d8c4 <__hexnan+0xc8>
 800d8bc:	4546      	cmp	r6, r8
 800d8be:	d127      	bne.n	800d910 <__hexnan+0x114>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	6033      	str	r3, [r6, #0]
 800d8c4:	2005      	movs	r0, #5
 800d8c6:	e026      	b.n	800d916 <__hexnan+0x11a>
 800d8c8:	3501      	adds	r5, #1
 800d8ca:	2d08      	cmp	r5, #8
 800d8cc:	f10b 0b01 	add.w	fp, fp, #1
 800d8d0:	dd06      	ble.n	800d8e0 <__hexnan+0xe4>
 800d8d2:	4544      	cmp	r4, r8
 800d8d4:	d9cf      	bls.n	800d876 <__hexnan+0x7a>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8dc:	2501      	movs	r5, #1
 800d8de:	3c04      	subs	r4, #4
 800d8e0:	6822      	ldr	r2, [r4, #0]
 800d8e2:	f000 000f 	and.w	r0, r0, #15
 800d8e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d8ea:	6020      	str	r0, [r4, #0]
 800d8ec:	e7c3      	b.n	800d876 <__hexnan+0x7a>
 800d8ee:	2508      	movs	r5, #8
 800d8f0:	e7c1      	b.n	800d876 <__hexnan+0x7a>
 800d8f2:	9b01      	ldr	r3, [sp, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d0df      	beq.n	800d8b8 <__hexnan+0xbc>
 800d8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fc:	f1c3 0320 	rsb	r3, r3, #32
 800d900:	fa22 f303 	lsr.w	r3, r2, r3
 800d904:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d908:	401a      	ands	r2, r3
 800d90a:	f847 2c04 	str.w	r2, [r7, #-4]
 800d90e:	e7d3      	b.n	800d8b8 <__hexnan+0xbc>
 800d910:	3e04      	subs	r6, #4
 800d912:	e7d1      	b.n	800d8b8 <__hexnan+0xbc>
 800d914:	2004      	movs	r0, #4
 800d916:	b007      	add	sp, #28
 800d918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d91c <__locale_ctype_ptr_l>:
 800d91c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d920:	4770      	bx	lr

0800d922 <__localeconv_l>:
 800d922:	30f0      	adds	r0, #240	; 0xf0
 800d924:	4770      	bx	lr
	...

0800d928 <_localeconv_r>:
 800d928:	4b04      	ldr	r3, [pc, #16]	; (800d93c <_localeconv_r+0x14>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6a18      	ldr	r0, [r3, #32]
 800d92e:	4b04      	ldr	r3, [pc, #16]	; (800d940 <_localeconv_r+0x18>)
 800d930:	2800      	cmp	r0, #0
 800d932:	bf08      	it	eq
 800d934:	4618      	moveq	r0, r3
 800d936:	30f0      	adds	r0, #240	; 0xf0
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	20000194 	.word	0x20000194
 800d940:	200001f8 	.word	0x200001f8

0800d944 <__ascii_mbtowc>:
 800d944:	b082      	sub	sp, #8
 800d946:	b901      	cbnz	r1, 800d94a <__ascii_mbtowc+0x6>
 800d948:	a901      	add	r1, sp, #4
 800d94a:	b142      	cbz	r2, 800d95e <__ascii_mbtowc+0x1a>
 800d94c:	b14b      	cbz	r3, 800d962 <__ascii_mbtowc+0x1e>
 800d94e:	7813      	ldrb	r3, [r2, #0]
 800d950:	600b      	str	r3, [r1, #0]
 800d952:	7812      	ldrb	r2, [r2, #0]
 800d954:	1c10      	adds	r0, r2, #0
 800d956:	bf18      	it	ne
 800d958:	2001      	movne	r0, #1
 800d95a:	b002      	add	sp, #8
 800d95c:	4770      	bx	lr
 800d95e:	4610      	mov	r0, r2
 800d960:	e7fb      	b.n	800d95a <__ascii_mbtowc+0x16>
 800d962:	f06f 0001 	mvn.w	r0, #1
 800d966:	e7f8      	b.n	800d95a <__ascii_mbtowc+0x16>

0800d968 <memcpy>:
 800d968:	b510      	push	{r4, lr}
 800d96a:	1e43      	subs	r3, r0, #1
 800d96c:	440a      	add	r2, r1
 800d96e:	4291      	cmp	r1, r2
 800d970:	d100      	bne.n	800d974 <memcpy+0xc>
 800d972:	bd10      	pop	{r4, pc}
 800d974:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d97c:	e7f7      	b.n	800d96e <memcpy+0x6>

0800d97e <__malloc_lock>:
 800d97e:	4770      	bx	lr

0800d980 <__malloc_unlock>:
 800d980:	4770      	bx	lr

0800d982 <_Balloc>:
 800d982:	b570      	push	{r4, r5, r6, lr}
 800d984:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d986:	4604      	mov	r4, r0
 800d988:	460e      	mov	r6, r1
 800d98a:	b93d      	cbnz	r5, 800d99c <_Balloc+0x1a>
 800d98c:	2010      	movs	r0, #16
 800d98e:	f7fd f85f 	bl	800aa50 <malloc>
 800d992:	6260      	str	r0, [r4, #36]	; 0x24
 800d994:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d998:	6005      	str	r5, [r0, #0]
 800d99a:	60c5      	str	r5, [r0, #12]
 800d99c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d99e:	68eb      	ldr	r3, [r5, #12]
 800d9a0:	b183      	cbz	r3, 800d9c4 <_Balloc+0x42>
 800d9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d9aa:	b9b8      	cbnz	r0, 800d9dc <_Balloc+0x5a>
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	fa01 f506 	lsl.w	r5, r1, r6
 800d9b2:	1d6a      	adds	r2, r5, #5
 800d9b4:	0092      	lsls	r2, r2, #2
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f000 fbe1 	bl	800e17e <_calloc_r>
 800d9bc:	b160      	cbz	r0, 800d9d8 <_Balloc+0x56>
 800d9be:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d9c2:	e00e      	b.n	800d9e2 <_Balloc+0x60>
 800d9c4:	2221      	movs	r2, #33	; 0x21
 800d9c6:	2104      	movs	r1, #4
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f000 fbd8 	bl	800e17e <_calloc_r>
 800d9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9d0:	60e8      	str	r0, [r5, #12]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1e4      	bne.n	800d9a2 <_Balloc+0x20>
 800d9d8:	2000      	movs	r0, #0
 800d9da:	bd70      	pop	{r4, r5, r6, pc}
 800d9dc:	6802      	ldr	r2, [r0, #0]
 800d9de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d9e8:	e7f7      	b.n	800d9da <_Balloc+0x58>

0800d9ea <_Bfree>:
 800d9ea:	b570      	push	{r4, r5, r6, lr}
 800d9ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	460d      	mov	r5, r1
 800d9f2:	b93c      	cbnz	r4, 800da04 <_Bfree+0x1a>
 800d9f4:	2010      	movs	r0, #16
 800d9f6:	f7fd f82b 	bl	800aa50 <malloc>
 800d9fa:	6270      	str	r0, [r6, #36]	; 0x24
 800d9fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da00:	6004      	str	r4, [r0, #0]
 800da02:	60c4      	str	r4, [r0, #12]
 800da04:	b13d      	cbz	r5, 800da16 <_Bfree+0x2c>
 800da06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800da08:	686a      	ldr	r2, [r5, #4]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da10:	6029      	str	r1, [r5, #0]
 800da12:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800da16:	bd70      	pop	{r4, r5, r6, pc}

0800da18 <__multadd>:
 800da18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da1c:	690d      	ldr	r5, [r1, #16]
 800da1e:	461f      	mov	r7, r3
 800da20:	4606      	mov	r6, r0
 800da22:	460c      	mov	r4, r1
 800da24:	f101 0c14 	add.w	ip, r1, #20
 800da28:	2300      	movs	r3, #0
 800da2a:	f8dc 0000 	ldr.w	r0, [ip]
 800da2e:	b281      	uxth	r1, r0
 800da30:	fb02 7101 	mla	r1, r2, r1, r7
 800da34:	0c0f      	lsrs	r7, r1, #16
 800da36:	0c00      	lsrs	r0, r0, #16
 800da38:	fb02 7000 	mla	r0, r2, r0, r7
 800da3c:	b289      	uxth	r1, r1
 800da3e:	3301      	adds	r3, #1
 800da40:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800da44:	429d      	cmp	r5, r3
 800da46:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800da4a:	f84c 1b04 	str.w	r1, [ip], #4
 800da4e:	dcec      	bgt.n	800da2a <__multadd+0x12>
 800da50:	b1d7      	cbz	r7, 800da88 <__multadd+0x70>
 800da52:	68a3      	ldr	r3, [r4, #8]
 800da54:	42ab      	cmp	r3, r5
 800da56:	dc12      	bgt.n	800da7e <__multadd+0x66>
 800da58:	6861      	ldr	r1, [r4, #4]
 800da5a:	4630      	mov	r0, r6
 800da5c:	3101      	adds	r1, #1
 800da5e:	f7ff ff90 	bl	800d982 <_Balloc>
 800da62:	6922      	ldr	r2, [r4, #16]
 800da64:	3202      	adds	r2, #2
 800da66:	f104 010c 	add.w	r1, r4, #12
 800da6a:	4680      	mov	r8, r0
 800da6c:	0092      	lsls	r2, r2, #2
 800da6e:	300c      	adds	r0, #12
 800da70:	f7ff ff7a 	bl	800d968 <memcpy>
 800da74:	4621      	mov	r1, r4
 800da76:	4630      	mov	r0, r6
 800da78:	f7ff ffb7 	bl	800d9ea <_Bfree>
 800da7c:	4644      	mov	r4, r8
 800da7e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da82:	3501      	adds	r5, #1
 800da84:	615f      	str	r7, [r3, #20]
 800da86:	6125      	str	r5, [r4, #16]
 800da88:	4620      	mov	r0, r4
 800da8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da8e <__s2b>:
 800da8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da92:	460c      	mov	r4, r1
 800da94:	4615      	mov	r5, r2
 800da96:	461f      	mov	r7, r3
 800da98:	2209      	movs	r2, #9
 800da9a:	3308      	adds	r3, #8
 800da9c:	4606      	mov	r6, r0
 800da9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800daa2:	2100      	movs	r1, #0
 800daa4:	2201      	movs	r2, #1
 800daa6:	429a      	cmp	r2, r3
 800daa8:	db20      	blt.n	800daec <__s2b+0x5e>
 800daaa:	4630      	mov	r0, r6
 800daac:	f7ff ff69 	bl	800d982 <_Balloc>
 800dab0:	9b08      	ldr	r3, [sp, #32]
 800dab2:	6143      	str	r3, [r0, #20]
 800dab4:	2d09      	cmp	r5, #9
 800dab6:	f04f 0301 	mov.w	r3, #1
 800daba:	6103      	str	r3, [r0, #16]
 800dabc:	dd19      	ble.n	800daf2 <__s2b+0x64>
 800dabe:	f104 0809 	add.w	r8, r4, #9
 800dac2:	46c1      	mov	r9, r8
 800dac4:	442c      	add	r4, r5
 800dac6:	f819 3b01 	ldrb.w	r3, [r9], #1
 800daca:	4601      	mov	r1, r0
 800dacc:	3b30      	subs	r3, #48	; 0x30
 800dace:	220a      	movs	r2, #10
 800dad0:	4630      	mov	r0, r6
 800dad2:	f7ff ffa1 	bl	800da18 <__multadd>
 800dad6:	45a1      	cmp	r9, r4
 800dad8:	d1f5      	bne.n	800dac6 <__s2b+0x38>
 800dada:	eb08 0405 	add.w	r4, r8, r5
 800dade:	3c08      	subs	r4, #8
 800dae0:	1b2d      	subs	r5, r5, r4
 800dae2:	1963      	adds	r3, r4, r5
 800dae4:	42bb      	cmp	r3, r7
 800dae6:	db07      	blt.n	800daf8 <__s2b+0x6a>
 800dae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daec:	0052      	lsls	r2, r2, #1
 800daee:	3101      	adds	r1, #1
 800daf0:	e7d9      	b.n	800daa6 <__s2b+0x18>
 800daf2:	340a      	adds	r4, #10
 800daf4:	2509      	movs	r5, #9
 800daf6:	e7f3      	b.n	800dae0 <__s2b+0x52>
 800daf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dafc:	4601      	mov	r1, r0
 800dafe:	3b30      	subs	r3, #48	; 0x30
 800db00:	220a      	movs	r2, #10
 800db02:	4630      	mov	r0, r6
 800db04:	f7ff ff88 	bl	800da18 <__multadd>
 800db08:	e7eb      	b.n	800dae2 <__s2b+0x54>

0800db0a <__hi0bits>:
 800db0a:	0c02      	lsrs	r2, r0, #16
 800db0c:	0412      	lsls	r2, r2, #16
 800db0e:	4603      	mov	r3, r0
 800db10:	b9b2      	cbnz	r2, 800db40 <__hi0bits+0x36>
 800db12:	0403      	lsls	r3, r0, #16
 800db14:	2010      	movs	r0, #16
 800db16:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800db1a:	bf04      	itt	eq
 800db1c:	021b      	lsleq	r3, r3, #8
 800db1e:	3008      	addeq	r0, #8
 800db20:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800db24:	bf04      	itt	eq
 800db26:	011b      	lsleq	r3, r3, #4
 800db28:	3004      	addeq	r0, #4
 800db2a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800db2e:	bf04      	itt	eq
 800db30:	009b      	lsleq	r3, r3, #2
 800db32:	3002      	addeq	r0, #2
 800db34:	2b00      	cmp	r3, #0
 800db36:	db06      	blt.n	800db46 <__hi0bits+0x3c>
 800db38:	005b      	lsls	r3, r3, #1
 800db3a:	d503      	bpl.n	800db44 <__hi0bits+0x3a>
 800db3c:	3001      	adds	r0, #1
 800db3e:	4770      	bx	lr
 800db40:	2000      	movs	r0, #0
 800db42:	e7e8      	b.n	800db16 <__hi0bits+0xc>
 800db44:	2020      	movs	r0, #32
 800db46:	4770      	bx	lr

0800db48 <__lo0bits>:
 800db48:	6803      	ldr	r3, [r0, #0]
 800db4a:	f013 0207 	ands.w	r2, r3, #7
 800db4e:	4601      	mov	r1, r0
 800db50:	d00b      	beq.n	800db6a <__lo0bits+0x22>
 800db52:	07da      	lsls	r2, r3, #31
 800db54:	d423      	bmi.n	800db9e <__lo0bits+0x56>
 800db56:	0798      	lsls	r0, r3, #30
 800db58:	bf49      	itett	mi
 800db5a:	085b      	lsrmi	r3, r3, #1
 800db5c:	089b      	lsrpl	r3, r3, #2
 800db5e:	2001      	movmi	r0, #1
 800db60:	600b      	strmi	r3, [r1, #0]
 800db62:	bf5c      	itt	pl
 800db64:	600b      	strpl	r3, [r1, #0]
 800db66:	2002      	movpl	r0, #2
 800db68:	4770      	bx	lr
 800db6a:	b298      	uxth	r0, r3
 800db6c:	b9a8      	cbnz	r0, 800db9a <__lo0bits+0x52>
 800db6e:	0c1b      	lsrs	r3, r3, #16
 800db70:	2010      	movs	r0, #16
 800db72:	f013 0fff 	tst.w	r3, #255	; 0xff
 800db76:	bf04      	itt	eq
 800db78:	0a1b      	lsreq	r3, r3, #8
 800db7a:	3008      	addeq	r0, #8
 800db7c:	071a      	lsls	r2, r3, #28
 800db7e:	bf04      	itt	eq
 800db80:	091b      	lsreq	r3, r3, #4
 800db82:	3004      	addeq	r0, #4
 800db84:	079a      	lsls	r2, r3, #30
 800db86:	bf04      	itt	eq
 800db88:	089b      	lsreq	r3, r3, #2
 800db8a:	3002      	addeq	r0, #2
 800db8c:	07da      	lsls	r2, r3, #31
 800db8e:	d402      	bmi.n	800db96 <__lo0bits+0x4e>
 800db90:	085b      	lsrs	r3, r3, #1
 800db92:	d006      	beq.n	800dba2 <__lo0bits+0x5a>
 800db94:	3001      	adds	r0, #1
 800db96:	600b      	str	r3, [r1, #0]
 800db98:	4770      	bx	lr
 800db9a:	4610      	mov	r0, r2
 800db9c:	e7e9      	b.n	800db72 <__lo0bits+0x2a>
 800db9e:	2000      	movs	r0, #0
 800dba0:	4770      	bx	lr
 800dba2:	2020      	movs	r0, #32
 800dba4:	4770      	bx	lr

0800dba6 <__i2b>:
 800dba6:	b510      	push	{r4, lr}
 800dba8:	460c      	mov	r4, r1
 800dbaa:	2101      	movs	r1, #1
 800dbac:	f7ff fee9 	bl	800d982 <_Balloc>
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	6144      	str	r4, [r0, #20]
 800dbb4:	6102      	str	r2, [r0, #16]
 800dbb6:	bd10      	pop	{r4, pc}

0800dbb8 <__multiply>:
 800dbb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbbc:	4614      	mov	r4, r2
 800dbbe:	690a      	ldr	r2, [r1, #16]
 800dbc0:	6923      	ldr	r3, [r4, #16]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	bfb8      	it	lt
 800dbc6:	460b      	movlt	r3, r1
 800dbc8:	4688      	mov	r8, r1
 800dbca:	bfbc      	itt	lt
 800dbcc:	46a0      	movlt	r8, r4
 800dbce:	461c      	movlt	r4, r3
 800dbd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dbd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dbd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dbe0:	eb07 0609 	add.w	r6, r7, r9
 800dbe4:	42b3      	cmp	r3, r6
 800dbe6:	bfb8      	it	lt
 800dbe8:	3101      	addlt	r1, #1
 800dbea:	f7ff feca 	bl	800d982 <_Balloc>
 800dbee:	f100 0514 	add.w	r5, r0, #20
 800dbf2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dbf6:	462b      	mov	r3, r5
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	4573      	cmp	r3, lr
 800dbfc:	d316      	bcc.n	800dc2c <__multiply+0x74>
 800dbfe:	f104 0214 	add.w	r2, r4, #20
 800dc02:	f108 0114 	add.w	r1, r8, #20
 800dc06:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dc0a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	9b00      	ldr	r3, [sp, #0]
 800dc12:	9201      	str	r2, [sp, #4]
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d80c      	bhi.n	800dc32 <__multiply+0x7a>
 800dc18:	2e00      	cmp	r6, #0
 800dc1a:	dd03      	ble.n	800dc24 <__multiply+0x6c>
 800dc1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d05d      	beq.n	800dce0 <__multiply+0x128>
 800dc24:	6106      	str	r6, [r0, #16]
 800dc26:	b003      	add	sp, #12
 800dc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2c:	f843 2b04 	str.w	r2, [r3], #4
 800dc30:	e7e3      	b.n	800dbfa <__multiply+0x42>
 800dc32:	f8b2 b000 	ldrh.w	fp, [r2]
 800dc36:	f1bb 0f00 	cmp.w	fp, #0
 800dc3a:	d023      	beq.n	800dc84 <__multiply+0xcc>
 800dc3c:	4689      	mov	r9, r1
 800dc3e:	46ac      	mov	ip, r5
 800dc40:	f04f 0800 	mov.w	r8, #0
 800dc44:	f859 4b04 	ldr.w	r4, [r9], #4
 800dc48:	f8dc a000 	ldr.w	sl, [ip]
 800dc4c:	b2a3      	uxth	r3, r4
 800dc4e:	fa1f fa8a 	uxth.w	sl, sl
 800dc52:	fb0b a303 	mla	r3, fp, r3, sl
 800dc56:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dc5a:	f8dc 4000 	ldr.w	r4, [ip]
 800dc5e:	4443      	add	r3, r8
 800dc60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dc64:	fb0b 840a 	mla	r4, fp, sl, r8
 800dc68:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800dc6c:	46e2      	mov	sl, ip
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dc74:	454f      	cmp	r7, r9
 800dc76:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dc7a:	f84a 3b04 	str.w	r3, [sl], #4
 800dc7e:	d82b      	bhi.n	800dcd8 <__multiply+0x120>
 800dc80:	f8cc 8004 	str.w	r8, [ip, #4]
 800dc84:	9b01      	ldr	r3, [sp, #4]
 800dc86:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800dc8a:	3204      	adds	r2, #4
 800dc8c:	f1ba 0f00 	cmp.w	sl, #0
 800dc90:	d020      	beq.n	800dcd4 <__multiply+0x11c>
 800dc92:	682b      	ldr	r3, [r5, #0]
 800dc94:	4689      	mov	r9, r1
 800dc96:	46a8      	mov	r8, r5
 800dc98:	f04f 0b00 	mov.w	fp, #0
 800dc9c:	f8b9 c000 	ldrh.w	ip, [r9]
 800dca0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800dca4:	fb0a 440c 	mla	r4, sl, ip, r4
 800dca8:	445c      	add	r4, fp
 800dcaa:	46c4      	mov	ip, r8
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dcb2:	f84c 3b04 	str.w	r3, [ip], #4
 800dcb6:	f859 3b04 	ldr.w	r3, [r9], #4
 800dcba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dcbe:	0c1b      	lsrs	r3, r3, #16
 800dcc0:	fb0a b303 	mla	r3, sl, r3, fp
 800dcc4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dcc8:	454f      	cmp	r7, r9
 800dcca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dcce:	d805      	bhi.n	800dcdc <__multiply+0x124>
 800dcd0:	f8c8 3004 	str.w	r3, [r8, #4]
 800dcd4:	3504      	adds	r5, #4
 800dcd6:	e79b      	b.n	800dc10 <__multiply+0x58>
 800dcd8:	46d4      	mov	ip, sl
 800dcda:	e7b3      	b.n	800dc44 <__multiply+0x8c>
 800dcdc:	46e0      	mov	r8, ip
 800dcde:	e7dd      	b.n	800dc9c <__multiply+0xe4>
 800dce0:	3e01      	subs	r6, #1
 800dce2:	e799      	b.n	800dc18 <__multiply+0x60>

0800dce4 <__pow5mult>:
 800dce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dce8:	4615      	mov	r5, r2
 800dcea:	f012 0203 	ands.w	r2, r2, #3
 800dcee:	4606      	mov	r6, r0
 800dcf0:	460f      	mov	r7, r1
 800dcf2:	d007      	beq.n	800dd04 <__pow5mult+0x20>
 800dcf4:	3a01      	subs	r2, #1
 800dcf6:	4c21      	ldr	r4, [pc, #132]	; (800dd7c <__pow5mult+0x98>)
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dcfe:	f7ff fe8b 	bl	800da18 <__multadd>
 800dd02:	4607      	mov	r7, r0
 800dd04:	10ad      	asrs	r5, r5, #2
 800dd06:	d035      	beq.n	800dd74 <__pow5mult+0x90>
 800dd08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dd0a:	b93c      	cbnz	r4, 800dd1c <__pow5mult+0x38>
 800dd0c:	2010      	movs	r0, #16
 800dd0e:	f7fc fe9f 	bl	800aa50 <malloc>
 800dd12:	6270      	str	r0, [r6, #36]	; 0x24
 800dd14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd18:	6004      	str	r4, [r0, #0]
 800dd1a:	60c4      	str	r4, [r0, #12]
 800dd1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd24:	b94c      	cbnz	r4, 800dd3a <__pow5mult+0x56>
 800dd26:	f240 2171 	movw	r1, #625	; 0x271
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	f7ff ff3b 	bl	800dba6 <__i2b>
 800dd30:	2300      	movs	r3, #0
 800dd32:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd36:	4604      	mov	r4, r0
 800dd38:	6003      	str	r3, [r0, #0]
 800dd3a:	f04f 0800 	mov.w	r8, #0
 800dd3e:	07eb      	lsls	r3, r5, #31
 800dd40:	d50a      	bpl.n	800dd58 <__pow5mult+0x74>
 800dd42:	4639      	mov	r1, r7
 800dd44:	4622      	mov	r2, r4
 800dd46:	4630      	mov	r0, r6
 800dd48:	f7ff ff36 	bl	800dbb8 <__multiply>
 800dd4c:	4639      	mov	r1, r7
 800dd4e:	4681      	mov	r9, r0
 800dd50:	4630      	mov	r0, r6
 800dd52:	f7ff fe4a 	bl	800d9ea <_Bfree>
 800dd56:	464f      	mov	r7, r9
 800dd58:	106d      	asrs	r5, r5, #1
 800dd5a:	d00b      	beq.n	800dd74 <__pow5mult+0x90>
 800dd5c:	6820      	ldr	r0, [r4, #0]
 800dd5e:	b938      	cbnz	r0, 800dd70 <__pow5mult+0x8c>
 800dd60:	4622      	mov	r2, r4
 800dd62:	4621      	mov	r1, r4
 800dd64:	4630      	mov	r0, r6
 800dd66:	f7ff ff27 	bl	800dbb8 <__multiply>
 800dd6a:	6020      	str	r0, [r4, #0]
 800dd6c:	f8c0 8000 	str.w	r8, [r0]
 800dd70:	4604      	mov	r4, r0
 800dd72:	e7e4      	b.n	800dd3e <__pow5mult+0x5a>
 800dd74:	4638      	mov	r0, r7
 800dd76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd7a:	bf00      	nop
 800dd7c:	0800e790 	.word	0x0800e790

0800dd80 <__lshift>:
 800dd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd84:	460c      	mov	r4, r1
 800dd86:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd8a:	6923      	ldr	r3, [r4, #16]
 800dd8c:	6849      	ldr	r1, [r1, #4]
 800dd8e:	eb0a 0903 	add.w	r9, sl, r3
 800dd92:	68a3      	ldr	r3, [r4, #8]
 800dd94:	4607      	mov	r7, r0
 800dd96:	4616      	mov	r6, r2
 800dd98:	f109 0501 	add.w	r5, r9, #1
 800dd9c:	42ab      	cmp	r3, r5
 800dd9e:	db32      	blt.n	800de06 <__lshift+0x86>
 800dda0:	4638      	mov	r0, r7
 800dda2:	f7ff fdee 	bl	800d982 <_Balloc>
 800dda6:	2300      	movs	r3, #0
 800dda8:	4680      	mov	r8, r0
 800ddaa:	f100 0114 	add.w	r1, r0, #20
 800ddae:	461a      	mov	r2, r3
 800ddb0:	4553      	cmp	r3, sl
 800ddb2:	db2b      	blt.n	800de0c <__lshift+0x8c>
 800ddb4:	6920      	ldr	r0, [r4, #16]
 800ddb6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddba:	f104 0314 	add.w	r3, r4, #20
 800ddbe:	f016 021f 	ands.w	r2, r6, #31
 800ddc2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ddc6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ddca:	d025      	beq.n	800de18 <__lshift+0x98>
 800ddcc:	f1c2 0e20 	rsb	lr, r2, #32
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	681e      	ldr	r6, [r3, #0]
 800ddd4:	468a      	mov	sl, r1
 800ddd6:	4096      	lsls	r6, r2
 800ddd8:	4330      	orrs	r0, r6
 800ddda:	f84a 0b04 	str.w	r0, [sl], #4
 800ddde:	f853 0b04 	ldr.w	r0, [r3], #4
 800dde2:	459c      	cmp	ip, r3
 800dde4:	fa20 f00e 	lsr.w	r0, r0, lr
 800dde8:	d814      	bhi.n	800de14 <__lshift+0x94>
 800ddea:	6048      	str	r0, [r1, #4]
 800ddec:	b108      	cbz	r0, 800ddf2 <__lshift+0x72>
 800ddee:	f109 0502 	add.w	r5, r9, #2
 800ddf2:	3d01      	subs	r5, #1
 800ddf4:	4638      	mov	r0, r7
 800ddf6:	f8c8 5010 	str.w	r5, [r8, #16]
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	f7ff fdf5 	bl	800d9ea <_Bfree>
 800de00:	4640      	mov	r0, r8
 800de02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de06:	3101      	adds	r1, #1
 800de08:	005b      	lsls	r3, r3, #1
 800de0a:	e7c7      	b.n	800dd9c <__lshift+0x1c>
 800de0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800de10:	3301      	adds	r3, #1
 800de12:	e7cd      	b.n	800ddb0 <__lshift+0x30>
 800de14:	4651      	mov	r1, sl
 800de16:	e7dc      	b.n	800ddd2 <__lshift+0x52>
 800de18:	3904      	subs	r1, #4
 800de1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de1e:	f841 2f04 	str.w	r2, [r1, #4]!
 800de22:	459c      	cmp	ip, r3
 800de24:	d8f9      	bhi.n	800de1a <__lshift+0x9a>
 800de26:	e7e4      	b.n	800ddf2 <__lshift+0x72>

0800de28 <__mcmp>:
 800de28:	6903      	ldr	r3, [r0, #16]
 800de2a:	690a      	ldr	r2, [r1, #16]
 800de2c:	1a9b      	subs	r3, r3, r2
 800de2e:	b530      	push	{r4, r5, lr}
 800de30:	d10c      	bne.n	800de4c <__mcmp+0x24>
 800de32:	0092      	lsls	r2, r2, #2
 800de34:	3014      	adds	r0, #20
 800de36:	3114      	adds	r1, #20
 800de38:	1884      	adds	r4, r0, r2
 800de3a:	4411      	add	r1, r2
 800de3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800de40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800de44:	4295      	cmp	r5, r2
 800de46:	d003      	beq.n	800de50 <__mcmp+0x28>
 800de48:	d305      	bcc.n	800de56 <__mcmp+0x2e>
 800de4a:	2301      	movs	r3, #1
 800de4c:	4618      	mov	r0, r3
 800de4e:	bd30      	pop	{r4, r5, pc}
 800de50:	42a0      	cmp	r0, r4
 800de52:	d3f3      	bcc.n	800de3c <__mcmp+0x14>
 800de54:	e7fa      	b.n	800de4c <__mcmp+0x24>
 800de56:	f04f 33ff 	mov.w	r3, #4294967295
 800de5a:	e7f7      	b.n	800de4c <__mcmp+0x24>

0800de5c <__mdiff>:
 800de5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de60:	460d      	mov	r5, r1
 800de62:	4607      	mov	r7, r0
 800de64:	4611      	mov	r1, r2
 800de66:	4628      	mov	r0, r5
 800de68:	4614      	mov	r4, r2
 800de6a:	f7ff ffdd 	bl	800de28 <__mcmp>
 800de6e:	1e06      	subs	r6, r0, #0
 800de70:	d108      	bne.n	800de84 <__mdiff+0x28>
 800de72:	4631      	mov	r1, r6
 800de74:	4638      	mov	r0, r7
 800de76:	f7ff fd84 	bl	800d982 <_Balloc>
 800de7a:	2301      	movs	r3, #1
 800de7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800de80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de84:	bfa4      	itt	ge
 800de86:	4623      	movge	r3, r4
 800de88:	462c      	movge	r4, r5
 800de8a:	4638      	mov	r0, r7
 800de8c:	6861      	ldr	r1, [r4, #4]
 800de8e:	bfa6      	itte	ge
 800de90:	461d      	movge	r5, r3
 800de92:	2600      	movge	r6, #0
 800de94:	2601      	movlt	r6, #1
 800de96:	f7ff fd74 	bl	800d982 <_Balloc>
 800de9a:	692b      	ldr	r3, [r5, #16]
 800de9c:	60c6      	str	r6, [r0, #12]
 800de9e:	6926      	ldr	r6, [r4, #16]
 800dea0:	f105 0914 	add.w	r9, r5, #20
 800dea4:	f104 0214 	add.w	r2, r4, #20
 800dea8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800deac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800deb0:	f100 0514 	add.w	r5, r0, #20
 800deb4:	f04f 0e00 	mov.w	lr, #0
 800deb8:	f852 ab04 	ldr.w	sl, [r2], #4
 800debc:	f859 4b04 	ldr.w	r4, [r9], #4
 800dec0:	fa1e f18a 	uxtah	r1, lr, sl
 800dec4:	b2a3      	uxth	r3, r4
 800dec6:	1ac9      	subs	r1, r1, r3
 800dec8:	0c23      	lsrs	r3, r4, #16
 800deca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800dece:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ded2:	b289      	uxth	r1, r1
 800ded4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ded8:	45c8      	cmp	r8, r9
 800deda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dede:	4694      	mov	ip, r2
 800dee0:	f845 3b04 	str.w	r3, [r5], #4
 800dee4:	d8e8      	bhi.n	800deb8 <__mdiff+0x5c>
 800dee6:	45bc      	cmp	ip, r7
 800dee8:	d304      	bcc.n	800def4 <__mdiff+0x98>
 800deea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800deee:	b183      	cbz	r3, 800df12 <__mdiff+0xb6>
 800def0:	6106      	str	r6, [r0, #16]
 800def2:	e7c5      	b.n	800de80 <__mdiff+0x24>
 800def4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800def8:	fa1e f381 	uxtah	r3, lr, r1
 800defc:	141a      	asrs	r2, r3, #16
 800defe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df02:	b29b      	uxth	r3, r3
 800df04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df08:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800df0c:	f845 3b04 	str.w	r3, [r5], #4
 800df10:	e7e9      	b.n	800dee6 <__mdiff+0x8a>
 800df12:	3e01      	subs	r6, #1
 800df14:	e7e9      	b.n	800deea <__mdiff+0x8e>
	...

0800df18 <__ulp>:
 800df18:	4b12      	ldr	r3, [pc, #72]	; (800df64 <__ulp+0x4c>)
 800df1a:	ee10 2a90 	vmov	r2, s1
 800df1e:	401a      	ands	r2, r3
 800df20:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800df24:	2b00      	cmp	r3, #0
 800df26:	dd04      	ble.n	800df32 <__ulp+0x1a>
 800df28:	2000      	movs	r0, #0
 800df2a:	4619      	mov	r1, r3
 800df2c:	ec41 0b10 	vmov	d0, r0, r1
 800df30:	4770      	bx	lr
 800df32:	425b      	negs	r3, r3
 800df34:	151b      	asrs	r3, r3, #20
 800df36:	2b13      	cmp	r3, #19
 800df38:	f04f 0000 	mov.w	r0, #0
 800df3c:	f04f 0100 	mov.w	r1, #0
 800df40:	dc04      	bgt.n	800df4c <__ulp+0x34>
 800df42:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800df46:	fa42 f103 	asr.w	r1, r2, r3
 800df4a:	e7ef      	b.n	800df2c <__ulp+0x14>
 800df4c:	3b14      	subs	r3, #20
 800df4e:	2b1e      	cmp	r3, #30
 800df50:	f04f 0201 	mov.w	r2, #1
 800df54:	bfda      	itte	le
 800df56:	f1c3 031f 	rsble	r3, r3, #31
 800df5a:	fa02 f303 	lslle.w	r3, r2, r3
 800df5e:	4613      	movgt	r3, r2
 800df60:	4618      	mov	r0, r3
 800df62:	e7e3      	b.n	800df2c <__ulp+0x14>
 800df64:	7ff00000 	.word	0x7ff00000

0800df68 <__b2d>:
 800df68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6a:	6905      	ldr	r5, [r0, #16]
 800df6c:	f100 0714 	add.w	r7, r0, #20
 800df70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800df74:	1f2e      	subs	r6, r5, #4
 800df76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7ff fdc5 	bl	800db0a <__hi0bits>
 800df80:	f1c0 0320 	rsb	r3, r0, #32
 800df84:	280a      	cmp	r0, #10
 800df86:	600b      	str	r3, [r1, #0]
 800df88:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e000 <__b2d+0x98>
 800df8c:	dc14      	bgt.n	800dfb8 <__b2d+0x50>
 800df8e:	f1c0 0e0b 	rsb	lr, r0, #11
 800df92:	fa24 f10e 	lsr.w	r1, r4, lr
 800df96:	42b7      	cmp	r7, r6
 800df98:	ea41 030c 	orr.w	r3, r1, ip
 800df9c:	bf34      	ite	cc
 800df9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dfa2:	2100      	movcs	r1, #0
 800dfa4:	3015      	adds	r0, #21
 800dfa6:	fa04 f000 	lsl.w	r0, r4, r0
 800dfaa:	fa21 f10e 	lsr.w	r1, r1, lr
 800dfae:	ea40 0201 	orr.w	r2, r0, r1
 800dfb2:	ec43 2b10 	vmov	d0, r2, r3
 800dfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfb8:	42b7      	cmp	r7, r6
 800dfba:	bf3a      	itte	cc
 800dfbc:	f1a5 0608 	subcc.w	r6, r5, #8
 800dfc0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dfc4:	2100      	movcs	r1, #0
 800dfc6:	380b      	subs	r0, #11
 800dfc8:	d015      	beq.n	800dff6 <__b2d+0x8e>
 800dfca:	4084      	lsls	r4, r0
 800dfcc:	f1c0 0520 	rsb	r5, r0, #32
 800dfd0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800dfd4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800dfd8:	42be      	cmp	r6, r7
 800dfda:	fa21 fc05 	lsr.w	ip, r1, r5
 800dfde:	ea44 030c 	orr.w	r3, r4, ip
 800dfe2:	bf8c      	ite	hi
 800dfe4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dfe8:	2400      	movls	r4, #0
 800dfea:	fa01 f000 	lsl.w	r0, r1, r0
 800dfee:	40ec      	lsrs	r4, r5
 800dff0:	ea40 0204 	orr.w	r2, r0, r4
 800dff4:	e7dd      	b.n	800dfb2 <__b2d+0x4a>
 800dff6:	ea44 030c 	orr.w	r3, r4, ip
 800dffa:	460a      	mov	r2, r1
 800dffc:	e7d9      	b.n	800dfb2 <__b2d+0x4a>
 800dffe:	bf00      	nop
 800e000:	3ff00000 	.word	0x3ff00000

0800e004 <__d2b>:
 800e004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e008:	460e      	mov	r6, r1
 800e00a:	2101      	movs	r1, #1
 800e00c:	ec59 8b10 	vmov	r8, r9, d0
 800e010:	4615      	mov	r5, r2
 800e012:	f7ff fcb6 	bl	800d982 <_Balloc>
 800e016:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e01a:	4607      	mov	r7, r0
 800e01c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e020:	bb34      	cbnz	r4, 800e070 <__d2b+0x6c>
 800e022:	9301      	str	r3, [sp, #4]
 800e024:	f1b8 0300 	subs.w	r3, r8, #0
 800e028:	d027      	beq.n	800e07a <__d2b+0x76>
 800e02a:	a802      	add	r0, sp, #8
 800e02c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e030:	f7ff fd8a 	bl	800db48 <__lo0bits>
 800e034:	9900      	ldr	r1, [sp, #0]
 800e036:	b1f0      	cbz	r0, 800e076 <__d2b+0x72>
 800e038:	9a01      	ldr	r2, [sp, #4]
 800e03a:	f1c0 0320 	rsb	r3, r0, #32
 800e03e:	fa02 f303 	lsl.w	r3, r2, r3
 800e042:	430b      	orrs	r3, r1
 800e044:	40c2      	lsrs	r2, r0
 800e046:	617b      	str	r3, [r7, #20]
 800e048:	9201      	str	r2, [sp, #4]
 800e04a:	9b01      	ldr	r3, [sp, #4]
 800e04c:	61bb      	str	r3, [r7, #24]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	bf14      	ite	ne
 800e052:	2102      	movne	r1, #2
 800e054:	2101      	moveq	r1, #1
 800e056:	6139      	str	r1, [r7, #16]
 800e058:	b1c4      	cbz	r4, 800e08c <__d2b+0x88>
 800e05a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e05e:	4404      	add	r4, r0
 800e060:	6034      	str	r4, [r6, #0]
 800e062:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e066:	6028      	str	r0, [r5, #0]
 800e068:	4638      	mov	r0, r7
 800e06a:	b003      	add	sp, #12
 800e06c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e074:	e7d5      	b.n	800e022 <__d2b+0x1e>
 800e076:	6179      	str	r1, [r7, #20]
 800e078:	e7e7      	b.n	800e04a <__d2b+0x46>
 800e07a:	a801      	add	r0, sp, #4
 800e07c:	f7ff fd64 	bl	800db48 <__lo0bits>
 800e080:	9b01      	ldr	r3, [sp, #4]
 800e082:	617b      	str	r3, [r7, #20]
 800e084:	2101      	movs	r1, #1
 800e086:	6139      	str	r1, [r7, #16]
 800e088:	3020      	adds	r0, #32
 800e08a:	e7e5      	b.n	800e058 <__d2b+0x54>
 800e08c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e090:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e094:	6030      	str	r0, [r6, #0]
 800e096:	6918      	ldr	r0, [r3, #16]
 800e098:	f7ff fd37 	bl	800db0a <__hi0bits>
 800e09c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e0a0:	e7e1      	b.n	800e066 <__d2b+0x62>

0800e0a2 <__ratio>:
 800e0a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a6:	4688      	mov	r8, r1
 800e0a8:	4669      	mov	r1, sp
 800e0aa:	4681      	mov	r9, r0
 800e0ac:	f7ff ff5c 	bl	800df68 <__b2d>
 800e0b0:	a901      	add	r1, sp, #4
 800e0b2:	4640      	mov	r0, r8
 800e0b4:	ec57 6b10 	vmov	r6, r7, d0
 800e0b8:	f7ff ff56 	bl	800df68 <__b2d>
 800e0bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e0c4:	eba3 0c02 	sub.w	ip, r3, r2
 800e0c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e0cc:	1a9b      	subs	r3, r3, r2
 800e0ce:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e0d2:	ec5b ab10 	vmov	sl, fp, d0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	bfce      	itee	gt
 800e0da:	463a      	movgt	r2, r7
 800e0dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e0e0:	465a      	movle	r2, fp
 800e0e2:	4659      	mov	r1, fp
 800e0e4:	463d      	mov	r5, r7
 800e0e6:	bfd4      	ite	le
 800e0e8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e0ec:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	ee10 2a10 	vmov	r2, s0
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	f7f2 fbaf 	bl	800085c <__aeabi_ddiv>
 800e0fe:	ec41 0b10 	vmov	d0, r0, r1
 800e102:	b003      	add	sp, #12
 800e104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e108 <__copybits>:
 800e108:	3901      	subs	r1, #1
 800e10a:	b510      	push	{r4, lr}
 800e10c:	1149      	asrs	r1, r1, #5
 800e10e:	6914      	ldr	r4, [r2, #16]
 800e110:	3101      	adds	r1, #1
 800e112:	f102 0314 	add.w	r3, r2, #20
 800e116:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e11a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e11e:	42a3      	cmp	r3, r4
 800e120:	4602      	mov	r2, r0
 800e122:	d303      	bcc.n	800e12c <__copybits+0x24>
 800e124:	2300      	movs	r3, #0
 800e126:	428a      	cmp	r2, r1
 800e128:	d305      	bcc.n	800e136 <__copybits+0x2e>
 800e12a:	bd10      	pop	{r4, pc}
 800e12c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e130:	f840 2b04 	str.w	r2, [r0], #4
 800e134:	e7f3      	b.n	800e11e <__copybits+0x16>
 800e136:	f842 3b04 	str.w	r3, [r2], #4
 800e13a:	e7f4      	b.n	800e126 <__copybits+0x1e>

0800e13c <__any_on>:
 800e13c:	f100 0214 	add.w	r2, r0, #20
 800e140:	6900      	ldr	r0, [r0, #16]
 800e142:	114b      	asrs	r3, r1, #5
 800e144:	4298      	cmp	r0, r3
 800e146:	b510      	push	{r4, lr}
 800e148:	db11      	blt.n	800e16e <__any_on+0x32>
 800e14a:	dd0a      	ble.n	800e162 <__any_on+0x26>
 800e14c:	f011 011f 	ands.w	r1, r1, #31
 800e150:	d007      	beq.n	800e162 <__any_on+0x26>
 800e152:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e156:	fa24 f001 	lsr.w	r0, r4, r1
 800e15a:	fa00 f101 	lsl.w	r1, r0, r1
 800e15e:	428c      	cmp	r4, r1
 800e160:	d10b      	bne.n	800e17a <__any_on+0x3e>
 800e162:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e166:	4293      	cmp	r3, r2
 800e168:	d803      	bhi.n	800e172 <__any_on+0x36>
 800e16a:	2000      	movs	r0, #0
 800e16c:	bd10      	pop	{r4, pc}
 800e16e:	4603      	mov	r3, r0
 800e170:	e7f7      	b.n	800e162 <__any_on+0x26>
 800e172:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e176:	2900      	cmp	r1, #0
 800e178:	d0f5      	beq.n	800e166 <__any_on+0x2a>
 800e17a:	2001      	movs	r0, #1
 800e17c:	e7f6      	b.n	800e16c <__any_on+0x30>

0800e17e <_calloc_r>:
 800e17e:	b538      	push	{r3, r4, r5, lr}
 800e180:	fb02 f401 	mul.w	r4, r2, r1
 800e184:	4621      	mov	r1, r4
 800e186:	f7fc fcc9 	bl	800ab1c <_malloc_r>
 800e18a:	4605      	mov	r5, r0
 800e18c:	b118      	cbz	r0, 800e196 <_calloc_r+0x18>
 800e18e:	4622      	mov	r2, r4
 800e190:	2100      	movs	r1, #0
 800e192:	f7fc fc6d 	bl	800aa70 <memset>
 800e196:	4628      	mov	r0, r5
 800e198:	bd38      	pop	{r3, r4, r5, pc}

0800e19a <__ssputs_r>:
 800e19a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e19e:	688e      	ldr	r6, [r1, #8]
 800e1a0:	429e      	cmp	r6, r3
 800e1a2:	4682      	mov	sl, r0
 800e1a4:	460c      	mov	r4, r1
 800e1a6:	4690      	mov	r8, r2
 800e1a8:	4699      	mov	r9, r3
 800e1aa:	d837      	bhi.n	800e21c <__ssputs_r+0x82>
 800e1ac:	898a      	ldrh	r2, [r1, #12]
 800e1ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1b2:	d031      	beq.n	800e218 <__ssputs_r+0x7e>
 800e1b4:	6825      	ldr	r5, [r4, #0]
 800e1b6:	6909      	ldr	r1, [r1, #16]
 800e1b8:	1a6f      	subs	r7, r5, r1
 800e1ba:	6965      	ldr	r5, [r4, #20]
 800e1bc:	2302      	movs	r3, #2
 800e1be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1c2:	fb95 f5f3 	sdiv	r5, r5, r3
 800e1c6:	f109 0301 	add.w	r3, r9, #1
 800e1ca:	443b      	add	r3, r7
 800e1cc:	429d      	cmp	r5, r3
 800e1ce:	bf38      	it	cc
 800e1d0:	461d      	movcc	r5, r3
 800e1d2:	0553      	lsls	r3, r2, #21
 800e1d4:	d530      	bpl.n	800e238 <__ssputs_r+0x9e>
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	f7fc fca0 	bl	800ab1c <_malloc_r>
 800e1dc:	4606      	mov	r6, r0
 800e1de:	b950      	cbnz	r0, 800e1f6 <__ssputs_r+0x5c>
 800e1e0:	230c      	movs	r3, #12
 800e1e2:	f8ca 3000 	str.w	r3, [sl]
 800e1e6:	89a3      	ldrh	r3, [r4, #12]
 800e1e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1ec:	81a3      	strh	r3, [r4, #12]
 800e1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1f6:	463a      	mov	r2, r7
 800e1f8:	6921      	ldr	r1, [r4, #16]
 800e1fa:	f7ff fbb5 	bl	800d968 <memcpy>
 800e1fe:	89a3      	ldrh	r3, [r4, #12]
 800e200:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e208:	81a3      	strh	r3, [r4, #12]
 800e20a:	6126      	str	r6, [r4, #16]
 800e20c:	6165      	str	r5, [r4, #20]
 800e20e:	443e      	add	r6, r7
 800e210:	1bed      	subs	r5, r5, r7
 800e212:	6026      	str	r6, [r4, #0]
 800e214:	60a5      	str	r5, [r4, #8]
 800e216:	464e      	mov	r6, r9
 800e218:	454e      	cmp	r6, r9
 800e21a:	d900      	bls.n	800e21e <__ssputs_r+0x84>
 800e21c:	464e      	mov	r6, r9
 800e21e:	4632      	mov	r2, r6
 800e220:	4641      	mov	r1, r8
 800e222:	6820      	ldr	r0, [r4, #0]
 800e224:	f000 f92b 	bl	800e47e <memmove>
 800e228:	68a3      	ldr	r3, [r4, #8]
 800e22a:	1b9b      	subs	r3, r3, r6
 800e22c:	60a3      	str	r3, [r4, #8]
 800e22e:	6823      	ldr	r3, [r4, #0]
 800e230:	441e      	add	r6, r3
 800e232:	6026      	str	r6, [r4, #0]
 800e234:	2000      	movs	r0, #0
 800e236:	e7dc      	b.n	800e1f2 <__ssputs_r+0x58>
 800e238:	462a      	mov	r2, r5
 800e23a:	f000 f939 	bl	800e4b0 <_realloc_r>
 800e23e:	4606      	mov	r6, r0
 800e240:	2800      	cmp	r0, #0
 800e242:	d1e2      	bne.n	800e20a <__ssputs_r+0x70>
 800e244:	6921      	ldr	r1, [r4, #16]
 800e246:	4650      	mov	r0, sl
 800e248:	f7fc fc1a 	bl	800aa80 <_free_r>
 800e24c:	e7c8      	b.n	800e1e0 <__ssputs_r+0x46>
	...

0800e250 <_svfiprintf_r>:
 800e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	461d      	mov	r5, r3
 800e256:	898b      	ldrh	r3, [r1, #12]
 800e258:	061f      	lsls	r7, r3, #24
 800e25a:	b09d      	sub	sp, #116	; 0x74
 800e25c:	4680      	mov	r8, r0
 800e25e:	460c      	mov	r4, r1
 800e260:	4616      	mov	r6, r2
 800e262:	d50f      	bpl.n	800e284 <_svfiprintf_r+0x34>
 800e264:	690b      	ldr	r3, [r1, #16]
 800e266:	b96b      	cbnz	r3, 800e284 <_svfiprintf_r+0x34>
 800e268:	2140      	movs	r1, #64	; 0x40
 800e26a:	f7fc fc57 	bl	800ab1c <_malloc_r>
 800e26e:	6020      	str	r0, [r4, #0]
 800e270:	6120      	str	r0, [r4, #16]
 800e272:	b928      	cbnz	r0, 800e280 <_svfiprintf_r+0x30>
 800e274:	230c      	movs	r3, #12
 800e276:	f8c8 3000 	str.w	r3, [r8]
 800e27a:	f04f 30ff 	mov.w	r0, #4294967295
 800e27e:	e0c8      	b.n	800e412 <_svfiprintf_r+0x1c2>
 800e280:	2340      	movs	r3, #64	; 0x40
 800e282:	6163      	str	r3, [r4, #20]
 800e284:	2300      	movs	r3, #0
 800e286:	9309      	str	r3, [sp, #36]	; 0x24
 800e288:	2320      	movs	r3, #32
 800e28a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e28e:	2330      	movs	r3, #48	; 0x30
 800e290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e294:	9503      	str	r5, [sp, #12]
 800e296:	f04f 0b01 	mov.w	fp, #1
 800e29a:	4637      	mov	r7, r6
 800e29c:	463d      	mov	r5, r7
 800e29e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e2a2:	b10b      	cbz	r3, 800e2a8 <_svfiprintf_r+0x58>
 800e2a4:	2b25      	cmp	r3, #37	; 0x25
 800e2a6:	d13e      	bne.n	800e326 <_svfiprintf_r+0xd6>
 800e2a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800e2ac:	d00b      	beq.n	800e2c6 <_svfiprintf_r+0x76>
 800e2ae:	4653      	mov	r3, sl
 800e2b0:	4632      	mov	r2, r6
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	4640      	mov	r0, r8
 800e2b6:	f7ff ff70 	bl	800e19a <__ssputs_r>
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	f000 80a4 	beq.w	800e408 <_svfiprintf_r+0x1b8>
 800e2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2c2:	4453      	add	r3, sl
 800e2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e2c6:	783b      	ldrb	r3, [r7, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f000 809d 	beq.w	800e408 <_svfiprintf_r+0x1b8>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e2d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2d8:	9304      	str	r3, [sp, #16]
 800e2da:	9307      	str	r3, [sp, #28]
 800e2dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2e0:	931a      	str	r3, [sp, #104]	; 0x68
 800e2e2:	462f      	mov	r7, r5
 800e2e4:	2205      	movs	r2, #5
 800e2e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e2ea:	4850      	ldr	r0, [pc, #320]	; (800e42c <_svfiprintf_r+0x1dc>)
 800e2ec:	f7f1 ff80 	bl	80001f0 <memchr>
 800e2f0:	9b04      	ldr	r3, [sp, #16]
 800e2f2:	b9d0      	cbnz	r0, 800e32a <_svfiprintf_r+0xda>
 800e2f4:	06d9      	lsls	r1, r3, #27
 800e2f6:	bf44      	itt	mi
 800e2f8:	2220      	movmi	r2, #32
 800e2fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e2fe:	071a      	lsls	r2, r3, #28
 800e300:	bf44      	itt	mi
 800e302:	222b      	movmi	r2, #43	; 0x2b
 800e304:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e308:	782a      	ldrb	r2, [r5, #0]
 800e30a:	2a2a      	cmp	r2, #42	; 0x2a
 800e30c:	d015      	beq.n	800e33a <_svfiprintf_r+0xea>
 800e30e:	9a07      	ldr	r2, [sp, #28]
 800e310:	462f      	mov	r7, r5
 800e312:	2000      	movs	r0, #0
 800e314:	250a      	movs	r5, #10
 800e316:	4639      	mov	r1, r7
 800e318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e31c:	3b30      	subs	r3, #48	; 0x30
 800e31e:	2b09      	cmp	r3, #9
 800e320:	d94d      	bls.n	800e3be <_svfiprintf_r+0x16e>
 800e322:	b1b8      	cbz	r0, 800e354 <_svfiprintf_r+0x104>
 800e324:	e00f      	b.n	800e346 <_svfiprintf_r+0xf6>
 800e326:	462f      	mov	r7, r5
 800e328:	e7b8      	b.n	800e29c <_svfiprintf_r+0x4c>
 800e32a:	4a40      	ldr	r2, [pc, #256]	; (800e42c <_svfiprintf_r+0x1dc>)
 800e32c:	1a80      	subs	r0, r0, r2
 800e32e:	fa0b f000 	lsl.w	r0, fp, r0
 800e332:	4318      	orrs	r0, r3
 800e334:	9004      	str	r0, [sp, #16]
 800e336:	463d      	mov	r5, r7
 800e338:	e7d3      	b.n	800e2e2 <_svfiprintf_r+0x92>
 800e33a:	9a03      	ldr	r2, [sp, #12]
 800e33c:	1d11      	adds	r1, r2, #4
 800e33e:	6812      	ldr	r2, [r2, #0]
 800e340:	9103      	str	r1, [sp, #12]
 800e342:	2a00      	cmp	r2, #0
 800e344:	db01      	blt.n	800e34a <_svfiprintf_r+0xfa>
 800e346:	9207      	str	r2, [sp, #28]
 800e348:	e004      	b.n	800e354 <_svfiprintf_r+0x104>
 800e34a:	4252      	negs	r2, r2
 800e34c:	f043 0302 	orr.w	r3, r3, #2
 800e350:	9207      	str	r2, [sp, #28]
 800e352:	9304      	str	r3, [sp, #16]
 800e354:	783b      	ldrb	r3, [r7, #0]
 800e356:	2b2e      	cmp	r3, #46	; 0x2e
 800e358:	d10c      	bne.n	800e374 <_svfiprintf_r+0x124>
 800e35a:	787b      	ldrb	r3, [r7, #1]
 800e35c:	2b2a      	cmp	r3, #42	; 0x2a
 800e35e:	d133      	bne.n	800e3c8 <_svfiprintf_r+0x178>
 800e360:	9b03      	ldr	r3, [sp, #12]
 800e362:	1d1a      	adds	r2, r3, #4
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	9203      	str	r2, [sp, #12]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	bfb8      	it	lt
 800e36c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e370:	3702      	adds	r7, #2
 800e372:	9305      	str	r3, [sp, #20]
 800e374:	4d2e      	ldr	r5, [pc, #184]	; (800e430 <_svfiprintf_r+0x1e0>)
 800e376:	7839      	ldrb	r1, [r7, #0]
 800e378:	2203      	movs	r2, #3
 800e37a:	4628      	mov	r0, r5
 800e37c:	f7f1 ff38 	bl	80001f0 <memchr>
 800e380:	b138      	cbz	r0, 800e392 <_svfiprintf_r+0x142>
 800e382:	2340      	movs	r3, #64	; 0x40
 800e384:	1b40      	subs	r0, r0, r5
 800e386:	fa03 f000 	lsl.w	r0, r3, r0
 800e38a:	9b04      	ldr	r3, [sp, #16]
 800e38c:	4303      	orrs	r3, r0
 800e38e:	3701      	adds	r7, #1
 800e390:	9304      	str	r3, [sp, #16]
 800e392:	7839      	ldrb	r1, [r7, #0]
 800e394:	4827      	ldr	r0, [pc, #156]	; (800e434 <_svfiprintf_r+0x1e4>)
 800e396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e39a:	2206      	movs	r2, #6
 800e39c:	1c7e      	adds	r6, r7, #1
 800e39e:	f7f1 ff27 	bl	80001f0 <memchr>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	d038      	beq.n	800e418 <_svfiprintf_r+0x1c8>
 800e3a6:	4b24      	ldr	r3, [pc, #144]	; (800e438 <_svfiprintf_r+0x1e8>)
 800e3a8:	bb13      	cbnz	r3, 800e3f0 <_svfiprintf_r+0x1a0>
 800e3aa:	9b03      	ldr	r3, [sp, #12]
 800e3ac:	3307      	adds	r3, #7
 800e3ae:	f023 0307 	bic.w	r3, r3, #7
 800e3b2:	3308      	adds	r3, #8
 800e3b4:	9303      	str	r3, [sp, #12]
 800e3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b8:	444b      	add	r3, r9
 800e3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800e3bc:	e76d      	b.n	800e29a <_svfiprintf_r+0x4a>
 800e3be:	fb05 3202 	mla	r2, r5, r2, r3
 800e3c2:	2001      	movs	r0, #1
 800e3c4:	460f      	mov	r7, r1
 800e3c6:	e7a6      	b.n	800e316 <_svfiprintf_r+0xc6>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	3701      	adds	r7, #1
 800e3cc:	9305      	str	r3, [sp, #20]
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	250a      	movs	r5, #10
 800e3d2:	4638      	mov	r0, r7
 800e3d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3d8:	3a30      	subs	r2, #48	; 0x30
 800e3da:	2a09      	cmp	r2, #9
 800e3dc:	d903      	bls.n	800e3e6 <_svfiprintf_r+0x196>
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0c8      	beq.n	800e374 <_svfiprintf_r+0x124>
 800e3e2:	9105      	str	r1, [sp, #20]
 800e3e4:	e7c6      	b.n	800e374 <_svfiprintf_r+0x124>
 800e3e6:	fb05 2101 	mla	r1, r5, r1, r2
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	4607      	mov	r7, r0
 800e3ee:	e7f0      	b.n	800e3d2 <_svfiprintf_r+0x182>
 800e3f0:	ab03      	add	r3, sp, #12
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	4622      	mov	r2, r4
 800e3f6:	4b11      	ldr	r3, [pc, #68]	; (800e43c <_svfiprintf_r+0x1ec>)
 800e3f8:	a904      	add	r1, sp, #16
 800e3fa:	4640      	mov	r0, r8
 800e3fc:	f7fc fc7c 	bl	800acf8 <_printf_float>
 800e400:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e404:	4681      	mov	r9, r0
 800e406:	d1d6      	bne.n	800e3b6 <_svfiprintf_r+0x166>
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	065b      	lsls	r3, r3, #25
 800e40c:	f53f af35 	bmi.w	800e27a <_svfiprintf_r+0x2a>
 800e410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e412:	b01d      	add	sp, #116	; 0x74
 800e414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e418:	ab03      	add	r3, sp, #12
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	4622      	mov	r2, r4
 800e41e:	4b07      	ldr	r3, [pc, #28]	; (800e43c <_svfiprintf_r+0x1ec>)
 800e420:	a904      	add	r1, sp, #16
 800e422:	4640      	mov	r0, r8
 800e424:	f7fc ff1e 	bl	800b264 <_printf_i>
 800e428:	e7ea      	b.n	800e400 <_svfiprintf_r+0x1b0>
 800e42a:	bf00      	nop
 800e42c:	0800e79c 	.word	0x0800e79c
 800e430:	0800e7a2 	.word	0x0800e7a2
 800e434:	0800e7a6 	.word	0x0800e7a6
 800e438:	0800acf9 	.word	0x0800acf9
 800e43c:	0800e19b 	.word	0x0800e19b

0800e440 <strncmp>:
 800e440:	b510      	push	{r4, lr}
 800e442:	b16a      	cbz	r2, 800e460 <strncmp+0x20>
 800e444:	3901      	subs	r1, #1
 800e446:	1884      	adds	r4, r0, r2
 800e448:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e44c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e450:	4293      	cmp	r3, r2
 800e452:	d103      	bne.n	800e45c <strncmp+0x1c>
 800e454:	42a0      	cmp	r0, r4
 800e456:	d001      	beq.n	800e45c <strncmp+0x1c>
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1f5      	bne.n	800e448 <strncmp+0x8>
 800e45c:	1a98      	subs	r0, r3, r2
 800e45e:	bd10      	pop	{r4, pc}
 800e460:	4610      	mov	r0, r2
 800e462:	e7fc      	b.n	800e45e <strncmp+0x1e>

0800e464 <__ascii_wctomb>:
 800e464:	b149      	cbz	r1, 800e47a <__ascii_wctomb+0x16>
 800e466:	2aff      	cmp	r2, #255	; 0xff
 800e468:	bf85      	ittet	hi
 800e46a:	238a      	movhi	r3, #138	; 0x8a
 800e46c:	6003      	strhi	r3, [r0, #0]
 800e46e:	700a      	strbls	r2, [r1, #0]
 800e470:	f04f 30ff 	movhi.w	r0, #4294967295
 800e474:	bf98      	it	ls
 800e476:	2001      	movls	r0, #1
 800e478:	4770      	bx	lr
 800e47a:	4608      	mov	r0, r1
 800e47c:	4770      	bx	lr

0800e47e <memmove>:
 800e47e:	4288      	cmp	r0, r1
 800e480:	b510      	push	{r4, lr}
 800e482:	eb01 0302 	add.w	r3, r1, r2
 800e486:	d807      	bhi.n	800e498 <memmove+0x1a>
 800e488:	1e42      	subs	r2, r0, #1
 800e48a:	4299      	cmp	r1, r3
 800e48c:	d00a      	beq.n	800e4a4 <memmove+0x26>
 800e48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e492:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e496:	e7f8      	b.n	800e48a <memmove+0xc>
 800e498:	4283      	cmp	r3, r0
 800e49a:	d9f5      	bls.n	800e488 <memmove+0xa>
 800e49c:	1881      	adds	r1, r0, r2
 800e49e:	1ad2      	subs	r2, r2, r3
 800e4a0:	42d3      	cmn	r3, r2
 800e4a2:	d100      	bne.n	800e4a6 <memmove+0x28>
 800e4a4:	bd10      	pop	{r4, pc}
 800e4a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4aa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e4ae:	e7f7      	b.n	800e4a0 <memmove+0x22>

0800e4b0 <_realloc_r>:
 800e4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b2:	4607      	mov	r7, r0
 800e4b4:	4614      	mov	r4, r2
 800e4b6:	460e      	mov	r6, r1
 800e4b8:	b921      	cbnz	r1, 800e4c4 <_realloc_r+0x14>
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e4c0:	f7fc bb2c 	b.w	800ab1c <_malloc_r>
 800e4c4:	b922      	cbnz	r2, 800e4d0 <_realloc_r+0x20>
 800e4c6:	f7fc fadb 	bl	800aa80 <_free_r>
 800e4ca:	4625      	mov	r5, r4
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4d0:	f000 f814 	bl	800e4fc <_malloc_usable_size_r>
 800e4d4:	42a0      	cmp	r0, r4
 800e4d6:	d20f      	bcs.n	800e4f8 <_realloc_r+0x48>
 800e4d8:	4621      	mov	r1, r4
 800e4da:	4638      	mov	r0, r7
 800e4dc:	f7fc fb1e 	bl	800ab1c <_malloc_r>
 800e4e0:	4605      	mov	r5, r0
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d0f2      	beq.n	800e4cc <_realloc_r+0x1c>
 800e4e6:	4631      	mov	r1, r6
 800e4e8:	4622      	mov	r2, r4
 800e4ea:	f7ff fa3d 	bl	800d968 <memcpy>
 800e4ee:	4631      	mov	r1, r6
 800e4f0:	4638      	mov	r0, r7
 800e4f2:	f7fc fac5 	bl	800aa80 <_free_r>
 800e4f6:	e7e9      	b.n	800e4cc <_realloc_r+0x1c>
 800e4f8:	4635      	mov	r5, r6
 800e4fa:	e7e7      	b.n	800e4cc <_realloc_r+0x1c>

0800e4fc <_malloc_usable_size_r>:
 800e4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e500:	1f18      	subs	r0, r3, #4
 800e502:	2b00      	cmp	r3, #0
 800e504:	bfbc      	itt	lt
 800e506:	580b      	ldrlt	r3, [r1, r0]
 800e508:	18c0      	addlt	r0, r0, r3
 800e50a:	4770      	bx	lr

0800e50c <_init>:
 800e50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50e:	bf00      	nop
 800e510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e512:	bc08      	pop	{r3}
 800e514:	469e      	mov	lr, r3
 800e516:	4770      	bx	lr

0800e518 <_fini>:
 800e518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51a:	bf00      	nop
 800e51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e51e:	bc08      	pop	{r3}
 800e520:	469e      	mov	lr, r3
 800e522:	4770      	bx	lr
