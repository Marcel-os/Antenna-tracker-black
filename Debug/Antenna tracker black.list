
Antenna tracker black.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012794  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  08012938  08012938  00022938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080130d8  080130d8  000303bc  2**0
                  CONTENTS
  4 .ARM          00000008  080130d8  080130d8  000230d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080130e0  080130e0  000303bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130e0  080130e0  000230e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080130e4  080130e4  000230e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003bc  20000000  080130e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fbc  200003c0  080134a4  000303c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000137c  080134a4  0003137c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed94  00000000  00000000  000303ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045e9  00000000  00000000  0004f180  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001670  00000000  00000000  00053770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001448  00000000  00000000  00054de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c30d  00000000  00000000  00056228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000165c0  00000000  00000000  00072535  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000971e1  00000000  00000000  00088af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fcd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007688  00000000  00000000  0011fd54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003c0 	.word	0x200003c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801291c 	.word	0x0801291c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003c4 	.word	0x200003c4
 80001dc:	0801291c 	.word	0x0801291c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <GPS_CallBack>:
	GPS.rxIndex=0;
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
}
//##################################################################################################################
void	GPS_CallBack(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8000f9c:	f001 fd6e 	bl	8002a7c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fa4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000faa:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fae:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000fb2:	d210      	bcs.n	8000fd6 <GPS_CallBack+0x3e>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fb6:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fbe:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fc4:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fc8:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fd2:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}	
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4903      	ldr	r1, [pc, #12]	; (8000fe8 <GPS_CallBack+0x50>)
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <GPS_CallBack+0x54>)
 8000fdc:	f005 fdcc 	bl	8006b78 <HAL_UART_Receive_IT>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200003f0 	.word	0x200003f0
 8000fe8:	200005f2 	.word	0x200005f2
 8000fec:	20000954 	.word	0x20000954

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <MX_ADC1_Init+0xb8>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800100a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800100e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001018:	2201      	movs	r2, #1
 800101a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800101e:	2201      	movs	r2, #1
 8001020:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001032:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <MX_ADC1_Init+0xbc>)
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800103e:	2202      	movs	r2, #2
 8001040:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800104c:	2201      	movs	r2, #1
 800104e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001052:	f001 fd41 	bl	8002ad8 <HAL_ADC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800105c:	f000 ffaa 	bl	8001fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001060:	2304      	movs	r3, #4
 8001062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001068:	2307      	movs	r3, #7
 800106a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001072:	f001 ffb1 	bl	8002fd8 <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800107c:	f000 ff9a 	bl	8001fb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001080:	2305      	movs	r3, #5
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800108e:	f001 ffa3 	bl	8002fd8 <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001098:	f000 ff8c 	bl	8001fb4 <Error_Handler>
  }

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000640 	.word	0x20000640
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a33      	ldr	r2, [pc, #204]	; (800119c <HAL_ADC_MspInit+0xec>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d15f      	bne.n	8001192 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800110a:	2330      	movs	r3, #48	; 0x30
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4821      	ldr	r0, [pc, #132]	; (80011a4 <HAL_ADC_MspInit+0xf4>)
 800111e:	f002 feb7 	bl	8003e90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800114c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001168:	f002 fb02 	bl	8003770 <HAL_DMA_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001172:	f000 ff1f 	bl	8001fb4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2012      	movs	r0, #18
 8001188:	f002 fabb 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800118c:	2012      	movs	r0, #18
 800118e:	f002 fad4 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40012000 	.word	0x40012000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	20000688 	.word	0x20000688
 80011ac:	40026410 	.word	0x40026410

080011b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_DMA_Init+0x3c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2038      	movs	r0, #56	; 0x38
 80011d8:	f002 fa93 	bl	8003702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011dc:	2038      	movs	r0, #56	; 0x38
 80011de:	f002 faac 	bl	800373a <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <MX_GPIO_Init+0xbc>)
 800127e:	f002 ffa1 	bl	80041c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin;
 8001282:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_GPIO_Init+0xbc>)
 800129c:	f002 fdf8 	bl	8003e90 <HAL_GPIO_Init>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400

080012b0 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 GPS_CallBack();
 80012b8:	f7ff fe6e 	bl	8000f98 <GPS_CallBack>
 //HAL_UART_Transmit_IT(&huart1, "RAMKA", sizeof("RAMKA"));
// HAL_UART_Transmit_IT(&huart1, &Received, 1); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
// HAL_UART_Receive_IT(&huart3, &Received, 1); // Ponowne włączenie nasłuchiwania

 //		GPS.GPGGA.LatitudeDecimal, GPS.GPGGA.LongitudeDecimal, GPS.GPGGA.MSL_Altitude
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_write>:

int _write(int file, char *ptr, int len){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
    CDC_Transmit_FS((uint8_t*)ptr, len);
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	68b8      	ldr	r0, [r7, #8]
 80012d4:	f009 fa78 	bl	800a7c8 <CDC_Transmit_FS>
    return len;
 80012d8:	687b      	ldr	r3, [r7, #4]

}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <parse>:

void parse(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	; 0x38
 80012e8:	af04      	add	r7, sp, #16
  	char header[1];
  	int32_t PWM1, PWM2, DIR1, DIR2;

  	sscanf(ReceivedData, "%s %d %d %d %d", &header, &PWM1, &PWM2, &DIR1, &DIR2);
 80012ea:	f107 0110 	add.w	r1, r7, #16
 80012ee:	f107 0214 	add.w	r2, r7, #20
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	460b      	mov	r3, r1
 8001304:	496a      	ldr	r1, [pc, #424]	; (80014b0 <parse+0x1cc>)
 8001306:	486b      	ldr	r0, [pc, #428]	; (80014b4 <parse+0x1d0>)
 8001308:	f00a fe70 	bl	800bfec <siscanf>
  	if( header[0] == 'S' && PWM1 >= 0 && PWM1 < 65535 && PWM2 >= 0 && PWM2 < 65535 && (DIR1 == 1 || DIR1 == 0) && (DIR2 == 1 || DIR2 == 0) )
 800130c:	7d3b      	ldrb	r3, [r7, #20]
 800130e:	2b53      	cmp	r3, #83	; 0x53
 8001310:	f040 80c7 	bne.w	80014a2 <parse+0x1be>
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f2c0 80c3 	blt.w	80014a2 <parse+0x1be>
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001322:	4293      	cmp	r3, r2
 8001324:	f300 80bd 	bgt.w	80014a2 <parse+0x1be>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f2c0 80b9 	blt.w	80014a2 <parse+0x1be>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001336:	4293      	cmp	r3, r2
 8001338:	f300 80b3 	bgt.w	80014a2 <parse+0x1be>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d003      	beq.n	800134a <parse+0x66>
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f040 80ac 	bne.w	80014a2 <parse+0x1be>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d003      	beq.n	8001358 <parse+0x74>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 80a5 	bne.w	80014a2 <parse+0x1be>
  	{
  		send_json(PWM1, PWM2);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f8b2 	bl	80014c8 <send_json>
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM1 );
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4b54      	ldr	r3, [pc, #336]	; (80014b8 <parse+0x1d4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	635a      	str	r2, [r3, #52]	; 0x34
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2 );
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <parse+0x1d4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	639a      	str	r2, [r3, #56]	; 0x38

  		if(DIR1 == 1){
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d10b      	bne.n	8001392 <parse+0xae>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001380:	484e      	ldr	r0, [pc, #312]	; (80014bc <parse+0x1d8>)
 8001382:	f002 ff1f 	bl	80041c4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138c:	484b      	ldr	r0, [pc, #300]	; (80014bc <parse+0x1d8>)
 800138e:	f002 ff19 	bl	80041c4 <HAL_GPIO_WritePin>
  		}

  		if(DIR1 == 0){
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10b      	bne.n	80013b0 <parse+0xcc>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800139e:	4847      	ldr	r0, [pc, #284]	; (80014bc <parse+0x1d8>)
 80013a0:	f002 ff10 	bl	80041c4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013aa:	4844      	ldr	r0, [pc, #272]	; (80014bc <parse+0x1d8>)
 80013ac:	f002 ff0a 	bl	80041c4 <HAL_GPIO_WritePin>
  		}

  		if(DIR2 == 1){
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d10b      	bne.n	80013ce <parse+0xea>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013bc:	483f      	ldr	r0, [pc, #252]	; (80014bc <parse+0x1d8>)
 80013be:	f002 ff01 	bl	80041c4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c8:	483c      	ldr	r0, [pc, #240]	; (80014bc <parse+0x1d8>)
 80013ca:	f002 fefb 	bl	80041c4 <HAL_GPIO_WritePin>
  		}

  		if(DIR2 == 0){
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10b      	bne.n	80013ec <parse+0x108>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013da:	4838      	ldr	r0, [pc, #224]	; (80014bc <parse+0x1d8>)
 80013dc:	f002 fef2 	bl	80041c4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e6:	4835      	ldr	r0, [pc, #212]	; (80014bc <parse+0x1d8>)
 80013e8:	f002 feec 	bl	80041c4 <HAL_GPIO_WritePin>
  		}

  		if( PWM1 == 0 && PWM2 ==0 ){
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11a      	bne.n	8001428 <parse+0x144>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d117      	bne.n	8001428 <parse+0x144>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fe:	482f      	ldr	r0, [pc, #188]	; (80014bc <parse+0x1d8>)
 8001400:	f002 fee0 	bl	80041c4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140a:	482c      	ldr	r0, [pc, #176]	; (80014bc <parse+0x1d8>)
 800140c:	f002 feda 	bl	80041c4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001416:	4829      	ldr	r0, [pc, #164]	; (80014bc <parse+0x1d8>)
 8001418:	f002 fed4 	bl	80041c4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001422:	4826      	ldr	r0, [pc, #152]	; (80014bc <parse+0x1d8>)
 8001424:	f002 fece 	bl	80041c4 <HAL_GPIO_WritePin>
  		}
  		//send_json(PWM1, PWM2);
  		int a = 0, b = 0, c = 0, d = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
  		if(HAL_GPIO_ReadPin(MOTOR11_GPIO_Port, MOTOR11_Pin) == GPIO_PIN_SET) a = 1;
 8001438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143c:	481f      	ldr	r0, [pc, #124]	; (80014bc <parse+0x1d8>)
 800143e:	f002 fea9 	bl	8004194 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <parse+0x168>
 8001448:	2301      	movs	r3, #1
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  		if(HAL_GPIO_ReadPin(MOTOR12_GPIO_Port, MOTOR12_Pin) == GPIO_PIN_SET) b = 1;
 800144c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <parse+0x1d8>)
 8001452:	f002 fe9f 	bl	8004194 <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <parse+0x17c>
 800145c:	2301      	movs	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
  		if(HAL_GPIO_ReadPin(MOTOR21_GPIO_Port, MOTOR21_Pin) == GPIO_PIN_SET) c = 1;
 8001460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001464:	4815      	ldr	r0, [pc, #84]	; (80014bc <parse+0x1d8>)
 8001466:	f002 fe95 	bl	8004194 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <parse+0x190>
 8001470:	2301      	movs	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
  		if(HAL_GPIO_ReadPin(MOTOR22_GPIO_Port, MOTOR22_Pin) == GPIO_PIN_SET) d = 1;
 8001474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001478:	4810      	ldr	r0, [pc, #64]	; (80014bc <parse+0x1d8>)
 800147a:	f002 fe8b 	bl	8004194 <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <parse+0x1a4>
 8001484:	2301      	movs	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]

  		printf("MOTOR11:%d MOTOR12:%d MOTOR21:%d MOTOR22:%d PWM1:%d PWM2:%d\r\n",a,b,c,d, PWM1, PWM2 );
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	9202      	str	r2, [sp, #8]
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	6a3a      	ldr	r2, [r7, #32]
 8001498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <parse+0x1dc>)
 800149c:	f00a fcf4 	bl	800be88 <iprintf>
  	{
 80014a0:	e002      	b.n	80014a8 <parse+0x1c4>
  		//send_json_error(message);

//	  	sprintf(DataToSend, "%d %d %d %d \r\n", PWM1, PWM2, DIR1, DIR2);
//	  	printf(DataToSend);
  	}else printf("error - zle dane \r\n");
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <parse+0x1e0>)
 80014a4:	f00a fd64 	bl	800bf70 <puts>
}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	08012938 	.word	0x08012938
 80014b4:	200007c8 	.word	0x200007c8
 80014b8:	200008d4 	.word	0x200008d4
 80014bc:	40020400 	.word	0x40020400
 80014c0:	08012948 	.word	0x08012948
 80014c4:	08012988 	.word	0x08012988

080014c8 <send_json>:

void send_json(int32_t Encoder1, int32_t Encoder2){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	printf("{\"enkoder1\":%d,\"enkoder2\":%d}\r\n", Encoder1, Encoder2);
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4803      	ldr	r0, [pc, #12]	; (80014e4 <send_json+0x1c>)
 80014d8:	f00a fcd6 	bl	800be88 <iprintf>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	0801299c 	.word	0x0801299c

080014e8 <send_json_ada>:

void send_json_ada(double azimuth, double altitude, double distance){
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b08b      	sub	sp, #44	; 0x2c
 80014ec:	af04      	add	r7, sp, #16
 80014ee:	ed87 0b04 	vstr	d0, [r7, #16]
 80014f2:	ed87 1b02 	vstr	d1, [r7, #8]
 80014f6:	ed87 2b00 	vstr	d2, [r7]
	printf("{\"azimuth\":%f,\"altitude\":%f,\"distance\":%f}\r\n", azimuth, altitude, distance);
 80014fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001502:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001506:	e9cd 3400 	strd	r3, r4, [sp]
 800150a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <send_json_ada+0x54>)
 8001510:	f00a fcba 	bl	800be88 <iprintf>
	g_azimuth = azimuth;
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <send_json_ada+0x58>)
 8001516:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800151a:	e9c2 3400 	strd	r3, r4, [r2]
	g_altitude = altitude;
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <send_json_ada+0x5c>)
 8001520:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001524:	e9c2 3400 	strd	r3, r4, [r2]
	g_distance = distance;
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <send_json_ada+0x60>)
 800152a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800152e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001532:	bf00      	nop
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	080129bc 	.word	0x080129bc
 8001540:	20000748 	.word	0x20000748
 8001544:	200007c0 	.word	0x200007c0
 8001548:	20000830 	.word	0x20000830

0800154c <send_json_error>:

void send_json_error( char *error){
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	printf("{\"error\":\"%s\"}\r\n", error);
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <send_json_error+0x18>)
 8001558:	f00a fc96 	bl	800be88 <iprintf>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	080129ec 	.word	0x080129ec

08001568 <send_json_position>:

void send_json_position(position actual, position predicted){
 8001568:	b084      	sub	sp, #16
 800156a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800156e:	b08d      	sub	sp, #52	; 0x34
 8001570:	af0a      	add	r7, sp, #40	; 0x28
 8001572:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printf("{\"PositionActual\":{\"Lat\":%f,\"Lon\":%f,\"Height\":%f},\"PositionPredicted\":{\"Lat\":%f,\"Lon\":%f,\"Height\":%f}}\r\n", actual.Latitude, actual.Longitude, actual.Height, predicted.Latitude, predicted.Longitude, predicted.Height );
 800157a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800157e:	ed87 7b00 	vstr	d7, [r7]
 8001582:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001586:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800158a:	e9d7 5614 	ldrd	r5, r6, [r7, #80]	; 0x50
 800158e:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8001592:	e9d7 ab18 	ldrd	sl, fp, [r7, #96]	; 0x60
 8001596:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800159a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800159e:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80015a2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80015a6:	e9cd 3400 	strd	r3, r4, [sp]
 80015aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <send_json_position+0x5c>)
 80015b0:	f00a fc6a 	bl	800be88 <iprintf>
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015be:	b004      	add	sp, #16
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	08012a00 	.word	0x08012a00

080015c8 <calc_azimuth>:

void calc_azimuth(double Latitude1, double Longitude1, double Height1, double Latitude2, double Longitude2, double Height2, double *azimuth, double *distance, double *altitude){ //Latitude = φ Longitude = λ
 80015c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015cc:	ed2d 8b02 	vpush	{d8}
 80015d0:	b09c      	sub	sp, #112	; 0x70
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80015d8:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80015dc:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80015e0:	ed87 3b08 	vstr	d3, [r7, #32]
 80015e4:	ed87 4b06 	vstr	d4, [r7, #24]
 80015e8:	ed87 5b04 	vstr	d5, [r7, #16]
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]

	Latitude1 *= (M_PI/180);
 80015f2:	a3e1      	add	r3, pc, #900	; (adr r3, 8001978 <calc_azimuth+0x3b0>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80015fc:	f7ff f804 	bl	8000608 <__aeabi_dmul>
 8001600:	4603      	mov	r3, r0
 8001602:	460c      	mov	r4, r1
 8001604:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	Longitude1 *= (M_PI/180);
 8001608:	a3db      	add	r3, pc, #876	; (adr r3, 8001978 <calc_azimuth+0x3b0>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001612:	f7fe fff9 	bl	8000608 <__aeabi_dmul>
 8001616:	4603      	mov	r3, r0
 8001618:	460c      	mov	r4, r1
 800161a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	Latitude2 *= (M_PI/180);
 800161e:	a3d6      	add	r3, pc, #856	; (adr r3, 8001978 <calc_azimuth+0x3b0>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001628:	f7fe ffee 	bl	8000608 <__aeabi_dmul>
 800162c:	4603      	mov	r3, r0
 800162e:	460c      	mov	r4, r1
 8001630:	e9c7 3408 	strd	r3, r4, [r7, #32]
	Longitude2 *= (M_PI/180);
 8001634:	a3d0      	add	r3, pc, #832	; (adr r3, 8001978 <calc_azimuth+0x3b0>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800163e:	f7fe ffe3 	bl	8000608 <__aeabi_dmul>
 8001642:	4603      	mov	r3, r0
 8001644:	460c      	mov	r4, r1
 8001646:	e9c7 3406 	strd	r3, r4, [r7, #24]
	Height1 /= 1000;
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	4bc8      	ldr	r3, [pc, #800]	; (8001970 <calc_azimuth+0x3a8>)
 8001650:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001654:	f7ff f902 	bl	800085c <__aeabi_ddiv>
 8001658:	4603      	mov	r3, r0
 800165a:	460c      	mov	r4, r1
 800165c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	Height2 /= 1000;
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	4bc2      	ldr	r3, [pc, #776]	; (8001970 <calc_azimuth+0x3a8>)
 8001666:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800166a:	f7ff f8f7 	bl	800085c <__aeabi_ddiv>
 800166e:	4603      	mov	r3, r0
 8001670:	460c      	mov	r4, r1
 8001672:	e9c7 3404 	strd	r3, r4, [r7, #16]

	double delta_Latitude = (Latitude2 - Latitude1);
 8001676:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800167a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800167e:	f7fe fe0b 	bl	8000298 <__aeabi_dsub>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	double delta_Longitude = (Longitude2 - Longitude1);
 800168a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800168e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001692:	f7fe fe01 	bl	8000298 <__aeabi_dsub>
 8001696:	4603      	mov	r3, r0
 8001698:	460c      	mov	r4, r1
 800169a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	double delta_Height = Height2 - Height1;
 800169e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016a6:	f7fe fdf7 	bl	8000298 <__aeabi_dsub>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58



	//θ = atan2 [(sin Δλ * cos φ₂), (cos φ�? * sin φ₂ �?� sin φ�? * cos φ₂ *  cos Δλ)]
	*azimuth = atan2( ( sin(delta_Longitude) * cos(Latitude2) ) , ( (cos(Latitude1) * sin(Latitude2)) - (sin(Latitude1) * cos(Latitude2) * cos(delta_Longitude)) ) ) * (180/ M_PI );
 80016b2:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80016b6:	f00e fbc3 	bl	800fe40 <sin>
 80016ba:	ec55 4b10 	vmov	r4, r5, d0
 80016be:	ed97 0b08 	vldr	d0, [r7, #32]
 80016c2:	f00e fb79 	bl	800fdb8 <cos>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe ff9b 	bl	8000608 <__aeabi_dmul>
 80016d2:	4603      	mov	r3, r0
 80016d4:	460c      	mov	r4, r1
 80016d6:	ec44 3b18 	vmov	d8, r3, r4
 80016da:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80016de:	f00e fb6b 	bl	800fdb8 <cos>
 80016e2:	ec55 4b10 	vmov	r4, r5, d0
 80016e6:	ed97 0b08 	vldr	d0, [r7, #32]
 80016ea:	f00e fba9 	bl	800fe40 <sin>
 80016ee:	ec53 2b10 	vmov	r2, r3, d0
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	f7fe ff87 	bl	8000608 <__aeabi_dmul>
 80016fa:	4603      	mov	r3, r0
 80016fc:	460c      	mov	r4, r1
 80016fe:	4625      	mov	r5, r4
 8001700:	461c      	mov	r4, r3
 8001702:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001706:	f00e fb9b 	bl	800fe40 <sin>
 800170a:	ec59 8b10 	vmov	r8, r9, d0
 800170e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001712:	f00e fb51 	bl	800fdb8 <cos>
 8001716:	ec53 2b10 	vmov	r2, r3, d0
 800171a:	4640      	mov	r0, r8
 800171c:	4649      	mov	r1, r9
 800171e:	f7fe ff73 	bl	8000608 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4690      	mov	r8, r2
 8001728:	4699      	mov	r9, r3
 800172a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800172e:	f00e fb43 	bl	800fdb8 <cos>
 8001732:	ec53 2b10 	vmov	r2, r3, d0
 8001736:	4640      	mov	r0, r8
 8001738:	4649      	mov	r1, r9
 800173a:	f7fe ff65 	bl	8000608 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fda7 	bl	8000298 <__aeabi_dsub>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	ec44 3b17 	vmov	d7, r3, r4
 8001752:	eeb0 1a47 	vmov.f32	s2, s14
 8001756:	eef0 1a67 	vmov.f32	s3, s15
 800175a:	eeb0 0a48 	vmov.f32	s0, s16
 800175e:	eef0 0a68 	vmov.f32	s1, s17
 8001762:	f00e fc0d 	bl	800ff80 <atan2>
 8001766:	ec51 0b10 	vmov	r0, r1, d0
 800176a:	a37b      	add	r3, pc, #492	; (adr r3, 8001958 <calc_azimuth+0x390>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff4a 	bl	8000608 <__aeabi_dmul>
 8001774:	4603      	mov	r3, r0
 8001776:	460c      	mov	r4, r1
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	e9c2 3400 	strd	r3, r4, [r2]
	//Haversine formula:
	//a = sin²(Δφ/2) + cos φ�? * cos φ₂ * sin²(Δλ/2)
	double a = pow( sin(delta_Latitude/2), 2.0 ) + (cos(Latitude1) * cos(Latitude2) * pow(sin(delta_Longitude/2), 2.0));
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001786:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800178a:	f7ff f867 	bl	800085c <__aeabi_ddiv>
 800178e:	4603      	mov	r3, r0
 8001790:	460c      	mov	r4, r1
 8001792:	ec44 3b17 	vmov	d7, r3, r4
 8001796:	eeb0 0a47 	vmov.f32	s0, s14
 800179a:	eef0 0a67 	vmov.f32	s1, s15
 800179e:	f00e fb4f 	bl	800fe40 <sin>
 80017a2:	eeb0 7a40 	vmov.f32	s14, s0
 80017a6:	eef0 7a60 	vmov.f32	s15, s1
 80017aa:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8001960 <calc_azimuth+0x398>
 80017ae:	eeb0 0a47 	vmov.f32	s0, s14
 80017b2:	eef0 0a67 	vmov.f32	s1, s15
 80017b6:	f00e fbe5 	bl	800ff84 <pow>
 80017ba:	ec59 8b10 	vmov	r8, r9, d0
 80017be:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80017c2:	f00e faf9 	bl	800fdb8 <cos>
 80017c6:	ec55 4b10 	vmov	r4, r5, d0
 80017ca:	ed97 0b08 	vldr	d0, [r7, #32]
 80017ce:	f00e faf3 	bl	800fdb8 <cos>
 80017d2:	ec53 2b10 	vmov	r2, r3, d0
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe ff15 	bl	8000608 <__aeabi_dmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	4625      	mov	r5, r4
 80017e4:	461c      	mov	r4, r3
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80017f2:	f7ff f833 	bl	800085c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	ec43 2b17 	vmov	d7, r2, r3
 80017fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001802:	eef0 0a67 	vmov.f32	s1, s15
 8001806:	f00e fb1b 	bl	800fe40 <sin>
 800180a:	eeb0 7a40 	vmov.f32	s14, s0
 800180e:	eef0 7a60 	vmov.f32	s15, s1
 8001812:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8001960 <calc_azimuth+0x398>
 8001816:	eeb0 0a47 	vmov.f32	s0, s14
 800181a:	eef0 0a67 	vmov.f32	s1, s15
 800181e:	f00e fbb1 	bl	800ff84 <pow>
 8001822:	ec53 2b10 	vmov	r2, r3, d0
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe feed 	bl	8000608 <__aeabi_dmul>
 800182e:	4603      	mov	r3, r0
 8001830:	460c      	mov	r4, r1
 8001832:	461a      	mov	r2, r3
 8001834:	4623      	mov	r3, r4
 8001836:	4640      	mov	r0, r8
 8001838:	4649      	mov	r1, r9
 800183a:	f7fe fd2f 	bl	800029c <__adddf3>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	//c = 2 * atan2 [�?�a, �?�(1�?�a)]
	double c = 2.0 * atan2( sqrt(a), sqrt(1.0-a));
 8001846:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800184a:	f00e fd0b 	bl	8010264 <sqrt>
 800184e:	eeb0 8a40 	vmov.f32	s16, s0
 8001852:	eef0 8a60 	vmov.f32	s17, s1
 8001856:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	4945      	ldr	r1, [pc, #276]	; (8001974 <calc_azimuth+0x3ac>)
 8001860:	f7fe fd1a 	bl	8000298 <__aeabi_dsub>
 8001864:	4603      	mov	r3, r0
 8001866:	460c      	mov	r4, r1
 8001868:	ec44 3b17 	vmov	d7, r3, r4
 800186c:	eeb0 0a47 	vmov.f32	s0, s14
 8001870:	eef0 0a67 	vmov.f32	s1, s15
 8001874:	f00e fcf6 	bl	8010264 <sqrt>
 8001878:	eeb0 7a40 	vmov.f32	s14, s0
 800187c:	eef0 7a60 	vmov.f32	s15, s1
 8001880:	eeb0 1a47 	vmov.f32	s2, s14
 8001884:	eef0 1a67 	vmov.f32	s3, s15
 8001888:	eeb0 0a48 	vmov.f32	s0, s16
 800188c:	eef0 0a68 	vmov.f32	s1, s17
 8001890:	f00e fb76 	bl	800ff80 <atan2>
 8001894:	ec51 0b10 	vmov	r0, r1, d0
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	f7fe fcfe 	bl	800029c <__adddf3>
 80018a0:	4603      	mov	r3, r0
 80018a2:	460c      	mov	r4, r1
 80018a4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	//d = R * c, R = 6371 km - radius of the Earth
	double sphere_distance = 6371.0 * c; // in km
 80018a8:	a32f      	add	r3, pc, #188	; (adr r3, 8001968 <calc_azimuth+0x3a0>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80018b2:	f7fe fea9 	bl	8000608 <__aeabi_dmul>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	*distance = sqrt( pow(sphere_distance, 2.0) + pow(delta_Height, 2.0));// in km
 80018be:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001960 <calc_azimuth+0x398>
 80018c2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80018c6:	f00e fb5d 	bl	800ff84 <pow>
 80018ca:	ec55 4b10 	vmov	r4, r5, d0
 80018ce:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001960 <calc_azimuth+0x398>
 80018d2:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80018d6:	f00e fb55 	bl	800ff84 <pow>
 80018da:	ec53 2b10 	vmov	r2, r3, d0
 80018de:	4620      	mov	r0, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	f7fe fcdb 	bl	800029c <__adddf3>
 80018e6:	4603      	mov	r3, r0
 80018e8:	460c      	mov	r4, r1
 80018ea:	ec44 3b17 	vmov	d7, r3, r4
 80018ee:	eeb0 0a47 	vmov.f32	s0, s14
 80018f2:	eef0 0a67 	vmov.f32	s1, s15
 80018f6:	f00e fcb5 	bl	8010264 <sqrt>
 80018fa:	eeb0 7a40 	vmov.f32	s14, s0
 80018fe:	eef0 7a60 	vmov.f32	s15, s1
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	ed83 7b00 	vstr	d7, [r3]
	*altitude = acos(sphere_distance/ *distance)  * (180/M_PI);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800190e:	461a      	mov	r2, r3
 8001910:	4623      	mov	r3, r4
 8001912:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001916:	f7fe ffa1 	bl	800085c <__aeabi_ddiv>
 800191a:	4603      	mov	r3, r0
 800191c:	460c      	mov	r4, r1
 800191e:	ec44 3b17 	vmov	d7, r3, r4
 8001922:	eeb0 0a47 	vmov.f32	s0, s14
 8001926:	eef0 0a67 	vmov.f32	s1, s15
 800192a:	f00e fad1 	bl	800fed0 <acos>
 800192e:	ec51 0b10 	vmov	r0, r1, d0
 8001932:	a309      	add	r3, pc, #36	; (adr r3, 8001958 <calc_azimuth+0x390>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe66 	bl	8000608 <__aeabi_dmul>
 800193c:	4603      	mov	r3, r0
 800193e:	460c      	mov	r4, r1
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001946:	bf00      	nop
 8001948:	3770      	adds	r7, #112	; 0x70
 800194a:	46bd      	mov	sp, r7
 800194c:	ecbd 8b02 	vpop	{d8}
 8001950:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001954:	f3af 8000 	nop.w
 8001958:	1a63c1f8 	.word	0x1a63c1f8
 800195c:	404ca5dc 	.word	0x404ca5dc
 8001960:	00000000 	.word	0x00000000
 8001964:	40000000 	.word	0x40000000
 8001968:	00000000 	.word	0x00000000
 800196c:	40b8e300 	.word	0x40b8e300
 8001970:	408f4000 	.word	0x408f4000
 8001974:	3ff00000 	.word	0x3ff00000
 8001978:	a2529d39 	.word	0xa2529d39
 800197c:	3f91df46 	.word	0x3f91df46

08001980 <parse_loc>:

	*distance = sqrt( pow(sphere_distance, 2.0) + pow(delta_Height, 2.0));// in km
	*altitude = acos(sphere_distance/ *distance)  * (180/M_PI);
}

void parse_loc(){
 8001980:	b580      	push	{r7, lr}
 8001982:	b09a      	sub	sp, #104	; 0x68
 8001984:	af06      	add	r7, sp, #24
  	char header[1];
  	double Latitude1, Longitude1, Height1, Latitude2, Longitude2, Height2, azimuth, distance, altitude;

  	sscanf(ReceivedData, "%s %lf %lf %lf %lf %lf %lf", &header, &Latitude1, &Longitude1, &Height1, &Latitude2, &Longitude2, &Height2);
 8001986:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800198a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	9304      	str	r3, [sp, #16]
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	9303      	str	r3, [sp, #12]
 800199a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199e:	9302      	str	r3, [sp, #8]
 80019a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	460b      	mov	r3, r1
 80019ae:	4920      	ldr	r1, [pc, #128]	; (8001a30 <parse_loc+0xb0>)
 80019b0:	4820      	ldr	r0, [pc, #128]	; (8001a34 <parse_loc+0xb4>)
 80019b2:	f00a fb1b 	bl	800bfec <siscanf>
  	if( header[0] == 'G' )
 80019b6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80019ba:	2b47      	cmp	r3, #71	; 0x47
 80019bc:	d130      	bne.n	8001a20 <parse_loc+0xa0>
  	{
  		calc_azimuth( Latitude1,  Longitude1,  Height1,  Latitude2,  Longitude2,  Height2,  &azimuth,  &distance,  &altitude);
 80019be:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80019c2:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80019c6:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 80019ca:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 80019ce:	ed97 4b08 	vldr	d4, [r7, #32]
 80019d2:	ed97 5b06 	vldr	d5, [r7, #24]
 80019d6:	463a      	mov	r2, r7
 80019d8:	f107 0108 	add.w	r1, r7, #8
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4618      	mov	r0, r3
 80019e2:	eeb0 1a46 	vmov.f32	s2, s12
 80019e6:	eef0 1a66 	vmov.f32	s3, s13
 80019ea:	eeb0 0a47 	vmov.f32	s0, s14
 80019ee:	eef0 0a67 	vmov.f32	s1, s15
 80019f2:	f7ff fde9 	bl	80015c8 <calc_azimuth>
  		send_json_ada( azimuth, altitude, distance);
 80019f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80019fa:	ed97 6b00 	vldr	d6, [r7]
 80019fe:	ed97 5b02 	vldr	d5, [r7, #8]
 8001a02:	eeb0 2a45 	vmov.f32	s4, s10
 8001a06:	eef0 2a65 	vmov.f32	s5, s11
 8001a0a:	eeb0 1a46 	vmov.f32	s2, s12
 8001a0e:	eef0 1a66 	vmov.f32	s3, s13
 8001a12:	eeb0 0a47 	vmov.f32	s0, s14
 8001a16:	eef0 0a67 	vmov.f32	s1, s15
 8001a1a:	f7ff fd65 	bl	80014e8 <send_json_ada>
  	}else printf("error - zle dane \r\n");
}
 8001a1e:	e002      	b.n	8001a26 <parse_loc+0xa6>
  	}else printf("error - zle dane \r\n");
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <parse_loc+0xb8>)
 8001a22:	f00a faa5 	bl	800bf70 <puts>
}
 8001a26:	bf00      	nop
 8001a28:	3750      	adds	r7, #80	; 0x50
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	08012a6c 	.word	0x08012a6c
 8001a34:	200007c8 	.word	0x200007c8
 8001a38:	08012988 	.word	0x08012988

08001a3c <parse_home_pos>:

void parse_home_pos(){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af02      	add	r7, sp, #8
  	char header[1];
  	sscanf(ReceivedData, "%s %lf %lf %lf", &header, &home_position.Latitude, &home_position.Longitude, &home_position.Height);
 8001a42:	1d3a      	adds	r2, r7, #4
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <parse_home_pos+0x24>)
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <parse_home_pos+0x28>)
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <parse_home_pos+0x2c>)
 8001a4e:	4907      	ldr	r1, [pc, #28]	; (8001a6c <parse_home_pos+0x30>)
 8001a50:	4807      	ldr	r0, [pc, #28]	; (8001a70 <parse_home_pos+0x34>)
 8001a52:	f00a facb 	bl	800bfec <siscanf>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000010 	.word	0x20000010
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	08012a88 	.word	0x08012a88
 8001a70:	200007c8 	.word	0x200007c8

08001a74 <parse_actual_pos>:

void parse_actual_pos(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af02      	add	r7, sp, #8
  	char header[1];
  	double lat, lon,height;
  	sscanf(ReceivedData, "%s %lf %lf %lf", &header, &actual_position.Latitude, &actual_position.Longitude, &actual_position.Height);
 8001a7a:	1d3a      	adds	r2, r7, #4
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <parse_actual_pos+0x24>)
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <parse_actual_pos+0x28>)
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <parse_actual_pos+0x2c>)
 8001a86:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <parse_actual_pos+0x30>)
 8001a88:	4807      	ldr	r0, [pc, #28]	; (8001aa8 <parse_actual_pos+0x34>)
 8001a8a:	f00a faaf 	bl	800bfec <siscanf>
//  	actual_position.Latitude = lat;
//	actual_position.Longitude = lon;
//	actual_position.Height = height;
//	printf("data: %lf,%lf,%lf", lat, lon, height);
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000030 	.word	0x20000030
 8001a9c:	20000028 	.word	0x20000028
 8001aa0:	20000020 	.word	0x20000020
 8001aa4:	08012a88 	.word	0x08012a88
 8001aa8:	200007c8 	.word	0x200007c8

08001aac <simple_predict>:

//very simple prediction by linear approximation
position simple_predict(position actual, position old){
 8001aac:	b082      	sub	sp, #8
 8001aae:	b5b0      	push	{r4, r5, r7, lr}
 8001ab0:	b08a      	sub	sp, #40	; 0x28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001aba:	e881 000c 	stmia.w	r1, {r2, r3}
	position predicted;
	predicted.Latitude = 2.0 * actual.Latitude - old.Latitude;
 8001abe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	f7fe fbe9 	bl	800029c <__adddf3>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4623      	mov	r3, r4
 8001ada:	f7fe fbdd 	bl	8000298 <__aeabi_dsub>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	predicted.Longitude = 2.0 * actual.Longitude - old.Longitude;
 8001ae6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	f7fe fbd5 	bl	800029c <__adddf3>
 8001af2:	4603      	mov	r3, r0
 8001af4:	460c      	mov	r4, r1
 8001af6:	4618      	mov	r0, r3
 8001af8:	4621      	mov	r1, r4
 8001afa:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001afe:	461a      	mov	r2, r3
 8001b00:	4623      	mov	r3, r4
 8001b02:	f7fe fbc9 	bl	8000298 <__aeabi_dsub>
 8001b06:	4603      	mov	r3, r0
 8001b08:	460c      	mov	r4, r1
 8001b0a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	predicted.Height = 2.0 * actual.Height - old.Height;
 8001b0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	f7fe fbc1 	bl	800029c <__adddf3>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4621      	mov	r1, r4
 8001b22:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	f7fe fbb5 	bl	8000298 <__aeabi_dsub>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460c      	mov	r4, r1
 8001b32:	e9c7 3406 	strd	r3, r4, [r7, #24]
	return predicted;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	461d      	mov	r5, r3
 8001b3a:	f107 0408 	add.w	r4, r7, #8
 8001b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001b54:	b002      	add	sp, #8
 8001b56:	4770      	bx	lr

08001b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5a:	b097      	sub	sp, #92	; 0x5c
 8001b5c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5e:	f000 ff27 	bl	80029b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b62:	f000 f9bf 	bl	8001ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b66:	f7ff fb43 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b6a:	f7ff fb21 	bl	80011b0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001b6e:	f008 fd3d 	bl	800a5ec <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001b72:	f000 fbe7 	bl	8002344 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b76:	f000 fc93 	bl	80024a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b7a:	f000 fce5 	bl	8002548 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001b7e:	f7ff fa37 	bl	8000ff0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001b82:	f000 fe0b 	bl	800279c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b86:	f000 fe33 	bl	80027f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	489a      	ldr	r0, [pc, #616]	; (8001df8 <main+0x2a0>)
 8001b8e:	f004 fe96 	bl	80068be <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001b92:	2104      	movs	r1, #4
 8001b94:	4898      	ldr	r0, [pc, #608]	; (8001df8 <main+0x2a0>)
 8001b96:	f004 fe92 	bl	80068be <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b9a:	213c      	movs	r1, #60	; 0x3c
 8001b9c:	4897      	ldr	r0, [pc, #604]	; (8001dfc <main+0x2a4>)
 8001b9e:	f004 fa0d 	bl	8005fbc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001ba2:	213c      	movs	r1, #60	; 0x3c
 8001ba4:	4896      	ldr	r0, [pc, #600]	; (8001e00 <main+0x2a8>)
 8001ba6:	f004 fa09 	bl	8005fbc <HAL_TIM_Encoder_Start>

  HAL_ADC_Start_DMA(&hadc1, feedback, 2);
 8001baa:	2202      	movs	r2, #2
 8001bac:	4995      	ldr	r1, [pc, #596]	; (8001e04 <main+0x2ac>)
 8001bae:	4896      	ldr	r0, [pc, #600]	; (8001e08 <main+0x2b0>)
 8001bb0:	f001 f916 	bl	8002de0 <HAL_ADC_Start_DMA>

  pid_init(&pid_azimuth, 150.0f, 50.0f, 0.005f, 10, 1);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	210a      	movs	r1, #10
 8001bb8:	ed9f 1a94 	vldr	s2, [pc, #592]	; 8001e0c <main+0x2b4>
 8001bbc:	eddf 0a94 	vldr	s1, [pc, #592]	; 8001e10 <main+0x2b8>
 8001bc0:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8001e14 <main+0x2bc>
 8001bc4:	4894      	ldr	r0, [pc, #592]	; (8001e18 <main+0x2c0>)
 8001bc6:	f000 f9fc 	bl	8001fc2 <pid_init>
  pid_azimuth.p_max = pid_scale(&pid_azimuth, 4095);
 8001bca:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8001e1c <main+0x2c4>
 8001bce:	4892      	ldr	r0, [pc, #584]	; (8001e18 <main+0x2c0>)
 8001bd0:	f000 fa82 	bl	80020d8 <pid_scale>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b90      	ldr	r3, [pc, #576]	; (8001e18 <main+0x2c0>)
 8001bd8:	619a      	str	r2, [r3, #24]
  pid_azimuth.p_min = pid_scale(&pid_azimuth, -4095);
 8001bda:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8001e20 <main+0x2c8>
 8001bde:	488e      	ldr	r0, [pc, #568]	; (8001e18 <main+0x2c0>)
 8001be0:	f000 fa7a 	bl	80020d8 <pid_scale>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <main+0x2c0>)
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
  pid_azimuth.i_max = pid_scale(&pid_azimuth, 4095);
 8001bea:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8001e1c <main+0x2c4>
 8001bee:	488a      	ldr	r0, [pc, #552]	; (8001e18 <main+0x2c0>)
 8001bf0:	f000 fa72 	bl	80020d8 <pid_scale>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <main+0x2c0>)
 8001bf8:	61da      	str	r2, [r3, #28]
  pid_azimuth.i_min = pid_scale(&pid_azimuth, -4095);
 8001bfa:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8001e20 <main+0x2c8>
 8001bfe:	4886      	ldr	r0, [pc, #536]	; (8001e18 <main+0x2c0>)
 8001c00:	f000 fa6a 	bl	80020d8 <pid_scale>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b84      	ldr	r3, [pc, #528]	; (8001e18 <main+0x2c0>)
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
  pid_azimuth.d_max = pid_scale(&pid_azimuth, 4095);
 8001c0a:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8001e1c <main+0x2c4>
 8001c0e:	4882      	ldr	r0, [pc, #520]	; (8001e18 <main+0x2c0>)
 8001c10:	f000 fa62 	bl	80020d8 <pid_scale>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b80      	ldr	r3, [pc, #512]	; (8001e18 <main+0x2c0>)
 8001c18:	621a      	str	r2, [r3, #32]
  pid_azimuth.d_min = pid_scale(&pid_azimuth, -4095);
 8001c1a:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8001e20 <main+0x2c8>
 8001c1e:	487e      	ldr	r0, [pc, #504]	; (8001e18 <main+0x2c0>)
 8001c20:	f000 fa5a 	bl	80020d8 <pid_scale>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b7c      	ldr	r3, [pc, #496]	; (8001e18 <main+0x2c0>)
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_azimuth.total_max = pid_scale(&pid_azimuth, 4095);
 8001c2a:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8001e1c <main+0x2c4>
 8001c2e:	487a      	ldr	r0, [pc, #488]	; (8001e18 <main+0x2c0>)
 8001c30:	f000 fa52 	bl	80020d8 <pid_scale>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b78      	ldr	r3, [pc, #480]	; (8001e18 <main+0x2c0>)
 8001c38:	649a      	str	r2, [r3, #72]	; 0x48
  pid_azimuth.total_min = pid_scale(&pid_azimuth, 0);
 8001c3a:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8001e24 <main+0x2cc>
 8001c3e:	4876      	ldr	r0, [pc, #472]	; (8001e18 <main+0x2c0>)
 8001c40:	f000 fa4a 	bl	80020d8 <pid_scale>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b74      	ldr	r3, [pc, #464]	; (8001e18 <main+0x2c0>)
 8001c48:	64da      	str	r2, [r3, #76]	; 0x4c

  pid_init(&pid_height, 150.0f, 50.0f, 0.005f, 10, 1);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	210a      	movs	r1, #10
 8001c4e:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 8001e0c <main+0x2b4>
 8001c52:	eddf 0a6f 	vldr	s1, [pc, #444]	; 8001e10 <main+0x2b8>
 8001c56:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8001e14 <main+0x2bc>
 8001c5a:	4873      	ldr	r0, [pc, #460]	; (8001e28 <main+0x2d0>)
 8001c5c:	f000 f9b1 	bl	8001fc2 <pid_init>
  pid_height.p_max = pid_scale(&pid_height, 4095);
 8001c60:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8001e1c <main+0x2c4>
 8001c64:	4870      	ldr	r0, [pc, #448]	; (8001e28 <main+0x2d0>)
 8001c66:	f000 fa37 	bl	80020d8 <pid_scale>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <main+0x2d0>)
 8001c6e:	619a      	str	r2, [r3, #24]
  pid_height.p_min = pid_scale(&pid_height, -4095);
 8001c70:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8001e20 <main+0x2c8>
 8001c74:	486c      	ldr	r0, [pc, #432]	; (8001e28 <main+0x2d0>)
 8001c76:	f000 fa2f 	bl	80020d8 <pid_scale>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <main+0x2d0>)
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
  pid_height.i_max = pid_scale(&pid_height, 4095);
 8001c80:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8001e1c <main+0x2c4>
 8001c84:	4868      	ldr	r0, [pc, #416]	; (8001e28 <main+0x2d0>)
 8001c86:	f000 fa27 	bl	80020d8 <pid_scale>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <main+0x2d0>)
 8001c8e:	61da      	str	r2, [r3, #28]
  pid_height.i_min = pid_scale(&pid_height, -4095);
 8001c90:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8001e20 <main+0x2c8>
 8001c94:	4864      	ldr	r0, [pc, #400]	; (8001e28 <main+0x2d0>)
 8001c96:	f000 fa1f 	bl	80020d8 <pid_scale>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <main+0x2d0>)
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
  pid_height.d_max = pid_scale(&pid_height, 4095);
 8001ca0:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8001e1c <main+0x2c4>
 8001ca4:	4860      	ldr	r0, [pc, #384]	; (8001e28 <main+0x2d0>)
 8001ca6:	f000 fa17 	bl	80020d8 <pid_scale>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <main+0x2d0>)
 8001cae:	621a      	str	r2, [r3, #32]
  pid_height.d_min = pid_scale(&pid_height, -4095);
 8001cb0:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001e20 <main+0x2c8>
 8001cb4:	485c      	ldr	r0, [pc, #368]	; (8001e28 <main+0x2d0>)
 8001cb6:	f000 fa0f 	bl	80020d8 <pid_scale>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <main+0x2d0>)
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_height.total_max = pid_scale(&pid_height, 4095);
 8001cc0:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001e1c <main+0x2c4>
 8001cc4:	4858      	ldr	r0, [pc, #352]	; (8001e28 <main+0x2d0>)
 8001cc6:	f000 fa07 	bl	80020d8 <pid_scale>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <main+0x2d0>)
 8001cce:	649a      	str	r2, [r3, #72]	; 0x48
  pid_height.total_min = pid_scale(&pid_height, 0);
 8001cd0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001e24 <main+0x2cc>
 8001cd4:	4854      	ldr	r0, [pc, #336]	; (8001e28 <main+0x2d0>)
 8001cd6:	f000 f9ff 	bl	80020d8 <pid_scale>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b52      	ldr	r3, [pc, #328]	; (8001e28 <main+0x2d0>)
 8001cde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001ce0:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <main+0x2a0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4843      	ldr	r0, [pc, #268]	; (8001df8 <main+0x2a0>)
 8001cec:	f004 f8a2 	bl	8005e34 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001cf0:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <main+0x2a0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	483f      	ldr	r0, [pc, #252]	; (8001df8 <main+0x2a0>)
 8001cfc:	f004 f89a 	bl	8005e34 <HAL_TIM_PWM_Start>

		HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d06:	4849      	ldr	r0, [pc, #292]	; (8001e2c <main+0x2d4>)
 8001d08:	f002 fa5c 	bl	80041c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d12:	4846      	ldr	r0, [pc, #280]	; (8001e2c <main+0x2d4>)
 8001d14:	f002 fa56 	bl	80041c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d1e:	4843      	ldr	r0, [pc, #268]	; (8001e2c <main+0x2d4>)
 8001d20:	f002 fa50 	bl	80041c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2a:	4840      	ldr	r0, [pc, #256]	; (8001e2c <main+0x2d4>)
 8001d2c:	f002 fa4a 	bl	80041c4 <HAL_GPIO_WritePin>
  while (1)
  {

	  //send_json((int)feedback[0], (int)feedback[1] );

	  while( feedback[0] > 3000 || feedback[0] < 1000 || feedback[1] > 3000 || feedback[1] < 1000 ){
 8001d30:	e02e      	b.n	8001d90 <main+0x238>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0 );
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <main+0x2a0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0 );
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <main+0x2a0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d48:	4838      	ldr	r0, [pc, #224]	; (8001e2c <main+0x2d4>)
 8001d4a:	f002 fa3b 	bl	80041c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d54:	4835      	ldr	r0, [pc, #212]	; (8001e2c <main+0x2d4>)
 8001d56:	f002 fa35 	bl	80041c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d60:	4832      	ldr	r0, [pc, #200]	; (8001e2c <main+0x2d4>)
 8001d62:	f002 fa2f 	bl	80041c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6c:	482f      	ldr	r0, [pc, #188]	; (8001e2c <main+0x2d4>)
 8001d6e:	f002 fa29 	bl	80041c4 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001d72:	2064      	movs	r0, #100	; 0x64
 8001d74:	f000 fe8e 	bl	8002a94 <HAL_Delay>
			send_json((int)feedback[0], (int)feedback[1] );
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <main+0x2ac>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <main+0x2ac>)
 8001d80:	885b      	ldrh	r3, [r3, #2]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f7ff fb9f 	bl	80014c8 <send_json>
			send_json_error("Poza zakresem");
 8001d8a:	4829      	ldr	r0, [pc, #164]	; (8001e30 <main+0x2d8>)
 8001d8c:	f7ff fbde 	bl	800154c <send_json_error>
	  while( feedback[0] > 3000 || feedback[0] < 1000 || feedback[1] > 3000 || feedback[1] < 1000 ){
 8001d90:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <main+0x2ac>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d8ca      	bhi.n	8001d32 <main+0x1da>
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <main+0x2ac>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da4:	d3c5      	bcc.n	8001d32 <main+0x1da>
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <main+0x2ac>)
 8001da8:	885b      	ldrh	r3, [r3, #2]
 8001daa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d8bf      	bhi.n	8001d32 <main+0x1da>
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <main+0x2ac>)
 8001db4:	885b      	ldrh	r3, [r3, #2]
 8001db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dba:	d3ba      	bcc.n	8001d32 <main+0x1da>
	  }

	  if(ReceivedDataFlag == 1){
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <main+0x2dc>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f040 8083 	bne.w	8001ecc <main+0x374>
	  	ReceivedDataFlag = 0;
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <main+0x2dc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
	  	//parse();
	  	if(ReceivedData[0] == 'S') parse();
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <main+0x2e0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b53      	cmp	r3, #83	; 0x53
 8001dd2:	d102      	bne.n	8001dda <main+0x282>
 8001dd4:	f7ff fa86 	bl	80012e4 <parse>
 8001dd8:	e078      	b.n	8001ecc <main+0x374>
	  	else if (ReceivedData[0] == 'G') parse_loc();
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <main+0x2e0>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b47      	cmp	r3, #71	; 0x47
 8001de0:	d102      	bne.n	8001de8 <main+0x290>
 8001de2:	f7ff fdcd 	bl	8001980 <parse_loc>
 8001de6:	e071      	b.n	8001ecc <main+0x374>
	  	else if (ReceivedData[0] == 'H') parse_home_pos();
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <main+0x2e0>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b48      	cmp	r3, #72	; 0x48
 8001dee:	d125      	bne.n	8001e3c <main+0x2e4>
 8001df0:	f7ff fe24 	bl	8001a3c <parse_home_pos>
 8001df4:	e06a      	b.n	8001ecc <main+0x374>
 8001df6:	bf00      	nop
 8001df8:	200008d4 	.word	0x200008d4
 8001dfc:	20000914 	.word	0x20000914
 8001e00:	20000894 	.word	0x20000894
 8001e04:	200007b8 	.word	0x200007b8
 8001e08:	20000640 	.word	0x20000640
 8001e0c:	3ba3d70a 	.word	0x3ba3d70a
 8001e10:	42480000 	.word	0x42480000
 8001e14:	43160000 	.word	0x43160000
 8001e18:	200006e8 	.word	0x200006e8
 8001e1c:	457ff000 	.word	0x457ff000
 8001e20:	c57ff000 	.word	0xc57ff000
 8001e24:	00000000 	.word	0x00000000
 8001e28:	20000838 	.word	0x20000838
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	08012a98 	.word	0x08012a98
 8001e34:	200003dc 	.word	0x200003dc
 8001e38:	200007c8 	.word	0x200007c8
	  	else if (ReceivedData[0] == 'A'){
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <main+0x37c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b41      	cmp	r3, #65	; 0x41
 8001e42:	d140      	bne.n	8001ec6 <main+0x36e>
	  		parse_actual_pos();
 8001e44:	f7ff fe16 	bl	8001a74 <parse_actual_pos>
		  	send_json_position( actual_position , simple_predict( actual_position, old_position ) );
 8001e48:	46bc      	mov	ip, r7
 8001e4a:	4e23      	ldr	r6, [pc, #140]	; (8001ed8 <main+0x380>)
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <main+0x384>)
 8001e4e:	ac06      	add	r4, sp, #24
 8001e50:	461d      	mov	r5, r3
 8001e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e5e:	466d      	mov	r5, sp
 8001e60:	f106 0408 	add.w	r4, r6, #8
 8001e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e70:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001e74:	4660      	mov	r0, ip
 8001e76:	f7ff fe19 	bl	8001aac <simple_predict>
 8001e7a:	4e17      	ldr	r6, [pc, #92]	; (8001ed8 <main+0x380>)
 8001e7c:	ad04      	add	r5, sp, #16
 8001e7e:	463c      	mov	r4, r7
 8001e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e88:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e8c:	466c      	mov	r4, sp
 8001e8e:	f106 0310 	add.w	r3, r6, #16
 8001e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e98:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e9c:	f7ff fb64 	bl	8001568 <send_json_position>
		  	//HAL_Delay(5000);
		  	old_position.Latitude = actual_position.Latitude;
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <main+0x380>)
 8001ea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ea6:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <main+0x384>)
 8001ea8:	e9c2 3400 	strd	r3, r4, [r2]
		  	old_position.Longitude = actual_position.Longitude;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <main+0x380>)
 8001eae:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <main+0x384>)
 8001eb4:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  	old_position.Height = actual_position.Height;
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <main+0x380>)
 8001eba:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001ebe:	4a07      	ldr	r2, [pc, #28]	; (8001edc <main+0x384>)
 8001ec0:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001ec4:	e002      	b.n	8001ecc <main+0x374>
	  	}
	  	else send_json_error( "Bad data frame construction!");
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <main+0x388>)
 8001ec8:	f7ff fb40 	bl	800154c <send_json_error>
	  }
	  HAL_Delay(100);
 8001ecc:	2064      	movs	r0, #100	; 0x64
 8001ece:	f000 fde1 	bl	8002a94 <HAL_Delay>
	  while( feedback[0] > 3000 || feedback[0] < 1000 || feedback[1] > 3000 || feedback[1] < 1000 ){
 8001ed2:	e75d      	b.n	8001d90 <main+0x238>
 8001ed4:	200007c8 	.word	0x200007c8
 8001ed8:	20000020 	.word	0x20000020
 8001edc:	20000040 	.word	0x20000040
 8001ee0:	08012aa8 	.word	0x08012aa8

08001ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b094      	sub	sp, #80	; 0x50
 8001ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	2230      	movs	r2, #48	; 0x30
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f009 f8da 	bl	800b0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <SystemClock_Config+0xc8>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	4a26      	ldr	r2, [pc, #152]	; (8001fac <SystemClock_Config+0xc8>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	; 0x40
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <SystemClock_Config+0xc8>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <SystemClock_Config+0xcc>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a20      	ldr	r2, [pc, #128]	; (8001fb0 <SystemClock_Config+0xcc>)
 8001f2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <SystemClock_Config+0xcc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f40:	2301      	movs	r3, #1
 8001f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f54:	2319      	movs	r3, #25
 8001f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001f58:	23c0      	movs	r3, #192	; 0xc0
 8001f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f60:	2304      	movs	r3, #4
 8001f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f64:	f107 0320 	add.w	r3, r7, #32
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fac7 	bl	80054fc <HAL_RCC_OscConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f74:	f000 f81e 	bl	8001fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f78:	230f      	movs	r3, #15
 8001f7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2103      	movs	r1, #3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fd21 	bl	80059dc <HAL_RCC_ClockConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fa0:	f000 f808 	bl	8001fb4 <Error_Handler>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3750      	adds	r7, #80	; 0x50
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <pid_init>:
 *
 * Created on: 09.03.2018
 * Author: Wojciech Domski
 */
#include "pid.h"
void pid_init(cpid_t *pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 8001fc2:	b480      	push	{r7}
 8001fc4:	b089      	sub	sp, #36	; 0x24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6178      	str	r0, [r7, #20]
 8001fca:	ed87 0a04 	vstr	s0, [r7, #16]
 8001fce:	edc7 0a03 	vstr	s1, [r7, #12]
 8001fd2:	ed87 1a02 	vstr	s2, [r7, #8]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	603a      	str	r2, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
	uint32_t k;
	pid->power = 1;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e007      	b.n	8001ff8 <pid_init+0x36>
		pid->power = pid->power * 2;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fec:	005a      	lsls	r2, r3, #1
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d3f3      	bcc.n	8001fe8 <pid_init+0x26>
	}
	pid->f = f;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	79fa      	ldrb	r2, [r7, #7]
 8002004:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pid->p = (int32_t) (p * pid->power);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002014:	edd7 7a04 	vldr	s15, [r7, #16]
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002020:	ee17 2a90 	vmov	r2, s15
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]
	pid->i = (int32_t) (i * pid->power);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002034:	edd7 7a03 	vldr	s15, [r7, #12]
 8002038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002040:	ee17 2a90 	vmov	r2, s15
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	605a      	str	r2, [r3, #4]
	pid->d = (int32_t) (d * pid->power);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002054:	edd7 7a02 	vldr	s15, [r7, #8]
 8002058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002060:	ee17 2a90 	vmov	r2, s15
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	609a      	str	r2, [r3, #8]
	pid->p_val = 0;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
	pid->i_val = 0;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
	pid->d_val = 0;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2200      	movs	r2, #0
 8002078:	615a      	str	r2, [r3, #20]
	pid->p_max = INT32_MAX;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002080:	619a      	str	r2, [r3, #24]
	pid->p_min = INT32_MIN;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
	pid->i_max = INT32_MAX;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002090:	61da      	str	r2, [r3, #28]
	pid->i_min = INT32_MIN;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
	pid->d_max = INT32_MAX;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80020a0:	621a      	str	r2, [r3, #32]
	pid->d_min = INT32_MIN;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020a8:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_last = 0;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
	pid->sum = 0;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2200      	movs	r2, #0
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
	pid->total_max = INT32_MAX;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80020bc:	649a      	str	r2, [r3, #72]	; 0x48
	pid->total_min = INT32_MIN;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020c4:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->dt_ms = dt_ms;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
}
 80020cc:	bf00      	nop
 80020ce:	3724      	adds	r7, #36	; 0x24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <pid_scale>:
		total = pid->total_min;
	pid->control = total >> pid->f;
	pid->e_last = e;
	return pid->control;
}
int32_t pid_scale(cpid_t *pid, float v) {
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	ed87 0a00 	vstr	s0, [r7]
	return v * pid->power;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f0:	edd7 7a00 	vldr	s15, [r7]
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fc:	ee17 3a90 	vmov	r3, s15
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_MspInit+0x4c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_MspInit+0x4c>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_MspInit+0x4c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_MspInit+0x4c>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_MspInit+0x4c>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_MspInit+0x4c>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <MemManage_Handler+0x4>

08002176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <BusFault_Handler+0x4>

0800217c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <UsageFault_Handler+0x4>

08002182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b0:	f000 fc50 	bl	8002a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <ADC_IRQHandler+0x10>)
 80021be:	f000 fcce 	bl	8002b5e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000640 	.word	0x20000640

080021cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <USART1_IRQHandler+0x10>)
 80021d2:	f004 fd27 	bl	8006c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000954 	.word	0x20000954

080021e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <USART2_IRQHandler+0x10>)
 80021e6:	f004 fd1d 	bl	8006c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000994 	.word	0x20000994

080021f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <DMA2_Stream0_IRQHandler+0x10>)
 80021fa:	f001 fbe1 	bl	80039c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000688 	.word	0x20000688

08002208 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <OTG_FS_IRQHandler+0x10>)
 800220e:	f002 f942 	bl	8004496 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000f70 	.word	0x20000f70

0800221c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e00a      	b.n	8002244 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800222e:	f3af 8000 	nop.w
 8002232:	4601      	mov	r1, r0
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	60ba      	str	r2, [r7, #8]
 800223a:	b2ca      	uxtb	r2, r1
 800223c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbf0      	blt.n	800222e <_read+0x12>
	}

return len;
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
	return -1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800227e:	605a      	str	r2, [r3, #4]
	return 0;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <_isatty>:

int _isatty(int file)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
	return 1;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
	return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <_sbrk+0x50>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <_sbrk+0x16>
		heap_end = &end;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <_sbrk+0x50>)
 80022d2:	4a10      	ldr	r2, [pc, #64]	; (8002314 <_sbrk+0x54>)
 80022d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <_sbrk+0x50>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <_sbrk+0x50>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	466a      	mov	r2, sp
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d907      	bls.n	80022fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022ea:	f008 fea5 	bl	800b038 <__errno>
 80022ee:	4602      	mov	r2, r0
 80022f0:	230c      	movs	r3, #12
 80022f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295
 80022f8:	e006      	b.n	8002308 <_sbrk+0x48>
	}

	heap_end += incr;
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <_sbrk+0x50>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	4a03      	ldr	r2, [pc, #12]	; (8002310 <_sbrk+0x50>)
 8002304:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200003e0 	.word	0x200003e0
 8002314:	20001380 	.word	0x20001380

08002318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <SystemInit+0x28>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	4a07      	ldr	r2, [pc, #28]	; (8002340 <SystemInit+0x28>)
 8002324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <SystemInit+0x28>)
 800232e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002332:	609a      	str	r2, [r3, #8]
#endif
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b096      	sub	sp, #88	; 0x58
 8002348:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	615a      	str	r2, [r3, #20]
 8002374:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2220      	movs	r2, #32
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f008 fe95 	bl	800b0ac <memset>

  htim1.Instance = TIM1;
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <MX_TIM1_Init+0x154>)
 8002384:	4a45      	ldr	r2, [pc, #276]	; (800249c <MX_TIM1_Init+0x158>)
 8002386:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8002388:	4b43      	ldr	r3, [pc, #268]	; (8002498 <MX_TIM1_Init+0x154>)
 800238a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800238e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b41      	ldr	r3, [pc, #260]	; (8002498 <MX_TIM1_Init+0x154>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002396:	4b40      	ldr	r3, [pc, #256]	; (8002498 <MX_TIM1_Init+0x154>)
 8002398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800239c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <MX_TIM1_Init+0x154>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023a4:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <MX_TIM1_Init+0x154>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <MX_TIM1_Init+0x154>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023b0:	4839      	ldr	r0, [pc, #228]	; (8002498 <MX_TIM1_Init+0x154>)
 80023b2:	f003 fcdf 	bl	8005d74 <HAL_TIM_Base_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80023bc:	f7ff fdfa 	bl	8001fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023ca:	4619      	mov	r1, r3
 80023cc:	4832      	ldr	r0, [pc, #200]	; (8002498 <MX_TIM1_Init+0x154>)
 80023ce:	f003 fef3 	bl	80061b8 <HAL_TIM_ConfigClockSource>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80023d8:	f7ff fdec 	bl	8001fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023dc:	482e      	ldr	r0, [pc, #184]	; (8002498 <MX_TIM1_Init+0x154>)
 80023de:	f003 fcf4 	bl	8005dca <HAL_TIM_PWM_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80023e8:	f7ff fde4 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023f8:	4619      	mov	r1, r3
 80023fa:	4827      	ldr	r0, [pc, #156]	; (8002498 <MX_TIM1_Init+0x154>)
 80023fc:	f004 fa8a 	bl	8006914 <HAL_TIMEx_MasterConfigSynchronization>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002406:	f7ff fdd5 	bl	8001fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240a:	2360      	movs	r3, #96	; 0x60
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002412:	2300      	movs	r3, #0
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002416:	2300      	movs	r3, #0
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242a:	2200      	movs	r2, #0
 800242c:	4619      	mov	r1, r3
 800242e:	481a      	ldr	r0, [pc, #104]	; (8002498 <MX_TIM1_Init+0x154>)
 8002430:	f003 fdfc 	bl	800602c <HAL_TIM_PWM_ConfigChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800243a:	f7ff fdbb 	bl	8001fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800243e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002442:	2204      	movs	r2, #4
 8002444:	4619      	mov	r1, r3
 8002446:	4814      	ldr	r0, [pc, #80]	; (8002498 <MX_TIM1_Init+0x154>)
 8002448:	f003 fdf0 	bl	800602c <HAL_TIM_PWM_ConfigChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8002452:	f7ff fdaf 	bl	8001fb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800246a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	4619      	mov	r1, r3
 8002478:	4807      	ldr	r0, [pc, #28]	; (8002498 <MX_TIM1_Init+0x154>)
 800247a:	f004 fab9 	bl	80069f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002484:	f7ff fd96 	bl	8001fb4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002488:	4803      	ldr	r0, [pc, #12]	; (8002498 <MX_TIM1_Init+0x154>)
 800248a:	f000 f94d 	bl	8002728 <HAL_TIM_MspPostInit>

}
 800248e:	bf00      	nop
 8002490:	3758      	adds	r7, #88	; 0x58
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200008d4 	.word	0x200008d4
 800249c:	40010000 	.word	0x40010000

080024a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f008 fdfc 	bl	800b0ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80024bc:	4b21      	ldr	r3, [pc, #132]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024ec:	2301      	movs	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024fc:	2301      	movs	r3, #1
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002508:	f107 030c 	add.w	r3, r7, #12
 800250c:	4619      	mov	r1, r3
 800250e:	480d      	ldr	r0, [pc, #52]	; (8002544 <MX_TIM2_Init+0xa4>)
 8002510:	f003 fcc2 	bl	8005e98 <HAL_TIM_Encoder_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800251a:	f7ff fd4b 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4806      	ldr	r0, [pc, #24]	; (8002544 <MX_TIM2_Init+0xa4>)
 800252c:	f004 f9f2 	bl	8006914 <HAL_TIMEx_MasterConfigSynchronization>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002536:	f7ff fd3d 	bl	8001fb4 <Error_Handler>
  }

}
 800253a:	bf00      	nop
 800253c:	3730      	adds	r7, #48	; 0x30
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000914 	.word	0x20000914

08002548 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	; 0x30
 800254c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800254e:	f107 030c 	add.w	r3, r7, #12
 8002552:	2224      	movs	r2, #36	; 0x24
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f008 fda8 	bl	800b0ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <MX_TIM3_Init+0xa0>)
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <MX_TIM3_Init+0xa4>)
 8002568:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800256a:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <MX_TIM3_Init+0xa0>)
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <MX_TIM3_Init+0xa0>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <MX_TIM3_Init+0xa0>)
 8002578:	f240 32e7 	movw	r2, #999	; 0x3e7
 800257c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <MX_TIM3_Init+0xa0>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <MX_TIM3_Init+0xa0>)
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800258a:	2301      	movs	r3, #1
 800258c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002592:	2301      	movs	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025a2:	2301      	movs	r3, #1
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	4619      	mov	r1, r3
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <MX_TIM3_Init+0xa0>)
 80025b6:	f003 fc6f 	bl	8005e98 <HAL_TIM_Encoder_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80025c0:	f7ff fcf8 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_TIM3_Init+0xa0>)
 80025d2:	f004 f99f 	bl	8006914 <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80025dc:	f7ff fcea 	bl	8001fb4 <Error_Handler>
  }

}
 80025e0:	bf00      	nop
 80025e2:	3730      	adds	r7, #48	; 0x30
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000894 	.word	0x20000894
 80025ec:	40000400 	.word	0x40000400

080025f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0b      	ldr	r2, [pc, #44]	; (800262c <HAL_TIM_Base_MspInit+0x3c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10d      	bne.n	800261e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_TIM_Base_MspInit+0x40>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_TIM_Base_MspInit+0x40>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_TIM_Base_MspInit+0x40>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40010000 	.word	0x40010000
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	; 0x30
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002654:	d12c      	bne.n	80026b0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	4b30      	ldr	r3, [pc, #192]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a2f      	ldr	r2, [pc, #188]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a28      	ldr	r2, [pc, #160]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800268e:	2303      	movs	r3, #3
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800269e:	2301      	movs	r3, #1
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a2:	f107 031c 	add.w	r3, r7, #28
 80026a6:	4619      	mov	r1, r3
 80026a8:	481d      	ldr	r0, [pc, #116]	; (8002720 <HAL_TIM_Encoder_MspInit+0xec>)
 80026aa:	f001 fbf1 	bl	8003e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026ae:	e030      	b.n	8002712 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_TIM_Encoder_MspInit+0xf0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d12b      	bne.n	8002712 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a16      	ldr	r2, [pc, #88]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a0f      	ldr	r2, [pc, #60]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_TIM_Encoder_MspInit+0xe8>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026f2:	23c0      	movs	r3, #192	; 0xc0
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002702:	2302      	movs	r3, #2
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	4804      	ldr	r0, [pc, #16]	; (8002720 <HAL_TIM_Encoder_MspInit+0xec>)
 800270e:	f001 fbbf 	bl	8003e90 <HAL_GPIO_Init>
}
 8002712:	bf00      	nop
 8002714:	3730      	adds	r7, #48	; 0x30
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40020000 	.word	0x40020000
 8002724:	40000400 	.word	0x40000400

08002728 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <HAL_TIM_MspPostInit+0x68>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d11e      	bne.n	8002788 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_TIM_MspPostInit+0x6c>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a10      	ldr	r2, [pc, #64]	; (8002794 <HAL_TIM_MspPostInit+0x6c>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_TIM_MspPostInit+0x6c>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002766:	f44f 7340 	mov.w	r3, #768	; 0x300
 800276a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002778:	2301      	movs	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 030c 	add.w	r3, r7, #12
 8002780:	4619      	mov	r1, r3
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <HAL_TIM_MspPostInit+0x70>)
 8002784:	f001 fb84 	bl	8003e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002788:	bf00      	nop
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40010000 	.word	0x40010000
 8002794:	40023800 	.word	0x40023800
 8002798:	40020000 	.word	0x40020000

0800279c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <MX_USART1_UART_Init+0x50>)
 80027a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027c2:	220c      	movs	r2, #12
 80027c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027d4:	f004 f983 	bl	8006ade <HAL_UART_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027de:	f7ff fbe9 	bl	8001fb4 <Error_Handler>
  }

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000954 	.word	0x20000954
 80027ec:	40011000 	.word	0x40011000

080027f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <MX_USART2_UART_Init+0x4c>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	; (8002840 <MX_USART2_UART_Init+0x50>)
 80027f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <MX_USART2_UART_Init+0x4c>)
 80027fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <MX_USART2_UART_Init+0x4c>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <MX_USART2_UART_Init+0x4c>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <MX_USART2_UART_Init+0x4c>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <MX_USART2_UART_Init+0x4c>)
 8002816:	220c      	movs	r2, #12
 8002818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <MX_USART2_UART_Init+0x4c>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <MX_USART2_UART_Init+0x4c>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002826:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_USART2_UART_Init+0x4c>)
 8002828:	f004 f959 	bl	8006ade <HAL_UART_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002832:	f7ff fbbf 	bl	8001fb4 <Error_Handler>
  }

}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000994 	.word	0x20000994
 8002840:	40004400 	.word	0x40004400

08002844 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	; 0x30
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3a      	ldr	r2, [pc, #232]	; (800294c <HAL_UART_MspInit+0x108>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d135      	bne.n	80028d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_UART_MspInit+0x10c>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	4a38      	ldr	r2, [pc, #224]	; (8002950 <HAL_UART_MspInit+0x10c>)
 8002870:	f043 0310 	orr.w	r3, r3, #16
 8002874:	6453      	str	r3, [r2, #68]	; 0x44
 8002876:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_UART_MspInit+0x10c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_UART_MspInit+0x10c>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a31      	ldr	r2, [pc, #196]	; (8002950 <HAL_UART_MspInit+0x10c>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_UART_MspInit+0x10c>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800289e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80028a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028b0:	2307      	movs	r3, #7
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	4619      	mov	r1, r3
 80028ba:	4826      	ldr	r0, [pc, #152]	; (8002954 <HAL_UART_MspInit+0x110>)
 80028bc:	f001 fae8 	bl	8003e90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2100      	movs	r1, #0
 80028c4:	2025      	movs	r0, #37	; 0x25
 80028c6:	f000 ff1c 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ca:	2025      	movs	r0, #37	; 0x25
 80028cc:	f000 ff35 	bl	800373a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028d0:	e038      	b.n	8002944 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a20      	ldr	r2, [pc, #128]	; (8002958 <HAL_UART_MspInit+0x114>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d133      	bne.n	8002944 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_UART_MspInit+0x10c>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_UART_MspInit+0x10c>)
 80028e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ea:	6413      	str	r3, [r2, #64]	; 0x40
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_UART_MspInit+0x10c>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_UART_MspInit+0x10c>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	4a13      	ldr	r2, [pc, #76]	; (8002950 <HAL_UART_MspInit+0x10c>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6313      	str	r3, [r2, #48]	; 0x30
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_UART_MspInit+0x10c>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002914:	230c      	movs	r3, #12
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002924:	2307      	movs	r3, #7
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	4619      	mov	r1, r3
 800292e:	4809      	ldr	r0, [pc, #36]	; (8002954 <HAL_UART_MspInit+0x110>)
 8002930:	f001 faae 	bl	8003e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002934:	2200      	movs	r2, #0
 8002936:	2100      	movs	r1, #0
 8002938:	2026      	movs	r0, #38	; 0x26
 800293a:	f000 fee2 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800293e:	2026      	movs	r0, #38	; 0x26
 8002940:	f000 fefb 	bl	800373a <HAL_NVIC_EnableIRQ>
}
 8002944:	bf00      	nop
 8002946:	3730      	adds	r7, #48	; 0x30
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40011000 	.word	0x40011000
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000
 8002958:	40004400 	.word	0x40004400

0800295c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800295c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002994 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002960:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002962:	e003      	b.n	800296c <LoopCopyDataInit>

08002964 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002966:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002968:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800296a:	3104      	adds	r1, #4

0800296c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800296c:	480b      	ldr	r0, [pc, #44]	; (800299c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002970:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002972:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002974:	d3f6      	bcc.n	8002964 <CopyDataInit>
  ldr  r2, =_sbss
 8002976:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002978:	e002      	b.n	8002980 <LoopFillZerobss>

0800297a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800297a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800297c:	f842 3b04 	str.w	r3, [r2], #4

08002980 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002982:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002984:	d3f9      	bcc.n	800297a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002986:	f7ff fcc7 	bl	8002318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800298a:	f008 fb5b 	bl	800b044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298e:	f7ff f8e3 	bl	8001b58 <main>
  bx  lr    
 8002992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002994:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002998:	080130e8 	.word	0x080130e8
  ldr  r0, =_sdata
 800299c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029a0:	200003bc 	.word	0x200003bc
  ldr  r2, =_sbss
 80029a4:	200003c0 	.word	0x200003c0
  ldr  r3, = _ebss
 80029a8:	2000137c 	.word	0x2000137c

080029ac <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ac:	e7fe      	b.n	80029ac <DMA1_Stream0_IRQHandler>
	...

080029b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_Init+0x40>)
 80029ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <HAL_Init+0x40>)
 80029c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <HAL_Init+0x40>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d8:	2003      	movs	r0, #3
 80029da:	f000 fe87 	bl	80036ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 f808 	bl	80029f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e4:	f7ff fb92 	bl	800210c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023c00 	.word	0x40023c00

080029f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_InitTick+0x54>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_InitTick+0x58>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fe9f 	bl	8003756 <HAL_SYSTICK_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00e      	b.n	8002a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b0f      	cmp	r3, #15
 8002a26:	d80a      	bhi.n	8002a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f000 fe67 	bl	8003702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a34:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <HAL_InitTick+0x5c>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e000      	b.n	8002a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000060 	.word	0x20000060
 8002a4c:	20000068 	.word	0x20000068
 8002a50:	20000064 	.word	0x20000064

08002a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_IncTick+0x20>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_IncTick+0x24>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HAL_IncTick+0x24>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000068 	.word	0x20000068
 8002a78:	200009d4 	.word	0x200009d4

08002a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_GetTick+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	200009d4 	.word	0x200009d4

08002a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff ffee 	bl	8002a7c <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d005      	beq.n	8002aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_Delay+0x40>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aba:	bf00      	nop
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d8f7      	bhi.n	8002abc <HAL_Delay+0x28>
  {
  }
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000068 	.word	0x20000068

08002ad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e033      	b.n	8002b56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fada 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b1e:	f023 0302 	bic.w	r3, r3, #2
 8002b22:	f043 0202 	orr.w	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fb86 	bl	800323c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
 8002b46:	e001      	b.n	8002b4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	bf0c      	ite	eq
 8002b92:	2301      	moveq	r3, #1
 8002b94:	2300      	movne	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d049      	beq.n	8002c34 <HAL_ADC_IRQHandler+0xd6>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d046      	beq.n	8002c34 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d12b      	bne.n	8002c24 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d127      	bne.n	8002c24 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d119      	bne.n	8002c24 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0220 	bic.w	r2, r2, #32
 8002bfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f9af 	bl	8002f88 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0212 	mvn.w	r2, #18
 8002c32:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d057      	beq.n	8002d16 <HAL_ADC_IRQHandler+0x1b8>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d054      	beq.n	8002d16 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d139      	bne.n	8002d06 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d12b      	bne.n	8002d06 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d124      	bne.n	8002d06 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11d      	bne.n	8002d06 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d119      	bne.n	8002d06 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ce0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fc16 	bl	8003538 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 020c 	mvn.w	r2, #12
 8002d14:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	bf0c      	ite	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	2300      	movne	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d017      	beq.n	8002d78 <HAL_ADC_IRQHandler+0x21a>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d014      	beq.n	8002d78 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10d      	bne.n	8002d78 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f921 	bl	8002fb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f06f 0201 	mvn.w	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	bf0c      	ite	eq
 8002d86:	2301      	moveq	r3, #1
 8002d88:	2300      	movne	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0x27a>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d012      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f043 0202 	orr.w	r2, r3, #2
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0220 	mvn.w	r2, #32
 8002dc6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8fb 	bl	8002fc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f06f 0220 	mvn.w	r2, #32
 8002dd6:	601a      	str	r2, [r3, #0]
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_Start_DMA+0x1e>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e0b1      	b.n	8002f62 <HAL_ADC_Start_DMA+0x182>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d018      	beq.n	8002e46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e24:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <HAL_ADC_Start_DMA+0x18c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a51      	ldr	r2, [pc, #324]	; (8002f70 <HAL_ADC_Start_DMA+0x190>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0c9a      	lsrs	r2, r3, #18
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e38:	e002      	b.n	8002e40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f9      	bne.n	8002e3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	f040 8085 	bne.w	8002f60 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d106      	bne.n	8002ea4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f023 0206 	bic.w	r2, r3, #6
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ea2:	e002      	b.n	8002eaa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb2:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <HAL_ADC_Start_DMA+0x194>)
 8002eb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	4a2f      	ldr	r2, [pc, #188]	; (8002f78 <HAL_ADC_Start_DMA+0x198>)
 8002ebc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	4a2e      	ldr	r2, [pc, #184]	; (8002f7c <HAL_ADC_Start_DMA+0x19c>)
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <HAL_ADC_Start_DMA+0x1a0>)
 8002ecc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ee6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	334c      	adds	r3, #76	; 0x4c
 8002f02:	4619      	mov	r1, r3
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f000 fce0 	bl	80038cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10f      	bne.n	8002f38 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11c      	bne.n	8002f60 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	e013      	b.n	8002f60 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <HAL_ADC_Start_DMA+0x1a4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10e      	bne.n	8002f60 <HAL_ADC_Start_DMA+0x180>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f5e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000060 	.word	0x20000060
 8002f70:	431bde83 	.word	0x431bde83
 8002f74:	40012300 	.word	0x40012300
 8002f78:	08003435 	.word	0x08003435
 8002f7c:	080034ef 	.word	0x080034ef
 8002f80:	0800350b 	.word	0x0800350b
 8002f84:	40012000 	.word	0x40012000

08002f88 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1c>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e113      	b.n	800321c <HAL_ADC_ConfigChannel+0x244>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b09      	cmp	r3, #9
 8003002:	d925      	bls.n	8003050 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68d9      	ldr	r1, [r3, #12]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	3b1e      	subs	r3, #30
 800301a:	2207      	movs	r2, #7
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43da      	mvns	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	400a      	ands	r2, r1
 8003028:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	4603      	mov	r3, r0
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4403      	add	r3, r0
 8003042:	3b1e      	subs	r3, #30
 8003044:	409a      	lsls	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	e022      	b.n	8003096 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6919      	ldr	r1, [r3, #16]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	2207      	movs	r2, #7
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	400a      	ands	r2, r1
 8003072:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6919      	ldr	r1, [r3, #16]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	4618      	mov	r0, r3
 8003086:	4603      	mov	r3, r0
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4403      	add	r3, r0
 800308c:	409a      	lsls	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b06      	cmp	r3, #6
 800309c:	d824      	bhi.n	80030e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	3b05      	subs	r3, #5
 80030b0:	221f      	movs	r2, #31
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	400a      	ands	r2, r1
 80030be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	4618      	mov	r0, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	3b05      	subs	r3, #5
 80030da:	fa00 f203 	lsl.w	r2, r0, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	635a      	str	r2, [r3, #52]	; 0x34
 80030e6:	e04c      	b.n	8003182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	d824      	bhi.n	800313a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	3b23      	subs	r3, #35	; 0x23
 8003102:	221f      	movs	r2, #31
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43da      	mvns	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	400a      	ands	r2, r1
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	4618      	mov	r0, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	3b23      	subs	r3, #35	; 0x23
 800312c:	fa00 f203 	lsl.w	r2, r0, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
 8003138:	e023      	b.n	8003182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	3b41      	subs	r3, #65	; 0x41
 800314c:	221f      	movs	r2, #31
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	400a      	ands	r2, r1
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	4618      	mov	r0, r3
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	3b41      	subs	r3, #65	; 0x41
 8003176:	fa00 f203 	lsl.w	r2, r0, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_ADC_ConfigChannel+0x250>)
 8003184:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a28      	ldr	r2, [pc, #160]	; (800322c <HAL_ADC_ConfigChannel+0x254>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d10f      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x1d8>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b12      	cmp	r3, #18
 8003196:	d10b      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1d      	ldr	r2, [pc, #116]	; (800322c <HAL_ADC_ConfigChannel+0x254>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d12b      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x23a>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_ADC_ConfigChannel+0x258>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <HAL_ADC_ConfigChannel+0x1f4>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b11      	cmp	r3, #17
 80031ca:	d122      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a11      	ldr	r2, [pc, #68]	; (8003230 <HAL_ADC_ConfigChannel+0x258>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d111      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_ADC_ConfigChannel+0x25c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a11      	ldr	r2, [pc, #68]	; (8003238 <HAL_ADC_ConfigChannel+0x260>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	0c9a      	lsrs	r2, r3, #18
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003204:	e002      	b.n	800320c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3b01      	subs	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f9      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40012300 	.word	0x40012300
 800322c:	40012000 	.word	0x40012000
 8003230:	10000012 	.word	0x10000012
 8003234:	20000060 	.word	0x20000060
 8003238:	431bde83 	.word	0x431bde83

0800323c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003244:	4b79      	ldr	r3, [pc, #484]	; (800342c <ADC_Init+0x1f0>)
 8003246:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003270:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	021a      	lsls	r2, r3, #8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	4a58      	ldr	r2, [pc, #352]	; (8003430 <ADC_Init+0x1f4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003304:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	e00f      	b.n	800333a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003338:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0202 	bic.w	r2, r2, #2
 8003348:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7e1b      	ldrb	r3, [r3, #24]
 8003354:	005a      	lsls	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003376:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003386:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	3b01      	subs	r3, #1
 8003394:	035a      	lsls	r2, r3, #13
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	e007      	b.n	80033b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	051a      	lsls	r2, r3, #20
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6899      	ldr	r1, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033f2:	025a      	lsls	r2, r3, #9
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6899      	ldr	r1, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	029a      	lsls	r2, r3, #10
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40012300 	.word	0x40012300
 8003430:	0f000001 	.word	0x0f000001

08003434 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800344a:	2b00      	cmp	r3, #0
 800344c:	d13c      	bne.n	80034c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d12b      	bne.n	80034c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800346c:	2b00      	cmp	r3, #0
 800346e:	d127      	bne.n	80034c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003488:	2b00      	cmp	r3, #0
 800348a:	d119      	bne.n	80034c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0220 	bic.w	r2, r2, #32
 800349a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff fd61 	bl	8002f88 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034c6:	e00e      	b.n	80034e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fd75 	bl	8002fc4 <HAL_ADC_ErrorCallback>
}
 80034da:	e004      	b.n	80034e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff fd4d 	bl	8002f9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2240      	movs	r2, #64	; 0x40
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f043 0204 	orr.w	r2, r3, #4
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff fd4a 	bl	8002fc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003568:	4013      	ands	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357e:	4a04      	ldr	r2, [pc, #16]	; (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	60d3      	str	r3, [r2, #12]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <__NVIC_GetPriorityGrouping+0x18>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 0307 	and.w	r3, r3, #7
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db0b      	blt.n	80035da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	f003 021f 	and.w	r2, r3, #31
 80035c8:	4907      	ldr	r1, [pc, #28]	; (80035e8 <__NVIC_EnableIRQ+0x38>)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2001      	movs	r0, #1
 80035d2:	fa00 f202 	lsl.w	r2, r0, r2
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	e000e100 	.word	0xe000e100

080035ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	db0a      	blt.n	8003616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	490c      	ldr	r1, [pc, #48]	; (8003638 <__NVIC_SetPriority+0x4c>)
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	0112      	lsls	r2, r2, #4
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	440b      	add	r3, r1
 8003610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003614:	e00a      	b.n	800362c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4908      	ldr	r1, [pc, #32]	; (800363c <__NVIC_SetPriority+0x50>)
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	3b04      	subs	r3, #4
 8003624:	0112      	lsls	r2, r2, #4
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	440b      	add	r3, r1
 800362a:	761a      	strb	r2, [r3, #24]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000e100 	.word	0xe000e100
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	; 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f1c3 0307 	rsb	r3, r3, #7
 800365a:	2b04      	cmp	r3, #4
 800365c:	bf28      	it	cs
 800365e:	2304      	movcs	r3, #4
 8003660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3304      	adds	r3, #4
 8003666:	2b06      	cmp	r3, #6
 8003668:	d902      	bls.n	8003670 <NVIC_EncodePriority+0x30>
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3b03      	subs	r3, #3
 800366e:	e000      	b.n	8003672 <NVIC_EncodePriority+0x32>
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	f04f 32ff 	mov.w	r2, #4294967295
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	401a      	ands	r2, r3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003688:	f04f 31ff 	mov.w	r1, #4294967295
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	43d9      	mvns	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	4313      	orrs	r3, r2
         );
}
 800369a:	4618      	mov	r0, r3
 800369c:	3724      	adds	r7, #36	; 0x24
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b8:	d301      	bcc.n	80036be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00f      	b.n	80036de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <SysTick_Config+0x40>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c6:	210f      	movs	r1, #15
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f7ff ff8e 	bl	80035ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <SysTick_Config+0x40>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d6:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <SysTick_Config+0x40>)
 80036d8:	2207      	movs	r2, #7
 80036da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	e000e010 	.word	0xe000e010

080036ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff29 	bl	800354c <__NVIC_SetPriorityGrouping>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003714:	f7ff ff3e 	bl	8003594 <__NVIC_GetPriorityGrouping>
 8003718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7ff ff8e 	bl	8003640 <NVIC_EncodePriority>
 8003724:	4602      	mov	r2, r0
 8003726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff5d 	bl	80035ec <__NVIC_SetPriority>
}
 8003732:	bf00      	nop
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff31 	bl	80035b0 <__NVIC_EnableIRQ>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ffa2 	bl	80036a8 <SysTick_Config>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800377c:	f7ff f97e 	bl	8002a7c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e099      	b.n	80038c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ac:	e00f      	b.n	80037ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ae:	f7ff f965 	bl	8002a7c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d908      	bls.n	80037ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2203      	movs	r2, #3
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e078      	b.n	80038c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e8      	bne.n	80037ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <HAL_DMA_Init+0x158>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	2b04      	cmp	r3, #4
 8003826:	d107      	bne.n	8003838 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	4313      	orrs	r3, r2
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 0307 	bic.w	r3, r3, #7
 800384e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	2b04      	cmp	r3, #4
 8003860:	d117      	bne.n	8003892 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00e      	beq.n	8003892 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fa91 	bl	8003d9c <DMA_CheckFifoParam>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800388e:	2301      	movs	r3, #1
 8003890:	e016      	b.n	80038c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa48 	bl	8003d30 <DMA_CalcBaseAndBitshift>
 80038a0:	4603      	mov	r3, r0
 80038a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	223f      	movs	r2, #63	; 0x3f
 80038aa:	409a      	lsls	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	f010803f 	.word	0xf010803f

080038cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_DMA_Start_IT+0x26>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e040      	b.n	8003974 <HAL_DMA_Start_IT+0xa8>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d12f      	bne.n	8003966 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f9da 	bl	8003cd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	223f      	movs	r2, #63	; 0x3f
 8003926:	409a      	lsls	r2, r3
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0216 	orr.w	r2, r2, #22
 800393a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0208 	orr.w	r2, r2, #8
 8003952:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e005      	b.n	8003972 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800396e:	2302      	movs	r3, #2
 8003970:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003972:	7dfb      	ldrb	r3, [r7, #23]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d004      	beq.n	800399a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e00c      	b.n	80039b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2205      	movs	r2, #5
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039cc:	4b92      	ldr	r3, [pc, #584]	; (8003c18 <HAL_DMA_IRQHandler+0x258>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a92      	ldr	r2, [pc, #584]	; (8003c1c <HAL_DMA_IRQHandler+0x25c>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0a9b      	lsrs	r3, r3, #10
 80039d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	2208      	movs	r2, #8
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01a      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0204 	bic.w	r2, r2, #4
 8003a12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	2208      	movs	r2, #8
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	f043 0201 	orr.w	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	2201      	movs	r2, #1
 8003a32:	409a      	lsls	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d012      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	2201      	movs	r2, #1
 8003a50:	409a      	lsls	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5a:	f043 0202 	orr.w	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	2204      	movs	r2, #4
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d012      	beq.n	8003a98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00b      	beq.n	8003a98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	2204      	movs	r2, #4
 8003a86:	409a      	lsls	r2, r3
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	2210      	movs	r2, #16
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d043      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d03c      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aba:	2210      	movs	r2, #16
 8003abc:	409a      	lsls	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d018      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d108      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d024      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
 8003aee:	e01f      	b.n	8003b30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01b      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
 8003b00:	e016      	b.n	8003b30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0208 	bic.w	r2, r2, #8
 8003b1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	2220      	movs	r2, #32
 8003b36:	409a      	lsls	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 808e 	beq.w	8003c5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8086 	beq.w	8003c5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	2220      	movs	r2, #32
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	d136      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0216 	bic.w	r2, r2, #22
 8003b78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_DMA_IRQHandler+0x1da>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0208 	bic.w	r2, r2, #8
 8003ba8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	223f      	movs	r2, #63	; 0x3f
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d07d      	beq.n	8003cca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
        }
        return;
 8003bd6:	e078      	b.n	8003cca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01c      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d108      	bne.n	8003c06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d030      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
 8003c04:	e02b      	b.n	8003c5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d027      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
 8003c16:	e022      	b.n	8003c5e <HAL_DMA_IRQHandler+0x29e>
 8003c18:	20000060 	.word	0x20000060
 8003c1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0210 	bic.w	r2, r2, #16
 8003c3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d032      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d022      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2205      	movs	r2, #5
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d307      	bcc.n	8003ca6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f2      	bne.n	8003c8a <HAL_DMA_IRQHandler+0x2ca>
 8003ca4:	e000      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ca6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4798      	blx	r3
 8003cc8:	e000      	b.n	8003ccc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003cca:	bf00      	nop
    }
  }
}
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop

08003cd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d108      	bne.n	8003d14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d12:	e007      	b.n	8003d24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	60da      	str	r2, [r3, #12]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	3b10      	subs	r3, #16
 8003d40:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <DMA_CalcBaseAndBitshift+0x64>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d4a:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <DMA_CalcBaseAndBitshift+0x68>)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d909      	bls.n	8003d72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d70:	e007      	b.n	8003d82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	aaaaaaab 	.word	0xaaaaaaab
 8003d98:	08012b34 	.word	0x08012b34

08003d9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11f      	bne.n	8003df6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d855      	bhi.n	8003e68 <DMA_CheckFifoParam+0xcc>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <DMA_CheckFifoParam+0x28>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003de7 	.word	0x08003de7
 8003dcc:	08003dd5 	.word	0x08003dd5
 8003dd0:	08003e69 	.word	0x08003e69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d045      	beq.n	8003e6c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de4:	e042      	b.n	8003e6c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dee:	d13f      	bne.n	8003e70 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df4:	e03c      	b.n	8003e70 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfe:	d121      	bne.n	8003e44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d836      	bhi.n	8003e74 <DMA_CheckFifoParam+0xd8>
 8003e06:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <DMA_CheckFifoParam+0x70>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e23 	.word	0x08003e23
 8003e14:	08003e1d 	.word	0x08003e1d
 8003e18:	08003e35 	.word	0x08003e35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e20:	e02f      	b.n	8003e82 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d024      	beq.n	8003e78 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e32:	e021      	b.n	8003e78 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e3c:	d11e      	bne.n	8003e7c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e42:	e01b      	b.n	8003e7c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d902      	bls.n	8003e50 <DMA_CheckFifoParam+0xb4>
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d003      	beq.n	8003e56 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e4e:	e018      	b.n	8003e82 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      break;
 8003e54:	e015      	b.n	8003e82 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00e      	beq.n	8003e80 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
      break;
 8003e66:	e00b      	b.n	8003e80 <DMA_CheckFifoParam+0xe4>
      break;
 8003e68:	bf00      	nop
 8003e6a:	e00a      	b.n	8003e82 <DMA_CheckFifoParam+0xe6>
      break;
 8003e6c:	bf00      	nop
 8003e6e:	e008      	b.n	8003e82 <DMA_CheckFifoParam+0xe6>
      break;
 8003e70:	bf00      	nop
 8003e72:	e006      	b.n	8003e82 <DMA_CheckFifoParam+0xe6>
      break;
 8003e74:	bf00      	nop
 8003e76:	e004      	b.n	8003e82 <DMA_CheckFifoParam+0xe6>
      break;
 8003e78:	bf00      	nop
 8003e7a:	e002      	b.n	8003e82 <DMA_CheckFifoParam+0xe6>
      break;   
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <DMA_CheckFifoParam+0xe6>
      break;
 8003e80:	bf00      	nop
    }
  } 
  
  return status; 
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	; 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e159      	b.n	8004160 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eac:	2201      	movs	r2, #1
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	f040 8148 	bne.w	800415a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d00b      	beq.n	8003eea <HAL_GPIO_Init+0x5a>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d007      	beq.n	8003eea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ede:	2b11      	cmp	r3, #17
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b12      	cmp	r3, #18
 8003ee8:	d130      	bne.n	8003f4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f20:	2201      	movs	r2, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 0201 	and.w	r2, r3, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0xfc>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b12      	cmp	r3, #18
 8003f8a:	d123      	bne.n	8003fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	08da      	lsrs	r2, r3, #3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3208      	adds	r2, #8
 8003f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	220f      	movs	r2, #15
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	08da      	lsrs	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3208      	adds	r2, #8
 8003fce:	69b9      	ldr	r1, [r7, #24]
 8003fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	2203      	movs	r2, #3
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 0203 	and.w	r2, r3, #3
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80a2 	beq.w	800415a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	4b56      	ldr	r3, [pc, #344]	; (8004174 <HAL_GPIO_Init+0x2e4>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	4a55      	ldr	r2, [pc, #340]	; (8004174 <HAL_GPIO_Init+0x2e4>)
 8004020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004024:	6453      	str	r3, [r2, #68]	; 0x44
 8004026:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_GPIO_Init+0x2e4>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004032:	4a51      	ldr	r2, [pc, #324]	; (8004178 <HAL_GPIO_Init+0x2e8>)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	089b      	lsrs	r3, r3, #2
 8004038:	3302      	adds	r3, #2
 800403a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	220f      	movs	r2, #15
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a48      	ldr	r2, [pc, #288]	; (800417c <HAL_GPIO_Init+0x2ec>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d019      	beq.n	8004092 <HAL_GPIO_Init+0x202>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a47      	ldr	r2, [pc, #284]	; (8004180 <HAL_GPIO_Init+0x2f0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_GPIO_Init+0x1fe>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a46      	ldr	r2, [pc, #280]	; (8004184 <HAL_GPIO_Init+0x2f4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00d      	beq.n	800408a <HAL_GPIO_Init+0x1fa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a45      	ldr	r2, [pc, #276]	; (8004188 <HAL_GPIO_Init+0x2f8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <HAL_GPIO_Init+0x1f6>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a44      	ldr	r2, [pc, #272]	; (800418c <HAL_GPIO_Init+0x2fc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_GPIO_Init+0x1f2>
 800407e:	2304      	movs	r3, #4
 8004080:	e008      	b.n	8004094 <HAL_GPIO_Init+0x204>
 8004082:	2307      	movs	r3, #7
 8004084:	e006      	b.n	8004094 <HAL_GPIO_Init+0x204>
 8004086:	2303      	movs	r3, #3
 8004088:	e004      	b.n	8004094 <HAL_GPIO_Init+0x204>
 800408a:	2302      	movs	r3, #2
 800408c:	e002      	b.n	8004094 <HAL_GPIO_Init+0x204>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_GPIO_Init+0x204>
 8004092:	2300      	movs	r3, #0
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	f002 0203 	and.w	r2, r2, #3
 800409a:	0092      	lsls	r2, r2, #2
 800409c:	4093      	lsls	r3, r2
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040a4:	4934      	ldr	r1, [pc, #208]	; (8004178 <HAL_GPIO_Init+0x2e8>)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	3302      	adds	r3, #2
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b2:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_GPIO_Init+0x300>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040d6:	4a2e      	ldr	r2, [pc, #184]	; (8004190 <HAL_GPIO_Init+0x300>)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040dc:	4b2c      	ldr	r3, [pc, #176]	; (8004190 <HAL_GPIO_Init+0x300>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004100:	4a23      	ldr	r2, [pc, #140]	; (8004190 <HAL_GPIO_Init+0x300>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004106:	4b22      	ldr	r3, [pc, #136]	; (8004190 <HAL_GPIO_Init+0x300>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800412a:	4a19      	ldr	r2, [pc, #100]	; (8004190 <HAL_GPIO_Init+0x300>)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004130:	4b17      	ldr	r3, [pc, #92]	; (8004190 <HAL_GPIO_Init+0x300>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004154:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <HAL_GPIO_Init+0x300>)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3301      	adds	r3, #1
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b0f      	cmp	r3, #15
 8004164:	f67f aea2 	bls.w	8003eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004168:	bf00      	nop
 800416a:	3724      	adds	r7, #36	; 0x24
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40023800 	.word	0x40023800
 8004178:	40013800 	.word	0x40013800
 800417c:	40020000 	.word	0x40020000
 8004180:	40020400 	.word	0x40020400
 8004184:	40020800 	.word	0x40020800
 8004188:	40020c00 	.word	0x40020c00
 800418c:	40021000 	.word	0x40021000
 8004190:	40013c00 	.word	0x40013c00

08004194 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	887b      	ldrh	r3, [r7, #2]
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e001      	b.n	80041b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]
 80041d0:	4613      	mov	r3, r2
 80041d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041d4:	787b      	ldrb	r3, [r7, #1]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041da:	887a      	ldrh	r2, [r7, #2]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041e0:	e003      	b.n	80041ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	041a      	lsls	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	619a      	str	r2, [r3, #24]
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f8:	b08f      	sub	sp, #60	; 0x3c
 80041fa:	af0a      	add	r7, sp, #40	; 0x28
 80041fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e10f      	b.n	8004428 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f006 fc16 	bl	800aa54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2203      	movs	r2, #3
 800422c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f003 fbb3 	bl	80079b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	687e      	ldr	r6, [r7, #4]
 8004254:	466d      	mov	r5, sp
 8004256:	f106 0410 	add.w	r4, r6, #16
 800425a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800425c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800425e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004262:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004266:	e885 0003 	stmia.w	r5, {r0, r1}
 800426a:	1d33      	adds	r3, r6, #4
 800426c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800426e:	6838      	ldr	r0, [r7, #0]
 8004270:	f003 fa8a 	bl	8007788 <USB_CoreInit>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0d0      	b.n	8004428 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f003 fba1 	bl	80079d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	e04a      	b.n	800432e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	333d      	adds	r3, #61	; 0x3d
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	333c      	adds	r3, #60	; 0x3c
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	b298      	uxth	r0, r3
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3342      	adds	r3, #66	; 0x42
 80042d4:	4602      	mov	r2, r0
 80042d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042d8:	7bfa      	ldrb	r2, [r7, #15]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	333f      	adds	r3, #63	; 0x3f
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3344      	adds	r3, #68	; 0x44
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	3348      	adds	r3, #72	; 0x48
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3350      	adds	r3, #80	; 0x50
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	3301      	adds	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d3af      	bcc.n	8004298 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	e044      	b.n	80043c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	3301      	adds	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d3b5      	bcc.n	800433e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	687e      	ldr	r6, [r7, #4]
 80043da:	466d      	mov	r5, sp
 80043dc:	f106 0410 	add.w	r4, r6, #16
 80043e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80043f0:	1d33      	adds	r3, r6, #4
 80043f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043f4:	6838      	ldr	r0, [r7, #0]
 80043f6:	f003 fb17 	bl	8007a28 <USB_DevInit>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e00d      	b.n	8004428 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f004 fb5f 	bl	8008ae4 <USB_DevDisconnect>

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004430 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_PCD_Start+0x1c>
 8004448:	2302      	movs	r3, #2
 800444a:	e020      	b.n	800448e <HAL_PCD_Start+0x5e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	2b01      	cmp	r3, #1
 800445a:	d109      	bne.n	8004470 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004460:	2b01      	cmp	r3, #1
 8004462:	d005      	beq.n	8004470 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f003 fa8b 	bl	8007990 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f004 fb0f 	bl	8008aa2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004496:	b590      	push	{r4, r7, lr}
 8004498:	b08d      	sub	sp, #52	; 0x34
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f004 fbcd 	bl	8008c4c <USB_GetMode>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f040 839d 	bne.w	8004bf4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f004 fb31 	bl	8008b26 <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8393 	beq.w	8004bf2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f004 fb28 	bl	8008b26 <USB_ReadInterrupts>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d107      	bne.n	80044f0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f002 0202 	and.w	r2, r2, #2
 80044ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f004 fb16 	bl	8008b26 <USB_ReadInterrupts>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b10      	cmp	r3, #16
 8004502:	d161      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0210 	bic.w	r2, r2, #16
 8004512:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f003 020f 	and.w	r2, r3, #15
 8004520:	4613      	mov	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	3304      	adds	r3, #4
 8004532:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	0c5b      	lsrs	r3, r3, #17
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	2b02      	cmp	r3, #2
 800453e:	d124      	bne.n	800458a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d035      	beq.n	80045b8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	091b      	lsrs	r3, r3, #4
 8004554:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800455a:	b29b      	uxth	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	6a38      	ldr	r0, [r7, #32]
 8004560:	f004 f97c 	bl	800885c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004570:	441a      	add	r2, r3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004582:	441a      	add	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	619a      	str	r2, [r3, #24]
 8004588:	e016      	b.n	80045b8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	0c5b      	lsrs	r3, r3, #17
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	2b06      	cmp	r3, #6
 8004594:	d110      	bne.n	80045b8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800459c:	2208      	movs	r2, #8
 800459e:	4619      	mov	r1, r3
 80045a0:	6a38      	ldr	r0, [r7, #32]
 80045a2:	f004 f95b 	bl	800885c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045b2:	441a      	add	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0210 	orr.w	r2, r2, #16
 80045c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f004 faaa 	bl	8008b26 <USB_ReadInterrupts>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045dc:	d16e      	bne.n	80046bc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f004 fab0 	bl	8008b4c <USB_ReadDevAllOutEpInterrupt>
 80045ec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80045ee:	e062      	b.n	80046b6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d057      	beq.n	80046aa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	4611      	mov	r1, r2
 8004604:	4618      	mov	r0, r3
 8004606:	f004 fad5 	bl	8008bb4 <USB_ReadDevOutEPInterrupt>
 800460a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004622:	461a      	mov	r2, r3
 8004624:	2301      	movs	r3, #1
 8004626:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fdb0 	bl	8005190 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	461a      	mov	r2, r3
 8004648:	2308      	movs	r3, #8
 800464a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800464c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 feaa 	bl	80053a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d008      	beq.n	8004670 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	2310      	movs	r3, #16
 800466e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	461a      	mov	r2, r3
 8004688:	2320      	movs	r3, #32
 800468a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	3301      	adds	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d199      	bne.n	80045f0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f004 fa30 	bl	8008b26 <USB_ReadInterrupts>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046d0:	f040 80c0 	bne.w	8004854 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f004 fa51 	bl	8008b80 <USB_ReadDevAllInEpInterrupt>
 80046de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80046e4:	e0b2      	b.n	800484c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80a7 	beq.w	8004840 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	4611      	mov	r1, r2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f004 fa77 	bl	8008bf0 <USB_ReadDevInEPInterrupt>
 8004702:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d057      	beq.n	80047be <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	2201      	movs	r2, #1
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43db      	mvns	r3, r3
 8004728:	69f9      	ldr	r1, [r7, #28]
 800472a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800472e:	4013      	ands	r3, r2
 8004730:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	461a      	mov	r2, r3
 8004740:	2301      	movs	r3, #1
 8004742:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d132      	bne.n	80047b2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	3348      	adds	r3, #72	; 0x48
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4403      	add	r3, r0
 800476c:	3344      	adds	r3, #68	; 0x44
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4419      	add	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004776:	4613      	mov	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4403      	add	r3, r0
 8004780:	3348      	adds	r3, #72	; 0x48
 8004782:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	2b00      	cmp	r3, #0
 8004788:	d113      	bne.n	80047b2 <HAL_PCD_IRQHandler+0x31c>
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	3350      	adds	r3, #80	; 0x50
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d108      	bne.n	80047b2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047aa:	461a      	mov	r2, r3
 80047ac:	2101      	movs	r1, #1
 80047ae:	f004 fa7f 	bl	8008cb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	4619      	mov	r1, r3
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f006 f9cc 	bl	800ab56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d4:	461a      	mov	r2, r3
 80047d6:	2308      	movs	r3, #8
 80047d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	461a      	mov	r2, r3
 80047f2:	2310      	movs	r3, #16
 80047f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480c:	461a      	mov	r2, r3
 800480e:	2340      	movs	r3, #64	; 0x40
 8004810:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	461a      	mov	r2, r3
 800482a:	2302      	movs	r3, #2
 800482c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fc1b 	bl	8005076 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	3301      	adds	r3, #1
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	f47f af49 	bne.w	80046e6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f004 f964 	bl	8008b26 <USB_ReadInterrupts>
 800485e:	4603      	mov	r3, r0
 8004860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004868:	d122      	bne.n	80048b0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004884:	2b01      	cmp	r3, #1
 8004886:	d108      	bne.n	800489a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004890:	2100      	movs	r1, #0
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fe26 	bl	80054e4 <HAL_PCDEx_LPM_Callback>
 8004898:	e002      	b.n	80048a0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f006 f9c8 	bl	800ac30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80048ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f004 f936 	bl	8008b26 <USB_ReadInterrupts>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c4:	d112      	bne.n	80048ec <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d102      	bne.n	80048dc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f006 f984 	bl	800abe4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80048ea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f004 f918 	bl	8008b26 <USB_ReadInterrupts>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004900:	f040 80c7 	bne.w	8004a92 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2110      	movs	r1, #16
 800491e:	4618      	mov	r0, r3
 8004920:	f003 f9e6 	bl	8007cf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004924:	2300      	movs	r3, #0
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004928:	e056      	b.n	80049d8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	461a      	mov	r2, r3
 8004938:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800493c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	440a      	add	r2, r1
 8004954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004958:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800495c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	440a      	add	r2, r1
 8004974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004978:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800497c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	461a      	mov	r2, r3
 800498c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004990:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d4:	3301      	adds	r3, #1
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049de:	429a      	cmp	r2, r3
 80049e0:	d3a3      	bcc.n	800492a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80049f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0e:	f043 030b 	orr.w	r3, r3, #11
 8004a12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a24:	f043 030b 	orr.w	r3, r3, #11
 8004a28:	6453      	str	r3, [r2, #68]	; 0x44
 8004a2a:	e015      	b.n	8004a58 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a3e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004a42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a52:	f043 030b 	orr.w	r3, r3, #11
 8004a56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f004 f917 	bl	8008cb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f004 f845 	bl	8008b26 <USB_ReadInterrupts>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	d124      	bne.n	8004af2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f004 f8db 	bl	8008c68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f003 f97b 	bl	8007db2 <USB_GetDevSpeed>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681c      	ldr	r4, [r3, #0]
 8004ac8:	f001 f920 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8004acc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f002 feb8 	bl	800784c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f006 f862 	bl	800aba6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f004 f815 	bl	8008b26 <USB_ReadInterrupts>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d10a      	bne.n	8004b1c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f006 f83f 	bl	800ab8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f002 0208 	and.w	r2, r2, #8
 8004b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f004 f800 	bl	8008b26 <USB_ReadInterrupts>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b30:	d10f      	bne.n	8004b52 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f006 f897 	bl	800ac70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f003 ffe5 	bl	8008b26 <USB_ReadInterrupts>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b66:	d10f      	bne.n	8004b88 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	4619      	mov	r1, r3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f006 f86a 	bl	800ac4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f003 ffca 	bl	8008b26 <USB_ReadInterrupts>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d10a      	bne.n	8004bb4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f006 f878 	bl	800ac94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f003 ffb4 	bl	8008b26 <USB_ReadInterrupts>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d115      	bne.n	8004bf4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f006 f868 	bl	800acb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	e000      	b.n	8004bf4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004bf2:	bf00      	nop
    }
  }
}
 8004bf4:	3734      	adds	r7, #52	; 0x34
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd90      	pop	{r4, r7, pc}

08004bfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_PCD_SetAddress+0x1a>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e013      	b.n	8004c3c <HAL_PCD_SetAddress+0x42>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f003 ff12 	bl	8008a56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	4611      	mov	r1, r2
 8004c50:	461a      	mov	r2, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	70fb      	strb	r3, [r7, #3]
 8004c56:	460b      	mov	r3, r1
 8004c58:	803b      	strh	r3, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da0f      	bge.n	8004c8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	f003 020f 	and.w	r2, r3, #15
 8004c70:	4613      	mov	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	3338      	adds	r3, #56	; 0x38
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3304      	adds	r3, #4
 8004c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	705a      	strb	r2, [r3, #1]
 8004c88:	e00f      	b.n	8004caa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	f003 020f 	and.w	r2, r3, #15
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004cb6:	883a      	ldrh	r2, [r7, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	78ba      	ldrb	r2, [r7, #2]
 8004cc0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d004      	beq.n	8004cd4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004cd4:	78bb      	ldrb	r3, [r7, #2]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d102      	bne.n	8004ce0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_PCD_EP_Open+0xaa>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e00e      	b.n	8004d0c <HAL_PCD_EP_Open+0xc8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f003 f87d 	bl	8007dfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da0f      	bge.n	8004d48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	f003 020f 	and.w	r2, r3, #15
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	3338      	adds	r3, #56	; 0x38
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	705a      	strb	r2, [r3, #1]
 8004d46:	e00f      	b.n	8004d68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	f003 020f 	and.w	r2, r3, #15
 8004d4e:	4613      	mov	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3304      	adds	r3, #4
 8004d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_PCD_EP_Close+0x6e>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e00e      	b.n	8004da0 <HAL_PCD_EP_Close+0x8c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f003 f8bb 	bl	8007f0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	607a      	str	r2, [r7, #4]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	460b      	mov	r3, r1
 8004db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004db8:	7afb      	ldrb	r3, [r7, #11]
 8004dba:	f003 020f 	and.w	r2, r3, #15
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	3304      	adds	r3, #4
 8004dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2200      	movs	r2, #0
 8004de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dea:	7afb      	ldrb	r3, [r7, #11]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d102      	bne.n	8004e04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e04:	7afb      	ldrb	r3, [r7, #11]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6979      	ldr	r1, [r7, #20]
 8004e1c:	f003 fb96 	bl	800854c <USB_EP0StartXfer>
 8004e20:	e008      	b.n	8004e34 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6979      	ldr	r1, [r7, #20]
 8004e30:	f003 f948 	bl	80080c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	f003 020f 	and.w	r2, r3, #15
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004e60:	681b      	ldr	r3, [r3, #0]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b086      	sub	sp, #24
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e7e:	7afb      	ldrb	r3, [r7, #11]
 8004e80:	f003 020f 	and.w	r2, r3, #15
 8004e84:	4613      	mov	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	3338      	adds	r3, #56	; 0x38
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	3304      	adds	r3, #4
 8004e94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eae:	7afb      	ldrb	r3, [r7, #11]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d102      	bne.n	8004ec8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ec8:	7afb      	ldrb	r3, [r7, #11]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	f003 fb34 	bl	800854c <USB_EP0StartXfer>
 8004ee4:	e008      	b.n	8004ef8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	6979      	ldr	r1, [r7, #20]
 8004ef4:	f003 f8e6 	bl	80080c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d901      	bls.n	8004f20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e050      	b.n	8004fc2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	da0f      	bge.n	8004f48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	f003 020f 	and.w	r2, r3, #15
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	3338      	adds	r3, #56	; 0x38
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	705a      	strb	r2, [r3, #1]
 8004f46:	e00d      	b.n	8004f64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_PCD_EP_SetStall+0x82>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e01e      	b.n	8004fc2 <HAL_PCD_EP_SetStall+0xc0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68f9      	ldr	r1, [r7, #12]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f003 fc8b 	bl	80088ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	b2d9      	uxtb	r1, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f003 fe7c 	bl	8008cb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	f003 020f 	and.w	r2, r3, #15
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d901      	bls.n	8004fe8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e042      	b.n	800506e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	da0f      	bge.n	8005010 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	f003 020f 	and.w	r2, r3, #15
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	3338      	adds	r3, #56	; 0x38
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4413      	add	r3, r2
 8005004:	3304      	adds	r3, #4
 8005006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	705a      	strb	r2, [r3, #1]
 800500e:	e00f      	b.n	8005030 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	f003 020f 	and.w	r2, r3, #15
 8005016:	4613      	mov	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4413      	add	r3, r2
 8005026:	3304      	adds	r3, #4
 8005028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_PCD_EP_ClrStall+0x86>
 800504c:	2302      	movs	r3, #2
 800504e:	e00e      	b.n	800506e <HAL_PCD_EP_ClrStall+0xa4>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68f9      	ldr	r1, [r7, #12]
 800505e:	4618      	mov	r0, r3
 8005060:	f003 fc93 	bl	800898a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b08a      	sub	sp, #40	; 0x28
 800507a:	af02      	add	r7, sp, #8
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	3338      	adds	r3, #56	; 0x38
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	3304      	adds	r3, #4
 800509c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d901      	bls.n	80050ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e06c      	b.n	8005188 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d902      	bls.n	80050ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3303      	adds	r3, #3
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050d2:	e02b      	b.n	800512c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d902      	bls.n	80050f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	3303      	adds	r3, #3
 80050f4:	089b      	lsrs	r3, r3, #2
 80050f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68d9      	ldr	r1, [r3, #12]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005108:	b2db      	uxtb	r3, r3
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	4603      	mov	r3, r0
 800510e:	6978      	ldr	r0, [r7, #20]
 8005110:	f003 fb6f 	bl	80087f2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	441a      	add	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	441a      	add	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	b29b      	uxth	r3, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	429a      	cmp	r2, r3
 8005140:	d809      	bhi.n	8005156 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800514a:	429a      	cmp	r2, r3
 800514c:	d203      	bcs.n	8005156 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1be      	bne.n	80050d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	429a      	cmp	r2, r3
 8005160:	d811      	bhi.n	8005186 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	2201      	movs	r2, #1
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	43db      	mvns	r3, r3
 800517c:	6939      	ldr	r1, [r7, #16]
 800517e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005182:	4013      	ands	r3, r2
 8005184:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	333c      	adds	r3, #60	; 0x3c
 80051a8:	3304      	adds	r3, #4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	f040 80a0 	bne.w	8005308 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d015      	beq.n	80051fe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a72      	ldr	r2, [pc, #456]	; (80053a0 <PCD_EP_OutXfrComplete_int+0x210>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	f240 80dd 	bls.w	8005396 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 80d7 	beq.w	8005396 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	461a      	mov	r2, r3
 80051f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fa:	6093      	str	r3, [r2, #8]
 80051fc:	e0cb      	b.n	8005396 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	461a      	mov	r2, r3
 8005216:	2320      	movs	r3, #32
 8005218:	6093      	str	r3, [r2, #8]
 800521a:	e0bc      	b.n	8005396 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005222:	2b00      	cmp	r3, #0
 8005224:	f040 80b7 	bne.w	8005396 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4a5d      	ldr	r2, [pc, #372]	; (80053a0 <PCD_EP_OutXfrComplete_int+0x210>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d90f      	bls.n	8005250 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	461a      	mov	r2, r3
 8005248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800524c:	6093      	str	r3, [r2, #8]
 800524e:	e0a2      	b.n	8005396 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005262:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	0159      	lsls	r1, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	440b      	add	r3, r1
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005276:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4403      	add	r3, r0
 8005286:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800528a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800529e:	6819      	ldr	r1, [r3, #0]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4403      	add	r3, r0
 80052ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4419      	add	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4403      	add	r3, r0
 80052c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80052c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d114      	bne.n	80052fa <PCD_EP_OutXfrComplete_int+0x16a>
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d108      	bne.n	80052fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80052f2:	461a      	mov	r2, r3
 80052f4:	2101      	movs	r1, #1
 80052f6:	f003 fcdb 	bl	8008cb0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f005 fc0d 	bl	800ab20 <HAL_PCD_DataOutStageCallback>
 8005306:	e046      	b.n	8005396 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <PCD_EP_OutXfrComplete_int+0x214>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d124      	bne.n	800535a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	461a      	mov	r2, r3
 8005328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532c:	6093      	str	r3, [r2, #8]
 800532e:	e032      	b.n	8005396 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d008      	beq.n	800534c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	461a      	mov	r2, r3
 8005348:	2320      	movs	r3, #32
 800534a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	4619      	mov	r1, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f005 fbe4 	bl	800ab20 <HAL_PCD_DataOutStageCallback>
 8005358:	e01d      	b.n	8005396 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d114      	bne.n	800538a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d108      	bne.n	800538a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005382:	461a      	mov	r2, r3
 8005384:	2100      	movs	r1, #0
 8005386:	f003 fc93 	bl	8008cb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f005 fbc5 	bl	800ab20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	4f54300a 	.word	0x4f54300a
 80053a4:	4f54310a 	.word	0x4f54310a

080053a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	333c      	adds	r3, #60	; 0x3c
 80053c0:	3304      	adds	r3, #4
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a15      	ldr	r2, [pc, #84]	; (8005430 <PCD_EP_OutSetupPacket_int+0x88>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d90e      	bls.n	80053fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d009      	beq.n	80053fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	461a      	mov	r2, r3
 80053f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f005 fb7d 	bl	800aafc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <PCD_EP_OutSetupPacket_int+0x88>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d90c      	bls.n	8005424 <PCD_EP_OutSetupPacket_int+0x7c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d108      	bne.n	8005424 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800541c:	461a      	mov	r2, r3
 800541e:	2101      	movs	r1, #1
 8005420:	f003 fc46 	bl	8008cb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	4f54300a 	.word	0x4f54300a

08005434 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
 8005440:	4613      	mov	r3, r2
 8005442:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d107      	bne.n	8005462 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005452:	883b      	ldrh	r3, [r7, #0]
 8005454:	0419      	lsls	r1, r3, #16
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	430a      	orrs	r2, r1
 800545e:	629a      	str	r2, [r3, #40]	; 0x28
 8005460:	e028      	b.n	80054b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	0c1b      	lsrs	r3, r3, #16
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005470:	2300      	movs	r3, #0
 8005472:	73fb      	strb	r3, [r7, #15]
 8005474:	e00d      	b.n	8005492 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	3340      	adds	r3, #64	; 0x40
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	4413      	add	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	3301      	adds	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
 8005492:	7bfa      	ldrb	r2, [r7, #15]
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	3b01      	subs	r3, #1
 8005498:	429a      	cmp	r2, r3
 800549a:	d3ec      	bcc.n	8005476 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800549c:	883b      	ldrh	r3, [r7, #0]
 800549e:	0418      	lsls	r0, r3, #16
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	4302      	orrs	r2, r0
 80054ac:	3340      	adds	r3, #64	; 0x40
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	887a      	ldrh	r2, [r7, #2]
 80054d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e25b      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d075      	beq.n	8005606 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800551a:	4ba3      	ldr	r3, [pc, #652]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 030c 	and.w	r3, r3, #12
 8005522:	2b04      	cmp	r3, #4
 8005524:	d00c      	beq.n	8005540 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005526:	4ba0      	ldr	r3, [pc, #640]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800552e:	2b08      	cmp	r3, #8
 8005530:	d112      	bne.n	8005558 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005532:	4b9d      	ldr	r3, [pc, #628]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800553e:	d10b      	bne.n	8005558 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005540:	4b99      	ldr	r3, [pc, #612]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d05b      	beq.n	8005604 <HAL_RCC_OscConfig+0x108>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d157      	bne.n	8005604 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e236      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005560:	d106      	bne.n	8005570 <HAL_RCC_OscConfig+0x74>
 8005562:	4b91      	ldr	r3, [pc, #580]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a90      	ldr	r2, [pc, #576]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e01d      	b.n	80055ac <HAL_RCC_OscConfig+0xb0>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x98>
 800557a:	4b8b      	ldr	r3, [pc, #556]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a8a      	ldr	r2, [pc, #552]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b88      	ldr	r3, [pc, #544]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a87      	ldr	r2, [pc, #540]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e00b      	b.n	80055ac <HAL_RCC_OscConfig+0xb0>
 8005594:	4b84      	ldr	r3, [pc, #528]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a83      	ldr	r2, [pc, #524]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800559a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	4b81      	ldr	r3, [pc, #516]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a80      	ldr	r2, [pc, #512]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 80055a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d013      	beq.n	80055dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b4:	f7fd fa62 	bl	8002a7c <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055bc:	f7fd fa5e 	bl	8002a7c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b64      	cmp	r3, #100	; 0x64
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e1fb      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ce:	4b76      	ldr	r3, [pc, #472]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0xc0>
 80055da:	e014      	b.n	8005606 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7fd fa4e 	bl	8002a7c <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055e4:	f7fd fa4a 	bl	8002a7c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	; 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e1e7      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055f6:	4b6c      	ldr	r3, [pc, #432]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0xe8>
 8005602:	e000      	b.n	8005606 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d063      	beq.n	80056da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005612:	4b65      	ldr	r3, [pc, #404]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800561e:	4b62      	ldr	r3, [pc, #392]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005626:	2b08      	cmp	r3, #8
 8005628:	d11c      	bne.n	8005664 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800562a:	4b5f      	ldr	r3, [pc, #380]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d116      	bne.n	8005664 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005636:	4b5c      	ldr	r3, [pc, #368]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_RCC_OscConfig+0x152>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d001      	beq.n	800564e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e1bb      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564e:	4b56      	ldr	r3, [pc, #344]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4952      	ldr	r1, [pc, #328]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800565e:	4313      	orrs	r3, r2
 8005660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005662:	e03a      	b.n	80056da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d020      	beq.n	80056ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800566c:	4b4f      	ldr	r3, [pc, #316]	; (80057ac <HAL_RCC_OscConfig+0x2b0>)
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005672:	f7fd fa03 	bl	8002a7c <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800567a:	f7fd f9ff 	bl	8002a7c <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e19c      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568c:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f0      	beq.n	800567a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005698:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4940      	ldr	r1, [pc, #256]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	600b      	str	r3, [r1, #0]
 80056ac:	e015      	b.n	80056da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ae:	4b3f      	ldr	r3, [pc, #252]	; (80057ac <HAL_RCC_OscConfig+0x2b0>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7fd f9e2 	bl	8002a7c <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056bc:	f7fd f9de 	bl	8002a7c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e17b      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ce:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d030      	beq.n	8005748 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ee:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <HAL_RCC_OscConfig+0x2b4>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f4:	f7fd f9c2 	bl	8002a7c <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056fc:	f7fd f9be 	bl	8002a7c <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e15b      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570e:	4b26      	ldr	r3, [pc, #152]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x200>
 800571a:	e015      	b.n	8005748 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800571c:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <HAL_RCC_OscConfig+0x2b4>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005722:	f7fd f9ab 	bl	8002a7c <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800572a:	f7fd f9a7 	bl	8002a7c <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e144      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800573c:	4b1a      	ldr	r3, [pc, #104]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800573e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f0      	bne.n	800572a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80a0 	beq.w	8005896 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800575a:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10f      	bne.n	8005786 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005766:	2300      	movs	r3, #0
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	4a0e      	ldr	r2, [pc, #56]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005774:	6413      	str	r3, [r2, #64]	; 0x40
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <HAL_RCC_OscConfig+0x2ac>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005786:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <HAL_RCC_OscConfig+0x2b8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d121      	bne.n	80057d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <HAL_RCC_OscConfig+0x2b8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a07      	ldr	r2, [pc, #28]	; (80057b4 <HAL_RCC_OscConfig+0x2b8>)
 8005798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800579e:	f7fd f96d 	bl	8002a7c <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a4:	e011      	b.n	80057ca <HAL_RCC_OscConfig+0x2ce>
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800
 80057ac:	42470000 	.word	0x42470000
 80057b0:	42470e80 	.word	0x42470e80
 80057b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b8:	f7fd f960 	bl	8002a7c <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e0fd      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ca:	4b81      	ldr	r3, [pc, #516]	; (80059d0 <HAL_RCC_OscConfig+0x4d4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d106      	bne.n	80057ec <HAL_RCC_OscConfig+0x2f0>
 80057de:	4b7d      	ldr	r3, [pc, #500]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a7c      	ldr	r2, [pc, #496]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ea:	e01c      	b.n	8005826 <HAL_RCC_OscConfig+0x32a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	d10c      	bne.n	800580e <HAL_RCC_OscConfig+0x312>
 80057f4:	4b77      	ldr	r3, [pc, #476]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a76      	ldr	r2, [pc, #472]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 80057fa:	f043 0304 	orr.w	r3, r3, #4
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	4b74      	ldr	r3, [pc, #464]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4a73      	ldr	r2, [pc, #460]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	6713      	str	r3, [r2, #112]	; 0x70
 800580c:	e00b      	b.n	8005826 <HAL_RCC_OscConfig+0x32a>
 800580e:	4b71      	ldr	r3, [pc, #452]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a70      	ldr	r2, [pc, #448]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	6713      	str	r3, [r2, #112]	; 0x70
 800581a:	4b6e      	ldr	r3, [pc, #440]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	4a6d      	ldr	r2, [pc, #436]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d015      	beq.n	800585a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582e:	f7fd f925 	bl	8002a7c <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005834:	e00a      	b.n	800584c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005836:	f7fd f921 	bl	8002a7c <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	f241 3288 	movw	r2, #5000	; 0x1388
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e0bc      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584c:	4b61      	ldr	r3, [pc, #388]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ee      	beq.n	8005836 <HAL_RCC_OscConfig+0x33a>
 8005858:	e014      	b.n	8005884 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800585a:	f7fd f90f 	bl	8002a7c <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005860:	e00a      	b.n	8005878 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005862:	f7fd f90b 	bl	8002a7c <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e0a6      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005878:	4b56      	ldr	r3, [pc, #344]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1ee      	bne.n	8005862 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d105      	bne.n	8005896 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800588a:	4b52      	ldr	r3, [pc, #328]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	4a51      	ldr	r2, [pc, #324]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 8005890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005894:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 8092 	beq.w	80059c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058a0:	4b4c      	ldr	r3, [pc, #304]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 030c 	and.w	r3, r3, #12
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d05c      	beq.n	8005966 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d141      	bne.n	8005938 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b4:	4b48      	ldr	r3, [pc, #288]	; (80059d8 <HAL_RCC_OscConfig+0x4dc>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ba:	f7fd f8df 	bl	8002a7c <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058c2:	f7fd f8db 	bl	8002a7c <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e078      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d4:	4b3f      	ldr	r3, [pc, #252]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f0      	bne.n	80058c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	019b      	lsls	r3, r3, #6
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	3b01      	subs	r3, #1
 80058fa:	041b      	lsls	r3, r3, #16
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	061b      	lsls	r3, r3, #24
 8005904:	4933      	ldr	r1, [pc, #204]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 8005906:	4313      	orrs	r3, r2
 8005908:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800590a:	4b33      	ldr	r3, [pc, #204]	; (80059d8 <HAL_RCC_OscConfig+0x4dc>)
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005910:	f7fd f8b4 	bl	8002a7c <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005918:	f7fd f8b0 	bl	8002a7c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e04d      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592a:	4b2a      	ldr	r3, [pc, #168]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCC_OscConfig+0x41c>
 8005936:	e045      	b.n	80059c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <HAL_RCC_OscConfig+0x4dc>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fd f89d 	bl	8002a7c <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005946:	f7fd f899 	bl	8002a7c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e036      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f0      	bne.n	8005946 <HAL_RCC_OscConfig+0x44a>
 8005964:	e02e      	b.n	80059c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e029      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005972:	4b18      	ldr	r3, [pc, #96]	; (80059d4 <HAL_RCC_OscConfig+0x4d8>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	429a      	cmp	r2, r3
 8005984:	d11c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005990:	429a      	cmp	r2, r3
 8005992:	d115      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800599a:	4013      	ands	r3, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d10d      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d106      	bne.n	80059c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40007000 	.word	0x40007000
 80059d4:	40023800 	.word	0x40023800
 80059d8:	42470060 	.word	0x42470060

080059dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0cc      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059f0:	4b68      	ldr	r3, [pc, #416]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d90c      	bls.n	8005a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fe:	4b65      	ldr	r3, [pc, #404]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a06:	4b63      	ldr	r3, [pc, #396]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d001      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0b8      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d020      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a30:	4b59      	ldr	r3, [pc, #356]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4a58      	ldr	r2, [pc, #352]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a48:	4b53      	ldr	r3, [pc, #332]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4a52      	ldr	r2, [pc, #328]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a54:	4b50      	ldr	r3, [pc, #320]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	494d      	ldr	r1, [pc, #308]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d044      	beq.n	8005afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d107      	bne.n	8005a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7a:	4b47      	ldr	r3, [pc, #284]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d119      	bne.n	8005aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e07f      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d003      	beq.n	8005a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d107      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9a:	4b3f      	ldr	r3, [pc, #252]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e06f      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aaa:	4b3b      	ldr	r3, [pc, #236]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e067      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aba:	4b37      	ldr	r3, [pc, #220]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f023 0203 	bic.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	4934      	ldr	r1, [pc, #208]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005acc:	f7fc ffd6 	bl	8002a7c <HAL_GetTick>
 8005ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad4:	f7fc ffd2 	bl	8002a7c <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e04f      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aea:	4b2b      	ldr	r3, [pc, #172]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 020c 	and.w	r2, r3, #12
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d1eb      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005afc:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d20c      	bcs.n	8005b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0a:	4b22      	ldr	r3, [pc, #136]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b20      	ldr	r3, [pc, #128]	; (8005b94 <HAL_RCC_ClockConfig+0x1b8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e032      	b.n	8005b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4916      	ldr	r1, [pc, #88]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	490e      	ldr	r1, [pc, #56]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b62:	f000 f821 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 8005b66:	4601      	mov	r1, r0
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <HAL_RCC_ClockConfig+0x1c0>)
 8005b74:	5cd3      	ldrb	r3, [r2, r3]
 8005b76:	fa21 f303 	lsr.w	r3, r1, r3
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fc ff36 	bl	80029f4 <HAL_InitTick>

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40023c00 	.word	0x40023c00
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	08012b1c 	.word	0x08012b1c
 8005ba0:	20000060 	.word	0x20000060
 8005ba4:	20000064 	.word	0x20000064

08005ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bbe:	4b50      	ldr	r3, [pc, #320]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d007      	beq.n	8005bda <HAL_RCC_GetSysClockFreq+0x32>
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d008      	beq.n	8005be0 <HAL_RCC_GetSysClockFreq+0x38>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f040 808d 	bne.w	8005cee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bd4:	4b4b      	ldr	r3, [pc, #300]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005bd6:	60bb      	str	r3, [r7, #8]
       break;
 8005bd8:	e08c      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bda:	4b4b      	ldr	r3, [pc, #300]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8005bdc:	60bb      	str	r3, [r7, #8]
      break;
 8005bde:	e089      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005be0:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bea:	4b45      	ldr	r3, [pc, #276]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d023      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf6:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	099b      	lsrs	r3, r3, #6
 8005bfc:	f04f 0400 	mov.w	r4, #0
 8005c00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	ea03 0501 	and.w	r5, r3, r1
 8005c0c:	ea04 0602 	and.w	r6, r4, r2
 8005c10:	4a3d      	ldr	r2, [pc, #244]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c12:	fb02 f106 	mul.w	r1, r2, r6
 8005c16:	2200      	movs	r2, #0
 8005c18:	fb02 f205 	mul.w	r2, r2, r5
 8005c1c:	440a      	add	r2, r1
 8005c1e:	493a      	ldr	r1, [pc, #232]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c20:	fba5 0101 	umull	r0, r1, r5, r1
 8005c24:	1853      	adds	r3, r2, r1
 8005c26:	4619      	mov	r1, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f04f 0400 	mov.w	r4, #0
 8005c2e:	461a      	mov	r2, r3
 8005c30:	4623      	mov	r3, r4
 8005c32:	f7fb f831 	bl	8000c98 <__aeabi_uldivmod>
 8005c36:	4603      	mov	r3, r0
 8005c38:	460c      	mov	r4, r1
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	e049      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c3e:	4b30      	ldr	r3, [pc, #192]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	099b      	lsrs	r3, r3, #6
 8005c44:	f04f 0400 	mov.w	r4, #0
 8005c48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	ea03 0501 	and.w	r5, r3, r1
 8005c54:	ea04 0602 	and.w	r6, r4, r2
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4632      	mov	r2, r6
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	f04f 0400 	mov.w	r4, #0
 8005c64:	0154      	lsls	r4, r2, #5
 8005c66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c6a:	014b      	lsls	r3, r1, #5
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4622      	mov	r2, r4
 8005c70:	1b49      	subs	r1, r1, r5
 8005c72:	eb62 0206 	sbc.w	r2, r2, r6
 8005c76:	f04f 0300 	mov.w	r3, #0
 8005c7a:	f04f 0400 	mov.w	r4, #0
 8005c7e:	0194      	lsls	r4, r2, #6
 8005c80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c84:	018b      	lsls	r3, r1, #6
 8005c86:	1a5b      	subs	r3, r3, r1
 8005c88:	eb64 0402 	sbc.w	r4, r4, r2
 8005c8c:	f04f 0100 	mov.w	r1, #0
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	00e2      	lsls	r2, r4, #3
 8005c96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c9a:	00d9      	lsls	r1, r3, #3
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4614      	mov	r4, r2
 8005ca0:	195b      	adds	r3, r3, r5
 8005ca2:	eb44 0406 	adc.w	r4, r4, r6
 8005ca6:	f04f 0100 	mov.w	r1, #0
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	02a2      	lsls	r2, r4, #10
 8005cb0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005cb4:	0299      	lsls	r1, r3, #10
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4614      	mov	r4, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f04f 0400 	mov.w	r4, #0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4623      	mov	r3, r4
 8005cc8:	f7fa ffe6 	bl	8000c98 <__aeabi_uldivmod>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	0c1b      	lsrs	r3, r3, #16
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	3301      	adds	r3, #1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	60bb      	str	r3, [r7, #8]
      break;
 8005cec:	e002      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cee:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005cf0:	60bb      	str	r3, [r7, #8]
      break;
 8005cf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023800 	.word	0x40023800
 8005d04:	00f42400 	.word	0x00f42400
 8005d08:	017d7840 	.word	0x017d7840

08005d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d10:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d12:	681b      	ldr	r3, [r3, #0]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000060 	.word	0x20000060

08005d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d28:	f7ff fff0 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d2c:	4601      	mov	r1, r0
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	0a9b      	lsrs	r3, r3, #10
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	4a03      	ldr	r2, [pc, #12]	; (8005d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d3a:	5cd3      	ldrb	r3, [r2, r3]
 8005d3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40023800 	.word	0x40023800
 8005d48:	08012b2c 	.word	0x08012b2c

08005d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d50:	f7ff ffdc 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d54:	4601      	mov	r1, r0
 8005d56:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	0b5b      	lsrs	r3, r3, #13
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	4a03      	ldr	r2, [pc, #12]	; (8005d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d62:	5cd3      	ldrb	r3, [r2, r3]
 8005d64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	08012b2c 	.word	0x08012b2c

08005d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e01d      	b.n	8005dc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fc fc28 	bl	80025f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f000 fab8 	bl	8006328 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e01d      	b.n	8005e18 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f815 	bl	8005e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3304      	adds	r3, #4
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f000 fa8d 	bl	8006328 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2201      	movs	r2, #1
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fd14 	bl	8006874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a10      	ldr	r2, [pc, #64]	; (8005e94 <HAL_TIM_PWM_Start+0x60>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d107      	bne.n	8005e66 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b06      	cmp	r3, #6
 8005e76:	d007      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000

08005e98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e083      	b.n	8005fb4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d106      	bne.n	8005ec6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7fc fbb7 	bl	8002634 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005edc:	f023 0307 	bic.w	r3, r3, #7
 8005ee0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f000 fa1b 	bl	8006328 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1a:	f023 0303 	bic.w	r3, r3, #3
 8005f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f38:	f023 030c 	bic.w	r3, r3, #12
 8005f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	4313      	orrs	r3, r2
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	011a      	lsls	r2, r3, #4
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	031b      	lsls	r3, r3, #12
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_TIM_Encoder_Start+0x16>
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d008      	beq.n	8005fe2 <HAL_TIM_Encoder_Start+0x26>
 8005fd0:	e00f      	b.n	8005ff2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fc4a 	bl	8006874 <TIM_CCxChannelCmd>
      break;
 8005fe0:	e016      	b.n	8006010 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	2104      	movs	r1, #4
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fc42 	bl	8006874 <TIM_CCxChannelCmd>
      break;
 8005ff0:	e00e      	b.n	8006010 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fc3a 	bl	8006874 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2201      	movs	r2, #1
 8006006:	2104      	movs	r1, #4
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fc33 	bl	8006874 <TIM_CCxChannelCmd>
      break;
 800600e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006042:	2302      	movs	r3, #2
 8006044:	e0b4      	b.n	80061b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b0c      	cmp	r3, #12
 800605a:	f200 809f 	bhi.w	800619c <HAL_TIM_PWM_ConfigChannel+0x170>
 800605e:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006099 	.word	0x08006099
 8006068:	0800619d 	.word	0x0800619d
 800606c:	0800619d 	.word	0x0800619d
 8006070:	0800619d 	.word	0x0800619d
 8006074:	080060d9 	.word	0x080060d9
 8006078:	0800619d 	.word	0x0800619d
 800607c:	0800619d 	.word	0x0800619d
 8006080:	0800619d 	.word	0x0800619d
 8006084:	0800611b 	.word	0x0800611b
 8006088:	0800619d 	.word	0x0800619d
 800608c:	0800619d 	.word	0x0800619d
 8006090:	0800619d 	.word	0x0800619d
 8006094:	0800615b 	.word	0x0800615b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 f9c2 	bl	8006428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0208 	orr.w	r2, r2, #8
 80060b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0204 	bic.w	r2, r2, #4
 80060c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6999      	ldr	r1, [r3, #24]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	619a      	str	r2, [r3, #24]
      break;
 80060d6:	e062      	b.n	800619e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fa08 	bl	80064f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6999      	ldr	r1, [r3, #24]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	021a      	lsls	r2, r3, #8
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	619a      	str	r2, [r3, #24]
      break;
 8006118:	e041      	b.n	800619e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fa53 	bl	80065cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0208 	orr.w	r2, r2, #8
 8006134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0204 	bic.w	r2, r2, #4
 8006144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69d9      	ldr	r1, [r3, #28]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	61da      	str	r2, [r3, #28]
      break;
 8006158:	e021      	b.n	800619e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fa9d 	bl	80066a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69d9      	ldr	r1, [r3, #28]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	021a      	lsls	r2, r3, #8
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	61da      	str	r2, [r3, #28]
      break;
 800619a:	e000      	b.n	800619e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800619c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_TIM_ConfigClockSource+0x18>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e0a6      	b.n	800631e <HAL_TIM_ConfigClockSource+0x166>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d067      	beq.n	80062d8 <HAL_TIM_ConfigClockSource+0x120>
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	d80b      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x6c>
 800620c:	2b10      	cmp	r3, #16
 800620e:	d073      	beq.n	80062f8 <HAL_TIM_ConfigClockSource+0x140>
 8006210:	2b10      	cmp	r3, #16
 8006212:	d802      	bhi.n	800621a <HAL_TIM_ConfigClockSource+0x62>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d06f      	beq.n	80062f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006218:	e078      	b.n	800630c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800621a:	2b20      	cmp	r3, #32
 800621c:	d06c      	beq.n	80062f8 <HAL_TIM_ConfigClockSource+0x140>
 800621e:	2b30      	cmp	r3, #48	; 0x30
 8006220:	d06a      	beq.n	80062f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006222:	e073      	b.n	800630c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006224:	2b70      	cmp	r3, #112	; 0x70
 8006226:	d00d      	beq.n	8006244 <HAL_TIM_ConfigClockSource+0x8c>
 8006228:	2b70      	cmp	r3, #112	; 0x70
 800622a:	d804      	bhi.n	8006236 <HAL_TIM_ConfigClockSource+0x7e>
 800622c:	2b50      	cmp	r3, #80	; 0x50
 800622e:	d033      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0xe0>
 8006230:	2b60      	cmp	r3, #96	; 0x60
 8006232:	d041      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006234:	e06a      	b.n	800630c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623a:	d066      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x152>
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006240:	d017      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006242:	e063      	b.n	800630c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	6899      	ldr	r1, [r3, #8]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f000 faee 	bl	8006834 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006266:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	609a      	str	r2, [r3, #8]
      break;
 8006270:	e04c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	6899      	ldr	r1, [r3, #8]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f000 fad7 	bl	8006834 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006294:	609a      	str	r2, [r3, #8]
      break;
 8006296:	e039      	b.n	800630c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	6859      	ldr	r1, [r3, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	461a      	mov	r2, r3
 80062a6:	f000 fa4b 	bl	8006740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2150      	movs	r1, #80	; 0x50
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 faa4 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 80062b6:	e029      	b.n	800630c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	461a      	mov	r2, r3
 80062c6:	f000 fa6a 	bl	800679e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2160      	movs	r1, #96	; 0x60
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fa94 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 80062d6:	e019      	b.n	800630c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	6859      	ldr	r1, [r3, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f000 fa2b 	bl	8006740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2140      	movs	r1, #64	; 0x40
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fa84 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 80062f6:	e009      	b.n	800630c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	f000 fa7b 	bl	80067fe <TIM_ITRx_SetConfig>
      break;
 8006308:	e000      	b.n	800630c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800630a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a34      	ldr	r2, [pc, #208]	; (800640c <TIM_Base_SetConfig+0xe4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00f      	beq.n	8006360 <TIM_Base_SetConfig+0x38>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d00b      	beq.n	8006360 <TIM_Base_SetConfig+0x38>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a31      	ldr	r2, [pc, #196]	; (8006410 <TIM_Base_SetConfig+0xe8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d007      	beq.n	8006360 <TIM_Base_SetConfig+0x38>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a30      	ldr	r2, [pc, #192]	; (8006414 <TIM_Base_SetConfig+0xec>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_Base_SetConfig+0x38>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a2f      	ldr	r2, [pc, #188]	; (8006418 <TIM_Base_SetConfig+0xf0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d108      	bne.n	8006372 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a25      	ldr	r2, [pc, #148]	; (800640c <TIM_Base_SetConfig+0xe4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d01b      	beq.n	80063b2 <TIM_Base_SetConfig+0x8a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006380:	d017      	beq.n	80063b2 <TIM_Base_SetConfig+0x8a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a22      	ldr	r2, [pc, #136]	; (8006410 <TIM_Base_SetConfig+0xe8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d013      	beq.n	80063b2 <TIM_Base_SetConfig+0x8a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a21      	ldr	r2, [pc, #132]	; (8006414 <TIM_Base_SetConfig+0xec>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00f      	beq.n	80063b2 <TIM_Base_SetConfig+0x8a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a20      	ldr	r2, [pc, #128]	; (8006418 <TIM_Base_SetConfig+0xf0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00b      	beq.n	80063b2 <TIM_Base_SetConfig+0x8a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a1f      	ldr	r2, [pc, #124]	; (800641c <TIM_Base_SetConfig+0xf4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d007      	beq.n	80063b2 <TIM_Base_SetConfig+0x8a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a1e      	ldr	r2, [pc, #120]	; (8006420 <TIM_Base_SetConfig+0xf8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d003      	beq.n	80063b2 <TIM_Base_SetConfig+0x8a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <TIM_Base_SetConfig+0xfc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d108      	bne.n	80063c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a08      	ldr	r2, [pc, #32]	; (800640c <TIM_Base_SetConfig+0xe4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d103      	bne.n	80063f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	615a      	str	r2, [r3, #20]
}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40010000 	.word	0x40010000
 8006410:	40000400 	.word	0x40000400
 8006414:	40000800 	.word	0x40000800
 8006418:	40000c00 	.word	0x40000c00
 800641c:	40014000 	.word	0x40014000
 8006420:	40014400 	.word	0x40014400
 8006424:	40014800 	.word	0x40014800

08006428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 0302 	bic.w	r3, r3, #2
 8006470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <TIM_OC1_SetConfig+0xc8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d10c      	bne.n	800649e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0308 	bic.w	r3, r3, #8
 800648a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f023 0304 	bic.w	r3, r3, #4
 800649c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a13      	ldr	r2, [pc, #76]	; (80064f0 <TIM_OC1_SetConfig+0xc8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d111      	bne.n	80064ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	621a      	str	r2, [r3, #32]
}
 80064e4:	bf00      	nop
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40010000 	.word	0x40010000

080064f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0210 	bic.w	r2, r3, #16
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0320 	bic.w	r3, r3, #32
 800653e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <TIM_OC2_SetConfig+0xd4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d10d      	bne.n	8006570 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800655a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <TIM_OC2_SetConfig+0xd4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d113      	bne.n	80065a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800657e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40010000 	.word	0x40010000

080065cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1d      	ldr	r2, [pc, #116]	; (800669c <TIM_OC3_SetConfig+0xd0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d10d      	bne.n	8006646 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a14      	ldr	r2, [pc, #80]	; (800669c <TIM_OC3_SetConfig+0xd0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d113      	bne.n	8006676 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800665c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	621a      	str	r2, [r3, #32]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40010000 	.word	0x40010000

080066a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	021b      	lsls	r3, r3, #8
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	031b      	lsls	r3, r3, #12
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a10      	ldr	r2, [pc, #64]	; (800673c <TIM_OC4_SetConfig+0x9c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d109      	bne.n	8006714 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	019b      	lsls	r3, r3, #6
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40010000 	.word	0x40010000

08006740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f023 0201 	bic.w	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800676a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 030a 	bic.w	r3, r3, #10
 800677c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679e:	b480      	push	{r7}
 80067a0:	b087      	sub	sp, #28
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f023 0210 	bic.w	r2, r3, #16
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	031b      	lsls	r3, r3, #12
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	f043 0307 	orr.w	r3, r3, #7
 8006820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	609a      	str	r2, [r3, #8]
}
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800684e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	021a      	lsls	r2, r3, #8
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	431a      	orrs	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4313      	orrs	r3, r2
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	609a      	str	r2, [r3, #8]
}
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2201      	movs	r2, #1
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a1a      	ldr	r2, [r3, #32]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	43db      	mvns	r3, r3
 8006896:	401a      	ands	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a1a      	ldr	r2, [r3, #32]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 031f 	and.w	r3, r3, #31
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2204      	movs	r2, #4
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f8df 	bl	8006a94 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b06      	cmp	r3, #6
 80068f6:	d007      	beq.n	8006908 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006928:	2302      	movs	r3, #2
 800692a:	e050      	b.n	80069ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1c      	ldr	r2, [pc, #112]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d018      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006978:	d013      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00e      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a16      	ldr	r2, [pc, #88]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d009      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d004      	beq.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a13      	ldr	r2, [pc, #76]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d10c      	bne.n	80069bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40000400 	.word	0x40000400
 80069e4:	40000800 	.word	0x40000800
 80069e8:	40000c00 	.word	0x40000c00
 80069ec:	40014000 	.word	0x40014000

080069f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e03d      	b.n	8006a88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1a      	ldr	r2, [r3, #32]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a1a      	ldr	r2, [r3, #32]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8006acc:	431a      	orrs	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e03f      	b.n	8006b70 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7fb fe9d 	bl	8002844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2224      	movs	r2, #36	; 0x24
 8006b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fab4 	bl	8007090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691a      	ldr	r2, [r3, #16]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695a      	ldr	r2, [r3, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	4613      	mov	r3, r2
 8006b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d140      	bne.n	8006c14 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <HAL_UART_Receive_IT+0x26>
 8006b98:	88fb      	ldrh	r3, [r7, #6]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e039      	b.n	8006c16 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_UART_Receive_IT+0x38>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e032      	b.n	8006c16 <HAL_UART_Receive_IT+0x9e>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	88fa      	ldrh	r2, [r7, #6]
 8006bc2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	88fa      	ldrh	r2, [r7, #6]
 8006bc8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2222      	movs	r2, #34	; 0x22
 8006bd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695a      	ldr	r2, [r3, #20]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0220 	orr.w	r2, r2, #32
 8006c0e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e000      	b.n	8006c16 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006c14:	2302      	movs	r3, #2
  }
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10d      	bne.n	8006c76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <HAL_UART_IRQHandler+0x52>
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f003 0320 	and.w	r3, r3, #32
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f98c 	bl	8006f8c <UART_Receive_IT>
      return;
 8006c74:	e0d1      	b.n	8006e1a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80b0 	beq.w	8006dde <HAL_UART_IRQHandler+0x1ba>
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d105      	bne.n	8006c94 <HAL_UART_IRQHandler+0x70>
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 80a5 	beq.w	8006dde <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x90>
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cac:	f043 0201 	orr.w	r2, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <HAL_UART_IRQHandler+0xb0>
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ccc:	f043 0202 	orr.w	r2, r3, #2
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <HAL_UART_IRQHandler+0xd0>
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cec:	f043 0204 	orr.w	r2, r3, #4
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00f      	beq.n	8006d1e <HAL_UART_IRQHandler+0xfa>
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f003 0320 	and.w	r3, r3, #32
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <HAL_UART_IRQHandler+0xee>
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d16:	f043 0208 	orr.w	r2, r3, #8
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d078      	beq.n	8006e18 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d007      	beq.n	8006d40 <HAL_UART_IRQHandler+0x11c>
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f926 	bl	8006f8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	2b40      	cmp	r3, #64	; 0x40
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <HAL_UART_IRQHandler+0x144>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d031      	beq.n	8006dcc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f86f 	bl	8006e4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	d123      	bne.n	8006dc4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d8a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d013      	beq.n	8006dbc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <HAL_UART_IRQHandler+0x1fc>)
 8006d9a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fc fdeb 	bl	800397c <HAL_DMA_Abort_IT>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d016      	beq.n	8006dda <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006db6:	4610      	mov	r0, r2
 8006db8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dba:	e00e      	b.n	8006dda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f83b 	bl	8006e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc2:	e00a      	b.n	8006dda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f837 	bl	8006e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dca:	e006      	b.n	8006dda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f833 	bl	8006e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006dd8:	e01e      	b.n	8006e18 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dda:	bf00      	nop
    return;
 8006ddc:	e01c      	b.n	8006e18 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_UART_IRQHandler+0x1d6>
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f85c 	bl	8006eb0 <UART_Transmit_IT>
    return;
 8006df8:	e00f      	b.n	8006e1a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <HAL_UART_IRQHandler+0x1f6>
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f8a4 	bl	8006f5c <UART_EndTransmit_IT>
    return;
 8006e14:	bf00      	nop
 8006e16:	e000      	b.n	8006e1a <HAL_UART_IRQHandler+0x1f6>
    return;
 8006e18:	bf00      	nop
  }
}
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	08006e89 	.word	0x08006e89

08006e24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695a      	ldr	r2, [r3, #20]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0201 	bic.w	r2, r2, #1
 8006e72:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff ffc8 	bl	8006e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ea8:	bf00      	nop
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b21      	cmp	r3, #33	; 0x21
 8006ec2:	d144      	bne.n	8006f4e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ecc:	d11a      	bne.n	8006f04 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ee2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d105      	bne.n	8006ef8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	1c9a      	adds	r2, r3, #2
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	621a      	str	r2, [r3, #32]
 8006ef6:	e00e      	b.n	8006f16 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]
 8006f02:	e008      	b.n	8006f16 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	1c59      	adds	r1, r3, #1
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6211      	str	r1, [r2, #32]
 8006f0e:	781a      	ldrb	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4619      	mov	r1, r3
 8006f24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10f      	bne.n	8006f4a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e000      	b.n	8006f50 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f4e:	2302      	movs	r3, #2
  }
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ff51 	bl	8006e24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b22      	cmp	r3, #34	; 0x22
 8006f9e:	d171      	bne.n	8007084 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa8:	d123      	bne.n	8006ff2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10e      	bne.n	8006fd6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fce:	1c9a      	adds	r2, r3, #2
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd4:	e029      	b.n	800702a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	629a      	str	r2, [r3, #40]	; 0x28
 8006ff0:	e01b      	b.n	800702a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6858      	ldr	r0, [r3, #4]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	1c59      	adds	r1, r3, #1
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6291      	str	r1, [r2, #40]	; 0x28
 800700a:	b2c2      	uxtb	r2, r0
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	e00c      	b.n	800702a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701c:	1c58      	adds	r0, r3, #1
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	6288      	str	r0, [r1, #40]	; 0x28
 8007022:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29b      	uxth	r3, r3
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	4619      	mov	r1, r3
 8007038:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800703a:	2b00      	cmp	r3, #0
 800703c:	d120      	bne.n	8007080 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0220 	bic.w	r2, r2, #32
 800704c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800705c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695a      	ldr	r2, [r3, #20]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0201 	bic.w	r2, r2, #1
 800706c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fa f91a 	bl	80012b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	e002      	b.n	8007086 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	e000      	b.n	8007086 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007084:	2302      	movs	r3, #2
  }
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	431a      	orrs	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80070d2:	f023 030c 	bic.w	r3, r3, #12
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	68f9      	ldr	r1, [r7, #12]
 80070dc:	430b      	orrs	r3, r1
 80070de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070fe:	f040 818b 	bne.w	8007418 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4ac1      	ldr	r2, [pc, #772]	; (800740c <UART_SetConfig+0x37c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d005      	beq.n	8007118 <UART_SetConfig+0x88>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4abf      	ldr	r2, [pc, #764]	; (8007410 <UART_SetConfig+0x380>)
 8007112:	4293      	cmp	r3, r2
 8007114:	f040 80bd 	bne.w	8007292 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007118:	f7fe fe18 	bl	8005d4c <HAL_RCC_GetPCLK2Freq>
 800711c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	461d      	mov	r5, r3
 8007122:	f04f 0600 	mov.w	r6, #0
 8007126:	46a8      	mov	r8, r5
 8007128:	46b1      	mov	r9, r6
 800712a:	eb18 0308 	adds.w	r3, r8, r8
 800712e:	eb49 0409 	adc.w	r4, r9, r9
 8007132:	4698      	mov	r8, r3
 8007134:	46a1      	mov	r9, r4
 8007136:	eb18 0805 	adds.w	r8, r8, r5
 800713a:	eb49 0906 	adc.w	r9, r9, r6
 800713e:	f04f 0100 	mov.w	r1, #0
 8007142:	f04f 0200 	mov.w	r2, #0
 8007146:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800714a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800714e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007152:	4688      	mov	r8, r1
 8007154:	4691      	mov	r9, r2
 8007156:	eb18 0005 	adds.w	r0, r8, r5
 800715a:	eb49 0106 	adc.w	r1, r9, r6
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	461d      	mov	r5, r3
 8007164:	f04f 0600 	mov.w	r6, #0
 8007168:	196b      	adds	r3, r5, r5
 800716a:	eb46 0406 	adc.w	r4, r6, r6
 800716e:	461a      	mov	r2, r3
 8007170:	4623      	mov	r3, r4
 8007172:	f7f9 fd91 	bl	8000c98 <__aeabi_uldivmod>
 8007176:	4603      	mov	r3, r0
 8007178:	460c      	mov	r4, r1
 800717a:	461a      	mov	r2, r3
 800717c:	4ba5      	ldr	r3, [pc, #660]	; (8007414 <UART_SetConfig+0x384>)
 800717e:	fba3 2302 	umull	r2, r3, r3, r2
 8007182:	095b      	lsrs	r3, r3, #5
 8007184:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	461d      	mov	r5, r3
 800718c:	f04f 0600 	mov.w	r6, #0
 8007190:	46a9      	mov	r9, r5
 8007192:	46b2      	mov	sl, r6
 8007194:	eb19 0309 	adds.w	r3, r9, r9
 8007198:	eb4a 040a 	adc.w	r4, sl, sl
 800719c:	4699      	mov	r9, r3
 800719e:	46a2      	mov	sl, r4
 80071a0:	eb19 0905 	adds.w	r9, r9, r5
 80071a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80071a8:	f04f 0100 	mov.w	r1, #0
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071bc:	4689      	mov	r9, r1
 80071be:	4692      	mov	sl, r2
 80071c0:	eb19 0005 	adds.w	r0, r9, r5
 80071c4:	eb4a 0106 	adc.w	r1, sl, r6
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	461d      	mov	r5, r3
 80071ce:	f04f 0600 	mov.w	r6, #0
 80071d2:	196b      	adds	r3, r5, r5
 80071d4:	eb46 0406 	adc.w	r4, r6, r6
 80071d8:	461a      	mov	r2, r3
 80071da:	4623      	mov	r3, r4
 80071dc:	f7f9 fd5c 	bl	8000c98 <__aeabi_uldivmod>
 80071e0:	4603      	mov	r3, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	461a      	mov	r2, r3
 80071e6:	4b8b      	ldr	r3, [pc, #556]	; (8007414 <UART_SetConfig+0x384>)
 80071e8:	fba3 1302 	umull	r1, r3, r3, r2
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	2164      	movs	r1, #100	; 0x64
 80071f0:	fb01 f303 	mul.w	r3, r1, r3
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	3332      	adds	r3, #50	; 0x32
 80071fa:	4a86      	ldr	r2, [pc, #536]	; (8007414 <UART_SetConfig+0x384>)
 80071fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007200:	095b      	lsrs	r3, r3, #5
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007208:	4498      	add	r8, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	461d      	mov	r5, r3
 800720e:	f04f 0600 	mov.w	r6, #0
 8007212:	46a9      	mov	r9, r5
 8007214:	46b2      	mov	sl, r6
 8007216:	eb19 0309 	adds.w	r3, r9, r9
 800721a:	eb4a 040a 	adc.w	r4, sl, sl
 800721e:	4699      	mov	r9, r3
 8007220:	46a2      	mov	sl, r4
 8007222:	eb19 0905 	adds.w	r9, r9, r5
 8007226:	eb4a 0a06 	adc.w	sl, sl, r6
 800722a:	f04f 0100 	mov.w	r1, #0
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007236:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800723a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800723e:	4689      	mov	r9, r1
 8007240:	4692      	mov	sl, r2
 8007242:	eb19 0005 	adds.w	r0, r9, r5
 8007246:	eb4a 0106 	adc.w	r1, sl, r6
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	461d      	mov	r5, r3
 8007250:	f04f 0600 	mov.w	r6, #0
 8007254:	196b      	adds	r3, r5, r5
 8007256:	eb46 0406 	adc.w	r4, r6, r6
 800725a:	461a      	mov	r2, r3
 800725c:	4623      	mov	r3, r4
 800725e:	f7f9 fd1b 	bl	8000c98 <__aeabi_uldivmod>
 8007262:	4603      	mov	r3, r0
 8007264:	460c      	mov	r4, r1
 8007266:	461a      	mov	r2, r3
 8007268:	4b6a      	ldr	r3, [pc, #424]	; (8007414 <UART_SetConfig+0x384>)
 800726a:	fba3 1302 	umull	r1, r3, r3, r2
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	2164      	movs	r1, #100	; 0x64
 8007272:	fb01 f303 	mul.w	r3, r1, r3
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	3332      	adds	r3, #50	; 0x32
 800727c:	4a65      	ldr	r2, [pc, #404]	; (8007414 <UART_SetConfig+0x384>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	f003 0207 	and.w	r2, r3, #7
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4442      	add	r2, r8
 800728e:	609a      	str	r2, [r3, #8]
 8007290:	e26f      	b.n	8007772 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007292:	f7fe fd47 	bl	8005d24 <HAL_RCC_GetPCLK1Freq>
 8007296:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	461d      	mov	r5, r3
 800729c:	f04f 0600 	mov.w	r6, #0
 80072a0:	46a8      	mov	r8, r5
 80072a2:	46b1      	mov	r9, r6
 80072a4:	eb18 0308 	adds.w	r3, r8, r8
 80072a8:	eb49 0409 	adc.w	r4, r9, r9
 80072ac:	4698      	mov	r8, r3
 80072ae:	46a1      	mov	r9, r4
 80072b0:	eb18 0805 	adds.w	r8, r8, r5
 80072b4:	eb49 0906 	adc.w	r9, r9, r6
 80072b8:	f04f 0100 	mov.w	r1, #0
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80072c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80072c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072cc:	4688      	mov	r8, r1
 80072ce:	4691      	mov	r9, r2
 80072d0:	eb18 0005 	adds.w	r0, r8, r5
 80072d4:	eb49 0106 	adc.w	r1, r9, r6
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	461d      	mov	r5, r3
 80072de:	f04f 0600 	mov.w	r6, #0
 80072e2:	196b      	adds	r3, r5, r5
 80072e4:	eb46 0406 	adc.w	r4, r6, r6
 80072e8:	461a      	mov	r2, r3
 80072ea:	4623      	mov	r3, r4
 80072ec:	f7f9 fcd4 	bl	8000c98 <__aeabi_uldivmod>
 80072f0:	4603      	mov	r3, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	461a      	mov	r2, r3
 80072f6:	4b47      	ldr	r3, [pc, #284]	; (8007414 <UART_SetConfig+0x384>)
 80072f8:	fba3 2302 	umull	r2, r3, r3, r2
 80072fc:	095b      	lsrs	r3, r3, #5
 80072fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	461d      	mov	r5, r3
 8007306:	f04f 0600 	mov.w	r6, #0
 800730a:	46a9      	mov	r9, r5
 800730c:	46b2      	mov	sl, r6
 800730e:	eb19 0309 	adds.w	r3, r9, r9
 8007312:	eb4a 040a 	adc.w	r4, sl, sl
 8007316:	4699      	mov	r9, r3
 8007318:	46a2      	mov	sl, r4
 800731a:	eb19 0905 	adds.w	r9, r9, r5
 800731e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007322:	f04f 0100 	mov.w	r1, #0
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800732e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007332:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007336:	4689      	mov	r9, r1
 8007338:	4692      	mov	sl, r2
 800733a:	eb19 0005 	adds.w	r0, r9, r5
 800733e:	eb4a 0106 	adc.w	r1, sl, r6
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	461d      	mov	r5, r3
 8007348:	f04f 0600 	mov.w	r6, #0
 800734c:	196b      	adds	r3, r5, r5
 800734e:	eb46 0406 	adc.w	r4, r6, r6
 8007352:	461a      	mov	r2, r3
 8007354:	4623      	mov	r3, r4
 8007356:	f7f9 fc9f 	bl	8000c98 <__aeabi_uldivmod>
 800735a:	4603      	mov	r3, r0
 800735c:	460c      	mov	r4, r1
 800735e:	461a      	mov	r2, r3
 8007360:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <UART_SetConfig+0x384>)
 8007362:	fba3 1302 	umull	r1, r3, r3, r2
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	2164      	movs	r1, #100	; 0x64
 800736a:	fb01 f303 	mul.w	r3, r1, r3
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	3332      	adds	r3, #50	; 0x32
 8007374:	4a27      	ldr	r2, [pc, #156]	; (8007414 <UART_SetConfig+0x384>)
 8007376:	fba2 2303 	umull	r2, r3, r2, r3
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007382:	4498      	add	r8, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	461d      	mov	r5, r3
 8007388:	f04f 0600 	mov.w	r6, #0
 800738c:	46a9      	mov	r9, r5
 800738e:	46b2      	mov	sl, r6
 8007390:	eb19 0309 	adds.w	r3, r9, r9
 8007394:	eb4a 040a 	adc.w	r4, sl, sl
 8007398:	4699      	mov	r9, r3
 800739a:	46a2      	mov	sl, r4
 800739c:	eb19 0905 	adds.w	r9, r9, r5
 80073a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80073a4:	f04f 0100 	mov.w	r1, #0
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073b8:	4689      	mov	r9, r1
 80073ba:	4692      	mov	sl, r2
 80073bc:	eb19 0005 	adds.w	r0, r9, r5
 80073c0:	eb4a 0106 	adc.w	r1, sl, r6
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	461d      	mov	r5, r3
 80073ca:	f04f 0600 	mov.w	r6, #0
 80073ce:	196b      	adds	r3, r5, r5
 80073d0:	eb46 0406 	adc.w	r4, r6, r6
 80073d4:	461a      	mov	r2, r3
 80073d6:	4623      	mov	r3, r4
 80073d8:	f7f9 fc5e 	bl	8000c98 <__aeabi_uldivmod>
 80073dc:	4603      	mov	r3, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	461a      	mov	r2, r3
 80073e2:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <UART_SetConfig+0x384>)
 80073e4:	fba3 1302 	umull	r1, r3, r3, r2
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	2164      	movs	r1, #100	; 0x64
 80073ec:	fb01 f303 	mul.w	r3, r1, r3
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	3332      	adds	r3, #50	; 0x32
 80073f6:	4a07      	ldr	r2, [pc, #28]	; (8007414 <UART_SetConfig+0x384>)
 80073f8:	fba2 2303 	umull	r2, r3, r2, r3
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	f003 0207 	and.w	r2, r3, #7
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4442      	add	r2, r8
 8007408:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800740a:	e1b2      	b.n	8007772 <UART_SetConfig+0x6e2>
 800740c:	40011000 	.word	0x40011000
 8007410:	40011400 	.word	0x40011400
 8007414:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4ad7      	ldr	r2, [pc, #860]	; (800777c <UART_SetConfig+0x6ec>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d005      	beq.n	800742e <UART_SetConfig+0x39e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4ad6      	ldr	r2, [pc, #856]	; (8007780 <UART_SetConfig+0x6f0>)
 8007428:	4293      	cmp	r3, r2
 800742a:	f040 80d1 	bne.w	80075d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800742e:	f7fe fc8d 	bl	8005d4c <HAL_RCC_GetPCLK2Freq>
 8007432:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	469a      	mov	sl, r3
 8007438:	f04f 0b00 	mov.w	fp, #0
 800743c:	46d0      	mov	r8, sl
 800743e:	46d9      	mov	r9, fp
 8007440:	eb18 0308 	adds.w	r3, r8, r8
 8007444:	eb49 0409 	adc.w	r4, r9, r9
 8007448:	4698      	mov	r8, r3
 800744a:	46a1      	mov	r9, r4
 800744c:	eb18 080a 	adds.w	r8, r8, sl
 8007450:	eb49 090b 	adc.w	r9, r9, fp
 8007454:	f04f 0100 	mov.w	r1, #0
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007460:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007464:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007468:	4688      	mov	r8, r1
 800746a:	4691      	mov	r9, r2
 800746c:	eb1a 0508 	adds.w	r5, sl, r8
 8007470:	eb4b 0609 	adc.w	r6, fp, r9
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	4619      	mov	r1, r3
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	f04f 0400 	mov.w	r4, #0
 8007486:	0094      	lsls	r4, r2, #2
 8007488:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800748c:	008b      	lsls	r3, r1, #2
 800748e:	461a      	mov	r2, r3
 8007490:	4623      	mov	r3, r4
 8007492:	4628      	mov	r0, r5
 8007494:	4631      	mov	r1, r6
 8007496:	f7f9 fbff 	bl	8000c98 <__aeabi_uldivmod>
 800749a:	4603      	mov	r3, r0
 800749c:	460c      	mov	r4, r1
 800749e:	461a      	mov	r2, r3
 80074a0:	4bb8      	ldr	r3, [pc, #736]	; (8007784 <UART_SetConfig+0x6f4>)
 80074a2:	fba3 2302 	umull	r2, r3, r3, r2
 80074a6:	095b      	lsrs	r3, r3, #5
 80074a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	469b      	mov	fp, r3
 80074b0:	f04f 0c00 	mov.w	ip, #0
 80074b4:	46d9      	mov	r9, fp
 80074b6:	46e2      	mov	sl, ip
 80074b8:	eb19 0309 	adds.w	r3, r9, r9
 80074bc:	eb4a 040a 	adc.w	r4, sl, sl
 80074c0:	4699      	mov	r9, r3
 80074c2:	46a2      	mov	sl, r4
 80074c4:	eb19 090b 	adds.w	r9, r9, fp
 80074c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074cc:	f04f 0100 	mov.w	r1, #0
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074e0:	4689      	mov	r9, r1
 80074e2:	4692      	mov	sl, r2
 80074e4:	eb1b 0509 	adds.w	r5, fp, r9
 80074e8:	eb4c 060a 	adc.w	r6, ip, sl
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4619      	mov	r1, r3
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	f04f 0300 	mov.w	r3, #0
 80074fa:	f04f 0400 	mov.w	r4, #0
 80074fe:	0094      	lsls	r4, r2, #2
 8007500:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007504:	008b      	lsls	r3, r1, #2
 8007506:	461a      	mov	r2, r3
 8007508:	4623      	mov	r3, r4
 800750a:	4628      	mov	r0, r5
 800750c:	4631      	mov	r1, r6
 800750e:	f7f9 fbc3 	bl	8000c98 <__aeabi_uldivmod>
 8007512:	4603      	mov	r3, r0
 8007514:	460c      	mov	r4, r1
 8007516:	461a      	mov	r2, r3
 8007518:	4b9a      	ldr	r3, [pc, #616]	; (8007784 <UART_SetConfig+0x6f4>)
 800751a:	fba3 1302 	umull	r1, r3, r3, r2
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	2164      	movs	r1, #100	; 0x64
 8007522:	fb01 f303 	mul.w	r3, r1, r3
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	3332      	adds	r3, #50	; 0x32
 800752c:	4a95      	ldr	r2, [pc, #596]	; (8007784 <UART_SetConfig+0x6f4>)
 800752e:	fba2 2303 	umull	r2, r3, r2, r3
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007538:	4498      	add	r8, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	469b      	mov	fp, r3
 800753e:	f04f 0c00 	mov.w	ip, #0
 8007542:	46d9      	mov	r9, fp
 8007544:	46e2      	mov	sl, ip
 8007546:	eb19 0309 	adds.w	r3, r9, r9
 800754a:	eb4a 040a 	adc.w	r4, sl, sl
 800754e:	4699      	mov	r9, r3
 8007550:	46a2      	mov	sl, r4
 8007552:	eb19 090b 	adds.w	r9, r9, fp
 8007556:	eb4a 0a0c 	adc.w	sl, sl, ip
 800755a:	f04f 0100 	mov.w	r1, #0
 800755e:	f04f 0200 	mov.w	r2, #0
 8007562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800756a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800756e:	4689      	mov	r9, r1
 8007570:	4692      	mov	sl, r2
 8007572:	eb1b 0509 	adds.w	r5, fp, r9
 8007576:	eb4c 060a 	adc.w	r6, ip, sl
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	4619      	mov	r1, r3
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	f04f 0400 	mov.w	r4, #0
 800758c:	0094      	lsls	r4, r2, #2
 800758e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007592:	008b      	lsls	r3, r1, #2
 8007594:	461a      	mov	r2, r3
 8007596:	4623      	mov	r3, r4
 8007598:	4628      	mov	r0, r5
 800759a:	4631      	mov	r1, r6
 800759c:	f7f9 fb7c 	bl	8000c98 <__aeabi_uldivmod>
 80075a0:	4603      	mov	r3, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	461a      	mov	r2, r3
 80075a6:	4b77      	ldr	r3, [pc, #476]	; (8007784 <UART_SetConfig+0x6f4>)
 80075a8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	2164      	movs	r1, #100	; 0x64
 80075b0:	fb01 f303 	mul.w	r3, r1, r3
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	3332      	adds	r3, #50	; 0x32
 80075ba:	4a72      	ldr	r2, [pc, #456]	; (8007784 <UART_SetConfig+0x6f4>)
 80075bc:	fba2 2303 	umull	r2, r3, r2, r3
 80075c0:	095b      	lsrs	r3, r3, #5
 80075c2:	f003 020f 	and.w	r2, r3, #15
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4442      	add	r2, r8
 80075cc:	609a      	str	r2, [r3, #8]
 80075ce:	e0d0      	b.n	8007772 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80075d0:	f7fe fba8 	bl	8005d24 <HAL_RCC_GetPCLK1Freq>
 80075d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	469a      	mov	sl, r3
 80075da:	f04f 0b00 	mov.w	fp, #0
 80075de:	46d0      	mov	r8, sl
 80075e0:	46d9      	mov	r9, fp
 80075e2:	eb18 0308 	adds.w	r3, r8, r8
 80075e6:	eb49 0409 	adc.w	r4, r9, r9
 80075ea:	4698      	mov	r8, r3
 80075ec:	46a1      	mov	r9, r4
 80075ee:	eb18 080a 	adds.w	r8, r8, sl
 80075f2:	eb49 090b 	adc.w	r9, r9, fp
 80075f6:	f04f 0100 	mov.w	r1, #0
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007602:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007606:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800760a:	4688      	mov	r8, r1
 800760c:	4691      	mov	r9, r2
 800760e:	eb1a 0508 	adds.w	r5, sl, r8
 8007612:	eb4b 0609 	adc.w	r6, fp, r9
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	4619      	mov	r1, r3
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	f04f 0400 	mov.w	r4, #0
 8007628:	0094      	lsls	r4, r2, #2
 800762a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800762e:	008b      	lsls	r3, r1, #2
 8007630:	461a      	mov	r2, r3
 8007632:	4623      	mov	r3, r4
 8007634:	4628      	mov	r0, r5
 8007636:	4631      	mov	r1, r6
 8007638:	f7f9 fb2e 	bl	8000c98 <__aeabi_uldivmod>
 800763c:	4603      	mov	r3, r0
 800763e:	460c      	mov	r4, r1
 8007640:	461a      	mov	r2, r3
 8007642:	4b50      	ldr	r3, [pc, #320]	; (8007784 <UART_SetConfig+0x6f4>)
 8007644:	fba3 2302 	umull	r2, r3, r3, r2
 8007648:	095b      	lsrs	r3, r3, #5
 800764a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	469b      	mov	fp, r3
 8007652:	f04f 0c00 	mov.w	ip, #0
 8007656:	46d9      	mov	r9, fp
 8007658:	46e2      	mov	sl, ip
 800765a:	eb19 0309 	adds.w	r3, r9, r9
 800765e:	eb4a 040a 	adc.w	r4, sl, sl
 8007662:	4699      	mov	r9, r3
 8007664:	46a2      	mov	sl, r4
 8007666:	eb19 090b 	adds.w	r9, r9, fp
 800766a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800766e:	f04f 0100 	mov.w	r1, #0
 8007672:	f04f 0200 	mov.w	r2, #0
 8007676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800767a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800767e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007682:	4689      	mov	r9, r1
 8007684:	4692      	mov	sl, r2
 8007686:	eb1b 0509 	adds.w	r5, fp, r9
 800768a:	eb4c 060a 	adc.w	r6, ip, sl
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	4619      	mov	r1, r3
 8007694:	f04f 0200 	mov.w	r2, #0
 8007698:	f04f 0300 	mov.w	r3, #0
 800769c:	f04f 0400 	mov.w	r4, #0
 80076a0:	0094      	lsls	r4, r2, #2
 80076a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076a6:	008b      	lsls	r3, r1, #2
 80076a8:	461a      	mov	r2, r3
 80076aa:	4623      	mov	r3, r4
 80076ac:	4628      	mov	r0, r5
 80076ae:	4631      	mov	r1, r6
 80076b0:	f7f9 faf2 	bl	8000c98 <__aeabi_uldivmod>
 80076b4:	4603      	mov	r3, r0
 80076b6:	460c      	mov	r4, r1
 80076b8:	461a      	mov	r2, r3
 80076ba:	4b32      	ldr	r3, [pc, #200]	; (8007784 <UART_SetConfig+0x6f4>)
 80076bc:	fba3 1302 	umull	r1, r3, r3, r2
 80076c0:	095b      	lsrs	r3, r3, #5
 80076c2:	2164      	movs	r1, #100	; 0x64
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	3332      	adds	r3, #50	; 0x32
 80076ce:	4a2d      	ldr	r2, [pc, #180]	; (8007784 <UART_SetConfig+0x6f4>)
 80076d0:	fba2 2303 	umull	r2, r3, r2, r3
 80076d4:	095b      	lsrs	r3, r3, #5
 80076d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076da:	4498      	add	r8, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	469b      	mov	fp, r3
 80076e0:	f04f 0c00 	mov.w	ip, #0
 80076e4:	46d9      	mov	r9, fp
 80076e6:	46e2      	mov	sl, ip
 80076e8:	eb19 0309 	adds.w	r3, r9, r9
 80076ec:	eb4a 040a 	adc.w	r4, sl, sl
 80076f0:	4699      	mov	r9, r3
 80076f2:	46a2      	mov	sl, r4
 80076f4:	eb19 090b 	adds.w	r9, r9, fp
 80076f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076fc:	f04f 0100 	mov.w	r1, #0
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007708:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800770c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007710:	4689      	mov	r9, r1
 8007712:	4692      	mov	sl, r2
 8007714:	eb1b 0509 	adds.w	r5, fp, r9
 8007718:	eb4c 060a 	adc.w	r6, ip, sl
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4619      	mov	r1, r3
 8007722:	f04f 0200 	mov.w	r2, #0
 8007726:	f04f 0300 	mov.w	r3, #0
 800772a:	f04f 0400 	mov.w	r4, #0
 800772e:	0094      	lsls	r4, r2, #2
 8007730:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007734:	008b      	lsls	r3, r1, #2
 8007736:	461a      	mov	r2, r3
 8007738:	4623      	mov	r3, r4
 800773a:	4628      	mov	r0, r5
 800773c:	4631      	mov	r1, r6
 800773e:	f7f9 faab 	bl	8000c98 <__aeabi_uldivmod>
 8007742:	4603      	mov	r3, r0
 8007744:	460c      	mov	r4, r1
 8007746:	461a      	mov	r2, r3
 8007748:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <UART_SetConfig+0x6f4>)
 800774a:	fba3 1302 	umull	r1, r3, r3, r2
 800774e:	095b      	lsrs	r3, r3, #5
 8007750:	2164      	movs	r1, #100	; 0x64
 8007752:	fb01 f303 	mul.w	r3, r1, r3
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	3332      	adds	r3, #50	; 0x32
 800775c:	4a09      	ldr	r2, [pc, #36]	; (8007784 <UART_SetConfig+0x6f4>)
 800775e:	fba2 2303 	umull	r2, r3, r2, r3
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	f003 020f 	and.w	r2, r3, #15
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4442      	add	r2, r8
 800776e:	609a      	str	r2, [r3, #8]
}
 8007770:	e7ff      	b.n	8007772 <UART_SetConfig+0x6e2>
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777c:	40011000 	.word	0x40011000
 8007780:	40011400 	.word	0x40011400
 8007784:	51eb851f 	.word	0x51eb851f

08007788 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007788:	b084      	sub	sp, #16
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	f107 001c 	add.w	r0, r7, #28
 8007796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	2b01      	cmp	r3, #1
 800779e:	d122      	bne.n	80077e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80077b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d105      	bne.n	80077da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 fac6 	bl	8008d6c <USB_CoreReset>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
 80077e4:	e01a      	b.n	800781c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 faba 	bl	8008d6c <USB_CoreReset>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	; 0x38
 800780e:	e005      	b.n	800781c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	2b01      	cmp	r3, #1
 8007820:	d10b      	bne.n	800783a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f043 0206 	orr.w	r2, r3, #6
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f043 0220 	orr.w	r2, r3, #32
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007846:	b004      	add	sp, #16
 8007848:	4770      	bx	lr
	...

0800784c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	2b02      	cmp	r3, #2
 800785e:	d165      	bne.n	800792c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4a41      	ldr	r2, [pc, #260]	; (8007968 <USB_SetTurnaroundTime+0x11c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d906      	bls.n	8007876 <USB_SetTurnaroundTime+0x2a>
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	4a40      	ldr	r2, [pc, #256]	; (800796c <USB_SetTurnaroundTime+0x120>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d802      	bhi.n	8007876 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007870:	230f      	movs	r3, #15
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	e062      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4a3c      	ldr	r2, [pc, #240]	; (800796c <USB_SetTurnaroundTime+0x120>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d906      	bls.n	800788c <USB_SetTurnaroundTime+0x40>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	4a3b      	ldr	r2, [pc, #236]	; (8007970 <USB_SetTurnaroundTime+0x124>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d802      	bhi.n	800788c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007886:	230e      	movs	r3, #14
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	e057      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4a38      	ldr	r2, [pc, #224]	; (8007970 <USB_SetTurnaroundTime+0x124>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d906      	bls.n	80078a2 <USB_SetTurnaroundTime+0x56>
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	4a37      	ldr	r2, [pc, #220]	; (8007974 <USB_SetTurnaroundTime+0x128>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d802      	bhi.n	80078a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800789c:	230d      	movs	r3, #13
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	e04c      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4a33      	ldr	r2, [pc, #204]	; (8007974 <USB_SetTurnaroundTime+0x128>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d906      	bls.n	80078b8 <USB_SetTurnaroundTime+0x6c>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	4a32      	ldr	r2, [pc, #200]	; (8007978 <USB_SetTurnaroundTime+0x12c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d802      	bhi.n	80078b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80078b2:	230c      	movs	r3, #12
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	e041      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4a2f      	ldr	r2, [pc, #188]	; (8007978 <USB_SetTurnaroundTime+0x12c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d906      	bls.n	80078ce <USB_SetTurnaroundTime+0x82>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4a2e      	ldr	r2, [pc, #184]	; (800797c <USB_SetTurnaroundTime+0x130>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d802      	bhi.n	80078ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80078c8:	230b      	movs	r3, #11
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e036      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	4a2a      	ldr	r2, [pc, #168]	; (800797c <USB_SetTurnaroundTime+0x130>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d906      	bls.n	80078e4 <USB_SetTurnaroundTime+0x98>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4a29      	ldr	r2, [pc, #164]	; (8007980 <USB_SetTurnaroundTime+0x134>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d802      	bhi.n	80078e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80078de:	230a      	movs	r3, #10
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e02b      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4a26      	ldr	r2, [pc, #152]	; (8007980 <USB_SetTurnaroundTime+0x134>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d906      	bls.n	80078fa <USB_SetTurnaroundTime+0xae>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4a25      	ldr	r2, [pc, #148]	; (8007984 <USB_SetTurnaroundTime+0x138>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d802      	bhi.n	80078fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80078f4:	2309      	movs	r3, #9
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	e020      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	4a21      	ldr	r2, [pc, #132]	; (8007984 <USB_SetTurnaroundTime+0x138>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d906      	bls.n	8007910 <USB_SetTurnaroundTime+0xc4>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	4a20      	ldr	r2, [pc, #128]	; (8007988 <USB_SetTurnaroundTime+0x13c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d802      	bhi.n	8007910 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800790a:	2308      	movs	r3, #8
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	e015      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4a1d      	ldr	r2, [pc, #116]	; (8007988 <USB_SetTurnaroundTime+0x13c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d906      	bls.n	8007926 <USB_SetTurnaroundTime+0xda>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4a1c      	ldr	r2, [pc, #112]	; (800798c <USB_SetTurnaroundTime+0x140>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d802      	bhi.n	8007926 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007920:	2307      	movs	r3, #7
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e00a      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007926:	2306      	movs	r3, #6
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	e007      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007932:	2309      	movs	r3, #9
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	e001      	b.n	800793c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007938:	2309      	movs	r3, #9
 800793a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	029b      	lsls	r3, r3, #10
 8007950:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007954:	431a      	orrs	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	00d8acbf 	.word	0x00d8acbf
 800796c:	00e4e1bf 	.word	0x00e4e1bf
 8007970:	00f423ff 	.word	0x00f423ff
 8007974:	0106737f 	.word	0x0106737f
 8007978:	011a499f 	.word	0x011a499f
 800797c:	01312cff 	.word	0x01312cff
 8007980:	014ca43f 	.word	0x014ca43f
 8007984:	016e35ff 	.word	0x016e35ff
 8007988:	01a6ab1f 	.word	0x01a6ab1f
 800798c:	01e847ff 	.word	0x01e847ff

08007990 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f043 0201 	orr.w	r2, r3, #1
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f023 0201 	bic.w	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d106      	bne.n	8007a00 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60da      	str	r2, [r3, #12]
 80079fe:	e00b      	b.n	8007a18 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60da      	str	r2, [r3, #12]
 8007a12:	e001      	b.n	8007a18 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e003      	b.n	8007a20 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007a18:	2032      	movs	r0, #50	; 0x32
 8007a1a:	f7fb f83b 	bl	8002a94 <HAL_Delay>

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a28:	b084      	sub	sp, #16
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b086      	sub	sp, #24
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a42:	2300      	movs	r3, #0
 8007a44:	613b      	str	r3, [r7, #16]
 8007a46:	e009      	b.n	8007a5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	3340      	adds	r3, #64	; 0x40
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	2200      	movs	r2, #0
 8007a54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	613b      	str	r3, [r7, #16]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2b0e      	cmp	r3, #14
 8007a60:	d9f2      	bls.n	8007a48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d11c      	bne.n	8007aa2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a76:	f043 0302 	orr.w	r3, r3, #2
 8007a7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	639a      	str	r2, [r3, #56]	; 0x38
 8007aa0:	e00b      	b.n	8007aba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007acc:	4619      	mov	r1, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	680b      	ldr	r3, [r1, #0]
 8007ad8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d10c      	bne.n	8007afa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f949 	bl	8007d80 <USB_SetDevSpeed>
 8007aee:	e008      	b.n	8007b02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007af0:	2101      	movs	r1, #1
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f944 	bl	8007d80 <USB_SetDevSpeed>
 8007af8:	e003      	b.n	8007b02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007afa:	2103      	movs	r1, #3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f93f 	bl	8007d80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b02:	2110      	movs	r1, #16
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f8f3 	bl	8007cf0 <USB_FlushTxFifo>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f911 	bl	8007d3c <USB_FlushRxFifo>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b36:	461a      	mov	r2, r3
 8007b38:	2300      	movs	r3, #0
 8007b3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b42:	461a      	mov	r2, r3
 8007b44:	2300      	movs	r3, #0
 8007b46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	e043      	b.n	8007bd6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b64:	d118      	bne.n	8007b98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	e013      	b.n	8007baa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	e008      	b.n	8007baa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	2300      	movs	r3, #0
 8007bba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d3b7      	bcc.n	8007b4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bde:	2300      	movs	r3, #0
 8007be0:	613b      	str	r3, [r7, #16]
 8007be2:	e043      	b.n	8007c6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bfa:	d118      	bne.n	8007c2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10a      	bne.n	8007c18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	e013      	b.n	8007c40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c24:	461a      	mov	r2, r3
 8007c26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	e008      	b.n	8007c40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	2300      	movs	r3, #0
 8007c50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	613b      	str	r3, [r7, #16]
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d3b7      	bcc.n	8007be4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d105      	bne.n	8007ca8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	f043 0210 	orr.w	r2, r3, #16
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	699a      	ldr	r2, [r3, #24]
 8007cac:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <USB_DevInit+0x2c4>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	f043 0208 	orr.w	r2, r3, #8
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d107      	bne.n	8007cdc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cd4:	f043 0304 	orr.w	r3, r3, #4
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ce8:	b004      	add	sp, #16
 8007cea:	4770      	bx	lr
 8007cec:	803c3800 	.word	0x803c3800

08007cf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	019b      	lsls	r3, r3, #6
 8007d02:	f043 0220 	orr.w	r2, r3, #32
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4a09      	ldr	r2, [pc, #36]	; (8007d38 <USB_FlushTxFifo+0x48>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d901      	bls.n	8007d1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e006      	b.n	8007d2a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b20      	cmp	r3, #32
 8007d26:	d0f0      	beq.n	8007d0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	00030d40 	.word	0x00030d40

08007d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2210      	movs	r2, #16
 8007d4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4a09      	ldr	r2, [pc, #36]	; (8007d7c <USB_FlushRxFifo+0x40>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d901      	bls.n	8007d60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e006      	b.n	8007d6e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	f003 0310 	and.w	r3, r3, #16
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d0f0      	beq.n	8007d4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	00030d40 	.word	0x00030d40

08007d80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	68f9      	ldr	r1, [r7, #12]
 8007d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007da0:	4313      	orrs	r3, r2
 8007da2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b087      	sub	sp, #28
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f003 0306 	and.w	r3, r3, #6
 8007dca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75fb      	strb	r3, [r7, #23]
 8007dd6:	e00a      	b.n	8007dee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d002      	beq.n	8007de4 <USB_GetDevSpeed+0x32>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b06      	cmp	r3, #6
 8007de2:	d102      	bne.n	8007dea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007de4:	2302      	movs	r3, #2
 8007de6:	75fb      	strb	r3, [r7, #23]
 8007de8:	e001      	b.n	8007dee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007dea:	230f      	movs	r3, #15
 8007dec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d13a      	bne.n	8007e8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1e:	69da      	ldr	r2, [r3, #28]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 030f 	and.w	r3, r3, #15
 8007e28:	2101      	movs	r1, #1
 8007e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	68f9      	ldr	r1, [r7, #12]
 8007e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e36:	4313      	orrs	r3, r2
 8007e38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d155      	bne.n	8007efc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	78db      	ldrb	r3, [r3, #3]
 8007e6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	059b      	lsls	r3, r3, #22
 8007e72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e74:	4313      	orrs	r3, r2
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	0151      	lsls	r1, r2, #5
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	440a      	add	r2, r1
 8007e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	e036      	b.n	8007efc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e94:	69da      	ldr	r2, [r3, #28]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea4:	041b      	lsls	r3, r3, #16
 8007ea6:	68f9      	ldr	r1, [r7, #12]
 8007ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eac:	4313      	orrs	r3, r2
 8007eae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d11a      	bne.n	8007efc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	78db      	ldrb	r3, [r3, #3]
 8007ee0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	0151      	lsls	r1, r2, #5
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	440a      	add	r2, r1
 8007eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007efa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
	...

08007f0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d161      	bne.n	8007fec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f3e:	d11f      	bne.n	8007f80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	0151      	lsls	r1, r2, #5
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	440a      	add	r2, r1
 8007f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	2101      	movs	r1, #1
 8007f92:	fa01 f303 	lsl.w	r3, r1, r3
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	68f9      	ldr	r1, [r7, #12]
 8007f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f003 030f 	and.w	r3, r3, #15
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	0159      	lsls	r1, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	440b      	add	r3, r1
 8007fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4b35      	ldr	r3, [pc, #212]	; (80080bc <USB_DeactivateEndpoint+0x1b0>)
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	600b      	str	r3, [r1, #0]
 8007fea:	e060      	b.n	80080ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008002:	d11f      	bne.n	8008044 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	0151      	lsls	r1, r2, #5
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	440a      	add	r2, r1
 800801a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800801e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008022:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	0151      	lsls	r1, r2, #5
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	440a      	add	r2, r1
 800803a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800803e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008042:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	f003 030f 	and.w	r3, r3, #15
 8008054:	2101      	movs	r1, #1
 8008056:	fa01 f303 	lsl.w	r3, r1, r3
 800805a:	041b      	lsls	r3, r3, #16
 800805c:	43db      	mvns	r3, r3
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008064:	4013      	ands	r3, r2
 8008066:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806e:	69da      	ldr	r2, [r3, #28]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	2101      	movs	r1, #1
 800807a:	fa01 f303 	lsl.w	r3, r1, r3
 800807e:	041b      	lsls	r3, r3, #16
 8008080:	43db      	mvns	r3, r3
 8008082:	68f9      	ldr	r1, [r7, #12]
 8008084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008088:	4013      	ands	r3, r2
 800808a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	0159      	lsls	r1, r3, #5
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	440b      	add	r3, r1
 80080a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a6:	4619      	mov	r1, r3
 80080a8:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <USB_DeactivateEndpoint+0x1b4>)
 80080aa:	4013      	ands	r3, r2
 80080ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	ec337800 	.word	0xec337800
 80080c0:	eff37800 	.word	0xeff37800

080080c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08a      	sub	sp, #40	; 0x28
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	785b      	ldrb	r3, [r3, #1]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	f040 815c 	bne.w	800839e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d132      	bne.n	8008154 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	0151      	lsls	r1, r2, #5
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	440a      	add	r2, r1
 8008104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008108:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800810c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008110:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	0151      	lsls	r1, r2, #5
 8008124:	69fa      	ldr	r2, [r7, #28]
 8008126:	440a      	add	r2, r1
 8008128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800812c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008130:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	0151      	lsls	r1, r2, #5
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	440a      	add	r2, r1
 8008148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800814c:	0cdb      	lsrs	r3, r3, #19
 800814e:	04db      	lsls	r3, r3, #19
 8008150:	6113      	str	r3, [r2, #16]
 8008152:	e074      	b.n	800823e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	4413      	add	r3, r2
 800815c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	0151      	lsls	r1, r2, #5
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	440a      	add	r2, r1
 800816a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800816e:	0cdb      	lsrs	r3, r3, #19
 8008170:	04db      	lsls	r3, r3, #19
 8008172:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	0151      	lsls	r1, r2, #5
 8008186:	69fa      	ldr	r2, [r7, #28]
 8008188:	440a      	add	r2, r1
 800818a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800818e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008192:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008196:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a4:	691a      	ldr	r2, [r3, #16]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	6959      	ldr	r1, [r3, #20]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	440b      	add	r3, r1
 80081b0:	1e59      	subs	r1, r3, #1
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80081ba:	04d9      	lsls	r1, r3, #19
 80081bc:	4b9d      	ldr	r3, [pc, #628]	; (8008434 <USB_EPStartXfer+0x370>)
 80081be:	400b      	ands	r3, r1
 80081c0:	69b9      	ldr	r1, [r7, #24]
 80081c2:	0148      	lsls	r0, r1, #5
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	4401      	add	r1, r0
 80081c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081cc:	4313      	orrs	r3, r2
 80081ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081dc:	691a      	ldr	r2, [r3, #16]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081e6:	69b9      	ldr	r1, [r7, #24]
 80081e8:	0148      	lsls	r0, r1, #5
 80081ea:	69f9      	ldr	r1, [r7, #28]
 80081ec:	4401      	add	r1, r0
 80081ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081f2:	4313      	orrs	r3, r2
 80081f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	78db      	ldrb	r3, [r3, #3]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d11f      	bne.n	800823e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	4413      	add	r3, r2
 8008206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	0151      	lsls	r1, r2, #5
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	440a      	add	r2, r1
 8008214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008218:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800821c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	0151      	lsls	r1, r2, #5
 8008230:	69fa      	ldr	r2, [r7, #28]
 8008232:	440a      	add	r2, r1
 8008234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800823c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d14b      	bne.n	80082dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d009      	beq.n	8008260 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008258:	461a      	mov	r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	78db      	ldrb	r3, [r3, #3]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d128      	bne.n	80082ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008274:	2b00      	cmp	r3, #0
 8008276:	d110      	bne.n	800829a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69ba      	ldr	r2, [r7, #24]
 8008288:	0151      	lsls	r1, r2, #5
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	440a      	add	r2, r1
 800828e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	e00f      	b.n	80082ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	0151      	lsls	r1, r2, #5
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	440a      	add	r2, r1
 80082b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	0151      	lsls	r1, r2, #5
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	440a      	add	r2, r1
 80082d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	e12f      	b.n	800853c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	78db      	ldrb	r3, [r3, #3]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d015      	beq.n	8008330 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 8117 	beq.w	800853c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	2101      	movs	r1, #1
 8008320:	fa01 f303 	lsl.w	r3, r1, r3
 8008324:	69f9      	ldr	r1, [r7, #28]
 8008326:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800832a:	4313      	orrs	r3, r2
 800832c:	634b      	str	r3, [r1, #52]	; 0x34
 800832e:	e105      	b.n	800853c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833c:	2b00      	cmp	r3, #0
 800833e:	d110      	bne.n	8008362 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69ba      	ldr	r2, [r7, #24]
 8008350:	0151      	lsls	r1, r2, #5
 8008352:	69fa      	ldr	r2, [r7, #28]
 8008354:	440a      	add	r2, r1
 8008356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800835a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800835e:	6013      	str	r3, [r2, #0]
 8008360:	e00f      	b.n	8008382 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	0151      	lsls	r1, r2, #5
 8008374:	69fa      	ldr	r2, [r7, #28]
 8008376:	440a      	add	r2, r1
 8008378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800837c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008380:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	68d9      	ldr	r1, [r3, #12]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	781a      	ldrb	r2, [r3, #0]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	b298      	uxth	r0, r3
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	4603      	mov	r3, r0
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 fa2b 	bl	80087f2 <USB_WritePacket>
 800839c:	e0ce      	b.n	800853c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	0151      	lsls	r1, r2, #5
 80083b0:	69fa      	ldr	r2, [r7, #28]
 80083b2:	440a      	add	r2, r1
 80083b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b8:	0cdb      	lsrs	r3, r3, #19
 80083ba:	04db      	lsls	r3, r3, #19
 80083bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d126      	bne.n	8008438 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008400:	69b9      	ldr	r1, [r7, #24]
 8008402:	0148      	lsls	r0, r1, #5
 8008404:	69f9      	ldr	r1, [r7, #28]
 8008406:	4401      	add	r1, r0
 8008408:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800840c:	4313      	orrs	r3, r2
 800840e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	440a      	add	r2, r1
 8008426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800842a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800842e:	6113      	str	r3, [r2, #16]
 8008430:	e036      	b.n	80084a0 <USB_EPStartXfer+0x3dc>
 8008432:	bf00      	nop
 8008434:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	695a      	ldr	r2, [r3, #20]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	4413      	add	r3, r2
 8008442:	1e5a      	subs	r2, r3, #1
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	fbb2 f3f3 	udiv	r3, r2, r3
 800844c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845a:	691a      	ldr	r2, [r3, #16]
 800845c:	8afb      	ldrh	r3, [r7, #22]
 800845e:	04d9      	lsls	r1, r3, #19
 8008460:	4b39      	ldr	r3, [pc, #228]	; (8008548 <USB_EPStartXfer+0x484>)
 8008462:	400b      	ands	r3, r1
 8008464:	69b9      	ldr	r1, [r7, #24]
 8008466:	0148      	lsls	r0, r1, #5
 8008468:	69f9      	ldr	r1, [r7, #28]
 800846a:	4401      	add	r1, r0
 800846c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008470:	4313      	orrs	r3, r2
 8008472:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	8af9      	ldrh	r1, [r7, #22]
 8008488:	fb01 f303 	mul.w	r3, r1, r3
 800848c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008490:	69b9      	ldr	r1, [r7, #24]
 8008492:	0148      	lsls	r0, r1, #5
 8008494:	69f9      	ldr	r1, [r7, #28]
 8008496:	4401      	add	r1, r0
 8008498:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800849c:	4313      	orrs	r3, r2
 800849e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d10d      	bne.n	80084c2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d009      	beq.n	80084c2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	68d9      	ldr	r1, [r3, #12]
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084be:	460a      	mov	r2, r1
 80084c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	78db      	ldrb	r3, [r3, #3]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d128      	bne.n	800851c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d110      	bne.n	80084fc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	0151      	lsls	r1, r2, #5
 80084ec:	69fa      	ldr	r2, [r7, #28]
 80084ee:	440a      	add	r2, r1
 80084f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	e00f      	b.n	800851c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69ba      	ldr	r2, [r7, #24]
 800850c:	0151      	lsls	r1, r2, #5
 800850e:	69fa      	ldr	r2, [r7, #28]
 8008510:	440a      	add	r2, r1
 8008512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800851a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	0151      	lsls	r1, r2, #5
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	440a      	add	r2, r1
 8008532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008536:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800853a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3720      	adds	r7, #32
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	1ff80000 	.word	0x1ff80000

0800854c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	2b01      	cmp	r3, #1
 800856a:	f040 80cd 	bne.w	8008708 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d132      	bne.n	80085dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008590:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008594:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008598:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	0151      	lsls	r1, r2, #5
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	440a      	add	r2, r1
 80085b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	0151      	lsls	r1, r2, #5
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	440a      	add	r2, r1
 80085d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085d4:	0cdb      	lsrs	r3, r3, #19
 80085d6:	04db      	lsls	r3, r3, #19
 80085d8:	6113      	str	r3, [r2, #16]
 80085da:	e04e      	b.n	800867a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	0151      	lsls	r1, r2, #5
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	440a      	add	r2, r1
 80085f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f6:	0cdb      	lsrs	r3, r3, #19
 80085f8:	04db      	lsls	r3, r3, #19
 80085fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	0151      	lsls	r1, r2, #5
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	440a      	add	r2, r1
 8008612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008616:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800861a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800861e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	695a      	ldr	r2, [r3, #20]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	429a      	cmp	r2, r3
 800862a:	d903      	bls.n	8008634 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	440a      	add	r2, r1
 800864a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800866a:	6939      	ldr	r1, [r7, #16]
 800866c:	0148      	lsls	r0, r1, #5
 800866e:	6979      	ldr	r1, [r7, #20]
 8008670:	4401      	add	r1, r0
 8008672:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008676:	4313      	orrs	r3, r2
 8008678:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d11e      	bne.n	80086be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d009      	beq.n	800869c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008694:	461a      	mov	r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	0151      	lsls	r1, r2, #5
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	440a      	add	r2, r1
 80086b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	e092      	b.n	80087e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d07e      	beq.n	80087e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	f003 030f 	and.w	r3, r3, #15
 80086f6:	2101      	movs	r1, #1
 80086f8:	fa01 f303 	lsl.w	r3, r1, r3
 80086fc:	6979      	ldr	r1, [r7, #20]
 80086fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008702:	4313      	orrs	r3, r2
 8008704:	634b      	str	r3, [r1, #52]	; 0x34
 8008706:	e06d      	b.n	80087e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	4413      	add	r3, r2
 8008710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	0151      	lsls	r1, r2, #5
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	440a      	add	r2, r1
 800871e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008722:	0cdb      	lsrs	r3, r3, #19
 8008724:	04db      	lsls	r3, r3, #19
 8008726:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	440a      	add	r2, r1
 800873e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008742:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008746:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800874a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	440a      	add	r2, r1
 8008772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800877a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	691a      	ldr	r2, [r3, #16]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008792:	6939      	ldr	r1, [r7, #16]
 8008794:	0148      	lsls	r0, r1, #5
 8008796:	6979      	ldr	r1, [r7, #20]
 8008798:	4401      	add	r1, r0
 800879a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800879e:	4313      	orrs	r3, r2
 80087a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d10d      	bne.n	80087c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d009      	beq.n	80087c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	68d9      	ldr	r1, [r3, #12]
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c0:	460a      	mov	r2, r1
 80087c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b089      	sub	sp, #36	; 0x24
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	4611      	mov	r1, r2
 80087fe:	461a      	mov	r2, r3
 8008800:	460b      	mov	r3, r1
 8008802:	71fb      	strb	r3, [r7, #7]
 8008804:	4613      	mov	r3, r2
 8008806:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008810:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008814:	2b00      	cmp	r3, #0
 8008816:	d11a      	bne.n	800884e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008818:	88bb      	ldrh	r3, [r7, #4]
 800881a:	3303      	adds	r3, #3
 800881c:	089b      	lsrs	r3, r3, #2
 800881e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008820:	2300      	movs	r3, #0
 8008822:	61bb      	str	r3, [r7, #24]
 8008824:	e00f      	b.n	8008846 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	031a      	lsls	r2, r3, #12
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	4413      	add	r3, r2
 800882e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008832:	461a      	mov	r2, r3
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6013      	str	r3, [r2, #0]
      pSrc++;
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	3304      	adds	r3, #4
 800883e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	3301      	adds	r3, #1
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	429a      	cmp	r2, r3
 800884c:	d3eb      	bcc.n	8008826 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3724      	adds	r7, #36	; 0x24
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800885c:	b480      	push	{r7}
 800885e:	b089      	sub	sp, #36	; 0x24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008872:	88fb      	ldrh	r3, [r7, #6]
 8008874:	3303      	adds	r3, #3
 8008876:	089b      	lsrs	r3, r3, #2
 8008878:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800887a:	2300      	movs	r3, #0
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	e00b      	b.n	8008898 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	601a      	str	r2, [r3, #0]
    pDest++;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	3304      	adds	r3, #4
 8008890:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	3301      	adds	r3, #1
 8008896:	61bb      	str	r3, [r7, #24]
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	429a      	cmp	r2, r3
 800889e:	d3ef      	bcc.n	8008880 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80088a0:	69fb      	ldr	r3, [r7, #28]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3724      	adds	r7, #36	; 0x24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b085      	sub	sp, #20
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	785b      	ldrb	r3, [r3, #1]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d12c      	bne.n	8008924 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	db12      	blt.n	8008902 <USB_EPSetStall+0x54>
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00f      	beq.n	8008902 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	0151      	lsls	r1, r2, #5
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	440a      	add	r2, r1
 80088f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008900:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	0151      	lsls	r1, r2, #5
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	440a      	add	r2, r1
 8008918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800891c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	e02b      	b.n	800897c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	db12      	blt.n	800895c <USB_EPSetStall+0xae>
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00f      	beq.n	800895c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	0151      	lsls	r1, r2, #5
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	440a      	add	r2, r1
 8008952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008956:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800895a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	0151      	lsls	r1, r2, #5
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	440a      	add	r2, r1
 8008972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800897a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800898a:	b480      	push	{r7}
 800898c:	b085      	sub	sp, #20
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d128      	bne.n	80089f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	0151      	lsls	r1, r2, #5
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	440a      	add	r2, r1
 80089bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	78db      	ldrb	r3, [r3, #3]
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d003      	beq.n	80089d6 <USB_EPClearStall+0x4c>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	78db      	ldrb	r3, [r3, #3]
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d138      	bne.n	8008a48 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	0151      	lsls	r1, r2, #5
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	440a      	add	r2, r1
 80089ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	e027      	b.n	8008a48 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	78db      	ldrb	r3, [r3, #3]
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d003      	beq.n	8008a28 <USB_EPClearStall+0x9e>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	78db      	ldrb	r3, [r3, #3]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d10f      	bne.n	8008a48 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	0151      	lsls	r1, r2, #5
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	440a      	add	r2, r1
 8008a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a46:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a78:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	78fb      	ldrb	r3, [r7, #3]
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008a8a:	68f9      	ldr	r1, [r7, #12]
 8008a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a90:	4313      	orrs	r3, r2
 8008a92:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b085      	sub	sp, #20
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008abc:	f023 0303 	bic.w	r3, r3, #3
 8008ac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ad0:	f023 0302 	bic.w	r3, r3, #2
 8008ad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008afe:	f023 0303 	bic.w	r3, r3, #3
 8008b02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b12:	f043 0302 	orr.w	r3, r3, #2
 8008b16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b085      	sub	sp, #20
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	0c1b      	lsrs	r3, r3, #16
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	b29b      	uxth	r3, r3
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	4013      	ands	r3, r2
 8008be0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008be2:	68bb      	ldr	r3, [r7, #8]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b087      	sub	sp, #28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c12:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c20:	01db      	lsls	r3, r3, #7
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	f003 0301 	and.w	r3, r3, #1
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c86:	f023 0307 	bic.w	r3, r3, #7
 8008c8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
	...

08008cb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	333c      	adds	r3, #60	; 0x3c
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	4a26      	ldr	r2, [pc, #152]	; (8008d68 <USB_EP0_OutStart+0xb8>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d90a      	bls.n	8008cea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ce4:	d101      	bne.n	8008cea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e037      	b.n	8008d5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d18:	f043 0318 	orr.w	r3, r3, #24
 8008d1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008d30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008d32:	7afb      	ldrb	r3, [r7, #11]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d10f      	bne.n	8008d58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3e:	461a      	mov	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008d56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	371c      	adds	r7, #28
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	4f54300a 	.word	0x4f54300a

08008d6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4a13      	ldr	r2, [pc, #76]	; (8008dd0 <USB_CoreReset+0x64>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d901      	bls.n	8008d8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e01b      	b.n	8008dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	daf2      	bge.n	8008d78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f043 0201 	orr.w	r2, r3, #1
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3301      	adds	r3, #1
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4a09      	ldr	r2, [pc, #36]	; (8008dd0 <USB_CoreReset+0x64>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d901      	bls.n	8008db4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e006      	b.n	8008dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d0f0      	beq.n	8008da2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	00030d40 	.word	0x00030d40

08008dd4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008de0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008de4:	f002 f952 	bl	800b08c <malloc>
 8008de8:	4603      	mov	r3, r0
 8008dea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d105      	bne.n	8008dfe <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	e066      	b.n	8008ecc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	7c1b      	ldrb	r3, [r3, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d119      	bne.n	8008e42 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e12:	2202      	movs	r2, #2
 8008e14:	2181      	movs	r1, #129	; 0x81
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 ffbf 	bl	800ad9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e26:	2202      	movs	r2, #2
 8008e28:	2101      	movs	r1, #1
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f001 ffb5 	bl	800ad9a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2210      	movs	r2, #16
 8008e3c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008e40:	e016      	b.n	8008e70 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e42:	2340      	movs	r3, #64	; 0x40
 8008e44:	2202      	movs	r2, #2
 8008e46:	2181      	movs	r1, #129	; 0x81
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 ffa6 	bl	800ad9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e54:	2340      	movs	r3, #64	; 0x40
 8008e56:	2202      	movs	r2, #2
 8008e58:	2101      	movs	r1, #1
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 ff9d 	bl	800ad9a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2210      	movs	r2, #16
 8008e6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e70:	2308      	movs	r3, #8
 8008e72:	2203      	movs	r2, #3
 8008e74:	2182      	movs	r1, #130	; 0x82
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f001 ff8f 	bl	800ad9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	7c1b      	ldrb	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d109      	bne.n	8008eba <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f002 f860 	bl	800af78 <USBD_LL_PrepareReceive>
 8008eb8:	e007      	b.n	8008eca <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ec0:	2340      	movs	r3, #64	; 0x40
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f002 f857 	bl	800af78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ee4:	2181      	movs	r1, #129	; 0x81
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 ff7d 	bl	800ade6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 ff76 	bl	800ade6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008f02:	2182      	movs	r1, #130	; 0x82
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 ff6e 	bl	800ade6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00e      	beq.n	8008f42 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f34:	4618      	mov	r0, r3
 8008f36:	f002 f8b1 	bl	800b09c <free>
    pdev->pClassData = NULL;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f5c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d03a      	beq.n	8008fec <USBD_CDC_Setup+0xa0>
 8008f76:	2b20      	cmp	r3, #32
 8008f78:	f040 8097 	bne.w	80090aa <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	88db      	ldrh	r3, [r3, #6]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d029      	beq.n	8008fd8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	b25b      	sxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da11      	bge.n	8008fb2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008f9a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	88d2      	ldrh	r2, [r2, #6]
 8008fa0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008fa2:	6939      	ldr	r1, [r7, #16]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	88db      	ldrh	r3, [r3, #6]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 fa9d 	bl	800a4ea <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008fb0:	e082      	b.n	80090b8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	785a      	ldrb	r2, [r3, #1]
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	88db      	ldrh	r3, [r3, #6]
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008fc8:	6939      	ldr	r1, [r7, #16]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	88db      	ldrh	r3, [r3, #6]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 fab6 	bl	800a542 <USBD_CtlPrepareRx>
    break;
 8008fd6:	e06f      	b.n	80090b8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	7850      	ldrb	r0, [r2, #1]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	4798      	blx	r3
    break;
 8008fea:	e065      	b.n	80090b8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	785b      	ldrb	r3, [r3, #1]
 8008ff0:	2b0b      	cmp	r3, #11
 8008ff2:	d84f      	bhi.n	8009094 <USBD_CDC_Setup+0x148>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <USBD_CDC_Setup+0xb0>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	0800902d 	.word	0x0800902d
 8009000:	080090a3 	.word	0x080090a3
 8009004:	08009095 	.word	0x08009095
 8009008:	08009095 	.word	0x08009095
 800900c:	08009095 	.word	0x08009095
 8009010:	08009095 	.word	0x08009095
 8009014:	08009095 	.word	0x08009095
 8009018:	08009095 	.word	0x08009095
 800901c:	08009095 	.word	0x08009095
 8009020:	08009095 	.word	0x08009095
 8009024:	08009055 	.word	0x08009055
 8009028:	0800907d 	.word	0x0800907d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009032:	2b03      	cmp	r3, #3
 8009034:	d107      	bne.n	8009046 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009036:	f107 030c 	add.w	r3, r7, #12
 800903a:	2202      	movs	r2, #2
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f001 fa53 	bl	800a4ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009044:	e030      	b.n	80090a8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 f9dd 	bl	800a408 <USBD_CtlError>
        ret = USBD_FAIL;
 800904e:	2303      	movs	r3, #3
 8009050:	75fb      	strb	r3, [r7, #23]
      break;
 8009052:	e029      	b.n	80090a8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800905a:	2b03      	cmp	r3, #3
 800905c:	d107      	bne.n	800906e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800905e:	f107 030f 	add.w	r3, r7, #15
 8009062:	2201      	movs	r2, #1
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 fa3f 	bl	800a4ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800906c:	e01c      	b.n	80090a8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 f9c9 	bl	800a408 <USBD_CtlError>
        ret = USBD_FAIL;
 8009076:	2303      	movs	r3, #3
 8009078:	75fb      	strb	r3, [r7, #23]
      break;
 800907a:	e015      	b.n	80090a8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009082:	2b03      	cmp	r3, #3
 8009084:	d00f      	beq.n	80090a6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 f9bd 	bl	800a408 <USBD_CtlError>
        ret = USBD_FAIL;
 800908e:	2303      	movs	r3, #3
 8009090:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009092:	e008      	b.n	80090a6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f001 f9b6 	bl	800a408 <USBD_CtlError>
      ret = USBD_FAIL;
 800909c:	2303      	movs	r3, #3
 800909e:	75fb      	strb	r3, [r7, #23]
      break;
 80090a0:	e002      	b.n	80090a8 <USBD_CDC_Setup+0x15c>
      break;
 80090a2:	bf00      	nop
 80090a4:	e008      	b.n	80090b8 <USBD_CDC_Setup+0x16c>
      break;
 80090a6:	bf00      	nop
    }
    break;
 80090a8:	e006      	b.n	80090b8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 f9ab 	bl	800a408 <USBD_CtlError>
    ret = USBD_FAIL;
 80090b2:	2303      	movs	r3, #3
 80090b4:	75fb      	strb	r3, [r7, #23]
    break;
 80090b6:	bf00      	nop
  }

  return (uint8_t)ret;
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop

080090c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e049      	b.n	800917a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80090ee:	78fa      	ldrb	r2, [r7, #3]
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	4613      	mov	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4413      	add	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	440b      	add	r3, r1
 80090fc:	3318      	adds	r3, #24
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d029      	beq.n	8009158 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009104:	78fa      	ldrb	r2, [r7, #3]
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	4613      	mov	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	3318      	adds	r3, #24
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	78f9      	ldrb	r1, [r7, #3]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	460b      	mov	r3, r1
 800911c:	00db      	lsls	r3, r3, #3
 800911e:	1a5b      	subs	r3, r3, r1
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4403      	add	r3, r0
 8009124:	3344      	adds	r3, #68	; 0x44
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	fbb2 f1f3 	udiv	r1, r2, r3
 800912c:	fb03 f301 	mul.w	r3, r3, r1
 8009130:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009132:	2b00      	cmp	r3, #0
 8009134:	d110      	bne.n	8009158 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	3318      	adds	r3, #24
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800914a:	78f9      	ldrb	r1, [r7, #3]
 800914c:	2300      	movs	r3, #0
 800914e:	2200      	movs	r2, #0
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 fef0 	bl	800af36 <USBD_LL_Transmit>
 8009156:	e00f      	b.n	8009178 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2200      	movs	r2, #0
 800915c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009174:	78fa      	ldrb	r2, [r7, #3]
 8009176:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009194:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e015      	b.n	80091d0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 ff06 	bl	800afba <USBD_LL_GetRxDataSize>
 80091ae:	4602      	mov	r2, r0
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80091ca:	4611      	mov	r1, r2
 80091cc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091e6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d015      	beq.n	800921e <USBD_CDC_EP0_RxReady+0x46>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80091f8:	2bff      	cmp	r3, #255	; 0xff
 80091fa:	d010      	beq.n	800921e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800920a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009212:	b292      	uxth	r2, r2
 8009214:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	22ff      	movs	r2, #255	; 0xff
 800921a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2243      	movs	r2, #67	; 0x43
 8009234:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009236:	4b03      	ldr	r3, [pc, #12]	; (8009244 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	200000f4 	.word	0x200000f4

08009248 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2243      	movs	r2, #67	; 0x43
 8009254:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009256:	4b03      	ldr	r3, [pc, #12]	; (8009264 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	200000b0 	.word	0x200000b0

08009268 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2243      	movs	r2, #67	; 0x43
 8009274:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009276:	4b03      	ldr	r3, [pc, #12]	; (8009284 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	20000138 	.word	0x20000138

08009288 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	220a      	movs	r2, #10
 8009294:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009296:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009298:	4618      	mov	r0, r3
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	2000006c 	.word	0x2000006c

080092a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e004      	b.n	80092c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b087      	sub	sp, #28
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	371c      	adds	r7, #28
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009314:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800933a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800933c:	2301      	movs	r3, #1
 800933e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800934a:	2303      	movs	r3, #3
 800934c:	e01a      	b.n	8009384 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009354:	2b00      	cmp	r3, #0
 8009356:	d114      	bne.n	8009382 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2201      	movs	r2, #1
 800935c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009376:	2181      	movs	r1, #129	; 0x81
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 fddc 	bl	800af36 <USBD_LL_Transmit>

    ret = USBD_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800939a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e016      	b.n	80093d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	7c1b      	ldrb	r3, [r3, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093bc:	2101      	movs	r1, #1
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 fdda 	bl	800af78 <USBD_LL_PrepareReceive>
 80093c4:	e007      	b.n	80093d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093cc:	2340      	movs	r3, #64	; 0x40
 80093ce:	2101      	movs	r1, #1
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 fdd1 	bl	800af78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	4613      	mov	r3, r2
 80093ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e025      	b.n	8009444 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	79fa      	ldrb	r2, [r7, #7]
 8009436:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f001 fc47 	bl	800accc <USBD_LL_Init>
 800943e:	4603      	mov	r3, r0
 8009440:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009442:	7dfb      	ldrb	r3, [r7, #23]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009460:	2303      	movs	r3, #3
 8009462:	e010      	b.n	8009486 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009474:	f107 020e 	add.w	r2, r7, #14
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
 800947c:	4602      	mov	r2, r0
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b082      	sub	sp, #8
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 fc64 	bl	800ad64 <USBD_LL_Start>
 800949c:	4603      	mov	r3, r0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80094c8:	2303      	movs	r3, #3
 80094ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d009      	beq.n	80094ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	78fa      	ldrb	r2, [r7, #3]
 80094e0:	4611      	mov	r1, r2
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
 80094e6:	4603      	mov	r3, r0
 80094e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009506:	2b00      	cmp	r3, #0
 8009508:	d007      	beq.n	800951a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	78fa      	ldrb	r2, [r7, #3]
 8009514:	4611      	mov	r1, r2
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	4798      	blx	r3
  }

  return USBD_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f000 ff2c 	bl	800a394 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800954a:	461a      	mov	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009558:	f003 031f 	and.w	r3, r3, #31
 800955c:	2b01      	cmp	r3, #1
 800955e:	d00e      	beq.n	800957e <USBD_LL_SetupStage+0x5a>
 8009560:	2b01      	cmp	r3, #1
 8009562:	d302      	bcc.n	800956a <USBD_LL_SetupStage+0x46>
 8009564:	2b02      	cmp	r3, #2
 8009566:	d014      	beq.n	8009592 <USBD_LL_SetupStage+0x6e>
 8009568:	e01d      	b.n	80095a6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa18 	bl	80099a8 <USBD_StdDevReq>
 8009578:	4603      	mov	r3, r0
 800957a:	73fb      	strb	r3, [r7, #15]
      break;
 800957c:	e020      	b.n	80095c0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fa7c 	bl	8009a84 <USBD_StdItfReq>
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]
      break;
 8009590:	e016      	b.n	80095c0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fab8 	bl	8009b10 <USBD_StdEPReq>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]
      break;
 80095a4:	e00c      	b.n	80095c0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80095ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 fc35 	bl	800ae24 <USBD_LL_StallEP>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]
      break;
 80095be:	bf00      	nop
  }

  return ret;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b086      	sub	sp, #24
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	460b      	mov	r3, r1
 80095d4:	607a      	str	r2, [r7, #4]
 80095d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d137      	bne.n	800964e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d14a      	bne.n	8009686 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d913      	bls.n	8009624 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	1ad2      	subs	r2, r2, r3
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	68da      	ldr	r2, [r3, #12]
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	4293      	cmp	r3, r2
 8009614:	bf28      	it	cs
 8009616:	4613      	movcs	r3, r2
 8009618:	461a      	mov	r2, r3
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 ffad 	bl	800a57c <USBD_CtlContinueRx>
 8009622:	e030      	b.n	8009686 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00a      	beq.n	8009646 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009636:	2b03      	cmp	r3, #3
 8009638:	d105      	bne.n	8009646 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 ffa9 	bl	800a59e <USBD_CtlSendStatus>
 800964c:	e01b      	b.n	8009686 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d013      	beq.n	8009682 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009660:	2b03      	cmp	r3, #3
 8009662:	d10e      	bne.n	8009682 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	7afa      	ldrb	r2, [r7, #11]
 800966e:	4611      	mov	r1, r2
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	4798      	blx	r3
 8009674:	4603      	mov	r3, r0
 8009676:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009678:	7dfb      	ldrb	r3, [r7, #23]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800967e:	7dfb      	ldrb	r3, [r7, #23]
 8009680:	e002      	b.n	8009688 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009682:	2303      	movs	r3, #3
 8009684:	e000      	b.n	8009688 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	460b      	mov	r3, r1
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d16a      	bne.n	800977a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3314      	adds	r3, #20
 80096a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d155      	bne.n	8009760 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	689a      	ldr	r2, [r3, #8]
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d914      	bls.n	80096ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	1ad2      	subs	r2, r2, r3
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	461a      	mov	r2, r3
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 ff22 	bl	800a520 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096dc:	2300      	movs	r3, #0
 80096de:	2200      	movs	r2, #0
 80096e0:	2100      	movs	r1, #0
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f001 fc48 	bl	800af78 <USBD_LL_PrepareReceive>
 80096e8:	e03a      	b.n	8009760 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	68da      	ldr	r2, [r3, #12]
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d11c      	bne.n	8009730 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80096fe:	429a      	cmp	r2, r3
 8009700:	d316      	bcc.n	8009730 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800970c:	429a      	cmp	r2, r3
 800970e:	d20f      	bcs.n	8009730 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009710:	2200      	movs	r2, #0
 8009712:	2100      	movs	r1, #0
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 ff03 	bl	800a520 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009722:	2300      	movs	r3, #0
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f001 fc25 	bl	800af78 <USBD_LL_PrepareReceive>
 800972e:	e017      	b.n	8009760 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00a      	beq.n	8009752 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009742:	2b03      	cmp	r3, #3
 8009744:	d105      	bne.n	8009752 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009752:	2180      	movs	r1, #128	; 0x80
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f001 fb65 	bl	800ae24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 ff32 	bl	800a5c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009766:	2b01      	cmp	r3, #1
 8009768:	d123      	bne.n	80097b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f7ff fe9b 	bl	80094a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009778:	e01b      	b.n	80097b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d013      	beq.n	80097ae <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800978c:	2b03      	cmp	r3, #3
 800978e:	d10e      	bne.n	80097ae <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	7afa      	ldrb	r2, [r7, #11]
 800979a:	4611      	mov	r1, r2
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	4798      	blx	r3
 80097a0:	4603      	mov	r3, r0
 80097a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
 80097ac:	e002      	b.n	80097b4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e000      	b.n	80097b4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d009      	beq.n	8009800 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6852      	ldr	r2, [r2, #4]
 80097f8:	b2d2      	uxtb	r2, r2
 80097fa:	4611      	mov	r1, r2
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009800:	2340      	movs	r3, #64	; 0x40
 8009802:	2200      	movs	r2, #0
 8009804:	2100      	movs	r1, #0
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f001 fac7 	bl	800ad9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2240      	movs	r2, #64	; 0x40
 8009818:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	2200      	movs	r2, #0
 8009820:	2180      	movs	r1, #128	; 0x80
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f001 fab9 	bl	800ad9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2240      	movs	r2, #64	; 0x40
 8009832:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	460b      	mov	r3, r1
 8009848:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	78fa      	ldrb	r2, [r7, #3]
 800984e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2204      	movs	r2, #4
 8009876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009896:	2b04      	cmp	r3, #4
 8009898:	d105      	bne.n	80098a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d10b      	bne.n	80098de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098cc:	69db      	ldr	r3, [r3, #28]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d005      	beq.n	80098de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009948:	2b00      	cmp	r3, #0
 800994a:	d009      	beq.n	8009960 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6852      	ldr	r2, [r2, #4]
 8009958:	b2d2      	uxtb	r2, r2
 800995a:	4611      	mov	r1, r2
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	4798      	blx	r3
  }

  return USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800996a:	b480      	push	{r7}
 800996c:	b087      	sub	sp, #28
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	3301      	adds	r3, #1
 8009980:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009988:	8a3b      	ldrh	r3, [r7, #16]
 800998a:	021b      	lsls	r3, r3, #8
 800998c:	b21a      	sxth	r2, r3
 800998e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009992:	4313      	orrs	r3, r2
 8009994:	b21b      	sxth	r3, r3
 8009996:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009998:	89fb      	ldrh	r3, [r7, #14]
}
 800999a:	4618      	mov	r0, r3
 800999c:	371c      	adds	r7, #28
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
	...

080099a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099be:	2b20      	cmp	r3, #32
 80099c0:	d004      	beq.n	80099cc <USBD_StdDevReq+0x24>
 80099c2:	2b40      	cmp	r3, #64	; 0x40
 80099c4:	d002      	beq.n	80099cc <USBD_StdDevReq+0x24>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <USBD_StdDevReq+0x38>
 80099ca:	e050      	b.n	8009a6e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	4798      	blx	r3
 80099da:	4603      	mov	r3, r0
 80099dc:	73fb      	strb	r3, [r7, #15]
    break;
 80099de:	e04b      	b.n	8009a78 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	785b      	ldrb	r3, [r3, #1]
 80099e4:	2b09      	cmp	r3, #9
 80099e6:	d83c      	bhi.n	8009a62 <USBD_StdDevReq+0xba>
 80099e8:	a201      	add	r2, pc, #4	; (adr r2, 80099f0 <USBD_StdDevReq+0x48>)
 80099ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ee:	bf00      	nop
 80099f0:	08009a45 	.word	0x08009a45
 80099f4:	08009a59 	.word	0x08009a59
 80099f8:	08009a63 	.word	0x08009a63
 80099fc:	08009a4f 	.word	0x08009a4f
 8009a00:	08009a63 	.word	0x08009a63
 8009a04:	08009a23 	.word	0x08009a23
 8009a08:	08009a19 	.word	0x08009a19
 8009a0c:	08009a63 	.word	0x08009a63
 8009a10:	08009a3b 	.word	0x08009a3b
 8009a14:	08009a2d 	.word	0x08009a2d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f9ce 	bl	8009dbc <USBD_GetDescriptor>
      break;
 8009a20:	e024      	b.n	8009a6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fb33 	bl	800a090 <USBD_SetAddress>
      break;
 8009a2a:	e01f      	b.n	8009a6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fb70 	bl	800a114 <USBD_SetConfig>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]
      break;
 8009a38:	e018      	b.n	8009a6c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fc0d 	bl	800a25c <USBD_GetConfig>
      break;
 8009a42:	e013      	b.n	8009a6c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fc3c 	bl	800a2c4 <USBD_GetStatus>
      break;
 8009a4c:	e00e      	b.n	8009a6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fc6a 	bl	800a32a <USBD_SetFeature>
      break;
 8009a56:	e009      	b.n	8009a6c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fc79 	bl	800a352 <USBD_ClrFeature>
      break;
 8009a60:	e004      	b.n	8009a6c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fccf 	bl	800a408 <USBD_CtlError>
      break;
 8009a6a:	bf00      	nop
    }
    break;
 8009a6c:	e004      	b.n	8009a78 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fcc9 	bl	800a408 <USBD_CtlError>
    break;
 8009a76:	bf00      	nop
  }

  return ret;
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop

08009a84 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d003      	beq.n	8009aa6 <USBD_StdItfReq+0x22>
 8009a9e:	2b40      	cmp	r3, #64	; 0x40
 8009aa0:	d001      	beq.n	8009aa6 <USBD_StdItfReq+0x22>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d12a      	bne.n	8009afc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aac:	3b01      	subs	r3, #1
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d81d      	bhi.n	8009aee <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	889b      	ldrh	r3, [r3, #4]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d813      	bhi.n	8009ae4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	88db      	ldrh	r3, [r3, #6]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d110      	bne.n	8009af8 <USBD_StdItfReq+0x74>
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10d      	bne.n	8009af8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fd5e 	bl	800a59e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009ae2:	e009      	b.n	8009af8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fc8e 	bl	800a408 <USBD_CtlError>
      break;
 8009aec:	e004      	b.n	8009af8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fc89 	bl	800a408 <USBD_CtlError>
      break;
 8009af6:	e000      	b.n	8009afa <USBD_StdItfReq+0x76>
      break;
 8009af8:	bf00      	nop
    }
    break;
 8009afa:	e004      	b.n	8009b06 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fc82 	bl	800a408 <USBD_CtlError>
    break;
 8009b04:	bf00      	nop
  }

  return ret;
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	889b      	ldrh	r3, [r3, #4]
 8009b22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b2c:	2b20      	cmp	r3, #32
 8009b2e:	d004      	beq.n	8009b3a <USBD_StdEPReq+0x2a>
 8009b30:	2b40      	cmp	r3, #64	; 0x40
 8009b32:	d002      	beq.n	8009b3a <USBD_StdEPReq+0x2a>
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00a      	beq.n	8009b4e <USBD_StdEPReq+0x3e>
 8009b38:	e135      	b.n	8009da6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	4798      	blx	r3
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4c:	e130      	b.n	8009db0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	785b      	ldrb	r3, [r3, #1]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d03e      	beq.n	8009bd4 <USBD_StdEPReq+0xc4>
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d002      	beq.n	8009b60 <USBD_StdEPReq+0x50>
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d077      	beq.n	8009c4e <USBD_StdEPReq+0x13e>
 8009b5e:	e11c      	b.n	8009d9a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d002      	beq.n	8009b70 <USBD_StdEPReq+0x60>
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d015      	beq.n	8009b9a <USBD_StdEPReq+0x8a>
 8009b6e:	e02b      	b.n	8009bc8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00c      	beq.n	8009b90 <USBD_StdEPReq+0x80>
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b80      	cmp	r3, #128	; 0x80
 8009b7a:	d009      	beq.n	8009b90 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f001 f94f 	bl	800ae24 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b86:	2180      	movs	r1, #128	; 0x80
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 f94b 	bl	800ae24 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009b8e:	e020      	b.n	8009bd2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fc38 	bl	800a408 <USBD_CtlError>
        break;
 8009b98:	e01b      	b.n	8009bd2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	885b      	ldrh	r3, [r3, #2]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10e      	bne.n	8009bc0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00b      	beq.n	8009bc0 <USBD_StdEPReq+0xb0>
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	2b80      	cmp	r3, #128	; 0x80
 8009bac:	d008      	beq.n	8009bc0 <USBD_StdEPReq+0xb0>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	88db      	ldrh	r3, [r3, #6]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d104      	bne.n	8009bc0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 f932 	bl	800ae24 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fcec 	bl	800a59e <USBD_CtlSendStatus>

        break;
 8009bc6:	e004      	b.n	8009bd2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fc1c 	bl	800a408 <USBD_CtlError>
        break;
 8009bd0:	bf00      	nop
      }
      break;
 8009bd2:	e0e7      	b.n	8009da4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d002      	beq.n	8009be4 <USBD_StdEPReq+0xd4>
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d015      	beq.n	8009c0e <USBD_StdEPReq+0xfe>
 8009be2:	e02d      	b.n	8009c40 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00c      	beq.n	8009c04 <USBD_StdEPReq+0xf4>
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	2b80      	cmp	r3, #128	; 0x80
 8009bee:	d009      	beq.n	8009c04 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f001 f915 	bl	800ae24 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bfa:	2180      	movs	r1, #128	; 0x80
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 f911 	bl	800ae24 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009c02:	e023      	b.n	8009c4c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fbfe 	bl	800a408 <USBD_CtlError>
        break;
 8009c0c:	e01e      	b.n	8009c4c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	885b      	ldrh	r3, [r3, #2]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d119      	bne.n	8009c4a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009c16:	7bbb      	ldrb	r3, [r7, #14]
 8009c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d004      	beq.n	8009c2a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 f91c 	bl	800ae62 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fcb7 	bl	800a59e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	4798      	blx	r3
        }
        break;
 8009c3e:	e004      	b.n	8009c4a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fbe0 	bl	800a408 <USBD_CtlError>
        break;
 8009c48:	e000      	b.n	8009c4c <USBD_StdEPReq+0x13c>
        break;
 8009c4a:	bf00      	nop
      }
      break;
 8009c4c:	e0aa      	b.n	8009da4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d002      	beq.n	8009c5e <USBD_StdEPReq+0x14e>
 8009c58:	2b03      	cmp	r3, #3
 8009c5a:	d032      	beq.n	8009cc2 <USBD_StdEPReq+0x1b2>
 8009c5c:	e097      	b.n	8009d8e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c5e:	7bbb      	ldrb	r3, [r7, #14]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d007      	beq.n	8009c74 <USBD_StdEPReq+0x164>
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	2b80      	cmp	r3, #128	; 0x80
 8009c68:	d004      	beq.n	8009c74 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fbcb 	bl	800a408 <USBD_CtlError>
          break;
 8009c72:	e091      	b.n	8009d98 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	da0b      	bge.n	8009c94 <USBD_StdEPReq+0x184>
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
 8009c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	3310      	adds	r3, #16
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	4413      	add	r3, r2
 8009c90:	3304      	adds	r3, #4
 8009c92:	e00b      	b.n	8009cac <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	3304      	adds	r3, #4
 8009cac:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fc15 	bl	800a4ea <USBD_CtlSendData>
        break;
 8009cc0:	e06a      	b.n	8009d98 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009cc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	da11      	bge.n	8009cee <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	f003 020f 	and.w	r2, r3, #15
 8009cd0:	6879      	ldr	r1, [r7, #4]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	440b      	add	r3, r1
 8009cdc:	3324      	adds	r3, #36	; 0x24
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d117      	bne.n	8009d14 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fb8e 	bl	800a408 <USBD_CtlError>
            break;
 8009cec:	e054      	b.n	8009d98 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	f003 020f 	and.w	r2, r3, #15
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	440b      	add	r3, r1
 8009d00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d104      	bne.n	8009d14 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fb7b 	bl	800a408 <USBD_CtlError>
            break;
 8009d12:	e041      	b.n	8009d98 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	da0b      	bge.n	8009d34 <USBD_StdEPReq+0x224>
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d22:	4613      	mov	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	3310      	adds	r3, #16
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	4413      	add	r3, r2
 8009d30:	3304      	adds	r3, #4
 8009d32:	e00b      	b.n	8009d4c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	4413      	add	r3, r2
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <USBD_StdEPReq+0x24a>
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
 8009d56:	2b80      	cmp	r3, #128	; 0x80
 8009d58:	d103      	bne.n	8009d62 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	e00e      	b.n	8009d80 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f001 f89a 	bl	800aea0 <USBD_LL_IsStallEP>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2201      	movs	r2, #1
 8009d76:	601a      	str	r2, [r3, #0]
 8009d78:	e002      	b.n	8009d80 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2202      	movs	r2, #2
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fbaf 	bl	800a4ea <USBD_CtlSendData>
          break;
 8009d8c:	e004      	b.n	8009d98 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fb39 	bl	800a408 <USBD_CtlError>
        break;
 8009d96:	bf00      	nop
      }
      break;
 8009d98:	e004      	b.n	8009da4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fb33 	bl	800a408 <USBD_CtlError>
      break;
 8009da2:	bf00      	nop
    }
    break;
 8009da4:	e004      	b.n	8009db0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fb2d 	bl	800a408 <USBD_CtlError>
    break;
 8009dae:	bf00      	nop
  }

  return ret;
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	885b      	ldrh	r3, [r3, #2]
 8009dd6:	0a1b      	lsrs	r3, r3, #8
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	2b06      	cmp	r3, #6
 8009dde:	f200 8128 	bhi.w	800a032 <USBD_GetDescriptor+0x276>
 8009de2:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <USBD_GetDescriptor+0x2c>)
 8009de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de8:	08009e05 	.word	0x08009e05
 8009dec:	08009e1d 	.word	0x08009e1d
 8009df0:	08009e5d 	.word	0x08009e5d
 8009df4:	0800a033 	.word	0x0800a033
 8009df8:	0800a033 	.word	0x0800a033
 8009dfc:	08009fd3 	.word	0x08009fd3
 8009e00:	08009fff 	.word	0x08009fff
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	7c12      	ldrb	r2, [r2, #16]
 8009e10:	f107 0108 	add.w	r1, r7, #8
 8009e14:	4610      	mov	r0, r2
 8009e16:	4798      	blx	r3
 8009e18:	60f8      	str	r0, [r7, #12]
    break;
 8009e1a:	e112      	b.n	800a042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	7c1b      	ldrb	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10d      	bne.n	8009e40 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2c:	f107 0208 	add.w	r2, r7, #8
 8009e30:	4610      	mov	r0, r2
 8009e32:	4798      	blx	r3
 8009e34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009e3e:	e100      	b.n	800a042 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	f107 0208 	add.w	r2, r7, #8
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	4798      	blx	r3
 8009e50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3301      	adds	r3, #1
 8009e56:	2202      	movs	r2, #2
 8009e58:	701a      	strb	r2, [r3, #0]
    break;
 8009e5a:	e0f2      	b.n	800a042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	885b      	ldrh	r3, [r3, #2]
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	f200 80ac 	bhi.w	8009fc0 <USBD_GetDescriptor+0x204>
 8009e68:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <USBD_GetDescriptor+0xb4>)
 8009e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6e:	bf00      	nop
 8009e70:	08009e89 	.word	0x08009e89
 8009e74:	08009ebd 	.word	0x08009ebd
 8009e78:	08009ef1 	.word	0x08009ef1
 8009e7c:	08009f25 	.word	0x08009f25
 8009e80:	08009f59 	.word	0x08009f59
 8009e84:	08009f8d 	.word	0x08009f8d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	7c12      	ldrb	r2, [r2, #16]
 8009ea0:	f107 0108 	add.w	r1, r7, #8
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4798      	blx	r3
 8009ea8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009eaa:	e091      	b.n	8009fd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 faaa 	bl	800a408 <USBD_CtlError>
        err++;
 8009eb4:	7afb      	ldrb	r3, [r7, #11]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	72fb      	strb	r3, [r7, #11]
      break;
 8009eba:	e089      	b.n	8009fd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00b      	beq.n	8009ee0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	7c12      	ldrb	r2, [r2, #16]
 8009ed4:	f107 0108 	add.w	r1, r7, #8
 8009ed8:	4610      	mov	r0, r2
 8009eda:	4798      	blx	r3
 8009edc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ede:	e077      	b.n	8009fd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa90 	bl	800a408 <USBD_CtlError>
        err++;
 8009ee8:	7afb      	ldrb	r3, [r7, #11]
 8009eea:	3301      	adds	r3, #1
 8009eec:	72fb      	strb	r3, [r7, #11]
      break;
 8009eee:	e06f      	b.n	8009fd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	7c12      	ldrb	r2, [r2, #16]
 8009f08:	f107 0108 	add.w	r1, r7, #8
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4798      	blx	r3
 8009f10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f12:	e05d      	b.n	8009fd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fa76 	bl	800a408 <USBD_CtlError>
        err++;
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	72fb      	strb	r3, [r7, #11]
      break;
 8009f22:	e055      	b.n	8009fd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00b      	beq.n	8009f48 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	7c12      	ldrb	r2, [r2, #16]
 8009f3c:	f107 0108 	add.w	r1, r7, #8
 8009f40:	4610      	mov	r0, r2
 8009f42:	4798      	blx	r3
 8009f44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f46:	e043      	b.n	8009fd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fa5c 	bl	800a408 <USBD_CtlError>
        err++;
 8009f50:	7afb      	ldrb	r3, [r7, #11]
 8009f52:	3301      	adds	r3, #1
 8009f54:	72fb      	strb	r3, [r7, #11]
      break;
 8009f56:	e03b      	b.n	8009fd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00b      	beq.n	8009f7c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	7c12      	ldrb	r2, [r2, #16]
 8009f70:	f107 0108 	add.w	r1, r7, #8
 8009f74:	4610      	mov	r0, r2
 8009f76:	4798      	blx	r3
 8009f78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f7a:	e029      	b.n	8009fd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fa42 	bl	800a408 <USBD_CtlError>
        err++;
 8009f84:	7afb      	ldrb	r3, [r7, #11]
 8009f86:	3301      	adds	r3, #1
 8009f88:	72fb      	strb	r3, [r7, #11]
      break;
 8009f8a:	e021      	b.n	8009fd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00b      	beq.n	8009fb0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	7c12      	ldrb	r2, [r2, #16]
 8009fa4:	f107 0108 	add.w	r1, r7, #8
 8009fa8:	4610      	mov	r0, r2
 8009faa:	4798      	blx	r3
 8009fac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fae:	e00f      	b.n	8009fd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fa28 	bl	800a408 <USBD_CtlError>
        err++;
 8009fb8:	7afb      	ldrb	r3, [r7, #11]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	72fb      	strb	r3, [r7, #11]
      break;
 8009fbe:	e007      	b.n	8009fd0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fa20 	bl	800a408 <USBD_CtlError>
      err++;
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009fce:	bf00      	nop
    }
    break;
 8009fd0:	e037      	b.n	800a042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	7c1b      	ldrb	r3, [r3, #16]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	f107 0208 	add.w	r2, r7, #8
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	4798      	blx	r3
 8009fea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009fec:	e029      	b.n	800a042 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fa09 	bl	800a408 <USBD_CtlError>
      err++;
 8009ff6:	7afb      	ldrb	r3, [r7, #11]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	72fb      	strb	r3, [r7, #11]
    break;
 8009ffc:	e021      	b.n	800a042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	7c1b      	ldrb	r3, [r3, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10d      	bne.n	800a022 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00e:	f107 0208 	add.w	r2, r7, #8
 800a012:	4610      	mov	r0, r2
 800a014:	4798      	blx	r3
 800a016:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3301      	adds	r3, #1
 800a01c:	2207      	movs	r2, #7
 800a01e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a020:	e00f      	b.n	800a042 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f9ef 	bl	800a408 <USBD_CtlError>
      err++;
 800a02a:	7afb      	ldrb	r3, [r7, #11]
 800a02c:	3301      	adds	r3, #1
 800a02e:	72fb      	strb	r3, [r7, #11]
    break;
 800a030:	e007      	b.n	800a042 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f9e7 	bl	800a408 <USBD_CtlError>
    err++;
 800a03a:	7afb      	ldrb	r3, [r7, #11]
 800a03c:	3301      	adds	r3, #1
 800a03e:	72fb      	strb	r3, [r7, #11]
    break;
 800a040:	bf00      	nop
  }

  if (err != 0U)
 800a042:	7afb      	ldrb	r3, [r7, #11]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d11e      	bne.n	800a086 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	88db      	ldrh	r3, [r3, #6]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d016      	beq.n	800a07e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800a050:	893b      	ldrh	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00e      	beq.n	800a074 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	88da      	ldrh	r2, [r3, #6]
 800a05a:	893b      	ldrh	r3, [r7, #8]
 800a05c:	4293      	cmp	r3, r2
 800a05e:	bf28      	it	cs
 800a060:	4613      	movcs	r3, r2
 800a062:	b29b      	uxth	r3, r3
 800a064:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a066:	893b      	ldrh	r3, [r7, #8]
 800a068:	461a      	mov	r2, r3
 800a06a:	68f9      	ldr	r1, [r7, #12]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fa3c 	bl	800a4ea <USBD_CtlSendData>
 800a072:	e009      	b.n	800a088 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f9c6 	bl	800a408 <USBD_CtlError>
 800a07c:	e004      	b.n	800a088 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fa8d 	bl	800a59e <USBD_CtlSendStatus>
 800a084:	e000      	b.n	800a088 <USBD_GetDescriptor+0x2cc>
    return;
 800a086:	bf00      	nop
    }
  }
}
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop

0800a090 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	889b      	ldrh	r3, [r3, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d130      	bne.n	800a104 <USBD_SetAddress+0x74>
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	88db      	ldrh	r3, [r3, #6]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d12c      	bne.n	800a104 <USBD_SetAddress+0x74>
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	885b      	ldrh	r3, [r3, #2]
 800a0ae:	2b7f      	cmp	r3, #127	; 0x7f
 800a0b0:	d828      	bhi.n	800a104 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	885b      	ldrh	r3, [r3, #2]
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d104      	bne.n	800a0d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f99c 	bl	800a408 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d0:	e01c      	b.n	800a10c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	7bfa      	ldrb	r2, [r7, #15]
 800a0d6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	4619      	mov	r1, r3
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 ff0a 	bl	800aef8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fa5a 	bl	800a59e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f8:	e008      	b.n	800a10c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a102:	e003      	b.n	800a10c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f97e 	bl	800a408 <USBD_CtlError>
  }
}
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	885b      	ldrh	r3, [r3, #2]
 800a126:	b2da      	uxtb	r2, r3
 800a128:	4b4b      	ldr	r3, [pc, #300]	; (800a258 <USBD_SetConfig+0x144>)
 800a12a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a12c:	4b4a      	ldr	r3, [pc, #296]	; (800a258 <USBD_SetConfig+0x144>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d905      	bls.n	800a140 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f966 	bl	800a408 <USBD_CtlError>
    return USBD_FAIL;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e087      	b.n	800a250 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a146:	2b02      	cmp	r3, #2
 800a148:	d002      	beq.n	800a150 <USBD_SetConfig+0x3c>
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d025      	beq.n	800a19a <USBD_SetConfig+0x86>
 800a14e:	e071      	b.n	800a234 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a150:	4b41      	ldr	r3, [pc, #260]	; (800a258 <USBD_SetConfig+0x144>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d01c      	beq.n	800a192 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a158:	4b3f      	ldr	r3, [pc, #252]	; (800a258 <USBD_SetConfig+0x144>)
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a162:	4b3d      	ldr	r3, [pc, #244]	; (800a258 <USBD_SetConfig+0x144>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7ff f9a7 	bl	80094bc <USBD_SetClassConfig>
 800a16e:	4603      	mov	r3, r0
 800a170:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f944 	bl	800a408 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a180:	e065      	b.n	800a24e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fa0b 	bl	800a59e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2203      	movs	r2, #3
 800a18c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a190:	e05d      	b.n	800a24e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fa03 	bl	800a59e <USBD_CtlSendStatus>
    break;
 800a198:	e059      	b.n	800a24e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a19a:	4b2f      	ldr	r3, [pc, #188]	; (800a258 <USBD_SetConfig+0x144>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d112      	bne.n	800a1c8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a1aa:	4b2b      	ldr	r3, [pc, #172]	; (800a258 <USBD_SetConfig+0x144>)
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1b4:	4b28      	ldr	r3, [pc, #160]	; (800a258 <USBD_SetConfig+0x144>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff f99a 	bl	80094f4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f9ec 	bl	800a59e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a1c6:	e042      	b.n	800a24e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a1c8:	4b23      	ldr	r3, [pc, #140]	; (800a258 <USBD_SetConfig+0x144>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d02a      	beq.n	800a22c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff f988 	bl	80094f4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a1e4:	4b1c      	ldr	r3, [pc, #112]	; (800a258 <USBD_SetConfig+0x144>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1ee:	4b1a      	ldr	r3, [pc, #104]	; (800a258 <USBD_SetConfig+0x144>)
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7ff f961 	bl	80094bc <USBD_SetClassConfig>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00f      	beq.n	800a224 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f8fe 	bl	800a408 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	b2db      	uxtb	r3, r3
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff f96d 	bl	80094f4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2202      	movs	r2, #2
 800a21e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a222:	e014      	b.n	800a24e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f9ba 	bl	800a59e <USBD_CtlSendStatus>
    break;
 800a22a:	e010      	b.n	800a24e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f9b6 	bl	800a59e <USBD_CtlSendStatus>
    break;
 800a232:	e00c      	b.n	800a24e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f8e6 	bl	800a408 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a23c:	4b06      	ldr	r3, [pc, #24]	; (800a258 <USBD_SetConfig+0x144>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff f956 	bl	80094f4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a248:	2303      	movs	r3, #3
 800a24a:	73fb      	strb	r3, [r7, #15]
    break;
 800a24c:	bf00      	nop
  }

  return ret;
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	200003e4 	.word	0x200003e4

0800a25c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	88db      	ldrh	r3, [r3, #6]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d004      	beq.n	800a278 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f8c9 	bl	800a408 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a276:	e021      	b.n	800a2bc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27e:	2b01      	cmp	r3, #1
 800a280:	db17      	blt.n	800a2b2 <USBD_GetConfig+0x56>
 800a282:	2b02      	cmp	r3, #2
 800a284:	dd02      	ble.n	800a28c <USBD_GetConfig+0x30>
 800a286:	2b03      	cmp	r3, #3
 800a288:	d00b      	beq.n	800a2a2 <USBD_GetConfig+0x46>
 800a28a:	e012      	b.n	800a2b2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3308      	adds	r3, #8
 800a296:	2201      	movs	r2, #1
 800a298:	4619      	mov	r1, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f925 	bl	800a4ea <USBD_CtlSendData>
      break;
 800a2a0:	e00c      	b.n	800a2bc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f91d 	bl	800a4ea <USBD_CtlSendData>
      break;
 800a2b0:	e004      	b.n	800a2bc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f8a7 	bl	800a408 <USBD_CtlError>
      break;
 800a2ba:	bf00      	nop
}
 800a2bc:	bf00      	nop
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d81e      	bhi.n	800a318 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	88db      	ldrh	r3, [r3, #6]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d004      	beq.n	800a2ec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f88f 	bl	800a408 <USBD_CtlError>
      break;
 800a2ea:	e01a      	b.n	800a322 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	f043 0202 	orr.w	r2, r3, #2
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	330c      	adds	r3, #12
 800a30c:	2202      	movs	r2, #2
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f8ea 	bl	800a4ea <USBD_CtlSendData>
    break;
 800a316:	e004      	b.n	800a322 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f874 	bl	800a408 <USBD_CtlError>
    break;
 800a320:	bf00      	nop
  }
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b082      	sub	sp, #8
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	885b      	ldrh	r3, [r3, #2]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d106      	bne.n	800a34a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f92a 	bl	800a59e <USBD_CtlSendStatus>
  }
}
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b082      	sub	sp, #8
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a362:	3b01      	subs	r3, #1
 800a364:	2b02      	cmp	r3, #2
 800a366:	d80b      	bhi.n	800a380 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	885b      	ldrh	r3, [r3, #2]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d10c      	bne.n	800a38a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f910 	bl	800a59e <USBD_CtlSendStatus>
      }
      break;
 800a37e:	e004      	b.n	800a38a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f840 	bl	800a408 <USBD_CtlError>
      break;
 800a388:	e000      	b.n	800a38c <USBD_ClrFeature+0x3a>
      break;
 800a38a:	bf00      	nop
  }
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	781a      	ldrb	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	781a      	ldrb	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff fad3 	bl	800996a <SWAPBYTE>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f7ff fac6 	bl	800996a <SWAPBYTE>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f7ff fab9 	bl	800996a <SWAPBYTE>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	80da      	strh	r2, [r3, #6]
}
 800a400:	bf00      	nop
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a412:	2180      	movs	r1, #128	; 0x80
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fd05 	bl	800ae24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a41a:	2100      	movs	r1, #0
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fd01 	bl	800ae24 <USBD_LL_StallEP>
}
 800a422:	bf00      	nop
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b086      	sub	sp, #24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	60f8      	str	r0, [r7, #12]
 800a432:	60b9      	str	r1, [r7, #8]
 800a434:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d036      	beq.n	800a4ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a444:	6938      	ldr	r0, [r7, #16]
 800a446:	f000 f836 	bl	800a4b6 <USBD_GetLen>
 800a44a:	4603      	mov	r3, r0
 800a44c:	3301      	adds	r3, #1
 800a44e:	b29b      	uxth	r3, r3
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	b29a      	uxth	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a458:	7dfb      	ldrb	r3, [r7, #23]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	4413      	add	r3, r2
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	7812      	ldrb	r2, [r2, #0]
 800a462:	701a      	strb	r2, [r3, #0]
  idx++;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	3301      	adds	r3, #1
 800a468:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	4413      	add	r3, r2
 800a470:	2203      	movs	r2, #3
 800a472:	701a      	strb	r2, [r3, #0]
  idx++;
 800a474:	7dfb      	ldrb	r3, [r7, #23]
 800a476:	3301      	adds	r3, #1
 800a478:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a47a:	e013      	b.n	800a4a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	4413      	add	r3, r2
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	7812      	ldrb	r2, [r2, #0]
 800a486:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	3301      	adds	r3, #1
 800a48c:	613b      	str	r3, [r7, #16]
    idx++;
 800a48e:	7dfb      	ldrb	r3, [r7, #23]
 800a490:	3301      	adds	r3, #1
 800a492:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	4413      	add	r3, r2
 800a49a:	2200      	movs	r2, #0
 800a49c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e7      	bne.n	800a47c <USBD_GetString+0x52>
 800a4ac:	e000      	b.n	800a4b0 <USBD_GetString+0x86>
    return;
 800a4ae:	bf00      	nop
  }
}
 800a4b0:	3718      	adds	r7, #24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a4c6:	e005      	b.n	800a4d4 <USBD_GetLen+0x1e>
  {
    len++;
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1f5      	bne.n	800a4c8 <USBD_GetLen+0x12>
  }

  return len;
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	2100      	movs	r1, #0
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f000 fd10 	bl	800af36 <USBD_LL_Transmit>

  return USBD_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	2100      	movs	r1, #0
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f000 fcff 	bl	800af36 <USBD_LL_Transmit>

  return USBD_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	60f8      	str	r0, [r7, #12]
 800a54a:	60b9      	str	r1, [r7, #8]
 800a54c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2203      	movs	r2, #3
 800a552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	2100      	movs	r1, #0
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 fd03 	bl	800af78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	2100      	movs	r1, #0
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 fcf2 	bl	800af78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2204      	movs	r2, #4
 800a5aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fcbe 	bl	800af36 <USBD_LL_Transmit>

  return USBD_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2205      	movs	r2, #5
 800a5d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2100      	movs	r1, #0
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fccc 	bl	800af78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	4912      	ldr	r1, [pc, #72]	; (800a63c <MX_USB_DEVICE_Init+0x50>)
 800a5f4:	4812      	ldr	r0, [pc, #72]	; (800a640 <MX_USB_DEVICE_Init+0x54>)
 800a5f6:	f7fe fef3 	bl	80093e0 <USBD_Init>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a600:	f7f7 fcd8 	bl	8001fb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a604:	490f      	ldr	r1, [pc, #60]	; (800a644 <MX_USB_DEVICE_Init+0x58>)
 800a606:	480e      	ldr	r0, [pc, #56]	; (800a640 <MX_USB_DEVICE_Init+0x54>)
 800a608:	f7fe ff20 	bl	800944c <USBD_RegisterClass>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a612:	f7f7 fccf 	bl	8001fb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a616:	490c      	ldr	r1, [pc, #48]	; (800a648 <MX_USB_DEVICE_Init+0x5c>)
 800a618:	4809      	ldr	r0, [pc, #36]	; (800a640 <MX_USB_DEVICE_Init+0x54>)
 800a61a:	f7fe fe45 	bl	80092a8 <USBD_CDC_RegisterInterface>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a624:	f7f7 fcc6 	bl	8001fb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a628:	4805      	ldr	r0, [pc, #20]	; (800a640 <MX_USB_DEVICE_Init+0x54>)
 800a62a:	f7fe ff30 	bl	800948e <USBD_Start>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a634:	f7f7 fcbe 	bl	8001fb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a638:	bf00      	nop
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20000198 	.word	0x20000198
 800a640:	200009d8 	.word	0x200009d8
 800a644:	20000078 	.word	0x20000078
 800a648:	2000017c 	.word	0x2000017c

0800a64c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a650:	2200      	movs	r2, #0
 800a652:	4905      	ldr	r1, [pc, #20]	; (800a668 <CDC_Init_FS+0x1c>)
 800a654:	4805      	ldr	r0, [pc, #20]	; (800a66c <CDC_Init_FS+0x20>)
 800a656:	f7fe fe3c 	bl	80092d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a65a:	4905      	ldr	r1, [pc, #20]	; (800a670 <CDC_Init_FS+0x24>)
 800a65c:	4803      	ldr	r0, [pc, #12]	; (800a66c <CDC_Init_FS+0x20>)
 800a65e:	f7fe fe51 	bl	8009304 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a662:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a664:	4618      	mov	r0, r3
 800a666:	bd80      	pop	{r7, pc}
 800a668:	20000d0c 	.word	0x20000d0c
 800a66c:	200009d8 	.word	0x200009d8
 800a670:	20000ca8 	.word	0x20000ca8

0800a674 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a674:	b480      	push	{r7}
 800a676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a678:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	4603      	mov	r3, r0
 800a68c:	6039      	str	r1, [r7, #0]
 800a68e:	71fb      	strb	r3, [r7, #7]
 800a690:	4613      	mov	r3, r2
 800a692:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint8_t lineCoding[7] = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 }; // 115200bps, 1stop, no parity, 8bit

  switch(cmd)
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	2b23      	cmp	r3, #35	; 0x23
 800a698:	d85c      	bhi.n	800a754 <CDC_Control_FS+0xd0>
 800a69a:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <CDC_Control_FS+0x1c>)
 800a69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a0:	0800a755 	.word	0x0800a755
 800a6a4:	0800a755 	.word	0x0800a755
 800a6a8:	0800a755 	.word	0x0800a755
 800a6ac:	0800a755 	.word	0x0800a755
 800a6b0:	0800a755 	.word	0x0800a755
 800a6b4:	0800a755 	.word	0x0800a755
 800a6b8:	0800a755 	.word	0x0800a755
 800a6bc:	0800a755 	.word	0x0800a755
 800a6c0:	0800a755 	.word	0x0800a755
 800a6c4:	0800a755 	.word	0x0800a755
 800a6c8:	0800a755 	.word	0x0800a755
 800a6cc:	0800a755 	.word	0x0800a755
 800a6d0:	0800a755 	.word	0x0800a755
 800a6d4:	0800a755 	.word	0x0800a755
 800a6d8:	0800a755 	.word	0x0800a755
 800a6dc:	0800a755 	.word	0x0800a755
 800a6e0:	0800a755 	.word	0x0800a755
 800a6e4:	0800a755 	.word	0x0800a755
 800a6e8:	0800a755 	.word	0x0800a755
 800a6ec:	0800a755 	.word	0x0800a755
 800a6f0:	0800a755 	.word	0x0800a755
 800a6f4:	0800a755 	.word	0x0800a755
 800a6f8:	0800a755 	.word	0x0800a755
 800a6fc:	0800a755 	.word	0x0800a755
 800a700:	0800a755 	.word	0x0800a755
 800a704:	0800a755 	.word	0x0800a755
 800a708:	0800a755 	.word	0x0800a755
 800a70c:	0800a755 	.word	0x0800a755
 800a710:	0800a755 	.word	0x0800a755
 800a714:	0800a755 	.word	0x0800a755
 800a718:	0800a755 	.word	0x0800a755
 800a71c:	0800a755 	.word	0x0800a755
 800a720:	0800a731 	.word	0x0800a731
 800a724:	0800a743 	.word	0x0800a743
 800a728:	0800a755 	.word	0x0800a755
 800a72c:	0800a755 	.word	0x0800a755
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800a730:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <CDC_Control_FS+0xe0>)
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	6810      	ldr	r0, [r2, #0]
 800a736:	6018      	str	r0, [r3, #0]
 800a738:	8891      	ldrh	r1, [r2, #4]
 800a73a:	7992      	ldrb	r2, [r2, #6]
 800a73c:	8099      	strh	r1, [r3, #4]
 800a73e:	719a      	strb	r2, [r3, #6]
    break;
 800a740:	e009      	b.n	800a756 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	4a07      	ldr	r2, [pc, #28]	; (800a764 <CDC_Control_FS+0xe0>)
 800a746:	6810      	ldr	r0, [r2, #0]
 800a748:	6018      	str	r0, [r3, #0]
 800a74a:	8891      	ldrh	r1, [r2, #4]
 800a74c:	7992      	ldrb	r2, [r2, #6]
 800a74e:	8099      	strh	r1, [r3, #4]
 800a750:	719a      	strb	r2, [r3, #6]
    break;
 800a752:	e000      	b.n	800a756 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a754:	bf00      	nop
  }

  return (USBD_OK);
 800a756:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a758:	4618      	mov	r0, r3
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	20000190 	.word	0x20000190

0800a768 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a772:	6879      	ldr	r1, [r7, #4]
 800a774:	4811      	ldr	r0, [pc, #68]	; (800a7bc <CDC_Receive_FS+0x54>)
 800a776:	f7fe fdc5 	bl	8009304 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a77a:	4810      	ldr	r0, [pc, #64]	; (800a7bc <CDC_Receive_FS+0x54>)
 800a77c:	f7fe fe06 	bl	800938c <USBD_CDC_ReceivePacket>
	  extern uint8_t ReceivedData[100]; // Tablica przechowujaca odebrane dane
	  extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

	  // Wyczyszczenie tablicy odebranych danych
	  uint8_t iter;
	  for(iter = 0; iter<100; ++iter){
 800a780:	2300      	movs	r3, #0
 800a782:	73fb      	strb	r3, [r7, #15]
 800a784:	e006      	b.n	800a794 <CDC_Receive_FS+0x2c>
		  ReceivedData[iter] = 0;
 800a786:	7bfb      	ldrb	r3, [r7, #15]
 800a788:	4a0d      	ldr	r2, [pc, #52]	; (800a7c0 <CDC_Receive_FS+0x58>)
 800a78a:	2100      	movs	r1, #0
 800a78c:	54d1      	strb	r1, [r2, r3]
	  for(iter = 0; iter<100; ++iter){
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
 800a790:	3301      	adds	r3, #1
 800a792:	73fb      	strb	r3, [r7, #15]
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	2b63      	cmp	r3, #99	; 0x63
 800a798:	d9f5      	bls.n	800a786 <CDC_Receive_FS+0x1e>
	  }

	  strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	4806      	ldr	r0, [pc, #24]	; (800a7c0 <CDC_Receive_FS+0x58>)
 800a7a6:	f001 fc90 	bl	800c0ca <strlcpy>
	  ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 800a7aa:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <CDC_Receive_FS+0x5c>)
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	701a      	strb	r2, [r3, #0]

	  return (USBD_OK);
 800a7b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	200009d8 	.word	0x200009d8
 800a7c0:	200007c8 	.word	0x200007c8
 800a7c4:	200003dc 	.word	0x200003dc

0800a7c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7d8:	4b0d      	ldr	r3, [pc, #52]	; (800a810 <CDC_Transmit_FS+0x48>)
 800a7da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e00b      	b.n	800a806 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a7ee:	887b      	ldrh	r3, [r7, #2]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	4806      	ldr	r0, [pc, #24]	; (800a810 <CDC_Transmit_FS+0x48>)
 800a7f6:	f7fe fd6c 	bl	80092d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7fa:	4805      	ldr	r0, [pc, #20]	; (800a810 <CDC_Transmit_FS+0x48>)
 800a7fc:	f7fe fd96 	bl	800932c <USBD_CDC_TransmitPacket>
 800a800:	4603      	mov	r3, r0
 800a802:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a804:	7bfb      	ldrb	r3, [r7, #15]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	200009d8 	.word	0x200009d8

0800a814 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	4613      	mov	r3, r2
 800a820:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a826:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
	...

0800a838 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	4603      	mov	r3, r0
 800a840:	6039      	str	r1, [r7, #0]
 800a842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2212      	movs	r2, #18
 800a848:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a84a:	4b03      	ldr	r3, [pc, #12]	; (800a858 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	200001b4 	.word	0x200001b4

0800a85c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	4603      	mov	r3, r0
 800a864:	6039      	str	r1, [r7, #0]
 800a866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	2204      	movs	r2, #4
 800a86c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a86e:	4b03      	ldr	r3, [pc, #12]	; (800a87c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a870:	4618      	mov	r0, r3
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	200001c8 	.word	0x200001c8

0800a880 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	6039      	str	r1, [r7, #0]
 800a88a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a88c:	79fb      	ldrb	r3, [r7, #7]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d105      	bne.n	800a89e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	4907      	ldr	r1, [pc, #28]	; (800a8b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a896:	4808      	ldr	r0, [pc, #32]	; (800a8b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a898:	f7ff fdc7 	bl	800a42a <USBD_GetString>
 800a89c:	e004      	b.n	800a8a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	4904      	ldr	r1, [pc, #16]	; (800a8b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8a2:	4805      	ldr	r0, [pc, #20]	; (800a8b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8a4:	f7ff fdc1 	bl	800a42a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a8:	4b02      	ldr	r3, [pc, #8]	; (800a8b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	20000d70 	.word	0x20000d70
 800a8b8:	08012ac8 	.word	0x08012ac8

0800a8bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	6039      	str	r1, [r7, #0]
 800a8c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	4904      	ldr	r1, [pc, #16]	; (800a8dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a8cc:	4804      	ldr	r0, [pc, #16]	; (800a8e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a8ce:	f7ff fdac 	bl	800a42a <USBD_GetString>
  return USBD_StrDesc;
 800a8d2:	4b02      	ldr	r3, [pc, #8]	; (800a8dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	20000d70 	.word	0x20000d70
 800a8e0:	08012ae0 	.word	0x08012ae0

0800a8e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	6039      	str	r1, [r7, #0]
 800a8ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	221a      	movs	r2, #26
 800a8f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a8f6:	f000 f843 	bl	800a980 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a8fa:	4b02      	ldr	r3, [pc, #8]	; (800a904 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	200001cc 	.word	0x200001cc

0800a908 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	6039      	str	r1, [r7, #0]
 800a912:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a914:	79fb      	ldrb	r3, [r7, #7]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d105      	bne.n	800a926 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	4907      	ldr	r1, [pc, #28]	; (800a93c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a91e:	4808      	ldr	r0, [pc, #32]	; (800a940 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a920:	f7ff fd83 	bl	800a42a <USBD_GetString>
 800a924:	e004      	b.n	800a930 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a926:	683a      	ldr	r2, [r7, #0]
 800a928:	4904      	ldr	r1, [pc, #16]	; (800a93c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a92a:	4805      	ldr	r0, [pc, #20]	; (800a940 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a92c:	f7ff fd7d 	bl	800a42a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a930:	4b02      	ldr	r3, [pc, #8]	; (800a93c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a932:	4618      	mov	r0, r3
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	20000d70 	.word	0x20000d70
 800a940:	08012af4 	.word	0x08012af4

0800a944 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	6039      	str	r1, [r7, #0]
 800a94e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d105      	bne.n	800a962 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	4907      	ldr	r1, [pc, #28]	; (800a978 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a95a:	4808      	ldr	r0, [pc, #32]	; (800a97c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a95c:	f7ff fd65 	bl	800a42a <USBD_GetString>
 800a960:	e004      	b.n	800a96c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	4904      	ldr	r1, [pc, #16]	; (800a978 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a966:	4805      	ldr	r0, [pc, #20]	; (800a97c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a968:	f7ff fd5f 	bl	800a42a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a96c:	4b02      	ldr	r3, [pc, #8]	; (800a978 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20000d70 	.word	0x20000d70
 800a97c:	08012b00 	.word	0x08012b00

0800a980 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a986:	4b0f      	ldr	r3, [pc, #60]	; (800a9c4 <Get_SerialNum+0x44>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a98c:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <Get_SerialNum+0x48>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a992:	4b0e      	ldr	r3, [pc, #56]	; (800a9cc <Get_SerialNum+0x4c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4413      	add	r3, r2
 800a99e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d009      	beq.n	800a9ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a9a6:	2208      	movs	r2, #8
 800a9a8:	4909      	ldr	r1, [pc, #36]	; (800a9d0 <Get_SerialNum+0x50>)
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f000 f814 	bl	800a9d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a9b0:	2204      	movs	r2, #4
 800a9b2:	4908      	ldr	r1, [pc, #32]	; (800a9d4 <Get_SerialNum+0x54>)
 800a9b4:	68b8      	ldr	r0, [r7, #8]
 800a9b6:	f000 f80f 	bl	800a9d8 <IntToUnicode>
  }
}
 800a9ba:	bf00      	nop
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	1fff7a10 	.word	0x1fff7a10
 800a9c8:	1fff7a14 	.word	0x1fff7a14
 800a9cc:	1fff7a18 	.word	0x1fff7a18
 800a9d0:	200001ce 	.word	0x200001ce
 800a9d4:	200001de 	.word	0x200001de

0800a9d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b087      	sub	sp, #28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	75fb      	strb	r3, [r7, #23]
 800a9ee:	e027      	b.n	800aa40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	0f1b      	lsrs	r3, r3, #28
 800a9f4:	2b09      	cmp	r3, #9
 800a9f6:	d80b      	bhi.n	800aa10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	0f1b      	lsrs	r3, r3, #28
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	7dfb      	ldrb	r3, [r7, #23]
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	4619      	mov	r1, r3
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	440b      	add	r3, r1
 800aa08:	3230      	adds	r2, #48	; 0x30
 800aa0a:	b2d2      	uxtb	r2, r2
 800aa0c:	701a      	strb	r2, [r3, #0]
 800aa0e:	e00a      	b.n	800aa26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	0f1b      	lsrs	r3, r3, #28
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	440b      	add	r3, r1
 800aa20:	3237      	adds	r2, #55	; 0x37
 800aa22:	b2d2      	uxtb	r2, r2
 800aa24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	011b      	lsls	r3, r3, #4
 800aa2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa2c:	7dfb      	ldrb	r3, [r7, #23]
 800aa2e:	005b      	lsls	r3, r3, #1
 800aa30:	3301      	adds	r3, #1
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	4413      	add	r3, r2
 800aa36:	2200      	movs	r2, #0
 800aa38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	75fb      	strb	r3, [r7, #23]
 800aa40:	7dfa      	ldrb	r2, [r7, #23]
 800aa42:	79fb      	ldrb	r3, [r7, #7]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d3d3      	bcc.n	800a9f0 <IntToUnicode+0x18>
  }
}
 800aa48:	bf00      	nop
 800aa4a:	371c      	adds	r7, #28
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08a      	sub	sp, #40	; 0x28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa5c:	f107 0314 	add.w	r3, r7, #20
 800aa60:	2200      	movs	r2, #0
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	605a      	str	r2, [r3, #4]
 800aa66:	609a      	str	r2, [r3, #8]
 800aa68:	60da      	str	r2, [r3, #12]
 800aa6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa74:	d13a      	bne.n	800aaec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa76:	2300      	movs	r3, #0
 800aa78:	613b      	str	r3, [r7, #16]
 800aa7a:	4b1e      	ldr	r3, [pc, #120]	; (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7e:	4a1d      	ldr	r2, [pc, #116]	; (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aa80:	f043 0301 	orr.w	r3, r3, #1
 800aa84:	6313      	str	r3, [r2, #48]	; 0x30
 800aa86:	4b1b      	ldr	r3, [pc, #108]	; (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aa96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa98:	2302      	movs	r3, #2
 800aa9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aaa4:	230a      	movs	r3, #10
 800aaa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaa8:	f107 0314 	add.w	r3, r7, #20
 800aaac:	4619      	mov	r1, r3
 800aaae:	4812      	ldr	r0, [pc, #72]	; (800aaf8 <HAL_PCD_MspInit+0xa4>)
 800aab0:	f7f9 f9ee 	bl	8003e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aab4:	4b0f      	ldr	r3, [pc, #60]	; (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab8:	4a0e      	ldr	r2, [pc, #56]	; (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aaba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aabe:	6353      	str	r3, [r2, #52]	; 0x34
 800aac0:	2300      	movs	r3, #0
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac8:	4a0a      	ldr	r2, [pc, #40]	; (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aaca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aace:	6453      	str	r3, [r2, #68]	; 0x44
 800aad0:	4b08      	ldr	r3, [pc, #32]	; (800aaf4 <HAL_PCD_MspInit+0xa0>)
 800aad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aadc:	2200      	movs	r2, #0
 800aade:	2100      	movs	r1, #0
 800aae0:	2043      	movs	r0, #67	; 0x43
 800aae2:	f7f8 fe0e 	bl	8003702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aae6:	2043      	movs	r0, #67	; 0x43
 800aae8:	f7f8 fe27 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aaec:	bf00      	nop
 800aaee:	3728      	adds	r7, #40	; 0x28
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	40023800 	.word	0x40023800
 800aaf8:	40020000 	.word	0x40020000

0800aafc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab10:	4619      	mov	r1, r3
 800ab12:	4610      	mov	r0, r2
 800ab14:	f7fe fd06 	bl	8009524 <USBD_LL_SetupStage>
}
 800ab18:	bf00      	nop
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ab32:	78fa      	ldrb	r2, [r7, #3]
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	4613      	mov	r3, r2
 800ab38:	00db      	lsls	r3, r3, #3
 800ab3a:	1a9b      	subs	r3, r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	440b      	add	r3, r1
 800ab40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	78fb      	ldrb	r3, [r7, #3]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	f7fe fd3e 	bl	80095ca <USBD_LL_DataOutStage>
}
 800ab4e:	bf00      	nop
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	460b      	mov	r3, r1
 800ab60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ab68:	78fa      	ldrb	r2, [r7, #3]
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	1a9b      	subs	r3, r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	3348      	adds	r3, #72	; 0x48
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	78fb      	ldrb	r3, [r7, #3]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	f7fe fd87 	bl	8009690 <USBD_LL_DataInStage>
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fe fe8b 	bl	80098b4 <USBD_LL_SOF>
}
 800ab9e:	bf00      	nop
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b084      	sub	sp, #16
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abae:	2301      	movs	r3, #1
 800abb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d001      	beq.n	800abbe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800abba:	f7f7 f9fb 	bl	8001fb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abc4:	7bfa      	ldrb	r2, [r7, #15]
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f7fe fe38 	bl	800983e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7fe fdf1 	bl	80097bc <USBD_LL_Reset>
}
 800abda:	bf00      	nop
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
	...

0800abe4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fe fe33 	bl	800985e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	6812      	ldr	r2, [r2, #0]
 800ac06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac0a:	f043 0301 	orr.w	r3, r3, #1
 800ac0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a1b      	ldr	r3, [r3, #32]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d005      	beq.n	800ac24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac18:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <HAL_PCD_SuspendCallback+0x48>)
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	4a03      	ldr	r2, [pc, #12]	; (800ac2c <HAL_PCD_SuspendCallback+0x48>)
 800ac1e:	f043 0306 	orr.w	r3, r3, #6
 800ac22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac24:	bf00      	nop
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	e000ed00 	.word	0xe000ed00

0800ac30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe fe22 	bl	8009888 <USBD_LL_Resume>
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac5e:	78fa      	ldrb	r2, [r7, #3]
 800ac60:	4611      	mov	r1, r2
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fe fe4d 	bl	8009902 <USBD_LL_IsoOUTIncomplete>
}
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac82:	78fa      	ldrb	r2, [r7, #3]
 800ac84:	4611      	mov	r1, r2
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fe fe2e 	bl	80098e8 <USBD_LL_IsoINIncomplete>
}
 800ac8c:	bf00      	nop
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe fe3a 	bl	800991c <USBD_LL_DevConnected>
}
 800aca8:	bf00      	nop
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fe fe37 	bl	8009932 <USBD_LL_DevDisconnected>
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d13c      	bne.n	800ad56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800acdc:	4a20      	ldr	r2, [pc, #128]	; (800ad60 <USBD_LL_Init+0x94>)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a1e      	ldr	r2, [pc, #120]	; (800ad60 <USBD_LL_Init+0x94>)
 800ace8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800acec:	4b1c      	ldr	r3, [pc, #112]	; (800ad60 <USBD_LL_Init+0x94>)
 800acee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800acf2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800acf4:	4b1a      	ldr	r3, [pc, #104]	; (800ad60 <USBD_LL_Init+0x94>)
 800acf6:	2204      	movs	r2, #4
 800acf8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800acfa:	4b19      	ldr	r3, [pc, #100]	; (800ad60 <USBD_LL_Init+0x94>)
 800acfc:	2202      	movs	r2, #2
 800acfe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad00:	4b17      	ldr	r3, [pc, #92]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad06:	4b16      	ldr	r3, [pc, #88]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad08:	2202      	movs	r2, #2
 800ad0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad0c:	4b14      	ldr	r3, [pc, #80]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ad12:	4b13      	ldr	r3, [pc, #76]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ad18:	4b11      	ldr	r3, [pc, #68]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ad1e:	4b10      	ldr	r3, [pc, #64]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ad24:	4b0e      	ldr	r3, [pc, #56]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ad2a:	480d      	ldr	r0, [pc, #52]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad2c:	f7f9 fa63 	bl	80041f6 <HAL_PCD_Init>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ad36:	f7f7 f93d 	bl	8001fb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ad3a:	2180      	movs	r1, #128	; 0x80
 800ad3c:	4808      	ldr	r0, [pc, #32]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad3e:	f7fa fbc0 	bl	80054c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ad42:	2240      	movs	r2, #64	; 0x40
 800ad44:	2100      	movs	r1, #0
 800ad46:	4806      	ldr	r0, [pc, #24]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad48:	f7fa fb74 	bl	8005434 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ad4c:	2280      	movs	r2, #128	; 0x80
 800ad4e:	2101      	movs	r1, #1
 800ad50:	4803      	ldr	r0, [pc, #12]	; (800ad60 <USBD_LL_Init+0x94>)
 800ad52:	f7fa fb6f 	bl	8005434 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	20000f70 	.word	0x20000f70

0800ad64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7f9 fb58 	bl	8004430 <HAL_PCD_Start>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 f92a 	bl	800afe0 <USBD_Get_USB_Status>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ad90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	4608      	mov	r0, r1
 800ada4:	4611      	mov	r1, r2
 800ada6:	461a      	mov	r2, r3
 800ada8:	4603      	mov	r3, r0
 800adaa:	70fb      	strb	r3, [r7, #3]
 800adac:	460b      	mov	r3, r1
 800adae:	70bb      	strb	r3, [r7, #2]
 800adb0:	4613      	mov	r3, r2
 800adb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800adc2:	78bb      	ldrb	r3, [r7, #2]
 800adc4:	883a      	ldrh	r2, [r7, #0]
 800adc6:	78f9      	ldrb	r1, [r7, #3]
 800adc8:	f7f9 ff3c 	bl	8004c44 <HAL_PCD_EP_Open>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add0:	7bfb      	ldrb	r3, [r7, #15]
 800add2:	4618      	mov	r0, r3
 800add4:	f000 f904 	bl	800afe0 <USBD_Get_USB_Status>
 800add8:	4603      	mov	r3, r0
 800adda:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800addc:	7bbb      	ldrb	r3, [r7, #14]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	460b      	mov	r3, r1
 800adf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae00:	78fa      	ldrb	r2, [r7, #3]
 800ae02:	4611      	mov	r1, r2
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7f9 ff85 	bl	8004d14 <HAL_PCD_EP_Close>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 f8e5 	bl	800afe0 <USBD_Get_USB_Status>
 800ae16:	4603      	mov	r3, r0
 800ae18:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800ae1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae3e:	78fa      	ldrb	r2, [r7, #3]
 800ae40:	4611      	mov	r1, r2
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7fa f85d 	bl	8004f02 <HAL_PCD_EP_SetStall>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 f8c6 	bl	800afe0 <USBD_Get_USB_Status>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800ae58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae7c:	78fa      	ldrb	r2, [r7, #3]
 800ae7e:	4611      	mov	r1, r2
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fa f8a2 	bl	8004fca <HAL_PCD_EP_ClrStall>
 800ae86:	4603      	mov	r3, r0
 800ae88:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 f8a7 	bl	800afe0 <USBD_Get_USB_Status>
 800ae92:	4603      	mov	r3, r0
 800ae94:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800ae96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aeb2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800aeb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	da0b      	bge.n	800aed4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800aebc:	78fb      	ldrb	r3, [r7, #3]
 800aebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aec2:	68f9      	ldr	r1, [r7, #12]
 800aec4:	4613      	mov	r3, r2
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	1a9b      	subs	r3, r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	440b      	add	r3, r1
 800aece:	333e      	adds	r3, #62	; 0x3e
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	e00b      	b.n	800aeec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800aed4:	78fb      	ldrb	r3, [r7, #3]
 800aed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aeda:	68f9      	ldr	r1, [r7, #12]
 800aedc:	4613      	mov	r3, r2
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	1a9b      	subs	r3, r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aeea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af12:	78fa      	ldrb	r2, [r7, #3]
 800af14:	4611      	mov	r1, r2
 800af16:	4618      	mov	r0, r3
 800af18:	f7f9 fe6f 	bl	8004bfa <HAL_PCD_SetAddress>
 800af1c:	4603      	mov	r3, r0
 800af1e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	4618      	mov	r0, r3
 800af24:	f000 f85c 	bl	800afe0 <USBD_Get_USB_Status>
 800af28:	4603      	mov	r3, r0
 800af2a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b086      	sub	sp, #24
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
 800af42:	460b      	mov	r3, r1
 800af44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af54:	7af9      	ldrb	r1, [r7, #11]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	f7f9 ff88 	bl	8004e6e <HAL_PCD_EP_Transmit>
 800af5e:	4603      	mov	r3, r0
 800af60:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	4618      	mov	r0, r3
 800af66:	f000 f83b 	bl	800afe0 <USBD_Get_USB_Status>
 800af6a:	4603      	mov	r3, r0
 800af6c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800af6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3718      	adds	r7, #24
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	607a      	str	r2, [r7, #4]
 800af82:	603b      	str	r3, [r7, #0]
 800af84:	460b      	mov	r3, r1
 800af86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af88:	2300      	movs	r3, #0
 800af8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af96:	7af9      	ldrb	r1, [r7, #11]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	f7f9 ff04 	bl	8004da8 <HAL_PCD_EP_Receive>
 800afa0:	4603      	mov	r3, r0
 800afa2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800afa4:	7dfb      	ldrb	r3, [r7, #23]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 f81a 	bl	800afe0 <USBD_Get_USB_Status>
 800afac:	4603      	mov	r3, r0
 800afae:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800afb0:	7dbb      	ldrb	r3, [r7, #22]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3718      	adds	r7, #24
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	460b      	mov	r3, r1
 800afc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afcc:	78fa      	ldrb	r2, [r7, #3]
 800afce:	4611      	mov	r1, r2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7f9 ff34 	bl	8004e3e <HAL_PCD_EP_GetRxCount>
 800afd6:	4603      	mov	r3, r0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	4603      	mov	r3, r0
 800afe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afea:	2300      	movs	r3, #0
 800afec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800afee:	79fb      	ldrb	r3, [r7, #7]
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	d817      	bhi.n	800b024 <USBD_Get_USB_Status+0x44>
 800aff4:	a201      	add	r2, pc, #4	; (adr r2, 800affc <USBD_Get_USB_Status+0x1c>)
 800aff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affa:	bf00      	nop
 800affc:	0800b00d 	.word	0x0800b00d
 800b000:	0800b013 	.word	0x0800b013
 800b004:	0800b019 	.word	0x0800b019
 800b008:	0800b01f 	.word	0x0800b01f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	73fb      	strb	r3, [r7, #15]
    break;
 800b010:	e00b      	b.n	800b02a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b012:	2303      	movs	r3, #3
 800b014:	73fb      	strb	r3, [r7, #15]
    break;
 800b016:	e008      	b.n	800b02a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b018:	2301      	movs	r3, #1
 800b01a:	73fb      	strb	r3, [r7, #15]
    break;
 800b01c:	e005      	b.n	800b02a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b01e:	2303      	movs	r3, #3
 800b020:	73fb      	strb	r3, [r7, #15]
    break;
 800b022:	e002      	b.n	800b02a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b024:	2303      	movs	r3, #3
 800b026:	73fb      	strb	r3, [r7, #15]
    break;
 800b028:	bf00      	nop
  }
  return usb_status;
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <__errno>:
 800b038:	4b01      	ldr	r3, [pc, #4]	; (800b040 <__errno+0x8>)
 800b03a:	6818      	ldr	r0, [r3, #0]
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	200001e8 	.word	0x200001e8

0800b044 <__libc_init_array>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	4e0d      	ldr	r6, [pc, #52]	; (800b07c <__libc_init_array+0x38>)
 800b048:	4c0d      	ldr	r4, [pc, #52]	; (800b080 <__libc_init_array+0x3c>)
 800b04a:	1ba4      	subs	r4, r4, r6
 800b04c:	10a4      	asrs	r4, r4, #2
 800b04e:	2500      	movs	r5, #0
 800b050:	42a5      	cmp	r5, r4
 800b052:	d109      	bne.n	800b068 <__libc_init_array+0x24>
 800b054:	4e0b      	ldr	r6, [pc, #44]	; (800b084 <__libc_init_array+0x40>)
 800b056:	4c0c      	ldr	r4, [pc, #48]	; (800b088 <__libc_init_array+0x44>)
 800b058:	f007 fc60 	bl	801291c <_init>
 800b05c:	1ba4      	subs	r4, r4, r6
 800b05e:	10a4      	asrs	r4, r4, #2
 800b060:	2500      	movs	r5, #0
 800b062:	42a5      	cmp	r5, r4
 800b064:	d105      	bne.n	800b072 <__libc_init_array+0x2e>
 800b066:	bd70      	pop	{r4, r5, r6, pc}
 800b068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b06c:	4798      	blx	r3
 800b06e:	3501      	adds	r5, #1
 800b070:	e7ee      	b.n	800b050 <__libc_init_array+0xc>
 800b072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b076:	4798      	blx	r3
 800b078:	3501      	adds	r5, #1
 800b07a:	e7f2      	b.n	800b062 <__libc_init_array+0x1e>
 800b07c:	080130e0 	.word	0x080130e0
 800b080:	080130e0 	.word	0x080130e0
 800b084:	080130e0 	.word	0x080130e0
 800b088:	080130e4 	.word	0x080130e4

0800b08c <malloc>:
 800b08c:	4b02      	ldr	r3, [pc, #8]	; (800b098 <malloc+0xc>)
 800b08e:	4601      	mov	r1, r0
 800b090:	6818      	ldr	r0, [r3, #0]
 800b092:	f000 b861 	b.w	800b158 <_malloc_r>
 800b096:	bf00      	nop
 800b098:	200001e8 	.word	0x200001e8

0800b09c <free>:
 800b09c:	4b02      	ldr	r3, [pc, #8]	; (800b0a8 <free+0xc>)
 800b09e:	4601      	mov	r1, r0
 800b0a0:	6818      	ldr	r0, [r3, #0]
 800b0a2:	f000 b80b 	b.w	800b0bc <_free_r>
 800b0a6:	bf00      	nop
 800b0a8:	200001e8 	.word	0x200001e8

0800b0ac <memset>:
 800b0ac:	4402      	add	r2, r0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d100      	bne.n	800b0b6 <memset+0xa>
 800b0b4:	4770      	bx	lr
 800b0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ba:	e7f9      	b.n	800b0b0 <memset+0x4>

0800b0bc <_free_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4605      	mov	r5, r0
 800b0c0:	2900      	cmp	r1, #0
 800b0c2:	d045      	beq.n	800b150 <_free_r+0x94>
 800b0c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0c8:	1f0c      	subs	r4, r1, #4
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	bfb8      	it	lt
 800b0ce:	18e4      	addlt	r4, r4, r3
 800b0d0:	f003 fb3b 	bl	800e74a <__malloc_lock>
 800b0d4:	4a1f      	ldr	r2, [pc, #124]	; (800b154 <_free_r+0x98>)
 800b0d6:	6813      	ldr	r3, [r2, #0]
 800b0d8:	4610      	mov	r0, r2
 800b0da:	b933      	cbnz	r3, 800b0ea <_free_r+0x2e>
 800b0dc:	6063      	str	r3, [r4, #4]
 800b0de:	6014      	str	r4, [r2, #0]
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0e6:	f003 bb31 	b.w	800e74c <__malloc_unlock>
 800b0ea:	42a3      	cmp	r3, r4
 800b0ec:	d90c      	bls.n	800b108 <_free_r+0x4c>
 800b0ee:	6821      	ldr	r1, [r4, #0]
 800b0f0:	1862      	adds	r2, r4, r1
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	bf04      	itt	eq
 800b0f6:	681a      	ldreq	r2, [r3, #0]
 800b0f8:	685b      	ldreq	r3, [r3, #4]
 800b0fa:	6063      	str	r3, [r4, #4]
 800b0fc:	bf04      	itt	eq
 800b0fe:	1852      	addeq	r2, r2, r1
 800b100:	6022      	streq	r2, [r4, #0]
 800b102:	6004      	str	r4, [r0, #0]
 800b104:	e7ec      	b.n	800b0e0 <_free_r+0x24>
 800b106:	4613      	mov	r3, r2
 800b108:	685a      	ldr	r2, [r3, #4]
 800b10a:	b10a      	cbz	r2, 800b110 <_free_r+0x54>
 800b10c:	42a2      	cmp	r2, r4
 800b10e:	d9fa      	bls.n	800b106 <_free_r+0x4a>
 800b110:	6819      	ldr	r1, [r3, #0]
 800b112:	1858      	adds	r0, r3, r1
 800b114:	42a0      	cmp	r0, r4
 800b116:	d10b      	bne.n	800b130 <_free_r+0x74>
 800b118:	6820      	ldr	r0, [r4, #0]
 800b11a:	4401      	add	r1, r0
 800b11c:	1858      	adds	r0, r3, r1
 800b11e:	4282      	cmp	r2, r0
 800b120:	6019      	str	r1, [r3, #0]
 800b122:	d1dd      	bne.n	800b0e0 <_free_r+0x24>
 800b124:	6810      	ldr	r0, [r2, #0]
 800b126:	6852      	ldr	r2, [r2, #4]
 800b128:	605a      	str	r2, [r3, #4]
 800b12a:	4401      	add	r1, r0
 800b12c:	6019      	str	r1, [r3, #0]
 800b12e:	e7d7      	b.n	800b0e0 <_free_r+0x24>
 800b130:	d902      	bls.n	800b138 <_free_r+0x7c>
 800b132:	230c      	movs	r3, #12
 800b134:	602b      	str	r3, [r5, #0]
 800b136:	e7d3      	b.n	800b0e0 <_free_r+0x24>
 800b138:	6820      	ldr	r0, [r4, #0]
 800b13a:	1821      	adds	r1, r4, r0
 800b13c:	428a      	cmp	r2, r1
 800b13e:	bf04      	itt	eq
 800b140:	6811      	ldreq	r1, [r2, #0]
 800b142:	6852      	ldreq	r2, [r2, #4]
 800b144:	6062      	str	r2, [r4, #4]
 800b146:	bf04      	itt	eq
 800b148:	1809      	addeq	r1, r1, r0
 800b14a:	6021      	streq	r1, [r4, #0]
 800b14c:	605c      	str	r4, [r3, #4]
 800b14e:	e7c7      	b.n	800b0e0 <_free_r+0x24>
 800b150:	bd38      	pop	{r3, r4, r5, pc}
 800b152:	bf00      	nop
 800b154:	200003e8 	.word	0x200003e8

0800b158 <_malloc_r>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	1ccd      	adds	r5, r1, #3
 800b15c:	f025 0503 	bic.w	r5, r5, #3
 800b160:	3508      	adds	r5, #8
 800b162:	2d0c      	cmp	r5, #12
 800b164:	bf38      	it	cc
 800b166:	250c      	movcc	r5, #12
 800b168:	2d00      	cmp	r5, #0
 800b16a:	4606      	mov	r6, r0
 800b16c:	db01      	blt.n	800b172 <_malloc_r+0x1a>
 800b16e:	42a9      	cmp	r1, r5
 800b170:	d903      	bls.n	800b17a <_malloc_r+0x22>
 800b172:	230c      	movs	r3, #12
 800b174:	6033      	str	r3, [r6, #0]
 800b176:	2000      	movs	r0, #0
 800b178:	bd70      	pop	{r4, r5, r6, pc}
 800b17a:	f003 fae6 	bl	800e74a <__malloc_lock>
 800b17e:	4a21      	ldr	r2, [pc, #132]	; (800b204 <_malloc_r+0xac>)
 800b180:	6814      	ldr	r4, [r2, #0]
 800b182:	4621      	mov	r1, r4
 800b184:	b991      	cbnz	r1, 800b1ac <_malloc_r+0x54>
 800b186:	4c20      	ldr	r4, [pc, #128]	; (800b208 <_malloc_r+0xb0>)
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	b91b      	cbnz	r3, 800b194 <_malloc_r+0x3c>
 800b18c:	4630      	mov	r0, r6
 800b18e:	f000 fef7 	bl	800bf80 <_sbrk_r>
 800b192:	6020      	str	r0, [r4, #0]
 800b194:	4629      	mov	r1, r5
 800b196:	4630      	mov	r0, r6
 800b198:	f000 fef2 	bl	800bf80 <_sbrk_r>
 800b19c:	1c43      	adds	r3, r0, #1
 800b19e:	d124      	bne.n	800b1ea <_malloc_r+0x92>
 800b1a0:	230c      	movs	r3, #12
 800b1a2:	6033      	str	r3, [r6, #0]
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f003 fad1 	bl	800e74c <__malloc_unlock>
 800b1aa:	e7e4      	b.n	800b176 <_malloc_r+0x1e>
 800b1ac:	680b      	ldr	r3, [r1, #0]
 800b1ae:	1b5b      	subs	r3, r3, r5
 800b1b0:	d418      	bmi.n	800b1e4 <_malloc_r+0x8c>
 800b1b2:	2b0b      	cmp	r3, #11
 800b1b4:	d90f      	bls.n	800b1d6 <_malloc_r+0x7e>
 800b1b6:	600b      	str	r3, [r1, #0]
 800b1b8:	50cd      	str	r5, [r1, r3]
 800b1ba:	18cc      	adds	r4, r1, r3
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f003 fac5 	bl	800e74c <__malloc_unlock>
 800b1c2:	f104 000b 	add.w	r0, r4, #11
 800b1c6:	1d23      	adds	r3, r4, #4
 800b1c8:	f020 0007 	bic.w	r0, r0, #7
 800b1cc:	1ac3      	subs	r3, r0, r3
 800b1ce:	d0d3      	beq.n	800b178 <_malloc_r+0x20>
 800b1d0:	425a      	negs	r2, r3
 800b1d2:	50e2      	str	r2, [r4, r3]
 800b1d4:	e7d0      	b.n	800b178 <_malloc_r+0x20>
 800b1d6:	428c      	cmp	r4, r1
 800b1d8:	684b      	ldr	r3, [r1, #4]
 800b1da:	bf16      	itet	ne
 800b1dc:	6063      	strne	r3, [r4, #4]
 800b1de:	6013      	streq	r3, [r2, #0]
 800b1e0:	460c      	movne	r4, r1
 800b1e2:	e7eb      	b.n	800b1bc <_malloc_r+0x64>
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	6849      	ldr	r1, [r1, #4]
 800b1e8:	e7cc      	b.n	800b184 <_malloc_r+0x2c>
 800b1ea:	1cc4      	adds	r4, r0, #3
 800b1ec:	f024 0403 	bic.w	r4, r4, #3
 800b1f0:	42a0      	cmp	r0, r4
 800b1f2:	d005      	beq.n	800b200 <_malloc_r+0xa8>
 800b1f4:	1a21      	subs	r1, r4, r0
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f000 fec2 	bl	800bf80 <_sbrk_r>
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	d0cf      	beq.n	800b1a0 <_malloc_r+0x48>
 800b200:	6025      	str	r5, [r4, #0]
 800b202:	e7db      	b.n	800b1bc <_malloc_r+0x64>
 800b204:	200003e8 	.word	0x200003e8
 800b208:	200003ec 	.word	0x200003ec

0800b20c <__cvt>:
 800b20c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b210:	ec55 4b10 	vmov	r4, r5, d0
 800b214:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b216:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b21a:	2d00      	cmp	r5, #0
 800b21c:	460e      	mov	r6, r1
 800b21e:	4691      	mov	r9, r2
 800b220:	4619      	mov	r1, r3
 800b222:	bfb8      	it	lt
 800b224:	4622      	movlt	r2, r4
 800b226:	462b      	mov	r3, r5
 800b228:	f027 0720 	bic.w	r7, r7, #32
 800b22c:	bfbb      	ittet	lt
 800b22e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b232:	461d      	movlt	r5, r3
 800b234:	2300      	movge	r3, #0
 800b236:	232d      	movlt	r3, #45	; 0x2d
 800b238:	bfb8      	it	lt
 800b23a:	4614      	movlt	r4, r2
 800b23c:	2f46      	cmp	r7, #70	; 0x46
 800b23e:	700b      	strb	r3, [r1, #0]
 800b240:	d004      	beq.n	800b24c <__cvt+0x40>
 800b242:	2f45      	cmp	r7, #69	; 0x45
 800b244:	d100      	bne.n	800b248 <__cvt+0x3c>
 800b246:	3601      	adds	r6, #1
 800b248:	2102      	movs	r1, #2
 800b24a:	e000      	b.n	800b24e <__cvt+0x42>
 800b24c:	2103      	movs	r1, #3
 800b24e:	ab03      	add	r3, sp, #12
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	ab02      	add	r3, sp, #8
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	4632      	mov	r2, r6
 800b258:	4653      	mov	r3, sl
 800b25a:	ec45 4b10 	vmov	d0, r4, r5
 800b25e:	f001 ff67 	bl	800d130 <_dtoa_r>
 800b262:	2f47      	cmp	r7, #71	; 0x47
 800b264:	4680      	mov	r8, r0
 800b266:	d102      	bne.n	800b26e <__cvt+0x62>
 800b268:	f019 0f01 	tst.w	r9, #1
 800b26c:	d026      	beq.n	800b2bc <__cvt+0xb0>
 800b26e:	2f46      	cmp	r7, #70	; 0x46
 800b270:	eb08 0906 	add.w	r9, r8, r6
 800b274:	d111      	bne.n	800b29a <__cvt+0x8e>
 800b276:	f898 3000 	ldrb.w	r3, [r8]
 800b27a:	2b30      	cmp	r3, #48	; 0x30
 800b27c:	d10a      	bne.n	800b294 <__cvt+0x88>
 800b27e:	2200      	movs	r2, #0
 800b280:	2300      	movs	r3, #0
 800b282:	4620      	mov	r0, r4
 800b284:	4629      	mov	r1, r5
 800b286:	f7f5 fc27 	bl	8000ad8 <__aeabi_dcmpeq>
 800b28a:	b918      	cbnz	r0, 800b294 <__cvt+0x88>
 800b28c:	f1c6 0601 	rsb	r6, r6, #1
 800b290:	f8ca 6000 	str.w	r6, [sl]
 800b294:	f8da 3000 	ldr.w	r3, [sl]
 800b298:	4499      	add	r9, r3
 800b29a:	2200      	movs	r2, #0
 800b29c:	2300      	movs	r3, #0
 800b29e:	4620      	mov	r0, r4
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	f7f5 fc19 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2a6:	b938      	cbnz	r0, 800b2b8 <__cvt+0xac>
 800b2a8:	2230      	movs	r2, #48	; 0x30
 800b2aa:	9b03      	ldr	r3, [sp, #12]
 800b2ac:	454b      	cmp	r3, r9
 800b2ae:	d205      	bcs.n	800b2bc <__cvt+0xb0>
 800b2b0:	1c59      	adds	r1, r3, #1
 800b2b2:	9103      	str	r1, [sp, #12]
 800b2b4:	701a      	strb	r2, [r3, #0]
 800b2b6:	e7f8      	b.n	800b2aa <__cvt+0x9e>
 800b2b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2c0:	eba3 0308 	sub.w	r3, r3, r8
 800b2c4:	4640      	mov	r0, r8
 800b2c6:	6013      	str	r3, [r2, #0]
 800b2c8:	b004      	add	sp, #16
 800b2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b2ce <__exponent>:
 800b2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2d0:	2900      	cmp	r1, #0
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	bfba      	itte	lt
 800b2d6:	4249      	neglt	r1, r1
 800b2d8:	232d      	movlt	r3, #45	; 0x2d
 800b2da:	232b      	movge	r3, #43	; 0x2b
 800b2dc:	2909      	cmp	r1, #9
 800b2de:	f804 2b02 	strb.w	r2, [r4], #2
 800b2e2:	7043      	strb	r3, [r0, #1]
 800b2e4:	dd20      	ble.n	800b328 <__exponent+0x5a>
 800b2e6:	f10d 0307 	add.w	r3, sp, #7
 800b2ea:	461f      	mov	r7, r3
 800b2ec:	260a      	movs	r6, #10
 800b2ee:	fb91 f5f6 	sdiv	r5, r1, r6
 800b2f2:	fb06 1115 	mls	r1, r6, r5, r1
 800b2f6:	3130      	adds	r1, #48	; 0x30
 800b2f8:	2d09      	cmp	r5, #9
 800b2fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b2fe:	f103 32ff 	add.w	r2, r3, #4294967295
 800b302:	4629      	mov	r1, r5
 800b304:	dc09      	bgt.n	800b31a <__exponent+0x4c>
 800b306:	3130      	adds	r1, #48	; 0x30
 800b308:	3b02      	subs	r3, #2
 800b30a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b30e:	42bb      	cmp	r3, r7
 800b310:	4622      	mov	r2, r4
 800b312:	d304      	bcc.n	800b31e <__exponent+0x50>
 800b314:	1a10      	subs	r0, r2, r0
 800b316:	b003      	add	sp, #12
 800b318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b31a:	4613      	mov	r3, r2
 800b31c:	e7e7      	b.n	800b2ee <__exponent+0x20>
 800b31e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b322:	f804 2b01 	strb.w	r2, [r4], #1
 800b326:	e7f2      	b.n	800b30e <__exponent+0x40>
 800b328:	2330      	movs	r3, #48	; 0x30
 800b32a:	4419      	add	r1, r3
 800b32c:	7083      	strb	r3, [r0, #2]
 800b32e:	1d02      	adds	r2, r0, #4
 800b330:	70c1      	strb	r1, [r0, #3]
 800b332:	e7ef      	b.n	800b314 <__exponent+0x46>

0800b334 <_printf_float>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	b08d      	sub	sp, #52	; 0x34
 800b33a:	460c      	mov	r4, r1
 800b33c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b340:	4616      	mov	r6, r2
 800b342:	461f      	mov	r7, r3
 800b344:	4605      	mov	r5, r0
 800b346:	f003 f95f 	bl	800e608 <_localeconv_r>
 800b34a:	6803      	ldr	r3, [r0, #0]
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	4618      	mov	r0, r3
 800b350:	f7f4 ff46 	bl	80001e0 <strlen>
 800b354:	2300      	movs	r3, #0
 800b356:	930a      	str	r3, [sp, #40]	; 0x28
 800b358:	f8d8 3000 	ldr.w	r3, [r8]
 800b35c:	9005      	str	r0, [sp, #20]
 800b35e:	3307      	adds	r3, #7
 800b360:	f023 0307 	bic.w	r3, r3, #7
 800b364:	f103 0208 	add.w	r2, r3, #8
 800b368:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b36c:	f8d4 b000 	ldr.w	fp, [r4]
 800b370:	f8c8 2000 	str.w	r2, [r8]
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b37c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b380:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b384:	9307      	str	r3, [sp, #28]
 800b386:	f8cd 8018 	str.w	r8, [sp, #24]
 800b38a:	f04f 32ff 	mov.w	r2, #4294967295
 800b38e:	4ba7      	ldr	r3, [pc, #668]	; (800b62c <_printf_float+0x2f8>)
 800b390:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b394:	f7f5 fbd2 	bl	8000b3c <__aeabi_dcmpun>
 800b398:	bb70      	cbnz	r0, 800b3f8 <_printf_float+0xc4>
 800b39a:	f04f 32ff 	mov.w	r2, #4294967295
 800b39e:	4ba3      	ldr	r3, [pc, #652]	; (800b62c <_printf_float+0x2f8>)
 800b3a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3a4:	f7f5 fbac 	bl	8000b00 <__aeabi_dcmple>
 800b3a8:	bb30      	cbnz	r0, 800b3f8 <_printf_float+0xc4>
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	f7f5 fb9b 	bl	8000aec <__aeabi_dcmplt>
 800b3b6:	b110      	cbz	r0, 800b3be <_printf_float+0x8a>
 800b3b8:	232d      	movs	r3, #45	; 0x2d
 800b3ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3be:	4a9c      	ldr	r2, [pc, #624]	; (800b630 <_printf_float+0x2fc>)
 800b3c0:	4b9c      	ldr	r3, [pc, #624]	; (800b634 <_printf_float+0x300>)
 800b3c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b3c6:	bf8c      	ite	hi
 800b3c8:	4690      	movhi	r8, r2
 800b3ca:	4698      	movls	r8, r3
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	f02b 0204 	bic.w	r2, fp, #4
 800b3d2:	6123      	str	r3, [r4, #16]
 800b3d4:	6022      	str	r2, [r4, #0]
 800b3d6:	f04f 0900 	mov.w	r9, #0
 800b3da:	9700      	str	r7, [sp, #0]
 800b3dc:	4633      	mov	r3, r6
 800b3de:	aa0b      	add	r2, sp, #44	; 0x2c
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f000 f9e6 	bl	800b7b4 <_printf_common>
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	f040 808d 	bne.w	800b508 <_printf_float+0x1d4>
 800b3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f2:	b00d      	add	sp, #52	; 0x34
 800b3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	4649      	mov	r1, r9
 800b400:	f7f5 fb9c 	bl	8000b3c <__aeabi_dcmpun>
 800b404:	b110      	cbz	r0, 800b40c <_printf_float+0xd8>
 800b406:	4a8c      	ldr	r2, [pc, #560]	; (800b638 <_printf_float+0x304>)
 800b408:	4b8c      	ldr	r3, [pc, #560]	; (800b63c <_printf_float+0x308>)
 800b40a:	e7da      	b.n	800b3c2 <_printf_float+0x8e>
 800b40c:	6861      	ldr	r1, [r4, #4]
 800b40e:	1c4b      	adds	r3, r1, #1
 800b410:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b414:	a80a      	add	r0, sp, #40	; 0x28
 800b416:	d13e      	bne.n	800b496 <_printf_float+0x162>
 800b418:	2306      	movs	r3, #6
 800b41a:	6063      	str	r3, [r4, #4]
 800b41c:	2300      	movs	r3, #0
 800b41e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b422:	ab09      	add	r3, sp, #36	; 0x24
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	ec49 8b10 	vmov	d0, r8, r9
 800b42a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b42e:	6022      	str	r2, [r4, #0]
 800b430:	f8cd a004 	str.w	sl, [sp, #4]
 800b434:	6861      	ldr	r1, [r4, #4]
 800b436:	4628      	mov	r0, r5
 800b438:	f7ff fee8 	bl	800b20c <__cvt>
 800b43c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b440:	2b47      	cmp	r3, #71	; 0x47
 800b442:	4680      	mov	r8, r0
 800b444:	d109      	bne.n	800b45a <_printf_float+0x126>
 800b446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b448:	1cd8      	adds	r0, r3, #3
 800b44a:	db02      	blt.n	800b452 <_printf_float+0x11e>
 800b44c:	6862      	ldr	r2, [r4, #4]
 800b44e:	4293      	cmp	r3, r2
 800b450:	dd47      	ble.n	800b4e2 <_printf_float+0x1ae>
 800b452:	f1aa 0a02 	sub.w	sl, sl, #2
 800b456:	fa5f fa8a 	uxtb.w	sl, sl
 800b45a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b45e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b460:	d824      	bhi.n	800b4ac <_printf_float+0x178>
 800b462:	3901      	subs	r1, #1
 800b464:	4652      	mov	r2, sl
 800b466:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b46a:	9109      	str	r1, [sp, #36]	; 0x24
 800b46c:	f7ff ff2f 	bl	800b2ce <__exponent>
 800b470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b472:	1813      	adds	r3, r2, r0
 800b474:	2a01      	cmp	r2, #1
 800b476:	4681      	mov	r9, r0
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	dc02      	bgt.n	800b482 <_printf_float+0x14e>
 800b47c:	6822      	ldr	r2, [r4, #0]
 800b47e:	07d1      	lsls	r1, r2, #31
 800b480:	d501      	bpl.n	800b486 <_printf_float+0x152>
 800b482:	3301      	adds	r3, #1
 800b484:	6123      	str	r3, [r4, #16]
 800b486:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d0a5      	beq.n	800b3da <_printf_float+0xa6>
 800b48e:	232d      	movs	r3, #45	; 0x2d
 800b490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b494:	e7a1      	b.n	800b3da <_printf_float+0xa6>
 800b496:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b49a:	f000 8177 	beq.w	800b78c <_printf_float+0x458>
 800b49e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b4a2:	d1bb      	bne.n	800b41c <_printf_float+0xe8>
 800b4a4:	2900      	cmp	r1, #0
 800b4a6:	d1b9      	bne.n	800b41c <_printf_float+0xe8>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e7b6      	b.n	800b41a <_printf_float+0xe6>
 800b4ac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b4b0:	d119      	bne.n	800b4e6 <_printf_float+0x1b2>
 800b4b2:	2900      	cmp	r1, #0
 800b4b4:	6863      	ldr	r3, [r4, #4]
 800b4b6:	dd0c      	ble.n	800b4d2 <_printf_float+0x19e>
 800b4b8:	6121      	str	r1, [r4, #16]
 800b4ba:	b913      	cbnz	r3, 800b4c2 <_printf_float+0x18e>
 800b4bc:	6822      	ldr	r2, [r4, #0]
 800b4be:	07d2      	lsls	r2, r2, #31
 800b4c0:	d502      	bpl.n	800b4c8 <_printf_float+0x194>
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	440b      	add	r3, r1
 800b4c6:	6123      	str	r3, [r4, #16]
 800b4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ca:	65a3      	str	r3, [r4, #88]	; 0x58
 800b4cc:	f04f 0900 	mov.w	r9, #0
 800b4d0:	e7d9      	b.n	800b486 <_printf_float+0x152>
 800b4d2:	b913      	cbnz	r3, 800b4da <_printf_float+0x1a6>
 800b4d4:	6822      	ldr	r2, [r4, #0]
 800b4d6:	07d0      	lsls	r0, r2, #31
 800b4d8:	d501      	bpl.n	800b4de <_printf_float+0x1aa>
 800b4da:	3302      	adds	r3, #2
 800b4dc:	e7f3      	b.n	800b4c6 <_printf_float+0x192>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e7f1      	b.n	800b4c6 <_printf_float+0x192>
 800b4e2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b4e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	db05      	blt.n	800b4fa <_printf_float+0x1c6>
 800b4ee:	6822      	ldr	r2, [r4, #0]
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	07d1      	lsls	r1, r2, #31
 800b4f4:	d5e8      	bpl.n	800b4c8 <_printf_float+0x194>
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	e7e5      	b.n	800b4c6 <_printf_float+0x192>
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	bfd4      	ite	le
 800b4fe:	f1c3 0302 	rsble	r3, r3, #2
 800b502:	2301      	movgt	r3, #1
 800b504:	4413      	add	r3, r2
 800b506:	e7de      	b.n	800b4c6 <_printf_float+0x192>
 800b508:	6823      	ldr	r3, [r4, #0]
 800b50a:	055a      	lsls	r2, r3, #21
 800b50c:	d407      	bmi.n	800b51e <_printf_float+0x1ea>
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	4642      	mov	r2, r8
 800b512:	4631      	mov	r1, r6
 800b514:	4628      	mov	r0, r5
 800b516:	47b8      	blx	r7
 800b518:	3001      	adds	r0, #1
 800b51a:	d12b      	bne.n	800b574 <_printf_float+0x240>
 800b51c:	e767      	b.n	800b3ee <_printf_float+0xba>
 800b51e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b522:	f240 80dc 	bls.w	800b6de <_printf_float+0x3aa>
 800b526:	2200      	movs	r2, #0
 800b528:	2300      	movs	r3, #0
 800b52a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b52e:	f7f5 fad3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b532:	2800      	cmp	r0, #0
 800b534:	d033      	beq.n	800b59e <_printf_float+0x26a>
 800b536:	2301      	movs	r3, #1
 800b538:	4a41      	ldr	r2, [pc, #260]	; (800b640 <_printf_float+0x30c>)
 800b53a:	4631      	mov	r1, r6
 800b53c:	4628      	mov	r0, r5
 800b53e:	47b8      	blx	r7
 800b540:	3001      	adds	r0, #1
 800b542:	f43f af54 	beq.w	800b3ee <_printf_float+0xba>
 800b546:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b54a:	429a      	cmp	r2, r3
 800b54c:	db02      	blt.n	800b554 <_printf_float+0x220>
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	07d8      	lsls	r0, r3, #31
 800b552:	d50f      	bpl.n	800b574 <_printf_float+0x240>
 800b554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b558:	4631      	mov	r1, r6
 800b55a:	4628      	mov	r0, r5
 800b55c:	47b8      	blx	r7
 800b55e:	3001      	adds	r0, #1
 800b560:	f43f af45 	beq.w	800b3ee <_printf_float+0xba>
 800b564:	f04f 0800 	mov.w	r8, #0
 800b568:	f104 091a 	add.w	r9, r4, #26
 800b56c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b56e:	3b01      	subs	r3, #1
 800b570:	4543      	cmp	r3, r8
 800b572:	dc09      	bgt.n	800b588 <_printf_float+0x254>
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	079b      	lsls	r3, r3, #30
 800b578:	f100 8103 	bmi.w	800b782 <_printf_float+0x44e>
 800b57c:	68e0      	ldr	r0, [r4, #12]
 800b57e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b580:	4298      	cmp	r0, r3
 800b582:	bfb8      	it	lt
 800b584:	4618      	movlt	r0, r3
 800b586:	e734      	b.n	800b3f2 <_printf_float+0xbe>
 800b588:	2301      	movs	r3, #1
 800b58a:	464a      	mov	r2, r9
 800b58c:	4631      	mov	r1, r6
 800b58e:	4628      	mov	r0, r5
 800b590:	47b8      	blx	r7
 800b592:	3001      	adds	r0, #1
 800b594:	f43f af2b 	beq.w	800b3ee <_printf_float+0xba>
 800b598:	f108 0801 	add.w	r8, r8, #1
 800b59c:	e7e6      	b.n	800b56c <_printf_float+0x238>
 800b59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	dc2b      	bgt.n	800b5fc <_printf_float+0x2c8>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	4a26      	ldr	r2, [pc, #152]	; (800b640 <_printf_float+0x30c>)
 800b5a8:	4631      	mov	r1, r6
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	47b8      	blx	r7
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	f43f af1d 	beq.w	800b3ee <_printf_float+0xba>
 800b5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b6:	b923      	cbnz	r3, 800b5c2 <_printf_float+0x28e>
 800b5b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ba:	b913      	cbnz	r3, 800b5c2 <_printf_float+0x28e>
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	07d9      	lsls	r1, r3, #31
 800b5c0:	d5d8      	bpl.n	800b574 <_printf_float+0x240>
 800b5c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	47b8      	blx	r7
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	f43f af0e 	beq.w	800b3ee <_printf_float+0xba>
 800b5d2:	f04f 0900 	mov.w	r9, #0
 800b5d6:	f104 0a1a 	add.w	sl, r4, #26
 800b5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5dc:	425b      	negs	r3, r3
 800b5de:	454b      	cmp	r3, r9
 800b5e0:	dc01      	bgt.n	800b5e6 <_printf_float+0x2b2>
 800b5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5e4:	e794      	b.n	800b510 <_printf_float+0x1dc>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	4652      	mov	r2, sl
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	47b8      	blx	r7
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	f43f aefc 	beq.w	800b3ee <_printf_float+0xba>
 800b5f6:	f109 0901 	add.w	r9, r9, #1
 800b5fa:	e7ee      	b.n	800b5da <_printf_float+0x2a6>
 800b5fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b600:	429a      	cmp	r2, r3
 800b602:	bfa8      	it	ge
 800b604:	461a      	movge	r2, r3
 800b606:	2a00      	cmp	r2, #0
 800b608:	4691      	mov	r9, r2
 800b60a:	dd07      	ble.n	800b61c <_printf_float+0x2e8>
 800b60c:	4613      	mov	r3, r2
 800b60e:	4631      	mov	r1, r6
 800b610:	4642      	mov	r2, r8
 800b612:	4628      	mov	r0, r5
 800b614:	47b8      	blx	r7
 800b616:	3001      	adds	r0, #1
 800b618:	f43f aee9 	beq.w	800b3ee <_printf_float+0xba>
 800b61c:	f104 031a 	add.w	r3, r4, #26
 800b620:	f04f 0b00 	mov.w	fp, #0
 800b624:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b628:	9306      	str	r3, [sp, #24]
 800b62a:	e015      	b.n	800b658 <_printf_float+0x324>
 800b62c:	7fefffff 	.word	0x7fefffff
 800b630:	08012b44 	.word	0x08012b44
 800b634:	08012b40 	.word	0x08012b40
 800b638:	08012b4c 	.word	0x08012b4c
 800b63c:	08012b48 	.word	0x08012b48
 800b640:	08012d6b 	.word	0x08012d6b
 800b644:	2301      	movs	r3, #1
 800b646:	9a06      	ldr	r2, [sp, #24]
 800b648:	4631      	mov	r1, r6
 800b64a:	4628      	mov	r0, r5
 800b64c:	47b8      	blx	r7
 800b64e:	3001      	adds	r0, #1
 800b650:	f43f aecd 	beq.w	800b3ee <_printf_float+0xba>
 800b654:	f10b 0b01 	add.w	fp, fp, #1
 800b658:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b65c:	ebaa 0309 	sub.w	r3, sl, r9
 800b660:	455b      	cmp	r3, fp
 800b662:	dcef      	bgt.n	800b644 <_printf_float+0x310>
 800b664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b668:	429a      	cmp	r2, r3
 800b66a:	44d0      	add	r8, sl
 800b66c:	db15      	blt.n	800b69a <_printf_float+0x366>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	07da      	lsls	r2, r3, #31
 800b672:	d412      	bmi.n	800b69a <_printf_float+0x366>
 800b674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b676:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b678:	eba3 020a 	sub.w	r2, r3, sl
 800b67c:	eba3 0a01 	sub.w	sl, r3, r1
 800b680:	4592      	cmp	sl, r2
 800b682:	bfa8      	it	ge
 800b684:	4692      	movge	sl, r2
 800b686:	f1ba 0f00 	cmp.w	sl, #0
 800b68a:	dc0e      	bgt.n	800b6aa <_printf_float+0x376>
 800b68c:	f04f 0800 	mov.w	r8, #0
 800b690:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b694:	f104 091a 	add.w	r9, r4, #26
 800b698:	e019      	b.n	800b6ce <_printf_float+0x39a>
 800b69a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	47b8      	blx	r7
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d1e5      	bne.n	800b674 <_printf_float+0x340>
 800b6a8:	e6a1      	b.n	800b3ee <_printf_float+0xba>
 800b6aa:	4653      	mov	r3, sl
 800b6ac:	4642      	mov	r2, r8
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	47b8      	blx	r7
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	d1e9      	bne.n	800b68c <_printf_float+0x358>
 800b6b8:	e699      	b.n	800b3ee <_printf_float+0xba>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	464a      	mov	r2, r9
 800b6be:	4631      	mov	r1, r6
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	47b8      	blx	r7
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	f43f ae92 	beq.w	800b3ee <_printf_float+0xba>
 800b6ca:	f108 0801 	add.w	r8, r8, #1
 800b6ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	eba3 030a 	sub.w	r3, r3, sl
 800b6d8:	4543      	cmp	r3, r8
 800b6da:	dcee      	bgt.n	800b6ba <_printf_float+0x386>
 800b6dc:	e74a      	b.n	800b574 <_printf_float+0x240>
 800b6de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6e0:	2a01      	cmp	r2, #1
 800b6e2:	dc01      	bgt.n	800b6e8 <_printf_float+0x3b4>
 800b6e4:	07db      	lsls	r3, r3, #31
 800b6e6:	d53a      	bpl.n	800b75e <_printf_float+0x42a>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	4642      	mov	r2, r8
 800b6ec:	4631      	mov	r1, r6
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	47b8      	blx	r7
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	f43f ae7b 	beq.w	800b3ee <_printf_float+0xba>
 800b6f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4628      	mov	r0, r5
 800b700:	47b8      	blx	r7
 800b702:	3001      	adds	r0, #1
 800b704:	f108 0801 	add.w	r8, r8, #1
 800b708:	f43f ae71 	beq.w	800b3ee <_printf_float+0xba>
 800b70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b70e:	2200      	movs	r2, #0
 800b710:	f103 3aff 	add.w	sl, r3, #4294967295
 800b714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b718:	2300      	movs	r3, #0
 800b71a:	f7f5 f9dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800b71e:	b9c8      	cbnz	r0, 800b754 <_printf_float+0x420>
 800b720:	4653      	mov	r3, sl
 800b722:	4642      	mov	r2, r8
 800b724:	4631      	mov	r1, r6
 800b726:	4628      	mov	r0, r5
 800b728:	47b8      	blx	r7
 800b72a:	3001      	adds	r0, #1
 800b72c:	d10e      	bne.n	800b74c <_printf_float+0x418>
 800b72e:	e65e      	b.n	800b3ee <_printf_float+0xba>
 800b730:	2301      	movs	r3, #1
 800b732:	4652      	mov	r2, sl
 800b734:	4631      	mov	r1, r6
 800b736:	4628      	mov	r0, r5
 800b738:	47b8      	blx	r7
 800b73a:	3001      	adds	r0, #1
 800b73c:	f43f ae57 	beq.w	800b3ee <_printf_float+0xba>
 800b740:	f108 0801 	add.w	r8, r8, #1
 800b744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b746:	3b01      	subs	r3, #1
 800b748:	4543      	cmp	r3, r8
 800b74a:	dcf1      	bgt.n	800b730 <_printf_float+0x3fc>
 800b74c:	464b      	mov	r3, r9
 800b74e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b752:	e6de      	b.n	800b512 <_printf_float+0x1de>
 800b754:	f04f 0800 	mov.w	r8, #0
 800b758:	f104 0a1a 	add.w	sl, r4, #26
 800b75c:	e7f2      	b.n	800b744 <_printf_float+0x410>
 800b75e:	2301      	movs	r3, #1
 800b760:	e7df      	b.n	800b722 <_printf_float+0x3ee>
 800b762:	2301      	movs	r3, #1
 800b764:	464a      	mov	r2, r9
 800b766:	4631      	mov	r1, r6
 800b768:	4628      	mov	r0, r5
 800b76a:	47b8      	blx	r7
 800b76c:	3001      	adds	r0, #1
 800b76e:	f43f ae3e 	beq.w	800b3ee <_printf_float+0xba>
 800b772:	f108 0801 	add.w	r8, r8, #1
 800b776:	68e3      	ldr	r3, [r4, #12]
 800b778:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b77a:	1a9b      	subs	r3, r3, r2
 800b77c:	4543      	cmp	r3, r8
 800b77e:	dcf0      	bgt.n	800b762 <_printf_float+0x42e>
 800b780:	e6fc      	b.n	800b57c <_printf_float+0x248>
 800b782:	f04f 0800 	mov.w	r8, #0
 800b786:	f104 0919 	add.w	r9, r4, #25
 800b78a:	e7f4      	b.n	800b776 <_printf_float+0x442>
 800b78c:	2900      	cmp	r1, #0
 800b78e:	f43f ae8b 	beq.w	800b4a8 <_printf_float+0x174>
 800b792:	2300      	movs	r3, #0
 800b794:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b798:	ab09      	add	r3, sp, #36	; 0x24
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	ec49 8b10 	vmov	d0, r8, r9
 800b7a0:	6022      	str	r2, [r4, #0]
 800b7a2:	f8cd a004 	str.w	sl, [sp, #4]
 800b7a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f7ff fd2e 	bl	800b20c <__cvt>
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	e648      	b.n	800b446 <_printf_float+0x112>

0800b7b4 <_printf_common>:
 800b7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b8:	4691      	mov	r9, r2
 800b7ba:	461f      	mov	r7, r3
 800b7bc:	688a      	ldr	r2, [r1, #8]
 800b7be:	690b      	ldr	r3, [r1, #16]
 800b7c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	bfb8      	it	lt
 800b7c8:	4613      	movlt	r3, r2
 800b7ca:	f8c9 3000 	str.w	r3, [r9]
 800b7ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	b112      	cbz	r2, 800b7de <_printf_common+0x2a>
 800b7d8:	3301      	adds	r3, #1
 800b7da:	f8c9 3000 	str.w	r3, [r9]
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	0699      	lsls	r1, r3, #26
 800b7e2:	bf42      	ittt	mi
 800b7e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b7e8:	3302      	addmi	r3, #2
 800b7ea:	f8c9 3000 	strmi.w	r3, [r9]
 800b7ee:	6825      	ldr	r5, [r4, #0]
 800b7f0:	f015 0506 	ands.w	r5, r5, #6
 800b7f4:	d107      	bne.n	800b806 <_printf_common+0x52>
 800b7f6:	f104 0a19 	add.w	sl, r4, #25
 800b7fa:	68e3      	ldr	r3, [r4, #12]
 800b7fc:	f8d9 2000 	ldr.w	r2, [r9]
 800b800:	1a9b      	subs	r3, r3, r2
 800b802:	42ab      	cmp	r3, r5
 800b804:	dc28      	bgt.n	800b858 <_printf_common+0xa4>
 800b806:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b80a:	6822      	ldr	r2, [r4, #0]
 800b80c:	3300      	adds	r3, #0
 800b80e:	bf18      	it	ne
 800b810:	2301      	movne	r3, #1
 800b812:	0692      	lsls	r2, r2, #26
 800b814:	d42d      	bmi.n	800b872 <_printf_common+0xbe>
 800b816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b81a:	4639      	mov	r1, r7
 800b81c:	4630      	mov	r0, r6
 800b81e:	47c0      	blx	r8
 800b820:	3001      	adds	r0, #1
 800b822:	d020      	beq.n	800b866 <_printf_common+0xb2>
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	68e5      	ldr	r5, [r4, #12]
 800b828:	f8d9 2000 	ldr.w	r2, [r9]
 800b82c:	f003 0306 	and.w	r3, r3, #6
 800b830:	2b04      	cmp	r3, #4
 800b832:	bf08      	it	eq
 800b834:	1aad      	subeq	r5, r5, r2
 800b836:	68a3      	ldr	r3, [r4, #8]
 800b838:	6922      	ldr	r2, [r4, #16]
 800b83a:	bf0c      	ite	eq
 800b83c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b840:	2500      	movne	r5, #0
 800b842:	4293      	cmp	r3, r2
 800b844:	bfc4      	itt	gt
 800b846:	1a9b      	subgt	r3, r3, r2
 800b848:	18ed      	addgt	r5, r5, r3
 800b84a:	f04f 0900 	mov.w	r9, #0
 800b84e:	341a      	adds	r4, #26
 800b850:	454d      	cmp	r5, r9
 800b852:	d11a      	bne.n	800b88a <_printf_common+0xd6>
 800b854:	2000      	movs	r0, #0
 800b856:	e008      	b.n	800b86a <_printf_common+0xb6>
 800b858:	2301      	movs	r3, #1
 800b85a:	4652      	mov	r2, sl
 800b85c:	4639      	mov	r1, r7
 800b85e:	4630      	mov	r0, r6
 800b860:	47c0      	blx	r8
 800b862:	3001      	adds	r0, #1
 800b864:	d103      	bne.n	800b86e <_printf_common+0xba>
 800b866:	f04f 30ff 	mov.w	r0, #4294967295
 800b86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86e:	3501      	adds	r5, #1
 800b870:	e7c3      	b.n	800b7fa <_printf_common+0x46>
 800b872:	18e1      	adds	r1, r4, r3
 800b874:	1c5a      	adds	r2, r3, #1
 800b876:	2030      	movs	r0, #48	; 0x30
 800b878:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b87c:	4422      	add	r2, r4
 800b87e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b882:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b886:	3302      	adds	r3, #2
 800b888:	e7c5      	b.n	800b816 <_printf_common+0x62>
 800b88a:	2301      	movs	r3, #1
 800b88c:	4622      	mov	r2, r4
 800b88e:	4639      	mov	r1, r7
 800b890:	4630      	mov	r0, r6
 800b892:	47c0      	blx	r8
 800b894:	3001      	adds	r0, #1
 800b896:	d0e6      	beq.n	800b866 <_printf_common+0xb2>
 800b898:	f109 0901 	add.w	r9, r9, #1
 800b89c:	e7d8      	b.n	800b850 <_printf_common+0x9c>
	...

0800b8a0 <_printf_i>:
 800b8a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	7e09      	ldrb	r1, [r1, #24]
 800b8ac:	b085      	sub	sp, #20
 800b8ae:	296e      	cmp	r1, #110	; 0x6e
 800b8b0:	4617      	mov	r7, r2
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	4698      	mov	r8, r3
 800b8b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8b8:	f000 80b3 	beq.w	800ba22 <_printf_i+0x182>
 800b8bc:	d822      	bhi.n	800b904 <_printf_i+0x64>
 800b8be:	2963      	cmp	r1, #99	; 0x63
 800b8c0:	d036      	beq.n	800b930 <_printf_i+0x90>
 800b8c2:	d80a      	bhi.n	800b8da <_printf_i+0x3a>
 800b8c4:	2900      	cmp	r1, #0
 800b8c6:	f000 80b9 	beq.w	800ba3c <_printf_i+0x19c>
 800b8ca:	2958      	cmp	r1, #88	; 0x58
 800b8cc:	f000 8083 	beq.w	800b9d6 <_printf_i+0x136>
 800b8d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b8d8:	e032      	b.n	800b940 <_printf_i+0xa0>
 800b8da:	2964      	cmp	r1, #100	; 0x64
 800b8dc:	d001      	beq.n	800b8e2 <_printf_i+0x42>
 800b8de:	2969      	cmp	r1, #105	; 0x69
 800b8e0:	d1f6      	bne.n	800b8d0 <_printf_i+0x30>
 800b8e2:	6820      	ldr	r0, [r4, #0]
 800b8e4:	6813      	ldr	r3, [r2, #0]
 800b8e6:	0605      	lsls	r5, r0, #24
 800b8e8:	f103 0104 	add.w	r1, r3, #4
 800b8ec:	d52a      	bpl.n	800b944 <_printf_i+0xa4>
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6011      	str	r1, [r2, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	da03      	bge.n	800b8fe <_printf_i+0x5e>
 800b8f6:	222d      	movs	r2, #45	; 0x2d
 800b8f8:	425b      	negs	r3, r3
 800b8fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b8fe:	486f      	ldr	r0, [pc, #444]	; (800babc <_printf_i+0x21c>)
 800b900:	220a      	movs	r2, #10
 800b902:	e039      	b.n	800b978 <_printf_i+0xd8>
 800b904:	2973      	cmp	r1, #115	; 0x73
 800b906:	f000 809d 	beq.w	800ba44 <_printf_i+0x1a4>
 800b90a:	d808      	bhi.n	800b91e <_printf_i+0x7e>
 800b90c:	296f      	cmp	r1, #111	; 0x6f
 800b90e:	d020      	beq.n	800b952 <_printf_i+0xb2>
 800b910:	2970      	cmp	r1, #112	; 0x70
 800b912:	d1dd      	bne.n	800b8d0 <_printf_i+0x30>
 800b914:	6823      	ldr	r3, [r4, #0]
 800b916:	f043 0320 	orr.w	r3, r3, #32
 800b91a:	6023      	str	r3, [r4, #0]
 800b91c:	e003      	b.n	800b926 <_printf_i+0x86>
 800b91e:	2975      	cmp	r1, #117	; 0x75
 800b920:	d017      	beq.n	800b952 <_printf_i+0xb2>
 800b922:	2978      	cmp	r1, #120	; 0x78
 800b924:	d1d4      	bne.n	800b8d0 <_printf_i+0x30>
 800b926:	2378      	movs	r3, #120	; 0x78
 800b928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b92c:	4864      	ldr	r0, [pc, #400]	; (800bac0 <_printf_i+0x220>)
 800b92e:	e055      	b.n	800b9dc <_printf_i+0x13c>
 800b930:	6813      	ldr	r3, [r2, #0]
 800b932:	1d19      	adds	r1, r3, #4
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	6011      	str	r1, [r2, #0]
 800b938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b93c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b940:	2301      	movs	r3, #1
 800b942:	e08c      	b.n	800ba5e <_printf_i+0x1be>
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6011      	str	r1, [r2, #0]
 800b948:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b94c:	bf18      	it	ne
 800b94e:	b21b      	sxthne	r3, r3
 800b950:	e7cf      	b.n	800b8f2 <_printf_i+0x52>
 800b952:	6813      	ldr	r3, [r2, #0]
 800b954:	6825      	ldr	r5, [r4, #0]
 800b956:	1d18      	adds	r0, r3, #4
 800b958:	6010      	str	r0, [r2, #0]
 800b95a:	0628      	lsls	r0, r5, #24
 800b95c:	d501      	bpl.n	800b962 <_printf_i+0xc2>
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	e002      	b.n	800b968 <_printf_i+0xc8>
 800b962:	0668      	lsls	r0, r5, #25
 800b964:	d5fb      	bpl.n	800b95e <_printf_i+0xbe>
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	4854      	ldr	r0, [pc, #336]	; (800babc <_printf_i+0x21c>)
 800b96a:	296f      	cmp	r1, #111	; 0x6f
 800b96c:	bf14      	ite	ne
 800b96e:	220a      	movne	r2, #10
 800b970:	2208      	moveq	r2, #8
 800b972:	2100      	movs	r1, #0
 800b974:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b978:	6865      	ldr	r5, [r4, #4]
 800b97a:	60a5      	str	r5, [r4, #8]
 800b97c:	2d00      	cmp	r5, #0
 800b97e:	f2c0 8095 	blt.w	800baac <_printf_i+0x20c>
 800b982:	6821      	ldr	r1, [r4, #0]
 800b984:	f021 0104 	bic.w	r1, r1, #4
 800b988:	6021      	str	r1, [r4, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d13d      	bne.n	800ba0a <_printf_i+0x16a>
 800b98e:	2d00      	cmp	r5, #0
 800b990:	f040 808e 	bne.w	800bab0 <_printf_i+0x210>
 800b994:	4665      	mov	r5, ip
 800b996:	2a08      	cmp	r2, #8
 800b998:	d10b      	bne.n	800b9b2 <_printf_i+0x112>
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	07db      	lsls	r3, r3, #31
 800b99e:	d508      	bpl.n	800b9b2 <_printf_i+0x112>
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	6862      	ldr	r2, [r4, #4]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	bfde      	ittt	le
 800b9a8:	2330      	movle	r3, #48	; 0x30
 800b9aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9b2:	ebac 0305 	sub.w	r3, ip, r5
 800b9b6:	6123      	str	r3, [r4, #16]
 800b9b8:	f8cd 8000 	str.w	r8, [sp]
 800b9bc:	463b      	mov	r3, r7
 800b9be:	aa03      	add	r2, sp, #12
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7ff fef6 	bl	800b7b4 <_printf_common>
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d14d      	bne.n	800ba68 <_printf_i+0x1c8>
 800b9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d0:	b005      	add	sp, #20
 800b9d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9d6:	4839      	ldr	r0, [pc, #228]	; (800babc <_printf_i+0x21c>)
 800b9d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b9dc:	6813      	ldr	r3, [r2, #0]
 800b9de:	6821      	ldr	r1, [r4, #0]
 800b9e0:	1d1d      	adds	r5, r3, #4
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6015      	str	r5, [r2, #0]
 800b9e6:	060a      	lsls	r2, r1, #24
 800b9e8:	d50b      	bpl.n	800ba02 <_printf_i+0x162>
 800b9ea:	07ca      	lsls	r2, r1, #31
 800b9ec:	bf44      	itt	mi
 800b9ee:	f041 0120 	orrmi.w	r1, r1, #32
 800b9f2:	6021      	strmi	r1, [r4, #0]
 800b9f4:	b91b      	cbnz	r3, 800b9fe <_printf_i+0x15e>
 800b9f6:	6822      	ldr	r2, [r4, #0]
 800b9f8:	f022 0220 	bic.w	r2, r2, #32
 800b9fc:	6022      	str	r2, [r4, #0]
 800b9fe:	2210      	movs	r2, #16
 800ba00:	e7b7      	b.n	800b972 <_printf_i+0xd2>
 800ba02:	064d      	lsls	r5, r1, #25
 800ba04:	bf48      	it	mi
 800ba06:	b29b      	uxthmi	r3, r3
 800ba08:	e7ef      	b.n	800b9ea <_printf_i+0x14a>
 800ba0a:	4665      	mov	r5, ip
 800ba0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba10:	fb02 3311 	mls	r3, r2, r1, r3
 800ba14:	5cc3      	ldrb	r3, [r0, r3]
 800ba16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	2900      	cmp	r1, #0
 800ba1e:	d1f5      	bne.n	800ba0c <_printf_i+0x16c>
 800ba20:	e7b9      	b.n	800b996 <_printf_i+0xf6>
 800ba22:	6813      	ldr	r3, [r2, #0]
 800ba24:	6825      	ldr	r5, [r4, #0]
 800ba26:	6961      	ldr	r1, [r4, #20]
 800ba28:	1d18      	adds	r0, r3, #4
 800ba2a:	6010      	str	r0, [r2, #0]
 800ba2c:	0628      	lsls	r0, r5, #24
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	d501      	bpl.n	800ba36 <_printf_i+0x196>
 800ba32:	6019      	str	r1, [r3, #0]
 800ba34:	e002      	b.n	800ba3c <_printf_i+0x19c>
 800ba36:	066a      	lsls	r2, r5, #25
 800ba38:	d5fb      	bpl.n	800ba32 <_printf_i+0x192>
 800ba3a:	8019      	strh	r1, [r3, #0]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	6123      	str	r3, [r4, #16]
 800ba40:	4665      	mov	r5, ip
 800ba42:	e7b9      	b.n	800b9b8 <_printf_i+0x118>
 800ba44:	6813      	ldr	r3, [r2, #0]
 800ba46:	1d19      	adds	r1, r3, #4
 800ba48:	6011      	str	r1, [r2, #0]
 800ba4a:	681d      	ldr	r5, [r3, #0]
 800ba4c:	6862      	ldr	r2, [r4, #4]
 800ba4e:	2100      	movs	r1, #0
 800ba50:	4628      	mov	r0, r5
 800ba52:	f7f4 fbcd 	bl	80001f0 <memchr>
 800ba56:	b108      	cbz	r0, 800ba5c <_printf_i+0x1bc>
 800ba58:	1b40      	subs	r0, r0, r5
 800ba5a:	6060      	str	r0, [r4, #4]
 800ba5c:	6863      	ldr	r3, [r4, #4]
 800ba5e:	6123      	str	r3, [r4, #16]
 800ba60:	2300      	movs	r3, #0
 800ba62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba66:	e7a7      	b.n	800b9b8 <_printf_i+0x118>
 800ba68:	6923      	ldr	r3, [r4, #16]
 800ba6a:	462a      	mov	r2, r5
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	4630      	mov	r0, r6
 800ba70:	47c0      	blx	r8
 800ba72:	3001      	adds	r0, #1
 800ba74:	d0aa      	beq.n	800b9cc <_printf_i+0x12c>
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	079b      	lsls	r3, r3, #30
 800ba7a:	d413      	bmi.n	800baa4 <_printf_i+0x204>
 800ba7c:	68e0      	ldr	r0, [r4, #12]
 800ba7e:	9b03      	ldr	r3, [sp, #12]
 800ba80:	4298      	cmp	r0, r3
 800ba82:	bfb8      	it	lt
 800ba84:	4618      	movlt	r0, r3
 800ba86:	e7a3      	b.n	800b9d0 <_printf_i+0x130>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	464a      	mov	r2, r9
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	4630      	mov	r0, r6
 800ba90:	47c0      	blx	r8
 800ba92:	3001      	adds	r0, #1
 800ba94:	d09a      	beq.n	800b9cc <_printf_i+0x12c>
 800ba96:	3501      	adds	r5, #1
 800ba98:	68e3      	ldr	r3, [r4, #12]
 800ba9a:	9a03      	ldr	r2, [sp, #12]
 800ba9c:	1a9b      	subs	r3, r3, r2
 800ba9e:	42ab      	cmp	r3, r5
 800baa0:	dcf2      	bgt.n	800ba88 <_printf_i+0x1e8>
 800baa2:	e7eb      	b.n	800ba7c <_printf_i+0x1dc>
 800baa4:	2500      	movs	r5, #0
 800baa6:	f104 0919 	add.w	r9, r4, #25
 800baaa:	e7f5      	b.n	800ba98 <_printf_i+0x1f8>
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1ac      	bne.n	800ba0a <_printf_i+0x16a>
 800bab0:	7803      	ldrb	r3, [r0, #0]
 800bab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bab6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800baba:	e76c      	b.n	800b996 <_printf_i+0xf6>
 800babc:	08012b50 	.word	0x08012b50
 800bac0:	08012b61 	.word	0x08012b61

0800bac4 <_scanf_float>:
 800bac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac8:	469a      	mov	sl, r3
 800baca:	688b      	ldr	r3, [r1, #8]
 800bacc:	4616      	mov	r6, r2
 800bace:	1e5a      	subs	r2, r3, #1
 800bad0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bad4:	b087      	sub	sp, #28
 800bad6:	bf83      	ittte	hi
 800bad8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800badc:	189b      	addhi	r3, r3, r2
 800bade:	9301      	strhi	r3, [sp, #4]
 800bae0:	2300      	movls	r3, #0
 800bae2:	bf86      	itte	hi
 800bae4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bae8:	608b      	strhi	r3, [r1, #8]
 800baea:	9301      	strls	r3, [sp, #4]
 800baec:	680b      	ldr	r3, [r1, #0]
 800baee:	4688      	mov	r8, r1
 800baf0:	f04f 0b00 	mov.w	fp, #0
 800baf4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800baf8:	f848 3b1c 	str.w	r3, [r8], #28
 800bafc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800bb00:	4607      	mov	r7, r0
 800bb02:	460c      	mov	r4, r1
 800bb04:	4645      	mov	r5, r8
 800bb06:	465a      	mov	r2, fp
 800bb08:	46d9      	mov	r9, fp
 800bb0a:	f8cd b008 	str.w	fp, [sp, #8]
 800bb0e:	68a1      	ldr	r1, [r4, #8]
 800bb10:	b181      	cbz	r1, 800bb34 <_scanf_float+0x70>
 800bb12:	6833      	ldr	r3, [r6, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	2b49      	cmp	r3, #73	; 0x49
 800bb18:	d071      	beq.n	800bbfe <_scanf_float+0x13a>
 800bb1a:	d84d      	bhi.n	800bbb8 <_scanf_float+0xf4>
 800bb1c:	2b39      	cmp	r3, #57	; 0x39
 800bb1e:	d840      	bhi.n	800bba2 <_scanf_float+0xde>
 800bb20:	2b31      	cmp	r3, #49	; 0x31
 800bb22:	f080 8088 	bcs.w	800bc36 <_scanf_float+0x172>
 800bb26:	2b2d      	cmp	r3, #45	; 0x2d
 800bb28:	f000 8090 	beq.w	800bc4c <_scanf_float+0x188>
 800bb2c:	d815      	bhi.n	800bb5a <_scanf_float+0x96>
 800bb2e:	2b2b      	cmp	r3, #43	; 0x2b
 800bb30:	f000 808c 	beq.w	800bc4c <_scanf_float+0x188>
 800bb34:	f1b9 0f00 	cmp.w	r9, #0
 800bb38:	d003      	beq.n	800bb42 <_scanf_float+0x7e>
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	3a01      	subs	r2, #1
 800bb44:	2a01      	cmp	r2, #1
 800bb46:	f200 80ea 	bhi.w	800bd1e <_scanf_float+0x25a>
 800bb4a:	4545      	cmp	r5, r8
 800bb4c:	f200 80dc 	bhi.w	800bd08 <_scanf_float+0x244>
 800bb50:	2601      	movs	r6, #1
 800bb52:	4630      	mov	r0, r6
 800bb54:	b007      	add	sp, #28
 800bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5a:	2b2e      	cmp	r3, #46	; 0x2e
 800bb5c:	f000 809f 	beq.w	800bc9e <_scanf_float+0x1da>
 800bb60:	2b30      	cmp	r3, #48	; 0x30
 800bb62:	d1e7      	bne.n	800bb34 <_scanf_float+0x70>
 800bb64:	6820      	ldr	r0, [r4, #0]
 800bb66:	f410 7f80 	tst.w	r0, #256	; 0x100
 800bb6a:	d064      	beq.n	800bc36 <_scanf_float+0x172>
 800bb6c:	9b01      	ldr	r3, [sp, #4]
 800bb6e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800bb72:	6020      	str	r0, [r4, #0]
 800bb74:	f109 0901 	add.w	r9, r9, #1
 800bb78:	b11b      	cbz	r3, 800bb82 <_scanf_float+0xbe>
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	3101      	adds	r1, #1
 800bb7e:	9301      	str	r3, [sp, #4]
 800bb80:	60a1      	str	r1, [r4, #8]
 800bb82:	68a3      	ldr	r3, [r4, #8]
 800bb84:	3b01      	subs	r3, #1
 800bb86:	60a3      	str	r3, [r4, #8]
 800bb88:	6923      	ldr	r3, [r4, #16]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	6123      	str	r3, [r4, #16]
 800bb8e:	6873      	ldr	r3, [r6, #4]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	6073      	str	r3, [r6, #4]
 800bb96:	f340 80ac 	ble.w	800bcf2 <_scanf_float+0x22e>
 800bb9a:	6833      	ldr	r3, [r6, #0]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	6033      	str	r3, [r6, #0]
 800bba0:	e7b5      	b.n	800bb0e <_scanf_float+0x4a>
 800bba2:	2b45      	cmp	r3, #69	; 0x45
 800bba4:	f000 8085 	beq.w	800bcb2 <_scanf_float+0x1ee>
 800bba8:	2b46      	cmp	r3, #70	; 0x46
 800bbaa:	d06a      	beq.n	800bc82 <_scanf_float+0x1be>
 800bbac:	2b41      	cmp	r3, #65	; 0x41
 800bbae:	d1c1      	bne.n	800bb34 <_scanf_float+0x70>
 800bbb0:	2a01      	cmp	r2, #1
 800bbb2:	d1bf      	bne.n	800bb34 <_scanf_float+0x70>
 800bbb4:	2202      	movs	r2, #2
 800bbb6:	e046      	b.n	800bc46 <_scanf_float+0x182>
 800bbb8:	2b65      	cmp	r3, #101	; 0x65
 800bbba:	d07a      	beq.n	800bcb2 <_scanf_float+0x1ee>
 800bbbc:	d818      	bhi.n	800bbf0 <_scanf_float+0x12c>
 800bbbe:	2b54      	cmp	r3, #84	; 0x54
 800bbc0:	d066      	beq.n	800bc90 <_scanf_float+0x1cc>
 800bbc2:	d811      	bhi.n	800bbe8 <_scanf_float+0x124>
 800bbc4:	2b4e      	cmp	r3, #78	; 0x4e
 800bbc6:	d1b5      	bne.n	800bb34 <_scanf_float+0x70>
 800bbc8:	2a00      	cmp	r2, #0
 800bbca:	d146      	bne.n	800bc5a <_scanf_float+0x196>
 800bbcc:	f1b9 0f00 	cmp.w	r9, #0
 800bbd0:	d145      	bne.n	800bc5e <_scanf_float+0x19a>
 800bbd2:	6821      	ldr	r1, [r4, #0]
 800bbd4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800bbd8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bbdc:	d13f      	bne.n	800bc5e <_scanf_float+0x19a>
 800bbde:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bbe2:	6021      	str	r1, [r4, #0]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	e02e      	b.n	800bc46 <_scanf_float+0x182>
 800bbe8:	2b59      	cmp	r3, #89	; 0x59
 800bbea:	d01e      	beq.n	800bc2a <_scanf_float+0x166>
 800bbec:	2b61      	cmp	r3, #97	; 0x61
 800bbee:	e7de      	b.n	800bbae <_scanf_float+0xea>
 800bbf0:	2b6e      	cmp	r3, #110	; 0x6e
 800bbf2:	d0e9      	beq.n	800bbc8 <_scanf_float+0x104>
 800bbf4:	d815      	bhi.n	800bc22 <_scanf_float+0x15e>
 800bbf6:	2b66      	cmp	r3, #102	; 0x66
 800bbf8:	d043      	beq.n	800bc82 <_scanf_float+0x1be>
 800bbfa:	2b69      	cmp	r3, #105	; 0x69
 800bbfc:	d19a      	bne.n	800bb34 <_scanf_float+0x70>
 800bbfe:	f1bb 0f00 	cmp.w	fp, #0
 800bc02:	d138      	bne.n	800bc76 <_scanf_float+0x1b2>
 800bc04:	f1b9 0f00 	cmp.w	r9, #0
 800bc08:	d197      	bne.n	800bb3a <_scanf_float+0x76>
 800bc0a:	6821      	ldr	r1, [r4, #0]
 800bc0c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800bc10:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bc14:	d195      	bne.n	800bb42 <_scanf_float+0x7e>
 800bc16:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bc1a:	6021      	str	r1, [r4, #0]
 800bc1c:	f04f 0b01 	mov.w	fp, #1
 800bc20:	e011      	b.n	800bc46 <_scanf_float+0x182>
 800bc22:	2b74      	cmp	r3, #116	; 0x74
 800bc24:	d034      	beq.n	800bc90 <_scanf_float+0x1cc>
 800bc26:	2b79      	cmp	r3, #121	; 0x79
 800bc28:	d184      	bne.n	800bb34 <_scanf_float+0x70>
 800bc2a:	f1bb 0f07 	cmp.w	fp, #7
 800bc2e:	d181      	bne.n	800bb34 <_scanf_float+0x70>
 800bc30:	f04f 0b08 	mov.w	fp, #8
 800bc34:	e007      	b.n	800bc46 <_scanf_float+0x182>
 800bc36:	eb12 0f0b 	cmn.w	r2, fp
 800bc3a:	f47f af7b 	bne.w	800bb34 <_scanf_float+0x70>
 800bc3e:	6821      	ldr	r1, [r4, #0]
 800bc40:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800bc44:	6021      	str	r1, [r4, #0]
 800bc46:	702b      	strb	r3, [r5, #0]
 800bc48:	3501      	adds	r5, #1
 800bc4a:	e79a      	b.n	800bb82 <_scanf_float+0xbe>
 800bc4c:	6821      	ldr	r1, [r4, #0]
 800bc4e:	0608      	lsls	r0, r1, #24
 800bc50:	f57f af70 	bpl.w	800bb34 <_scanf_float+0x70>
 800bc54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bc58:	e7f4      	b.n	800bc44 <_scanf_float+0x180>
 800bc5a:	2a02      	cmp	r2, #2
 800bc5c:	d047      	beq.n	800bcee <_scanf_float+0x22a>
 800bc5e:	f1bb 0f01 	cmp.w	fp, #1
 800bc62:	d003      	beq.n	800bc6c <_scanf_float+0x1a8>
 800bc64:	f1bb 0f04 	cmp.w	fp, #4
 800bc68:	f47f af64 	bne.w	800bb34 <_scanf_float+0x70>
 800bc6c:	f10b 0b01 	add.w	fp, fp, #1
 800bc70:	fa5f fb8b 	uxtb.w	fp, fp
 800bc74:	e7e7      	b.n	800bc46 <_scanf_float+0x182>
 800bc76:	f1bb 0f03 	cmp.w	fp, #3
 800bc7a:	d0f7      	beq.n	800bc6c <_scanf_float+0x1a8>
 800bc7c:	f1bb 0f05 	cmp.w	fp, #5
 800bc80:	e7f2      	b.n	800bc68 <_scanf_float+0x1a4>
 800bc82:	f1bb 0f02 	cmp.w	fp, #2
 800bc86:	f47f af55 	bne.w	800bb34 <_scanf_float+0x70>
 800bc8a:	f04f 0b03 	mov.w	fp, #3
 800bc8e:	e7da      	b.n	800bc46 <_scanf_float+0x182>
 800bc90:	f1bb 0f06 	cmp.w	fp, #6
 800bc94:	f47f af4e 	bne.w	800bb34 <_scanf_float+0x70>
 800bc98:	f04f 0b07 	mov.w	fp, #7
 800bc9c:	e7d3      	b.n	800bc46 <_scanf_float+0x182>
 800bc9e:	6821      	ldr	r1, [r4, #0]
 800bca0:	0588      	lsls	r0, r1, #22
 800bca2:	f57f af47 	bpl.w	800bb34 <_scanf_float+0x70>
 800bca6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800bcaa:	6021      	str	r1, [r4, #0]
 800bcac:	f8cd 9008 	str.w	r9, [sp, #8]
 800bcb0:	e7c9      	b.n	800bc46 <_scanf_float+0x182>
 800bcb2:	6821      	ldr	r1, [r4, #0]
 800bcb4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800bcb8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bcbc:	d006      	beq.n	800bccc <_scanf_float+0x208>
 800bcbe:	0548      	lsls	r0, r1, #21
 800bcc0:	f57f af38 	bpl.w	800bb34 <_scanf_float+0x70>
 800bcc4:	f1b9 0f00 	cmp.w	r9, #0
 800bcc8:	f43f af3b 	beq.w	800bb42 <_scanf_float+0x7e>
 800bccc:	0588      	lsls	r0, r1, #22
 800bcce:	bf58      	it	pl
 800bcd0:	9802      	ldrpl	r0, [sp, #8]
 800bcd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bcd6:	bf58      	it	pl
 800bcd8:	eba9 0000 	subpl.w	r0, r9, r0
 800bcdc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800bce0:	bf58      	it	pl
 800bce2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800bce6:	6021      	str	r1, [r4, #0]
 800bce8:	f04f 0900 	mov.w	r9, #0
 800bcec:	e7ab      	b.n	800bc46 <_scanf_float+0x182>
 800bcee:	2203      	movs	r2, #3
 800bcf0:	e7a9      	b.n	800bc46 <_scanf_float+0x182>
 800bcf2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bcf6:	9205      	str	r2, [sp, #20]
 800bcf8:	4631      	mov	r1, r6
 800bcfa:	4638      	mov	r0, r7
 800bcfc:	4798      	blx	r3
 800bcfe:	9a05      	ldr	r2, [sp, #20]
 800bd00:	2800      	cmp	r0, #0
 800bd02:	f43f af04 	beq.w	800bb0e <_scanf_float+0x4a>
 800bd06:	e715      	b.n	800bb34 <_scanf_float+0x70>
 800bd08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd0c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bd10:	4632      	mov	r2, r6
 800bd12:	4638      	mov	r0, r7
 800bd14:	4798      	blx	r3
 800bd16:	6923      	ldr	r3, [r4, #16]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	6123      	str	r3, [r4, #16]
 800bd1c:	e715      	b.n	800bb4a <_scanf_float+0x86>
 800bd1e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bd22:	2b06      	cmp	r3, #6
 800bd24:	d80a      	bhi.n	800bd3c <_scanf_float+0x278>
 800bd26:	f1bb 0f02 	cmp.w	fp, #2
 800bd2a:	d968      	bls.n	800bdfe <_scanf_float+0x33a>
 800bd2c:	f1ab 0b03 	sub.w	fp, fp, #3
 800bd30:	fa5f fb8b 	uxtb.w	fp, fp
 800bd34:	eba5 0b0b 	sub.w	fp, r5, fp
 800bd38:	455d      	cmp	r5, fp
 800bd3a:	d14b      	bne.n	800bdd4 <_scanf_float+0x310>
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	05da      	lsls	r2, r3, #23
 800bd40:	d51f      	bpl.n	800bd82 <_scanf_float+0x2be>
 800bd42:	055b      	lsls	r3, r3, #21
 800bd44:	d468      	bmi.n	800be18 <_scanf_float+0x354>
 800bd46:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bd4a:	6923      	ldr	r3, [r4, #16]
 800bd4c:	2965      	cmp	r1, #101	; 0x65
 800bd4e:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd52:	f105 3bff 	add.w	fp, r5, #4294967295
 800bd56:	6123      	str	r3, [r4, #16]
 800bd58:	d00d      	beq.n	800bd76 <_scanf_float+0x2b2>
 800bd5a:	2945      	cmp	r1, #69	; 0x45
 800bd5c:	d00b      	beq.n	800bd76 <_scanf_float+0x2b2>
 800bd5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd62:	4632      	mov	r2, r6
 800bd64:	4638      	mov	r0, r7
 800bd66:	4798      	blx	r3
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	f1a5 0b02 	sub.w	fp, r5, #2
 800bd74:	6123      	str	r3, [r4, #16]
 800bd76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd7a:	4632      	mov	r2, r6
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	4798      	blx	r3
 800bd80:	465d      	mov	r5, fp
 800bd82:	6826      	ldr	r6, [r4, #0]
 800bd84:	f016 0610 	ands.w	r6, r6, #16
 800bd88:	d17a      	bne.n	800be80 <_scanf_float+0x3bc>
 800bd8a:	702e      	strb	r6, [r5, #0]
 800bd8c:	6823      	ldr	r3, [r4, #0]
 800bd8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bd92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd96:	d142      	bne.n	800be1e <_scanf_float+0x35a>
 800bd98:	9b02      	ldr	r3, [sp, #8]
 800bd9a:	eba9 0303 	sub.w	r3, r9, r3
 800bd9e:	425a      	negs	r2, r3
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d149      	bne.n	800be38 <_scanf_float+0x374>
 800bda4:	2200      	movs	r2, #0
 800bda6:	4641      	mov	r1, r8
 800bda8:	4638      	mov	r0, r7
 800bdaa:	f000 ffb5 	bl	800cd18 <_strtod_r>
 800bdae:	6825      	ldr	r5, [r4, #0]
 800bdb0:	f8da 3000 	ldr.w	r3, [sl]
 800bdb4:	f015 0f02 	tst.w	r5, #2
 800bdb8:	f103 0204 	add.w	r2, r3, #4
 800bdbc:	ec59 8b10 	vmov	r8, r9, d0
 800bdc0:	f8ca 2000 	str.w	r2, [sl]
 800bdc4:	d043      	beq.n	800be4e <_scanf_float+0x38a>
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	e9c3 8900 	strd	r8, r9, [r3]
 800bdcc:	68e3      	ldr	r3, [r4, #12]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	60e3      	str	r3, [r4, #12]
 800bdd2:	e6be      	b.n	800bb52 <_scanf_float+0x8e>
 800bdd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bddc:	4632      	mov	r2, r6
 800bdde:	4638      	mov	r0, r7
 800bde0:	4798      	blx	r3
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	6123      	str	r3, [r4, #16]
 800bde8:	e7a6      	b.n	800bd38 <_scanf_float+0x274>
 800bdea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bdf2:	4632      	mov	r2, r6
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	4798      	blx	r3
 800bdf8:	6923      	ldr	r3, [r4, #16]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	6123      	str	r3, [r4, #16]
 800bdfe:	4545      	cmp	r5, r8
 800be00:	d8f3      	bhi.n	800bdea <_scanf_float+0x326>
 800be02:	e6a5      	b.n	800bb50 <_scanf_float+0x8c>
 800be04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800be0c:	4632      	mov	r2, r6
 800be0e:	4638      	mov	r0, r7
 800be10:	4798      	blx	r3
 800be12:	6923      	ldr	r3, [r4, #16]
 800be14:	3b01      	subs	r3, #1
 800be16:	6123      	str	r3, [r4, #16]
 800be18:	4545      	cmp	r5, r8
 800be1a:	d8f3      	bhi.n	800be04 <_scanf_float+0x340>
 800be1c:	e698      	b.n	800bb50 <_scanf_float+0x8c>
 800be1e:	9b03      	ldr	r3, [sp, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d0bf      	beq.n	800bda4 <_scanf_float+0x2e0>
 800be24:	9904      	ldr	r1, [sp, #16]
 800be26:	230a      	movs	r3, #10
 800be28:	4632      	mov	r2, r6
 800be2a:	3101      	adds	r1, #1
 800be2c:	4638      	mov	r0, r7
 800be2e:	f000 ffff 	bl	800ce30 <_strtol_r>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	9d04      	ldr	r5, [sp, #16]
 800be36:	1ac2      	subs	r2, r0, r3
 800be38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800be3c:	429d      	cmp	r5, r3
 800be3e:	bf28      	it	cs
 800be40:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800be44:	490f      	ldr	r1, [pc, #60]	; (800be84 <_scanf_float+0x3c0>)
 800be46:	4628      	mov	r0, r5
 800be48:	f000 f8b0 	bl	800bfac <siprintf>
 800be4c:	e7aa      	b.n	800bda4 <_scanf_float+0x2e0>
 800be4e:	f015 0504 	ands.w	r5, r5, #4
 800be52:	d1b8      	bne.n	800bdc6 <_scanf_float+0x302>
 800be54:	681f      	ldr	r7, [r3, #0]
 800be56:	ee10 2a10 	vmov	r2, s0
 800be5a:	464b      	mov	r3, r9
 800be5c:	ee10 0a10 	vmov	r0, s0
 800be60:	4649      	mov	r1, r9
 800be62:	f7f4 fe6b 	bl	8000b3c <__aeabi_dcmpun>
 800be66:	b128      	cbz	r0, 800be74 <_scanf_float+0x3b0>
 800be68:	4628      	mov	r0, r5
 800be6a:	f000 f899 	bl	800bfa0 <nanf>
 800be6e:	ed87 0a00 	vstr	s0, [r7]
 800be72:	e7ab      	b.n	800bdcc <_scanf_float+0x308>
 800be74:	4640      	mov	r0, r8
 800be76:	4649      	mov	r1, r9
 800be78:	f7f4 febe 	bl	8000bf8 <__aeabi_d2f>
 800be7c:	6038      	str	r0, [r7, #0]
 800be7e:	e7a5      	b.n	800bdcc <_scanf_float+0x308>
 800be80:	2600      	movs	r6, #0
 800be82:	e666      	b.n	800bb52 <_scanf_float+0x8e>
 800be84:	08012b72 	.word	0x08012b72

0800be88 <iprintf>:
 800be88:	b40f      	push	{r0, r1, r2, r3}
 800be8a:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <iprintf+0x2c>)
 800be8c:	b513      	push	{r0, r1, r4, lr}
 800be8e:	681c      	ldr	r4, [r3, #0]
 800be90:	b124      	cbz	r4, 800be9c <iprintf+0x14>
 800be92:	69a3      	ldr	r3, [r4, #24]
 800be94:	b913      	cbnz	r3, 800be9c <iprintf+0x14>
 800be96:	4620      	mov	r0, r4
 800be98:	f001 fff2 	bl	800de80 <__sinit>
 800be9c:	ab05      	add	r3, sp, #20
 800be9e:	9a04      	ldr	r2, [sp, #16]
 800bea0:	68a1      	ldr	r1, [r4, #8]
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	4620      	mov	r0, r4
 800bea6:	f003 fb85 	bl	800f5b4 <_vfiprintf_r>
 800beaa:	b002      	add	sp, #8
 800beac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb0:	b004      	add	sp, #16
 800beb2:	4770      	bx	lr
 800beb4:	200001e8 	.word	0x200001e8

0800beb8 <_puts_r>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	460e      	mov	r6, r1
 800bebc:	4605      	mov	r5, r0
 800bebe:	b118      	cbz	r0, 800bec8 <_puts_r+0x10>
 800bec0:	6983      	ldr	r3, [r0, #24]
 800bec2:	b90b      	cbnz	r3, 800bec8 <_puts_r+0x10>
 800bec4:	f001 ffdc 	bl	800de80 <__sinit>
 800bec8:	69ab      	ldr	r3, [r5, #24]
 800beca:	68ac      	ldr	r4, [r5, #8]
 800becc:	b913      	cbnz	r3, 800bed4 <_puts_r+0x1c>
 800bece:	4628      	mov	r0, r5
 800bed0:	f001 ffd6 	bl	800de80 <__sinit>
 800bed4:	4b23      	ldr	r3, [pc, #140]	; (800bf64 <_puts_r+0xac>)
 800bed6:	429c      	cmp	r4, r3
 800bed8:	d117      	bne.n	800bf0a <_puts_r+0x52>
 800beda:	686c      	ldr	r4, [r5, #4]
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	071b      	lsls	r3, r3, #28
 800bee0:	d51d      	bpl.n	800bf1e <_puts_r+0x66>
 800bee2:	6923      	ldr	r3, [r4, #16]
 800bee4:	b1db      	cbz	r3, 800bf1e <_puts_r+0x66>
 800bee6:	3e01      	subs	r6, #1
 800bee8:	68a3      	ldr	r3, [r4, #8]
 800beea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800beee:	3b01      	subs	r3, #1
 800bef0:	60a3      	str	r3, [r4, #8]
 800bef2:	b9e9      	cbnz	r1, 800bf30 <_puts_r+0x78>
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	da2e      	bge.n	800bf56 <_puts_r+0x9e>
 800bef8:	4622      	mov	r2, r4
 800befa:	210a      	movs	r1, #10
 800befc:	4628      	mov	r0, r5
 800befe:	f000 ffa9 	bl	800ce54 <__swbuf_r>
 800bf02:	3001      	adds	r0, #1
 800bf04:	d011      	beq.n	800bf2a <_puts_r+0x72>
 800bf06:	200a      	movs	r0, #10
 800bf08:	e011      	b.n	800bf2e <_puts_r+0x76>
 800bf0a:	4b17      	ldr	r3, [pc, #92]	; (800bf68 <_puts_r+0xb0>)
 800bf0c:	429c      	cmp	r4, r3
 800bf0e:	d101      	bne.n	800bf14 <_puts_r+0x5c>
 800bf10:	68ac      	ldr	r4, [r5, #8]
 800bf12:	e7e3      	b.n	800bedc <_puts_r+0x24>
 800bf14:	4b15      	ldr	r3, [pc, #84]	; (800bf6c <_puts_r+0xb4>)
 800bf16:	429c      	cmp	r4, r3
 800bf18:	bf08      	it	eq
 800bf1a:	68ec      	ldreq	r4, [r5, #12]
 800bf1c:	e7de      	b.n	800bedc <_puts_r+0x24>
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4628      	mov	r0, r5
 800bf22:	f000 fffb 	bl	800cf1c <__swsetup_r>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d0dd      	beq.n	800bee6 <_puts_r+0x2e>
 800bf2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	da04      	bge.n	800bf3e <_puts_r+0x86>
 800bf34:	69a2      	ldr	r2, [r4, #24]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	dc06      	bgt.n	800bf48 <_puts_r+0x90>
 800bf3a:	290a      	cmp	r1, #10
 800bf3c:	d004      	beq.n	800bf48 <_puts_r+0x90>
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	6022      	str	r2, [r4, #0]
 800bf44:	7019      	strb	r1, [r3, #0]
 800bf46:	e7cf      	b.n	800bee8 <_puts_r+0x30>
 800bf48:	4622      	mov	r2, r4
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	f000 ff82 	bl	800ce54 <__swbuf_r>
 800bf50:	3001      	adds	r0, #1
 800bf52:	d1c9      	bne.n	800bee8 <_puts_r+0x30>
 800bf54:	e7e9      	b.n	800bf2a <_puts_r+0x72>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	200a      	movs	r0, #10
 800bf5a:	1c5a      	adds	r2, r3, #1
 800bf5c:	6022      	str	r2, [r4, #0]
 800bf5e:	7018      	strb	r0, [r3, #0]
 800bf60:	e7e5      	b.n	800bf2e <_puts_r+0x76>
 800bf62:	bf00      	nop
 800bf64:	08012bf8 	.word	0x08012bf8
 800bf68:	08012c18 	.word	0x08012c18
 800bf6c:	08012bd8 	.word	0x08012bd8

0800bf70 <puts>:
 800bf70:	4b02      	ldr	r3, [pc, #8]	; (800bf7c <puts+0xc>)
 800bf72:	4601      	mov	r1, r0
 800bf74:	6818      	ldr	r0, [r3, #0]
 800bf76:	f7ff bf9f 	b.w	800beb8 <_puts_r>
 800bf7a:	bf00      	nop
 800bf7c:	200001e8 	.word	0x200001e8

0800bf80 <_sbrk_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4c06      	ldr	r4, [pc, #24]	; (800bf9c <_sbrk_r+0x1c>)
 800bf84:	2300      	movs	r3, #0
 800bf86:	4605      	mov	r5, r0
 800bf88:	4608      	mov	r0, r1
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	f7f6 f998 	bl	80022c0 <_sbrk>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <_sbrk_r+0x1a>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	b103      	cbz	r3, 800bf9a <_sbrk_r+0x1a>
 800bf98:	602b      	str	r3, [r5, #0]
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	20001378 	.word	0x20001378

0800bfa0 <nanf>:
 800bfa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfa8 <nanf+0x8>
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	7fc00000 	.word	0x7fc00000

0800bfac <siprintf>:
 800bfac:	b40e      	push	{r1, r2, r3}
 800bfae:	b500      	push	{lr}
 800bfb0:	b09c      	sub	sp, #112	; 0x70
 800bfb2:	ab1d      	add	r3, sp, #116	; 0x74
 800bfb4:	9002      	str	r0, [sp, #8]
 800bfb6:	9006      	str	r0, [sp, #24]
 800bfb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfbc:	4809      	ldr	r0, [pc, #36]	; (800bfe4 <siprintf+0x38>)
 800bfbe:	9107      	str	r1, [sp, #28]
 800bfc0:	9104      	str	r1, [sp, #16]
 800bfc2:	4909      	ldr	r1, [pc, #36]	; (800bfe8 <siprintf+0x3c>)
 800bfc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc8:	9105      	str	r1, [sp, #20]
 800bfca:	6800      	ldr	r0, [r0, #0]
 800bfcc:	9301      	str	r3, [sp, #4]
 800bfce:	a902      	add	r1, sp, #8
 800bfd0:	f003 f824 	bl	800f01c <_svfiprintf_r>
 800bfd4:	9b02      	ldr	r3, [sp, #8]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	701a      	strb	r2, [r3, #0]
 800bfda:	b01c      	add	sp, #112	; 0x70
 800bfdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfe0:	b003      	add	sp, #12
 800bfe2:	4770      	bx	lr
 800bfe4:	200001e8 	.word	0x200001e8
 800bfe8:	ffff0208 	.word	0xffff0208

0800bfec <siscanf>:
 800bfec:	b40e      	push	{r1, r2, r3}
 800bfee:	b530      	push	{r4, r5, lr}
 800bff0:	b09c      	sub	sp, #112	; 0x70
 800bff2:	ac1f      	add	r4, sp, #124	; 0x7c
 800bff4:	f44f 7201 	mov.w	r2, #516	; 0x204
 800bff8:	f854 5b04 	ldr.w	r5, [r4], #4
 800bffc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c000:	9002      	str	r0, [sp, #8]
 800c002:	9006      	str	r0, [sp, #24]
 800c004:	f7f4 f8ec 	bl	80001e0 <strlen>
 800c008:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <siscanf+0x4c>)
 800c00a:	9003      	str	r0, [sp, #12]
 800c00c:	9007      	str	r0, [sp, #28]
 800c00e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c010:	480a      	ldr	r0, [pc, #40]	; (800c03c <siscanf+0x50>)
 800c012:	9401      	str	r4, [sp, #4]
 800c014:	2300      	movs	r3, #0
 800c016:	930f      	str	r3, [sp, #60]	; 0x3c
 800c018:	9314      	str	r3, [sp, #80]	; 0x50
 800c01a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c01e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c022:	462a      	mov	r2, r5
 800c024:	4623      	mov	r3, r4
 800c026:	a902      	add	r1, sp, #8
 800c028:	6800      	ldr	r0, [r0, #0]
 800c02a:	f003 f949 	bl	800f2c0 <__ssvfiscanf_r>
 800c02e:	b01c      	add	sp, #112	; 0x70
 800c030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c034:	b003      	add	sp, #12
 800c036:	4770      	bx	lr
 800c038:	0800c063 	.word	0x0800c063
 800c03c:	200001e8 	.word	0x200001e8

0800c040 <__sread>:
 800c040:	b510      	push	{r4, lr}
 800c042:	460c      	mov	r4, r1
 800c044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c048:	f003 fd22 	bl	800fa90 <_read_r>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	bfab      	itete	ge
 800c050:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c052:	89a3      	ldrhlt	r3, [r4, #12]
 800c054:	181b      	addge	r3, r3, r0
 800c056:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c05a:	bfac      	ite	ge
 800c05c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c05e:	81a3      	strhlt	r3, [r4, #12]
 800c060:	bd10      	pop	{r4, pc}

0800c062 <__seofread>:
 800c062:	2000      	movs	r0, #0
 800c064:	4770      	bx	lr

0800c066 <__swrite>:
 800c066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	461f      	mov	r7, r3
 800c06c:	898b      	ldrh	r3, [r1, #12]
 800c06e:	05db      	lsls	r3, r3, #23
 800c070:	4605      	mov	r5, r0
 800c072:	460c      	mov	r4, r1
 800c074:	4616      	mov	r6, r2
 800c076:	d505      	bpl.n	800c084 <__swrite+0x1e>
 800c078:	2302      	movs	r3, #2
 800c07a:	2200      	movs	r2, #0
 800c07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c080:	f002 fad0 	bl	800e624 <_lseek_r>
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c08a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	4632      	mov	r2, r6
 800c092:	463b      	mov	r3, r7
 800c094:	4628      	mov	r0, r5
 800c096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c09a:	f000 bf2d 	b.w	800cef8 <_write_r>

0800c09e <__sseek>:
 800c09e:	b510      	push	{r4, lr}
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a6:	f002 fabd 	bl	800e624 <_lseek_r>
 800c0aa:	1c43      	adds	r3, r0, #1
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	bf15      	itete	ne
 800c0b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0ba:	81a3      	strheq	r3, [r4, #12]
 800c0bc:	bf18      	it	ne
 800c0be:	81a3      	strhne	r3, [r4, #12]
 800c0c0:	bd10      	pop	{r4, pc}

0800c0c2 <__sclose>:
 800c0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c6:	f000 bf97 	b.w	800cff8 <_close_r>

0800c0ca <strlcpy>:
 800c0ca:	b510      	push	{r4, lr}
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	b162      	cbz	r2, 800c0ea <strlcpy+0x20>
 800c0d0:	3a01      	subs	r2, #1
 800c0d2:	d008      	beq.n	800c0e6 <strlcpy+0x1c>
 800c0d4:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c0d8:	f800 4b01 	strb.w	r4, [r0], #1
 800c0dc:	2c00      	cmp	r4, #0
 800c0de:	d1f7      	bne.n	800c0d0 <strlcpy+0x6>
 800c0e0:	1a58      	subs	r0, r3, r1
 800c0e2:	3801      	subs	r0, #1
 800c0e4:	bd10      	pop	{r4, pc}
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	7002      	strb	r2, [r0, #0]
 800c0ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0ee:	2a00      	cmp	r2, #0
 800c0f0:	d1fb      	bne.n	800c0ea <strlcpy+0x20>
 800c0f2:	e7f5      	b.n	800c0e0 <strlcpy+0x16>

0800c0f4 <sulp>:
 800c0f4:	b570      	push	{r4, r5, r6, lr}
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	460d      	mov	r5, r1
 800c0fa:	ec45 4b10 	vmov	d0, r4, r5
 800c0fe:	4616      	mov	r6, r2
 800c100:	f002 fdf0 	bl	800ece4 <__ulp>
 800c104:	ec51 0b10 	vmov	r0, r1, d0
 800c108:	b17e      	cbz	r6, 800c12a <sulp+0x36>
 800c10a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c10e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c112:	2b00      	cmp	r3, #0
 800c114:	dd09      	ble.n	800c12a <sulp+0x36>
 800c116:	051b      	lsls	r3, r3, #20
 800c118:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c11c:	2400      	movs	r4, #0
 800c11e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c122:	4622      	mov	r2, r4
 800c124:	462b      	mov	r3, r5
 800c126:	f7f4 fa6f 	bl	8000608 <__aeabi_dmul>
 800c12a:	bd70      	pop	{r4, r5, r6, pc}
 800c12c:	0000      	movs	r0, r0
	...

0800c130 <_strtod_l>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	461f      	mov	r7, r3
 800c136:	b0a1      	sub	sp, #132	; 0x84
 800c138:	2300      	movs	r3, #0
 800c13a:	4681      	mov	r9, r0
 800c13c:	4638      	mov	r0, r7
 800c13e:	460e      	mov	r6, r1
 800c140:	9217      	str	r2, [sp, #92]	; 0x5c
 800c142:	931c      	str	r3, [sp, #112]	; 0x70
 800c144:	f002 fa5e 	bl	800e604 <__localeconv_l>
 800c148:	4680      	mov	r8, r0
 800c14a:	6800      	ldr	r0, [r0, #0]
 800c14c:	f7f4 f848 	bl	80001e0 <strlen>
 800c150:	f04f 0a00 	mov.w	sl, #0
 800c154:	4604      	mov	r4, r0
 800c156:	f04f 0b00 	mov.w	fp, #0
 800c15a:	961b      	str	r6, [sp, #108]	; 0x6c
 800c15c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c15e:	781a      	ldrb	r2, [r3, #0]
 800c160:	2a0d      	cmp	r2, #13
 800c162:	d832      	bhi.n	800c1ca <_strtod_l+0x9a>
 800c164:	2a09      	cmp	r2, #9
 800c166:	d236      	bcs.n	800c1d6 <_strtod_l+0xa6>
 800c168:	2a00      	cmp	r2, #0
 800c16a:	d03e      	beq.n	800c1ea <_strtod_l+0xba>
 800c16c:	2300      	movs	r3, #0
 800c16e:	930d      	str	r3, [sp, #52]	; 0x34
 800c170:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c172:	782b      	ldrb	r3, [r5, #0]
 800c174:	2b30      	cmp	r3, #48	; 0x30
 800c176:	f040 80ac 	bne.w	800c2d2 <_strtod_l+0x1a2>
 800c17a:	786b      	ldrb	r3, [r5, #1]
 800c17c:	2b58      	cmp	r3, #88	; 0x58
 800c17e:	d001      	beq.n	800c184 <_strtod_l+0x54>
 800c180:	2b78      	cmp	r3, #120	; 0x78
 800c182:	d167      	bne.n	800c254 <_strtod_l+0x124>
 800c184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c186:	9301      	str	r3, [sp, #4]
 800c188:	ab1c      	add	r3, sp, #112	; 0x70
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	9702      	str	r7, [sp, #8]
 800c18e:	ab1d      	add	r3, sp, #116	; 0x74
 800c190:	4a88      	ldr	r2, [pc, #544]	; (800c3b4 <_strtod_l+0x284>)
 800c192:	a91b      	add	r1, sp, #108	; 0x6c
 800c194:	4648      	mov	r0, r9
 800c196:	f001 ff4c 	bl	800e032 <__gethex>
 800c19a:	f010 0407 	ands.w	r4, r0, #7
 800c19e:	4606      	mov	r6, r0
 800c1a0:	d005      	beq.n	800c1ae <_strtod_l+0x7e>
 800c1a2:	2c06      	cmp	r4, #6
 800c1a4:	d12b      	bne.n	800c1fe <_strtod_l+0xce>
 800c1a6:	3501      	adds	r5, #1
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	951b      	str	r5, [sp, #108]	; 0x6c
 800c1ac:	930d      	str	r3, [sp, #52]	; 0x34
 800c1ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f040 859a 	bne.w	800ccea <_strtod_l+0xbba>
 800c1b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1b8:	b1e3      	cbz	r3, 800c1f4 <_strtod_l+0xc4>
 800c1ba:	4652      	mov	r2, sl
 800c1bc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c1c0:	ec43 2b10 	vmov	d0, r2, r3
 800c1c4:	b021      	add	sp, #132	; 0x84
 800c1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ca:	2a2b      	cmp	r2, #43	; 0x2b
 800c1cc:	d015      	beq.n	800c1fa <_strtod_l+0xca>
 800c1ce:	2a2d      	cmp	r2, #45	; 0x2d
 800c1d0:	d004      	beq.n	800c1dc <_strtod_l+0xac>
 800c1d2:	2a20      	cmp	r2, #32
 800c1d4:	d1ca      	bne.n	800c16c <_strtod_l+0x3c>
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1da:	e7bf      	b.n	800c15c <_strtod_l+0x2c>
 800c1dc:	2201      	movs	r2, #1
 800c1de:	920d      	str	r2, [sp, #52]	; 0x34
 800c1e0:	1c5a      	adds	r2, r3, #1
 800c1e2:	921b      	str	r2, [sp, #108]	; 0x6c
 800c1e4:	785b      	ldrb	r3, [r3, #1]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1c2      	bne.n	800c170 <_strtod_l+0x40>
 800c1ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1ec:	961b      	str	r6, [sp, #108]	; 0x6c
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f040 8579 	bne.w	800cce6 <_strtod_l+0xbb6>
 800c1f4:	4652      	mov	r2, sl
 800c1f6:	465b      	mov	r3, fp
 800c1f8:	e7e2      	b.n	800c1c0 <_strtod_l+0x90>
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	e7ef      	b.n	800c1de <_strtod_l+0xae>
 800c1fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c200:	b13a      	cbz	r2, 800c212 <_strtod_l+0xe2>
 800c202:	2135      	movs	r1, #53	; 0x35
 800c204:	a81e      	add	r0, sp, #120	; 0x78
 800c206:	f002 fe65 	bl	800eed4 <__copybits>
 800c20a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c20c:	4648      	mov	r0, r9
 800c20e:	f002 fad2 	bl	800e7b6 <_Bfree>
 800c212:	3c01      	subs	r4, #1
 800c214:	2c04      	cmp	r4, #4
 800c216:	d806      	bhi.n	800c226 <_strtod_l+0xf6>
 800c218:	e8df f004 	tbb	[pc, r4]
 800c21c:	1714030a 	.word	0x1714030a
 800c220:	0a          	.byte	0x0a
 800c221:	00          	.byte	0x00
 800c222:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800c226:	0730      	lsls	r0, r6, #28
 800c228:	d5c1      	bpl.n	800c1ae <_strtod_l+0x7e>
 800c22a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c22e:	e7be      	b.n	800c1ae <_strtod_l+0x7e>
 800c230:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800c234:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c236:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c23a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c23e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c242:	e7f0      	b.n	800c226 <_strtod_l+0xf6>
 800c244:	f8df b170 	ldr.w	fp, [pc, #368]	; 800c3b8 <_strtod_l+0x288>
 800c248:	e7ed      	b.n	800c226 <_strtod_l+0xf6>
 800c24a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c24e:	f04f 3aff 	mov.w	sl, #4294967295
 800c252:	e7e8      	b.n	800c226 <_strtod_l+0xf6>
 800c254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c256:	1c5a      	adds	r2, r3, #1
 800c258:	921b      	str	r2, [sp, #108]	; 0x6c
 800c25a:	785b      	ldrb	r3, [r3, #1]
 800c25c:	2b30      	cmp	r3, #48	; 0x30
 800c25e:	d0f9      	beq.n	800c254 <_strtod_l+0x124>
 800c260:	2b00      	cmp	r3, #0
 800c262:	d0a4      	beq.n	800c1ae <_strtod_l+0x7e>
 800c264:	2301      	movs	r3, #1
 800c266:	2500      	movs	r5, #0
 800c268:	9306      	str	r3, [sp, #24]
 800c26a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c26c:	9308      	str	r3, [sp, #32]
 800c26e:	9507      	str	r5, [sp, #28]
 800c270:	9505      	str	r5, [sp, #20]
 800c272:	220a      	movs	r2, #10
 800c274:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c276:	7807      	ldrb	r7, [r0, #0]
 800c278:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c27c:	b2d9      	uxtb	r1, r3
 800c27e:	2909      	cmp	r1, #9
 800c280:	d929      	bls.n	800c2d6 <_strtod_l+0x1a6>
 800c282:	4622      	mov	r2, r4
 800c284:	f8d8 1000 	ldr.w	r1, [r8]
 800c288:	f003 fc46 	bl	800fb18 <strncmp>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d031      	beq.n	800c2f4 <_strtod_l+0x1c4>
 800c290:	2000      	movs	r0, #0
 800c292:	9c05      	ldr	r4, [sp, #20]
 800c294:	9004      	str	r0, [sp, #16]
 800c296:	463b      	mov	r3, r7
 800c298:	4602      	mov	r2, r0
 800c29a:	2b65      	cmp	r3, #101	; 0x65
 800c29c:	d001      	beq.n	800c2a2 <_strtod_l+0x172>
 800c29e:	2b45      	cmp	r3, #69	; 0x45
 800c2a0:	d114      	bne.n	800c2cc <_strtod_l+0x19c>
 800c2a2:	b924      	cbnz	r4, 800c2ae <_strtod_l+0x17e>
 800c2a4:	b910      	cbnz	r0, 800c2ac <_strtod_l+0x17c>
 800c2a6:	9b06      	ldr	r3, [sp, #24]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d09e      	beq.n	800c1ea <_strtod_l+0xba>
 800c2ac:	2400      	movs	r4, #0
 800c2ae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c2b0:	1c73      	adds	r3, r6, #1
 800c2b2:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2b4:	7873      	ldrb	r3, [r6, #1]
 800c2b6:	2b2b      	cmp	r3, #43	; 0x2b
 800c2b8:	d078      	beq.n	800c3ac <_strtod_l+0x27c>
 800c2ba:	2b2d      	cmp	r3, #45	; 0x2d
 800c2bc:	d070      	beq.n	800c3a0 <_strtod_l+0x270>
 800c2be:	f04f 0c00 	mov.w	ip, #0
 800c2c2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c2c6:	2f09      	cmp	r7, #9
 800c2c8:	d97c      	bls.n	800c3c4 <_strtod_l+0x294>
 800c2ca:	961b      	str	r6, [sp, #108]	; 0x6c
 800c2cc:	f04f 0e00 	mov.w	lr, #0
 800c2d0:	e09a      	b.n	800c408 <_strtod_l+0x2d8>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e7c7      	b.n	800c266 <_strtod_l+0x136>
 800c2d6:	9905      	ldr	r1, [sp, #20]
 800c2d8:	2908      	cmp	r1, #8
 800c2da:	bfdd      	ittte	le
 800c2dc:	9907      	ldrle	r1, [sp, #28]
 800c2de:	fb02 3301 	mlale	r3, r2, r1, r3
 800c2e2:	9307      	strle	r3, [sp, #28]
 800c2e4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c2e8:	9b05      	ldr	r3, [sp, #20]
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	9305      	str	r3, [sp, #20]
 800c2f0:	901b      	str	r0, [sp, #108]	; 0x6c
 800c2f2:	e7bf      	b.n	800c274 <_strtod_l+0x144>
 800c2f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2f6:	191a      	adds	r2, r3, r4
 800c2f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c2fa:	9a05      	ldr	r2, [sp, #20]
 800c2fc:	5d1b      	ldrb	r3, [r3, r4]
 800c2fe:	2a00      	cmp	r2, #0
 800c300:	d037      	beq.n	800c372 <_strtod_l+0x242>
 800c302:	9c05      	ldr	r4, [sp, #20]
 800c304:	4602      	mov	r2, r0
 800c306:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c30a:	2909      	cmp	r1, #9
 800c30c:	d913      	bls.n	800c336 <_strtod_l+0x206>
 800c30e:	2101      	movs	r1, #1
 800c310:	9104      	str	r1, [sp, #16]
 800c312:	e7c2      	b.n	800c29a <_strtod_l+0x16a>
 800c314:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c316:	1c5a      	adds	r2, r3, #1
 800c318:	921b      	str	r2, [sp, #108]	; 0x6c
 800c31a:	785b      	ldrb	r3, [r3, #1]
 800c31c:	3001      	adds	r0, #1
 800c31e:	2b30      	cmp	r3, #48	; 0x30
 800c320:	d0f8      	beq.n	800c314 <_strtod_l+0x1e4>
 800c322:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c326:	2a08      	cmp	r2, #8
 800c328:	f200 84e4 	bhi.w	800ccf4 <_strtod_l+0xbc4>
 800c32c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c32e:	9208      	str	r2, [sp, #32]
 800c330:	4602      	mov	r2, r0
 800c332:	2000      	movs	r0, #0
 800c334:	4604      	mov	r4, r0
 800c336:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c33a:	f100 0101 	add.w	r1, r0, #1
 800c33e:	d012      	beq.n	800c366 <_strtod_l+0x236>
 800c340:	440a      	add	r2, r1
 800c342:	eb00 0c04 	add.w	ip, r0, r4
 800c346:	4621      	mov	r1, r4
 800c348:	270a      	movs	r7, #10
 800c34a:	458c      	cmp	ip, r1
 800c34c:	d113      	bne.n	800c376 <_strtod_l+0x246>
 800c34e:	1821      	adds	r1, r4, r0
 800c350:	2908      	cmp	r1, #8
 800c352:	f104 0401 	add.w	r4, r4, #1
 800c356:	4404      	add	r4, r0
 800c358:	dc19      	bgt.n	800c38e <_strtod_l+0x25e>
 800c35a:	9b07      	ldr	r3, [sp, #28]
 800c35c:	210a      	movs	r1, #10
 800c35e:	fb01 e303 	mla	r3, r1, r3, lr
 800c362:	9307      	str	r3, [sp, #28]
 800c364:	2100      	movs	r1, #0
 800c366:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c368:	1c58      	adds	r0, r3, #1
 800c36a:	901b      	str	r0, [sp, #108]	; 0x6c
 800c36c:	785b      	ldrb	r3, [r3, #1]
 800c36e:	4608      	mov	r0, r1
 800c370:	e7c9      	b.n	800c306 <_strtod_l+0x1d6>
 800c372:	9805      	ldr	r0, [sp, #20]
 800c374:	e7d3      	b.n	800c31e <_strtod_l+0x1ee>
 800c376:	2908      	cmp	r1, #8
 800c378:	f101 0101 	add.w	r1, r1, #1
 800c37c:	dc03      	bgt.n	800c386 <_strtod_l+0x256>
 800c37e:	9b07      	ldr	r3, [sp, #28]
 800c380:	437b      	muls	r3, r7
 800c382:	9307      	str	r3, [sp, #28]
 800c384:	e7e1      	b.n	800c34a <_strtod_l+0x21a>
 800c386:	2910      	cmp	r1, #16
 800c388:	bfd8      	it	le
 800c38a:	437d      	mulle	r5, r7
 800c38c:	e7dd      	b.n	800c34a <_strtod_l+0x21a>
 800c38e:	2c10      	cmp	r4, #16
 800c390:	bfdc      	itt	le
 800c392:	210a      	movle	r1, #10
 800c394:	fb01 e505 	mlale	r5, r1, r5, lr
 800c398:	e7e4      	b.n	800c364 <_strtod_l+0x234>
 800c39a:	2301      	movs	r3, #1
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	e781      	b.n	800c2a4 <_strtod_l+0x174>
 800c3a0:	f04f 0c01 	mov.w	ip, #1
 800c3a4:	1cb3      	adds	r3, r6, #2
 800c3a6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c3a8:	78b3      	ldrb	r3, [r6, #2]
 800c3aa:	e78a      	b.n	800c2c2 <_strtod_l+0x192>
 800c3ac:	f04f 0c00 	mov.w	ip, #0
 800c3b0:	e7f8      	b.n	800c3a4 <_strtod_l+0x274>
 800c3b2:	bf00      	nop
 800c3b4:	08012b78 	.word	0x08012b78
 800c3b8:	7ff00000 	.word	0x7ff00000
 800c3bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3be:	1c5f      	adds	r7, r3, #1
 800c3c0:	971b      	str	r7, [sp, #108]	; 0x6c
 800c3c2:	785b      	ldrb	r3, [r3, #1]
 800c3c4:	2b30      	cmp	r3, #48	; 0x30
 800c3c6:	d0f9      	beq.n	800c3bc <_strtod_l+0x28c>
 800c3c8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c3cc:	2f08      	cmp	r7, #8
 800c3ce:	f63f af7d 	bhi.w	800c2cc <_strtod_l+0x19c>
 800c3d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c3d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3d8:	930a      	str	r3, [sp, #40]	; 0x28
 800c3da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3dc:	1c5f      	adds	r7, r3, #1
 800c3de:	971b      	str	r7, [sp, #108]	; 0x6c
 800c3e0:	785b      	ldrb	r3, [r3, #1]
 800c3e2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c3e6:	f1b8 0f09 	cmp.w	r8, #9
 800c3ea:	d937      	bls.n	800c45c <_strtod_l+0x32c>
 800c3ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c3ee:	1a7f      	subs	r7, r7, r1
 800c3f0:	2f08      	cmp	r7, #8
 800c3f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c3f6:	dc37      	bgt.n	800c468 <_strtod_l+0x338>
 800c3f8:	45be      	cmp	lr, r7
 800c3fa:	bfa8      	it	ge
 800c3fc:	46be      	movge	lr, r7
 800c3fe:	f1bc 0f00 	cmp.w	ip, #0
 800c402:	d001      	beq.n	800c408 <_strtod_l+0x2d8>
 800c404:	f1ce 0e00 	rsb	lr, lr, #0
 800c408:	2c00      	cmp	r4, #0
 800c40a:	d151      	bne.n	800c4b0 <_strtod_l+0x380>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	f47f aece 	bne.w	800c1ae <_strtod_l+0x7e>
 800c412:	9a06      	ldr	r2, [sp, #24]
 800c414:	2a00      	cmp	r2, #0
 800c416:	f47f aeca 	bne.w	800c1ae <_strtod_l+0x7e>
 800c41a:	9a04      	ldr	r2, [sp, #16]
 800c41c:	2a00      	cmp	r2, #0
 800c41e:	f47f aee4 	bne.w	800c1ea <_strtod_l+0xba>
 800c422:	2b4e      	cmp	r3, #78	; 0x4e
 800c424:	d027      	beq.n	800c476 <_strtod_l+0x346>
 800c426:	dc21      	bgt.n	800c46c <_strtod_l+0x33c>
 800c428:	2b49      	cmp	r3, #73	; 0x49
 800c42a:	f47f aede 	bne.w	800c1ea <_strtod_l+0xba>
 800c42e:	49a0      	ldr	r1, [pc, #640]	; (800c6b0 <_strtod_l+0x580>)
 800c430:	a81b      	add	r0, sp, #108	; 0x6c
 800c432:	f002 f831 	bl	800e498 <__match>
 800c436:	2800      	cmp	r0, #0
 800c438:	f43f aed7 	beq.w	800c1ea <_strtod_l+0xba>
 800c43c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c43e:	499d      	ldr	r1, [pc, #628]	; (800c6b4 <_strtod_l+0x584>)
 800c440:	3b01      	subs	r3, #1
 800c442:	a81b      	add	r0, sp, #108	; 0x6c
 800c444:	931b      	str	r3, [sp, #108]	; 0x6c
 800c446:	f002 f827 	bl	800e498 <__match>
 800c44a:	b910      	cbnz	r0, 800c452 <_strtod_l+0x322>
 800c44c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c44e:	3301      	adds	r3, #1
 800c450:	931b      	str	r3, [sp, #108]	; 0x6c
 800c452:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c6c8 <_strtod_l+0x598>
 800c456:	f04f 0a00 	mov.w	sl, #0
 800c45a:	e6a8      	b.n	800c1ae <_strtod_l+0x7e>
 800c45c:	210a      	movs	r1, #10
 800c45e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c462:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c466:	e7b8      	b.n	800c3da <_strtod_l+0x2aa>
 800c468:	46be      	mov	lr, r7
 800c46a:	e7c8      	b.n	800c3fe <_strtod_l+0x2ce>
 800c46c:	2b69      	cmp	r3, #105	; 0x69
 800c46e:	d0de      	beq.n	800c42e <_strtod_l+0x2fe>
 800c470:	2b6e      	cmp	r3, #110	; 0x6e
 800c472:	f47f aeba 	bne.w	800c1ea <_strtod_l+0xba>
 800c476:	4990      	ldr	r1, [pc, #576]	; (800c6b8 <_strtod_l+0x588>)
 800c478:	a81b      	add	r0, sp, #108	; 0x6c
 800c47a:	f002 f80d 	bl	800e498 <__match>
 800c47e:	2800      	cmp	r0, #0
 800c480:	f43f aeb3 	beq.w	800c1ea <_strtod_l+0xba>
 800c484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	2b28      	cmp	r3, #40	; 0x28
 800c48a:	d10e      	bne.n	800c4aa <_strtod_l+0x37a>
 800c48c:	aa1e      	add	r2, sp, #120	; 0x78
 800c48e:	498b      	ldr	r1, [pc, #556]	; (800c6bc <_strtod_l+0x58c>)
 800c490:	a81b      	add	r0, sp, #108	; 0x6c
 800c492:	f002 f815 	bl	800e4c0 <__hexnan>
 800c496:	2805      	cmp	r0, #5
 800c498:	d107      	bne.n	800c4aa <_strtod_l+0x37a>
 800c49a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c49c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c4a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c4a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c4a8:	e681      	b.n	800c1ae <_strtod_l+0x7e>
 800c4aa:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c6d0 <_strtod_l+0x5a0>
 800c4ae:	e7d2      	b.n	800c456 <_strtod_l+0x326>
 800c4b0:	ebae 0302 	sub.w	r3, lr, r2
 800c4b4:	9306      	str	r3, [sp, #24]
 800c4b6:	9b05      	ldr	r3, [sp, #20]
 800c4b8:	9807      	ldr	r0, [sp, #28]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	bf08      	it	eq
 800c4be:	4623      	moveq	r3, r4
 800c4c0:	2c10      	cmp	r4, #16
 800c4c2:	9305      	str	r3, [sp, #20]
 800c4c4:	46a0      	mov	r8, r4
 800c4c6:	bfa8      	it	ge
 800c4c8:	f04f 0810 	movge.w	r8, #16
 800c4cc:	f7f4 f822 	bl	8000514 <__aeabi_ui2d>
 800c4d0:	2c09      	cmp	r4, #9
 800c4d2:	4682      	mov	sl, r0
 800c4d4:	468b      	mov	fp, r1
 800c4d6:	dc13      	bgt.n	800c500 <_strtod_l+0x3d0>
 800c4d8:	9b06      	ldr	r3, [sp, #24]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f43f ae67 	beq.w	800c1ae <_strtod_l+0x7e>
 800c4e0:	9b06      	ldr	r3, [sp, #24]
 800c4e2:	dd7a      	ble.n	800c5da <_strtod_l+0x4aa>
 800c4e4:	2b16      	cmp	r3, #22
 800c4e6:	dc61      	bgt.n	800c5ac <_strtod_l+0x47c>
 800c4e8:	4a75      	ldr	r2, [pc, #468]	; (800c6c0 <_strtod_l+0x590>)
 800c4ea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c4ee:	e9de 0100 	ldrd	r0, r1, [lr]
 800c4f2:	4652      	mov	r2, sl
 800c4f4:	465b      	mov	r3, fp
 800c4f6:	f7f4 f887 	bl	8000608 <__aeabi_dmul>
 800c4fa:	4682      	mov	sl, r0
 800c4fc:	468b      	mov	fp, r1
 800c4fe:	e656      	b.n	800c1ae <_strtod_l+0x7e>
 800c500:	4b6f      	ldr	r3, [pc, #444]	; (800c6c0 <_strtod_l+0x590>)
 800c502:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c506:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c50a:	f7f4 f87d 	bl	8000608 <__aeabi_dmul>
 800c50e:	4606      	mov	r6, r0
 800c510:	4628      	mov	r0, r5
 800c512:	460f      	mov	r7, r1
 800c514:	f7f3 fffe 	bl	8000514 <__aeabi_ui2d>
 800c518:	4602      	mov	r2, r0
 800c51a:	460b      	mov	r3, r1
 800c51c:	4630      	mov	r0, r6
 800c51e:	4639      	mov	r1, r7
 800c520:	f7f3 febc 	bl	800029c <__adddf3>
 800c524:	2c0f      	cmp	r4, #15
 800c526:	4682      	mov	sl, r0
 800c528:	468b      	mov	fp, r1
 800c52a:	ddd5      	ble.n	800c4d8 <_strtod_l+0x3a8>
 800c52c:	9b06      	ldr	r3, [sp, #24]
 800c52e:	eba4 0808 	sub.w	r8, r4, r8
 800c532:	4498      	add	r8, r3
 800c534:	f1b8 0f00 	cmp.w	r8, #0
 800c538:	f340 8096 	ble.w	800c668 <_strtod_l+0x538>
 800c53c:	f018 030f 	ands.w	r3, r8, #15
 800c540:	d00a      	beq.n	800c558 <_strtod_l+0x428>
 800c542:	495f      	ldr	r1, [pc, #380]	; (800c6c0 <_strtod_l+0x590>)
 800c544:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c548:	4652      	mov	r2, sl
 800c54a:	465b      	mov	r3, fp
 800c54c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c550:	f7f4 f85a 	bl	8000608 <__aeabi_dmul>
 800c554:	4682      	mov	sl, r0
 800c556:	468b      	mov	fp, r1
 800c558:	f038 080f 	bics.w	r8, r8, #15
 800c55c:	d073      	beq.n	800c646 <_strtod_l+0x516>
 800c55e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c562:	dd47      	ble.n	800c5f4 <_strtod_l+0x4c4>
 800c564:	2400      	movs	r4, #0
 800c566:	46a0      	mov	r8, r4
 800c568:	9407      	str	r4, [sp, #28]
 800c56a:	9405      	str	r4, [sp, #20]
 800c56c:	2322      	movs	r3, #34	; 0x22
 800c56e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c6c8 <_strtod_l+0x598>
 800c572:	f8c9 3000 	str.w	r3, [r9]
 800c576:	f04f 0a00 	mov.w	sl, #0
 800c57a:	9b07      	ldr	r3, [sp, #28]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f43f ae16 	beq.w	800c1ae <_strtod_l+0x7e>
 800c582:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c584:	4648      	mov	r0, r9
 800c586:	f002 f916 	bl	800e7b6 <_Bfree>
 800c58a:	9905      	ldr	r1, [sp, #20]
 800c58c:	4648      	mov	r0, r9
 800c58e:	f002 f912 	bl	800e7b6 <_Bfree>
 800c592:	4641      	mov	r1, r8
 800c594:	4648      	mov	r0, r9
 800c596:	f002 f90e 	bl	800e7b6 <_Bfree>
 800c59a:	9907      	ldr	r1, [sp, #28]
 800c59c:	4648      	mov	r0, r9
 800c59e:	f002 f90a 	bl	800e7b6 <_Bfree>
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	4648      	mov	r0, r9
 800c5a6:	f002 f906 	bl	800e7b6 <_Bfree>
 800c5aa:	e600      	b.n	800c1ae <_strtod_l+0x7e>
 800c5ac:	9a06      	ldr	r2, [sp, #24]
 800c5ae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	dbba      	blt.n	800c52c <_strtod_l+0x3fc>
 800c5b6:	4d42      	ldr	r5, [pc, #264]	; (800c6c0 <_strtod_l+0x590>)
 800c5b8:	f1c4 040f 	rsb	r4, r4, #15
 800c5bc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c5c0:	4652      	mov	r2, sl
 800c5c2:	465b      	mov	r3, fp
 800c5c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5c8:	f7f4 f81e 	bl	8000608 <__aeabi_dmul>
 800c5cc:	9b06      	ldr	r3, [sp, #24]
 800c5ce:	1b1c      	subs	r4, r3, r4
 800c5d0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c5d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5d8:	e78d      	b.n	800c4f6 <_strtod_l+0x3c6>
 800c5da:	f113 0f16 	cmn.w	r3, #22
 800c5de:	dba5      	blt.n	800c52c <_strtod_l+0x3fc>
 800c5e0:	4a37      	ldr	r2, [pc, #220]	; (800c6c0 <_strtod_l+0x590>)
 800c5e2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c5e6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c5ea:	4650      	mov	r0, sl
 800c5ec:	4659      	mov	r1, fp
 800c5ee:	f7f4 f935 	bl	800085c <__aeabi_ddiv>
 800c5f2:	e782      	b.n	800c4fa <_strtod_l+0x3ca>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	4e33      	ldr	r6, [pc, #204]	; (800c6c4 <_strtod_l+0x594>)
 800c5f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c5fc:	4650      	mov	r0, sl
 800c5fe:	4659      	mov	r1, fp
 800c600:	461d      	mov	r5, r3
 800c602:	f1b8 0f01 	cmp.w	r8, #1
 800c606:	dc21      	bgt.n	800c64c <_strtod_l+0x51c>
 800c608:	b10b      	cbz	r3, 800c60e <_strtod_l+0x4de>
 800c60a:	4682      	mov	sl, r0
 800c60c:	468b      	mov	fp, r1
 800c60e:	4b2d      	ldr	r3, [pc, #180]	; (800c6c4 <_strtod_l+0x594>)
 800c610:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c614:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c618:	4652      	mov	r2, sl
 800c61a:	465b      	mov	r3, fp
 800c61c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c620:	f7f3 fff2 	bl	8000608 <__aeabi_dmul>
 800c624:	4b28      	ldr	r3, [pc, #160]	; (800c6c8 <_strtod_l+0x598>)
 800c626:	460a      	mov	r2, r1
 800c628:	400b      	ands	r3, r1
 800c62a:	4928      	ldr	r1, [pc, #160]	; (800c6cc <_strtod_l+0x59c>)
 800c62c:	428b      	cmp	r3, r1
 800c62e:	4682      	mov	sl, r0
 800c630:	d898      	bhi.n	800c564 <_strtod_l+0x434>
 800c632:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c636:	428b      	cmp	r3, r1
 800c638:	bf86      	itte	hi
 800c63a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c6d4 <_strtod_l+0x5a4>
 800c63e:	f04f 3aff 	movhi.w	sl, #4294967295
 800c642:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c646:	2300      	movs	r3, #0
 800c648:	9304      	str	r3, [sp, #16]
 800c64a:	e077      	b.n	800c73c <_strtod_l+0x60c>
 800c64c:	f018 0f01 	tst.w	r8, #1
 800c650:	d006      	beq.n	800c660 <_strtod_l+0x530>
 800c652:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	f7f3 ffd5 	bl	8000608 <__aeabi_dmul>
 800c65e:	2301      	movs	r3, #1
 800c660:	3501      	adds	r5, #1
 800c662:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c666:	e7cc      	b.n	800c602 <_strtod_l+0x4d2>
 800c668:	d0ed      	beq.n	800c646 <_strtod_l+0x516>
 800c66a:	f1c8 0800 	rsb	r8, r8, #0
 800c66e:	f018 020f 	ands.w	r2, r8, #15
 800c672:	d00a      	beq.n	800c68a <_strtod_l+0x55a>
 800c674:	4b12      	ldr	r3, [pc, #72]	; (800c6c0 <_strtod_l+0x590>)
 800c676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c67a:	4650      	mov	r0, sl
 800c67c:	4659      	mov	r1, fp
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	f7f4 f8eb 	bl	800085c <__aeabi_ddiv>
 800c686:	4682      	mov	sl, r0
 800c688:	468b      	mov	fp, r1
 800c68a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c68e:	d0da      	beq.n	800c646 <_strtod_l+0x516>
 800c690:	f1b8 0f1f 	cmp.w	r8, #31
 800c694:	dd20      	ble.n	800c6d8 <_strtod_l+0x5a8>
 800c696:	2400      	movs	r4, #0
 800c698:	46a0      	mov	r8, r4
 800c69a:	9407      	str	r4, [sp, #28]
 800c69c:	9405      	str	r4, [sp, #20]
 800c69e:	2322      	movs	r3, #34	; 0x22
 800c6a0:	f04f 0a00 	mov.w	sl, #0
 800c6a4:	f04f 0b00 	mov.w	fp, #0
 800c6a8:	f8c9 3000 	str.w	r3, [r9]
 800c6ac:	e765      	b.n	800c57a <_strtod_l+0x44a>
 800c6ae:	bf00      	nop
 800c6b0:	08012b45 	.word	0x08012b45
 800c6b4:	08012bcb 	.word	0x08012bcb
 800c6b8:	08012b4d 	.word	0x08012b4d
 800c6bc:	08012b8c 	.word	0x08012b8c
 800c6c0:	08012c70 	.word	0x08012c70
 800c6c4:	08012c48 	.word	0x08012c48
 800c6c8:	7ff00000 	.word	0x7ff00000
 800c6cc:	7ca00000 	.word	0x7ca00000
 800c6d0:	fff80000 	.word	0xfff80000
 800c6d4:	7fefffff 	.word	0x7fefffff
 800c6d8:	f018 0310 	ands.w	r3, r8, #16
 800c6dc:	bf18      	it	ne
 800c6de:	236a      	movne	r3, #106	; 0x6a
 800c6e0:	4da0      	ldr	r5, [pc, #640]	; (800c964 <_strtod_l+0x834>)
 800c6e2:	9304      	str	r3, [sp, #16]
 800c6e4:	4650      	mov	r0, sl
 800c6e6:	4659      	mov	r1, fp
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	f1b8 0f00 	cmp.w	r8, #0
 800c6ee:	f300 810a 	bgt.w	800c906 <_strtod_l+0x7d6>
 800c6f2:	b10b      	cbz	r3, 800c6f8 <_strtod_l+0x5c8>
 800c6f4:	4682      	mov	sl, r0
 800c6f6:	468b      	mov	fp, r1
 800c6f8:	9b04      	ldr	r3, [sp, #16]
 800c6fa:	b1bb      	cbz	r3, 800c72c <_strtod_l+0x5fc>
 800c6fc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c700:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c704:	2b00      	cmp	r3, #0
 800c706:	4659      	mov	r1, fp
 800c708:	dd10      	ble.n	800c72c <_strtod_l+0x5fc>
 800c70a:	2b1f      	cmp	r3, #31
 800c70c:	f340 8107 	ble.w	800c91e <_strtod_l+0x7ee>
 800c710:	2b34      	cmp	r3, #52	; 0x34
 800c712:	bfde      	ittt	le
 800c714:	3b20      	suble	r3, #32
 800c716:	f04f 32ff 	movle.w	r2, #4294967295
 800c71a:	fa02 f303 	lslle.w	r3, r2, r3
 800c71e:	f04f 0a00 	mov.w	sl, #0
 800c722:	bfcc      	ite	gt
 800c724:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c728:	ea03 0b01 	andle.w	fp, r3, r1
 800c72c:	2200      	movs	r2, #0
 800c72e:	2300      	movs	r3, #0
 800c730:	4650      	mov	r0, sl
 800c732:	4659      	mov	r1, fp
 800c734:	f7f4 f9d0 	bl	8000ad8 <__aeabi_dcmpeq>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d1ac      	bne.n	800c696 <_strtod_l+0x566>
 800c73c:	9b07      	ldr	r3, [sp, #28]
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	9a05      	ldr	r2, [sp, #20]
 800c742:	9908      	ldr	r1, [sp, #32]
 800c744:	4623      	mov	r3, r4
 800c746:	4648      	mov	r0, r9
 800c748:	f002 f887 	bl	800e85a <__s2b>
 800c74c:	9007      	str	r0, [sp, #28]
 800c74e:	2800      	cmp	r0, #0
 800c750:	f43f af08 	beq.w	800c564 <_strtod_l+0x434>
 800c754:	9a06      	ldr	r2, [sp, #24]
 800c756:	9b06      	ldr	r3, [sp, #24]
 800c758:	2a00      	cmp	r2, #0
 800c75a:	f1c3 0300 	rsb	r3, r3, #0
 800c75e:	bfa8      	it	ge
 800c760:	2300      	movge	r3, #0
 800c762:	930e      	str	r3, [sp, #56]	; 0x38
 800c764:	2400      	movs	r4, #0
 800c766:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c76a:	9316      	str	r3, [sp, #88]	; 0x58
 800c76c:	46a0      	mov	r8, r4
 800c76e:	9b07      	ldr	r3, [sp, #28]
 800c770:	4648      	mov	r0, r9
 800c772:	6859      	ldr	r1, [r3, #4]
 800c774:	f001 ffeb 	bl	800e74e <_Balloc>
 800c778:	9005      	str	r0, [sp, #20]
 800c77a:	2800      	cmp	r0, #0
 800c77c:	f43f aef6 	beq.w	800c56c <_strtod_l+0x43c>
 800c780:	9b07      	ldr	r3, [sp, #28]
 800c782:	691a      	ldr	r2, [r3, #16]
 800c784:	3202      	adds	r2, #2
 800c786:	f103 010c 	add.w	r1, r3, #12
 800c78a:	0092      	lsls	r2, r2, #2
 800c78c:	300c      	adds	r0, #12
 800c78e:	f001 ffd1 	bl	800e734 <memcpy>
 800c792:	aa1e      	add	r2, sp, #120	; 0x78
 800c794:	a91d      	add	r1, sp, #116	; 0x74
 800c796:	ec4b ab10 	vmov	d0, sl, fp
 800c79a:	4648      	mov	r0, r9
 800c79c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c7a0:	f002 fb16 	bl	800edd0 <__d2b>
 800c7a4:	901c      	str	r0, [sp, #112]	; 0x70
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	f43f aee0 	beq.w	800c56c <_strtod_l+0x43c>
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	4648      	mov	r0, r9
 800c7b0:	f002 f8df 	bl	800e972 <__i2b>
 800c7b4:	4680      	mov	r8, r0
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	f43f aed8 	beq.w	800c56c <_strtod_l+0x43c>
 800c7bc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c7be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c7c0:	2e00      	cmp	r6, #0
 800c7c2:	bfab      	itete	ge
 800c7c4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c7c6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c7c8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c7ca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c7cc:	bfac      	ite	ge
 800c7ce:	18f7      	addge	r7, r6, r3
 800c7d0:	1b9d      	sublt	r5, r3, r6
 800c7d2:	9b04      	ldr	r3, [sp, #16]
 800c7d4:	1af6      	subs	r6, r6, r3
 800c7d6:	4416      	add	r6, r2
 800c7d8:	4b63      	ldr	r3, [pc, #396]	; (800c968 <_strtod_l+0x838>)
 800c7da:	3e01      	subs	r6, #1
 800c7dc:	429e      	cmp	r6, r3
 800c7de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c7e2:	f280 80af 	bge.w	800c944 <_strtod_l+0x814>
 800c7e6:	1b9b      	subs	r3, r3, r6
 800c7e8:	2b1f      	cmp	r3, #31
 800c7ea:	eba2 0203 	sub.w	r2, r2, r3
 800c7ee:	f04f 0101 	mov.w	r1, #1
 800c7f2:	f300 809b 	bgt.w	800c92c <_strtod_l+0x7fc>
 800c7f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c7fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c800:	18be      	adds	r6, r7, r2
 800c802:	9b04      	ldr	r3, [sp, #16]
 800c804:	42b7      	cmp	r7, r6
 800c806:	4415      	add	r5, r2
 800c808:	441d      	add	r5, r3
 800c80a:	463b      	mov	r3, r7
 800c80c:	bfa8      	it	ge
 800c80e:	4633      	movge	r3, r6
 800c810:	42ab      	cmp	r3, r5
 800c812:	bfa8      	it	ge
 800c814:	462b      	movge	r3, r5
 800c816:	2b00      	cmp	r3, #0
 800c818:	bfc2      	ittt	gt
 800c81a:	1af6      	subgt	r6, r6, r3
 800c81c:	1aed      	subgt	r5, r5, r3
 800c81e:	1aff      	subgt	r7, r7, r3
 800c820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c822:	b1bb      	cbz	r3, 800c854 <_strtod_l+0x724>
 800c824:	4641      	mov	r1, r8
 800c826:	461a      	mov	r2, r3
 800c828:	4648      	mov	r0, r9
 800c82a:	f002 f941 	bl	800eab0 <__pow5mult>
 800c82e:	4680      	mov	r8, r0
 800c830:	2800      	cmp	r0, #0
 800c832:	f43f ae9b 	beq.w	800c56c <_strtod_l+0x43c>
 800c836:	4601      	mov	r1, r0
 800c838:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c83a:	4648      	mov	r0, r9
 800c83c:	f002 f8a2 	bl	800e984 <__multiply>
 800c840:	900c      	str	r0, [sp, #48]	; 0x30
 800c842:	2800      	cmp	r0, #0
 800c844:	f43f ae92 	beq.w	800c56c <_strtod_l+0x43c>
 800c848:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c84a:	4648      	mov	r0, r9
 800c84c:	f001 ffb3 	bl	800e7b6 <_Bfree>
 800c850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c852:	931c      	str	r3, [sp, #112]	; 0x70
 800c854:	2e00      	cmp	r6, #0
 800c856:	dc7a      	bgt.n	800c94e <_strtod_l+0x81e>
 800c858:	9b06      	ldr	r3, [sp, #24]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	dd08      	ble.n	800c870 <_strtod_l+0x740>
 800c85e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c860:	9905      	ldr	r1, [sp, #20]
 800c862:	4648      	mov	r0, r9
 800c864:	f002 f924 	bl	800eab0 <__pow5mult>
 800c868:	9005      	str	r0, [sp, #20]
 800c86a:	2800      	cmp	r0, #0
 800c86c:	f43f ae7e 	beq.w	800c56c <_strtod_l+0x43c>
 800c870:	2d00      	cmp	r5, #0
 800c872:	dd08      	ble.n	800c886 <_strtod_l+0x756>
 800c874:	462a      	mov	r2, r5
 800c876:	9905      	ldr	r1, [sp, #20]
 800c878:	4648      	mov	r0, r9
 800c87a:	f002 f967 	bl	800eb4c <__lshift>
 800c87e:	9005      	str	r0, [sp, #20]
 800c880:	2800      	cmp	r0, #0
 800c882:	f43f ae73 	beq.w	800c56c <_strtod_l+0x43c>
 800c886:	2f00      	cmp	r7, #0
 800c888:	dd08      	ble.n	800c89c <_strtod_l+0x76c>
 800c88a:	4641      	mov	r1, r8
 800c88c:	463a      	mov	r2, r7
 800c88e:	4648      	mov	r0, r9
 800c890:	f002 f95c 	bl	800eb4c <__lshift>
 800c894:	4680      	mov	r8, r0
 800c896:	2800      	cmp	r0, #0
 800c898:	f43f ae68 	beq.w	800c56c <_strtod_l+0x43c>
 800c89c:	9a05      	ldr	r2, [sp, #20]
 800c89e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c8a0:	4648      	mov	r0, r9
 800c8a2:	f002 f9c1 	bl	800ec28 <__mdiff>
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	f43f ae5f 	beq.w	800c56c <_strtod_l+0x43c>
 800c8ae:	68c3      	ldr	r3, [r0, #12]
 800c8b0:	930c      	str	r3, [sp, #48]	; 0x30
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	60c3      	str	r3, [r0, #12]
 800c8b6:	4641      	mov	r1, r8
 800c8b8:	f002 f99c 	bl	800ebf4 <__mcmp>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	da55      	bge.n	800c96c <_strtod_l+0x83c>
 800c8c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8c2:	b9e3      	cbnz	r3, 800c8fe <_strtod_l+0x7ce>
 800c8c4:	f1ba 0f00 	cmp.w	sl, #0
 800c8c8:	d119      	bne.n	800c8fe <_strtod_l+0x7ce>
 800c8ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8ce:	b9b3      	cbnz	r3, 800c8fe <_strtod_l+0x7ce>
 800c8d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8d4:	0d1b      	lsrs	r3, r3, #20
 800c8d6:	051b      	lsls	r3, r3, #20
 800c8d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c8dc:	d90f      	bls.n	800c8fe <_strtod_l+0x7ce>
 800c8de:	6963      	ldr	r3, [r4, #20]
 800c8e0:	b913      	cbnz	r3, 800c8e8 <_strtod_l+0x7b8>
 800c8e2:	6923      	ldr	r3, [r4, #16]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	dd0a      	ble.n	800c8fe <_strtod_l+0x7ce>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	4648      	mov	r0, r9
 800c8ee:	f002 f92d 	bl	800eb4c <__lshift>
 800c8f2:	4641      	mov	r1, r8
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	f002 f97d 	bl	800ebf4 <__mcmp>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	dc67      	bgt.n	800c9ce <_strtod_l+0x89e>
 800c8fe:	9b04      	ldr	r3, [sp, #16]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d171      	bne.n	800c9e8 <_strtod_l+0x8b8>
 800c904:	e63d      	b.n	800c582 <_strtod_l+0x452>
 800c906:	f018 0f01 	tst.w	r8, #1
 800c90a:	d004      	beq.n	800c916 <_strtod_l+0x7e6>
 800c90c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c910:	f7f3 fe7a 	bl	8000608 <__aeabi_dmul>
 800c914:	2301      	movs	r3, #1
 800c916:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c91a:	3508      	adds	r5, #8
 800c91c:	e6e5      	b.n	800c6ea <_strtod_l+0x5ba>
 800c91e:	f04f 32ff 	mov.w	r2, #4294967295
 800c922:	fa02 f303 	lsl.w	r3, r2, r3
 800c926:	ea03 0a0a 	and.w	sl, r3, sl
 800c92a:	e6ff      	b.n	800c72c <_strtod_l+0x5fc>
 800c92c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c930:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c934:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c938:	36e2      	adds	r6, #226	; 0xe2
 800c93a:	fa01 f306 	lsl.w	r3, r1, r6
 800c93e:	930a      	str	r3, [sp, #40]	; 0x28
 800c940:	910f      	str	r1, [sp, #60]	; 0x3c
 800c942:	e75d      	b.n	800c800 <_strtod_l+0x6d0>
 800c944:	2300      	movs	r3, #0
 800c946:	930a      	str	r3, [sp, #40]	; 0x28
 800c948:	2301      	movs	r3, #1
 800c94a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c94c:	e758      	b.n	800c800 <_strtod_l+0x6d0>
 800c94e:	4632      	mov	r2, r6
 800c950:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c952:	4648      	mov	r0, r9
 800c954:	f002 f8fa 	bl	800eb4c <__lshift>
 800c958:	901c      	str	r0, [sp, #112]	; 0x70
 800c95a:	2800      	cmp	r0, #0
 800c95c:	f47f af7c 	bne.w	800c858 <_strtod_l+0x728>
 800c960:	e604      	b.n	800c56c <_strtod_l+0x43c>
 800c962:	bf00      	nop
 800c964:	08012ba0 	.word	0x08012ba0
 800c968:	fffffc02 	.word	0xfffffc02
 800c96c:	465d      	mov	r5, fp
 800c96e:	f040 8086 	bne.w	800ca7e <_strtod_l+0x94e>
 800c972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c974:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c978:	b32a      	cbz	r2, 800c9c6 <_strtod_l+0x896>
 800c97a:	4aaf      	ldr	r2, [pc, #700]	; (800cc38 <_strtod_l+0xb08>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d153      	bne.n	800ca28 <_strtod_l+0x8f8>
 800c980:	9b04      	ldr	r3, [sp, #16]
 800c982:	4650      	mov	r0, sl
 800c984:	b1d3      	cbz	r3, 800c9bc <_strtod_l+0x88c>
 800c986:	4aad      	ldr	r2, [pc, #692]	; (800cc3c <_strtod_l+0xb0c>)
 800c988:	402a      	ands	r2, r5
 800c98a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c98e:	f04f 31ff 	mov.w	r1, #4294967295
 800c992:	d816      	bhi.n	800c9c2 <_strtod_l+0x892>
 800c994:	0d12      	lsrs	r2, r2, #20
 800c996:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c99a:	fa01 f303 	lsl.w	r3, r1, r3
 800c99e:	4298      	cmp	r0, r3
 800c9a0:	d142      	bne.n	800ca28 <_strtod_l+0x8f8>
 800c9a2:	4ba7      	ldr	r3, [pc, #668]	; (800cc40 <_strtod_l+0xb10>)
 800c9a4:	429d      	cmp	r5, r3
 800c9a6:	d102      	bne.n	800c9ae <_strtod_l+0x87e>
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	f43f addf 	beq.w	800c56c <_strtod_l+0x43c>
 800c9ae:	4ba3      	ldr	r3, [pc, #652]	; (800cc3c <_strtod_l+0xb0c>)
 800c9b0:	402b      	ands	r3, r5
 800c9b2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c9b6:	f04f 0a00 	mov.w	sl, #0
 800c9ba:	e7a0      	b.n	800c8fe <_strtod_l+0x7ce>
 800c9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c0:	e7ed      	b.n	800c99e <_strtod_l+0x86e>
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	e7eb      	b.n	800c99e <_strtod_l+0x86e>
 800c9c6:	bb7b      	cbnz	r3, 800ca28 <_strtod_l+0x8f8>
 800c9c8:	f1ba 0f00 	cmp.w	sl, #0
 800c9cc:	d12c      	bne.n	800ca28 <_strtod_l+0x8f8>
 800c9ce:	9904      	ldr	r1, [sp, #16]
 800c9d0:	4a9a      	ldr	r2, [pc, #616]	; (800cc3c <_strtod_l+0xb0c>)
 800c9d2:	465b      	mov	r3, fp
 800c9d4:	b1f1      	cbz	r1, 800ca14 <_strtod_l+0x8e4>
 800c9d6:	ea02 010b 	and.w	r1, r2, fp
 800c9da:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c9de:	dc19      	bgt.n	800ca14 <_strtod_l+0x8e4>
 800c9e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c9e4:	f77f ae5b 	ble.w	800c69e <_strtod_l+0x56e>
 800c9e8:	4a96      	ldr	r2, [pc, #600]	; (800cc44 <_strtod_l+0xb14>)
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c9f0:	4650      	mov	r0, sl
 800c9f2:	4659      	mov	r1, fp
 800c9f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c9f8:	f7f3 fe06 	bl	8000608 <__aeabi_dmul>
 800c9fc:	4682      	mov	sl, r0
 800c9fe:	468b      	mov	fp, r1
 800ca00:	2900      	cmp	r1, #0
 800ca02:	f47f adbe 	bne.w	800c582 <_strtod_l+0x452>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	f47f adbb 	bne.w	800c582 <_strtod_l+0x452>
 800ca0c:	2322      	movs	r3, #34	; 0x22
 800ca0e:	f8c9 3000 	str.w	r3, [r9]
 800ca12:	e5b6      	b.n	800c582 <_strtod_l+0x452>
 800ca14:	4013      	ands	r3, r2
 800ca16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ca1a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ca1e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ca22:	f04f 3aff 	mov.w	sl, #4294967295
 800ca26:	e76a      	b.n	800c8fe <_strtod_l+0x7ce>
 800ca28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca2a:	b193      	cbz	r3, 800ca52 <_strtod_l+0x922>
 800ca2c:	422b      	tst	r3, r5
 800ca2e:	f43f af66 	beq.w	800c8fe <_strtod_l+0x7ce>
 800ca32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca34:	9a04      	ldr	r2, [sp, #16]
 800ca36:	4650      	mov	r0, sl
 800ca38:	4659      	mov	r1, fp
 800ca3a:	b173      	cbz	r3, 800ca5a <_strtod_l+0x92a>
 800ca3c:	f7ff fb5a 	bl	800c0f4 <sulp>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca48:	f7f3 fc28 	bl	800029c <__adddf3>
 800ca4c:	4682      	mov	sl, r0
 800ca4e:	468b      	mov	fp, r1
 800ca50:	e755      	b.n	800c8fe <_strtod_l+0x7ce>
 800ca52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca54:	ea13 0f0a 	tst.w	r3, sl
 800ca58:	e7e9      	b.n	800ca2e <_strtod_l+0x8fe>
 800ca5a:	f7ff fb4b 	bl	800c0f4 <sulp>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca66:	f7f3 fc17 	bl	8000298 <__aeabi_dsub>
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	4682      	mov	sl, r0
 800ca70:	468b      	mov	fp, r1
 800ca72:	f7f4 f831 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	f47f ae11 	bne.w	800c69e <_strtod_l+0x56e>
 800ca7c:	e73f      	b.n	800c8fe <_strtod_l+0x7ce>
 800ca7e:	4641      	mov	r1, r8
 800ca80:	4620      	mov	r0, r4
 800ca82:	f002 f9f4 	bl	800ee6e <__ratio>
 800ca86:	ec57 6b10 	vmov	r6, r7, d0
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca90:	ee10 0a10 	vmov	r0, s0
 800ca94:	4639      	mov	r1, r7
 800ca96:	f7f4 f833 	bl	8000b00 <__aeabi_dcmple>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d077      	beq.n	800cb8e <_strtod_l+0xa5e>
 800ca9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d04a      	beq.n	800cb3a <_strtod_l+0xa0a>
 800caa4:	4b68      	ldr	r3, [pc, #416]	; (800cc48 <_strtod_l+0xb18>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800caac:	4f66      	ldr	r7, [pc, #408]	; (800cc48 <_strtod_l+0xb18>)
 800caae:	2600      	movs	r6, #0
 800cab0:	4b62      	ldr	r3, [pc, #392]	; (800cc3c <_strtod_l+0xb0c>)
 800cab2:	402b      	ands	r3, r5
 800cab4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cab8:	4b64      	ldr	r3, [pc, #400]	; (800cc4c <_strtod_l+0xb1c>)
 800caba:	429a      	cmp	r2, r3
 800cabc:	f040 80ce 	bne.w	800cc5c <_strtod_l+0xb2c>
 800cac0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cac4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cac8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800cacc:	ec4b ab10 	vmov	d0, sl, fp
 800cad0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800cad4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cad8:	f002 f904 	bl	800ece4 <__ulp>
 800cadc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cae0:	ec53 2b10 	vmov	r2, r3, d0
 800cae4:	f7f3 fd90 	bl	8000608 <__aeabi_dmul>
 800cae8:	4652      	mov	r2, sl
 800caea:	465b      	mov	r3, fp
 800caec:	f7f3 fbd6 	bl	800029c <__adddf3>
 800caf0:	460b      	mov	r3, r1
 800caf2:	4952      	ldr	r1, [pc, #328]	; (800cc3c <_strtod_l+0xb0c>)
 800caf4:	4a56      	ldr	r2, [pc, #344]	; (800cc50 <_strtod_l+0xb20>)
 800caf6:	4019      	ands	r1, r3
 800caf8:	4291      	cmp	r1, r2
 800cafa:	4682      	mov	sl, r0
 800cafc:	d95b      	bls.n	800cbb6 <_strtod_l+0xa86>
 800cafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb00:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d103      	bne.n	800cb10 <_strtod_l+0x9e0>
 800cb08:	9b08      	ldr	r3, [sp, #32]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	f43f ad2e 	beq.w	800c56c <_strtod_l+0x43c>
 800cb10:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800cc40 <_strtod_l+0xb10>
 800cb14:	f04f 3aff 	mov.w	sl, #4294967295
 800cb18:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cb1a:	4648      	mov	r0, r9
 800cb1c:	f001 fe4b 	bl	800e7b6 <_Bfree>
 800cb20:	9905      	ldr	r1, [sp, #20]
 800cb22:	4648      	mov	r0, r9
 800cb24:	f001 fe47 	bl	800e7b6 <_Bfree>
 800cb28:	4641      	mov	r1, r8
 800cb2a:	4648      	mov	r0, r9
 800cb2c:	f001 fe43 	bl	800e7b6 <_Bfree>
 800cb30:	4621      	mov	r1, r4
 800cb32:	4648      	mov	r0, r9
 800cb34:	f001 fe3f 	bl	800e7b6 <_Bfree>
 800cb38:	e619      	b.n	800c76e <_strtod_l+0x63e>
 800cb3a:	f1ba 0f00 	cmp.w	sl, #0
 800cb3e:	d11a      	bne.n	800cb76 <_strtod_l+0xa46>
 800cb40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb44:	b9eb      	cbnz	r3, 800cb82 <_strtod_l+0xa52>
 800cb46:	2200      	movs	r2, #0
 800cb48:	4b3f      	ldr	r3, [pc, #252]	; (800cc48 <_strtod_l+0xb18>)
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	4639      	mov	r1, r7
 800cb4e:	f7f3 ffcd 	bl	8000aec <__aeabi_dcmplt>
 800cb52:	b9c8      	cbnz	r0, 800cb88 <_strtod_l+0xa58>
 800cb54:	4630      	mov	r0, r6
 800cb56:	4639      	mov	r1, r7
 800cb58:	2200      	movs	r2, #0
 800cb5a:	4b3e      	ldr	r3, [pc, #248]	; (800cc54 <_strtod_l+0xb24>)
 800cb5c:	f7f3 fd54 	bl	8000608 <__aeabi_dmul>
 800cb60:	4606      	mov	r6, r0
 800cb62:	460f      	mov	r7, r1
 800cb64:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cb68:	9618      	str	r6, [sp, #96]	; 0x60
 800cb6a:	9319      	str	r3, [sp, #100]	; 0x64
 800cb6c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800cb70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cb74:	e79c      	b.n	800cab0 <_strtod_l+0x980>
 800cb76:	f1ba 0f01 	cmp.w	sl, #1
 800cb7a:	d102      	bne.n	800cb82 <_strtod_l+0xa52>
 800cb7c:	2d00      	cmp	r5, #0
 800cb7e:	f43f ad8e 	beq.w	800c69e <_strtod_l+0x56e>
 800cb82:	2200      	movs	r2, #0
 800cb84:	4b34      	ldr	r3, [pc, #208]	; (800cc58 <_strtod_l+0xb28>)
 800cb86:	e78f      	b.n	800caa8 <_strtod_l+0x978>
 800cb88:	2600      	movs	r6, #0
 800cb8a:	4f32      	ldr	r7, [pc, #200]	; (800cc54 <_strtod_l+0xb24>)
 800cb8c:	e7ea      	b.n	800cb64 <_strtod_l+0xa34>
 800cb8e:	4b31      	ldr	r3, [pc, #196]	; (800cc54 <_strtod_l+0xb24>)
 800cb90:	4630      	mov	r0, r6
 800cb92:	4639      	mov	r1, r7
 800cb94:	2200      	movs	r2, #0
 800cb96:	f7f3 fd37 	bl	8000608 <__aeabi_dmul>
 800cb9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb9c:	4606      	mov	r6, r0
 800cb9e:	460f      	mov	r7, r1
 800cba0:	b933      	cbnz	r3, 800cbb0 <_strtod_l+0xa80>
 800cba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cba6:	9010      	str	r0, [sp, #64]	; 0x40
 800cba8:	9311      	str	r3, [sp, #68]	; 0x44
 800cbaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cbae:	e7df      	b.n	800cb70 <_strtod_l+0xa40>
 800cbb0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cbb4:	e7f9      	b.n	800cbaa <_strtod_l+0xa7a>
 800cbb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cbba:	9b04      	ldr	r3, [sp, #16]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d1ab      	bne.n	800cb18 <_strtod_l+0x9e8>
 800cbc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cbc4:	0d1b      	lsrs	r3, r3, #20
 800cbc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbc8:	051b      	lsls	r3, r3, #20
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	465d      	mov	r5, fp
 800cbce:	d1a3      	bne.n	800cb18 <_strtod_l+0x9e8>
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f7f3 ffc8 	bl	8000b68 <__aeabi_d2iz>
 800cbd8:	f7f3 fcac 	bl	8000534 <__aeabi_i2d>
 800cbdc:	460b      	mov	r3, r1
 800cbde:	4602      	mov	r2, r0
 800cbe0:	4639      	mov	r1, r7
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	f7f3 fb58 	bl	8000298 <__aeabi_dsub>
 800cbe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbea:	4606      	mov	r6, r0
 800cbec:	460f      	mov	r7, r1
 800cbee:	b933      	cbnz	r3, 800cbfe <_strtod_l+0xace>
 800cbf0:	f1ba 0f00 	cmp.w	sl, #0
 800cbf4:	d103      	bne.n	800cbfe <_strtod_l+0xace>
 800cbf6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800cbfa:	2d00      	cmp	r5, #0
 800cbfc:	d06d      	beq.n	800ccda <_strtod_l+0xbaa>
 800cbfe:	a30a      	add	r3, pc, #40	; (adr r3, 800cc28 <_strtod_l+0xaf8>)
 800cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc04:	4630      	mov	r0, r6
 800cc06:	4639      	mov	r1, r7
 800cc08:	f7f3 ff70 	bl	8000aec <__aeabi_dcmplt>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	f47f acb8 	bne.w	800c582 <_strtod_l+0x452>
 800cc12:	a307      	add	r3, pc, #28	; (adr r3, 800cc30 <_strtod_l+0xb00>)
 800cc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc18:	4630      	mov	r0, r6
 800cc1a:	4639      	mov	r1, r7
 800cc1c:	f7f3 ff84 	bl	8000b28 <__aeabi_dcmpgt>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	f43f af79 	beq.w	800cb18 <_strtod_l+0x9e8>
 800cc26:	e4ac      	b.n	800c582 <_strtod_l+0x452>
 800cc28:	94a03595 	.word	0x94a03595
 800cc2c:	3fdfffff 	.word	0x3fdfffff
 800cc30:	35afe535 	.word	0x35afe535
 800cc34:	3fe00000 	.word	0x3fe00000
 800cc38:	000fffff 	.word	0x000fffff
 800cc3c:	7ff00000 	.word	0x7ff00000
 800cc40:	7fefffff 	.word	0x7fefffff
 800cc44:	39500000 	.word	0x39500000
 800cc48:	3ff00000 	.word	0x3ff00000
 800cc4c:	7fe00000 	.word	0x7fe00000
 800cc50:	7c9fffff 	.word	0x7c9fffff
 800cc54:	3fe00000 	.word	0x3fe00000
 800cc58:	bff00000 	.word	0xbff00000
 800cc5c:	9b04      	ldr	r3, [sp, #16]
 800cc5e:	b333      	cbz	r3, 800ccae <_strtod_l+0xb7e>
 800cc60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc62:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cc66:	d822      	bhi.n	800ccae <_strtod_l+0xb7e>
 800cc68:	a327      	add	r3, pc, #156	; (adr r3, 800cd08 <_strtod_l+0xbd8>)
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	4630      	mov	r0, r6
 800cc70:	4639      	mov	r1, r7
 800cc72:	f7f3 ff45 	bl	8000b00 <__aeabi_dcmple>
 800cc76:	b1a0      	cbz	r0, 800cca2 <_strtod_l+0xb72>
 800cc78:	4639      	mov	r1, r7
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	f7f3 ff9c 	bl	8000bb8 <__aeabi_d2uiz>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	bf08      	it	eq
 800cc84:	2001      	moveq	r0, #1
 800cc86:	f7f3 fc45 	bl	8000514 <__aeabi_ui2d>
 800cc8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc8c:	4606      	mov	r6, r0
 800cc8e:	460f      	mov	r7, r1
 800cc90:	bb03      	cbnz	r3, 800ccd4 <_strtod_l+0xba4>
 800cc92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc96:	9012      	str	r0, [sp, #72]	; 0x48
 800cc98:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc9a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cc9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cca4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cca6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ccaa:	1a9b      	subs	r3, r3, r2
 800ccac:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccae:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ccb2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ccb6:	f002 f815 	bl	800ece4 <__ulp>
 800ccba:	4650      	mov	r0, sl
 800ccbc:	ec53 2b10 	vmov	r2, r3, d0
 800ccc0:	4659      	mov	r1, fp
 800ccc2:	f7f3 fca1 	bl	8000608 <__aeabi_dmul>
 800ccc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ccca:	f7f3 fae7 	bl	800029c <__adddf3>
 800ccce:	4682      	mov	sl, r0
 800ccd0:	468b      	mov	fp, r1
 800ccd2:	e772      	b.n	800cbba <_strtod_l+0xa8a>
 800ccd4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ccd8:	e7df      	b.n	800cc9a <_strtod_l+0xb6a>
 800ccda:	a30d      	add	r3, pc, #52	; (adr r3, 800cd10 <_strtod_l+0xbe0>)
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	f7f3 ff04 	bl	8000aec <__aeabi_dcmplt>
 800cce4:	e79c      	b.n	800cc20 <_strtod_l+0xaf0>
 800cce6:	2300      	movs	r3, #0
 800cce8:	930d      	str	r3, [sp, #52]	; 0x34
 800ccea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ccec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	f7ff ba61 	b.w	800c1b6 <_strtod_l+0x86>
 800ccf4:	2b65      	cmp	r3, #101	; 0x65
 800ccf6:	f04f 0200 	mov.w	r2, #0
 800ccfa:	f43f ab4e 	beq.w	800c39a <_strtod_l+0x26a>
 800ccfe:	2101      	movs	r1, #1
 800cd00:	4614      	mov	r4, r2
 800cd02:	9104      	str	r1, [sp, #16]
 800cd04:	f7ff bacb 	b.w	800c29e <_strtod_l+0x16e>
 800cd08:	ffc00000 	.word	0xffc00000
 800cd0c:	41dfffff 	.word	0x41dfffff
 800cd10:	94a03595 	.word	0x94a03595
 800cd14:	3fcfffff 	.word	0x3fcfffff

0800cd18 <_strtod_r>:
 800cd18:	4b05      	ldr	r3, [pc, #20]	; (800cd30 <_strtod_r+0x18>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	b410      	push	{r4}
 800cd1e:	6a1b      	ldr	r3, [r3, #32]
 800cd20:	4c04      	ldr	r4, [pc, #16]	; (800cd34 <_strtod_r+0x1c>)
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	bf08      	it	eq
 800cd26:	4623      	moveq	r3, r4
 800cd28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd2c:	f7ff ba00 	b.w	800c130 <_strtod_l>
 800cd30:	200001e8 	.word	0x200001e8
 800cd34:	2000024c 	.word	0x2000024c

0800cd38 <_strtol_l.isra.0>:
 800cd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd3c:	4680      	mov	r8, r0
 800cd3e:	4689      	mov	r9, r1
 800cd40:	4692      	mov	sl, r2
 800cd42:	461e      	mov	r6, r3
 800cd44:	460f      	mov	r7, r1
 800cd46:	463d      	mov	r5, r7
 800cd48:	9808      	ldr	r0, [sp, #32]
 800cd4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd4e:	f001 fc47 	bl	800e5e0 <__locale_ctype_ptr_l>
 800cd52:	4420      	add	r0, r4
 800cd54:	7843      	ldrb	r3, [r0, #1]
 800cd56:	f013 0308 	ands.w	r3, r3, #8
 800cd5a:	d132      	bne.n	800cdc2 <_strtol_l.isra.0+0x8a>
 800cd5c:	2c2d      	cmp	r4, #45	; 0x2d
 800cd5e:	d132      	bne.n	800cdc6 <_strtol_l.isra.0+0x8e>
 800cd60:	787c      	ldrb	r4, [r7, #1]
 800cd62:	1cbd      	adds	r5, r7, #2
 800cd64:	2201      	movs	r2, #1
 800cd66:	2e00      	cmp	r6, #0
 800cd68:	d05d      	beq.n	800ce26 <_strtol_l.isra.0+0xee>
 800cd6a:	2e10      	cmp	r6, #16
 800cd6c:	d109      	bne.n	800cd82 <_strtol_l.isra.0+0x4a>
 800cd6e:	2c30      	cmp	r4, #48	; 0x30
 800cd70:	d107      	bne.n	800cd82 <_strtol_l.isra.0+0x4a>
 800cd72:	782b      	ldrb	r3, [r5, #0]
 800cd74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd78:	2b58      	cmp	r3, #88	; 0x58
 800cd7a:	d14f      	bne.n	800ce1c <_strtol_l.isra.0+0xe4>
 800cd7c:	786c      	ldrb	r4, [r5, #1]
 800cd7e:	2610      	movs	r6, #16
 800cd80:	3502      	adds	r5, #2
 800cd82:	2a00      	cmp	r2, #0
 800cd84:	bf14      	ite	ne
 800cd86:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800cd8a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800cd8e:	2700      	movs	r7, #0
 800cd90:	fbb1 fcf6 	udiv	ip, r1, r6
 800cd94:	4638      	mov	r0, r7
 800cd96:	fb06 1e1c 	mls	lr, r6, ip, r1
 800cd9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800cd9e:	2b09      	cmp	r3, #9
 800cda0:	d817      	bhi.n	800cdd2 <_strtol_l.isra.0+0x9a>
 800cda2:	461c      	mov	r4, r3
 800cda4:	42a6      	cmp	r6, r4
 800cda6:	dd23      	ble.n	800cdf0 <_strtol_l.isra.0+0xb8>
 800cda8:	1c7b      	adds	r3, r7, #1
 800cdaa:	d007      	beq.n	800cdbc <_strtol_l.isra.0+0x84>
 800cdac:	4584      	cmp	ip, r0
 800cdae:	d31c      	bcc.n	800cdea <_strtol_l.isra.0+0xb2>
 800cdb0:	d101      	bne.n	800cdb6 <_strtol_l.isra.0+0x7e>
 800cdb2:	45a6      	cmp	lr, r4
 800cdb4:	db19      	blt.n	800cdea <_strtol_l.isra.0+0xb2>
 800cdb6:	fb00 4006 	mla	r0, r0, r6, r4
 800cdba:	2701      	movs	r7, #1
 800cdbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdc0:	e7eb      	b.n	800cd9a <_strtol_l.isra.0+0x62>
 800cdc2:	462f      	mov	r7, r5
 800cdc4:	e7bf      	b.n	800cd46 <_strtol_l.isra.0+0xe>
 800cdc6:	2c2b      	cmp	r4, #43	; 0x2b
 800cdc8:	bf04      	itt	eq
 800cdca:	1cbd      	addeq	r5, r7, #2
 800cdcc:	787c      	ldrbeq	r4, [r7, #1]
 800cdce:	461a      	mov	r2, r3
 800cdd0:	e7c9      	b.n	800cd66 <_strtol_l.isra.0+0x2e>
 800cdd2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800cdd6:	2b19      	cmp	r3, #25
 800cdd8:	d801      	bhi.n	800cdde <_strtol_l.isra.0+0xa6>
 800cdda:	3c37      	subs	r4, #55	; 0x37
 800cddc:	e7e2      	b.n	800cda4 <_strtol_l.isra.0+0x6c>
 800cdde:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cde2:	2b19      	cmp	r3, #25
 800cde4:	d804      	bhi.n	800cdf0 <_strtol_l.isra.0+0xb8>
 800cde6:	3c57      	subs	r4, #87	; 0x57
 800cde8:	e7dc      	b.n	800cda4 <_strtol_l.isra.0+0x6c>
 800cdea:	f04f 37ff 	mov.w	r7, #4294967295
 800cdee:	e7e5      	b.n	800cdbc <_strtol_l.isra.0+0x84>
 800cdf0:	1c7b      	adds	r3, r7, #1
 800cdf2:	d108      	bne.n	800ce06 <_strtol_l.isra.0+0xce>
 800cdf4:	2322      	movs	r3, #34	; 0x22
 800cdf6:	f8c8 3000 	str.w	r3, [r8]
 800cdfa:	4608      	mov	r0, r1
 800cdfc:	f1ba 0f00 	cmp.w	sl, #0
 800ce00:	d107      	bne.n	800ce12 <_strtol_l.isra.0+0xda>
 800ce02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce06:	b102      	cbz	r2, 800ce0a <_strtol_l.isra.0+0xd2>
 800ce08:	4240      	negs	r0, r0
 800ce0a:	f1ba 0f00 	cmp.w	sl, #0
 800ce0e:	d0f8      	beq.n	800ce02 <_strtol_l.isra.0+0xca>
 800ce10:	b10f      	cbz	r7, 800ce16 <_strtol_l.isra.0+0xde>
 800ce12:	f105 39ff 	add.w	r9, r5, #4294967295
 800ce16:	f8ca 9000 	str.w	r9, [sl]
 800ce1a:	e7f2      	b.n	800ce02 <_strtol_l.isra.0+0xca>
 800ce1c:	2430      	movs	r4, #48	; 0x30
 800ce1e:	2e00      	cmp	r6, #0
 800ce20:	d1af      	bne.n	800cd82 <_strtol_l.isra.0+0x4a>
 800ce22:	2608      	movs	r6, #8
 800ce24:	e7ad      	b.n	800cd82 <_strtol_l.isra.0+0x4a>
 800ce26:	2c30      	cmp	r4, #48	; 0x30
 800ce28:	d0a3      	beq.n	800cd72 <_strtol_l.isra.0+0x3a>
 800ce2a:	260a      	movs	r6, #10
 800ce2c:	e7a9      	b.n	800cd82 <_strtol_l.isra.0+0x4a>
	...

0800ce30 <_strtol_r>:
 800ce30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce32:	4c06      	ldr	r4, [pc, #24]	; (800ce4c <_strtol_r+0x1c>)
 800ce34:	4d06      	ldr	r5, [pc, #24]	; (800ce50 <_strtol_r+0x20>)
 800ce36:	6824      	ldr	r4, [r4, #0]
 800ce38:	6a24      	ldr	r4, [r4, #32]
 800ce3a:	2c00      	cmp	r4, #0
 800ce3c:	bf08      	it	eq
 800ce3e:	462c      	moveq	r4, r5
 800ce40:	9400      	str	r4, [sp, #0]
 800ce42:	f7ff ff79 	bl	800cd38 <_strtol_l.isra.0>
 800ce46:	b003      	add	sp, #12
 800ce48:	bd30      	pop	{r4, r5, pc}
 800ce4a:	bf00      	nop
 800ce4c:	200001e8 	.word	0x200001e8
 800ce50:	2000024c 	.word	0x2000024c

0800ce54 <__swbuf_r>:
 800ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce56:	460e      	mov	r6, r1
 800ce58:	4614      	mov	r4, r2
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	b118      	cbz	r0, 800ce66 <__swbuf_r+0x12>
 800ce5e:	6983      	ldr	r3, [r0, #24]
 800ce60:	b90b      	cbnz	r3, 800ce66 <__swbuf_r+0x12>
 800ce62:	f001 f80d 	bl	800de80 <__sinit>
 800ce66:	4b21      	ldr	r3, [pc, #132]	; (800ceec <__swbuf_r+0x98>)
 800ce68:	429c      	cmp	r4, r3
 800ce6a:	d12a      	bne.n	800cec2 <__swbuf_r+0x6e>
 800ce6c:	686c      	ldr	r4, [r5, #4]
 800ce6e:	69a3      	ldr	r3, [r4, #24]
 800ce70:	60a3      	str	r3, [r4, #8]
 800ce72:	89a3      	ldrh	r3, [r4, #12]
 800ce74:	071a      	lsls	r2, r3, #28
 800ce76:	d52e      	bpl.n	800ced6 <__swbuf_r+0x82>
 800ce78:	6923      	ldr	r3, [r4, #16]
 800ce7a:	b363      	cbz	r3, 800ced6 <__swbuf_r+0x82>
 800ce7c:	6923      	ldr	r3, [r4, #16]
 800ce7e:	6820      	ldr	r0, [r4, #0]
 800ce80:	1ac0      	subs	r0, r0, r3
 800ce82:	6963      	ldr	r3, [r4, #20]
 800ce84:	b2f6      	uxtb	r6, r6
 800ce86:	4283      	cmp	r3, r0
 800ce88:	4637      	mov	r7, r6
 800ce8a:	dc04      	bgt.n	800ce96 <__swbuf_r+0x42>
 800ce8c:	4621      	mov	r1, r4
 800ce8e:	4628      	mov	r0, r5
 800ce90:	f000 ff8c 	bl	800ddac <_fflush_r>
 800ce94:	bb28      	cbnz	r0, 800cee2 <__swbuf_r+0x8e>
 800ce96:	68a3      	ldr	r3, [r4, #8]
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	60a3      	str	r3, [r4, #8]
 800ce9c:	6823      	ldr	r3, [r4, #0]
 800ce9e:	1c5a      	adds	r2, r3, #1
 800cea0:	6022      	str	r2, [r4, #0]
 800cea2:	701e      	strb	r6, [r3, #0]
 800cea4:	6963      	ldr	r3, [r4, #20]
 800cea6:	3001      	adds	r0, #1
 800cea8:	4283      	cmp	r3, r0
 800ceaa:	d004      	beq.n	800ceb6 <__swbuf_r+0x62>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	07db      	lsls	r3, r3, #31
 800ceb0:	d519      	bpl.n	800cee6 <__swbuf_r+0x92>
 800ceb2:	2e0a      	cmp	r6, #10
 800ceb4:	d117      	bne.n	800cee6 <__swbuf_r+0x92>
 800ceb6:	4621      	mov	r1, r4
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f000 ff77 	bl	800ddac <_fflush_r>
 800cebe:	b190      	cbz	r0, 800cee6 <__swbuf_r+0x92>
 800cec0:	e00f      	b.n	800cee2 <__swbuf_r+0x8e>
 800cec2:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <__swbuf_r+0x9c>)
 800cec4:	429c      	cmp	r4, r3
 800cec6:	d101      	bne.n	800cecc <__swbuf_r+0x78>
 800cec8:	68ac      	ldr	r4, [r5, #8]
 800ceca:	e7d0      	b.n	800ce6e <__swbuf_r+0x1a>
 800cecc:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <__swbuf_r+0xa0>)
 800cece:	429c      	cmp	r4, r3
 800ced0:	bf08      	it	eq
 800ced2:	68ec      	ldreq	r4, [r5, #12]
 800ced4:	e7cb      	b.n	800ce6e <__swbuf_r+0x1a>
 800ced6:	4621      	mov	r1, r4
 800ced8:	4628      	mov	r0, r5
 800ceda:	f000 f81f 	bl	800cf1c <__swsetup_r>
 800cede:	2800      	cmp	r0, #0
 800cee0:	d0cc      	beq.n	800ce7c <__swbuf_r+0x28>
 800cee2:	f04f 37ff 	mov.w	r7, #4294967295
 800cee6:	4638      	mov	r0, r7
 800cee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceea:	bf00      	nop
 800ceec:	08012bf8 	.word	0x08012bf8
 800cef0:	08012c18 	.word	0x08012c18
 800cef4:	08012bd8 	.word	0x08012bd8

0800cef8 <_write_r>:
 800cef8:	b538      	push	{r3, r4, r5, lr}
 800cefa:	4c07      	ldr	r4, [pc, #28]	; (800cf18 <_write_r+0x20>)
 800cefc:	4605      	mov	r5, r0
 800cefe:	4608      	mov	r0, r1
 800cf00:	4611      	mov	r1, r2
 800cf02:	2200      	movs	r2, #0
 800cf04:	6022      	str	r2, [r4, #0]
 800cf06:	461a      	mov	r2, r3
 800cf08:	f7f4 f9dc 	bl	80012c4 <_write>
 800cf0c:	1c43      	adds	r3, r0, #1
 800cf0e:	d102      	bne.n	800cf16 <_write_r+0x1e>
 800cf10:	6823      	ldr	r3, [r4, #0]
 800cf12:	b103      	cbz	r3, 800cf16 <_write_r+0x1e>
 800cf14:	602b      	str	r3, [r5, #0]
 800cf16:	bd38      	pop	{r3, r4, r5, pc}
 800cf18:	20001378 	.word	0x20001378

0800cf1c <__swsetup_r>:
 800cf1c:	4b32      	ldr	r3, [pc, #200]	; (800cfe8 <__swsetup_r+0xcc>)
 800cf1e:	b570      	push	{r4, r5, r6, lr}
 800cf20:	681d      	ldr	r5, [r3, #0]
 800cf22:	4606      	mov	r6, r0
 800cf24:	460c      	mov	r4, r1
 800cf26:	b125      	cbz	r5, 800cf32 <__swsetup_r+0x16>
 800cf28:	69ab      	ldr	r3, [r5, #24]
 800cf2a:	b913      	cbnz	r3, 800cf32 <__swsetup_r+0x16>
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f000 ffa7 	bl	800de80 <__sinit>
 800cf32:	4b2e      	ldr	r3, [pc, #184]	; (800cfec <__swsetup_r+0xd0>)
 800cf34:	429c      	cmp	r4, r3
 800cf36:	d10f      	bne.n	800cf58 <__swsetup_r+0x3c>
 800cf38:	686c      	ldr	r4, [r5, #4]
 800cf3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	0715      	lsls	r5, r2, #28
 800cf42:	d42c      	bmi.n	800cf9e <__swsetup_r+0x82>
 800cf44:	06d0      	lsls	r0, r2, #27
 800cf46:	d411      	bmi.n	800cf6c <__swsetup_r+0x50>
 800cf48:	2209      	movs	r2, #9
 800cf4a:	6032      	str	r2, [r6, #0]
 800cf4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf50:	81a3      	strh	r3, [r4, #12]
 800cf52:	f04f 30ff 	mov.w	r0, #4294967295
 800cf56:	e03e      	b.n	800cfd6 <__swsetup_r+0xba>
 800cf58:	4b25      	ldr	r3, [pc, #148]	; (800cff0 <__swsetup_r+0xd4>)
 800cf5a:	429c      	cmp	r4, r3
 800cf5c:	d101      	bne.n	800cf62 <__swsetup_r+0x46>
 800cf5e:	68ac      	ldr	r4, [r5, #8]
 800cf60:	e7eb      	b.n	800cf3a <__swsetup_r+0x1e>
 800cf62:	4b24      	ldr	r3, [pc, #144]	; (800cff4 <__swsetup_r+0xd8>)
 800cf64:	429c      	cmp	r4, r3
 800cf66:	bf08      	it	eq
 800cf68:	68ec      	ldreq	r4, [r5, #12]
 800cf6a:	e7e6      	b.n	800cf3a <__swsetup_r+0x1e>
 800cf6c:	0751      	lsls	r1, r2, #29
 800cf6e:	d512      	bpl.n	800cf96 <__swsetup_r+0x7a>
 800cf70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf72:	b141      	cbz	r1, 800cf86 <__swsetup_r+0x6a>
 800cf74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf78:	4299      	cmp	r1, r3
 800cf7a:	d002      	beq.n	800cf82 <__swsetup_r+0x66>
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f7fe f89d 	bl	800b0bc <_free_r>
 800cf82:	2300      	movs	r3, #0
 800cf84:	6363      	str	r3, [r4, #52]	; 0x34
 800cf86:	89a3      	ldrh	r3, [r4, #12]
 800cf88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf8c:	81a3      	strh	r3, [r4, #12]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	6063      	str	r3, [r4, #4]
 800cf92:	6923      	ldr	r3, [r4, #16]
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	89a3      	ldrh	r3, [r4, #12]
 800cf98:	f043 0308 	orr.w	r3, r3, #8
 800cf9c:	81a3      	strh	r3, [r4, #12]
 800cf9e:	6923      	ldr	r3, [r4, #16]
 800cfa0:	b94b      	cbnz	r3, 800cfb6 <__swsetup_r+0x9a>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfac:	d003      	beq.n	800cfb6 <__swsetup_r+0x9a>
 800cfae:	4621      	mov	r1, r4
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	f001 fb6d 	bl	800e690 <__smakebuf_r>
 800cfb6:	89a2      	ldrh	r2, [r4, #12]
 800cfb8:	f012 0301 	ands.w	r3, r2, #1
 800cfbc:	d00c      	beq.n	800cfd8 <__swsetup_r+0xbc>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	60a3      	str	r3, [r4, #8]
 800cfc2:	6963      	ldr	r3, [r4, #20]
 800cfc4:	425b      	negs	r3, r3
 800cfc6:	61a3      	str	r3, [r4, #24]
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	b953      	cbnz	r3, 800cfe2 <__swsetup_r+0xc6>
 800cfcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cfd4:	d1ba      	bne.n	800cf4c <__swsetup_r+0x30>
 800cfd6:	bd70      	pop	{r4, r5, r6, pc}
 800cfd8:	0792      	lsls	r2, r2, #30
 800cfda:	bf58      	it	pl
 800cfdc:	6963      	ldrpl	r3, [r4, #20]
 800cfde:	60a3      	str	r3, [r4, #8]
 800cfe0:	e7f2      	b.n	800cfc8 <__swsetup_r+0xac>
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	e7f7      	b.n	800cfd6 <__swsetup_r+0xba>
 800cfe6:	bf00      	nop
 800cfe8:	200001e8 	.word	0x200001e8
 800cfec:	08012bf8 	.word	0x08012bf8
 800cff0:	08012c18 	.word	0x08012c18
 800cff4:	08012bd8 	.word	0x08012bd8

0800cff8 <_close_r>:
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	4c06      	ldr	r4, [pc, #24]	; (800d014 <_close_r+0x1c>)
 800cffc:	2300      	movs	r3, #0
 800cffe:	4605      	mov	r5, r0
 800d000:	4608      	mov	r0, r1
 800d002:	6023      	str	r3, [r4, #0]
 800d004:	f7f5 f927 	bl	8002256 <_close>
 800d008:	1c43      	adds	r3, r0, #1
 800d00a:	d102      	bne.n	800d012 <_close_r+0x1a>
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	b103      	cbz	r3, 800d012 <_close_r+0x1a>
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	bd38      	pop	{r3, r4, r5, pc}
 800d014:	20001378 	.word	0x20001378

0800d018 <quorem>:
 800d018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01c:	6903      	ldr	r3, [r0, #16]
 800d01e:	690c      	ldr	r4, [r1, #16]
 800d020:	42a3      	cmp	r3, r4
 800d022:	4680      	mov	r8, r0
 800d024:	f2c0 8082 	blt.w	800d12c <quorem+0x114>
 800d028:	3c01      	subs	r4, #1
 800d02a:	f101 0714 	add.w	r7, r1, #20
 800d02e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d032:	f100 0614 	add.w	r6, r0, #20
 800d036:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d03a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d03e:	eb06 030c 	add.w	r3, r6, ip
 800d042:	3501      	adds	r5, #1
 800d044:	eb07 090c 	add.w	r9, r7, ip
 800d048:	9301      	str	r3, [sp, #4]
 800d04a:	fbb0 f5f5 	udiv	r5, r0, r5
 800d04e:	b395      	cbz	r5, 800d0b6 <quorem+0x9e>
 800d050:	f04f 0a00 	mov.w	sl, #0
 800d054:	4638      	mov	r0, r7
 800d056:	46b6      	mov	lr, r6
 800d058:	46d3      	mov	fp, sl
 800d05a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d05e:	b293      	uxth	r3, r2
 800d060:	fb05 a303 	mla	r3, r5, r3, sl
 800d064:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d068:	b29b      	uxth	r3, r3
 800d06a:	ebab 0303 	sub.w	r3, fp, r3
 800d06e:	0c12      	lsrs	r2, r2, #16
 800d070:	f8de b000 	ldr.w	fp, [lr]
 800d074:	fb05 a202 	mla	r2, r5, r2, sl
 800d078:	fa13 f38b 	uxtah	r3, r3, fp
 800d07c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d080:	fa1f fb82 	uxth.w	fp, r2
 800d084:	f8de 2000 	ldr.w	r2, [lr]
 800d088:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d08c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d090:	b29b      	uxth	r3, r3
 800d092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d096:	4581      	cmp	r9, r0
 800d098:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d09c:	f84e 3b04 	str.w	r3, [lr], #4
 800d0a0:	d2db      	bcs.n	800d05a <quorem+0x42>
 800d0a2:	f856 300c 	ldr.w	r3, [r6, ip]
 800d0a6:	b933      	cbnz	r3, 800d0b6 <quorem+0x9e>
 800d0a8:	9b01      	ldr	r3, [sp, #4]
 800d0aa:	3b04      	subs	r3, #4
 800d0ac:	429e      	cmp	r6, r3
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	d330      	bcc.n	800d114 <quorem+0xfc>
 800d0b2:	f8c8 4010 	str.w	r4, [r8, #16]
 800d0b6:	4640      	mov	r0, r8
 800d0b8:	f001 fd9c 	bl	800ebf4 <__mcmp>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	db25      	blt.n	800d10c <quorem+0xf4>
 800d0c0:	3501      	adds	r5, #1
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f04f 0c00 	mov.w	ip, #0
 800d0c8:	f857 2b04 	ldr.w	r2, [r7], #4
 800d0cc:	f8d0 e000 	ldr.w	lr, [r0]
 800d0d0:	b293      	uxth	r3, r2
 800d0d2:	ebac 0303 	sub.w	r3, ip, r3
 800d0d6:	0c12      	lsrs	r2, r2, #16
 800d0d8:	fa13 f38e 	uxtah	r3, r3, lr
 800d0dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d0e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0ea:	45b9      	cmp	r9, r7
 800d0ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d0f0:	f840 3b04 	str.w	r3, [r0], #4
 800d0f4:	d2e8      	bcs.n	800d0c8 <quorem+0xb0>
 800d0f6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d0fa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d0fe:	b92a      	cbnz	r2, 800d10c <quorem+0xf4>
 800d100:	3b04      	subs	r3, #4
 800d102:	429e      	cmp	r6, r3
 800d104:	461a      	mov	r2, r3
 800d106:	d30b      	bcc.n	800d120 <quorem+0x108>
 800d108:	f8c8 4010 	str.w	r4, [r8, #16]
 800d10c:	4628      	mov	r0, r5
 800d10e:	b003      	add	sp, #12
 800d110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d114:	6812      	ldr	r2, [r2, #0]
 800d116:	3b04      	subs	r3, #4
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d1ca      	bne.n	800d0b2 <quorem+0x9a>
 800d11c:	3c01      	subs	r4, #1
 800d11e:	e7c5      	b.n	800d0ac <quorem+0x94>
 800d120:	6812      	ldr	r2, [r2, #0]
 800d122:	3b04      	subs	r3, #4
 800d124:	2a00      	cmp	r2, #0
 800d126:	d1ef      	bne.n	800d108 <quorem+0xf0>
 800d128:	3c01      	subs	r4, #1
 800d12a:	e7ea      	b.n	800d102 <quorem+0xea>
 800d12c:	2000      	movs	r0, #0
 800d12e:	e7ee      	b.n	800d10e <quorem+0xf6>

0800d130 <_dtoa_r>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	ec57 6b10 	vmov	r6, r7, d0
 800d138:	b097      	sub	sp, #92	; 0x5c
 800d13a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d13c:	9106      	str	r1, [sp, #24]
 800d13e:	4604      	mov	r4, r0
 800d140:	920b      	str	r2, [sp, #44]	; 0x2c
 800d142:	9312      	str	r3, [sp, #72]	; 0x48
 800d144:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d148:	e9cd 6700 	strd	r6, r7, [sp]
 800d14c:	b93d      	cbnz	r5, 800d15e <_dtoa_r+0x2e>
 800d14e:	2010      	movs	r0, #16
 800d150:	f7fd ff9c 	bl	800b08c <malloc>
 800d154:	6260      	str	r0, [r4, #36]	; 0x24
 800d156:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d15a:	6005      	str	r5, [r0, #0]
 800d15c:	60c5      	str	r5, [r0, #12]
 800d15e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d160:	6819      	ldr	r1, [r3, #0]
 800d162:	b151      	cbz	r1, 800d17a <_dtoa_r+0x4a>
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	604a      	str	r2, [r1, #4]
 800d168:	2301      	movs	r3, #1
 800d16a:	4093      	lsls	r3, r2
 800d16c:	608b      	str	r3, [r1, #8]
 800d16e:	4620      	mov	r0, r4
 800d170:	f001 fb21 	bl	800e7b6 <_Bfree>
 800d174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d176:	2200      	movs	r2, #0
 800d178:	601a      	str	r2, [r3, #0]
 800d17a:	1e3b      	subs	r3, r7, #0
 800d17c:	bfbb      	ittet	lt
 800d17e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d182:	9301      	strlt	r3, [sp, #4]
 800d184:	2300      	movge	r3, #0
 800d186:	2201      	movlt	r2, #1
 800d188:	bfac      	ite	ge
 800d18a:	f8c8 3000 	strge.w	r3, [r8]
 800d18e:	f8c8 2000 	strlt.w	r2, [r8]
 800d192:	4baf      	ldr	r3, [pc, #700]	; (800d450 <_dtoa_r+0x320>)
 800d194:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d198:	ea33 0308 	bics.w	r3, r3, r8
 800d19c:	d114      	bne.n	800d1c8 <_dtoa_r+0x98>
 800d19e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d1a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800d1a4:	6013      	str	r3, [r2, #0]
 800d1a6:	9b00      	ldr	r3, [sp, #0]
 800d1a8:	b923      	cbnz	r3, 800d1b4 <_dtoa_r+0x84>
 800d1aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	f000 8542 	beq.w	800dc38 <_dtoa_r+0xb08>
 800d1b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d464 <_dtoa_r+0x334>
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f000 8544 	beq.w	800dc48 <_dtoa_r+0xb18>
 800d1c0:	f10b 0303 	add.w	r3, fp, #3
 800d1c4:	f000 bd3e 	b.w	800dc44 <_dtoa_r+0xb14>
 800d1c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	4639      	mov	r1, r7
 800d1d4:	f7f3 fc80 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1d8:	4681      	mov	r9, r0
 800d1da:	b168      	cbz	r0, 800d1f8 <_dtoa_r+0xc8>
 800d1dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d1de:	2301      	movs	r3, #1
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f000 8524 	beq.w	800dc32 <_dtoa_r+0xb02>
 800d1ea:	4b9a      	ldr	r3, [pc, #616]	; (800d454 <_dtoa_r+0x324>)
 800d1ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d1ee:	f103 3bff 	add.w	fp, r3, #4294967295
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	f000 bd28 	b.w	800dc48 <_dtoa_r+0xb18>
 800d1f8:	aa14      	add	r2, sp, #80	; 0x50
 800d1fa:	a915      	add	r1, sp, #84	; 0x54
 800d1fc:	ec47 6b10 	vmov	d0, r6, r7
 800d200:	4620      	mov	r0, r4
 800d202:	f001 fde5 	bl	800edd0 <__d2b>
 800d206:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d20a:	9004      	str	r0, [sp, #16]
 800d20c:	2d00      	cmp	r5, #0
 800d20e:	d07c      	beq.n	800d30a <_dtoa_r+0x1da>
 800d210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d214:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d218:	46b2      	mov	sl, r6
 800d21a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d21e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d222:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d226:	2200      	movs	r2, #0
 800d228:	4b8b      	ldr	r3, [pc, #556]	; (800d458 <_dtoa_r+0x328>)
 800d22a:	4650      	mov	r0, sl
 800d22c:	4659      	mov	r1, fp
 800d22e:	f7f3 f833 	bl	8000298 <__aeabi_dsub>
 800d232:	a381      	add	r3, pc, #516	; (adr r3, 800d438 <_dtoa_r+0x308>)
 800d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d238:	f7f3 f9e6 	bl	8000608 <__aeabi_dmul>
 800d23c:	a380      	add	r3, pc, #512	; (adr r3, 800d440 <_dtoa_r+0x310>)
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	f7f3 f82b 	bl	800029c <__adddf3>
 800d246:	4606      	mov	r6, r0
 800d248:	4628      	mov	r0, r5
 800d24a:	460f      	mov	r7, r1
 800d24c:	f7f3 f972 	bl	8000534 <__aeabi_i2d>
 800d250:	a37d      	add	r3, pc, #500	; (adr r3, 800d448 <_dtoa_r+0x318>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	f7f3 f9d7 	bl	8000608 <__aeabi_dmul>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	4630      	mov	r0, r6
 800d260:	4639      	mov	r1, r7
 800d262:	f7f3 f81b 	bl	800029c <__adddf3>
 800d266:	4606      	mov	r6, r0
 800d268:	460f      	mov	r7, r1
 800d26a:	f7f3 fc7d 	bl	8000b68 <__aeabi_d2iz>
 800d26e:	2200      	movs	r2, #0
 800d270:	4682      	mov	sl, r0
 800d272:	2300      	movs	r3, #0
 800d274:	4630      	mov	r0, r6
 800d276:	4639      	mov	r1, r7
 800d278:	f7f3 fc38 	bl	8000aec <__aeabi_dcmplt>
 800d27c:	b148      	cbz	r0, 800d292 <_dtoa_r+0x162>
 800d27e:	4650      	mov	r0, sl
 800d280:	f7f3 f958 	bl	8000534 <__aeabi_i2d>
 800d284:	4632      	mov	r2, r6
 800d286:	463b      	mov	r3, r7
 800d288:	f7f3 fc26 	bl	8000ad8 <__aeabi_dcmpeq>
 800d28c:	b908      	cbnz	r0, 800d292 <_dtoa_r+0x162>
 800d28e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d292:	f1ba 0f16 	cmp.w	sl, #22
 800d296:	d859      	bhi.n	800d34c <_dtoa_r+0x21c>
 800d298:	4970      	ldr	r1, [pc, #448]	; (800d45c <_dtoa_r+0x32c>)
 800d29a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d29e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2a6:	f7f3 fc3f 	bl	8000b28 <__aeabi_dcmpgt>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d050      	beq.n	800d350 <_dtoa_r+0x220>
 800d2ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2b8:	1b5d      	subs	r5, r3, r5
 800d2ba:	f1b5 0801 	subs.w	r8, r5, #1
 800d2be:	bf49      	itett	mi
 800d2c0:	f1c5 0301 	rsbmi	r3, r5, #1
 800d2c4:	2300      	movpl	r3, #0
 800d2c6:	9305      	strmi	r3, [sp, #20]
 800d2c8:	f04f 0800 	movmi.w	r8, #0
 800d2cc:	bf58      	it	pl
 800d2ce:	9305      	strpl	r3, [sp, #20]
 800d2d0:	f1ba 0f00 	cmp.w	sl, #0
 800d2d4:	db3e      	blt.n	800d354 <_dtoa_r+0x224>
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	44d0      	add	r8, sl
 800d2da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d2de:	9307      	str	r3, [sp, #28]
 800d2e0:	9b06      	ldr	r3, [sp, #24]
 800d2e2:	2b09      	cmp	r3, #9
 800d2e4:	f200 8090 	bhi.w	800d408 <_dtoa_r+0x2d8>
 800d2e8:	2b05      	cmp	r3, #5
 800d2ea:	bfc4      	itt	gt
 800d2ec:	3b04      	subgt	r3, #4
 800d2ee:	9306      	strgt	r3, [sp, #24]
 800d2f0:	9b06      	ldr	r3, [sp, #24]
 800d2f2:	f1a3 0302 	sub.w	r3, r3, #2
 800d2f6:	bfcc      	ite	gt
 800d2f8:	2500      	movgt	r5, #0
 800d2fa:	2501      	movle	r5, #1
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	f200 808f 	bhi.w	800d420 <_dtoa_r+0x2f0>
 800d302:	e8df f003 	tbb	[pc, r3]
 800d306:	7f7d      	.short	0x7f7d
 800d308:	7131      	.short	0x7131
 800d30a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d30e:	441d      	add	r5, r3
 800d310:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d314:	2820      	cmp	r0, #32
 800d316:	dd13      	ble.n	800d340 <_dtoa_r+0x210>
 800d318:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d31c:	9b00      	ldr	r3, [sp, #0]
 800d31e:	fa08 f800 	lsl.w	r8, r8, r0
 800d322:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d326:	fa23 f000 	lsr.w	r0, r3, r0
 800d32a:	ea48 0000 	orr.w	r0, r8, r0
 800d32e:	f7f3 f8f1 	bl	8000514 <__aeabi_ui2d>
 800d332:	2301      	movs	r3, #1
 800d334:	4682      	mov	sl, r0
 800d336:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d33a:	3d01      	subs	r5, #1
 800d33c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d33e:	e772      	b.n	800d226 <_dtoa_r+0xf6>
 800d340:	9b00      	ldr	r3, [sp, #0]
 800d342:	f1c0 0020 	rsb	r0, r0, #32
 800d346:	fa03 f000 	lsl.w	r0, r3, r0
 800d34a:	e7f0      	b.n	800d32e <_dtoa_r+0x1fe>
 800d34c:	2301      	movs	r3, #1
 800d34e:	e7b1      	b.n	800d2b4 <_dtoa_r+0x184>
 800d350:	900f      	str	r0, [sp, #60]	; 0x3c
 800d352:	e7b0      	b.n	800d2b6 <_dtoa_r+0x186>
 800d354:	9b05      	ldr	r3, [sp, #20]
 800d356:	eba3 030a 	sub.w	r3, r3, sl
 800d35a:	9305      	str	r3, [sp, #20]
 800d35c:	f1ca 0300 	rsb	r3, sl, #0
 800d360:	9307      	str	r3, [sp, #28]
 800d362:	2300      	movs	r3, #0
 800d364:	930e      	str	r3, [sp, #56]	; 0x38
 800d366:	e7bb      	b.n	800d2e0 <_dtoa_r+0x1b0>
 800d368:	2301      	movs	r3, #1
 800d36a:	930a      	str	r3, [sp, #40]	; 0x28
 800d36c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d36e:	2b00      	cmp	r3, #0
 800d370:	dd59      	ble.n	800d426 <_dtoa_r+0x2f6>
 800d372:	9302      	str	r3, [sp, #8]
 800d374:	4699      	mov	r9, r3
 800d376:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d378:	2200      	movs	r2, #0
 800d37a:	6072      	str	r2, [r6, #4]
 800d37c:	2204      	movs	r2, #4
 800d37e:	f102 0014 	add.w	r0, r2, #20
 800d382:	4298      	cmp	r0, r3
 800d384:	6871      	ldr	r1, [r6, #4]
 800d386:	d953      	bls.n	800d430 <_dtoa_r+0x300>
 800d388:	4620      	mov	r0, r4
 800d38a:	f001 f9e0 	bl	800e74e <_Balloc>
 800d38e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d390:	6030      	str	r0, [r6, #0]
 800d392:	f1b9 0f0e 	cmp.w	r9, #14
 800d396:	f8d3 b000 	ldr.w	fp, [r3]
 800d39a:	f200 80e6 	bhi.w	800d56a <_dtoa_r+0x43a>
 800d39e:	2d00      	cmp	r5, #0
 800d3a0:	f000 80e3 	beq.w	800d56a <_dtoa_r+0x43a>
 800d3a4:	ed9d 7b00 	vldr	d7, [sp]
 800d3a8:	f1ba 0f00 	cmp.w	sl, #0
 800d3ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d3b0:	dd74      	ble.n	800d49c <_dtoa_r+0x36c>
 800d3b2:	4a2a      	ldr	r2, [pc, #168]	; (800d45c <_dtoa_r+0x32c>)
 800d3b4:	f00a 030f 	and.w	r3, sl, #15
 800d3b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d3bc:	ed93 7b00 	vldr	d7, [r3]
 800d3c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d3c4:	06f0      	lsls	r0, r6, #27
 800d3c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d3ca:	d565      	bpl.n	800d498 <_dtoa_r+0x368>
 800d3cc:	4b24      	ldr	r3, [pc, #144]	; (800d460 <_dtoa_r+0x330>)
 800d3ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d3d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d3d6:	f7f3 fa41 	bl	800085c <__aeabi_ddiv>
 800d3da:	e9cd 0100 	strd	r0, r1, [sp]
 800d3de:	f006 060f 	and.w	r6, r6, #15
 800d3e2:	2503      	movs	r5, #3
 800d3e4:	4f1e      	ldr	r7, [pc, #120]	; (800d460 <_dtoa_r+0x330>)
 800d3e6:	e04c      	b.n	800d482 <_dtoa_r+0x352>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	930a      	str	r3, [sp, #40]	; 0x28
 800d3ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3ee:	4453      	add	r3, sl
 800d3f0:	f103 0901 	add.w	r9, r3, #1
 800d3f4:	9302      	str	r3, [sp, #8]
 800d3f6:	464b      	mov	r3, r9
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	bfb8      	it	lt
 800d3fc:	2301      	movlt	r3, #1
 800d3fe:	e7ba      	b.n	800d376 <_dtoa_r+0x246>
 800d400:	2300      	movs	r3, #0
 800d402:	e7b2      	b.n	800d36a <_dtoa_r+0x23a>
 800d404:	2300      	movs	r3, #0
 800d406:	e7f0      	b.n	800d3ea <_dtoa_r+0x2ba>
 800d408:	2501      	movs	r5, #1
 800d40a:	2300      	movs	r3, #0
 800d40c:	9306      	str	r3, [sp, #24]
 800d40e:	950a      	str	r5, [sp, #40]	; 0x28
 800d410:	f04f 33ff 	mov.w	r3, #4294967295
 800d414:	9302      	str	r3, [sp, #8]
 800d416:	4699      	mov	r9, r3
 800d418:	2200      	movs	r2, #0
 800d41a:	2312      	movs	r3, #18
 800d41c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d41e:	e7aa      	b.n	800d376 <_dtoa_r+0x246>
 800d420:	2301      	movs	r3, #1
 800d422:	930a      	str	r3, [sp, #40]	; 0x28
 800d424:	e7f4      	b.n	800d410 <_dtoa_r+0x2e0>
 800d426:	2301      	movs	r3, #1
 800d428:	9302      	str	r3, [sp, #8]
 800d42a:	4699      	mov	r9, r3
 800d42c:	461a      	mov	r2, r3
 800d42e:	e7f5      	b.n	800d41c <_dtoa_r+0x2ec>
 800d430:	3101      	adds	r1, #1
 800d432:	6071      	str	r1, [r6, #4]
 800d434:	0052      	lsls	r2, r2, #1
 800d436:	e7a2      	b.n	800d37e <_dtoa_r+0x24e>
 800d438:	636f4361 	.word	0x636f4361
 800d43c:	3fd287a7 	.word	0x3fd287a7
 800d440:	8b60c8b3 	.word	0x8b60c8b3
 800d444:	3fc68a28 	.word	0x3fc68a28
 800d448:	509f79fb 	.word	0x509f79fb
 800d44c:	3fd34413 	.word	0x3fd34413
 800d450:	7ff00000 	.word	0x7ff00000
 800d454:	08012d6c 	.word	0x08012d6c
 800d458:	3ff80000 	.word	0x3ff80000
 800d45c:	08012c70 	.word	0x08012c70
 800d460:	08012c48 	.word	0x08012c48
 800d464:	08012bd1 	.word	0x08012bd1
 800d468:	07f1      	lsls	r1, r6, #31
 800d46a:	d508      	bpl.n	800d47e <_dtoa_r+0x34e>
 800d46c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d470:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d474:	f7f3 f8c8 	bl	8000608 <__aeabi_dmul>
 800d478:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d47c:	3501      	adds	r5, #1
 800d47e:	1076      	asrs	r6, r6, #1
 800d480:	3708      	adds	r7, #8
 800d482:	2e00      	cmp	r6, #0
 800d484:	d1f0      	bne.n	800d468 <_dtoa_r+0x338>
 800d486:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d48a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d48e:	f7f3 f9e5 	bl	800085c <__aeabi_ddiv>
 800d492:	e9cd 0100 	strd	r0, r1, [sp]
 800d496:	e01a      	b.n	800d4ce <_dtoa_r+0x39e>
 800d498:	2502      	movs	r5, #2
 800d49a:	e7a3      	b.n	800d3e4 <_dtoa_r+0x2b4>
 800d49c:	f000 80a0 	beq.w	800d5e0 <_dtoa_r+0x4b0>
 800d4a0:	f1ca 0600 	rsb	r6, sl, #0
 800d4a4:	4b9f      	ldr	r3, [pc, #636]	; (800d724 <_dtoa_r+0x5f4>)
 800d4a6:	4fa0      	ldr	r7, [pc, #640]	; (800d728 <_dtoa_r+0x5f8>)
 800d4a8:	f006 020f 	and.w	r2, r6, #15
 800d4ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d4b8:	f7f3 f8a6 	bl	8000608 <__aeabi_dmul>
 800d4bc:	e9cd 0100 	strd	r0, r1, [sp]
 800d4c0:	1136      	asrs	r6, r6, #4
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	2502      	movs	r5, #2
 800d4c6:	2e00      	cmp	r6, #0
 800d4c8:	d17f      	bne.n	800d5ca <_dtoa_r+0x49a>
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1e1      	bne.n	800d492 <_dtoa_r+0x362>
 800d4ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 8087 	beq.w	800d5e4 <_dtoa_r+0x4b4>
 800d4d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	4b93      	ldr	r3, [pc, #588]	; (800d72c <_dtoa_r+0x5fc>)
 800d4de:	4630      	mov	r0, r6
 800d4e0:	4639      	mov	r1, r7
 800d4e2:	f7f3 fb03 	bl	8000aec <__aeabi_dcmplt>
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d07c      	beq.n	800d5e4 <_dtoa_r+0x4b4>
 800d4ea:	f1b9 0f00 	cmp.w	r9, #0
 800d4ee:	d079      	beq.n	800d5e4 <_dtoa_r+0x4b4>
 800d4f0:	9b02      	ldr	r3, [sp, #8]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	dd35      	ble.n	800d562 <_dtoa_r+0x432>
 800d4f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d4fa:	9308      	str	r3, [sp, #32]
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	2200      	movs	r2, #0
 800d500:	4b8b      	ldr	r3, [pc, #556]	; (800d730 <_dtoa_r+0x600>)
 800d502:	4630      	mov	r0, r6
 800d504:	f7f3 f880 	bl	8000608 <__aeabi_dmul>
 800d508:	e9cd 0100 	strd	r0, r1, [sp]
 800d50c:	9f02      	ldr	r7, [sp, #8]
 800d50e:	3501      	adds	r5, #1
 800d510:	4628      	mov	r0, r5
 800d512:	f7f3 f80f 	bl	8000534 <__aeabi_i2d>
 800d516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d51a:	f7f3 f875 	bl	8000608 <__aeabi_dmul>
 800d51e:	2200      	movs	r2, #0
 800d520:	4b84      	ldr	r3, [pc, #528]	; (800d734 <_dtoa_r+0x604>)
 800d522:	f7f2 febb 	bl	800029c <__adddf3>
 800d526:	4605      	mov	r5, r0
 800d528:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d52c:	2f00      	cmp	r7, #0
 800d52e:	d15d      	bne.n	800d5ec <_dtoa_r+0x4bc>
 800d530:	2200      	movs	r2, #0
 800d532:	4b81      	ldr	r3, [pc, #516]	; (800d738 <_dtoa_r+0x608>)
 800d534:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d538:	f7f2 feae 	bl	8000298 <__aeabi_dsub>
 800d53c:	462a      	mov	r2, r5
 800d53e:	4633      	mov	r3, r6
 800d540:	e9cd 0100 	strd	r0, r1, [sp]
 800d544:	f7f3 faf0 	bl	8000b28 <__aeabi_dcmpgt>
 800d548:	2800      	cmp	r0, #0
 800d54a:	f040 8288 	bne.w	800da5e <_dtoa_r+0x92e>
 800d54e:	462a      	mov	r2, r5
 800d550:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d554:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d558:	f7f3 fac8 	bl	8000aec <__aeabi_dcmplt>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	f040 827c 	bne.w	800da5a <_dtoa_r+0x92a>
 800d562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d566:	e9cd 2300 	strd	r2, r3, [sp]
 800d56a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f2c0 8150 	blt.w	800d812 <_dtoa_r+0x6e2>
 800d572:	f1ba 0f0e 	cmp.w	sl, #14
 800d576:	f300 814c 	bgt.w	800d812 <_dtoa_r+0x6e2>
 800d57a:	4b6a      	ldr	r3, [pc, #424]	; (800d724 <_dtoa_r+0x5f4>)
 800d57c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d580:	ed93 7b00 	vldr	d7, [r3]
 800d584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d586:	2b00      	cmp	r3, #0
 800d588:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d58c:	f280 80d8 	bge.w	800d740 <_dtoa_r+0x610>
 800d590:	f1b9 0f00 	cmp.w	r9, #0
 800d594:	f300 80d4 	bgt.w	800d740 <_dtoa_r+0x610>
 800d598:	f040 825e 	bne.w	800da58 <_dtoa_r+0x928>
 800d59c:	2200      	movs	r2, #0
 800d59e:	4b66      	ldr	r3, [pc, #408]	; (800d738 <_dtoa_r+0x608>)
 800d5a0:	ec51 0b17 	vmov	r0, r1, d7
 800d5a4:	f7f3 f830 	bl	8000608 <__aeabi_dmul>
 800d5a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ac:	f7f3 fab2 	bl	8000b14 <__aeabi_dcmpge>
 800d5b0:	464f      	mov	r7, r9
 800d5b2:	464e      	mov	r6, r9
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	f040 8234 	bne.w	800da22 <_dtoa_r+0x8f2>
 800d5ba:	2331      	movs	r3, #49	; 0x31
 800d5bc:	f10b 0501 	add.w	r5, fp, #1
 800d5c0:	f88b 3000 	strb.w	r3, [fp]
 800d5c4:	f10a 0a01 	add.w	sl, sl, #1
 800d5c8:	e22f      	b.n	800da2a <_dtoa_r+0x8fa>
 800d5ca:	07f2      	lsls	r2, r6, #31
 800d5cc:	d505      	bpl.n	800d5da <_dtoa_r+0x4aa>
 800d5ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5d2:	f7f3 f819 	bl	8000608 <__aeabi_dmul>
 800d5d6:	3501      	adds	r5, #1
 800d5d8:	2301      	movs	r3, #1
 800d5da:	1076      	asrs	r6, r6, #1
 800d5dc:	3708      	adds	r7, #8
 800d5de:	e772      	b.n	800d4c6 <_dtoa_r+0x396>
 800d5e0:	2502      	movs	r5, #2
 800d5e2:	e774      	b.n	800d4ce <_dtoa_r+0x39e>
 800d5e4:	f8cd a020 	str.w	sl, [sp, #32]
 800d5e8:	464f      	mov	r7, r9
 800d5ea:	e791      	b.n	800d510 <_dtoa_r+0x3e0>
 800d5ec:	4b4d      	ldr	r3, [pc, #308]	; (800d724 <_dtoa_r+0x5f4>)
 800d5ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d047      	beq.n	800d68c <_dtoa_r+0x55c>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	460b      	mov	r3, r1
 800d600:	2000      	movs	r0, #0
 800d602:	494e      	ldr	r1, [pc, #312]	; (800d73c <_dtoa_r+0x60c>)
 800d604:	f7f3 f92a 	bl	800085c <__aeabi_ddiv>
 800d608:	462a      	mov	r2, r5
 800d60a:	4633      	mov	r3, r6
 800d60c:	f7f2 fe44 	bl	8000298 <__aeabi_dsub>
 800d610:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d614:	465d      	mov	r5, fp
 800d616:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d61a:	f7f3 faa5 	bl	8000b68 <__aeabi_d2iz>
 800d61e:	4606      	mov	r6, r0
 800d620:	f7f2 ff88 	bl	8000534 <__aeabi_i2d>
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d62c:	f7f2 fe34 	bl	8000298 <__aeabi_dsub>
 800d630:	3630      	adds	r6, #48	; 0x30
 800d632:	f805 6b01 	strb.w	r6, [r5], #1
 800d636:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d63a:	e9cd 0100 	strd	r0, r1, [sp]
 800d63e:	f7f3 fa55 	bl	8000aec <__aeabi_dcmplt>
 800d642:	2800      	cmp	r0, #0
 800d644:	d163      	bne.n	800d70e <_dtoa_r+0x5de>
 800d646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d64a:	2000      	movs	r0, #0
 800d64c:	4937      	ldr	r1, [pc, #220]	; (800d72c <_dtoa_r+0x5fc>)
 800d64e:	f7f2 fe23 	bl	8000298 <__aeabi_dsub>
 800d652:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d656:	f7f3 fa49 	bl	8000aec <__aeabi_dcmplt>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	f040 80b7 	bne.w	800d7ce <_dtoa_r+0x69e>
 800d660:	eba5 030b 	sub.w	r3, r5, fp
 800d664:	429f      	cmp	r7, r3
 800d666:	f77f af7c 	ble.w	800d562 <_dtoa_r+0x432>
 800d66a:	2200      	movs	r2, #0
 800d66c:	4b30      	ldr	r3, [pc, #192]	; (800d730 <_dtoa_r+0x600>)
 800d66e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d672:	f7f2 ffc9 	bl	8000608 <__aeabi_dmul>
 800d676:	2200      	movs	r2, #0
 800d678:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d67c:	4b2c      	ldr	r3, [pc, #176]	; (800d730 <_dtoa_r+0x600>)
 800d67e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d682:	f7f2 ffc1 	bl	8000608 <__aeabi_dmul>
 800d686:	e9cd 0100 	strd	r0, r1, [sp]
 800d68a:	e7c4      	b.n	800d616 <_dtoa_r+0x4e6>
 800d68c:	462a      	mov	r2, r5
 800d68e:	4633      	mov	r3, r6
 800d690:	f7f2 ffba 	bl	8000608 <__aeabi_dmul>
 800d694:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d698:	eb0b 0507 	add.w	r5, fp, r7
 800d69c:	465e      	mov	r6, fp
 800d69e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6a2:	f7f3 fa61 	bl	8000b68 <__aeabi_d2iz>
 800d6a6:	4607      	mov	r7, r0
 800d6a8:	f7f2 ff44 	bl	8000534 <__aeabi_i2d>
 800d6ac:	3730      	adds	r7, #48	; 0x30
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6b6:	f7f2 fdef 	bl	8000298 <__aeabi_dsub>
 800d6ba:	f806 7b01 	strb.w	r7, [r6], #1
 800d6be:	42ae      	cmp	r6, r5
 800d6c0:	e9cd 0100 	strd	r0, r1, [sp]
 800d6c4:	f04f 0200 	mov.w	r2, #0
 800d6c8:	d126      	bne.n	800d718 <_dtoa_r+0x5e8>
 800d6ca:	4b1c      	ldr	r3, [pc, #112]	; (800d73c <_dtoa_r+0x60c>)
 800d6cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6d0:	f7f2 fde4 	bl	800029c <__adddf3>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6dc:	f7f3 fa24 	bl	8000b28 <__aeabi_dcmpgt>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d174      	bne.n	800d7ce <_dtoa_r+0x69e>
 800d6e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d6e8:	2000      	movs	r0, #0
 800d6ea:	4914      	ldr	r1, [pc, #80]	; (800d73c <_dtoa_r+0x60c>)
 800d6ec:	f7f2 fdd4 	bl	8000298 <__aeabi_dsub>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6f8:	f7f3 f9f8 	bl	8000aec <__aeabi_dcmplt>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	f43f af30 	beq.w	800d562 <_dtoa_r+0x432>
 800d702:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d706:	2b30      	cmp	r3, #48	; 0x30
 800d708:	f105 32ff 	add.w	r2, r5, #4294967295
 800d70c:	d002      	beq.n	800d714 <_dtoa_r+0x5e4>
 800d70e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d712:	e04a      	b.n	800d7aa <_dtoa_r+0x67a>
 800d714:	4615      	mov	r5, r2
 800d716:	e7f4      	b.n	800d702 <_dtoa_r+0x5d2>
 800d718:	4b05      	ldr	r3, [pc, #20]	; (800d730 <_dtoa_r+0x600>)
 800d71a:	f7f2 ff75 	bl	8000608 <__aeabi_dmul>
 800d71e:	e9cd 0100 	strd	r0, r1, [sp]
 800d722:	e7bc      	b.n	800d69e <_dtoa_r+0x56e>
 800d724:	08012c70 	.word	0x08012c70
 800d728:	08012c48 	.word	0x08012c48
 800d72c:	3ff00000 	.word	0x3ff00000
 800d730:	40240000 	.word	0x40240000
 800d734:	401c0000 	.word	0x401c0000
 800d738:	40140000 	.word	0x40140000
 800d73c:	3fe00000 	.word	0x3fe00000
 800d740:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d744:	465d      	mov	r5, fp
 800d746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d74a:	4630      	mov	r0, r6
 800d74c:	4639      	mov	r1, r7
 800d74e:	f7f3 f885 	bl	800085c <__aeabi_ddiv>
 800d752:	f7f3 fa09 	bl	8000b68 <__aeabi_d2iz>
 800d756:	4680      	mov	r8, r0
 800d758:	f7f2 feec 	bl	8000534 <__aeabi_i2d>
 800d75c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d760:	f7f2 ff52 	bl	8000608 <__aeabi_dmul>
 800d764:	4602      	mov	r2, r0
 800d766:	460b      	mov	r3, r1
 800d768:	4630      	mov	r0, r6
 800d76a:	4639      	mov	r1, r7
 800d76c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d770:	f7f2 fd92 	bl	8000298 <__aeabi_dsub>
 800d774:	f805 6b01 	strb.w	r6, [r5], #1
 800d778:	eba5 060b 	sub.w	r6, r5, fp
 800d77c:	45b1      	cmp	r9, r6
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	d139      	bne.n	800d7f8 <_dtoa_r+0x6c8>
 800d784:	f7f2 fd8a 	bl	800029c <__adddf3>
 800d788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d78c:	4606      	mov	r6, r0
 800d78e:	460f      	mov	r7, r1
 800d790:	f7f3 f9ca 	bl	8000b28 <__aeabi_dcmpgt>
 800d794:	b9c8      	cbnz	r0, 800d7ca <_dtoa_r+0x69a>
 800d796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d79a:	4630      	mov	r0, r6
 800d79c:	4639      	mov	r1, r7
 800d79e:	f7f3 f99b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7a2:	b110      	cbz	r0, 800d7aa <_dtoa_r+0x67a>
 800d7a4:	f018 0f01 	tst.w	r8, #1
 800d7a8:	d10f      	bne.n	800d7ca <_dtoa_r+0x69a>
 800d7aa:	9904      	ldr	r1, [sp, #16]
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f001 f802 	bl	800e7b6 <_Bfree>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7b6:	702b      	strb	r3, [r5, #0]
 800d7b8:	f10a 0301 	add.w	r3, sl, #1
 800d7bc:	6013      	str	r3, [r2, #0]
 800d7be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f000 8241 	beq.w	800dc48 <_dtoa_r+0xb18>
 800d7c6:	601d      	str	r5, [r3, #0]
 800d7c8:	e23e      	b.n	800dc48 <_dtoa_r+0xb18>
 800d7ca:	f8cd a020 	str.w	sl, [sp, #32]
 800d7ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d7d2:	2a39      	cmp	r2, #57	; 0x39
 800d7d4:	f105 33ff 	add.w	r3, r5, #4294967295
 800d7d8:	d108      	bne.n	800d7ec <_dtoa_r+0x6bc>
 800d7da:	459b      	cmp	fp, r3
 800d7dc:	d10a      	bne.n	800d7f4 <_dtoa_r+0x6c4>
 800d7de:	9b08      	ldr	r3, [sp, #32]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	9308      	str	r3, [sp, #32]
 800d7e4:	2330      	movs	r3, #48	; 0x30
 800d7e6:	f88b 3000 	strb.w	r3, [fp]
 800d7ea:	465b      	mov	r3, fp
 800d7ec:	781a      	ldrb	r2, [r3, #0]
 800d7ee:	3201      	adds	r2, #1
 800d7f0:	701a      	strb	r2, [r3, #0]
 800d7f2:	e78c      	b.n	800d70e <_dtoa_r+0x5de>
 800d7f4:	461d      	mov	r5, r3
 800d7f6:	e7ea      	b.n	800d7ce <_dtoa_r+0x69e>
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	4b9b      	ldr	r3, [pc, #620]	; (800da68 <_dtoa_r+0x938>)
 800d7fc:	f7f2 ff04 	bl	8000608 <__aeabi_dmul>
 800d800:	2200      	movs	r2, #0
 800d802:	2300      	movs	r3, #0
 800d804:	4606      	mov	r6, r0
 800d806:	460f      	mov	r7, r1
 800d808:	f7f3 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d09a      	beq.n	800d746 <_dtoa_r+0x616>
 800d810:	e7cb      	b.n	800d7aa <_dtoa_r+0x67a>
 800d812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d814:	2a00      	cmp	r2, #0
 800d816:	f000 808b 	beq.w	800d930 <_dtoa_r+0x800>
 800d81a:	9a06      	ldr	r2, [sp, #24]
 800d81c:	2a01      	cmp	r2, #1
 800d81e:	dc6e      	bgt.n	800d8fe <_dtoa_r+0x7ce>
 800d820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d822:	2a00      	cmp	r2, #0
 800d824:	d067      	beq.n	800d8f6 <_dtoa_r+0x7c6>
 800d826:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d82a:	9f07      	ldr	r7, [sp, #28]
 800d82c:	9d05      	ldr	r5, [sp, #20]
 800d82e:	9a05      	ldr	r2, [sp, #20]
 800d830:	2101      	movs	r1, #1
 800d832:	441a      	add	r2, r3
 800d834:	4620      	mov	r0, r4
 800d836:	9205      	str	r2, [sp, #20]
 800d838:	4498      	add	r8, r3
 800d83a:	f001 f89a 	bl	800e972 <__i2b>
 800d83e:	4606      	mov	r6, r0
 800d840:	2d00      	cmp	r5, #0
 800d842:	dd0c      	ble.n	800d85e <_dtoa_r+0x72e>
 800d844:	f1b8 0f00 	cmp.w	r8, #0
 800d848:	dd09      	ble.n	800d85e <_dtoa_r+0x72e>
 800d84a:	4545      	cmp	r5, r8
 800d84c:	9a05      	ldr	r2, [sp, #20]
 800d84e:	462b      	mov	r3, r5
 800d850:	bfa8      	it	ge
 800d852:	4643      	movge	r3, r8
 800d854:	1ad2      	subs	r2, r2, r3
 800d856:	9205      	str	r2, [sp, #20]
 800d858:	1aed      	subs	r5, r5, r3
 800d85a:	eba8 0803 	sub.w	r8, r8, r3
 800d85e:	9b07      	ldr	r3, [sp, #28]
 800d860:	b1eb      	cbz	r3, 800d89e <_dtoa_r+0x76e>
 800d862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d864:	2b00      	cmp	r3, #0
 800d866:	d067      	beq.n	800d938 <_dtoa_r+0x808>
 800d868:	b18f      	cbz	r7, 800d88e <_dtoa_r+0x75e>
 800d86a:	4631      	mov	r1, r6
 800d86c:	463a      	mov	r2, r7
 800d86e:	4620      	mov	r0, r4
 800d870:	f001 f91e 	bl	800eab0 <__pow5mult>
 800d874:	9a04      	ldr	r2, [sp, #16]
 800d876:	4601      	mov	r1, r0
 800d878:	4606      	mov	r6, r0
 800d87a:	4620      	mov	r0, r4
 800d87c:	f001 f882 	bl	800e984 <__multiply>
 800d880:	9904      	ldr	r1, [sp, #16]
 800d882:	9008      	str	r0, [sp, #32]
 800d884:	4620      	mov	r0, r4
 800d886:	f000 ff96 	bl	800e7b6 <_Bfree>
 800d88a:	9b08      	ldr	r3, [sp, #32]
 800d88c:	9304      	str	r3, [sp, #16]
 800d88e:	9b07      	ldr	r3, [sp, #28]
 800d890:	1bda      	subs	r2, r3, r7
 800d892:	d004      	beq.n	800d89e <_dtoa_r+0x76e>
 800d894:	9904      	ldr	r1, [sp, #16]
 800d896:	4620      	mov	r0, r4
 800d898:	f001 f90a 	bl	800eab0 <__pow5mult>
 800d89c:	9004      	str	r0, [sp, #16]
 800d89e:	2101      	movs	r1, #1
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f001 f866 	bl	800e972 <__i2b>
 800d8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8a8:	4607      	mov	r7, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f000 81d0 	beq.w	800dc50 <_dtoa_r+0xb20>
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	4601      	mov	r1, r0
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f001 f8fb 	bl	800eab0 <__pow5mult>
 800d8ba:	9b06      	ldr	r3, [sp, #24]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	4607      	mov	r7, r0
 800d8c0:	dc40      	bgt.n	800d944 <_dtoa_r+0x814>
 800d8c2:	9b00      	ldr	r3, [sp, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d139      	bne.n	800d93c <_dtoa_r+0x80c>
 800d8c8:	9b01      	ldr	r3, [sp, #4]
 800d8ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d136      	bne.n	800d940 <_dtoa_r+0x810>
 800d8d2:	9b01      	ldr	r3, [sp, #4]
 800d8d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8d8:	0d1b      	lsrs	r3, r3, #20
 800d8da:	051b      	lsls	r3, r3, #20
 800d8dc:	b12b      	cbz	r3, 800d8ea <_dtoa_r+0x7ba>
 800d8de:	9b05      	ldr	r3, [sp, #20]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	9305      	str	r3, [sp, #20]
 800d8e4:	f108 0801 	add.w	r8, r8, #1
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	9307      	str	r3, [sp, #28]
 800d8ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d12a      	bne.n	800d948 <_dtoa_r+0x818>
 800d8f2:	2001      	movs	r0, #1
 800d8f4:	e030      	b.n	800d958 <_dtoa_r+0x828>
 800d8f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d8fc:	e795      	b.n	800d82a <_dtoa_r+0x6fa>
 800d8fe:	9b07      	ldr	r3, [sp, #28]
 800d900:	f109 37ff 	add.w	r7, r9, #4294967295
 800d904:	42bb      	cmp	r3, r7
 800d906:	bfbf      	itttt	lt
 800d908:	9b07      	ldrlt	r3, [sp, #28]
 800d90a:	9707      	strlt	r7, [sp, #28]
 800d90c:	1afa      	sublt	r2, r7, r3
 800d90e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d910:	bfbb      	ittet	lt
 800d912:	189b      	addlt	r3, r3, r2
 800d914:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d916:	1bdf      	subge	r7, r3, r7
 800d918:	2700      	movlt	r7, #0
 800d91a:	f1b9 0f00 	cmp.w	r9, #0
 800d91e:	bfb5      	itete	lt
 800d920:	9b05      	ldrlt	r3, [sp, #20]
 800d922:	9d05      	ldrge	r5, [sp, #20]
 800d924:	eba3 0509 	sublt.w	r5, r3, r9
 800d928:	464b      	movge	r3, r9
 800d92a:	bfb8      	it	lt
 800d92c:	2300      	movlt	r3, #0
 800d92e:	e77e      	b.n	800d82e <_dtoa_r+0x6fe>
 800d930:	9f07      	ldr	r7, [sp, #28]
 800d932:	9d05      	ldr	r5, [sp, #20]
 800d934:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d936:	e783      	b.n	800d840 <_dtoa_r+0x710>
 800d938:	9a07      	ldr	r2, [sp, #28]
 800d93a:	e7ab      	b.n	800d894 <_dtoa_r+0x764>
 800d93c:	2300      	movs	r3, #0
 800d93e:	e7d4      	b.n	800d8ea <_dtoa_r+0x7ba>
 800d940:	9b00      	ldr	r3, [sp, #0]
 800d942:	e7d2      	b.n	800d8ea <_dtoa_r+0x7ba>
 800d944:	2300      	movs	r3, #0
 800d946:	9307      	str	r3, [sp, #28]
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d94e:	6918      	ldr	r0, [r3, #16]
 800d950:	f000 ffc1 	bl	800e8d6 <__hi0bits>
 800d954:	f1c0 0020 	rsb	r0, r0, #32
 800d958:	4440      	add	r0, r8
 800d95a:	f010 001f 	ands.w	r0, r0, #31
 800d95e:	d047      	beq.n	800d9f0 <_dtoa_r+0x8c0>
 800d960:	f1c0 0320 	rsb	r3, r0, #32
 800d964:	2b04      	cmp	r3, #4
 800d966:	dd3b      	ble.n	800d9e0 <_dtoa_r+0x8b0>
 800d968:	9b05      	ldr	r3, [sp, #20]
 800d96a:	f1c0 001c 	rsb	r0, r0, #28
 800d96e:	4403      	add	r3, r0
 800d970:	9305      	str	r3, [sp, #20]
 800d972:	4405      	add	r5, r0
 800d974:	4480      	add	r8, r0
 800d976:	9b05      	ldr	r3, [sp, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	dd05      	ble.n	800d988 <_dtoa_r+0x858>
 800d97c:	461a      	mov	r2, r3
 800d97e:	9904      	ldr	r1, [sp, #16]
 800d980:	4620      	mov	r0, r4
 800d982:	f001 f8e3 	bl	800eb4c <__lshift>
 800d986:	9004      	str	r0, [sp, #16]
 800d988:	f1b8 0f00 	cmp.w	r8, #0
 800d98c:	dd05      	ble.n	800d99a <_dtoa_r+0x86a>
 800d98e:	4639      	mov	r1, r7
 800d990:	4642      	mov	r2, r8
 800d992:	4620      	mov	r0, r4
 800d994:	f001 f8da 	bl	800eb4c <__lshift>
 800d998:	4607      	mov	r7, r0
 800d99a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d99c:	b353      	cbz	r3, 800d9f4 <_dtoa_r+0x8c4>
 800d99e:	4639      	mov	r1, r7
 800d9a0:	9804      	ldr	r0, [sp, #16]
 800d9a2:	f001 f927 	bl	800ebf4 <__mcmp>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	da24      	bge.n	800d9f4 <_dtoa_r+0x8c4>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	220a      	movs	r2, #10
 800d9ae:	9904      	ldr	r1, [sp, #16]
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f000 ff17 	bl	800e7e4 <__multadd>
 800d9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9b8:	9004      	str	r0, [sp, #16]
 800d9ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f000 814d 	beq.w	800dc5e <_dtoa_r+0xb2e>
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	4631      	mov	r1, r6
 800d9c8:	220a      	movs	r2, #10
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	f000 ff0a 	bl	800e7e4 <__multadd>
 800d9d0:	9b02      	ldr	r3, [sp, #8]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	4606      	mov	r6, r0
 800d9d6:	dc4f      	bgt.n	800da78 <_dtoa_r+0x948>
 800d9d8:	9b06      	ldr	r3, [sp, #24]
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	dd4c      	ble.n	800da78 <_dtoa_r+0x948>
 800d9de:	e011      	b.n	800da04 <_dtoa_r+0x8d4>
 800d9e0:	d0c9      	beq.n	800d976 <_dtoa_r+0x846>
 800d9e2:	9a05      	ldr	r2, [sp, #20]
 800d9e4:	331c      	adds	r3, #28
 800d9e6:	441a      	add	r2, r3
 800d9e8:	9205      	str	r2, [sp, #20]
 800d9ea:	441d      	add	r5, r3
 800d9ec:	4498      	add	r8, r3
 800d9ee:	e7c2      	b.n	800d976 <_dtoa_r+0x846>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	e7f6      	b.n	800d9e2 <_dtoa_r+0x8b2>
 800d9f4:	f1b9 0f00 	cmp.w	r9, #0
 800d9f8:	dc38      	bgt.n	800da6c <_dtoa_r+0x93c>
 800d9fa:	9b06      	ldr	r3, [sp, #24]
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	dd35      	ble.n	800da6c <_dtoa_r+0x93c>
 800da00:	f8cd 9008 	str.w	r9, [sp, #8]
 800da04:	9b02      	ldr	r3, [sp, #8]
 800da06:	b963      	cbnz	r3, 800da22 <_dtoa_r+0x8f2>
 800da08:	4639      	mov	r1, r7
 800da0a:	2205      	movs	r2, #5
 800da0c:	4620      	mov	r0, r4
 800da0e:	f000 fee9 	bl	800e7e4 <__multadd>
 800da12:	4601      	mov	r1, r0
 800da14:	4607      	mov	r7, r0
 800da16:	9804      	ldr	r0, [sp, #16]
 800da18:	f001 f8ec 	bl	800ebf4 <__mcmp>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	f73f adcc 	bgt.w	800d5ba <_dtoa_r+0x48a>
 800da22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da24:	465d      	mov	r5, fp
 800da26:	ea6f 0a03 	mvn.w	sl, r3
 800da2a:	f04f 0900 	mov.w	r9, #0
 800da2e:	4639      	mov	r1, r7
 800da30:	4620      	mov	r0, r4
 800da32:	f000 fec0 	bl	800e7b6 <_Bfree>
 800da36:	2e00      	cmp	r6, #0
 800da38:	f43f aeb7 	beq.w	800d7aa <_dtoa_r+0x67a>
 800da3c:	f1b9 0f00 	cmp.w	r9, #0
 800da40:	d005      	beq.n	800da4e <_dtoa_r+0x91e>
 800da42:	45b1      	cmp	r9, r6
 800da44:	d003      	beq.n	800da4e <_dtoa_r+0x91e>
 800da46:	4649      	mov	r1, r9
 800da48:	4620      	mov	r0, r4
 800da4a:	f000 feb4 	bl	800e7b6 <_Bfree>
 800da4e:	4631      	mov	r1, r6
 800da50:	4620      	mov	r0, r4
 800da52:	f000 feb0 	bl	800e7b6 <_Bfree>
 800da56:	e6a8      	b.n	800d7aa <_dtoa_r+0x67a>
 800da58:	2700      	movs	r7, #0
 800da5a:	463e      	mov	r6, r7
 800da5c:	e7e1      	b.n	800da22 <_dtoa_r+0x8f2>
 800da5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800da62:	463e      	mov	r6, r7
 800da64:	e5a9      	b.n	800d5ba <_dtoa_r+0x48a>
 800da66:	bf00      	nop
 800da68:	40240000 	.word	0x40240000
 800da6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da6e:	f8cd 9008 	str.w	r9, [sp, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	f000 80fa 	beq.w	800dc6c <_dtoa_r+0xb3c>
 800da78:	2d00      	cmp	r5, #0
 800da7a:	dd05      	ble.n	800da88 <_dtoa_r+0x958>
 800da7c:	4631      	mov	r1, r6
 800da7e:	462a      	mov	r2, r5
 800da80:	4620      	mov	r0, r4
 800da82:	f001 f863 	bl	800eb4c <__lshift>
 800da86:	4606      	mov	r6, r0
 800da88:	9b07      	ldr	r3, [sp, #28]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d04c      	beq.n	800db28 <_dtoa_r+0x9f8>
 800da8e:	6871      	ldr	r1, [r6, #4]
 800da90:	4620      	mov	r0, r4
 800da92:	f000 fe5c 	bl	800e74e <_Balloc>
 800da96:	6932      	ldr	r2, [r6, #16]
 800da98:	3202      	adds	r2, #2
 800da9a:	4605      	mov	r5, r0
 800da9c:	0092      	lsls	r2, r2, #2
 800da9e:	f106 010c 	add.w	r1, r6, #12
 800daa2:	300c      	adds	r0, #12
 800daa4:	f000 fe46 	bl	800e734 <memcpy>
 800daa8:	2201      	movs	r2, #1
 800daaa:	4629      	mov	r1, r5
 800daac:	4620      	mov	r0, r4
 800daae:	f001 f84d 	bl	800eb4c <__lshift>
 800dab2:	9b00      	ldr	r3, [sp, #0]
 800dab4:	f8cd b014 	str.w	fp, [sp, #20]
 800dab8:	f003 0301 	and.w	r3, r3, #1
 800dabc:	46b1      	mov	r9, r6
 800dabe:	9307      	str	r3, [sp, #28]
 800dac0:	4606      	mov	r6, r0
 800dac2:	4639      	mov	r1, r7
 800dac4:	9804      	ldr	r0, [sp, #16]
 800dac6:	f7ff faa7 	bl	800d018 <quorem>
 800daca:	4649      	mov	r1, r9
 800dacc:	4605      	mov	r5, r0
 800dace:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dad2:	9804      	ldr	r0, [sp, #16]
 800dad4:	f001 f88e 	bl	800ebf4 <__mcmp>
 800dad8:	4632      	mov	r2, r6
 800dada:	9000      	str	r0, [sp, #0]
 800dadc:	4639      	mov	r1, r7
 800dade:	4620      	mov	r0, r4
 800dae0:	f001 f8a2 	bl	800ec28 <__mdiff>
 800dae4:	68c3      	ldr	r3, [r0, #12]
 800dae6:	4602      	mov	r2, r0
 800dae8:	bb03      	cbnz	r3, 800db2c <_dtoa_r+0x9fc>
 800daea:	4601      	mov	r1, r0
 800daec:	9008      	str	r0, [sp, #32]
 800daee:	9804      	ldr	r0, [sp, #16]
 800daf0:	f001 f880 	bl	800ebf4 <__mcmp>
 800daf4:	9a08      	ldr	r2, [sp, #32]
 800daf6:	4603      	mov	r3, r0
 800daf8:	4611      	mov	r1, r2
 800dafa:	4620      	mov	r0, r4
 800dafc:	9308      	str	r3, [sp, #32]
 800dafe:	f000 fe5a 	bl	800e7b6 <_Bfree>
 800db02:	9b08      	ldr	r3, [sp, #32]
 800db04:	b9a3      	cbnz	r3, 800db30 <_dtoa_r+0xa00>
 800db06:	9a06      	ldr	r2, [sp, #24]
 800db08:	b992      	cbnz	r2, 800db30 <_dtoa_r+0xa00>
 800db0a:	9a07      	ldr	r2, [sp, #28]
 800db0c:	b982      	cbnz	r2, 800db30 <_dtoa_r+0xa00>
 800db0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800db12:	d029      	beq.n	800db68 <_dtoa_r+0xa38>
 800db14:	9b00      	ldr	r3, [sp, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	dd01      	ble.n	800db1e <_dtoa_r+0x9ee>
 800db1a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800db1e:	9b05      	ldr	r3, [sp, #20]
 800db20:	1c5d      	adds	r5, r3, #1
 800db22:	f883 8000 	strb.w	r8, [r3]
 800db26:	e782      	b.n	800da2e <_dtoa_r+0x8fe>
 800db28:	4630      	mov	r0, r6
 800db2a:	e7c2      	b.n	800dab2 <_dtoa_r+0x982>
 800db2c:	2301      	movs	r3, #1
 800db2e:	e7e3      	b.n	800daf8 <_dtoa_r+0x9c8>
 800db30:	9a00      	ldr	r2, [sp, #0]
 800db32:	2a00      	cmp	r2, #0
 800db34:	db04      	blt.n	800db40 <_dtoa_r+0xa10>
 800db36:	d125      	bne.n	800db84 <_dtoa_r+0xa54>
 800db38:	9a06      	ldr	r2, [sp, #24]
 800db3a:	bb1a      	cbnz	r2, 800db84 <_dtoa_r+0xa54>
 800db3c:	9a07      	ldr	r2, [sp, #28]
 800db3e:	bb0a      	cbnz	r2, 800db84 <_dtoa_r+0xa54>
 800db40:	2b00      	cmp	r3, #0
 800db42:	ddec      	ble.n	800db1e <_dtoa_r+0x9ee>
 800db44:	2201      	movs	r2, #1
 800db46:	9904      	ldr	r1, [sp, #16]
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 ffff 	bl	800eb4c <__lshift>
 800db4e:	4639      	mov	r1, r7
 800db50:	9004      	str	r0, [sp, #16]
 800db52:	f001 f84f 	bl	800ebf4 <__mcmp>
 800db56:	2800      	cmp	r0, #0
 800db58:	dc03      	bgt.n	800db62 <_dtoa_r+0xa32>
 800db5a:	d1e0      	bne.n	800db1e <_dtoa_r+0x9ee>
 800db5c:	f018 0f01 	tst.w	r8, #1
 800db60:	d0dd      	beq.n	800db1e <_dtoa_r+0x9ee>
 800db62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800db66:	d1d8      	bne.n	800db1a <_dtoa_r+0x9ea>
 800db68:	9b05      	ldr	r3, [sp, #20]
 800db6a:	9a05      	ldr	r2, [sp, #20]
 800db6c:	1c5d      	adds	r5, r3, #1
 800db6e:	2339      	movs	r3, #57	; 0x39
 800db70:	7013      	strb	r3, [r2, #0]
 800db72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800db76:	2b39      	cmp	r3, #57	; 0x39
 800db78:	f105 32ff 	add.w	r2, r5, #4294967295
 800db7c:	d04f      	beq.n	800dc1e <_dtoa_r+0xaee>
 800db7e:	3301      	adds	r3, #1
 800db80:	7013      	strb	r3, [r2, #0]
 800db82:	e754      	b.n	800da2e <_dtoa_r+0x8fe>
 800db84:	9a05      	ldr	r2, [sp, #20]
 800db86:	2b00      	cmp	r3, #0
 800db88:	f102 0501 	add.w	r5, r2, #1
 800db8c:	dd06      	ble.n	800db9c <_dtoa_r+0xa6c>
 800db8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800db92:	d0e9      	beq.n	800db68 <_dtoa_r+0xa38>
 800db94:	f108 0801 	add.w	r8, r8, #1
 800db98:	9b05      	ldr	r3, [sp, #20]
 800db9a:	e7c2      	b.n	800db22 <_dtoa_r+0x9f2>
 800db9c:	9a02      	ldr	r2, [sp, #8]
 800db9e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800dba2:	eba5 030b 	sub.w	r3, r5, fp
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d021      	beq.n	800dbee <_dtoa_r+0xabe>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	220a      	movs	r2, #10
 800dbae:	9904      	ldr	r1, [sp, #16]
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f000 fe17 	bl	800e7e4 <__multadd>
 800dbb6:	45b1      	cmp	r9, r6
 800dbb8:	9004      	str	r0, [sp, #16]
 800dbba:	f04f 0300 	mov.w	r3, #0
 800dbbe:	f04f 020a 	mov.w	r2, #10
 800dbc2:	4649      	mov	r1, r9
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	d105      	bne.n	800dbd4 <_dtoa_r+0xaa4>
 800dbc8:	f000 fe0c 	bl	800e7e4 <__multadd>
 800dbcc:	4681      	mov	r9, r0
 800dbce:	4606      	mov	r6, r0
 800dbd0:	9505      	str	r5, [sp, #20]
 800dbd2:	e776      	b.n	800dac2 <_dtoa_r+0x992>
 800dbd4:	f000 fe06 	bl	800e7e4 <__multadd>
 800dbd8:	4631      	mov	r1, r6
 800dbda:	4681      	mov	r9, r0
 800dbdc:	2300      	movs	r3, #0
 800dbde:	220a      	movs	r2, #10
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f000 fdff 	bl	800e7e4 <__multadd>
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	e7f2      	b.n	800dbd0 <_dtoa_r+0xaa0>
 800dbea:	f04f 0900 	mov.w	r9, #0
 800dbee:	2201      	movs	r2, #1
 800dbf0:	9904      	ldr	r1, [sp, #16]
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 ffaa 	bl	800eb4c <__lshift>
 800dbf8:	4639      	mov	r1, r7
 800dbfa:	9004      	str	r0, [sp, #16]
 800dbfc:	f000 fffa 	bl	800ebf4 <__mcmp>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	dcb6      	bgt.n	800db72 <_dtoa_r+0xa42>
 800dc04:	d102      	bne.n	800dc0c <_dtoa_r+0xadc>
 800dc06:	f018 0f01 	tst.w	r8, #1
 800dc0a:	d1b2      	bne.n	800db72 <_dtoa_r+0xa42>
 800dc0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc10:	2b30      	cmp	r3, #48	; 0x30
 800dc12:	f105 32ff 	add.w	r2, r5, #4294967295
 800dc16:	f47f af0a 	bne.w	800da2e <_dtoa_r+0x8fe>
 800dc1a:	4615      	mov	r5, r2
 800dc1c:	e7f6      	b.n	800dc0c <_dtoa_r+0xadc>
 800dc1e:	4593      	cmp	fp, r2
 800dc20:	d105      	bne.n	800dc2e <_dtoa_r+0xafe>
 800dc22:	2331      	movs	r3, #49	; 0x31
 800dc24:	f10a 0a01 	add.w	sl, sl, #1
 800dc28:	f88b 3000 	strb.w	r3, [fp]
 800dc2c:	e6ff      	b.n	800da2e <_dtoa_r+0x8fe>
 800dc2e:	4615      	mov	r5, r2
 800dc30:	e79f      	b.n	800db72 <_dtoa_r+0xa42>
 800dc32:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dc98 <_dtoa_r+0xb68>
 800dc36:	e007      	b.n	800dc48 <_dtoa_r+0xb18>
 800dc38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc3a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dc9c <_dtoa_r+0xb6c>
 800dc3e:	b11b      	cbz	r3, 800dc48 <_dtoa_r+0xb18>
 800dc40:	f10b 0308 	add.w	r3, fp, #8
 800dc44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	4658      	mov	r0, fp
 800dc4a:	b017      	add	sp, #92	; 0x5c
 800dc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc50:	9b06      	ldr	r3, [sp, #24]
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	f77f ae35 	ble.w	800d8c2 <_dtoa_r+0x792>
 800dc58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc5a:	9307      	str	r3, [sp, #28]
 800dc5c:	e649      	b.n	800d8f2 <_dtoa_r+0x7c2>
 800dc5e:	9b02      	ldr	r3, [sp, #8]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	dc03      	bgt.n	800dc6c <_dtoa_r+0xb3c>
 800dc64:	9b06      	ldr	r3, [sp, #24]
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	f73f aecc 	bgt.w	800da04 <_dtoa_r+0x8d4>
 800dc6c:	465d      	mov	r5, fp
 800dc6e:	4639      	mov	r1, r7
 800dc70:	9804      	ldr	r0, [sp, #16]
 800dc72:	f7ff f9d1 	bl	800d018 <quorem>
 800dc76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dc7a:	f805 8b01 	strb.w	r8, [r5], #1
 800dc7e:	9a02      	ldr	r2, [sp, #8]
 800dc80:	eba5 030b 	sub.w	r3, r5, fp
 800dc84:	429a      	cmp	r2, r3
 800dc86:	ddb0      	ble.n	800dbea <_dtoa_r+0xaba>
 800dc88:	2300      	movs	r3, #0
 800dc8a:	220a      	movs	r2, #10
 800dc8c:	9904      	ldr	r1, [sp, #16]
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f000 fda8 	bl	800e7e4 <__multadd>
 800dc94:	9004      	str	r0, [sp, #16]
 800dc96:	e7ea      	b.n	800dc6e <_dtoa_r+0xb3e>
 800dc98:	08012d6b 	.word	0x08012d6b
 800dc9c:	08012bc8 	.word	0x08012bc8

0800dca0 <__sflush_r>:
 800dca0:	898a      	ldrh	r2, [r1, #12]
 800dca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca6:	4605      	mov	r5, r0
 800dca8:	0710      	lsls	r0, r2, #28
 800dcaa:	460c      	mov	r4, r1
 800dcac:	d458      	bmi.n	800dd60 <__sflush_r+0xc0>
 800dcae:	684b      	ldr	r3, [r1, #4]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	dc05      	bgt.n	800dcc0 <__sflush_r+0x20>
 800dcb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	dc02      	bgt.n	800dcc0 <__sflush_r+0x20>
 800dcba:	2000      	movs	r0, #0
 800dcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcc2:	2e00      	cmp	r6, #0
 800dcc4:	d0f9      	beq.n	800dcba <__sflush_r+0x1a>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dccc:	682f      	ldr	r7, [r5, #0]
 800dcce:	6a21      	ldr	r1, [r4, #32]
 800dcd0:	602b      	str	r3, [r5, #0]
 800dcd2:	d032      	beq.n	800dd3a <__sflush_r+0x9a>
 800dcd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcd6:	89a3      	ldrh	r3, [r4, #12]
 800dcd8:	075a      	lsls	r2, r3, #29
 800dcda:	d505      	bpl.n	800dce8 <__sflush_r+0x48>
 800dcdc:	6863      	ldr	r3, [r4, #4]
 800dcde:	1ac0      	subs	r0, r0, r3
 800dce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dce2:	b10b      	cbz	r3, 800dce8 <__sflush_r+0x48>
 800dce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dce6:	1ac0      	subs	r0, r0, r3
 800dce8:	2300      	movs	r3, #0
 800dcea:	4602      	mov	r2, r0
 800dcec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcee:	6a21      	ldr	r1, [r4, #32]
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	47b0      	blx	r6
 800dcf4:	1c43      	adds	r3, r0, #1
 800dcf6:	89a3      	ldrh	r3, [r4, #12]
 800dcf8:	d106      	bne.n	800dd08 <__sflush_r+0x68>
 800dcfa:	6829      	ldr	r1, [r5, #0]
 800dcfc:	291d      	cmp	r1, #29
 800dcfe:	d848      	bhi.n	800dd92 <__sflush_r+0xf2>
 800dd00:	4a29      	ldr	r2, [pc, #164]	; (800dda8 <__sflush_r+0x108>)
 800dd02:	40ca      	lsrs	r2, r1
 800dd04:	07d6      	lsls	r6, r2, #31
 800dd06:	d544      	bpl.n	800dd92 <__sflush_r+0xf2>
 800dd08:	2200      	movs	r2, #0
 800dd0a:	6062      	str	r2, [r4, #4]
 800dd0c:	04d9      	lsls	r1, r3, #19
 800dd0e:	6922      	ldr	r2, [r4, #16]
 800dd10:	6022      	str	r2, [r4, #0]
 800dd12:	d504      	bpl.n	800dd1e <__sflush_r+0x7e>
 800dd14:	1c42      	adds	r2, r0, #1
 800dd16:	d101      	bne.n	800dd1c <__sflush_r+0x7c>
 800dd18:	682b      	ldr	r3, [r5, #0]
 800dd1a:	b903      	cbnz	r3, 800dd1e <__sflush_r+0x7e>
 800dd1c:	6560      	str	r0, [r4, #84]	; 0x54
 800dd1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd20:	602f      	str	r7, [r5, #0]
 800dd22:	2900      	cmp	r1, #0
 800dd24:	d0c9      	beq.n	800dcba <__sflush_r+0x1a>
 800dd26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd2a:	4299      	cmp	r1, r3
 800dd2c:	d002      	beq.n	800dd34 <__sflush_r+0x94>
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f7fd f9c4 	bl	800b0bc <_free_r>
 800dd34:	2000      	movs	r0, #0
 800dd36:	6360      	str	r0, [r4, #52]	; 0x34
 800dd38:	e7c0      	b.n	800dcbc <__sflush_r+0x1c>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	47b0      	blx	r6
 800dd40:	1c41      	adds	r1, r0, #1
 800dd42:	d1c8      	bne.n	800dcd6 <__sflush_r+0x36>
 800dd44:	682b      	ldr	r3, [r5, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d0c5      	beq.n	800dcd6 <__sflush_r+0x36>
 800dd4a:	2b1d      	cmp	r3, #29
 800dd4c:	d001      	beq.n	800dd52 <__sflush_r+0xb2>
 800dd4e:	2b16      	cmp	r3, #22
 800dd50:	d101      	bne.n	800dd56 <__sflush_r+0xb6>
 800dd52:	602f      	str	r7, [r5, #0]
 800dd54:	e7b1      	b.n	800dcba <__sflush_r+0x1a>
 800dd56:	89a3      	ldrh	r3, [r4, #12]
 800dd58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd5c:	81a3      	strh	r3, [r4, #12]
 800dd5e:	e7ad      	b.n	800dcbc <__sflush_r+0x1c>
 800dd60:	690f      	ldr	r7, [r1, #16]
 800dd62:	2f00      	cmp	r7, #0
 800dd64:	d0a9      	beq.n	800dcba <__sflush_r+0x1a>
 800dd66:	0793      	lsls	r3, r2, #30
 800dd68:	680e      	ldr	r6, [r1, #0]
 800dd6a:	bf08      	it	eq
 800dd6c:	694b      	ldreq	r3, [r1, #20]
 800dd6e:	600f      	str	r7, [r1, #0]
 800dd70:	bf18      	it	ne
 800dd72:	2300      	movne	r3, #0
 800dd74:	eba6 0807 	sub.w	r8, r6, r7
 800dd78:	608b      	str	r3, [r1, #8]
 800dd7a:	f1b8 0f00 	cmp.w	r8, #0
 800dd7e:	dd9c      	ble.n	800dcba <__sflush_r+0x1a>
 800dd80:	4643      	mov	r3, r8
 800dd82:	463a      	mov	r2, r7
 800dd84:	6a21      	ldr	r1, [r4, #32]
 800dd86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd88:	4628      	mov	r0, r5
 800dd8a:	47b0      	blx	r6
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	dc06      	bgt.n	800dd9e <__sflush_r+0xfe>
 800dd90:	89a3      	ldrh	r3, [r4, #12]
 800dd92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd96:	81a3      	strh	r3, [r4, #12]
 800dd98:	f04f 30ff 	mov.w	r0, #4294967295
 800dd9c:	e78e      	b.n	800dcbc <__sflush_r+0x1c>
 800dd9e:	4407      	add	r7, r0
 800dda0:	eba8 0800 	sub.w	r8, r8, r0
 800dda4:	e7e9      	b.n	800dd7a <__sflush_r+0xda>
 800dda6:	bf00      	nop
 800dda8:	20400001 	.word	0x20400001

0800ddac <_fflush_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	690b      	ldr	r3, [r1, #16]
 800ddb0:	4605      	mov	r5, r0
 800ddb2:	460c      	mov	r4, r1
 800ddb4:	b1db      	cbz	r3, 800ddee <_fflush_r+0x42>
 800ddb6:	b118      	cbz	r0, 800ddc0 <_fflush_r+0x14>
 800ddb8:	6983      	ldr	r3, [r0, #24]
 800ddba:	b90b      	cbnz	r3, 800ddc0 <_fflush_r+0x14>
 800ddbc:	f000 f860 	bl	800de80 <__sinit>
 800ddc0:	4b0c      	ldr	r3, [pc, #48]	; (800ddf4 <_fflush_r+0x48>)
 800ddc2:	429c      	cmp	r4, r3
 800ddc4:	d109      	bne.n	800ddda <_fflush_r+0x2e>
 800ddc6:	686c      	ldr	r4, [r5, #4]
 800ddc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddcc:	b17b      	cbz	r3, 800ddee <_fflush_r+0x42>
 800ddce:	4621      	mov	r1, r4
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddd6:	f7ff bf63 	b.w	800dca0 <__sflush_r>
 800ddda:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <_fflush_r+0x4c>)
 800dddc:	429c      	cmp	r4, r3
 800ddde:	d101      	bne.n	800dde4 <_fflush_r+0x38>
 800dde0:	68ac      	ldr	r4, [r5, #8]
 800dde2:	e7f1      	b.n	800ddc8 <_fflush_r+0x1c>
 800dde4:	4b05      	ldr	r3, [pc, #20]	; (800ddfc <_fflush_r+0x50>)
 800dde6:	429c      	cmp	r4, r3
 800dde8:	bf08      	it	eq
 800ddea:	68ec      	ldreq	r4, [r5, #12]
 800ddec:	e7ec      	b.n	800ddc8 <_fflush_r+0x1c>
 800ddee:	2000      	movs	r0, #0
 800ddf0:	bd38      	pop	{r3, r4, r5, pc}
 800ddf2:	bf00      	nop
 800ddf4:	08012bf8 	.word	0x08012bf8
 800ddf8:	08012c18 	.word	0x08012c18
 800ddfc:	08012bd8 	.word	0x08012bd8

0800de00 <std>:
 800de00:	2300      	movs	r3, #0
 800de02:	b510      	push	{r4, lr}
 800de04:	4604      	mov	r4, r0
 800de06:	e9c0 3300 	strd	r3, r3, [r0]
 800de0a:	6083      	str	r3, [r0, #8]
 800de0c:	8181      	strh	r1, [r0, #12]
 800de0e:	6643      	str	r3, [r0, #100]	; 0x64
 800de10:	81c2      	strh	r2, [r0, #14]
 800de12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de16:	6183      	str	r3, [r0, #24]
 800de18:	4619      	mov	r1, r3
 800de1a:	2208      	movs	r2, #8
 800de1c:	305c      	adds	r0, #92	; 0x5c
 800de1e:	f7fd f945 	bl	800b0ac <memset>
 800de22:	4b05      	ldr	r3, [pc, #20]	; (800de38 <std+0x38>)
 800de24:	6263      	str	r3, [r4, #36]	; 0x24
 800de26:	4b05      	ldr	r3, [pc, #20]	; (800de3c <std+0x3c>)
 800de28:	62a3      	str	r3, [r4, #40]	; 0x28
 800de2a:	4b05      	ldr	r3, [pc, #20]	; (800de40 <std+0x40>)
 800de2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de2e:	4b05      	ldr	r3, [pc, #20]	; (800de44 <std+0x44>)
 800de30:	6224      	str	r4, [r4, #32]
 800de32:	6323      	str	r3, [r4, #48]	; 0x30
 800de34:	bd10      	pop	{r4, pc}
 800de36:	bf00      	nop
 800de38:	0800c041 	.word	0x0800c041
 800de3c:	0800c067 	.word	0x0800c067
 800de40:	0800c09f 	.word	0x0800c09f
 800de44:	0800c0c3 	.word	0x0800c0c3

0800de48 <_cleanup_r>:
 800de48:	4901      	ldr	r1, [pc, #4]	; (800de50 <_cleanup_r+0x8>)
 800de4a:	f000 b885 	b.w	800df58 <_fwalk_reent>
 800de4e:	bf00      	nop
 800de50:	0800ddad 	.word	0x0800ddad

0800de54 <__sfmoreglue>:
 800de54:	b570      	push	{r4, r5, r6, lr}
 800de56:	1e4a      	subs	r2, r1, #1
 800de58:	2568      	movs	r5, #104	; 0x68
 800de5a:	4355      	muls	r5, r2
 800de5c:	460e      	mov	r6, r1
 800de5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de62:	f7fd f979 	bl	800b158 <_malloc_r>
 800de66:	4604      	mov	r4, r0
 800de68:	b140      	cbz	r0, 800de7c <__sfmoreglue+0x28>
 800de6a:	2100      	movs	r1, #0
 800de6c:	e9c0 1600 	strd	r1, r6, [r0]
 800de70:	300c      	adds	r0, #12
 800de72:	60a0      	str	r0, [r4, #8]
 800de74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de78:	f7fd f918 	bl	800b0ac <memset>
 800de7c:	4620      	mov	r0, r4
 800de7e:	bd70      	pop	{r4, r5, r6, pc}

0800de80 <__sinit>:
 800de80:	6983      	ldr	r3, [r0, #24]
 800de82:	b510      	push	{r4, lr}
 800de84:	4604      	mov	r4, r0
 800de86:	bb33      	cbnz	r3, 800ded6 <__sinit+0x56>
 800de88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800de8c:	6503      	str	r3, [r0, #80]	; 0x50
 800de8e:	4b12      	ldr	r3, [pc, #72]	; (800ded8 <__sinit+0x58>)
 800de90:	4a12      	ldr	r2, [pc, #72]	; (800dedc <__sinit+0x5c>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	6282      	str	r2, [r0, #40]	; 0x28
 800de96:	4298      	cmp	r0, r3
 800de98:	bf04      	itt	eq
 800de9a:	2301      	moveq	r3, #1
 800de9c:	6183      	streq	r3, [r0, #24]
 800de9e:	f000 f81f 	bl	800dee0 <__sfp>
 800dea2:	6060      	str	r0, [r4, #4]
 800dea4:	4620      	mov	r0, r4
 800dea6:	f000 f81b 	bl	800dee0 <__sfp>
 800deaa:	60a0      	str	r0, [r4, #8]
 800deac:	4620      	mov	r0, r4
 800deae:	f000 f817 	bl	800dee0 <__sfp>
 800deb2:	2200      	movs	r2, #0
 800deb4:	60e0      	str	r0, [r4, #12]
 800deb6:	2104      	movs	r1, #4
 800deb8:	6860      	ldr	r0, [r4, #4]
 800deba:	f7ff ffa1 	bl	800de00 <std>
 800debe:	2201      	movs	r2, #1
 800dec0:	2109      	movs	r1, #9
 800dec2:	68a0      	ldr	r0, [r4, #8]
 800dec4:	f7ff ff9c 	bl	800de00 <std>
 800dec8:	2202      	movs	r2, #2
 800deca:	2112      	movs	r1, #18
 800decc:	68e0      	ldr	r0, [r4, #12]
 800dece:	f7ff ff97 	bl	800de00 <std>
 800ded2:	2301      	movs	r3, #1
 800ded4:	61a3      	str	r3, [r4, #24]
 800ded6:	bd10      	pop	{r4, pc}
 800ded8:	08012b3c 	.word	0x08012b3c
 800dedc:	0800de49 	.word	0x0800de49

0800dee0 <__sfp>:
 800dee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee2:	4b1b      	ldr	r3, [pc, #108]	; (800df50 <__sfp+0x70>)
 800dee4:	681e      	ldr	r6, [r3, #0]
 800dee6:	69b3      	ldr	r3, [r6, #24]
 800dee8:	4607      	mov	r7, r0
 800deea:	b913      	cbnz	r3, 800def2 <__sfp+0x12>
 800deec:	4630      	mov	r0, r6
 800deee:	f7ff ffc7 	bl	800de80 <__sinit>
 800def2:	3648      	adds	r6, #72	; 0x48
 800def4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800def8:	3b01      	subs	r3, #1
 800defa:	d503      	bpl.n	800df04 <__sfp+0x24>
 800defc:	6833      	ldr	r3, [r6, #0]
 800defe:	b133      	cbz	r3, 800df0e <__sfp+0x2e>
 800df00:	6836      	ldr	r6, [r6, #0]
 800df02:	e7f7      	b.n	800def4 <__sfp+0x14>
 800df04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df08:	b16d      	cbz	r5, 800df26 <__sfp+0x46>
 800df0a:	3468      	adds	r4, #104	; 0x68
 800df0c:	e7f4      	b.n	800def8 <__sfp+0x18>
 800df0e:	2104      	movs	r1, #4
 800df10:	4638      	mov	r0, r7
 800df12:	f7ff ff9f 	bl	800de54 <__sfmoreglue>
 800df16:	6030      	str	r0, [r6, #0]
 800df18:	2800      	cmp	r0, #0
 800df1a:	d1f1      	bne.n	800df00 <__sfp+0x20>
 800df1c:	230c      	movs	r3, #12
 800df1e:	603b      	str	r3, [r7, #0]
 800df20:	4604      	mov	r4, r0
 800df22:	4620      	mov	r0, r4
 800df24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df26:	4b0b      	ldr	r3, [pc, #44]	; (800df54 <__sfp+0x74>)
 800df28:	6665      	str	r5, [r4, #100]	; 0x64
 800df2a:	e9c4 5500 	strd	r5, r5, [r4]
 800df2e:	60a5      	str	r5, [r4, #8]
 800df30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800df34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800df38:	2208      	movs	r2, #8
 800df3a:	4629      	mov	r1, r5
 800df3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df40:	f7fd f8b4 	bl	800b0ac <memset>
 800df44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df4c:	e7e9      	b.n	800df22 <__sfp+0x42>
 800df4e:	bf00      	nop
 800df50:	08012b3c 	.word	0x08012b3c
 800df54:	ffff0001 	.word	0xffff0001

0800df58 <_fwalk_reent>:
 800df58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df5c:	4680      	mov	r8, r0
 800df5e:	4689      	mov	r9, r1
 800df60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df64:	2600      	movs	r6, #0
 800df66:	b914      	cbnz	r4, 800df6e <_fwalk_reent+0x16>
 800df68:	4630      	mov	r0, r6
 800df6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800df72:	3f01      	subs	r7, #1
 800df74:	d501      	bpl.n	800df7a <_fwalk_reent+0x22>
 800df76:	6824      	ldr	r4, [r4, #0]
 800df78:	e7f5      	b.n	800df66 <_fwalk_reent+0xe>
 800df7a:	89ab      	ldrh	r3, [r5, #12]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d907      	bls.n	800df90 <_fwalk_reent+0x38>
 800df80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df84:	3301      	adds	r3, #1
 800df86:	d003      	beq.n	800df90 <_fwalk_reent+0x38>
 800df88:	4629      	mov	r1, r5
 800df8a:	4640      	mov	r0, r8
 800df8c:	47c8      	blx	r9
 800df8e:	4306      	orrs	r6, r0
 800df90:	3568      	adds	r5, #104	; 0x68
 800df92:	e7ee      	b.n	800df72 <_fwalk_reent+0x1a>

0800df94 <rshift>:
 800df94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df96:	6906      	ldr	r6, [r0, #16]
 800df98:	114b      	asrs	r3, r1, #5
 800df9a:	429e      	cmp	r6, r3
 800df9c:	f100 0414 	add.w	r4, r0, #20
 800dfa0:	dd30      	ble.n	800e004 <rshift+0x70>
 800dfa2:	f011 011f 	ands.w	r1, r1, #31
 800dfa6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800dfaa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800dfae:	d108      	bne.n	800dfc2 <rshift+0x2e>
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	42b2      	cmp	r2, r6
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	d211      	bcs.n	800dfdc <rshift+0x48>
 800dfb8:	f852 3b04 	ldr.w	r3, [r2], #4
 800dfbc:	f841 3b04 	str.w	r3, [r1], #4
 800dfc0:	e7f7      	b.n	800dfb2 <rshift+0x1e>
 800dfc2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800dfc6:	f1c1 0c20 	rsb	ip, r1, #32
 800dfca:	40cd      	lsrs	r5, r1
 800dfcc:	3204      	adds	r2, #4
 800dfce:	4623      	mov	r3, r4
 800dfd0:	42b2      	cmp	r2, r6
 800dfd2:	4617      	mov	r7, r2
 800dfd4:	d30c      	bcc.n	800dff0 <rshift+0x5c>
 800dfd6:	601d      	str	r5, [r3, #0]
 800dfd8:	b105      	cbz	r5, 800dfdc <rshift+0x48>
 800dfda:	3304      	adds	r3, #4
 800dfdc:	1b1a      	subs	r2, r3, r4
 800dfde:	42a3      	cmp	r3, r4
 800dfe0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dfe4:	bf08      	it	eq
 800dfe6:	2300      	moveq	r3, #0
 800dfe8:	6102      	str	r2, [r0, #16]
 800dfea:	bf08      	it	eq
 800dfec:	6143      	streq	r3, [r0, #20]
 800dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dff0:	683f      	ldr	r7, [r7, #0]
 800dff2:	fa07 f70c 	lsl.w	r7, r7, ip
 800dff6:	433d      	orrs	r5, r7
 800dff8:	f843 5b04 	str.w	r5, [r3], #4
 800dffc:	f852 5b04 	ldr.w	r5, [r2], #4
 800e000:	40cd      	lsrs	r5, r1
 800e002:	e7e5      	b.n	800dfd0 <rshift+0x3c>
 800e004:	4623      	mov	r3, r4
 800e006:	e7e9      	b.n	800dfdc <rshift+0x48>

0800e008 <__hexdig_fun>:
 800e008:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e00c:	2b09      	cmp	r3, #9
 800e00e:	d802      	bhi.n	800e016 <__hexdig_fun+0xe>
 800e010:	3820      	subs	r0, #32
 800e012:	b2c0      	uxtb	r0, r0
 800e014:	4770      	bx	lr
 800e016:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e01a:	2b05      	cmp	r3, #5
 800e01c:	d801      	bhi.n	800e022 <__hexdig_fun+0x1a>
 800e01e:	3847      	subs	r0, #71	; 0x47
 800e020:	e7f7      	b.n	800e012 <__hexdig_fun+0xa>
 800e022:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e026:	2b05      	cmp	r3, #5
 800e028:	d801      	bhi.n	800e02e <__hexdig_fun+0x26>
 800e02a:	3827      	subs	r0, #39	; 0x27
 800e02c:	e7f1      	b.n	800e012 <__hexdig_fun+0xa>
 800e02e:	2000      	movs	r0, #0
 800e030:	4770      	bx	lr

0800e032 <__gethex>:
 800e032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e036:	b08b      	sub	sp, #44	; 0x2c
 800e038:	468a      	mov	sl, r1
 800e03a:	9002      	str	r0, [sp, #8]
 800e03c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e03e:	9306      	str	r3, [sp, #24]
 800e040:	4690      	mov	r8, r2
 800e042:	f000 fadf 	bl	800e604 <__localeconv_l>
 800e046:	6803      	ldr	r3, [r0, #0]
 800e048:	9303      	str	r3, [sp, #12]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7f2 f8c8 	bl	80001e0 <strlen>
 800e050:	9b03      	ldr	r3, [sp, #12]
 800e052:	9001      	str	r0, [sp, #4]
 800e054:	4403      	add	r3, r0
 800e056:	f04f 0b00 	mov.w	fp, #0
 800e05a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e05e:	9307      	str	r3, [sp, #28]
 800e060:	f8da 3000 	ldr.w	r3, [sl]
 800e064:	3302      	adds	r3, #2
 800e066:	461f      	mov	r7, r3
 800e068:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e06c:	2830      	cmp	r0, #48	; 0x30
 800e06e:	d06c      	beq.n	800e14a <__gethex+0x118>
 800e070:	f7ff ffca 	bl	800e008 <__hexdig_fun>
 800e074:	4604      	mov	r4, r0
 800e076:	2800      	cmp	r0, #0
 800e078:	d16a      	bne.n	800e150 <__gethex+0x11e>
 800e07a:	9a01      	ldr	r2, [sp, #4]
 800e07c:	9903      	ldr	r1, [sp, #12]
 800e07e:	4638      	mov	r0, r7
 800e080:	f001 fd4a 	bl	800fb18 <strncmp>
 800e084:	2800      	cmp	r0, #0
 800e086:	d166      	bne.n	800e156 <__gethex+0x124>
 800e088:	9b01      	ldr	r3, [sp, #4]
 800e08a:	5cf8      	ldrb	r0, [r7, r3]
 800e08c:	18fe      	adds	r6, r7, r3
 800e08e:	f7ff ffbb 	bl	800e008 <__hexdig_fun>
 800e092:	2800      	cmp	r0, #0
 800e094:	d062      	beq.n	800e15c <__gethex+0x12a>
 800e096:	4633      	mov	r3, r6
 800e098:	7818      	ldrb	r0, [r3, #0]
 800e09a:	2830      	cmp	r0, #48	; 0x30
 800e09c:	461f      	mov	r7, r3
 800e09e:	f103 0301 	add.w	r3, r3, #1
 800e0a2:	d0f9      	beq.n	800e098 <__gethex+0x66>
 800e0a4:	f7ff ffb0 	bl	800e008 <__hexdig_fun>
 800e0a8:	fab0 f580 	clz	r5, r0
 800e0ac:	096d      	lsrs	r5, r5, #5
 800e0ae:	4634      	mov	r4, r6
 800e0b0:	f04f 0b01 	mov.w	fp, #1
 800e0b4:	463a      	mov	r2, r7
 800e0b6:	4616      	mov	r6, r2
 800e0b8:	3201      	adds	r2, #1
 800e0ba:	7830      	ldrb	r0, [r6, #0]
 800e0bc:	f7ff ffa4 	bl	800e008 <__hexdig_fun>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d1f8      	bne.n	800e0b6 <__gethex+0x84>
 800e0c4:	9a01      	ldr	r2, [sp, #4]
 800e0c6:	9903      	ldr	r1, [sp, #12]
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	f001 fd25 	bl	800fb18 <strncmp>
 800e0ce:	b950      	cbnz	r0, 800e0e6 <__gethex+0xb4>
 800e0d0:	b954      	cbnz	r4, 800e0e8 <__gethex+0xb6>
 800e0d2:	9b01      	ldr	r3, [sp, #4]
 800e0d4:	18f4      	adds	r4, r6, r3
 800e0d6:	4622      	mov	r2, r4
 800e0d8:	4616      	mov	r6, r2
 800e0da:	3201      	adds	r2, #1
 800e0dc:	7830      	ldrb	r0, [r6, #0]
 800e0de:	f7ff ff93 	bl	800e008 <__hexdig_fun>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	d1f8      	bne.n	800e0d8 <__gethex+0xa6>
 800e0e6:	b10c      	cbz	r4, 800e0ec <__gethex+0xba>
 800e0e8:	1ba4      	subs	r4, r4, r6
 800e0ea:	00a4      	lsls	r4, r4, #2
 800e0ec:	7833      	ldrb	r3, [r6, #0]
 800e0ee:	2b50      	cmp	r3, #80	; 0x50
 800e0f0:	d001      	beq.n	800e0f6 <__gethex+0xc4>
 800e0f2:	2b70      	cmp	r3, #112	; 0x70
 800e0f4:	d140      	bne.n	800e178 <__gethex+0x146>
 800e0f6:	7873      	ldrb	r3, [r6, #1]
 800e0f8:	2b2b      	cmp	r3, #43	; 0x2b
 800e0fa:	d031      	beq.n	800e160 <__gethex+0x12e>
 800e0fc:	2b2d      	cmp	r3, #45	; 0x2d
 800e0fe:	d033      	beq.n	800e168 <__gethex+0x136>
 800e100:	1c71      	adds	r1, r6, #1
 800e102:	f04f 0900 	mov.w	r9, #0
 800e106:	7808      	ldrb	r0, [r1, #0]
 800e108:	f7ff ff7e 	bl	800e008 <__hexdig_fun>
 800e10c:	1e43      	subs	r3, r0, #1
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	2b18      	cmp	r3, #24
 800e112:	d831      	bhi.n	800e178 <__gethex+0x146>
 800e114:	f1a0 0210 	sub.w	r2, r0, #16
 800e118:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e11c:	f7ff ff74 	bl	800e008 <__hexdig_fun>
 800e120:	1e43      	subs	r3, r0, #1
 800e122:	b2db      	uxtb	r3, r3
 800e124:	2b18      	cmp	r3, #24
 800e126:	d922      	bls.n	800e16e <__gethex+0x13c>
 800e128:	f1b9 0f00 	cmp.w	r9, #0
 800e12c:	d000      	beq.n	800e130 <__gethex+0xfe>
 800e12e:	4252      	negs	r2, r2
 800e130:	4414      	add	r4, r2
 800e132:	f8ca 1000 	str.w	r1, [sl]
 800e136:	b30d      	cbz	r5, 800e17c <__gethex+0x14a>
 800e138:	f1bb 0f00 	cmp.w	fp, #0
 800e13c:	bf0c      	ite	eq
 800e13e:	2706      	moveq	r7, #6
 800e140:	2700      	movne	r7, #0
 800e142:	4638      	mov	r0, r7
 800e144:	b00b      	add	sp, #44	; 0x2c
 800e146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14a:	f10b 0b01 	add.w	fp, fp, #1
 800e14e:	e78a      	b.n	800e066 <__gethex+0x34>
 800e150:	2500      	movs	r5, #0
 800e152:	462c      	mov	r4, r5
 800e154:	e7ae      	b.n	800e0b4 <__gethex+0x82>
 800e156:	463e      	mov	r6, r7
 800e158:	2501      	movs	r5, #1
 800e15a:	e7c7      	b.n	800e0ec <__gethex+0xba>
 800e15c:	4604      	mov	r4, r0
 800e15e:	e7fb      	b.n	800e158 <__gethex+0x126>
 800e160:	f04f 0900 	mov.w	r9, #0
 800e164:	1cb1      	adds	r1, r6, #2
 800e166:	e7ce      	b.n	800e106 <__gethex+0xd4>
 800e168:	f04f 0901 	mov.w	r9, #1
 800e16c:	e7fa      	b.n	800e164 <__gethex+0x132>
 800e16e:	230a      	movs	r3, #10
 800e170:	fb03 0202 	mla	r2, r3, r2, r0
 800e174:	3a10      	subs	r2, #16
 800e176:	e7cf      	b.n	800e118 <__gethex+0xe6>
 800e178:	4631      	mov	r1, r6
 800e17a:	e7da      	b.n	800e132 <__gethex+0x100>
 800e17c:	1bf3      	subs	r3, r6, r7
 800e17e:	3b01      	subs	r3, #1
 800e180:	4629      	mov	r1, r5
 800e182:	2b07      	cmp	r3, #7
 800e184:	dc49      	bgt.n	800e21a <__gethex+0x1e8>
 800e186:	9802      	ldr	r0, [sp, #8]
 800e188:	f000 fae1 	bl	800e74e <_Balloc>
 800e18c:	9b01      	ldr	r3, [sp, #4]
 800e18e:	f100 0914 	add.w	r9, r0, #20
 800e192:	f04f 0b00 	mov.w	fp, #0
 800e196:	f1c3 0301 	rsb	r3, r3, #1
 800e19a:	4605      	mov	r5, r0
 800e19c:	f8cd 9010 	str.w	r9, [sp, #16]
 800e1a0:	46da      	mov	sl, fp
 800e1a2:	9308      	str	r3, [sp, #32]
 800e1a4:	42b7      	cmp	r7, r6
 800e1a6:	d33b      	bcc.n	800e220 <__gethex+0x1ee>
 800e1a8:	9804      	ldr	r0, [sp, #16]
 800e1aa:	f840 ab04 	str.w	sl, [r0], #4
 800e1ae:	eba0 0009 	sub.w	r0, r0, r9
 800e1b2:	1080      	asrs	r0, r0, #2
 800e1b4:	6128      	str	r0, [r5, #16]
 800e1b6:	0147      	lsls	r7, r0, #5
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	f000 fb8c 	bl	800e8d6 <__hi0bits>
 800e1be:	f8d8 6000 	ldr.w	r6, [r8]
 800e1c2:	1a3f      	subs	r7, r7, r0
 800e1c4:	42b7      	cmp	r7, r6
 800e1c6:	dd64      	ble.n	800e292 <__gethex+0x260>
 800e1c8:	1bbf      	subs	r7, r7, r6
 800e1ca:	4639      	mov	r1, r7
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	f000 fe9b 	bl	800ef08 <__any_on>
 800e1d2:	4682      	mov	sl, r0
 800e1d4:	b178      	cbz	r0, 800e1f6 <__gethex+0x1c4>
 800e1d6:	1e7b      	subs	r3, r7, #1
 800e1d8:	1159      	asrs	r1, r3, #5
 800e1da:	f003 021f 	and.w	r2, r3, #31
 800e1de:	f04f 0a01 	mov.w	sl, #1
 800e1e2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e1e6:	fa0a f202 	lsl.w	r2, sl, r2
 800e1ea:	420a      	tst	r2, r1
 800e1ec:	d003      	beq.n	800e1f6 <__gethex+0x1c4>
 800e1ee:	4553      	cmp	r3, sl
 800e1f0:	dc46      	bgt.n	800e280 <__gethex+0x24e>
 800e1f2:	f04f 0a02 	mov.w	sl, #2
 800e1f6:	4639      	mov	r1, r7
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	f7ff fecb 	bl	800df94 <rshift>
 800e1fe:	443c      	add	r4, r7
 800e200:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e204:	42a3      	cmp	r3, r4
 800e206:	da52      	bge.n	800e2ae <__gethex+0x27c>
 800e208:	4629      	mov	r1, r5
 800e20a:	9802      	ldr	r0, [sp, #8]
 800e20c:	f000 fad3 	bl	800e7b6 <_Bfree>
 800e210:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e212:	2300      	movs	r3, #0
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	27a3      	movs	r7, #163	; 0xa3
 800e218:	e793      	b.n	800e142 <__gethex+0x110>
 800e21a:	3101      	adds	r1, #1
 800e21c:	105b      	asrs	r3, r3, #1
 800e21e:	e7b0      	b.n	800e182 <__gethex+0x150>
 800e220:	1e73      	subs	r3, r6, #1
 800e222:	9305      	str	r3, [sp, #20]
 800e224:	9a07      	ldr	r2, [sp, #28]
 800e226:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d018      	beq.n	800e260 <__gethex+0x22e>
 800e22e:	f1bb 0f20 	cmp.w	fp, #32
 800e232:	d107      	bne.n	800e244 <__gethex+0x212>
 800e234:	9b04      	ldr	r3, [sp, #16]
 800e236:	f8c3 a000 	str.w	sl, [r3]
 800e23a:	3304      	adds	r3, #4
 800e23c:	f04f 0a00 	mov.w	sl, #0
 800e240:	9304      	str	r3, [sp, #16]
 800e242:	46d3      	mov	fp, sl
 800e244:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e248:	f7ff fede 	bl	800e008 <__hexdig_fun>
 800e24c:	f000 000f 	and.w	r0, r0, #15
 800e250:	fa00 f00b 	lsl.w	r0, r0, fp
 800e254:	ea4a 0a00 	orr.w	sl, sl, r0
 800e258:	f10b 0b04 	add.w	fp, fp, #4
 800e25c:	9b05      	ldr	r3, [sp, #20]
 800e25e:	e00d      	b.n	800e27c <__gethex+0x24a>
 800e260:	9b05      	ldr	r3, [sp, #20]
 800e262:	9a08      	ldr	r2, [sp, #32]
 800e264:	4413      	add	r3, r2
 800e266:	42bb      	cmp	r3, r7
 800e268:	d3e1      	bcc.n	800e22e <__gethex+0x1fc>
 800e26a:	4618      	mov	r0, r3
 800e26c:	9a01      	ldr	r2, [sp, #4]
 800e26e:	9903      	ldr	r1, [sp, #12]
 800e270:	9309      	str	r3, [sp, #36]	; 0x24
 800e272:	f001 fc51 	bl	800fb18 <strncmp>
 800e276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e278:	2800      	cmp	r0, #0
 800e27a:	d1d8      	bne.n	800e22e <__gethex+0x1fc>
 800e27c:	461e      	mov	r6, r3
 800e27e:	e791      	b.n	800e1a4 <__gethex+0x172>
 800e280:	1eb9      	subs	r1, r7, #2
 800e282:	4628      	mov	r0, r5
 800e284:	f000 fe40 	bl	800ef08 <__any_on>
 800e288:	2800      	cmp	r0, #0
 800e28a:	d0b2      	beq.n	800e1f2 <__gethex+0x1c0>
 800e28c:	f04f 0a03 	mov.w	sl, #3
 800e290:	e7b1      	b.n	800e1f6 <__gethex+0x1c4>
 800e292:	da09      	bge.n	800e2a8 <__gethex+0x276>
 800e294:	1bf7      	subs	r7, r6, r7
 800e296:	4629      	mov	r1, r5
 800e298:	463a      	mov	r2, r7
 800e29a:	9802      	ldr	r0, [sp, #8]
 800e29c:	f000 fc56 	bl	800eb4c <__lshift>
 800e2a0:	1be4      	subs	r4, r4, r7
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	f100 0914 	add.w	r9, r0, #20
 800e2a8:	f04f 0a00 	mov.w	sl, #0
 800e2ac:	e7a8      	b.n	800e200 <__gethex+0x1ce>
 800e2ae:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e2b2:	42a0      	cmp	r0, r4
 800e2b4:	dd6a      	ble.n	800e38c <__gethex+0x35a>
 800e2b6:	1b04      	subs	r4, r0, r4
 800e2b8:	42a6      	cmp	r6, r4
 800e2ba:	dc2e      	bgt.n	800e31a <__gethex+0x2e8>
 800e2bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d022      	beq.n	800e30a <__gethex+0x2d8>
 800e2c4:	2b03      	cmp	r3, #3
 800e2c6:	d024      	beq.n	800e312 <__gethex+0x2e0>
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d115      	bne.n	800e2f8 <__gethex+0x2c6>
 800e2cc:	42a6      	cmp	r6, r4
 800e2ce:	d113      	bne.n	800e2f8 <__gethex+0x2c6>
 800e2d0:	2e01      	cmp	r6, #1
 800e2d2:	dc0b      	bgt.n	800e2ec <__gethex+0x2ba>
 800e2d4:	9a06      	ldr	r2, [sp, #24]
 800e2d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e2da:	6013      	str	r3, [r2, #0]
 800e2dc:	2301      	movs	r3, #1
 800e2de:	612b      	str	r3, [r5, #16]
 800e2e0:	f8c9 3000 	str.w	r3, [r9]
 800e2e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e2e6:	2762      	movs	r7, #98	; 0x62
 800e2e8:	601d      	str	r5, [r3, #0]
 800e2ea:	e72a      	b.n	800e142 <__gethex+0x110>
 800e2ec:	1e71      	subs	r1, r6, #1
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	f000 fe0a 	bl	800ef08 <__any_on>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d1ed      	bne.n	800e2d4 <__gethex+0x2a2>
 800e2f8:	4629      	mov	r1, r5
 800e2fa:	9802      	ldr	r0, [sp, #8]
 800e2fc:	f000 fa5b 	bl	800e7b6 <_Bfree>
 800e300:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e302:	2300      	movs	r3, #0
 800e304:	6013      	str	r3, [r2, #0]
 800e306:	2750      	movs	r7, #80	; 0x50
 800e308:	e71b      	b.n	800e142 <__gethex+0x110>
 800e30a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d0e1      	beq.n	800e2d4 <__gethex+0x2a2>
 800e310:	e7f2      	b.n	800e2f8 <__gethex+0x2c6>
 800e312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1dd      	bne.n	800e2d4 <__gethex+0x2a2>
 800e318:	e7ee      	b.n	800e2f8 <__gethex+0x2c6>
 800e31a:	1e67      	subs	r7, r4, #1
 800e31c:	f1ba 0f00 	cmp.w	sl, #0
 800e320:	d131      	bne.n	800e386 <__gethex+0x354>
 800e322:	b127      	cbz	r7, 800e32e <__gethex+0x2fc>
 800e324:	4639      	mov	r1, r7
 800e326:	4628      	mov	r0, r5
 800e328:	f000 fdee 	bl	800ef08 <__any_on>
 800e32c:	4682      	mov	sl, r0
 800e32e:	117a      	asrs	r2, r7, #5
 800e330:	2301      	movs	r3, #1
 800e332:	f007 071f 	and.w	r7, r7, #31
 800e336:	fa03 f707 	lsl.w	r7, r3, r7
 800e33a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e33e:	4621      	mov	r1, r4
 800e340:	421f      	tst	r7, r3
 800e342:	4628      	mov	r0, r5
 800e344:	bf18      	it	ne
 800e346:	f04a 0a02 	orrne.w	sl, sl, #2
 800e34a:	1b36      	subs	r6, r6, r4
 800e34c:	f7ff fe22 	bl	800df94 <rshift>
 800e350:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e354:	2702      	movs	r7, #2
 800e356:	f1ba 0f00 	cmp.w	sl, #0
 800e35a:	d048      	beq.n	800e3ee <__gethex+0x3bc>
 800e35c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e360:	2b02      	cmp	r3, #2
 800e362:	d015      	beq.n	800e390 <__gethex+0x35e>
 800e364:	2b03      	cmp	r3, #3
 800e366:	d017      	beq.n	800e398 <__gethex+0x366>
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d109      	bne.n	800e380 <__gethex+0x34e>
 800e36c:	f01a 0f02 	tst.w	sl, #2
 800e370:	d006      	beq.n	800e380 <__gethex+0x34e>
 800e372:	f8d9 3000 	ldr.w	r3, [r9]
 800e376:	ea4a 0a03 	orr.w	sl, sl, r3
 800e37a:	f01a 0f01 	tst.w	sl, #1
 800e37e:	d10e      	bne.n	800e39e <__gethex+0x36c>
 800e380:	f047 0710 	orr.w	r7, r7, #16
 800e384:	e033      	b.n	800e3ee <__gethex+0x3bc>
 800e386:	f04f 0a01 	mov.w	sl, #1
 800e38a:	e7d0      	b.n	800e32e <__gethex+0x2fc>
 800e38c:	2701      	movs	r7, #1
 800e38e:	e7e2      	b.n	800e356 <__gethex+0x324>
 800e390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e392:	f1c3 0301 	rsb	r3, r3, #1
 800e396:	9315      	str	r3, [sp, #84]	; 0x54
 800e398:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d0f0      	beq.n	800e380 <__gethex+0x34e>
 800e39e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e3a2:	f105 0314 	add.w	r3, r5, #20
 800e3a6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e3aa:	eb03 010a 	add.w	r1, r3, sl
 800e3ae:	f04f 0c00 	mov.w	ip, #0
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e3bc:	d01c      	beq.n	800e3f8 <__gethex+0x3c6>
 800e3be:	3201      	adds	r2, #1
 800e3c0:	6002      	str	r2, [r0, #0]
 800e3c2:	2f02      	cmp	r7, #2
 800e3c4:	f105 0314 	add.w	r3, r5, #20
 800e3c8:	d138      	bne.n	800e43c <__gethex+0x40a>
 800e3ca:	f8d8 2000 	ldr.w	r2, [r8]
 800e3ce:	3a01      	subs	r2, #1
 800e3d0:	42b2      	cmp	r2, r6
 800e3d2:	d10a      	bne.n	800e3ea <__gethex+0x3b8>
 800e3d4:	1171      	asrs	r1, r6, #5
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	f006 061f 	and.w	r6, r6, #31
 800e3dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e3e0:	fa02 f606 	lsl.w	r6, r2, r6
 800e3e4:	421e      	tst	r6, r3
 800e3e6:	bf18      	it	ne
 800e3e8:	4617      	movne	r7, r2
 800e3ea:	f047 0720 	orr.w	r7, r7, #32
 800e3ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e3f0:	601d      	str	r5, [r3, #0]
 800e3f2:	9b06      	ldr	r3, [sp, #24]
 800e3f4:	601c      	str	r4, [r3, #0]
 800e3f6:	e6a4      	b.n	800e142 <__gethex+0x110>
 800e3f8:	4299      	cmp	r1, r3
 800e3fa:	f843 cc04 	str.w	ip, [r3, #-4]
 800e3fe:	d8d8      	bhi.n	800e3b2 <__gethex+0x380>
 800e400:	68ab      	ldr	r3, [r5, #8]
 800e402:	4599      	cmp	r9, r3
 800e404:	db12      	blt.n	800e42c <__gethex+0x3fa>
 800e406:	6869      	ldr	r1, [r5, #4]
 800e408:	9802      	ldr	r0, [sp, #8]
 800e40a:	3101      	adds	r1, #1
 800e40c:	f000 f99f 	bl	800e74e <_Balloc>
 800e410:	692a      	ldr	r2, [r5, #16]
 800e412:	3202      	adds	r2, #2
 800e414:	f105 010c 	add.w	r1, r5, #12
 800e418:	4683      	mov	fp, r0
 800e41a:	0092      	lsls	r2, r2, #2
 800e41c:	300c      	adds	r0, #12
 800e41e:	f000 f989 	bl	800e734 <memcpy>
 800e422:	4629      	mov	r1, r5
 800e424:	9802      	ldr	r0, [sp, #8]
 800e426:	f000 f9c6 	bl	800e7b6 <_Bfree>
 800e42a:	465d      	mov	r5, fp
 800e42c:	692b      	ldr	r3, [r5, #16]
 800e42e:	1c5a      	adds	r2, r3, #1
 800e430:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e434:	612a      	str	r2, [r5, #16]
 800e436:	2201      	movs	r2, #1
 800e438:	615a      	str	r2, [r3, #20]
 800e43a:	e7c2      	b.n	800e3c2 <__gethex+0x390>
 800e43c:	692a      	ldr	r2, [r5, #16]
 800e43e:	454a      	cmp	r2, r9
 800e440:	dd0b      	ble.n	800e45a <__gethex+0x428>
 800e442:	2101      	movs	r1, #1
 800e444:	4628      	mov	r0, r5
 800e446:	f7ff fda5 	bl	800df94 <rshift>
 800e44a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e44e:	3401      	adds	r4, #1
 800e450:	42a3      	cmp	r3, r4
 800e452:	f6ff aed9 	blt.w	800e208 <__gethex+0x1d6>
 800e456:	2701      	movs	r7, #1
 800e458:	e7c7      	b.n	800e3ea <__gethex+0x3b8>
 800e45a:	f016 061f 	ands.w	r6, r6, #31
 800e45e:	d0fa      	beq.n	800e456 <__gethex+0x424>
 800e460:	449a      	add	sl, r3
 800e462:	f1c6 0620 	rsb	r6, r6, #32
 800e466:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e46a:	f000 fa34 	bl	800e8d6 <__hi0bits>
 800e46e:	42b0      	cmp	r0, r6
 800e470:	dbe7      	blt.n	800e442 <__gethex+0x410>
 800e472:	e7f0      	b.n	800e456 <__gethex+0x424>

0800e474 <L_shift>:
 800e474:	f1c2 0208 	rsb	r2, r2, #8
 800e478:	0092      	lsls	r2, r2, #2
 800e47a:	b570      	push	{r4, r5, r6, lr}
 800e47c:	f1c2 0620 	rsb	r6, r2, #32
 800e480:	6843      	ldr	r3, [r0, #4]
 800e482:	6804      	ldr	r4, [r0, #0]
 800e484:	fa03 f506 	lsl.w	r5, r3, r6
 800e488:	432c      	orrs	r4, r5
 800e48a:	40d3      	lsrs	r3, r2
 800e48c:	6004      	str	r4, [r0, #0]
 800e48e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e492:	4288      	cmp	r0, r1
 800e494:	d3f4      	bcc.n	800e480 <L_shift+0xc>
 800e496:	bd70      	pop	{r4, r5, r6, pc}

0800e498 <__match>:
 800e498:	b530      	push	{r4, r5, lr}
 800e49a:	6803      	ldr	r3, [r0, #0]
 800e49c:	3301      	adds	r3, #1
 800e49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4a2:	b914      	cbnz	r4, 800e4aa <__match+0x12>
 800e4a4:	6003      	str	r3, [r0, #0]
 800e4a6:	2001      	movs	r0, #1
 800e4a8:	bd30      	pop	{r4, r5, pc}
 800e4aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e4b2:	2d19      	cmp	r5, #25
 800e4b4:	bf98      	it	ls
 800e4b6:	3220      	addls	r2, #32
 800e4b8:	42a2      	cmp	r2, r4
 800e4ba:	d0f0      	beq.n	800e49e <__match+0x6>
 800e4bc:	2000      	movs	r0, #0
 800e4be:	e7f3      	b.n	800e4a8 <__match+0x10>

0800e4c0 <__hexnan>:
 800e4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c4:	680b      	ldr	r3, [r1, #0]
 800e4c6:	6801      	ldr	r1, [r0, #0]
 800e4c8:	115f      	asrs	r7, r3, #5
 800e4ca:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e4ce:	f013 031f 	ands.w	r3, r3, #31
 800e4d2:	b087      	sub	sp, #28
 800e4d4:	bf18      	it	ne
 800e4d6:	3704      	addne	r7, #4
 800e4d8:	2500      	movs	r5, #0
 800e4da:	1f3e      	subs	r6, r7, #4
 800e4dc:	4682      	mov	sl, r0
 800e4de:	4690      	mov	r8, r2
 800e4e0:	9301      	str	r3, [sp, #4]
 800e4e2:	f847 5c04 	str.w	r5, [r7, #-4]
 800e4e6:	46b1      	mov	r9, r6
 800e4e8:	4634      	mov	r4, r6
 800e4ea:	9502      	str	r5, [sp, #8]
 800e4ec:	46ab      	mov	fp, r5
 800e4ee:	784a      	ldrb	r2, [r1, #1]
 800e4f0:	1c4b      	adds	r3, r1, #1
 800e4f2:	9303      	str	r3, [sp, #12]
 800e4f4:	b342      	cbz	r2, 800e548 <__hexnan+0x88>
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	9105      	str	r1, [sp, #20]
 800e4fa:	9204      	str	r2, [sp, #16]
 800e4fc:	f7ff fd84 	bl	800e008 <__hexdig_fun>
 800e500:	2800      	cmp	r0, #0
 800e502:	d143      	bne.n	800e58c <__hexnan+0xcc>
 800e504:	9a04      	ldr	r2, [sp, #16]
 800e506:	9905      	ldr	r1, [sp, #20]
 800e508:	2a20      	cmp	r2, #32
 800e50a:	d818      	bhi.n	800e53e <__hexnan+0x7e>
 800e50c:	9b02      	ldr	r3, [sp, #8]
 800e50e:	459b      	cmp	fp, r3
 800e510:	dd13      	ble.n	800e53a <__hexnan+0x7a>
 800e512:	454c      	cmp	r4, r9
 800e514:	d206      	bcs.n	800e524 <__hexnan+0x64>
 800e516:	2d07      	cmp	r5, #7
 800e518:	dc04      	bgt.n	800e524 <__hexnan+0x64>
 800e51a:	462a      	mov	r2, r5
 800e51c:	4649      	mov	r1, r9
 800e51e:	4620      	mov	r0, r4
 800e520:	f7ff ffa8 	bl	800e474 <L_shift>
 800e524:	4544      	cmp	r4, r8
 800e526:	d944      	bls.n	800e5b2 <__hexnan+0xf2>
 800e528:	2300      	movs	r3, #0
 800e52a:	f1a4 0904 	sub.w	r9, r4, #4
 800e52e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e532:	f8cd b008 	str.w	fp, [sp, #8]
 800e536:	464c      	mov	r4, r9
 800e538:	461d      	mov	r5, r3
 800e53a:	9903      	ldr	r1, [sp, #12]
 800e53c:	e7d7      	b.n	800e4ee <__hexnan+0x2e>
 800e53e:	2a29      	cmp	r2, #41	; 0x29
 800e540:	d14a      	bne.n	800e5d8 <__hexnan+0x118>
 800e542:	3102      	adds	r1, #2
 800e544:	f8ca 1000 	str.w	r1, [sl]
 800e548:	f1bb 0f00 	cmp.w	fp, #0
 800e54c:	d044      	beq.n	800e5d8 <__hexnan+0x118>
 800e54e:	454c      	cmp	r4, r9
 800e550:	d206      	bcs.n	800e560 <__hexnan+0xa0>
 800e552:	2d07      	cmp	r5, #7
 800e554:	dc04      	bgt.n	800e560 <__hexnan+0xa0>
 800e556:	462a      	mov	r2, r5
 800e558:	4649      	mov	r1, r9
 800e55a:	4620      	mov	r0, r4
 800e55c:	f7ff ff8a 	bl	800e474 <L_shift>
 800e560:	4544      	cmp	r4, r8
 800e562:	d928      	bls.n	800e5b6 <__hexnan+0xf6>
 800e564:	4643      	mov	r3, r8
 800e566:	f854 2b04 	ldr.w	r2, [r4], #4
 800e56a:	f843 2b04 	str.w	r2, [r3], #4
 800e56e:	42a6      	cmp	r6, r4
 800e570:	d2f9      	bcs.n	800e566 <__hexnan+0xa6>
 800e572:	2200      	movs	r2, #0
 800e574:	f843 2b04 	str.w	r2, [r3], #4
 800e578:	429e      	cmp	r6, r3
 800e57a:	d2fb      	bcs.n	800e574 <__hexnan+0xb4>
 800e57c:	6833      	ldr	r3, [r6, #0]
 800e57e:	b91b      	cbnz	r3, 800e588 <__hexnan+0xc8>
 800e580:	4546      	cmp	r6, r8
 800e582:	d127      	bne.n	800e5d4 <__hexnan+0x114>
 800e584:	2301      	movs	r3, #1
 800e586:	6033      	str	r3, [r6, #0]
 800e588:	2005      	movs	r0, #5
 800e58a:	e026      	b.n	800e5da <__hexnan+0x11a>
 800e58c:	3501      	adds	r5, #1
 800e58e:	2d08      	cmp	r5, #8
 800e590:	f10b 0b01 	add.w	fp, fp, #1
 800e594:	dd06      	ble.n	800e5a4 <__hexnan+0xe4>
 800e596:	4544      	cmp	r4, r8
 800e598:	d9cf      	bls.n	800e53a <__hexnan+0x7a>
 800e59a:	2300      	movs	r3, #0
 800e59c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5a0:	2501      	movs	r5, #1
 800e5a2:	3c04      	subs	r4, #4
 800e5a4:	6822      	ldr	r2, [r4, #0]
 800e5a6:	f000 000f 	and.w	r0, r0, #15
 800e5aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e5ae:	6020      	str	r0, [r4, #0]
 800e5b0:	e7c3      	b.n	800e53a <__hexnan+0x7a>
 800e5b2:	2508      	movs	r5, #8
 800e5b4:	e7c1      	b.n	800e53a <__hexnan+0x7a>
 800e5b6:	9b01      	ldr	r3, [sp, #4]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d0df      	beq.n	800e57c <__hexnan+0xbc>
 800e5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c0:	f1c3 0320 	rsb	r3, r3, #32
 800e5c4:	fa22 f303 	lsr.w	r3, r2, r3
 800e5c8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e5cc:	401a      	ands	r2, r3
 800e5ce:	f847 2c04 	str.w	r2, [r7, #-4]
 800e5d2:	e7d3      	b.n	800e57c <__hexnan+0xbc>
 800e5d4:	3e04      	subs	r6, #4
 800e5d6:	e7d1      	b.n	800e57c <__hexnan+0xbc>
 800e5d8:	2004      	movs	r0, #4
 800e5da:	b007      	add	sp, #28
 800e5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5e0 <__locale_ctype_ptr_l>:
 800e5e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e5e4:	4770      	bx	lr
	...

0800e5e8 <__locale_ctype_ptr>:
 800e5e8:	4b04      	ldr	r3, [pc, #16]	; (800e5fc <__locale_ctype_ptr+0x14>)
 800e5ea:	4a05      	ldr	r2, [pc, #20]	; (800e600 <__locale_ctype_ptr+0x18>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	6a1b      	ldr	r3, [r3, #32]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	bf08      	it	eq
 800e5f4:	4613      	moveq	r3, r2
 800e5f6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800e5fa:	4770      	bx	lr
 800e5fc:	200001e8 	.word	0x200001e8
 800e600:	2000024c 	.word	0x2000024c

0800e604 <__localeconv_l>:
 800e604:	30f0      	adds	r0, #240	; 0xf0
 800e606:	4770      	bx	lr

0800e608 <_localeconv_r>:
 800e608:	4b04      	ldr	r3, [pc, #16]	; (800e61c <_localeconv_r+0x14>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	6a18      	ldr	r0, [r3, #32]
 800e60e:	4b04      	ldr	r3, [pc, #16]	; (800e620 <_localeconv_r+0x18>)
 800e610:	2800      	cmp	r0, #0
 800e612:	bf08      	it	eq
 800e614:	4618      	moveq	r0, r3
 800e616:	30f0      	adds	r0, #240	; 0xf0
 800e618:	4770      	bx	lr
 800e61a:	bf00      	nop
 800e61c:	200001e8 	.word	0x200001e8
 800e620:	2000024c 	.word	0x2000024c

0800e624 <_lseek_r>:
 800e624:	b538      	push	{r3, r4, r5, lr}
 800e626:	4c07      	ldr	r4, [pc, #28]	; (800e644 <_lseek_r+0x20>)
 800e628:	4605      	mov	r5, r0
 800e62a:	4608      	mov	r0, r1
 800e62c:	4611      	mov	r1, r2
 800e62e:	2200      	movs	r2, #0
 800e630:	6022      	str	r2, [r4, #0]
 800e632:	461a      	mov	r2, r3
 800e634:	f7f3 fe36 	bl	80022a4 <_lseek>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	d102      	bne.n	800e642 <_lseek_r+0x1e>
 800e63c:	6823      	ldr	r3, [r4, #0]
 800e63e:	b103      	cbz	r3, 800e642 <_lseek_r+0x1e>
 800e640:	602b      	str	r3, [r5, #0]
 800e642:	bd38      	pop	{r3, r4, r5, pc}
 800e644:	20001378 	.word	0x20001378

0800e648 <__swhatbuf_r>:
 800e648:	b570      	push	{r4, r5, r6, lr}
 800e64a:	460e      	mov	r6, r1
 800e64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e650:	2900      	cmp	r1, #0
 800e652:	b096      	sub	sp, #88	; 0x58
 800e654:	4614      	mov	r4, r2
 800e656:	461d      	mov	r5, r3
 800e658:	da07      	bge.n	800e66a <__swhatbuf_r+0x22>
 800e65a:	2300      	movs	r3, #0
 800e65c:	602b      	str	r3, [r5, #0]
 800e65e:	89b3      	ldrh	r3, [r6, #12]
 800e660:	061a      	lsls	r2, r3, #24
 800e662:	d410      	bmi.n	800e686 <__swhatbuf_r+0x3e>
 800e664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e668:	e00e      	b.n	800e688 <__swhatbuf_r+0x40>
 800e66a:	466a      	mov	r2, sp
 800e66c:	f001 fb3a 	bl	800fce4 <_fstat_r>
 800e670:	2800      	cmp	r0, #0
 800e672:	dbf2      	blt.n	800e65a <__swhatbuf_r+0x12>
 800e674:	9a01      	ldr	r2, [sp, #4]
 800e676:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e67a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e67e:	425a      	negs	r2, r3
 800e680:	415a      	adcs	r2, r3
 800e682:	602a      	str	r2, [r5, #0]
 800e684:	e7ee      	b.n	800e664 <__swhatbuf_r+0x1c>
 800e686:	2340      	movs	r3, #64	; 0x40
 800e688:	2000      	movs	r0, #0
 800e68a:	6023      	str	r3, [r4, #0]
 800e68c:	b016      	add	sp, #88	; 0x58
 800e68e:	bd70      	pop	{r4, r5, r6, pc}

0800e690 <__smakebuf_r>:
 800e690:	898b      	ldrh	r3, [r1, #12]
 800e692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e694:	079d      	lsls	r5, r3, #30
 800e696:	4606      	mov	r6, r0
 800e698:	460c      	mov	r4, r1
 800e69a:	d507      	bpl.n	800e6ac <__smakebuf_r+0x1c>
 800e69c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6a0:	6023      	str	r3, [r4, #0]
 800e6a2:	6123      	str	r3, [r4, #16]
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	6163      	str	r3, [r4, #20]
 800e6a8:	b002      	add	sp, #8
 800e6aa:	bd70      	pop	{r4, r5, r6, pc}
 800e6ac:	ab01      	add	r3, sp, #4
 800e6ae:	466a      	mov	r2, sp
 800e6b0:	f7ff ffca 	bl	800e648 <__swhatbuf_r>
 800e6b4:	9900      	ldr	r1, [sp, #0]
 800e6b6:	4605      	mov	r5, r0
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	f7fc fd4d 	bl	800b158 <_malloc_r>
 800e6be:	b948      	cbnz	r0, 800e6d4 <__smakebuf_r+0x44>
 800e6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6c4:	059a      	lsls	r2, r3, #22
 800e6c6:	d4ef      	bmi.n	800e6a8 <__smakebuf_r+0x18>
 800e6c8:	f023 0303 	bic.w	r3, r3, #3
 800e6cc:	f043 0302 	orr.w	r3, r3, #2
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	e7e3      	b.n	800e69c <__smakebuf_r+0xc>
 800e6d4:	4b0d      	ldr	r3, [pc, #52]	; (800e70c <__smakebuf_r+0x7c>)
 800e6d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e6d8:	89a3      	ldrh	r3, [r4, #12]
 800e6da:	6020      	str	r0, [r4, #0]
 800e6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6e0:	81a3      	strh	r3, [r4, #12]
 800e6e2:	9b00      	ldr	r3, [sp, #0]
 800e6e4:	6163      	str	r3, [r4, #20]
 800e6e6:	9b01      	ldr	r3, [sp, #4]
 800e6e8:	6120      	str	r0, [r4, #16]
 800e6ea:	b15b      	cbz	r3, 800e704 <__smakebuf_r+0x74>
 800e6ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f001 fb09 	bl	800fd08 <_isatty_r>
 800e6f6:	b128      	cbz	r0, 800e704 <__smakebuf_r+0x74>
 800e6f8:	89a3      	ldrh	r3, [r4, #12]
 800e6fa:	f023 0303 	bic.w	r3, r3, #3
 800e6fe:	f043 0301 	orr.w	r3, r3, #1
 800e702:	81a3      	strh	r3, [r4, #12]
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	431d      	orrs	r5, r3
 800e708:	81a5      	strh	r5, [r4, #12]
 800e70a:	e7cd      	b.n	800e6a8 <__smakebuf_r+0x18>
 800e70c:	0800de49 	.word	0x0800de49

0800e710 <__ascii_mbtowc>:
 800e710:	b082      	sub	sp, #8
 800e712:	b901      	cbnz	r1, 800e716 <__ascii_mbtowc+0x6>
 800e714:	a901      	add	r1, sp, #4
 800e716:	b142      	cbz	r2, 800e72a <__ascii_mbtowc+0x1a>
 800e718:	b14b      	cbz	r3, 800e72e <__ascii_mbtowc+0x1e>
 800e71a:	7813      	ldrb	r3, [r2, #0]
 800e71c:	600b      	str	r3, [r1, #0]
 800e71e:	7812      	ldrb	r2, [r2, #0]
 800e720:	1c10      	adds	r0, r2, #0
 800e722:	bf18      	it	ne
 800e724:	2001      	movne	r0, #1
 800e726:	b002      	add	sp, #8
 800e728:	4770      	bx	lr
 800e72a:	4610      	mov	r0, r2
 800e72c:	e7fb      	b.n	800e726 <__ascii_mbtowc+0x16>
 800e72e:	f06f 0001 	mvn.w	r0, #1
 800e732:	e7f8      	b.n	800e726 <__ascii_mbtowc+0x16>

0800e734 <memcpy>:
 800e734:	b510      	push	{r4, lr}
 800e736:	1e43      	subs	r3, r0, #1
 800e738:	440a      	add	r2, r1
 800e73a:	4291      	cmp	r1, r2
 800e73c:	d100      	bne.n	800e740 <memcpy+0xc>
 800e73e:	bd10      	pop	{r4, pc}
 800e740:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e744:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e748:	e7f7      	b.n	800e73a <memcpy+0x6>

0800e74a <__malloc_lock>:
 800e74a:	4770      	bx	lr

0800e74c <__malloc_unlock>:
 800e74c:	4770      	bx	lr

0800e74e <_Balloc>:
 800e74e:	b570      	push	{r4, r5, r6, lr}
 800e750:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e752:	4604      	mov	r4, r0
 800e754:	460e      	mov	r6, r1
 800e756:	b93d      	cbnz	r5, 800e768 <_Balloc+0x1a>
 800e758:	2010      	movs	r0, #16
 800e75a:	f7fc fc97 	bl	800b08c <malloc>
 800e75e:	6260      	str	r0, [r4, #36]	; 0x24
 800e760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e764:	6005      	str	r5, [r0, #0]
 800e766:	60c5      	str	r5, [r0, #12]
 800e768:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e76a:	68eb      	ldr	r3, [r5, #12]
 800e76c:	b183      	cbz	r3, 800e790 <_Balloc+0x42>
 800e76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e776:	b9b8      	cbnz	r0, 800e7a8 <_Balloc+0x5a>
 800e778:	2101      	movs	r1, #1
 800e77a:	fa01 f506 	lsl.w	r5, r1, r6
 800e77e:	1d6a      	adds	r2, r5, #5
 800e780:	0092      	lsls	r2, r2, #2
 800e782:	4620      	mov	r0, r4
 800e784:	f000 fbe1 	bl	800ef4a <_calloc_r>
 800e788:	b160      	cbz	r0, 800e7a4 <_Balloc+0x56>
 800e78a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e78e:	e00e      	b.n	800e7ae <_Balloc+0x60>
 800e790:	2221      	movs	r2, #33	; 0x21
 800e792:	2104      	movs	r1, #4
 800e794:	4620      	mov	r0, r4
 800e796:	f000 fbd8 	bl	800ef4a <_calloc_r>
 800e79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e79c:	60e8      	str	r0, [r5, #12]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1e4      	bne.n	800e76e <_Balloc+0x20>
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	bd70      	pop	{r4, r5, r6, pc}
 800e7a8:	6802      	ldr	r2, [r0, #0]
 800e7aa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7b4:	e7f7      	b.n	800e7a6 <_Balloc+0x58>

0800e7b6 <_Bfree>:
 800e7b6:	b570      	push	{r4, r5, r6, lr}
 800e7b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e7ba:	4606      	mov	r6, r0
 800e7bc:	460d      	mov	r5, r1
 800e7be:	b93c      	cbnz	r4, 800e7d0 <_Bfree+0x1a>
 800e7c0:	2010      	movs	r0, #16
 800e7c2:	f7fc fc63 	bl	800b08c <malloc>
 800e7c6:	6270      	str	r0, [r6, #36]	; 0x24
 800e7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7cc:	6004      	str	r4, [r0, #0]
 800e7ce:	60c4      	str	r4, [r0, #12]
 800e7d0:	b13d      	cbz	r5, 800e7e2 <_Bfree+0x2c>
 800e7d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e7d4:	686a      	ldr	r2, [r5, #4]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7dc:	6029      	str	r1, [r5, #0]
 800e7de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e7e2:	bd70      	pop	{r4, r5, r6, pc}

0800e7e4 <__multadd>:
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	690d      	ldr	r5, [r1, #16]
 800e7ea:	461f      	mov	r7, r3
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	460c      	mov	r4, r1
 800e7f0:	f101 0c14 	add.w	ip, r1, #20
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f8dc 0000 	ldr.w	r0, [ip]
 800e7fa:	b281      	uxth	r1, r0
 800e7fc:	fb02 7101 	mla	r1, r2, r1, r7
 800e800:	0c0f      	lsrs	r7, r1, #16
 800e802:	0c00      	lsrs	r0, r0, #16
 800e804:	fb02 7000 	mla	r0, r2, r0, r7
 800e808:	b289      	uxth	r1, r1
 800e80a:	3301      	adds	r3, #1
 800e80c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e810:	429d      	cmp	r5, r3
 800e812:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e816:	f84c 1b04 	str.w	r1, [ip], #4
 800e81a:	dcec      	bgt.n	800e7f6 <__multadd+0x12>
 800e81c:	b1d7      	cbz	r7, 800e854 <__multadd+0x70>
 800e81e:	68a3      	ldr	r3, [r4, #8]
 800e820:	42ab      	cmp	r3, r5
 800e822:	dc12      	bgt.n	800e84a <__multadd+0x66>
 800e824:	6861      	ldr	r1, [r4, #4]
 800e826:	4630      	mov	r0, r6
 800e828:	3101      	adds	r1, #1
 800e82a:	f7ff ff90 	bl	800e74e <_Balloc>
 800e82e:	6922      	ldr	r2, [r4, #16]
 800e830:	3202      	adds	r2, #2
 800e832:	f104 010c 	add.w	r1, r4, #12
 800e836:	4680      	mov	r8, r0
 800e838:	0092      	lsls	r2, r2, #2
 800e83a:	300c      	adds	r0, #12
 800e83c:	f7ff ff7a 	bl	800e734 <memcpy>
 800e840:	4621      	mov	r1, r4
 800e842:	4630      	mov	r0, r6
 800e844:	f7ff ffb7 	bl	800e7b6 <_Bfree>
 800e848:	4644      	mov	r4, r8
 800e84a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e84e:	3501      	adds	r5, #1
 800e850:	615f      	str	r7, [r3, #20]
 800e852:	6125      	str	r5, [r4, #16]
 800e854:	4620      	mov	r0, r4
 800e856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e85a <__s2b>:
 800e85a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e85e:	460c      	mov	r4, r1
 800e860:	4615      	mov	r5, r2
 800e862:	461f      	mov	r7, r3
 800e864:	2209      	movs	r2, #9
 800e866:	3308      	adds	r3, #8
 800e868:	4606      	mov	r6, r0
 800e86a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e86e:	2100      	movs	r1, #0
 800e870:	2201      	movs	r2, #1
 800e872:	429a      	cmp	r2, r3
 800e874:	db20      	blt.n	800e8b8 <__s2b+0x5e>
 800e876:	4630      	mov	r0, r6
 800e878:	f7ff ff69 	bl	800e74e <_Balloc>
 800e87c:	9b08      	ldr	r3, [sp, #32]
 800e87e:	6143      	str	r3, [r0, #20]
 800e880:	2d09      	cmp	r5, #9
 800e882:	f04f 0301 	mov.w	r3, #1
 800e886:	6103      	str	r3, [r0, #16]
 800e888:	dd19      	ble.n	800e8be <__s2b+0x64>
 800e88a:	f104 0809 	add.w	r8, r4, #9
 800e88e:	46c1      	mov	r9, r8
 800e890:	442c      	add	r4, r5
 800e892:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e896:	4601      	mov	r1, r0
 800e898:	3b30      	subs	r3, #48	; 0x30
 800e89a:	220a      	movs	r2, #10
 800e89c:	4630      	mov	r0, r6
 800e89e:	f7ff ffa1 	bl	800e7e4 <__multadd>
 800e8a2:	45a1      	cmp	r9, r4
 800e8a4:	d1f5      	bne.n	800e892 <__s2b+0x38>
 800e8a6:	eb08 0405 	add.w	r4, r8, r5
 800e8aa:	3c08      	subs	r4, #8
 800e8ac:	1b2d      	subs	r5, r5, r4
 800e8ae:	1963      	adds	r3, r4, r5
 800e8b0:	42bb      	cmp	r3, r7
 800e8b2:	db07      	blt.n	800e8c4 <__s2b+0x6a>
 800e8b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b8:	0052      	lsls	r2, r2, #1
 800e8ba:	3101      	adds	r1, #1
 800e8bc:	e7d9      	b.n	800e872 <__s2b+0x18>
 800e8be:	340a      	adds	r4, #10
 800e8c0:	2509      	movs	r5, #9
 800e8c2:	e7f3      	b.n	800e8ac <__s2b+0x52>
 800e8c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e8c8:	4601      	mov	r1, r0
 800e8ca:	3b30      	subs	r3, #48	; 0x30
 800e8cc:	220a      	movs	r2, #10
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	f7ff ff88 	bl	800e7e4 <__multadd>
 800e8d4:	e7eb      	b.n	800e8ae <__s2b+0x54>

0800e8d6 <__hi0bits>:
 800e8d6:	0c02      	lsrs	r2, r0, #16
 800e8d8:	0412      	lsls	r2, r2, #16
 800e8da:	4603      	mov	r3, r0
 800e8dc:	b9b2      	cbnz	r2, 800e90c <__hi0bits+0x36>
 800e8de:	0403      	lsls	r3, r0, #16
 800e8e0:	2010      	movs	r0, #16
 800e8e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e8e6:	bf04      	itt	eq
 800e8e8:	021b      	lsleq	r3, r3, #8
 800e8ea:	3008      	addeq	r0, #8
 800e8ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e8f0:	bf04      	itt	eq
 800e8f2:	011b      	lsleq	r3, r3, #4
 800e8f4:	3004      	addeq	r0, #4
 800e8f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e8fa:	bf04      	itt	eq
 800e8fc:	009b      	lsleq	r3, r3, #2
 800e8fe:	3002      	addeq	r0, #2
 800e900:	2b00      	cmp	r3, #0
 800e902:	db06      	blt.n	800e912 <__hi0bits+0x3c>
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	d503      	bpl.n	800e910 <__hi0bits+0x3a>
 800e908:	3001      	adds	r0, #1
 800e90a:	4770      	bx	lr
 800e90c:	2000      	movs	r0, #0
 800e90e:	e7e8      	b.n	800e8e2 <__hi0bits+0xc>
 800e910:	2020      	movs	r0, #32
 800e912:	4770      	bx	lr

0800e914 <__lo0bits>:
 800e914:	6803      	ldr	r3, [r0, #0]
 800e916:	f013 0207 	ands.w	r2, r3, #7
 800e91a:	4601      	mov	r1, r0
 800e91c:	d00b      	beq.n	800e936 <__lo0bits+0x22>
 800e91e:	07da      	lsls	r2, r3, #31
 800e920:	d423      	bmi.n	800e96a <__lo0bits+0x56>
 800e922:	0798      	lsls	r0, r3, #30
 800e924:	bf49      	itett	mi
 800e926:	085b      	lsrmi	r3, r3, #1
 800e928:	089b      	lsrpl	r3, r3, #2
 800e92a:	2001      	movmi	r0, #1
 800e92c:	600b      	strmi	r3, [r1, #0]
 800e92e:	bf5c      	itt	pl
 800e930:	600b      	strpl	r3, [r1, #0]
 800e932:	2002      	movpl	r0, #2
 800e934:	4770      	bx	lr
 800e936:	b298      	uxth	r0, r3
 800e938:	b9a8      	cbnz	r0, 800e966 <__lo0bits+0x52>
 800e93a:	0c1b      	lsrs	r3, r3, #16
 800e93c:	2010      	movs	r0, #16
 800e93e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e942:	bf04      	itt	eq
 800e944:	0a1b      	lsreq	r3, r3, #8
 800e946:	3008      	addeq	r0, #8
 800e948:	071a      	lsls	r2, r3, #28
 800e94a:	bf04      	itt	eq
 800e94c:	091b      	lsreq	r3, r3, #4
 800e94e:	3004      	addeq	r0, #4
 800e950:	079a      	lsls	r2, r3, #30
 800e952:	bf04      	itt	eq
 800e954:	089b      	lsreq	r3, r3, #2
 800e956:	3002      	addeq	r0, #2
 800e958:	07da      	lsls	r2, r3, #31
 800e95a:	d402      	bmi.n	800e962 <__lo0bits+0x4e>
 800e95c:	085b      	lsrs	r3, r3, #1
 800e95e:	d006      	beq.n	800e96e <__lo0bits+0x5a>
 800e960:	3001      	adds	r0, #1
 800e962:	600b      	str	r3, [r1, #0]
 800e964:	4770      	bx	lr
 800e966:	4610      	mov	r0, r2
 800e968:	e7e9      	b.n	800e93e <__lo0bits+0x2a>
 800e96a:	2000      	movs	r0, #0
 800e96c:	4770      	bx	lr
 800e96e:	2020      	movs	r0, #32
 800e970:	4770      	bx	lr

0800e972 <__i2b>:
 800e972:	b510      	push	{r4, lr}
 800e974:	460c      	mov	r4, r1
 800e976:	2101      	movs	r1, #1
 800e978:	f7ff fee9 	bl	800e74e <_Balloc>
 800e97c:	2201      	movs	r2, #1
 800e97e:	6144      	str	r4, [r0, #20]
 800e980:	6102      	str	r2, [r0, #16]
 800e982:	bd10      	pop	{r4, pc}

0800e984 <__multiply>:
 800e984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e988:	4614      	mov	r4, r2
 800e98a:	690a      	ldr	r2, [r1, #16]
 800e98c:	6923      	ldr	r3, [r4, #16]
 800e98e:	429a      	cmp	r2, r3
 800e990:	bfb8      	it	lt
 800e992:	460b      	movlt	r3, r1
 800e994:	4688      	mov	r8, r1
 800e996:	bfbc      	itt	lt
 800e998:	46a0      	movlt	r8, r4
 800e99a:	461c      	movlt	r4, r3
 800e99c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e9a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e9a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e9a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e9ac:	eb07 0609 	add.w	r6, r7, r9
 800e9b0:	42b3      	cmp	r3, r6
 800e9b2:	bfb8      	it	lt
 800e9b4:	3101      	addlt	r1, #1
 800e9b6:	f7ff feca 	bl	800e74e <_Balloc>
 800e9ba:	f100 0514 	add.w	r5, r0, #20
 800e9be:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e9c2:	462b      	mov	r3, r5
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	4573      	cmp	r3, lr
 800e9c8:	d316      	bcc.n	800e9f8 <__multiply+0x74>
 800e9ca:	f104 0214 	add.w	r2, r4, #20
 800e9ce:	f108 0114 	add.w	r1, r8, #20
 800e9d2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e9d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e9da:	9300      	str	r3, [sp, #0]
 800e9dc:	9b00      	ldr	r3, [sp, #0]
 800e9de:	9201      	str	r2, [sp, #4]
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d80c      	bhi.n	800e9fe <__multiply+0x7a>
 800e9e4:	2e00      	cmp	r6, #0
 800e9e6:	dd03      	ble.n	800e9f0 <__multiply+0x6c>
 800e9e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d05d      	beq.n	800eaac <__multiply+0x128>
 800e9f0:	6106      	str	r6, [r0, #16]
 800e9f2:	b003      	add	sp, #12
 800e9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f8:	f843 2b04 	str.w	r2, [r3], #4
 800e9fc:	e7e3      	b.n	800e9c6 <__multiply+0x42>
 800e9fe:	f8b2 b000 	ldrh.w	fp, [r2]
 800ea02:	f1bb 0f00 	cmp.w	fp, #0
 800ea06:	d023      	beq.n	800ea50 <__multiply+0xcc>
 800ea08:	4689      	mov	r9, r1
 800ea0a:	46ac      	mov	ip, r5
 800ea0c:	f04f 0800 	mov.w	r8, #0
 800ea10:	f859 4b04 	ldr.w	r4, [r9], #4
 800ea14:	f8dc a000 	ldr.w	sl, [ip]
 800ea18:	b2a3      	uxth	r3, r4
 800ea1a:	fa1f fa8a 	uxth.w	sl, sl
 800ea1e:	fb0b a303 	mla	r3, fp, r3, sl
 800ea22:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ea26:	f8dc 4000 	ldr.w	r4, [ip]
 800ea2a:	4443      	add	r3, r8
 800ea2c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ea30:	fb0b 840a 	mla	r4, fp, sl, r8
 800ea34:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ea38:	46e2      	mov	sl, ip
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ea40:	454f      	cmp	r7, r9
 800ea42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ea46:	f84a 3b04 	str.w	r3, [sl], #4
 800ea4a:	d82b      	bhi.n	800eaa4 <__multiply+0x120>
 800ea4c:	f8cc 8004 	str.w	r8, [ip, #4]
 800ea50:	9b01      	ldr	r3, [sp, #4]
 800ea52:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ea56:	3204      	adds	r2, #4
 800ea58:	f1ba 0f00 	cmp.w	sl, #0
 800ea5c:	d020      	beq.n	800eaa0 <__multiply+0x11c>
 800ea5e:	682b      	ldr	r3, [r5, #0]
 800ea60:	4689      	mov	r9, r1
 800ea62:	46a8      	mov	r8, r5
 800ea64:	f04f 0b00 	mov.w	fp, #0
 800ea68:	f8b9 c000 	ldrh.w	ip, [r9]
 800ea6c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ea70:	fb0a 440c 	mla	r4, sl, ip, r4
 800ea74:	445c      	add	r4, fp
 800ea76:	46c4      	mov	ip, r8
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ea7e:	f84c 3b04 	str.w	r3, [ip], #4
 800ea82:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea86:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ea8a:	0c1b      	lsrs	r3, r3, #16
 800ea8c:	fb0a b303 	mla	r3, sl, r3, fp
 800ea90:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ea94:	454f      	cmp	r7, r9
 800ea96:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ea9a:	d805      	bhi.n	800eaa8 <__multiply+0x124>
 800ea9c:	f8c8 3004 	str.w	r3, [r8, #4]
 800eaa0:	3504      	adds	r5, #4
 800eaa2:	e79b      	b.n	800e9dc <__multiply+0x58>
 800eaa4:	46d4      	mov	ip, sl
 800eaa6:	e7b3      	b.n	800ea10 <__multiply+0x8c>
 800eaa8:	46e0      	mov	r8, ip
 800eaaa:	e7dd      	b.n	800ea68 <__multiply+0xe4>
 800eaac:	3e01      	subs	r6, #1
 800eaae:	e799      	b.n	800e9e4 <__multiply+0x60>

0800eab0 <__pow5mult>:
 800eab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eab4:	4615      	mov	r5, r2
 800eab6:	f012 0203 	ands.w	r2, r2, #3
 800eaba:	4606      	mov	r6, r0
 800eabc:	460f      	mov	r7, r1
 800eabe:	d007      	beq.n	800ead0 <__pow5mult+0x20>
 800eac0:	3a01      	subs	r2, #1
 800eac2:	4c21      	ldr	r4, [pc, #132]	; (800eb48 <__pow5mult+0x98>)
 800eac4:	2300      	movs	r3, #0
 800eac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eaca:	f7ff fe8b 	bl	800e7e4 <__multadd>
 800eace:	4607      	mov	r7, r0
 800ead0:	10ad      	asrs	r5, r5, #2
 800ead2:	d035      	beq.n	800eb40 <__pow5mult+0x90>
 800ead4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ead6:	b93c      	cbnz	r4, 800eae8 <__pow5mult+0x38>
 800ead8:	2010      	movs	r0, #16
 800eada:	f7fc fad7 	bl	800b08c <malloc>
 800eade:	6270      	str	r0, [r6, #36]	; 0x24
 800eae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eae4:	6004      	str	r4, [r0, #0]
 800eae6:	60c4      	str	r4, [r0, #12]
 800eae8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eaec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eaf0:	b94c      	cbnz	r4, 800eb06 <__pow5mult+0x56>
 800eaf2:	f240 2171 	movw	r1, #625	; 0x271
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f7ff ff3b 	bl	800e972 <__i2b>
 800eafc:	2300      	movs	r3, #0
 800eafe:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb02:	4604      	mov	r4, r0
 800eb04:	6003      	str	r3, [r0, #0]
 800eb06:	f04f 0800 	mov.w	r8, #0
 800eb0a:	07eb      	lsls	r3, r5, #31
 800eb0c:	d50a      	bpl.n	800eb24 <__pow5mult+0x74>
 800eb0e:	4639      	mov	r1, r7
 800eb10:	4622      	mov	r2, r4
 800eb12:	4630      	mov	r0, r6
 800eb14:	f7ff ff36 	bl	800e984 <__multiply>
 800eb18:	4639      	mov	r1, r7
 800eb1a:	4681      	mov	r9, r0
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	f7ff fe4a 	bl	800e7b6 <_Bfree>
 800eb22:	464f      	mov	r7, r9
 800eb24:	106d      	asrs	r5, r5, #1
 800eb26:	d00b      	beq.n	800eb40 <__pow5mult+0x90>
 800eb28:	6820      	ldr	r0, [r4, #0]
 800eb2a:	b938      	cbnz	r0, 800eb3c <__pow5mult+0x8c>
 800eb2c:	4622      	mov	r2, r4
 800eb2e:	4621      	mov	r1, r4
 800eb30:	4630      	mov	r0, r6
 800eb32:	f7ff ff27 	bl	800e984 <__multiply>
 800eb36:	6020      	str	r0, [r4, #0]
 800eb38:	f8c0 8000 	str.w	r8, [r0]
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	e7e4      	b.n	800eb0a <__pow5mult+0x5a>
 800eb40:	4638      	mov	r0, r7
 800eb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb46:	bf00      	nop
 800eb48:	08012d38 	.word	0x08012d38

0800eb4c <__lshift>:
 800eb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb50:	460c      	mov	r4, r1
 800eb52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb56:	6923      	ldr	r3, [r4, #16]
 800eb58:	6849      	ldr	r1, [r1, #4]
 800eb5a:	eb0a 0903 	add.w	r9, sl, r3
 800eb5e:	68a3      	ldr	r3, [r4, #8]
 800eb60:	4607      	mov	r7, r0
 800eb62:	4616      	mov	r6, r2
 800eb64:	f109 0501 	add.w	r5, r9, #1
 800eb68:	42ab      	cmp	r3, r5
 800eb6a:	db32      	blt.n	800ebd2 <__lshift+0x86>
 800eb6c:	4638      	mov	r0, r7
 800eb6e:	f7ff fdee 	bl	800e74e <_Balloc>
 800eb72:	2300      	movs	r3, #0
 800eb74:	4680      	mov	r8, r0
 800eb76:	f100 0114 	add.w	r1, r0, #20
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	4553      	cmp	r3, sl
 800eb7e:	db2b      	blt.n	800ebd8 <__lshift+0x8c>
 800eb80:	6920      	ldr	r0, [r4, #16]
 800eb82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb86:	f104 0314 	add.w	r3, r4, #20
 800eb8a:	f016 021f 	ands.w	r2, r6, #31
 800eb8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb96:	d025      	beq.n	800ebe4 <__lshift+0x98>
 800eb98:	f1c2 0e20 	rsb	lr, r2, #32
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	681e      	ldr	r6, [r3, #0]
 800eba0:	468a      	mov	sl, r1
 800eba2:	4096      	lsls	r6, r2
 800eba4:	4330      	orrs	r0, r6
 800eba6:	f84a 0b04 	str.w	r0, [sl], #4
 800ebaa:	f853 0b04 	ldr.w	r0, [r3], #4
 800ebae:	459c      	cmp	ip, r3
 800ebb0:	fa20 f00e 	lsr.w	r0, r0, lr
 800ebb4:	d814      	bhi.n	800ebe0 <__lshift+0x94>
 800ebb6:	6048      	str	r0, [r1, #4]
 800ebb8:	b108      	cbz	r0, 800ebbe <__lshift+0x72>
 800ebba:	f109 0502 	add.w	r5, r9, #2
 800ebbe:	3d01      	subs	r5, #1
 800ebc0:	4638      	mov	r0, r7
 800ebc2:	f8c8 5010 	str.w	r5, [r8, #16]
 800ebc6:	4621      	mov	r1, r4
 800ebc8:	f7ff fdf5 	bl	800e7b6 <_Bfree>
 800ebcc:	4640      	mov	r0, r8
 800ebce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebd2:	3101      	adds	r1, #1
 800ebd4:	005b      	lsls	r3, r3, #1
 800ebd6:	e7c7      	b.n	800eb68 <__lshift+0x1c>
 800ebd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	e7cd      	b.n	800eb7c <__lshift+0x30>
 800ebe0:	4651      	mov	r1, sl
 800ebe2:	e7dc      	b.n	800eb9e <__lshift+0x52>
 800ebe4:	3904      	subs	r1, #4
 800ebe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebea:	f841 2f04 	str.w	r2, [r1, #4]!
 800ebee:	459c      	cmp	ip, r3
 800ebf0:	d8f9      	bhi.n	800ebe6 <__lshift+0x9a>
 800ebf2:	e7e4      	b.n	800ebbe <__lshift+0x72>

0800ebf4 <__mcmp>:
 800ebf4:	6903      	ldr	r3, [r0, #16]
 800ebf6:	690a      	ldr	r2, [r1, #16]
 800ebf8:	1a9b      	subs	r3, r3, r2
 800ebfa:	b530      	push	{r4, r5, lr}
 800ebfc:	d10c      	bne.n	800ec18 <__mcmp+0x24>
 800ebfe:	0092      	lsls	r2, r2, #2
 800ec00:	3014      	adds	r0, #20
 800ec02:	3114      	adds	r1, #20
 800ec04:	1884      	adds	r4, r0, r2
 800ec06:	4411      	add	r1, r2
 800ec08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ec0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ec10:	4295      	cmp	r5, r2
 800ec12:	d003      	beq.n	800ec1c <__mcmp+0x28>
 800ec14:	d305      	bcc.n	800ec22 <__mcmp+0x2e>
 800ec16:	2301      	movs	r3, #1
 800ec18:	4618      	mov	r0, r3
 800ec1a:	bd30      	pop	{r4, r5, pc}
 800ec1c:	42a0      	cmp	r0, r4
 800ec1e:	d3f3      	bcc.n	800ec08 <__mcmp+0x14>
 800ec20:	e7fa      	b.n	800ec18 <__mcmp+0x24>
 800ec22:	f04f 33ff 	mov.w	r3, #4294967295
 800ec26:	e7f7      	b.n	800ec18 <__mcmp+0x24>

0800ec28 <__mdiff>:
 800ec28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec2c:	460d      	mov	r5, r1
 800ec2e:	4607      	mov	r7, r0
 800ec30:	4611      	mov	r1, r2
 800ec32:	4628      	mov	r0, r5
 800ec34:	4614      	mov	r4, r2
 800ec36:	f7ff ffdd 	bl	800ebf4 <__mcmp>
 800ec3a:	1e06      	subs	r6, r0, #0
 800ec3c:	d108      	bne.n	800ec50 <__mdiff+0x28>
 800ec3e:	4631      	mov	r1, r6
 800ec40:	4638      	mov	r0, r7
 800ec42:	f7ff fd84 	bl	800e74e <_Balloc>
 800ec46:	2301      	movs	r3, #1
 800ec48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ec4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec50:	bfa4      	itt	ge
 800ec52:	4623      	movge	r3, r4
 800ec54:	462c      	movge	r4, r5
 800ec56:	4638      	mov	r0, r7
 800ec58:	6861      	ldr	r1, [r4, #4]
 800ec5a:	bfa6      	itte	ge
 800ec5c:	461d      	movge	r5, r3
 800ec5e:	2600      	movge	r6, #0
 800ec60:	2601      	movlt	r6, #1
 800ec62:	f7ff fd74 	bl	800e74e <_Balloc>
 800ec66:	692b      	ldr	r3, [r5, #16]
 800ec68:	60c6      	str	r6, [r0, #12]
 800ec6a:	6926      	ldr	r6, [r4, #16]
 800ec6c:	f105 0914 	add.w	r9, r5, #20
 800ec70:	f104 0214 	add.w	r2, r4, #20
 800ec74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ec78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ec7c:	f100 0514 	add.w	r5, r0, #20
 800ec80:	f04f 0e00 	mov.w	lr, #0
 800ec84:	f852 ab04 	ldr.w	sl, [r2], #4
 800ec88:	f859 4b04 	ldr.w	r4, [r9], #4
 800ec8c:	fa1e f18a 	uxtah	r1, lr, sl
 800ec90:	b2a3      	uxth	r3, r4
 800ec92:	1ac9      	subs	r1, r1, r3
 800ec94:	0c23      	lsrs	r3, r4, #16
 800ec96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ec9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ec9e:	b289      	uxth	r1, r1
 800eca0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800eca4:	45c8      	cmp	r8, r9
 800eca6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ecaa:	4694      	mov	ip, r2
 800ecac:	f845 3b04 	str.w	r3, [r5], #4
 800ecb0:	d8e8      	bhi.n	800ec84 <__mdiff+0x5c>
 800ecb2:	45bc      	cmp	ip, r7
 800ecb4:	d304      	bcc.n	800ecc0 <__mdiff+0x98>
 800ecb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ecba:	b183      	cbz	r3, 800ecde <__mdiff+0xb6>
 800ecbc:	6106      	str	r6, [r0, #16]
 800ecbe:	e7c5      	b.n	800ec4c <__mdiff+0x24>
 800ecc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ecc4:	fa1e f381 	uxtah	r3, lr, r1
 800ecc8:	141a      	asrs	r2, r3, #16
 800ecca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ecd8:	f845 3b04 	str.w	r3, [r5], #4
 800ecdc:	e7e9      	b.n	800ecb2 <__mdiff+0x8a>
 800ecde:	3e01      	subs	r6, #1
 800ece0:	e7e9      	b.n	800ecb6 <__mdiff+0x8e>
	...

0800ece4 <__ulp>:
 800ece4:	4b12      	ldr	r3, [pc, #72]	; (800ed30 <__ulp+0x4c>)
 800ece6:	ee10 2a90 	vmov	r2, s1
 800ecea:	401a      	ands	r2, r3
 800ecec:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	dd04      	ble.n	800ecfe <__ulp+0x1a>
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	ec41 0b10 	vmov	d0, r0, r1
 800ecfc:	4770      	bx	lr
 800ecfe:	425b      	negs	r3, r3
 800ed00:	151b      	asrs	r3, r3, #20
 800ed02:	2b13      	cmp	r3, #19
 800ed04:	f04f 0000 	mov.w	r0, #0
 800ed08:	f04f 0100 	mov.w	r1, #0
 800ed0c:	dc04      	bgt.n	800ed18 <__ulp+0x34>
 800ed0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ed12:	fa42 f103 	asr.w	r1, r2, r3
 800ed16:	e7ef      	b.n	800ecf8 <__ulp+0x14>
 800ed18:	3b14      	subs	r3, #20
 800ed1a:	2b1e      	cmp	r3, #30
 800ed1c:	f04f 0201 	mov.w	r2, #1
 800ed20:	bfda      	itte	le
 800ed22:	f1c3 031f 	rsble	r3, r3, #31
 800ed26:	fa02 f303 	lslle.w	r3, r2, r3
 800ed2a:	4613      	movgt	r3, r2
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	e7e3      	b.n	800ecf8 <__ulp+0x14>
 800ed30:	7ff00000 	.word	0x7ff00000

0800ed34 <__b2d>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	6905      	ldr	r5, [r0, #16]
 800ed38:	f100 0714 	add.w	r7, r0, #20
 800ed3c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ed40:	1f2e      	subs	r6, r5, #4
 800ed42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ed46:	4620      	mov	r0, r4
 800ed48:	f7ff fdc5 	bl	800e8d6 <__hi0bits>
 800ed4c:	f1c0 0320 	rsb	r3, r0, #32
 800ed50:	280a      	cmp	r0, #10
 800ed52:	600b      	str	r3, [r1, #0]
 800ed54:	f8df c074 	ldr.w	ip, [pc, #116]	; 800edcc <__b2d+0x98>
 800ed58:	dc14      	bgt.n	800ed84 <__b2d+0x50>
 800ed5a:	f1c0 0e0b 	rsb	lr, r0, #11
 800ed5e:	fa24 f10e 	lsr.w	r1, r4, lr
 800ed62:	42b7      	cmp	r7, r6
 800ed64:	ea41 030c 	orr.w	r3, r1, ip
 800ed68:	bf34      	ite	cc
 800ed6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ed6e:	2100      	movcs	r1, #0
 800ed70:	3015      	adds	r0, #21
 800ed72:	fa04 f000 	lsl.w	r0, r4, r0
 800ed76:	fa21 f10e 	lsr.w	r1, r1, lr
 800ed7a:	ea40 0201 	orr.w	r2, r0, r1
 800ed7e:	ec43 2b10 	vmov	d0, r2, r3
 800ed82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed84:	42b7      	cmp	r7, r6
 800ed86:	bf3a      	itte	cc
 800ed88:	f1a5 0608 	subcc.w	r6, r5, #8
 800ed8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ed90:	2100      	movcs	r1, #0
 800ed92:	380b      	subs	r0, #11
 800ed94:	d015      	beq.n	800edc2 <__b2d+0x8e>
 800ed96:	4084      	lsls	r4, r0
 800ed98:	f1c0 0520 	rsb	r5, r0, #32
 800ed9c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800eda0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800eda4:	42be      	cmp	r6, r7
 800eda6:	fa21 fc05 	lsr.w	ip, r1, r5
 800edaa:	ea44 030c 	orr.w	r3, r4, ip
 800edae:	bf8c      	ite	hi
 800edb0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800edb4:	2400      	movls	r4, #0
 800edb6:	fa01 f000 	lsl.w	r0, r1, r0
 800edba:	40ec      	lsrs	r4, r5
 800edbc:	ea40 0204 	orr.w	r2, r0, r4
 800edc0:	e7dd      	b.n	800ed7e <__b2d+0x4a>
 800edc2:	ea44 030c 	orr.w	r3, r4, ip
 800edc6:	460a      	mov	r2, r1
 800edc8:	e7d9      	b.n	800ed7e <__b2d+0x4a>
 800edca:	bf00      	nop
 800edcc:	3ff00000 	.word	0x3ff00000

0800edd0 <__d2b>:
 800edd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800edd4:	460e      	mov	r6, r1
 800edd6:	2101      	movs	r1, #1
 800edd8:	ec59 8b10 	vmov	r8, r9, d0
 800eddc:	4615      	mov	r5, r2
 800edde:	f7ff fcb6 	bl	800e74e <_Balloc>
 800ede2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ede6:	4607      	mov	r7, r0
 800ede8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800edec:	bb34      	cbnz	r4, 800ee3c <__d2b+0x6c>
 800edee:	9301      	str	r3, [sp, #4]
 800edf0:	f1b8 0300 	subs.w	r3, r8, #0
 800edf4:	d027      	beq.n	800ee46 <__d2b+0x76>
 800edf6:	a802      	add	r0, sp, #8
 800edf8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800edfc:	f7ff fd8a 	bl	800e914 <__lo0bits>
 800ee00:	9900      	ldr	r1, [sp, #0]
 800ee02:	b1f0      	cbz	r0, 800ee42 <__d2b+0x72>
 800ee04:	9a01      	ldr	r2, [sp, #4]
 800ee06:	f1c0 0320 	rsb	r3, r0, #32
 800ee0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee0e:	430b      	orrs	r3, r1
 800ee10:	40c2      	lsrs	r2, r0
 800ee12:	617b      	str	r3, [r7, #20]
 800ee14:	9201      	str	r2, [sp, #4]
 800ee16:	9b01      	ldr	r3, [sp, #4]
 800ee18:	61bb      	str	r3, [r7, #24]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	bf14      	ite	ne
 800ee1e:	2102      	movne	r1, #2
 800ee20:	2101      	moveq	r1, #1
 800ee22:	6139      	str	r1, [r7, #16]
 800ee24:	b1c4      	cbz	r4, 800ee58 <__d2b+0x88>
 800ee26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ee2a:	4404      	add	r4, r0
 800ee2c:	6034      	str	r4, [r6, #0]
 800ee2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ee32:	6028      	str	r0, [r5, #0]
 800ee34:	4638      	mov	r0, r7
 800ee36:	b003      	add	sp, #12
 800ee38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee40:	e7d5      	b.n	800edee <__d2b+0x1e>
 800ee42:	6179      	str	r1, [r7, #20]
 800ee44:	e7e7      	b.n	800ee16 <__d2b+0x46>
 800ee46:	a801      	add	r0, sp, #4
 800ee48:	f7ff fd64 	bl	800e914 <__lo0bits>
 800ee4c:	9b01      	ldr	r3, [sp, #4]
 800ee4e:	617b      	str	r3, [r7, #20]
 800ee50:	2101      	movs	r1, #1
 800ee52:	6139      	str	r1, [r7, #16]
 800ee54:	3020      	adds	r0, #32
 800ee56:	e7e5      	b.n	800ee24 <__d2b+0x54>
 800ee58:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ee5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ee60:	6030      	str	r0, [r6, #0]
 800ee62:	6918      	ldr	r0, [r3, #16]
 800ee64:	f7ff fd37 	bl	800e8d6 <__hi0bits>
 800ee68:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ee6c:	e7e1      	b.n	800ee32 <__d2b+0x62>

0800ee6e <__ratio>:
 800ee6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee72:	4688      	mov	r8, r1
 800ee74:	4669      	mov	r1, sp
 800ee76:	4681      	mov	r9, r0
 800ee78:	f7ff ff5c 	bl	800ed34 <__b2d>
 800ee7c:	a901      	add	r1, sp, #4
 800ee7e:	4640      	mov	r0, r8
 800ee80:	ec57 6b10 	vmov	r6, r7, d0
 800ee84:	f7ff ff56 	bl	800ed34 <__b2d>
 800ee88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ee90:	eba3 0c02 	sub.w	ip, r3, r2
 800ee94:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ee98:	1a9b      	subs	r3, r3, r2
 800ee9a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ee9e:	ec5b ab10 	vmov	sl, fp, d0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	bfce      	itee	gt
 800eea6:	463a      	movgt	r2, r7
 800eea8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eeac:	465a      	movle	r2, fp
 800eeae:	4659      	mov	r1, fp
 800eeb0:	463d      	mov	r5, r7
 800eeb2:	bfd4      	ite	le
 800eeb4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800eeb8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800eebc:	4630      	mov	r0, r6
 800eebe:	ee10 2a10 	vmov	r2, s0
 800eec2:	460b      	mov	r3, r1
 800eec4:	4629      	mov	r1, r5
 800eec6:	f7f1 fcc9 	bl	800085c <__aeabi_ddiv>
 800eeca:	ec41 0b10 	vmov	d0, r0, r1
 800eece:	b003      	add	sp, #12
 800eed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eed4 <__copybits>:
 800eed4:	3901      	subs	r1, #1
 800eed6:	b510      	push	{r4, lr}
 800eed8:	1149      	asrs	r1, r1, #5
 800eeda:	6914      	ldr	r4, [r2, #16]
 800eedc:	3101      	adds	r1, #1
 800eede:	f102 0314 	add.w	r3, r2, #20
 800eee2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eee6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eeea:	42a3      	cmp	r3, r4
 800eeec:	4602      	mov	r2, r0
 800eeee:	d303      	bcc.n	800eef8 <__copybits+0x24>
 800eef0:	2300      	movs	r3, #0
 800eef2:	428a      	cmp	r2, r1
 800eef4:	d305      	bcc.n	800ef02 <__copybits+0x2e>
 800eef6:	bd10      	pop	{r4, pc}
 800eef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eefc:	f840 2b04 	str.w	r2, [r0], #4
 800ef00:	e7f3      	b.n	800eeea <__copybits+0x16>
 800ef02:	f842 3b04 	str.w	r3, [r2], #4
 800ef06:	e7f4      	b.n	800eef2 <__copybits+0x1e>

0800ef08 <__any_on>:
 800ef08:	f100 0214 	add.w	r2, r0, #20
 800ef0c:	6900      	ldr	r0, [r0, #16]
 800ef0e:	114b      	asrs	r3, r1, #5
 800ef10:	4298      	cmp	r0, r3
 800ef12:	b510      	push	{r4, lr}
 800ef14:	db11      	blt.n	800ef3a <__any_on+0x32>
 800ef16:	dd0a      	ble.n	800ef2e <__any_on+0x26>
 800ef18:	f011 011f 	ands.w	r1, r1, #31
 800ef1c:	d007      	beq.n	800ef2e <__any_on+0x26>
 800ef1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ef22:	fa24 f001 	lsr.w	r0, r4, r1
 800ef26:	fa00 f101 	lsl.w	r1, r0, r1
 800ef2a:	428c      	cmp	r4, r1
 800ef2c:	d10b      	bne.n	800ef46 <__any_on+0x3e>
 800ef2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d803      	bhi.n	800ef3e <__any_on+0x36>
 800ef36:	2000      	movs	r0, #0
 800ef38:	bd10      	pop	{r4, pc}
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	e7f7      	b.n	800ef2e <__any_on+0x26>
 800ef3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef42:	2900      	cmp	r1, #0
 800ef44:	d0f5      	beq.n	800ef32 <__any_on+0x2a>
 800ef46:	2001      	movs	r0, #1
 800ef48:	e7f6      	b.n	800ef38 <__any_on+0x30>

0800ef4a <_calloc_r>:
 800ef4a:	b538      	push	{r3, r4, r5, lr}
 800ef4c:	fb02 f401 	mul.w	r4, r2, r1
 800ef50:	4621      	mov	r1, r4
 800ef52:	f7fc f901 	bl	800b158 <_malloc_r>
 800ef56:	4605      	mov	r5, r0
 800ef58:	b118      	cbz	r0, 800ef62 <_calloc_r+0x18>
 800ef5a:	4622      	mov	r2, r4
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	f7fc f8a5 	bl	800b0ac <memset>
 800ef62:	4628      	mov	r0, r5
 800ef64:	bd38      	pop	{r3, r4, r5, pc}

0800ef66 <__ssputs_r>:
 800ef66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef6a:	688e      	ldr	r6, [r1, #8]
 800ef6c:	429e      	cmp	r6, r3
 800ef6e:	4682      	mov	sl, r0
 800ef70:	460c      	mov	r4, r1
 800ef72:	4690      	mov	r8, r2
 800ef74:	4699      	mov	r9, r3
 800ef76:	d837      	bhi.n	800efe8 <__ssputs_r+0x82>
 800ef78:	898a      	ldrh	r2, [r1, #12]
 800ef7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef7e:	d031      	beq.n	800efe4 <__ssputs_r+0x7e>
 800ef80:	6825      	ldr	r5, [r4, #0]
 800ef82:	6909      	ldr	r1, [r1, #16]
 800ef84:	1a6f      	subs	r7, r5, r1
 800ef86:	6965      	ldr	r5, [r4, #20]
 800ef88:	2302      	movs	r3, #2
 800ef8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef8e:	fb95 f5f3 	sdiv	r5, r5, r3
 800ef92:	f109 0301 	add.w	r3, r9, #1
 800ef96:	443b      	add	r3, r7
 800ef98:	429d      	cmp	r5, r3
 800ef9a:	bf38      	it	cc
 800ef9c:	461d      	movcc	r5, r3
 800ef9e:	0553      	lsls	r3, r2, #21
 800efa0:	d530      	bpl.n	800f004 <__ssputs_r+0x9e>
 800efa2:	4629      	mov	r1, r5
 800efa4:	f7fc f8d8 	bl	800b158 <_malloc_r>
 800efa8:	4606      	mov	r6, r0
 800efaa:	b950      	cbnz	r0, 800efc2 <__ssputs_r+0x5c>
 800efac:	230c      	movs	r3, #12
 800efae:	f8ca 3000 	str.w	r3, [sl]
 800efb2:	89a3      	ldrh	r3, [r4, #12]
 800efb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efb8:	81a3      	strh	r3, [r4, #12]
 800efba:	f04f 30ff 	mov.w	r0, #4294967295
 800efbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efc2:	463a      	mov	r2, r7
 800efc4:	6921      	ldr	r1, [r4, #16]
 800efc6:	f7ff fbb5 	bl	800e734 <memcpy>
 800efca:	89a3      	ldrh	r3, [r4, #12]
 800efcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800efd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efd4:	81a3      	strh	r3, [r4, #12]
 800efd6:	6126      	str	r6, [r4, #16]
 800efd8:	6165      	str	r5, [r4, #20]
 800efda:	443e      	add	r6, r7
 800efdc:	1bed      	subs	r5, r5, r7
 800efde:	6026      	str	r6, [r4, #0]
 800efe0:	60a5      	str	r5, [r4, #8]
 800efe2:	464e      	mov	r6, r9
 800efe4:	454e      	cmp	r6, r9
 800efe6:	d900      	bls.n	800efea <__ssputs_r+0x84>
 800efe8:	464e      	mov	r6, r9
 800efea:	4632      	mov	r2, r6
 800efec:	4641      	mov	r1, r8
 800efee:	6820      	ldr	r0, [r4, #0]
 800eff0:	f000 fe9a 	bl	800fd28 <memmove>
 800eff4:	68a3      	ldr	r3, [r4, #8]
 800eff6:	1b9b      	subs	r3, r3, r6
 800eff8:	60a3      	str	r3, [r4, #8]
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	441e      	add	r6, r3
 800effe:	6026      	str	r6, [r4, #0]
 800f000:	2000      	movs	r0, #0
 800f002:	e7dc      	b.n	800efbe <__ssputs_r+0x58>
 800f004:	462a      	mov	r2, r5
 800f006:	f000 fea8 	bl	800fd5a <_realloc_r>
 800f00a:	4606      	mov	r6, r0
 800f00c:	2800      	cmp	r0, #0
 800f00e:	d1e2      	bne.n	800efd6 <__ssputs_r+0x70>
 800f010:	6921      	ldr	r1, [r4, #16]
 800f012:	4650      	mov	r0, sl
 800f014:	f7fc f852 	bl	800b0bc <_free_r>
 800f018:	e7c8      	b.n	800efac <__ssputs_r+0x46>
	...

0800f01c <_svfiprintf_r>:
 800f01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f020:	461d      	mov	r5, r3
 800f022:	898b      	ldrh	r3, [r1, #12]
 800f024:	061f      	lsls	r7, r3, #24
 800f026:	b09d      	sub	sp, #116	; 0x74
 800f028:	4680      	mov	r8, r0
 800f02a:	460c      	mov	r4, r1
 800f02c:	4616      	mov	r6, r2
 800f02e:	d50f      	bpl.n	800f050 <_svfiprintf_r+0x34>
 800f030:	690b      	ldr	r3, [r1, #16]
 800f032:	b96b      	cbnz	r3, 800f050 <_svfiprintf_r+0x34>
 800f034:	2140      	movs	r1, #64	; 0x40
 800f036:	f7fc f88f 	bl	800b158 <_malloc_r>
 800f03a:	6020      	str	r0, [r4, #0]
 800f03c:	6120      	str	r0, [r4, #16]
 800f03e:	b928      	cbnz	r0, 800f04c <_svfiprintf_r+0x30>
 800f040:	230c      	movs	r3, #12
 800f042:	f8c8 3000 	str.w	r3, [r8]
 800f046:	f04f 30ff 	mov.w	r0, #4294967295
 800f04a:	e0c8      	b.n	800f1de <_svfiprintf_r+0x1c2>
 800f04c:	2340      	movs	r3, #64	; 0x40
 800f04e:	6163      	str	r3, [r4, #20]
 800f050:	2300      	movs	r3, #0
 800f052:	9309      	str	r3, [sp, #36]	; 0x24
 800f054:	2320      	movs	r3, #32
 800f056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f05a:	2330      	movs	r3, #48	; 0x30
 800f05c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f060:	9503      	str	r5, [sp, #12]
 800f062:	f04f 0b01 	mov.w	fp, #1
 800f066:	4637      	mov	r7, r6
 800f068:	463d      	mov	r5, r7
 800f06a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f06e:	b10b      	cbz	r3, 800f074 <_svfiprintf_r+0x58>
 800f070:	2b25      	cmp	r3, #37	; 0x25
 800f072:	d13e      	bne.n	800f0f2 <_svfiprintf_r+0xd6>
 800f074:	ebb7 0a06 	subs.w	sl, r7, r6
 800f078:	d00b      	beq.n	800f092 <_svfiprintf_r+0x76>
 800f07a:	4653      	mov	r3, sl
 800f07c:	4632      	mov	r2, r6
 800f07e:	4621      	mov	r1, r4
 800f080:	4640      	mov	r0, r8
 800f082:	f7ff ff70 	bl	800ef66 <__ssputs_r>
 800f086:	3001      	adds	r0, #1
 800f088:	f000 80a4 	beq.w	800f1d4 <_svfiprintf_r+0x1b8>
 800f08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f08e:	4453      	add	r3, sl
 800f090:	9309      	str	r3, [sp, #36]	; 0x24
 800f092:	783b      	ldrb	r3, [r7, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	f000 809d 	beq.w	800f1d4 <_svfiprintf_r+0x1b8>
 800f09a:	2300      	movs	r3, #0
 800f09c:	f04f 32ff 	mov.w	r2, #4294967295
 800f0a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0a4:	9304      	str	r3, [sp, #16]
 800f0a6:	9307      	str	r3, [sp, #28]
 800f0a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0ac:	931a      	str	r3, [sp, #104]	; 0x68
 800f0ae:	462f      	mov	r7, r5
 800f0b0:	2205      	movs	r2, #5
 800f0b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f0b6:	4850      	ldr	r0, [pc, #320]	; (800f1f8 <_svfiprintf_r+0x1dc>)
 800f0b8:	f7f1 f89a 	bl	80001f0 <memchr>
 800f0bc:	9b04      	ldr	r3, [sp, #16]
 800f0be:	b9d0      	cbnz	r0, 800f0f6 <_svfiprintf_r+0xda>
 800f0c0:	06d9      	lsls	r1, r3, #27
 800f0c2:	bf44      	itt	mi
 800f0c4:	2220      	movmi	r2, #32
 800f0c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f0ca:	071a      	lsls	r2, r3, #28
 800f0cc:	bf44      	itt	mi
 800f0ce:	222b      	movmi	r2, #43	; 0x2b
 800f0d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f0d4:	782a      	ldrb	r2, [r5, #0]
 800f0d6:	2a2a      	cmp	r2, #42	; 0x2a
 800f0d8:	d015      	beq.n	800f106 <_svfiprintf_r+0xea>
 800f0da:	9a07      	ldr	r2, [sp, #28]
 800f0dc:	462f      	mov	r7, r5
 800f0de:	2000      	movs	r0, #0
 800f0e0:	250a      	movs	r5, #10
 800f0e2:	4639      	mov	r1, r7
 800f0e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0e8:	3b30      	subs	r3, #48	; 0x30
 800f0ea:	2b09      	cmp	r3, #9
 800f0ec:	d94d      	bls.n	800f18a <_svfiprintf_r+0x16e>
 800f0ee:	b1b8      	cbz	r0, 800f120 <_svfiprintf_r+0x104>
 800f0f0:	e00f      	b.n	800f112 <_svfiprintf_r+0xf6>
 800f0f2:	462f      	mov	r7, r5
 800f0f4:	e7b8      	b.n	800f068 <_svfiprintf_r+0x4c>
 800f0f6:	4a40      	ldr	r2, [pc, #256]	; (800f1f8 <_svfiprintf_r+0x1dc>)
 800f0f8:	1a80      	subs	r0, r0, r2
 800f0fa:	fa0b f000 	lsl.w	r0, fp, r0
 800f0fe:	4318      	orrs	r0, r3
 800f100:	9004      	str	r0, [sp, #16]
 800f102:	463d      	mov	r5, r7
 800f104:	e7d3      	b.n	800f0ae <_svfiprintf_r+0x92>
 800f106:	9a03      	ldr	r2, [sp, #12]
 800f108:	1d11      	adds	r1, r2, #4
 800f10a:	6812      	ldr	r2, [r2, #0]
 800f10c:	9103      	str	r1, [sp, #12]
 800f10e:	2a00      	cmp	r2, #0
 800f110:	db01      	blt.n	800f116 <_svfiprintf_r+0xfa>
 800f112:	9207      	str	r2, [sp, #28]
 800f114:	e004      	b.n	800f120 <_svfiprintf_r+0x104>
 800f116:	4252      	negs	r2, r2
 800f118:	f043 0302 	orr.w	r3, r3, #2
 800f11c:	9207      	str	r2, [sp, #28]
 800f11e:	9304      	str	r3, [sp, #16]
 800f120:	783b      	ldrb	r3, [r7, #0]
 800f122:	2b2e      	cmp	r3, #46	; 0x2e
 800f124:	d10c      	bne.n	800f140 <_svfiprintf_r+0x124>
 800f126:	787b      	ldrb	r3, [r7, #1]
 800f128:	2b2a      	cmp	r3, #42	; 0x2a
 800f12a:	d133      	bne.n	800f194 <_svfiprintf_r+0x178>
 800f12c:	9b03      	ldr	r3, [sp, #12]
 800f12e:	1d1a      	adds	r2, r3, #4
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	9203      	str	r2, [sp, #12]
 800f134:	2b00      	cmp	r3, #0
 800f136:	bfb8      	it	lt
 800f138:	f04f 33ff 	movlt.w	r3, #4294967295
 800f13c:	3702      	adds	r7, #2
 800f13e:	9305      	str	r3, [sp, #20]
 800f140:	4d2e      	ldr	r5, [pc, #184]	; (800f1fc <_svfiprintf_r+0x1e0>)
 800f142:	7839      	ldrb	r1, [r7, #0]
 800f144:	2203      	movs	r2, #3
 800f146:	4628      	mov	r0, r5
 800f148:	f7f1 f852 	bl	80001f0 <memchr>
 800f14c:	b138      	cbz	r0, 800f15e <_svfiprintf_r+0x142>
 800f14e:	2340      	movs	r3, #64	; 0x40
 800f150:	1b40      	subs	r0, r0, r5
 800f152:	fa03 f000 	lsl.w	r0, r3, r0
 800f156:	9b04      	ldr	r3, [sp, #16]
 800f158:	4303      	orrs	r3, r0
 800f15a:	3701      	adds	r7, #1
 800f15c:	9304      	str	r3, [sp, #16]
 800f15e:	7839      	ldrb	r1, [r7, #0]
 800f160:	4827      	ldr	r0, [pc, #156]	; (800f200 <_svfiprintf_r+0x1e4>)
 800f162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f166:	2206      	movs	r2, #6
 800f168:	1c7e      	adds	r6, r7, #1
 800f16a:	f7f1 f841 	bl	80001f0 <memchr>
 800f16e:	2800      	cmp	r0, #0
 800f170:	d038      	beq.n	800f1e4 <_svfiprintf_r+0x1c8>
 800f172:	4b24      	ldr	r3, [pc, #144]	; (800f204 <_svfiprintf_r+0x1e8>)
 800f174:	bb13      	cbnz	r3, 800f1bc <_svfiprintf_r+0x1a0>
 800f176:	9b03      	ldr	r3, [sp, #12]
 800f178:	3307      	adds	r3, #7
 800f17a:	f023 0307 	bic.w	r3, r3, #7
 800f17e:	3308      	adds	r3, #8
 800f180:	9303      	str	r3, [sp, #12]
 800f182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f184:	444b      	add	r3, r9
 800f186:	9309      	str	r3, [sp, #36]	; 0x24
 800f188:	e76d      	b.n	800f066 <_svfiprintf_r+0x4a>
 800f18a:	fb05 3202 	mla	r2, r5, r2, r3
 800f18e:	2001      	movs	r0, #1
 800f190:	460f      	mov	r7, r1
 800f192:	e7a6      	b.n	800f0e2 <_svfiprintf_r+0xc6>
 800f194:	2300      	movs	r3, #0
 800f196:	3701      	adds	r7, #1
 800f198:	9305      	str	r3, [sp, #20]
 800f19a:	4619      	mov	r1, r3
 800f19c:	250a      	movs	r5, #10
 800f19e:	4638      	mov	r0, r7
 800f1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1a4:	3a30      	subs	r2, #48	; 0x30
 800f1a6:	2a09      	cmp	r2, #9
 800f1a8:	d903      	bls.n	800f1b2 <_svfiprintf_r+0x196>
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d0c8      	beq.n	800f140 <_svfiprintf_r+0x124>
 800f1ae:	9105      	str	r1, [sp, #20]
 800f1b0:	e7c6      	b.n	800f140 <_svfiprintf_r+0x124>
 800f1b2:	fb05 2101 	mla	r1, r5, r1, r2
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	4607      	mov	r7, r0
 800f1ba:	e7f0      	b.n	800f19e <_svfiprintf_r+0x182>
 800f1bc:	ab03      	add	r3, sp, #12
 800f1be:	9300      	str	r3, [sp, #0]
 800f1c0:	4622      	mov	r2, r4
 800f1c2:	4b11      	ldr	r3, [pc, #68]	; (800f208 <_svfiprintf_r+0x1ec>)
 800f1c4:	a904      	add	r1, sp, #16
 800f1c6:	4640      	mov	r0, r8
 800f1c8:	f7fc f8b4 	bl	800b334 <_printf_float>
 800f1cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f1d0:	4681      	mov	r9, r0
 800f1d2:	d1d6      	bne.n	800f182 <_svfiprintf_r+0x166>
 800f1d4:	89a3      	ldrh	r3, [r4, #12]
 800f1d6:	065b      	lsls	r3, r3, #25
 800f1d8:	f53f af35 	bmi.w	800f046 <_svfiprintf_r+0x2a>
 800f1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1de:	b01d      	add	sp, #116	; 0x74
 800f1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e4:	ab03      	add	r3, sp, #12
 800f1e6:	9300      	str	r3, [sp, #0]
 800f1e8:	4622      	mov	r2, r4
 800f1ea:	4b07      	ldr	r3, [pc, #28]	; (800f208 <_svfiprintf_r+0x1ec>)
 800f1ec:	a904      	add	r1, sp, #16
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	f7fc fb56 	bl	800b8a0 <_printf_i>
 800f1f4:	e7ea      	b.n	800f1cc <_svfiprintf_r+0x1b0>
 800f1f6:	bf00      	nop
 800f1f8:	08012d44 	.word	0x08012d44
 800f1fc:	08012d4a 	.word	0x08012d4a
 800f200:	08012d4e 	.word	0x08012d4e
 800f204:	0800b335 	.word	0x0800b335
 800f208:	0800ef67 	.word	0x0800ef67

0800f20c <_sungetc_r>:
 800f20c:	b538      	push	{r3, r4, r5, lr}
 800f20e:	1c4b      	adds	r3, r1, #1
 800f210:	4614      	mov	r4, r2
 800f212:	d103      	bne.n	800f21c <_sungetc_r+0x10>
 800f214:	f04f 35ff 	mov.w	r5, #4294967295
 800f218:	4628      	mov	r0, r5
 800f21a:	bd38      	pop	{r3, r4, r5, pc}
 800f21c:	8993      	ldrh	r3, [r2, #12]
 800f21e:	f023 0320 	bic.w	r3, r3, #32
 800f222:	8193      	strh	r3, [r2, #12]
 800f224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f226:	6852      	ldr	r2, [r2, #4]
 800f228:	b2cd      	uxtb	r5, r1
 800f22a:	b18b      	cbz	r3, 800f250 <_sungetc_r+0x44>
 800f22c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f22e:	4293      	cmp	r3, r2
 800f230:	dd08      	ble.n	800f244 <_sungetc_r+0x38>
 800f232:	6823      	ldr	r3, [r4, #0]
 800f234:	1e5a      	subs	r2, r3, #1
 800f236:	6022      	str	r2, [r4, #0]
 800f238:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f23c:	6863      	ldr	r3, [r4, #4]
 800f23e:	3301      	adds	r3, #1
 800f240:	6063      	str	r3, [r4, #4]
 800f242:	e7e9      	b.n	800f218 <_sungetc_r+0xc>
 800f244:	4621      	mov	r1, r4
 800f246:	f000 fd05 	bl	800fc54 <__submore>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d0f1      	beq.n	800f232 <_sungetc_r+0x26>
 800f24e:	e7e1      	b.n	800f214 <_sungetc_r+0x8>
 800f250:	6921      	ldr	r1, [r4, #16]
 800f252:	6823      	ldr	r3, [r4, #0]
 800f254:	b151      	cbz	r1, 800f26c <_sungetc_r+0x60>
 800f256:	4299      	cmp	r1, r3
 800f258:	d208      	bcs.n	800f26c <_sungetc_r+0x60>
 800f25a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f25e:	42a9      	cmp	r1, r5
 800f260:	d104      	bne.n	800f26c <_sungetc_r+0x60>
 800f262:	3b01      	subs	r3, #1
 800f264:	3201      	adds	r2, #1
 800f266:	6023      	str	r3, [r4, #0]
 800f268:	6062      	str	r2, [r4, #4]
 800f26a:	e7d5      	b.n	800f218 <_sungetc_r+0xc>
 800f26c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f274:	6363      	str	r3, [r4, #52]	; 0x34
 800f276:	2303      	movs	r3, #3
 800f278:	63a3      	str	r3, [r4, #56]	; 0x38
 800f27a:	4623      	mov	r3, r4
 800f27c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f280:	6023      	str	r3, [r4, #0]
 800f282:	2301      	movs	r3, #1
 800f284:	e7dc      	b.n	800f240 <_sungetc_r+0x34>

0800f286 <__ssrefill_r>:
 800f286:	b510      	push	{r4, lr}
 800f288:	460c      	mov	r4, r1
 800f28a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f28c:	b169      	cbz	r1, 800f2aa <__ssrefill_r+0x24>
 800f28e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f292:	4299      	cmp	r1, r3
 800f294:	d001      	beq.n	800f29a <__ssrefill_r+0x14>
 800f296:	f7fb ff11 	bl	800b0bc <_free_r>
 800f29a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f29c:	6063      	str	r3, [r4, #4]
 800f29e:	2000      	movs	r0, #0
 800f2a0:	6360      	str	r0, [r4, #52]	; 0x34
 800f2a2:	b113      	cbz	r3, 800f2aa <__ssrefill_r+0x24>
 800f2a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f2a6:	6023      	str	r3, [r4, #0]
 800f2a8:	bd10      	pop	{r4, pc}
 800f2aa:	6923      	ldr	r3, [r4, #16]
 800f2ac:	6023      	str	r3, [r4, #0]
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	6063      	str	r3, [r4, #4]
 800f2b2:	89a3      	ldrh	r3, [r4, #12]
 800f2b4:	f043 0320 	orr.w	r3, r3, #32
 800f2b8:	81a3      	strh	r3, [r4, #12]
 800f2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f2be:	e7f3      	b.n	800f2a8 <__ssrefill_r+0x22>

0800f2c0 <__ssvfiscanf_r>:
 800f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800f2c8:	460c      	mov	r4, r1
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	9144      	str	r1, [sp, #272]	; 0x110
 800f2ce:	9145      	str	r1, [sp, #276]	; 0x114
 800f2d0:	499f      	ldr	r1, [pc, #636]	; (800f550 <__ssvfiscanf_r+0x290>)
 800f2d2:	91a0      	str	r1, [sp, #640]	; 0x280
 800f2d4:	f10d 0804 	add.w	r8, sp, #4
 800f2d8:	499e      	ldr	r1, [pc, #632]	; (800f554 <__ssvfiscanf_r+0x294>)
 800f2da:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800f558 <__ssvfiscanf_r+0x298>
 800f2de:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f2e2:	4606      	mov	r6, r0
 800f2e4:	4692      	mov	sl, r2
 800f2e6:	91a1      	str	r1, [sp, #644]	; 0x284
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	270a      	movs	r7, #10
 800f2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f000 812a 	beq.w	800f54a <__ssvfiscanf_r+0x28a>
 800f2f6:	4655      	mov	r5, sl
 800f2f8:	f7ff f976 	bl	800e5e8 <__locale_ctype_ptr>
 800f2fc:	f815 bb01 	ldrb.w	fp, [r5], #1
 800f300:	4458      	add	r0, fp
 800f302:	7843      	ldrb	r3, [r0, #1]
 800f304:	f013 0308 	ands.w	r3, r3, #8
 800f308:	d01c      	beq.n	800f344 <__ssvfiscanf_r+0x84>
 800f30a:	6863      	ldr	r3, [r4, #4]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	dd12      	ble.n	800f336 <__ssvfiscanf_r+0x76>
 800f310:	f7ff f96a 	bl	800e5e8 <__locale_ctype_ptr>
 800f314:	6823      	ldr	r3, [r4, #0]
 800f316:	781a      	ldrb	r2, [r3, #0]
 800f318:	4410      	add	r0, r2
 800f31a:	7842      	ldrb	r2, [r0, #1]
 800f31c:	0712      	lsls	r2, r2, #28
 800f31e:	d401      	bmi.n	800f324 <__ssvfiscanf_r+0x64>
 800f320:	46aa      	mov	sl, r5
 800f322:	e7e3      	b.n	800f2ec <__ssvfiscanf_r+0x2c>
 800f324:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f326:	3201      	adds	r2, #1
 800f328:	9245      	str	r2, [sp, #276]	; 0x114
 800f32a:	6862      	ldr	r2, [r4, #4]
 800f32c:	3301      	adds	r3, #1
 800f32e:	3a01      	subs	r2, #1
 800f330:	6062      	str	r2, [r4, #4]
 800f332:	6023      	str	r3, [r4, #0]
 800f334:	e7e9      	b.n	800f30a <__ssvfiscanf_r+0x4a>
 800f336:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f338:	4621      	mov	r1, r4
 800f33a:	4630      	mov	r0, r6
 800f33c:	4798      	blx	r3
 800f33e:	2800      	cmp	r0, #0
 800f340:	d0e6      	beq.n	800f310 <__ssvfiscanf_r+0x50>
 800f342:	e7ed      	b.n	800f320 <__ssvfiscanf_r+0x60>
 800f344:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800f348:	f040 8082 	bne.w	800f450 <__ssvfiscanf_r+0x190>
 800f34c:	9343      	str	r3, [sp, #268]	; 0x10c
 800f34e:	9341      	str	r3, [sp, #260]	; 0x104
 800f350:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800f354:	2b2a      	cmp	r3, #42	; 0x2a
 800f356:	d103      	bne.n	800f360 <__ssvfiscanf_r+0xa0>
 800f358:	2310      	movs	r3, #16
 800f35a:	9341      	str	r3, [sp, #260]	; 0x104
 800f35c:	f10a 0502 	add.w	r5, sl, #2
 800f360:	46aa      	mov	sl, r5
 800f362:	f815 1b01 	ldrb.w	r1, [r5], #1
 800f366:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f36a:	2a09      	cmp	r2, #9
 800f36c:	d922      	bls.n	800f3b4 <__ssvfiscanf_r+0xf4>
 800f36e:	2203      	movs	r2, #3
 800f370:	4879      	ldr	r0, [pc, #484]	; (800f558 <__ssvfiscanf_r+0x298>)
 800f372:	f7f0 ff3d 	bl	80001f0 <memchr>
 800f376:	b138      	cbz	r0, 800f388 <__ssvfiscanf_r+0xc8>
 800f378:	eba0 0309 	sub.w	r3, r0, r9
 800f37c:	2001      	movs	r0, #1
 800f37e:	4098      	lsls	r0, r3
 800f380:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f382:	4318      	orrs	r0, r3
 800f384:	9041      	str	r0, [sp, #260]	; 0x104
 800f386:	46aa      	mov	sl, r5
 800f388:	f89a 3000 	ldrb.w	r3, [sl]
 800f38c:	2b67      	cmp	r3, #103	; 0x67
 800f38e:	f10a 0501 	add.w	r5, sl, #1
 800f392:	d82b      	bhi.n	800f3ec <__ssvfiscanf_r+0x12c>
 800f394:	2b65      	cmp	r3, #101	; 0x65
 800f396:	f080 809f 	bcs.w	800f4d8 <__ssvfiscanf_r+0x218>
 800f39a:	2b47      	cmp	r3, #71	; 0x47
 800f39c:	d810      	bhi.n	800f3c0 <__ssvfiscanf_r+0x100>
 800f39e:	2b45      	cmp	r3, #69	; 0x45
 800f3a0:	f080 809a 	bcs.w	800f4d8 <__ssvfiscanf_r+0x218>
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d06c      	beq.n	800f482 <__ssvfiscanf_r+0x1c2>
 800f3a8:	2b25      	cmp	r3, #37	; 0x25
 800f3aa:	d051      	beq.n	800f450 <__ssvfiscanf_r+0x190>
 800f3ac:	2303      	movs	r3, #3
 800f3ae:	9347      	str	r3, [sp, #284]	; 0x11c
 800f3b0:	9742      	str	r7, [sp, #264]	; 0x108
 800f3b2:	e027      	b.n	800f404 <__ssvfiscanf_r+0x144>
 800f3b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f3b6:	fb07 1303 	mla	r3, r7, r3, r1
 800f3ba:	3b30      	subs	r3, #48	; 0x30
 800f3bc:	9343      	str	r3, [sp, #268]	; 0x10c
 800f3be:	e7cf      	b.n	800f360 <__ssvfiscanf_r+0xa0>
 800f3c0:	2b5b      	cmp	r3, #91	; 0x5b
 800f3c2:	d06a      	beq.n	800f49a <__ssvfiscanf_r+0x1da>
 800f3c4:	d80c      	bhi.n	800f3e0 <__ssvfiscanf_r+0x120>
 800f3c6:	2b58      	cmp	r3, #88	; 0x58
 800f3c8:	d1f0      	bne.n	800f3ac <__ssvfiscanf_r+0xec>
 800f3ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f3cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3d0:	9241      	str	r2, [sp, #260]	; 0x104
 800f3d2:	2210      	movs	r2, #16
 800f3d4:	9242      	str	r2, [sp, #264]	; 0x108
 800f3d6:	2b6e      	cmp	r3, #110	; 0x6e
 800f3d8:	bf8c      	ite	hi
 800f3da:	2304      	movhi	r3, #4
 800f3dc:	2303      	movls	r3, #3
 800f3de:	e010      	b.n	800f402 <__ssvfiscanf_r+0x142>
 800f3e0:	2b63      	cmp	r3, #99	; 0x63
 800f3e2:	d065      	beq.n	800f4b0 <__ssvfiscanf_r+0x1f0>
 800f3e4:	2b64      	cmp	r3, #100	; 0x64
 800f3e6:	d1e1      	bne.n	800f3ac <__ssvfiscanf_r+0xec>
 800f3e8:	9742      	str	r7, [sp, #264]	; 0x108
 800f3ea:	e7f4      	b.n	800f3d6 <__ssvfiscanf_r+0x116>
 800f3ec:	2b70      	cmp	r3, #112	; 0x70
 800f3ee:	d04b      	beq.n	800f488 <__ssvfiscanf_r+0x1c8>
 800f3f0:	d826      	bhi.n	800f440 <__ssvfiscanf_r+0x180>
 800f3f2:	2b6e      	cmp	r3, #110	; 0x6e
 800f3f4:	d062      	beq.n	800f4bc <__ssvfiscanf_r+0x1fc>
 800f3f6:	d84c      	bhi.n	800f492 <__ssvfiscanf_r+0x1d2>
 800f3f8:	2b69      	cmp	r3, #105	; 0x69
 800f3fa:	d1d7      	bne.n	800f3ac <__ssvfiscanf_r+0xec>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	9342      	str	r3, [sp, #264]	; 0x108
 800f400:	2303      	movs	r3, #3
 800f402:	9347      	str	r3, [sp, #284]	; 0x11c
 800f404:	6863      	ldr	r3, [r4, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	dd68      	ble.n	800f4dc <__ssvfiscanf_r+0x21c>
 800f40a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f40c:	0659      	lsls	r1, r3, #25
 800f40e:	d407      	bmi.n	800f420 <__ssvfiscanf_r+0x160>
 800f410:	f7ff f8ea 	bl	800e5e8 <__locale_ctype_ptr>
 800f414:	6823      	ldr	r3, [r4, #0]
 800f416:	781a      	ldrb	r2, [r3, #0]
 800f418:	4410      	add	r0, r2
 800f41a:	7842      	ldrb	r2, [r0, #1]
 800f41c:	0712      	lsls	r2, r2, #28
 800f41e:	d464      	bmi.n	800f4ea <__ssvfiscanf_r+0x22a>
 800f420:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f422:	2b02      	cmp	r3, #2
 800f424:	dc73      	bgt.n	800f50e <__ssvfiscanf_r+0x24e>
 800f426:	466b      	mov	r3, sp
 800f428:	4622      	mov	r2, r4
 800f42a:	a941      	add	r1, sp, #260	; 0x104
 800f42c:	4630      	mov	r0, r6
 800f42e:	f000 f9d7 	bl	800f7e0 <_scanf_chars>
 800f432:	2801      	cmp	r0, #1
 800f434:	f000 8089 	beq.w	800f54a <__ssvfiscanf_r+0x28a>
 800f438:	2802      	cmp	r0, #2
 800f43a:	f47f af71 	bne.w	800f320 <__ssvfiscanf_r+0x60>
 800f43e:	e01d      	b.n	800f47c <__ssvfiscanf_r+0x1bc>
 800f440:	2b75      	cmp	r3, #117	; 0x75
 800f442:	d0d1      	beq.n	800f3e8 <__ssvfiscanf_r+0x128>
 800f444:	2b78      	cmp	r3, #120	; 0x78
 800f446:	d0c0      	beq.n	800f3ca <__ssvfiscanf_r+0x10a>
 800f448:	2b73      	cmp	r3, #115	; 0x73
 800f44a:	d1af      	bne.n	800f3ac <__ssvfiscanf_r+0xec>
 800f44c:	2302      	movs	r3, #2
 800f44e:	e7d8      	b.n	800f402 <__ssvfiscanf_r+0x142>
 800f450:	6863      	ldr	r3, [r4, #4]
 800f452:	2b00      	cmp	r3, #0
 800f454:	dd0c      	ble.n	800f470 <__ssvfiscanf_r+0x1b0>
 800f456:	6823      	ldr	r3, [r4, #0]
 800f458:	781a      	ldrb	r2, [r3, #0]
 800f45a:	455a      	cmp	r2, fp
 800f45c:	d175      	bne.n	800f54a <__ssvfiscanf_r+0x28a>
 800f45e:	3301      	adds	r3, #1
 800f460:	6862      	ldr	r2, [r4, #4]
 800f462:	6023      	str	r3, [r4, #0]
 800f464:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f466:	3a01      	subs	r2, #1
 800f468:	3301      	adds	r3, #1
 800f46a:	6062      	str	r2, [r4, #4]
 800f46c:	9345      	str	r3, [sp, #276]	; 0x114
 800f46e:	e757      	b.n	800f320 <__ssvfiscanf_r+0x60>
 800f470:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f472:	4621      	mov	r1, r4
 800f474:	4630      	mov	r0, r6
 800f476:	4798      	blx	r3
 800f478:	2800      	cmp	r0, #0
 800f47a:	d0ec      	beq.n	800f456 <__ssvfiscanf_r+0x196>
 800f47c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f47e:	2800      	cmp	r0, #0
 800f480:	d159      	bne.n	800f536 <__ssvfiscanf_r+0x276>
 800f482:	f04f 30ff 	mov.w	r0, #4294967295
 800f486:	e05c      	b.n	800f542 <__ssvfiscanf_r+0x282>
 800f488:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f48a:	f042 0220 	orr.w	r2, r2, #32
 800f48e:	9241      	str	r2, [sp, #260]	; 0x104
 800f490:	e79b      	b.n	800f3ca <__ssvfiscanf_r+0x10a>
 800f492:	2308      	movs	r3, #8
 800f494:	9342      	str	r3, [sp, #264]	; 0x108
 800f496:	2304      	movs	r3, #4
 800f498:	e7b3      	b.n	800f402 <__ssvfiscanf_r+0x142>
 800f49a:	4629      	mov	r1, r5
 800f49c:	4640      	mov	r0, r8
 800f49e:	f000 fb09 	bl	800fab4 <__sccl>
 800f4a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4a8:	9341      	str	r3, [sp, #260]	; 0x104
 800f4aa:	4605      	mov	r5, r0
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	e7a8      	b.n	800f402 <__ssvfiscanf_r+0x142>
 800f4b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4b6:	9341      	str	r3, [sp, #260]	; 0x104
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	e7a2      	b.n	800f402 <__ssvfiscanf_r+0x142>
 800f4bc:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f4be:	06c3      	lsls	r3, r0, #27
 800f4c0:	f53f af2e 	bmi.w	800f320 <__ssvfiscanf_r+0x60>
 800f4c4:	9b00      	ldr	r3, [sp, #0]
 800f4c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f4c8:	1d19      	adds	r1, r3, #4
 800f4ca:	9100      	str	r1, [sp, #0]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	07c0      	lsls	r0, r0, #31
 800f4d0:	bf4c      	ite	mi
 800f4d2:	801a      	strhmi	r2, [r3, #0]
 800f4d4:	601a      	strpl	r2, [r3, #0]
 800f4d6:	e723      	b.n	800f320 <__ssvfiscanf_r+0x60>
 800f4d8:	2305      	movs	r3, #5
 800f4da:	e792      	b.n	800f402 <__ssvfiscanf_r+0x142>
 800f4dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f4de:	4621      	mov	r1, r4
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	4798      	blx	r3
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d090      	beq.n	800f40a <__ssvfiscanf_r+0x14a>
 800f4e8:	e7c8      	b.n	800f47c <__ssvfiscanf_r+0x1bc>
 800f4ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f4ec:	3201      	adds	r2, #1
 800f4ee:	9245      	str	r2, [sp, #276]	; 0x114
 800f4f0:	6862      	ldr	r2, [r4, #4]
 800f4f2:	3a01      	subs	r2, #1
 800f4f4:	2a00      	cmp	r2, #0
 800f4f6:	6062      	str	r2, [r4, #4]
 800f4f8:	dd02      	ble.n	800f500 <__ssvfiscanf_r+0x240>
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	6023      	str	r3, [r4, #0]
 800f4fe:	e787      	b.n	800f410 <__ssvfiscanf_r+0x150>
 800f500:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f502:	4621      	mov	r1, r4
 800f504:	4630      	mov	r0, r6
 800f506:	4798      	blx	r3
 800f508:	2800      	cmp	r0, #0
 800f50a:	d081      	beq.n	800f410 <__ssvfiscanf_r+0x150>
 800f50c:	e7b6      	b.n	800f47c <__ssvfiscanf_r+0x1bc>
 800f50e:	2b04      	cmp	r3, #4
 800f510:	dc06      	bgt.n	800f520 <__ssvfiscanf_r+0x260>
 800f512:	466b      	mov	r3, sp
 800f514:	4622      	mov	r2, r4
 800f516:	a941      	add	r1, sp, #260	; 0x104
 800f518:	4630      	mov	r0, r6
 800f51a:	f000 f9c5 	bl	800f8a8 <_scanf_i>
 800f51e:	e788      	b.n	800f432 <__ssvfiscanf_r+0x172>
 800f520:	4b0e      	ldr	r3, [pc, #56]	; (800f55c <__ssvfiscanf_r+0x29c>)
 800f522:	2b00      	cmp	r3, #0
 800f524:	f43f aefc 	beq.w	800f320 <__ssvfiscanf_r+0x60>
 800f528:	466b      	mov	r3, sp
 800f52a:	4622      	mov	r2, r4
 800f52c:	a941      	add	r1, sp, #260	; 0x104
 800f52e:	4630      	mov	r0, r6
 800f530:	f7fc fac8 	bl	800bac4 <_scanf_float>
 800f534:	e77d      	b.n	800f432 <__ssvfiscanf_r+0x172>
 800f536:	89a3      	ldrh	r3, [r4, #12]
 800f538:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f53c:	bf18      	it	ne
 800f53e:	f04f 30ff 	movne.w	r0, #4294967295
 800f542:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800f546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f54c:	e7f9      	b.n	800f542 <__ssvfiscanf_r+0x282>
 800f54e:	bf00      	nop
 800f550:	0800f20d 	.word	0x0800f20d
 800f554:	0800f287 	.word	0x0800f287
 800f558:	08012d4a 	.word	0x08012d4a
 800f55c:	0800bac5 	.word	0x0800bac5

0800f560 <__sfputc_r>:
 800f560:	6893      	ldr	r3, [r2, #8]
 800f562:	3b01      	subs	r3, #1
 800f564:	2b00      	cmp	r3, #0
 800f566:	b410      	push	{r4}
 800f568:	6093      	str	r3, [r2, #8]
 800f56a:	da08      	bge.n	800f57e <__sfputc_r+0x1e>
 800f56c:	6994      	ldr	r4, [r2, #24]
 800f56e:	42a3      	cmp	r3, r4
 800f570:	db01      	blt.n	800f576 <__sfputc_r+0x16>
 800f572:	290a      	cmp	r1, #10
 800f574:	d103      	bne.n	800f57e <__sfputc_r+0x1e>
 800f576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f57a:	f7fd bc6b 	b.w	800ce54 <__swbuf_r>
 800f57e:	6813      	ldr	r3, [r2, #0]
 800f580:	1c58      	adds	r0, r3, #1
 800f582:	6010      	str	r0, [r2, #0]
 800f584:	7019      	strb	r1, [r3, #0]
 800f586:	4608      	mov	r0, r1
 800f588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f58c:	4770      	bx	lr

0800f58e <__sfputs_r>:
 800f58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f590:	4606      	mov	r6, r0
 800f592:	460f      	mov	r7, r1
 800f594:	4614      	mov	r4, r2
 800f596:	18d5      	adds	r5, r2, r3
 800f598:	42ac      	cmp	r4, r5
 800f59a:	d101      	bne.n	800f5a0 <__sfputs_r+0x12>
 800f59c:	2000      	movs	r0, #0
 800f59e:	e007      	b.n	800f5b0 <__sfputs_r+0x22>
 800f5a0:	463a      	mov	r2, r7
 800f5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5a6:	4630      	mov	r0, r6
 800f5a8:	f7ff ffda 	bl	800f560 <__sfputc_r>
 800f5ac:	1c43      	adds	r3, r0, #1
 800f5ae:	d1f3      	bne.n	800f598 <__sfputs_r+0xa>
 800f5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f5b4 <_vfiprintf_r>:
 800f5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b8:	460c      	mov	r4, r1
 800f5ba:	b09d      	sub	sp, #116	; 0x74
 800f5bc:	4617      	mov	r7, r2
 800f5be:	461d      	mov	r5, r3
 800f5c0:	4606      	mov	r6, r0
 800f5c2:	b118      	cbz	r0, 800f5cc <_vfiprintf_r+0x18>
 800f5c4:	6983      	ldr	r3, [r0, #24]
 800f5c6:	b90b      	cbnz	r3, 800f5cc <_vfiprintf_r+0x18>
 800f5c8:	f7fe fc5a 	bl	800de80 <__sinit>
 800f5cc:	4b7c      	ldr	r3, [pc, #496]	; (800f7c0 <_vfiprintf_r+0x20c>)
 800f5ce:	429c      	cmp	r4, r3
 800f5d0:	d158      	bne.n	800f684 <_vfiprintf_r+0xd0>
 800f5d2:	6874      	ldr	r4, [r6, #4]
 800f5d4:	89a3      	ldrh	r3, [r4, #12]
 800f5d6:	0718      	lsls	r0, r3, #28
 800f5d8:	d55e      	bpl.n	800f698 <_vfiprintf_r+0xe4>
 800f5da:	6923      	ldr	r3, [r4, #16]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d05b      	beq.n	800f698 <_vfiprintf_r+0xe4>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800f5e4:	2320      	movs	r3, #32
 800f5e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5ea:	2330      	movs	r3, #48	; 0x30
 800f5ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5f0:	9503      	str	r5, [sp, #12]
 800f5f2:	f04f 0b01 	mov.w	fp, #1
 800f5f6:	46b8      	mov	r8, r7
 800f5f8:	4645      	mov	r5, r8
 800f5fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f5fe:	b10b      	cbz	r3, 800f604 <_vfiprintf_r+0x50>
 800f600:	2b25      	cmp	r3, #37	; 0x25
 800f602:	d154      	bne.n	800f6ae <_vfiprintf_r+0xfa>
 800f604:	ebb8 0a07 	subs.w	sl, r8, r7
 800f608:	d00b      	beq.n	800f622 <_vfiprintf_r+0x6e>
 800f60a:	4653      	mov	r3, sl
 800f60c:	463a      	mov	r2, r7
 800f60e:	4621      	mov	r1, r4
 800f610:	4630      	mov	r0, r6
 800f612:	f7ff ffbc 	bl	800f58e <__sfputs_r>
 800f616:	3001      	adds	r0, #1
 800f618:	f000 80c2 	beq.w	800f7a0 <_vfiprintf_r+0x1ec>
 800f61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f61e:	4453      	add	r3, sl
 800f620:	9309      	str	r3, [sp, #36]	; 0x24
 800f622:	f898 3000 	ldrb.w	r3, [r8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	f000 80ba 	beq.w	800f7a0 <_vfiprintf_r+0x1ec>
 800f62c:	2300      	movs	r3, #0
 800f62e:	f04f 32ff 	mov.w	r2, #4294967295
 800f632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f636:	9304      	str	r3, [sp, #16]
 800f638:	9307      	str	r3, [sp, #28]
 800f63a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f63e:	931a      	str	r3, [sp, #104]	; 0x68
 800f640:	46a8      	mov	r8, r5
 800f642:	2205      	movs	r2, #5
 800f644:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f648:	485e      	ldr	r0, [pc, #376]	; (800f7c4 <_vfiprintf_r+0x210>)
 800f64a:	f7f0 fdd1 	bl	80001f0 <memchr>
 800f64e:	9b04      	ldr	r3, [sp, #16]
 800f650:	bb78      	cbnz	r0, 800f6b2 <_vfiprintf_r+0xfe>
 800f652:	06d9      	lsls	r1, r3, #27
 800f654:	bf44      	itt	mi
 800f656:	2220      	movmi	r2, #32
 800f658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f65c:	071a      	lsls	r2, r3, #28
 800f65e:	bf44      	itt	mi
 800f660:	222b      	movmi	r2, #43	; 0x2b
 800f662:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f666:	782a      	ldrb	r2, [r5, #0]
 800f668:	2a2a      	cmp	r2, #42	; 0x2a
 800f66a:	d02a      	beq.n	800f6c2 <_vfiprintf_r+0x10e>
 800f66c:	9a07      	ldr	r2, [sp, #28]
 800f66e:	46a8      	mov	r8, r5
 800f670:	2000      	movs	r0, #0
 800f672:	250a      	movs	r5, #10
 800f674:	4641      	mov	r1, r8
 800f676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f67a:	3b30      	subs	r3, #48	; 0x30
 800f67c:	2b09      	cmp	r3, #9
 800f67e:	d969      	bls.n	800f754 <_vfiprintf_r+0x1a0>
 800f680:	b360      	cbz	r0, 800f6dc <_vfiprintf_r+0x128>
 800f682:	e024      	b.n	800f6ce <_vfiprintf_r+0x11a>
 800f684:	4b50      	ldr	r3, [pc, #320]	; (800f7c8 <_vfiprintf_r+0x214>)
 800f686:	429c      	cmp	r4, r3
 800f688:	d101      	bne.n	800f68e <_vfiprintf_r+0xda>
 800f68a:	68b4      	ldr	r4, [r6, #8]
 800f68c:	e7a2      	b.n	800f5d4 <_vfiprintf_r+0x20>
 800f68e:	4b4f      	ldr	r3, [pc, #316]	; (800f7cc <_vfiprintf_r+0x218>)
 800f690:	429c      	cmp	r4, r3
 800f692:	bf08      	it	eq
 800f694:	68f4      	ldreq	r4, [r6, #12]
 800f696:	e79d      	b.n	800f5d4 <_vfiprintf_r+0x20>
 800f698:	4621      	mov	r1, r4
 800f69a:	4630      	mov	r0, r6
 800f69c:	f7fd fc3e 	bl	800cf1c <__swsetup_r>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d09d      	beq.n	800f5e0 <_vfiprintf_r+0x2c>
 800f6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a8:	b01d      	add	sp, #116	; 0x74
 800f6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ae:	46a8      	mov	r8, r5
 800f6b0:	e7a2      	b.n	800f5f8 <_vfiprintf_r+0x44>
 800f6b2:	4a44      	ldr	r2, [pc, #272]	; (800f7c4 <_vfiprintf_r+0x210>)
 800f6b4:	1a80      	subs	r0, r0, r2
 800f6b6:	fa0b f000 	lsl.w	r0, fp, r0
 800f6ba:	4318      	orrs	r0, r3
 800f6bc:	9004      	str	r0, [sp, #16]
 800f6be:	4645      	mov	r5, r8
 800f6c0:	e7be      	b.n	800f640 <_vfiprintf_r+0x8c>
 800f6c2:	9a03      	ldr	r2, [sp, #12]
 800f6c4:	1d11      	adds	r1, r2, #4
 800f6c6:	6812      	ldr	r2, [r2, #0]
 800f6c8:	9103      	str	r1, [sp, #12]
 800f6ca:	2a00      	cmp	r2, #0
 800f6cc:	db01      	blt.n	800f6d2 <_vfiprintf_r+0x11e>
 800f6ce:	9207      	str	r2, [sp, #28]
 800f6d0:	e004      	b.n	800f6dc <_vfiprintf_r+0x128>
 800f6d2:	4252      	negs	r2, r2
 800f6d4:	f043 0302 	orr.w	r3, r3, #2
 800f6d8:	9207      	str	r2, [sp, #28]
 800f6da:	9304      	str	r3, [sp, #16]
 800f6dc:	f898 3000 	ldrb.w	r3, [r8]
 800f6e0:	2b2e      	cmp	r3, #46	; 0x2e
 800f6e2:	d10e      	bne.n	800f702 <_vfiprintf_r+0x14e>
 800f6e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f6e8:	2b2a      	cmp	r3, #42	; 0x2a
 800f6ea:	d138      	bne.n	800f75e <_vfiprintf_r+0x1aa>
 800f6ec:	9b03      	ldr	r3, [sp, #12]
 800f6ee:	1d1a      	adds	r2, r3, #4
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	9203      	str	r2, [sp, #12]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	bfb8      	it	lt
 800f6f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6fc:	f108 0802 	add.w	r8, r8, #2
 800f700:	9305      	str	r3, [sp, #20]
 800f702:	4d33      	ldr	r5, [pc, #204]	; (800f7d0 <_vfiprintf_r+0x21c>)
 800f704:	f898 1000 	ldrb.w	r1, [r8]
 800f708:	2203      	movs	r2, #3
 800f70a:	4628      	mov	r0, r5
 800f70c:	f7f0 fd70 	bl	80001f0 <memchr>
 800f710:	b140      	cbz	r0, 800f724 <_vfiprintf_r+0x170>
 800f712:	2340      	movs	r3, #64	; 0x40
 800f714:	1b40      	subs	r0, r0, r5
 800f716:	fa03 f000 	lsl.w	r0, r3, r0
 800f71a:	9b04      	ldr	r3, [sp, #16]
 800f71c:	4303      	orrs	r3, r0
 800f71e:	f108 0801 	add.w	r8, r8, #1
 800f722:	9304      	str	r3, [sp, #16]
 800f724:	f898 1000 	ldrb.w	r1, [r8]
 800f728:	482a      	ldr	r0, [pc, #168]	; (800f7d4 <_vfiprintf_r+0x220>)
 800f72a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f72e:	2206      	movs	r2, #6
 800f730:	f108 0701 	add.w	r7, r8, #1
 800f734:	f7f0 fd5c 	bl	80001f0 <memchr>
 800f738:	2800      	cmp	r0, #0
 800f73a:	d037      	beq.n	800f7ac <_vfiprintf_r+0x1f8>
 800f73c:	4b26      	ldr	r3, [pc, #152]	; (800f7d8 <_vfiprintf_r+0x224>)
 800f73e:	bb1b      	cbnz	r3, 800f788 <_vfiprintf_r+0x1d4>
 800f740:	9b03      	ldr	r3, [sp, #12]
 800f742:	3307      	adds	r3, #7
 800f744:	f023 0307 	bic.w	r3, r3, #7
 800f748:	3308      	adds	r3, #8
 800f74a:	9303      	str	r3, [sp, #12]
 800f74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f74e:	444b      	add	r3, r9
 800f750:	9309      	str	r3, [sp, #36]	; 0x24
 800f752:	e750      	b.n	800f5f6 <_vfiprintf_r+0x42>
 800f754:	fb05 3202 	mla	r2, r5, r2, r3
 800f758:	2001      	movs	r0, #1
 800f75a:	4688      	mov	r8, r1
 800f75c:	e78a      	b.n	800f674 <_vfiprintf_r+0xc0>
 800f75e:	2300      	movs	r3, #0
 800f760:	f108 0801 	add.w	r8, r8, #1
 800f764:	9305      	str	r3, [sp, #20]
 800f766:	4619      	mov	r1, r3
 800f768:	250a      	movs	r5, #10
 800f76a:	4640      	mov	r0, r8
 800f76c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f770:	3a30      	subs	r2, #48	; 0x30
 800f772:	2a09      	cmp	r2, #9
 800f774:	d903      	bls.n	800f77e <_vfiprintf_r+0x1ca>
 800f776:	2b00      	cmp	r3, #0
 800f778:	d0c3      	beq.n	800f702 <_vfiprintf_r+0x14e>
 800f77a:	9105      	str	r1, [sp, #20]
 800f77c:	e7c1      	b.n	800f702 <_vfiprintf_r+0x14e>
 800f77e:	fb05 2101 	mla	r1, r5, r1, r2
 800f782:	2301      	movs	r3, #1
 800f784:	4680      	mov	r8, r0
 800f786:	e7f0      	b.n	800f76a <_vfiprintf_r+0x1b6>
 800f788:	ab03      	add	r3, sp, #12
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	4622      	mov	r2, r4
 800f78e:	4b13      	ldr	r3, [pc, #76]	; (800f7dc <_vfiprintf_r+0x228>)
 800f790:	a904      	add	r1, sp, #16
 800f792:	4630      	mov	r0, r6
 800f794:	f7fb fdce 	bl	800b334 <_printf_float>
 800f798:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f79c:	4681      	mov	r9, r0
 800f79e:	d1d5      	bne.n	800f74c <_vfiprintf_r+0x198>
 800f7a0:	89a3      	ldrh	r3, [r4, #12]
 800f7a2:	065b      	lsls	r3, r3, #25
 800f7a4:	f53f af7e 	bmi.w	800f6a4 <_vfiprintf_r+0xf0>
 800f7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7aa:	e77d      	b.n	800f6a8 <_vfiprintf_r+0xf4>
 800f7ac:	ab03      	add	r3, sp, #12
 800f7ae:	9300      	str	r3, [sp, #0]
 800f7b0:	4622      	mov	r2, r4
 800f7b2:	4b0a      	ldr	r3, [pc, #40]	; (800f7dc <_vfiprintf_r+0x228>)
 800f7b4:	a904      	add	r1, sp, #16
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	f7fc f872 	bl	800b8a0 <_printf_i>
 800f7bc:	e7ec      	b.n	800f798 <_vfiprintf_r+0x1e4>
 800f7be:	bf00      	nop
 800f7c0:	08012bf8 	.word	0x08012bf8
 800f7c4:	08012d44 	.word	0x08012d44
 800f7c8:	08012c18 	.word	0x08012c18
 800f7cc:	08012bd8 	.word	0x08012bd8
 800f7d0:	08012d4a 	.word	0x08012d4a
 800f7d4:	08012d4e 	.word	0x08012d4e
 800f7d8:	0800b335 	.word	0x0800b335
 800f7dc:	0800f58f 	.word	0x0800f58f

0800f7e0 <_scanf_chars>:
 800f7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e4:	4615      	mov	r5, r2
 800f7e6:	688a      	ldr	r2, [r1, #8]
 800f7e8:	4680      	mov	r8, r0
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	b932      	cbnz	r2, 800f7fc <_scanf_chars+0x1c>
 800f7ee:	698a      	ldr	r2, [r1, #24]
 800f7f0:	2a00      	cmp	r2, #0
 800f7f2:	bf14      	ite	ne
 800f7f4:	f04f 32ff 	movne.w	r2, #4294967295
 800f7f8:	2201      	moveq	r2, #1
 800f7fa:	608a      	str	r2, [r1, #8]
 800f7fc:	6822      	ldr	r2, [r4, #0]
 800f7fe:	06d1      	lsls	r1, r2, #27
 800f800:	bf5f      	itttt	pl
 800f802:	681a      	ldrpl	r2, [r3, #0]
 800f804:	1d11      	addpl	r1, r2, #4
 800f806:	6019      	strpl	r1, [r3, #0]
 800f808:	6817      	ldrpl	r7, [r2, #0]
 800f80a:	2600      	movs	r6, #0
 800f80c:	69a3      	ldr	r3, [r4, #24]
 800f80e:	b1db      	cbz	r3, 800f848 <_scanf_chars+0x68>
 800f810:	2b01      	cmp	r3, #1
 800f812:	d107      	bne.n	800f824 <_scanf_chars+0x44>
 800f814:	682b      	ldr	r3, [r5, #0]
 800f816:	6962      	ldr	r2, [r4, #20]
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	5cd3      	ldrb	r3, [r2, r3]
 800f81c:	b9a3      	cbnz	r3, 800f848 <_scanf_chars+0x68>
 800f81e:	2e00      	cmp	r6, #0
 800f820:	d132      	bne.n	800f888 <_scanf_chars+0xa8>
 800f822:	e006      	b.n	800f832 <_scanf_chars+0x52>
 800f824:	2b02      	cmp	r3, #2
 800f826:	d007      	beq.n	800f838 <_scanf_chars+0x58>
 800f828:	2e00      	cmp	r6, #0
 800f82a:	d12d      	bne.n	800f888 <_scanf_chars+0xa8>
 800f82c:	69a3      	ldr	r3, [r4, #24]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d12a      	bne.n	800f888 <_scanf_chars+0xa8>
 800f832:	2001      	movs	r0, #1
 800f834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f838:	f7fe fed6 	bl	800e5e8 <__locale_ctype_ptr>
 800f83c:	682b      	ldr	r3, [r5, #0]
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	4418      	add	r0, r3
 800f842:	7843      	ldrb	r3, [r0, #1]
 800f844:	071b      	lsls	r3, r3, #28
 800f846:	d4ef      	bmi.n	800f828 <_scanf_chars+0x48>
 800f848:	6823      	ldr	r3, [r4, #0]
 800f84a:	06da      	lsls	r2, r3, #27
 800f84c:	bf5e      	ittt	pl
 800f84e:	682b      	ldrpl	r3, [r5, #0]
 800f850:	781b      	ldrbpl	r3, [r3, #0]
 800f852:	703b      	strbpl	r3, [r7, #0]
 800f854:	682a      	ldr	r2, [r5, #0]
 800f856:	686b      	ldr	r3, [r5, #4]
 800f858:	f102 0201 	add.w	r2, r2, #1
 800f85c:	602a      	str	r2, [r5, #0]
 800f85e:	68a2      	ldr	r2, [r4, #8]
 800f860:	f103 33ff 	add.w	r3, r3, #4294967295
 800f864:	f102 32ff 	add.w	r2, r2, #4294967295
 800f868:	606b      	str	r3, [r5, #4]
 800f86a:	f106 0601 	add.w	r6, r6, #1
 800f86e:	bf58      	it	pl
 800f870:	3701      	addpl	r7, #1
 800f872:	60a2      	str	r2, [r4, #8]
 800f874:	b142      	cbz	r2, 800f888 <_scanf_chars+0xa8>
 800f876:	2b00      	cmp	r3, #0
 800f878:	dcc8      	bgt.n	800f80c <_scanf_chars+0x2c>
 800f87a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f87e:	4629      	mov	r1, r5
 800f880:	4640      	mov	r0, r8
 800f882:	4798      	blx	r3
 800f884:	2800      	cmp	r0, #0
 800f886:	d0c1      	beq.n	800f80c <_scanf_chars+0x2c>
 800f888:	6823      	ldr	r3, [r4, #0]
 800f88a:	f013 0310 	ands.w	r3, r3, #16
 800f88e:	d105      	bne.n	800f89c <_scanf_chars+0xbc>
 800f890:	68e2      	ldr	r2, [r4, #12]
 800f892:	3201      	adds	r2, #1
 800f894:	60e2      	str	r2, [r4, #12]
 800f896:	69a2      	ldr	r2, [r4, #24]
 800f898:	b102      	cbz	r2, 800f89c <_scanf_chars+0xbc>
 800f89a:	703b      	strb	r3, [r7, #0]
 800f89c:	6923      	ldr	r3, [r4, #16]
 800f89e:	441e      	add	r6, r3
 800f8a0:	6126      	str	r6, [r4, #16]
 800f8a2:	2000      	movs	r0, #0
 800f8a4:	e7c6      	b.n	800f834 <_scanf_chars+0x54>
	...

0800f8a8 <_scanf_i>:
 800f8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ac:	469a      	mov	sl, r3
 800f8ae:	4b74      	ldr	r3, [pc, #464]	; (800fa80 <_scanf_i+0x1d8>)
 800f8b0:	460c      	mov	r4, r1
 800f8b2:	4683      	mov	fp, r0
 800f8b4:	4616      	mov	r6, r2
 800f8b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f8ba:	b087      	sub	sp, #28
 800f8bc:	ab03      	add	r3, sp, #12
 800f8be:	68a7      	ldr	r7, [r4, #8]
 800f8c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f8c4:	4b6f      	ldr	r3, [pc, #444]	; (800fa84 <_scanf_i+0x1dc>)
 800f8c6:	69a1      	ldr	r1, [r4, #24]
 800f8c8:	4a6f      	ldr	r2, [pc, #444]	; (800fa88 <_scanf_i+0x1e0>)
 800f8ca:	2903      	cmp	r1, #3
 800f8cc:	bf08      	it	eq
 800f8ce:	461a      	moveq	r2, r3
 800f8d0:	1e7b      	subs	r3, r7, #1
 800f8d2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800f8d6:	bf84      	itt	hi
 800f8d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f8dc:	60a3      	strhi	r3, [r4, #8]
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	9200      	str	r2, [sp, #0]
 800f8e2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f8e6:	bf88      	it	hi
 800f8e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f8ec:	f104 091c 	add.w	r9, r4, #28
 800f8f0:	6023      	str	r3, [r4, #0]
 800f8f2:	bf8c      	ite	hi
 800f8f4:	197f      	addhi	r7, r7, r5
 800f8f6:	2700      	movls	r7, #0
 800f8f8:	464b      	mov	r3, r9
 800f8fa:	f04f 0800 	mov.w	r8, #0
 800f8fe:	9301      	str	r3, [sp, #4]
 800f900:	6831      	ldr	r1, [r6, #0]
 800f902:	ab03      	add	r3, sp, #12
 800f904:	2202      	movs	r2, #2
 800f906:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f90a:	7809      	ldrb	r1, [r1, #0]
 800f90c:	f7f0 fc70 	bl	80001f0 <memchr>
 800f910:	9b01      	ldr	r3, [sp, #4]
 800f912:	b330      	cbz	r0, 800f962 <_scanf_i+0xba>
 800f914:	f1b8 0f01 	cmp.w	r8, #1
 800f918:	d15a      	bne.n	800f9d0 <_scanf_i+0x128>
 800f91a:	6862      	ldr	r2, [r4, #4]
 800f91c:	b92a      	cbnz	r2, 800f92a <_scanf_i+0x82>
 800f91e:	6822      	ldr	r2, [r4, #0]
 800f920:	2108      	movs	r1, #8
 800f922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f926:	6061      	str	r1, [r4, #4]
 800f928:	6022      	str	r2, [r4, #0]
 800f92a:	6822      	ldr	r2, [r4, #0]
 800f92c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f930:	6022      	str	r2, [r4, #0]
 800f932:	68a2      	ldr	r2, [r4, #8]
 800f934:	1e51      	subs	r1, r2, #1
 800f936:	60a1      	str	r1, [r4, #8]
 800f938:	b19a      	cbz	r2, 800f962 <_scanf_i+0xba>
 800f93a:	6832      	ldr	r2, [r6, #0]
 800f93c:	1c51      	adds	r1, r2, #1
 800f93e:	6031      	str	r1, [r6, #0]
 800f940:	7812      	ldrb	r2, [r2, #0]
 800f942:	701a      	strb	r2, [r3, #0]
 800f944:	1c5d      	adds	r5, r3, #1
 800f946:	6873      	ldr	r3, [r6, #4]
 800f948:	3b01      	subs	r3, #1
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	6073      	str	r3, [r6, #4]
 800f94e:	dc07      	bgt.n	800f960 <_scanf_i+0xb8>
 800f950:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f954:	4631      	mov	r1, r6
 800f956:	4658      	mov	r0, fp
 800f958:	4798      	blx	r3
 800f95a:	2800      	cmp	r0, #0
 800f95c:	f040 8086 	bne.w	800fa6c <_scanf_i+0x1c4>
 800f960:	462b      	mov	r3, r5
 800f962:	f108 0801 	add.w	r8, r8, #1
 800f966:	f1b8 0f03 	cmp.w	r8, #3
 800f96a:	d1c8      	bne.n	800f8fe <_scanf_i+0x56>
 800f96c:	6862      	ldr	r2, [r4, #4]
 800f96e:	b90a      	cbnz	r2, 800f974 <_scanf_i+0xcc>
 800f970:	220a      	movs	r2, #10
 800f972:	6062      	str	r2, [r4, #4]
 800f974:	6862      	ldr	r2, [r4, #4]
 800f976:	4945      	ldr	r1, [pc, #276]	; (800fa8c <_scanf_i+0x1e4>)
 800f978:	6960      	ldr	r0, [r4, #20]
 800f97a:	9301      	str	r3, [sp, #4]
 800f97c:	1a89      	subs	r1, r1, r2
 800f97e:	f000 f899 	bl	800fab4 <__sccl>
 800f982:	9b01      	ldr	r3, [sp, #4]
 800f984:	f04f 0800 	mov.w	r8, #0
 800f988:	461d      	mov	r5, r3
 800f98a:	68a3      	ldr	r3, [r4, #8]
 800f98c:	6822      	ldr	r2, [r4, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d03a      	beq.n	800fa08 <_scanf_i+0x160>
 800f992:	6831      	ldr	r1, [r6, #0]
 800f994:	6960      	ldr	r0, [r4, #20]
 800f996:	f891 c000 	ldrb.w	ip, [r1]
 800f99a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	d032      	beq.n	800fa08 <_scanf_i+0x160>
 800f9a2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f9a6:	d121      	bne.n	800f9ec <_scanf_i+0x144>
 800f9a8:	0510      	lsls	r0, r2, #20
 800f9aa:	d51f      	bpl.n	800f9ec <_scanf_i+0x144>
 800f9ac:	f108 0801 	add.w	r8, r8, #1
 800f9b0:	b117      	cbz	r7, 800f9b8 <_scanf_i+0x110>
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	3f01      	subs	r7, #1
 800f9b6:	60a3      	str	r3, [r4, #8]
 800f9b8:	6873      	ldr	r3, [r6, #4]
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	6073      	str	r3, [r6, #4]
 800f9c0:	dd1b      	ble.n	800f9fa <_scanf_i+0x152>
 800f9c2:	6833      	ldr	r3, [r6, #0]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	6033      	str	r3, [r6, #0]
 800f9c8:	68a3      	ldr	r3, [r4, #8]
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	60a3      	str	r3, [r4, #8]
 800f9ce:	e7dc      	b.n	800f98a <_scanf_i+0xe2>
 800f9d0:	f1b8 0f02 	cmp.w	r8, #2
 800f9d4:	d1ad      	bne.n	800f932 <_scanf_i+0x8a>
 800f9d6:	6822      	ldr	r2, [r4, #0]
 800f9d8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f9dc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f9e0:	d1bf      	bne.n	800f962 <_scanf_i+0xba>
 800f9e2:	2110      	movs	r1, #16
 800f9e4:	6061      	str	r1, [r4, #4]
 800f9e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f9ea:	e7a1      	b.n	800f930 <_scanf_i+0x88>
 800f9ec:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f9f0:	6022      	str	r2, [r4, #0]
 800f9f2:	780b      	ldrb	r3, [r1, #0]
 800f9f4:	702b      	strb	r3, [r5, #0]
 800f9f6:	3501      	adds	r5, #1
 800f9f8:	e7de      	b.n	800f9b8 <_scanf_i+0x110>
 800f9fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f9fe:	4631      	mov	r1, r6
 800fa00:	4658      	mov	r0, fp
 800fa02:	4798      	blx	r3
 800fa04:	2800      	cmp	r0, #0
 800fa06:	d0df      	beq.n	800f9c8 <_scanf_i+0x120>
 800fa08:	6823      	ldr	r3, [r4, #0]
 800fa0a:	05d9      	lsls	r1, r3, #23
 800fa0c:	d50c      	bpl.n	800fa28 <_scanf_i+0x180>
 800fa0e:	454d      	cmp	r5, r9
 800fa10:	d908      	bls.n	800fa24 <_scanf_i+0x17c>
 800fa12:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fa16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fa1a:	4632      	mov	r2, r6
 800fa1c:	4658      	mov	r0, fp
 800fa1e:	4798      	blx	r3
 800fa20:	1e6f      	subs	r7, r5, #1
 800fa22:	463d      	mov	r5, r7
 800fa24:	454d      	cmp	r5, r9
 800fa26:	d029      	beq.n	800fa7c <_scanf_i+0x1d4>
 800fa28:	6822      	ldr	r2, [r4, #0]
 800fa2a:	f012 0210 	ands.w	r2, r2, #16
 800fa2e:	d113      	bne.n	800fa58 <_scanf_i+0x1b0>
 800fa30:	702a      	strb	r2, [r5, #0]
 800fa32:	6863      	ldr	r3, [r4, #4]
 800fa34:	9e00      	ldr	r6, [sp, #0]
 800fa36:	4649      	mov	r1, r9
 800fa38:	4658      	mov	r0, fp
 800fa3a:	47b0      	blx	r6
 800fa3c:	f8da 3000 	ldr.w	r3, [sl]
 800fa40:	6821      	ldr	r1, [r4, #0]
 800fa42:	1d1a      	adds	r2, r3, #4
 800fa44:	f8ca 2000 	str.w	r2, [sl]
 800fa48:	f011 0f20 	tst.w	r1, #32
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	d010      	beq.n	800fa72 <_scanf_i+0x1ca>
 800fa50:	6018      	str	r0, [r3, #0]
 800fa52:	68e3      	ldr	r3, [r4, #12]
 800fa54:	3301      	adds	r3, #1
 800fa56:	60e3      	str	r3, [r4, #12]
 800fa58:	eba5 0509 	sub.w	r5, r5, r9
 800fa5c:	44a8      	add	r8, r5
 800fa5e:	6925      	ldr	r5, [r4, #16]
 800fa60:	4445      	add	r5, r8
 800fa62:	6125      	str	r5, [r4, #16]
 800fa64:	2000      	movs	r0, #0
 800fa66:	b007      	add	sp, #28
 800fa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6c:	f04f 0800 	mov.w	r8, #0
 800fa70:	e7ca      	b.n	800fa08 <_scanf_i+0x160>
 800fa72:	07ca      	lsls	r2, r1, #31
 800fa74:	bf4c      	ite	mi
 800fa76:	8018      	strhmi	r0, [r3, #0]
 800fa78:	6018      	strpl	r0, [r3, #0]
 800fa7a:	e7ea      	b.n	800fa52 <_scanf_i+0x1aa>
 800fa7c:	2001      	movs	r0, #1
 800fa7e:	e7f2      	b.n	800fa66 <_scanf_i+0x1be>
 800fa80:	08012b10 	.word	0x08012b10
 800fa84:	0800ce31 	.word	0x0800ce31
 800fa88:	0800fc31 	.word	0x0800fc31
 800fa8c:	08012d65 	.word	0x08012d65

0800fa90 <_read_r>:
 800fa90:	b538      	push	{r3, r4, r5, lr}
 800fa92:	4c07      	ldr	r4, [pc, #28]	; (800fab0 <_read_r+0x20>)
 800fa94:	4605      	mov	r5, r0
 800fa96:	4608      	mov	r0, r1
 800fa98:	4611      	mov	r1, r2
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	6022      	str	r2, [r4, #0]
 800fa9e:	461a      	mov	r2, r3
 800faa0:	f7f2 fbbc 	bl	800221c <_read>
 800faa4:	1c43      	adds	r3, r0, #1
 800faa6:	d102      	bne.n	800faae <_read_r+0x1e>
 800faa8:	6823      	ldr	r3, [r4, #0]
 800faaa:	b103      	cbz	r3, 800faae <_read_r+0x1e>
 800faac:	602b      	str	r3, [r5, #0]
 800faae:	bd38      	pop	{r3, r4, r5, pc}
 800fab0:	20001378 	.word	0x20001378

0800fab4 <__sccl>:
 800fab4:	b570      	push	{r4, r5, r6, lr}
 800fab6:	780b      	ldrb	r3, [r1, #0]
 800fab8:	2b5e      	cmp	r3, #94	; 0x5e
 800faba:	bf13      	iteet	ne
 800fabc:	1c4a      	addne	r2, r1, #1
 800fabe:	1c8a      	addeq	r2, r1, #2
 800fac0:	784b      	ldrbeq	r3, [r1, #1]
 800fac2:	2100      	movne	r1, #0
 800fac4:	bf08      	it	eq
 800fac6:	2101      	moveq	r1, #1
 800fac8:	1e44      	subs	r4, r0, #1
 800faca:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800face:	f804 1f01 	strb.w	r1, [r4, #1]!
 800fad2:	42ac      	cmp	r4, r5
 800fad4:	d1fb      	bne.n	800face <__sccl+0x1a>
 800fad6:	b913      	cbnz	r3, 800fade <__sccl+0x2a>
 800fad8:	3a01      	subs	r2, #1
 800fada:	4610      	mov	r0, r2
 800fadc:	bd70      	pop	{r4, r5, r6, pc}
 800fade:	f081 0401 	eor.w	r4, r1, #1
 800fae2:	54c4      	strb	r4, [r0, r3]
 800fae4:	1c51      	adds	r1, r2, #1
 800fae6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800faea:	2d2d      	cmp	r5, #45	; 0x2d
 800faec:	f101 36ff 	add.w	r6, r1, #4294967295
 800faf0:	460a      	mov	r2, r1
 800faf2:	d006      	beq.n	800fb02 <__sccl+0x4e>
 800faf4:	2d5d      	cmp	r5, #93	; 0x5d
 800faf6:	d0f0      	beq.n	800fada <__sccl+0x26>
 800faf8:	b90d      	cbnz	r5, 800fafe <__sccl+0x4a>
 800fafa:	4632      	mov	r2, r6
 800fafc:	e7ed      	b.n	800fada <__sccl+0x26>
 800fafe:	462b      	mov	r3, r5
 800fb00:	e7ef      	b.n	800fae2 <__sccl+0x2e>
 800fb02:	780e      	ldrb	r6, [r1, #0]
 800fb04:	2e5d      	cmp	r6, #93	; 0x5d
 800fb06:	d0fa      	beq.n	800fafe <__sccl+0x4a>
 800fb08:	42b3      	cmp	r3, r6
 800fb0a:	dcf8      	bgt.n	800fafe <__sccl+0x4a>
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	429e      	cmp	r6, r3
 800fb10:	54c4      	strb	r4, [r0, r3]
 800fb12:	dcfb      	bgt.n	800fb0c <__sccl+0x58>
 800fb14:	3102      	adds	r1, #2
 800fb16:	e7e6      	b.n	800fae6 <__sccl+0x32>

0800fb18 <strncmp>:
 800fb18:	b510      	push	{r4, lr}
 800fb1a:	b16a      	cbz	r2, 800fb38 <strncmp+0x20>
 800fb1c:	3901      	subs	r1, #1
 800fb1e:	1884      	adds	r4, r0, r2
 800fb20:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fb24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d103      	bne.n	800fb34 <strncmp+0x1c>
 800fb2c:	42a0      	cmp	r0, r4
 800fb2e:	d001      	beq.n	800fb34 <strncmp+0x1c>
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1f5      	bne.n	800fb20 <strncmp+0x8>
 800fb34:	1a98      	subs	r0, r3, r2
 800fb36:	bd10      	pop	{r4, pc}
 800fb38:	4610      	mov	r0, r2
 800fb3a:	e7fc      	b.n	800fb36 <strncmp+0x1e>

0800fb3c <_strtoul_l.isra.0>:
 800fb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb40:	4680      	mov	r8, r0
 800fb42:	4689      	mov	r9, r1
 800fb44:	4692      	mov	sl, r2
 800fb46:	461e      	mov	r6, r3
 800fb48:	460f      	mov	r7, r1
 800fb4a:	463d      	mov	r5, r7
 800fb4c:	9808      	ldr	r0, [sp, #32]
 800fb4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb52:	f7fe fd45 	bl	800e5e0 <__locale_ctype_ptr_l>
 800fb56:	4420      	add	r0, r4
 800fb58:	7843      	ldrb	r3, [r0, #1]
 800fb5a:	f013 0308 	ands.w	r3, r3, #8
 800fb5e:	d130      	bne.n	800fbc2 <_strtoul_l.isra.0+0x86>
 800fb60:	2c2d      	cmp	r4, #45	; 0x2d
 800fb62:	d130      	bne.n	800fbc6 <_strtoul_l.isra.0+0x8a>
 800fb64:	787c      	ldrb	r4, [r7, #1]
 800fb66:	1cbd      	adds	r5, r7, #2
 800fb68:	2101      	movs	r1, #1
 800fb6a:	2e00      	cmp	r6, #0
 800fb6c:	d05c      	beq.n	800fc28 <_strtoul_l.isra.0+0xec>
 800fb6e:	2e10      	cmp	r6, #16
 800fb70:	d109      	bne.n	800fb86 <_strtoul_l.isra.0+0x4a>
 800fb72:	2c30      	cmp	r4, #48	; 0x30
 800fb74:	d107      	bne.n	800fb86 <_strtoul_l.isra.0+0x4a>
 800fb76:	782b      	ldrb	r3, [r5, #0]
 800fb78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fb7c:	2b58      	cmp	r3, #88	; 0x58
 800fb7e:	d14e      	bne.n	800fc1e <_strtoul_l.isra.0+0xe2>
 800fb80:	786c      	ldrb	r4, [r5, #1]
 800fb82:	2610      	movs	r6, #16
 800fb84:	3502      	adds	r5, #2
 800fb86:	f04f 32ff 	mov.w	r2, #4294967295
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	fbb2 f2f6 	udiv	r2, r2, r6
 800fb90:	fb06 fc02 	mul.w	ip, r6, r2
 800fb94:	ea6f 0c0c 	mvn.w	ip, ip
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800fb9e:	2f09      	cmp	r7, #9
 800fba0:	d817      	bhi.n	800fbd2 <_strtoul_l.isra.0+0x96>
 800fba2:	463c      	mov	r4, r7
 800fba4:	42a6      	cmp	r6, r4
 800fba6:	dd23      	ble.n	800fbf0 <_strtoul_l.isra.0+0xb4>
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	db1e      	blt.n	800fbea <_strtoul_l.isra.0+0xae>
 800fbac:	4282      	cmp	r2, r0
 800fbae:	d31c      	bcc.n	800fbea <_strtoul_l.isra.0+0xae>
 800fbb0:	d101      	bne.n	800fbb6 <_strtoul_l.isra.0+0x7a>
 800fbb2:	45a4      	cmp	ip, r4
 800fbb4:	db19      	blt.n	800fbea <_strtoul_l.isra.0+0xae>
 800fbb6:	fb00 4006 	mla	r0, r0, r6, r4
 800fbba:	2301      	movs	r3, #1
 800fbbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbc0:	e7eb      	b.n	800fb9a <_strtoul_l.isra.0+0x5e>
 800fbc2:	462f      	mov	r7, r5
 800fbc4:	e7c1      	b.n	800fb4a <_strtoul_l.isra.0+0xe>
 800fbc6:	2c2b      	cmp	r4, #43	; 0x2b
 800fbc8:	bf04      	itt	eq
 800fbca:	1cbd      	addeq	r5, r7, #2
 800fbcc:	787c      	ldrbeq	r4, [r7, #1]
 800fbce:	4619      	mov	r1, r3
 800fbd0:	e7cb      	b.n	800fb6a <_strtoul_l.isra.0+0x2e>
 800fbd2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800fbd6:	2f19      	cmp	r7, #25
 800fbd8:	d801      	bhi.n	800fbde <_strtoul_l.isra.0+0xa2>
 800fbda:	3c37      	subs	r4, #55	; 0x37
 800fbdc:	e7e2      	b.n	800fba4 <_strtoul_l.isra.0+0x68>
 800fbde:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800fbe2:	2f19      	cmp	r7, #25
 800fbe4:	d804      	bhi.n	800fbf0 <_strtoul_l.isra.0+0xb4>
 800fbe6:	3c57      	subs	r4, #87	; 0x57
 800fbe8:	e7dc      	b.n	800fba4 <_strtoul_l.isra.0+0x68>
 800fbea:	f04f 33ff 	mov.w	r3, #4294967295
 800fbee:	e7e5      	b.n	800fbbc <_strtoul_l.isra.0+0x80>
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	da09      	bge.n	800fc08 <_strtoul_l.isra.0+0xcc>
 800fbf4:	2322      	movs	r3, #34	; 0x22
 800fbf6:	f8c8 3000 	str.w	r3, [r8]
 800fbfa:	f04f 30ff 	mov.w	r0, #4294967295
 800fbfe:	f1ba 0f00 	cmp.w	sl, #0
 800fc02:	d107      	bne.n	800fc14 <_strtoul_l.isra.0+0xd8>
 800fc04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc08:	b101      	cbz	r1, 800fc0c <_strtoul_l.isra.0+0xd0>
 800fc0a:	4240      	negs	r0, r0
 800fc0c:	f1ba 0f00 	cmp.w	sl, #0
 800fc10:	d0f8      	beq.n	800fc04 <_strtoul_l.isra.0+0xc8>
 800fc12:	b10b      	cbz	r3, 800fc18 <_strtoul_l.isra.0+0xdc>
 800fc14:	f105 39ff 	add.w	r9, r5, #4294967295
 800fc18:	f8ca 9000 	str.w	r9, [sl]
 800fc1c:	e7f2      	b.n	800fc04 <_strtoul_l.isra.0+0xc8>
 800fc1e:	2430      	movs	r4, #48	; 0x30
 800fc20:	2e00      	cmp	r6, #0
 800fc22:	d1b0      	bne.n	800fb86 <_strtoul_l.isra.0+0x4a>
 800fc24:	2608      	movs	r6, #8
 800fc26:	e7ae      	b.n	800fb86 <_strtoul_l.isra.0+0x4a>
 800fc28:	2c30      	cmp	r4, #48	; 0x30
 800fc2a:	d0a4      	beq.n	800fb76 <_strtoul_l.isra.0+0x3a>
 800fc2c:	260a      	movs	r6, #10
 800fc2e:	e7aa      	b.n	800fb86 <_strtoul_l.isra.0+0x4a>

0800fc30 <_strtoul_r>:
 800fc30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc32:	4c06      	ldr	r4, [pc, #24]	; (800fc4c <_strtoul_r+0x1c>)
 800fc34:	4d06      	ldr	r5, [pc, #24]	; (800fc50 <_strtoul_r+0x20>)
 800fc36:	6824      	ldr	r4, [r4, #0]
 800fc38:	6a24      	ldr	r4, [r4, #32]
 800fc3a:	2c00      	cmp	r4, #0
 800fc3c:	bf08      	it	eq
 800fc3e:	462c      	moveq	r4, r5
 800fc40:	9400      	str	r4, [sp, #0]
 800fc42:	f7ff ff7b 	bl	800fb3c <_strtoul_l.isra.0>
 800fc46:	b003      	add	sp, #12
 800fc48:	bd30      	pop	{r4, r5, pc}
 800fc4a:	bf00      	nop
 800fc4c:	200001e8 	.word	0x200001e8
 800fc50:	2000024c 	.word	0x2000024c

0800fc54 <__submore>:
 800fc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc58:	460c      	mov	r4, r1
 800fc5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fc5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc60:	4299      	cmp	r1, r3
 800fc62:	d11d      	bne.n	800fca0 <__submore+0x4c>
 800fc64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fc68:	f7fb fa76 	bl	800b158 <_malloc_r>
 800fc6c:	b918      	cbnz	r0, 800fc76 <__submore+0x22>
 800fc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc7a:	63a3      	str	r3, [r4, #56]	; 0x38
 800fc7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fc80:	6360      	str	r0, [r4, #52]	; 0x34
 800fc82:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fc86:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fc8a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fc8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fc92:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fc96:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fc9a:	6020      	str	r0, [r4, #0]
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	e7e8      	b.n	800fc72 <__submore+0x1e>
 800fca0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fca2:	0077      	lsls	r7, r6, #1
 800fca4:	463a      	mov	r2, r7
 800fca6:	f000 f858 	bl	800fd5a <_realloc_r>
 800fcaa:	4605      	mov	r5, r0
 800fcac:	2800      	cmp	r0, #0
 800fcae:	d0de      	beq.n	800fc6e <__submore+0x1a>
 800fcb0:	eb00 0806 	add.w	r8, r0, r6
 800fcb4:	4601      	mov	r1, r0
 800fcb6:	4632      	mov	r2, r6
 800fcb8:	4640      	mov	r0, r8
 800fcba:	f7fe fd3b 	bl	800e734 <memcpy>
 800fcbe:	f8c4 8000 	str.w	r8, [r4]
 800fcc2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fcc6:	e7e9      	b.n	800fc9c <__submore+0x48>

0800fcc8 <__ascii_wctomb>:
 800fcc8:	b149      	cbz	r1, 800fcde <__ascii_wctomb+0x16>
 800fcca:	2aff      	cmp	r2, #255	; 0xff
 800fccc:	bf85      	ittet	hi
 800fcce:	238a      	movhi	r3, #138	; 0x8a
 800fcd0:	6003      	strhi	r3, [r0, #0]
 800fcd2:	700a      	strbls	r2, [r1, #0]
 800fcd4:	f04f 30ff 	movhi.w	r0, #4294967295
 800fcd8:	bf98      	it	ls
 800fcda:	2001      	movls	r0, #1
 800fcdc:	4770      	bx	lr
 800fcde:	4608      	mov	r0, r1
 800fce0:	4770      	bx	lr
	...

0800fce4 <_fstat_r>:
 800fce4:	b538      	push	{r3, r4, r5, lr}
 800fce6:	4c07      	ldr	r4, [pc, #28]	; (800fd04 <_fstat_r+0x20>)
 800fce8:	2300      	movs	r3, #0
 800fcea:	4605      	mov	r5, r0
 800fcec:	4608      	mov	r0, r1
 800fcee:	4611      	mov	r1, r2
 800fcf0:	6023      	str	r3, [r4, #0]
 800fcf2:	f7f2 fabc 	bl	800226e <_fstat>
 800fcf6:	1c43      	adds	r3, r0, #1
 800fcf8:	d102      	bne.n	800fd00 <_fstat_r+0x1c>
 800fcfa:	6823      	ldr	r3, [r4, #0]
 800fcfc:	b103      	cbz	r3, 800fd00 <_fstat_r+0x1c>
 800fcfe:	602b      	str	r3, [r5, #0]
 800fd00:	bd38      	pop	{r3, r4, r5, pc}
 800fd02:	bf00      	nop
 800fd04:	20001378 	.word	0x20001378

0800fd08 <_isatty_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	4c06      	ldr	r4, [pc, #24]	; (800fd24 <_isatty_r+0x1c>)
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	4605      	mov	r5, r0
 800fd10:	4608      	mov	r0, r1
 800fd12:	6023      	str	r3, [r4, #0]
 800fd14:	f7f2 fabb 	bl	800228e <_isatty>
 800fd18:	1c43      	adds	r3, r0, #1
 800fd1a:	d102      	bne.n	800fd22 <_isatty_r+0x1a>
 800fd1c:	6823      	ldr	r3, [r4, #0]
 800fd1e:	b103      	cbz	r3, 800fd22 <_isatty_r+0x1a>
 800fd20:	602b      	str	r3, [r5, #0]
 800fd22:	bd38      	pop	{r3, r4, r5, pc}
 800fd24:	20001378 	.word	0x20001378

0800fd28 <memmove>:
 800fd28:	4288      	cmp	r0, r1
 800fd2a:	b510      	push	{r4, lr}
 800fd2c:	eb01 0302 	add.w	r3, r1, r2
 800fd30:	d807      	bhi.n	800fd42 <memmove+0x1a>
 800fd32:	1e42      	subs	r2, r0, #1
 800fd34:	4299      	cmp	r1, r3
 800fd36:	d00a      	beq.n	800fd4e <memmove+0x26>
 800fd38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fd40:	e7f8      	b.n	800fd34 <memmove+0xc>
 800fd42:	4283      	cmp	r3, r0
 800fd44:	d9f5      	bls.n	800fd32 <memmove+0xa>
 800fd46:	1881      	adds	r1, r0, r2
 800fd48:	1ad2      	subs	r2, r2, r3
 800fd4a:	42d3      	cmn	r3, r2
 800fd4c:	d100      	bne.n	800fd50 <memmove+0x28>
 800fd4e:	bd10      	pop	{r4, pc}
 800fd50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fd58:	e7f7      	b.n	800fd4a <memmove+0x22>

0800fd5a <_realloc_r>:
 800fd5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5c:	4607      	mov	r7, r0
 800fd5e:	4614      	mov	r4, r2
 800fd60:	460e      	mov	r6, r1
 800fd62:	b921      	cbnz	r1, 800fd6e <_realloc_r+0x14>
 800fd64:	4611      	mov	r1, r2
 800fd66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd6a:	f7fb b9f5 	b.w	800b158 <_malloc_r>
 800fd6e:	b922      	cbnz	r2, 800fd7a <_realloc_r+0x20>
 800fd70:	f7fb f9a4 	bl	800b0bc <_free_r>
 800fd74:	4625      	mov	r5, r4
 800fd76:	4628      	mov	r0, r5
 800fd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd7a:	f000 f814 	bl	800fda6 <_malloc_usable_size_r>
 800fd7e:	42a0      	cmp	r0, r4
 800fd80:	d20f      	bcs.n	800fda2 <_realloc_r+0x48>
 800fd82:	4621      	mov	r1, r4
 800fd84:	4638      	mov	r0, r7
 800fd86:	f7fb f9e7 	bl	800b158 <_malloc_r>
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	d0f2      	beq.n	800fd76 <_realloc_r+0x1c>
 800fd90:	4631      	mov	r1, r6
 800fd92:	4622      	mov	r2, r4
 800fd94:	f7fe fcce 	bl	800e734 <memcpy>
 800fd98:	4631      	mov	r1, r6
 800fd9a:	4638      	mov	r0, r7
 800fd9c:	f7fb f98e 	bl	800b0bc <_free_r>
 800fda0:	e7e9      	b.n	800fd76 <_realloc_r+0x1c>
 800fda2:	4635      	mov	r5, r6
 800fda4:	e7e7      	b.n	800fd76 <_realloc_r+0x1c>

0800fda6 <_malloc_usable_size_r>:
 800fda6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdaa:	1f18      	subs	r0, r3, #4
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	bfbc      	itt	lt
 800fdb0:	580b      	ldrlt	r3, [r1, r0]
 800fdb2:	18c0      	addlt	r0, r0, r3
 800fdb4:	4770      	bx	lr
	...

0800fdb8 <cos>:
 800fdb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdba:	ec51 0b10 	vmov	r0, r1, d0
 800fdbe:	4a1e      	ldr	r2, [pc, #120]	; (800fe38 <cos+0x80>)
 800fdc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	dc06      	bgt.n	800fdd6 <cos+0x1e>
 800fdc8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800fe30 <cos+0x78>
 800fdcc:	f001 fd94 	bl	80118f8 <__kernel_cos>
 800fdd0:	ec51 0b10 	vmov	r0, r1, d0
 800fdd4:	e007      	b.n	800fde6 <cos+0x2e>
 800fdd6:	4a19      	ldr	r2, [pc, #100]	; (800fe3c <cos+0x84>)
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	dd09      	ble.n	800fdf0 <cos+0x38>
 800fddc:	ee10 2a10 	vmov	r2, s0
 800fde0:	460b      	mov	r3, r1
 800fde2:	f7f0 fa59 	bl	8000298 <__aeabi_dsub>
 800fde6:	ec41 0b10 	vmov	d0, r0, r1
 800fdea:	b005      	add	sp, #20
 800fdec:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdf0:	4668      	mov	r0, sp
 800fdf2:	f001 fadd 	bl	80113b0 <__ieee754_rem_pio2>
 800fdf6:	f000 0003 	and.w	r0, r0, #3
 800fdfa:	2801      	cmp	r0, #1
 800fdfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe00:	ed9d 0b00 	vldr	d0, [sp]
 800fe04:	d007      	beq.n	800fe16 <cos+0x5e>
 800fe06:	2802      	cmp	r0, #2
 800fe08:	d00e      	beq.n	800fe28 <cos+0x70>
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	d0de      	beq.n	800fdcc <cos+0x14>
 800fe0e:	2001      	movs	r0, #1
 800fe10:	f002 f97a 	bl	8012108 <__kernel_sin>
 800fe14:	e7dc      	b.n	800fdd0 <cos+0x18>
 800fe16:	f002 f977 	bl	8012108 <__kernel_sin>
 800fe1a:	ec53 2b10 	vmov	r2, r3, d0
 800fe1e:	ee10 0a10 	vmov	r0, s0
 800fe22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fe26:	e7de      	b.n	800fde6 <cos+0x2e>
 800fe28:	f001 fd66 	bl	80118f8 <__kernel_cos>
 800fe2c:	e7f5      	b.n	800fe1a <cos+0x62>
 800fe2e:	bf00      	nop
	...
 800fe38:	3fe921fb 	.word	0x3fe921fb
 800fe3c:	7fefffff 	.word	0x7fefffff

0800fe40 <sin>:
 800fe40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe42:	ec51 0b10 	vmov	r0, r1, d0
 800fe46:	4a20      	ldr	r2, [pc, #128]	; (800fec8 <sin+0x88>)
 800fe48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	dc07      	bgt.n	800fe60 <sin+0x20>
 800fe50:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800fec0 <sin+0x80>
 800fe54:	2000      	movs	r0, #0
 800fe56:	f002 f957 	bl	8012108 <__kernel_sin>
 800fe5a:	ec51 0b10 	vmov	r0, r1, d0
 800fe5e:	e007      	b.n	800fe70 <sin+0x30>
 800fe60:	4a1a      	ldr	r2, [pc, #104]	; (800fecc <sin+0x8c>)
 800fe62:	4293      	cmp	r3, r2
 800fe64:	dd09      	ble.n	800fe7a <sin+0x3a>
 800fe66:	ee10 2a10 	vmov	r2, s0
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	f7f0 fa14 	bl	8000298 <__aeabi_dsub>
 800fe70:	ec41 0b10 	vmov	d0, r0, r1
 800fe74:	b005      	add	sp, #20
 800fe76:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe7a:	4668      	mov	r0, sp
 800fe7c:	f001 fa98 	bl	80113b0 <__ieee754_rem_pio2>
 800fe80:	f000 0003 	and.w	r0, r0, #3
 800fe84:	2801      	cmp	r0, #1
 800fe86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe8a:	ed9d 0b00 	vldr	d0, [sp]
 800fe8e:	d004      	beq.n	800fe9a <sin+0x5a>
 800fe90:	2802      	cmp	r0, #2
 800fe92:	d005      	beq.n	800fea0 <sin+0x60>
 800fe94:	b970      	cbnz	r0, 800feb4 <sin+0x74>
 800fe96:	2001      	movs	r0, #1
 800fe98:	e7dd      	b.n	800fe56 <sin+0x16>
 800fe9a:	f001 fd2d 	bl	80118f8 <__kernel_cos>
 800fe9e:	e7dc      	b.n	800fe5a <sin+0x1a>
 800fea0:	2001      	movs	r0, #1
 800fea2:	f002 f931 	bl	8012108 <__kernel_sin>
 800fea6:	ec53 2b10 	vmov	r2, r3, d0
 800feaa:	ee10 0a10 	vmov	r0, s0
 800feae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800feb2:	e7dd      	b.n	800fe70 <sin+0x30>
 800feb4:	f001 fd20 	bl	80118f8 <__kernel_cos>
 800feb8:	e7f5      	b.n	800fea6 <sin+0x66>
 800feba:	bf00      	nop
 800febc:	f3af 8000 	nop.w
	...
 800fec8:	3fe921fb 	.word	0x3fe921fb
 800fecc:	7fefffff 	.word	0x7fefffff

0800fed0 <acos>:
 800fed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fed2:	ed2d 8b02 	vpush	{d8}
 800fed6:	4e26      	ldr	r6, [pc, #152]	; (800ff70 <acos+0xa0>)
 800fed8:	b08b      	sub	sp, #44	; 0x2c
 800feda:	ec55 4b10 	vmov	r4, r5, d0
 800fede:	f000 fa1b 	bl	8010318 <__ieee754_acos>
 800fee2:	f996 3000 	ldrsb.w	r3, [r6]
 800fee6:	eeb0 8a40 	vmov.f32	s16, s0
 800feea:	eef0 8a60 	vmov.f32	s17, s1
 800feee:	3301      	adds	r3, #1
 800fef0:	d036      	beq.n	800ff60 <acos+0x90>
 800fef2:	4622      	mov	r2, r4
 800fef4:	462b      	mov	r3, r5
 800fef6:	4620      	mov	r0, r4
 800fef8:	4629      	mov	r1, r5
 800fefa:	f7f0 fe1f 	bl	8000b3c <__aeabi_dcmpun>
 800fefe:	4607      	mov	r7, r0
 800ff00:	bb70      	cbnz	r0, 800ff60 <acos+0x90>
 800ff02:	ec45 4b10 	vmov	d0, r4, r5
 800ff06:	f002 fb5b 	bl	80125c0 <fabs>
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	4b19      	ldr	r3, [pc, #100]	; (800ff74 <acos+0xa4>)
 800ff0e:	ec51 0b10 	vmov	r0, r1, d0
 800ff12:	f7f0 fe09 	bl	8000b28 <__aeabi_dcmpgt>
 800ff16:	b318      	cbz	r0, 800ff60 <acos+0x90>
 800ff18:	2301      	movs	r3, #1
 800ff1a:	9300      	str	r3, [sp, #0]
 800ff1c:	4816      	ldr	r0, [pc, #88]	; (800ff78 <acos+0xa8>)
 800ff1e:	4b17      	ldr	r3, [pc, #92]	; (800ff7c <acos+0xac>)
 800ff20:	9301      	str	r3, [sp, #4]
 800ff22:	9708      	str	r7, [sp, #32]
 800ff24:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ff28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ff2c:	f002 fbe4 	bl	80126f8 <nan>
 800ff30:	f996 3000 	ldrsb.w	r3, [r6]
 800ff34:	2b02      	cmp	r3, #2
 800ff36:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ff3a:	d104      	bne.n	800ff46 <acos+0x76>
 800ff3c:	f7fb f87c 	bl	800b038 <__errno>
 800ff40:	2321      	movs	r3, #33	; 0x21
 800ff42:	6003      	str	r3, [r0, #0]
 800ff44:	e004      	b.n	800ff50 <acos+0x80>
 800ff46:	4668      	mov	r0, sp
 800ff48:	f002 fbd2 	bl	80126f0 <matherr>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	d0f5      	beq.n	800ff3c <acos+0x6c>
 800ff50:	9b08      	ldr	r3, [sp, #32]
 800ff52:	b11b      	cbz	r3, 800ff5c <acos+0x8c>
 800ff54:	f7fb f870 	bl	800b038 <__errno>
 800ff58:	9b08      	ldr	r3, [sp, #32]
 800ff5a:	6003      	str	r3, [r0, #0]
 800ff5c:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ff60:	eeb0 0a48 	vmov.f32	s0, s16
 800ff64:	eef0 0a68 	vmov.f32	s1, s17
 800ff68:	b00b      	add	sp, #44	; 0x2c
 800ff6a:	ecbd 8b02 	vpop	{d8}
 800ff6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff70:	200003b8 	.word	0x200003b8
 800ff74:	3ff00000 	.word	0x3ff00000
 800ff78:	08012d49 	.word	0x08012d49
 800ff7c:	08012e71 	.word	0x08012e71

0800ff80 <atan2>:
 800ff80:	f000 bc26 	b.w	80107d0 <__ieee754_atan2>

0800ff84 <pow>:
 800ff84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff88:	ed2d 8b04 	vpush	{d8-d9}
 800ff8c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8010260 <pow+0x2dc>
 800ff90:	b08d      	sub	sp, #52	; 0x34
 800ff92:	ec57 6b10 	vmov	r6, r7, d0
 800ff96:	ec55 4b11 	vmov	r4, r5, d1
 800ff9a:	f000 fcf9 	bl	8010990 <__ieee754_pow>
 800ff9e:	f999 3000 	ldrsb.w	r3, [r9]
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	eeb0 8a40 	vmov.f32	s16, s0
 800ffaa:	eef0 8a60 	vmov.f32	s17, s1
 800ffae:	46c8      	mov	r8, r9
 800ffb0:	d05f      	beq.n	8010072 <pow+0xee>
 800ffb2:	4622      	mov	r2, r4
 800ffb4:	462b      	mov	r3, r5
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	4629      	mov	r1, r5
 800ffba:	f7f0 fdbf 	bl	8000b3c <__aeabi_dcmpun>
 800ffbe:	4683      	mov	fp, r0
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	d156      	bne.n	8010072 <pow+0xee>
 800ffc4:	4632      	mov	r2, r6
 800ffc6:	463b      	mov	r3, r7
 800ffc8:	4630      	mov	r0, r6
 800ffca:	4639      	mov	r1, r7
 800ffcc:	f7f0 fdb6 	bl	8000b3c <__aeabi_dcmpun>
 800ffd0:	9001      	str	r0, [sp, #4]
 800ffd2:	b1e8      	cbz	r0, 8010010 <pow+0x8c>
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	4620      	mov	r0, r4
 800ffda:	4629      	mov	r1, r5
 800ffdc:	f7f0 fd7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	d046      	beq.n	8010072 <pow+0xee>
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	9302      	str	r3, [sp, #8]
 800ffe8:	4b96      	ldr	r3, [pc, #600]	; (8010244 <pow+0x2c0>)
 800ffea:	9303      	str	r3, [sp, #12]
 800ffec:	4b96      	ldr	r3, [pc, #600]	; (8010248 <pow+0x2c4>)
 800ffee:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800fff2:	2200      	movs	r2, #0
 800fff4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fff8:	9b00      	ldr	r3, [sp, #0]
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010000:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010004:	d033      	beq.n	801006e <pow+0xea>
 8010006:	a802      	add	r0, sp, #8
 8010008:	f002 fb72 	bl	80126f0 <matherr>
 801000c:	bb48      	cbnz	r0, 8010062 <pow+0xde>
 801000e:	e05d      	b.n	80100cc <pow+0x148>
 8010010:	f04f 0a00 	mov.w	sl, #0
 8010014:	f04f 0b00 	mov.w	fp, #0
 8010018:	4652      	mov	r2, sl
 801001a:	465b      	mov	r3, fp
 801001c:	4630      	mov	r0, r6
 801001e:	4639      	mov	r1, r7
 8010020:	f7f0 fd5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8010024:	ec4b ab19 	vmov	d9, sl, fp
 8010028:	2800      	cmp	r0, #0
 801002a:	d054      	beq.n	80100d6 <pow+0x152>
 801002c:	4652      	mov	r2, sl
 801002e:	465b      	mov	r3, fp
 8010030:	4620      	mov	r0, r4
 8010032:	4629      	mov	r1, r5
 8010034:	f7f0 fd50 	bl	8000ad8 <__aeabi_dcmpeq>
 8010038:	4680      	mov	r8, r0
 801003a:	b318      	cbz	r0, 8010084 <pow+0x100>
 801003c:	2301      	movs	r3, #1
 801003e:	9302      	str	r3, [sp, #8]
 8010040:	4b80      	ldr	r3, [pc, #512]	; (8010244 <pow+0x2c0>)
 8010042:	9303      	str	r3, [sp, #12]
 8010044:	9b01      	ldr	r3, [sp, #4]
 8010046:	930a      	str	r3, [sp, #40]	; 0x28
 8010048:	9b00      	ldr	r3, [sp, #0]
 801004a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801004e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010052:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d0d5      	beq.n	8010006 <pow+0x82>
 801005a:	4b7b      	ldr	r3, [pc, #492]	; (8010248 <pow+0x2c4>)
 801005c:	2200      	movs	r2, #0
 801005e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010064:	b11b      	cbz	r3, 801006e <pow+0xea>
 8010066:	f7fa ffe7 	bl	800b038 <__errno>
 801006a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801006c:	6003      	str	r3, [r0, #0]
 801006e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8010072:	eeb0 0a48 	vmov.f32	s0, s16
 8010076:	eef0 0a68 	vmov.f32	s1, s17
 801007a:	b00d      	add	sp, #52	; 0x34
 801007c:	ecbd 8b04 	vpop	{d8-d9}
 8010080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010084:	ec45 4b10 	vmov	d0, r4, r5
 8010088:	f002 faa3 	bl	80125d2 <finite>
 801008c:	2800      	cmp	r0, #0
 801008e:	d0f0      	beq.n	8010072 <pow+0xee>
 8010090:	4652      	mov	r2, sl
 8010092:	465b      	mov	r3, fp
 8010094:	4620      	mov	r0, r4
 8010096:	4629      	mov	r1, r5
 8010098:	f7f0 fd28 	bl	8000aec <__aeabi_dcmplt>
 801009c:	2800      	cmp	r0, #0
 801009e:	d0e8      	beq.n	8010072 <pow+0xee>
 80100a0:	2301      	movs	r3, #1
 80100a2:	9302      	str	r3, [sp, #8]
 80100a4:	4b67      	ldr	r3, [pc, #412]	; (8010244 <pow+0x2c0>)
 80100a6:	9303      	str	r3, [sp, #12]
 80100a8:	f999 3000 	ldrsb.w	r3, [r9]
 80100ac:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80100b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80100b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80100b8:	b913      	cbnz	r3, 80100c0 <pow+0x13c>
 80100ba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80100be:	e7a2      	b.n	8010006 <pow+0x82>
 80100c0:	4962      	ldr	r1, [pc, #392]	; (801024c <pow+0x2c8>)
 80100c2:	2000      	movs	r0, #0
 80100c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80100c8:	2b02      	cmp	r3, #2
 80100ca:	d19c      	bne.n	8010006 <pow+0x82>
 80100cc:	f7fa ffb4 	bl	800b038 <__errno>
 80100d0:	2321      	movs	r3, #33	; 0x21
 80100d2:	6003      	str	r3, [r0, #0]
 80100d4:	e7c5      	b.n	8010062 <pow+0xde>
 80100d6:	eeb0 0a48 	vmov.f32	s0, s16
 80100da:	eef0 0a68 	vmov.f32	s1, s17
 80100de:	f002 fa78 	bl	80125d2 <finite>
 80100e2:	9000      	str	r0, [sp, #0]
 80100e4:	2800      	cmp	r0, #0
 80100e6:	f040 8081 	bne.w	80101ec <pow+0x268>
 80100ea:	ec47 6b10 	vmov	d0, r6, r7
 80100ee:	f002 fa70 	bl	80125d2 <finite>
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d07a      	beq.n	80101ec <pow+0x268>
 80100f6:	ec45 4b10 	vmov	d0, r4, r5
 80100fa:	f002 fa6a 	bl	80125d2 <finite>
 80100fe:	2800      	cmp	r0, #0
 8010100:	d074      	beq.n	80101ec <pow+0x268>
 8010102:	ec53 2b18 	vmov	r2, r3, d8
 8010106:	ee18 0a10 	vmov	r0, s16
 801010a:	4619      	mov	r1, r3
 801010c:	f7f0 fd16 	bl	8000b3c <__aeabi_dcmpun>
 8010110:	f999 9000 	ldrsb.w	r9, [r9]
 8010114:	4b4b      	ldr	r3, [pc, #300]	; (8010244 <pow+0x2c0>)
 8010116:	b1b0      	cbz	r0, 8010146 <pow+0x1c2>
 8010118:	2201      	movs	r2, #1
 801011a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801011e:	9b00      	ldr	r3, [sp, #0]
 8010120:	930a      	str	r3, [sp, #40]	; 0x28
 8010122:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010126:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801012a:	f1b9 0f00 	cmp.w	r9, #0
 801012e:	d0c4      	beq.n	80100ba <pow+0x136>
 8010130:	4652      	mov	r2, sl
 8010132:	465b      	mov	r3, fp
 8010134:	4650      	mov	r0, sl
 8010136:	4659      	mov	r1, fp
 8010138:	f7f0 fb90 	bl	800085c <__aeabi_ddiv>
 801013c:	f1b9 0f02 	cmp.w	r9, #2
 8010140:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010144:	e7c1      	b.n	80100ca <pow+0x146>
 8010146:	2203      	movs	r2, #3
 8010148:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801014c:	900a      	str	r0, [sp, #40]	; 0x28
 801014e:	4629      	mov	r1, r5
 8010150:	4620      	mov	r0, r4
 8010152:	2200      	movs	r2, #0
 8010154:	4b3e      	ldr	r3, [pc, #248]	; (8010250 <pow+0x2cc>)
 8010156:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801015a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801015e:	f7f0 fa53 	bl	8000608 <__aeabi_dmul>
 8010162:	4604      	mov	r4, r0
 8010164:	460d      	mov	r5, r1
 8010166:	f1b9 0f00 	cmp.w	r9, #0
 801016a:	d124      	bne.n	80101b6 <pow+0x232>
 801016c:	4b39      	ldr	r3, [pc, #228]	; (8010254 <pow+0x2d0>)
 801016e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010172:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010176:	4630      	mov	r0, r6
 8010178:	4652      	mov	r2, sl
 801017a:	465b      	mov	r3, fp
 801017c:	4639      	mov	r1, r7
 801017e:	f7f0 fcb5 	bl	8000aec <__aeabi_dcmplt>
 8010182:	2800      	cmp	r0, #0
 8010184:	d056      	beq.n	8010234 <pow+0x2b0>
 8010186:	ec45 4b10 	vmov	d0, r4, r5
 801018a:	f002 fabd 	bl	8012708 <rint>
 801018e:	4622      	mov	r2, r4
 8010190:	462b      	mov	r3, r5
 8010192:	ec51 0b10 	vmov	r0, r1, d0
 8010196:	f7f0 fc9f 	bl	8000ad8 <__aeabi_dcmpeq>
 801019a:	b920      	cbnz	r0, 80101a6 <pow+0x222>
 801019c:	4b2e      	ldr	r3, [pc, #184]	; (8010258 <pow+0x2d4>)
 801019e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80101a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80101a6:	f998 3000 	ldrsb.w	r3, [r8]
 80101aa:	2b02      	cmp	r3, #2
 80101ac:	d142      	bne.n	8010234 <pow+0x2b0>
 80101ae:	f7fa ff43 	bl	800b038 <__errno>
 80101b2:	2322      	movs	r3, #34	; 0x22
 80101b4:	e78d      	b.n	80100d2 <pow+0x14e>
 80101b6:	4b29      	ldr	r3, [pc, #164]	; (801025c <pow+0x2d8>)
 80101b8:	2200      	movs	r2, #0
 80101ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80101be:	4630      	mov	r0, r6
 80101c0:	4652      	mov	r2, sl
 80101c2:	465b      	mov	r3, fp
 80101c4:	4639      	mov	r1, r7
 80101c6:	f7f0 fc91 	bl	8000aec <__aeabi_dcmplt>
 80101ca:	2800      	cmp	r0, #0
 80101cc:	d0eb      	beq.n	80101a6 <pow+0x222>
 80101ce:	ec45 4b10 	vmov	d0, r4, r5
 80101d2:	f002 fa99 	bl	8012708 <rint>
 80101d6:	4622      	mov	r2, r4
 80101d8:	462b      	mov	r3, r5
 80101da:	ec51 0b10 	vmov	r0, r1, d0
 80101de:	f7f0 fc7b 	bl	8000ad8 <__aeabi_dcmpeq>
 80101e2:	2800      	cmp	r0, #0
 80101e4:	d1df      	bne.n	80101a6 <pow+0x222>
 80101e6:	2200      	movs	r2, #0
 80101e8:	4b18      	ldr	r3, [pc, #96]	; (801024c <pow+0x2c8>)
 80101ea:	e7da      	b.n	80101a2 <pow+0x21e>
 80101ec:	2200      	movs	r2, #0
 80101ee:	2300      	movs	r3, #0
 80101f0:	ec51 0b18 	vmov	r0, r1, d8
 80101f4:	f7f0 fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 80101f8:	2800      	cmp	r0, #0
 80101fa:	f43f af3a 	beq.w	8010072 <pow+0xee>
 80101fe:	ec47 6b10 	vmov	d0, r6, r7
 8010202:	f002 f9e6 	bl	80125d2 <finite>
 8010206:	2800      	cmp	r0, #0
 8010208:	f43f af33 	beq.w	8010072 <pow+0xee>
 801020c:	ec45 4b10 	vmov	d0, r4, r5
 8010210:	f002 f9df 	bl	80125d2 <finite>
 8010214:	2800      	cmp	r0, #0
 8010216:	f43f af2c 	beq.w	8010072 <pow+0xee>
 801021a:	2304      	movs	r3, #4
 801021c:	9302      	str	r3, [sp, #8]
 801021e:	4b09      	ldr	r3, [pc, #36]	; (8010244 <pow+0x2c0>)
 8010220:	9303      	str	r3, [sp, #12]
 8010222:	2300      	movs	r3, #0
 8010224:	930a      	str	r3, [sp, #40]	; 0x28
 8010226:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801022a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801022e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8010232:	e7b8      	b.n	80101a6 <pow+0x222>
 8010234:	a802      	add	r0, sp, #8
 8010236:	f002 fa5b 	bl	80126f0 <matherr>
 801023a:	2800      	cmp	r0, #0
 801023c:	f47f af11 	bne.w	8010062 <pow+0xde>
 8010240:	e7b5      	b.n	80101ae <pow+0x22a>
 8010242:	bf00      	nop
 8010244:	08012e76 	.word	0x08012e76
 8010248:	3ff00000 	.word	0x3ff00000
 801024c:	fff00000 	.word	0xfff00000
 8010250:	3fe00000 	.word	0x3fe00000
 8010254:	47efffff 	.word	0x47efffff
 8010258:	c7efffff 	.word	0xc7efffff
 801025c:	7ff00000 	.word	0x7ff00000
 8010260:	200003b8 	.word	0x200003b8

08010264 <sqrt>:
 8010264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010268:	ed2d 8b02 	vpush	{d8}
 801026c:	b08b      	sub	sp, #44	; 0x2c
 801026e:	ec55 4b10 	vmov	r4, r5, d0
 8010272:	f001 fa8f 	bl	8011794 <__ieee754_sqrt>
 8010276:	4b26      	ldr	r3, [pc, #152]	; (8010310 <sqrt+0xac>)
 8010278:	eeb0 8a40 	vmov.f32	s16, s0
 801027c:	eef0 8a60 	vmov.f32	s17, s1
 8010280:	f993 6000 	ldrsb.w	r6, [r3]
 8010284:	1c73      	adds	r3, r6, #1
 8010286:	d02a      	beq.n	80102de <sqrt+0x7a>
 8010288:	4622      	mov	r2, r4
 801028a:	462b      	mov	r3, r5
 801028c:	4620      	mov	r0, r4
 801028e:	4629      	mov	r1, r5
 8010290:	f7f0 fc54 	bl	8000b3c <__aeabi_dcmpun>
 8010294:	4607      	mov	r7, r0
 8010296:	bb10      	cbnz	r0, 80102de <sqrt+0x7a>
 8010298:	f04f 0800 	mov.w	r8, #0
 801029c:	f04f 0900 	mov.w	r9, #0
 80102a0:	4642      	mov	r2, r8
 80102a2:	464b      	mov	r3, r9
 80102a4:	4620      	mov	r0, r4
 80102a6:	4629      	mov	r1, r5
 80102a8:	f7f0 fc20 	bl	8000aec <__aeabi_dcmplt>
 80102ac:	b1b8      	cbz	r0, 80102de <sqrt+0x7a>
 80102ae:	2301      	movs	r3, #1
 80102b0:	9300      	str	r3, [sp, #0]
 80102b2:	4b18      	ldr	r3, [pc, #96]	; (8010314 <sqrt+0xb0>)
 80102b4:	9301      	str	r3, [sp, #4]
 80102b6:	9708      	str	r7, [sp, #32]
 80102b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80102bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80102c0:	b9b6      	cbnz	r6, 80102f0 <sqrt+0x8c>
 80102c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80102c6:	4668      	mov	r0, sp
 80102c8:	f002 fa12 	bl	80126f0 <matherr>
 80102cc:	b1d0      	cbz	r0, 8010304 <sqrt+0xa0>
 80102ce:	9b08      	ldr	r3, [sp, #32]
 80102d0:	b11b      	cbz	r3, 80102da <sqrt+0x76>
 80102d2:	f7fa feb1 	bl	800b038 <__errno>
 80102d6:	9b08      	ldr	r3, [sp, #32]
 80102d8:	6003      	str	r3, [r0, #0]
 80102da:	ed9d 8b06 	vldr	d8, [sp, #24]
 80102de:	eeb0 0a48 	vmov.f32	s0, s16
 80102e2:	eef0 0a68 	vmov.f32	s1, s17
 80102e6:	b00b      	add	sp, #44	; 0x2c
 80102e8:	ecbd 8b02 	vpop	{d8}
 80102ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102f0:	4642      	mov	r2, r8
 80102f2:	464b      	mov	r3, r9
 80102f4:	4640      	mov	r0, r8
 80102f6:	4649      	mov	r1, r9
 80102f8:	f7f0 fab0 	bl	800085c <__aeabi_ddiv>
 80102fc:	2e02      	cmp	r6, #2
 80102fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010302:	d1e0      	bne.n	80102c6 <sqrt+0x62>
 8010304:	f7fa fe98 	bl	800b038 <__errno>
 8010308:	2321      	movs	r3, #33	; 0x21
 801030a:	6003      	str	r3, [r0, #0]
 801030c:	e7df      	b.n	80102ce <sqrt+0x6a>
 801030e:	bf00      	nop
 8010310:	200003b8 	.word	0x200003b8
 8010314:	08012e7a 	.word	0x08012e7a

08010318 <__ieee754_acos>:
 8010318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801031c:	ec55 4b10 	vmov	r4, r5, d0
 8010320:	49b7      	ldr	r1, [pc, #732]	; (8010600 <__ieee754_acos+0x2e8>)
 8010322:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010326:	428b      	cmp	r3, r1
 8010328:	dd1b      	ble.n	8010362 <__ieee754_acos+0x4a>
 801032a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801032e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010332:	4323      	orrs	r3, r4
 8010334:	d109      	bne.n	801034a <__ieee754_acos+0x32>
 8010336:	2d00      	cmp	r5, #0
 8010338:	f300 8211 	bgt.w	801075e <__ieee754_acos+0x446>
 801033c:	a196      	add	r1, pc, #600	; (adr r1, 8010598 <__ieee754_acos+0x280>)
 801033e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010342:	ec41 0b10 	vmov	d0, r0, r1
 8010346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801034a:	ee10 2a10 	vmov	r2, s0
 801034e:	462b      	mov	r3, r5
 8010350:	4620      	mov	r0, r4
 8010352:	4629      	mov	r1, r5
 8010354:	f7ef ffa0 	bl	8000298 <__aeabi_dsub>
 8010358:	4602      	mov	r2, r0
 801035a:	460b      	mov	r3, r1
 801035c:	f7f0 fa7e 	bl	800085c <__aeabi_ddiv>
 8010360:	e7ef      	b.n	8010342 <__ieee754_acos+0x2a>
 8010362:	49a8      	ldr	r1, [pc, #672]	; (8010604 <__ieee754_acos+0x2ec>)
 8010364:	428b      	cmp	r3, r1
 8010366:	f300 8087 	bgt.w	8010478 <__ieee754_acos+0x160>
 801036a:	4aa7      	ldr	r2, [pc, #668]	; (8010608 <__ieee754_acos+0x2f0>)
 801036c:	4293      	cmp	r3, r2
 801036e:	f340 81f9 	ble.w	8010764 <__ieee754_acos+0x44c>
 8010372:	ee10 2a10 	vmov	r2, s0
 8010376:	ee10 0a10 	vmov	r0, s0
 801037a:	462b      	mov	r3, r5
 801037c:	4629      	mov	r1, r5
 801037e:	f7f0 f943 	bl	8000608 <__aeabi_dmul>
 8010382:	a387      	add	r3, pc, #540	; (adr r3, 80105a0 <__ieee754_acos+0x288>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	4606      	mov	r6, r0
 801038a:	460f      	mov	r7, r1
 801038c:	f7f0 f93c 	bl	8000608 <__aeabi_dmul>
 8010390:	a385      	add	r3, pc, #532	; (adr r3, 80105a8 <__ieee754_acos+0x290>)
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	f7ef ff81 	bl	800029c <__adddf3>
 801039a:	4632      	mov	r2, r6
 801039c:	463b      	mov	r3, r7
 801039e:	f7f0 f933 	bl	8000608 <__aeabi_dmul>
 80103a2:	a383      	add	r3, pc, #524	; (adr r3, 80105b0 <__ieee754_acos+0x298>)
 80103a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a8:	f7ef ff76 	bl	8000298 <__aeabi_dsub>
 80103ac:	4632      	mov	r2, r6
 80103ae:	463b      	mov	r3, r7
 80103b0:	f7f0 f92a 	bl	8000608 <__aeabi_dmul>
 80103b4:	a380      	add	r3, pc, #512	; (adr r3, 80105b8 <__ieee754_acos+0x2a0>)
 80103b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ba:	f7ef ff6f 	bl	800029c <__adddf3>
 80103be:	4632      	mov	r2, r6
 80103c0:	463b      	mov	r3, r7
 80103c2:	f7f0 f921 	bl	8000608 <__aeabi_dmul>
 80103c6:	a37e      	add	r3, pc, #504	; (adr r3, 80105c0 <__ieee754_acos+0x2a8>)
 80103c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103cc:	f7ef ff64 	bl	8000298 <__aeabi_dsub>
 80103d0:	4632      	mov	r2, r6
 80103d2:	463b      	mov	r3, r7
 80103d4:	f7f0 f918 	bl	8000608 <__aeabi_dmul>
 80103d8:	a37b      	add	r3, pc, #492	; (adr r3, 80105c8 <__ieee754_acos+0x2b0>)
 80103da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103de:	f7ef ff5d 	bl	800029c <__adddf3>
 80103e2:	4632      	mov	r2, r6
 80103e4:	463b      	mov	r3, r7
 80103e6:	f7f0 f90f 	bl	8000608 <__aeabi_dmul>
 80103ea:	a379      	add	r3, pc, #484	; (adr r3, 80105d0 <__ieee754_acos+0x2b8>)
 80103ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f0:	4680      	mov	r8, r0
 80103f2:	4689      	mov	r9, r1
 80103f4:	4630      	mov	r0, r6
 80103f6:	4639      	mov	r1, r7
 80103f8:	f7f0 f906 	bl	8000608 <__aeabi_dmul>
 80103fc:	a376      	add	r3, pc, #472	; (adr r3, 80105d8 <__ieee754_acos+0x2c0>)
 80103fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010402:	f7ef ff49 	bl	8000298 <__aeabi_dsub>
 8010406:	4632      	mov	r2, r6
 8010408:	463b      	mov	r3, r7
 801040a:	f7f0 f8fd 	bl	8000608 <__aeabi_dmul>
 801040e:	a374      	add	r3, pc, #464	; (adr r3, 80105e0 <__ieee754_acos+0x2c8>)
 8010410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010414:	f7ef ff42 	bl	800029c <__adddf3>
 8010418:	4632      	mov	r2, r6
 801041a:	463b      	mov	r3, r7
 801041c:	f7f0 f8f4 	bl	8000608 <__aeabi_dmul>
 8010420:	a371      	add	r3, pc, #452	; (adr r3, 80105e8 <__ieee754_acos+0x2d0>)
 8010422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010426:	f7ef ff37 	bl	8000298 <__aeabi_dsub>
 801042a:	4632      	mov	r2, r6
 801042c:	463b      	mov	r3, r7
 801042e:	f7f0 f8eb 	bl	8000608 <__aeabi_dmul>
 8010432:	2200      	movs	r2, #0
 8010434:	4b75      	ldr	r3, [pc, #468]	; (801060c <__ieee754_acos+0x2f4>)
 8010436:	f7ef ff31 	bl	800029c <__adddf3>
 801043a:	4602      	mov	r2, r0
 801043c:	460b      	mov	r3, r1
 801043e:	4640      	mov	r0, r8
 8010440:	4649      	mov	r1, r9
 8010442:	f7f0 fa0b 	bl	800085c <__aeabi_ddiv>
 8010446:	4622      	mov	r2, r4
 8010448:	462b      	mov	r3, r5
 801044a:	f7f0 f8dd 	bl	8000608 <__aeabi_dmul>
 801044e:	4602      	mov	r2, r0
 8010450:	460b      	mov	r3, r1
 8010452:	a167      	add	r1, pc, #412	; (adr r1, 80105f0 <__ieee754_acos+0x2d8>)
 8010454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010458:	f7ef ff1e 	bl	8000298 <__aeabi_dsub>
 801045c:	4602      	mov	r2, r0
 801045e:	460b      	mov	r3, r1
 8010460:	4620      	mov	r0, r4
 8010462:	4629      	mov	r1, r5
 8010464:	f7ef ff18 	bl	8000298 <__aeabi_dsub>
 8010468:	4602      	mov	r2, r0
 801046a:	460b      	mov	r3, r1
 801046c:	a162      	add	r1, pc, #392	; (adr r1, 80105f8 <__ieee754_acos+0x2e0>)
 801046e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010472:	f7ef ff11 	bl	8000298 <__aeabi_dsub>
 8010476:	e764      	b.n	8010342 <__ieee754_acos+0x2a>
 8010478:	2d00      	cmp	r5, #0
 801047a:	f280 80cb 	bge.w	8010614 <__ieee754_acos+0x2fc>
 801047e:	ee10 0a10 	vmov	r0, s0
 8010482:	2200      	movs	r2, #0
 8010484:	4b61      	ldr	r3, [pc, #388]	; (801060c <__ieee754_acos+0x2f4>)
 8010486:	4629      	mov	r1, r5
 8010488:	f7ef ff08 	bl	800029c <__adddf3>
 801048c:	2200      	movs	r2, #0
 801048e:	4b60      	ldr	r3, [pc, #384]	; (8010610 <__ieee754_acos+0x2f8>)
 8010490:	f7f0 f8ba 	bl	8000608 <__aeabi_dmul>
 8010494:	a342      	add	r3, pc, #264	; (adr r3, 80105a0 <__ieee754_acos+0x288>)
 8010496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049a:	4604      	mov	r4, r0
 801049c:	460d      	mov	r5, r1
 801049e:	f7f0 f8b3 	bl	8000608 <__aeabi_dmul>
 80104a2:	a341      	add	r3, pc, #260	; (adr r3, 80105a8 <__ieee754_acos+0x290>)
 80104a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a8:	f7ef fef8 	bl	800029c <__adddf3>
 80104ac:	4622      	mov	r2, r4
 80104ae:	462b      	mov	r3, r5
 80104b0:	f7f0 f8aa 	bl	8000608 <__aeabi_dmul>
 80104b4:	a33e      	add	r3, pc, #248	; (adr r3, 80105b0 <__ieee754_acos+0x298>)
 80104b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ba:	f7ef feed 	bl	8000298 <__aeabi_dsub>
 80104be:	4622      	mov	r2, r4
 80104c0:	462b      	mov	r3, r5
 80104c2:	f7f0 f8a1 	bl	8000608 <__aeabi_dmul>
 80104c6:	a33c      	add	r3, pc, #240	; (adr r3, 80105b8 <__ieee754_acos+0x2a0>)
 80104c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104cc:	f7ef fee6 	bl	800029c <__adddf3>
 80104d0:	4622      	mov	r2, r4
 80104d2:	462b      	mov	r3, r5
 80104d4:	f7f0 f898 	bl	8000608 <__aeabi_dmul>
 80104d8:	a339      	add	r3, pc, #228	; (adr r3, 80105c0 <__ieee754_acos+0x2a8>)
 80104da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104de:	f7ef fedb 	bl	8000298 <__aeabi_dsub>
 80104e2:	4622      	mov	r2, r4
 80104e4:	462b      	mov	r3, r5
 80104e6:	f7f0 f88f 	bl	8000608 <__aeabi_dmul>
 80104ea:	a337      	add	r3, pc, #220	; (adr r3, 80105c8 <__ieee754_acos+0x2b0>)
 80104ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f0:	f7ef fed4 	bl	800029c <__adddf3>
 80104f4:	4622      	mov	r2, r4
 80104f6:	462b      	mov	r3, r5
 80104f8:	f7f0 f886 	bl	8000608 <__aeabi_dmul>
 80104fc:	ec45 4b10 	vmov	d0, r4, r5
 8010500:	4680      	mov	r8, r0
 8010502:	4689      	mov	r9, r1
 8010504:	f001 f946 	bl	8011794 <__ieee754_sqrt>
 8010508:	a331      	add	r3, pc, #196	; (adr r3, 80105d0 <__ieee754_acos+0x2b8>)
 801050a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050e:	4620      	mov	r0, r4
 8010510:	4629      	mov	r1, r5
 8010512:	ec57 6b10 	vmov	r6, r7, d0
 8010516:	f7f0 f877 	bl	8000608 <__aeabi_dmul>
 801051a:	a32f      	add	r3, pc, #188	; (adr r3, 80105d8 <__ieee754_acos+0x2c0>)
 801051c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010520:	f7ef feba 	bl	8000298 <__aeabi_dsub>
 8010524:	4622      	mov	r2, r4
 8010526:	462b      	mov	r3, r5
 8010528:	f7f0 f86e 	bl	8000608 <__aeabi_dmul>
 801052c:	a32c      	add	r3, pc, #176	; (adr r3, 80105e0 <__ieee754_acos+0x2c8>)
 801052e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010532:	f7ef feb3 	bl	800029c <__adddf3>
 8010536:	4622      	mov	r2, r4
 8010538:	462b      	mov	r3, r5
 801053a:	f7f0 f865 	bl	8000608 <__aeabi_dmul>
 801053e:	a32a      	add	r3, pc, #168	; (adr r3, 80105e8 <__ieee754_acos+0x2d0>)
 8010540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010544:	f7ef fea8 	bl	8000298 <__aeabi_dsub>
 8010548:	4622      	mov	r2, r4
 801054a:	462b      	mov	r3, r5
 801054c:	f7f0 f85c 	bl	8000608 <__aeabi_dmul>
 8010550:	2200      	movs	r2, #0
 8010552:	4b2e      	ldr	r3, [pc, #184]	; (801060c <__ieee754_acos+0x2f4>)
 8010554:	f7ef fea2 	bl	800029c <__adddf3>
 8010558:	4602      	mov	r2, r0
 801055a:	460b      	mov	r3, r1
 801055c:	4640      	mov	r0, r8
 801055e:	4649      	mov	r1, r9
 8010560:	f7f0 f97c 	bl	800085c <__aeabi_ddiv>
 8010564:	4632      	mov	r2, r6
 8010566:	463b      	mov	r3, r7
 8010568:	f7f0 f84e 	bl	8000608 <__aeabi_dmul>
 801056c:	a320      	add	r3, pc, #128	; (adr r3, 80105f0 <__ieee754_acos+0x2d8>)
 801056e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010572:	f7ef fe91 	bl	8000298 <__aeabi_dsub>
 8010576:	4632      	mov	r2, r6
 8010578:	463b      	mov	r3, r7
 801057a:	f7ef fe8f 	bl	800029c <__adddf3>
 801057e:	4602      	mov	r2, r0
 8010580:	460b      	mov	r3, r1
 8010582:	f7ef fe8b 	bl	800029c <__adddf3>
 8010586:	4602      	mov	r2, r0
 8010588:	460b      	mov	r3, r1
 801058a:	a103      	add	r1, pc, #12	; (adr r1, 8010598 <__ieee754_acos+0x280>)
 801058c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010590:	e76f      	b.n	8010472 <__ieee754_acos+0x15a>
 8010592:	bf00      	nop
 8010594:	f3af 8000 	nop.w
 8010598:	54442d18 	.word	0x54442d18
 801059c:	400921fb 	.word	0x400921fb
 80105a0:	0dfdf709 	.word	0x0dfdf709
 80105a4:	3f023de1 	.word	0x3f023de1
 80105a8:	7501b288 	.word	0x7501b288
 80105ac:	3f49efe0 	.word	0x3f49efe0
 80105b0:	b5688f3b 	.word	0xb5688f3b
 80105b4:	3fa48228 	.word	0x3fa48228
 80105b8:	0e884455 	.word	0x0e884455
 80105bc:	3fc9c155 	.word	0x3fc9c155
 80105c0:	03eb6f7d 	.word	0x03eb6f7d
 80105c4:	3fd4d612 	.word	0x3fd4d612
 80105c8:	55555555 	.word	0x55555555
 80105cc:	3fc55555 	.word	0x3fc55555
 80105d0:	b12e9282 	.word	0xb12e9282
 80105d4:	3fb3b8c5 	.word	0x3fb3b8c5
 80105d8:	1b8d0159 	.word	0x1b8d0159
 80105dc:	3fe6066c 	.word	0x3fe6066c
 80105e0:	9c598ac8 	.word	0x9c598ac8
 80105e4:	40002ae5 	.word	0x40002ae5
 80105e8:	1c8a2d4b 	.word	0x1c8a2d4b
 80105ec:	40033a27 	.word	0x40033a27
 80105f0:	33145c07 	.word	0x33145c07
 80105f4:	3c91a626 	.word	0x3c91a626
 80105f8:	54442d18 	.word	0x54442d18
 80105fc:	3ff921fb 	.word	0x3ff921fb
 8010600:	3fefffff 	.word	0x3fefffff
 8010604:	3fdfffff 	.word	0x3fdfffff
 8010608:	3c600000 	.word	0x3c600000
 801060c:	3ff00000 	.word	0x3ff00000
 8010610:	3fe00000 	.word	0x3fe00000
 8010614:	ee10 2a10 	vmov	r2, s0
 8010618:	462b      	mov	r3, r5
 801061a:	2000      	movs	r0, #0
 801061c:	496a      	ldr	r1, [pc, #424]	; (80107c8 <__ieee754_acos+0x4b0>)
 801061e:	f7ef fe3b 	bl	8000298 <__aeabi_dsub>
 8010622:	2200      	movs	r2, #0
 8010624:	4b69      	ldr	r3, [pc, #420]	; (80107cc <__ieee754_acos+0x4b4>)
 8010626:	f7ef ffef 	bl	8000608 <__aeabi_dmul>
 801062a:	4604      	mov	r4, r0
 801062c:	460d      	mov	r5, r1
 801062e:	ec45 4b10 	vmov	d0, r4, r5
 8010632:	f001 f8af 	bl	8011794 <__ieee754_sqrt>
 8010636:	a34e      	add	r3, pc, #312	; (adr r3, 8010770 <__ieee754_acos+0x458>)
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	4620      	mov	r0, r4
 801063e:	4629      	mov	r1, r5
 8010640:	ec59 8b10 	vmov	r8, r9, d0
 8010644:	f7ef ffe0 	bl	8000608 <__aeabi_dmul>
 8010648:	a34b      	add	r3, pc, #300	; (adr r3, 8010778 <__ieee754_acos+0x460>)
 801064a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064e:	f7ef fe25 	bl	800029c <__adddf3>
 8010652:	4622      	mov	r2, r4
 8010654:	462b      	mov	r3, r5
 8010656:	f7ef ffd7 	bl	8000608 <__aeabi_dmul>
 801065a:	a349      	add	r3, pc, #292	; (adr r3, 8010780 <__ieee754_acos+0x468>)
 801065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010660:	f7ef fe1a 	bl	8000298 <__aeabi_dsub>
 8010664:	4622      	mov	r2, r4
 8010666:	462b      	mov	r3, r5
 8010668:	f7ef ffce 	bl	8000608 <__aeabi_dmul>
 801066c:	a346      	add	r3, pc, #280	; (adr r3, 8010788 <__ieee754_acos+0x470>)
 801066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010672:	f7ef fe13 	bl	800029c <__adddf3>
 8010676:	4622      	mov	r2, r4
 8010678:	462b      	mov	r3, r5
 801067a:	f7ef ffc5 	bl	8000608 <__aeabi_dmul>
 801067e:	a344      	add	r3, pc, #272	; (adr r3, 8010790 <__ieee754_acos+0x478>)
 8010680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010684:	f7ef fe08 	bl	8000298 <__aeabi_dsub>
 8010688:	4622      	mov	r2, r4
 801068a:	462b      	mov	r3, r5
 801068c:	f7ef ffbc 	bl	8000608 <__aeabi_dmul>
 8010690:	a341      	add	r3, pc, #260	; (adr r3, 8010798 <__ieee754_acos+0x480>)
 8010692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010696:	f7ef fe01 	bl	800029c <__adddf3>
 801069a:	4622      	mov	r2, r4
 801069c:	462b      	mov	r3, r5
 801069e:	f7ef ffb3 	bl	8000608 <__aeabi_dmul>
 80106a2:	a33f      	add	r3, pc, #252	; (adr r3, 80107a0 <__ieee754_acos+0x488>)
 80106a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a8:	4682      	mov	sl, r0
 80106aa:	468b      	mov	fp, r1
 80106ac:	4620      	mov	r0, r4
 80106ae:	4629      	mov	r1, r5
 80106b0:	f7ef ffaa 	bl	8000608 <__aeabi_dmul>
 80106b4:	a33c      	add	r3, pc, #240	; (adr r3, 80107a8 <__ieee754_acos+0x490>)
 80106b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ba:	f7ef fded 	bl	8000298 <__aeabi_dsub>
 80106be:	4622      	mov	r2, r4
 80106c0:	462b      	mov	r3, r5
 80106c2:	f7ef ffa1 	bl	8000608 <__aeabi_dmul>
 80106c6:	a33a      	add	r3, pc, #232	; (adr r3, 80107b0 <__ieee754_acos+0x498>)
 80106c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106cc:	f7ef fde6 	bl	800029c <__adddf3>
 80106d0:	4622      	mov	r2, r4
 80106d2:	462b      	mov	r3, r5
 80106d4:	f7ef ff98 	bl	8000608 <__aeabi_dmul>
 80106d8:	a337      	add	r3, pc, #220	; (adr r3, 80107b8 <__ieee754_acos+0x4a0>)
 80106da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106de:	f7ef fddb 	bl	8000298 <__aeabi_dsub>
 80106e2:	4622      	mov	r2, r4
 80106e4:	462b      	mov	r3, r5
 80106e6:	f7ef ff8f 	bl	8000608 <__aeabi_dmul>
 80106ea:	2200      	movs	r2, #0
 80106ec:	4b36      	ldr	r3, [pc, #216]	; (80107c8 <__ieee754_acos+0x4b0>)
 80106ee:	f7ef fdd5 	bl	800029c <__adddf3>
 80106f2:	4602      	mov	r2, r0
 80106f4:	460b      	mov	r3, r1
 80106f6:	4650      	mov	r0, sl
 80106f8:	4659      	mov	r1, fp
 80106fa:	f7f0 f8af 	bl	800085c <__aeabi_ddiv>
 80106fe:	4642      	mov	r2, r8
 8010700:	464b      	mov	r3, r9
 8010702:	f7ef ff81 	bl	8000608 <__aeabi_dmul>
 8010706:	2600      	movs	r6, #0
 8010708:	4682      	mov	sl, r0
 801070a:	468b      	mov	fp, r1
 801070c:	4632      	mov	r2, r6
 801070e:	464b      	mov	r3, r9
 8010710:	4630      	mov	r0, r6
 8010712:	4649      	mov	r1, r9
 8010714:	f7ef ff78 	bl	8000608 <__aeabi_dmul>
 8010718:	4602      	mov	r2, r0
 801071a:	460b      	mov	r3, r1
 801071c:	4620      	mov	r0, r4
 801071e:	4629      	mov	r1, r5
 8010720:	f7ef fdba 	bl	8000298 <__aeabi_dsub>
 8010724:	4632      	mov	r2, r6
 8010726:	4604      	mov	r4, r0
 8010728:	460d      	mov	r5, r1
 801072a:	464b      	mov	r3, r9
 801072c:	4640      	mov	r0, r8
 801072e:	4649      	mov	r1, r9
 8010730:	f7ef fdb4 	bl	800029c <__adddf3>
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4620      	mov	r0, r4
 801073a:	4629      	mov	r1, r5
 801073c:	f7f0 f88e 	bl	800085c <__aeabi_ddiv>
 8010740:	4602      	mov	r2, r0
 8010742:	460b      	mov	r3, r1
 8010744:	4650      	mov	r0, sl
 8010746:	4659      	mov	r1, fp
 8010748:	f7ef fda8 	bl	800029c <__adddf3>
 801074c:	4632      	mov	r2, r6
 801074e:	464b      	mov	r3, r9
 8010750:	f7ef fda4 	bl	800029c <__adddf3>
 8010754:	4602      	mov	r2, r0
 8010756:	460b      	mov	r3, r1
 8010758:	f7ef fda0 	bl	800029c <__adddf3>
 801075c:	e5f1      	b.n	8010342 <__ieee754_acos+0x2a>
 801075e:	2000      	movs	r0, #0
 8010760:	2100      	movs	r1, #0
 8010762:	e5ee      	b.n	8010342 <__ieee754_acos+0x2a>
 8010764:	a116      	add	r1, pc, #88	; (adr r1, 80107c0 <__ieee754_acos+0x4a8>)
 8010766:	e9d1 0100 	ldrd	r0, r1, [r1]
 801076a:	e5ea      	b.n	8010342 <__ieee754_acos+0x2a>
 801076c:	f3af 8000 	nop.w
 8010770:	0dfdf709 	.word	0x0dfdf709
 8010774:	3f023de1 	.word	0x3f023de1
 8010778:	7501b288 	.word	0x7501b288
 801077c:	3f49efe0 	.word	0x3f49efe0
 8010780:	b5688f3b 	.word	0xb5688f3b
 8010784:	3fa48228 	.word	0x3fa48228
 8010788:	0e884455 	.word	0x0e884455
 801078c:	3fc9c155 	.word	0x3fc9c155
 8010790:	03eb6f7d 	.word	0x03eb6f7d
 8010794:	3fd4d612 	.word	0x3fd4d612
 8010798:	55555555 	.word	0x55555555
 801079c:	3fc55555 	.word	0x3fc55555
 80107a0:	b12e9282 	.word	0xb12e9282
 80107a4:	3fb3b8c5 	.word	0x3fb3b8c5
 80107a8:	1b8d0159 	.word	0x1b8d0159
 80107ac:	3fe6066c 	.word	0x3fe6066c
 80107b0:	9c598ac8 	.word	0x9c598ac8
 80107b4:	40002ae5 	.word	0x40002ae5
 80107b8:	1c8a2d4b 	.word	0x1c8a2d4b
 80107bc:	40033a27 	.word	0x40033a27
 80107c0:	54442d18 	.word	0x54442d18
 80107c4:	3ff921fb 	.word	0x3ff921fb
 80107c8:	3ff00000 	.word	0x3ff00000
 80107cc:	3fe00000 	.word	0x3fe00000

080107d0 <__ieee754_atan2>:
 80107d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107d4:	ec57 6b11 	vmov	r6, r7, d1
 80107d8:	4273      	negs	r3, r6
 80107da:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80107de:	4333      	orrs	r3, r6
 80107e0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8010988 <__ieee754_atan2+0x1b8>
 80107e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80107e8:	4573      	cmp	r3, lr
 80107ea:	ec51 0b10 	vmov	r0, r1, d0
 80107ee:	ee11 8a10 	vmov	r8, s2
 80107f2:	d80a      	bhi.n	801080a <__ieee754_atan2+0x3a>
 80107f4:	4244      	negs	r4, r0
 80107f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80107fa:	4304      	orrs	r4, r0
 80107fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010800:	4574      	cmp	r4, lr
 8010802:	468c      	mov	ip, r1
 8010804:	ee10 9a10 	vmov	r9, s0
 8010808:	d907      	bls.n	801081a <__ieee754_atan2+0x4a>
 801080a:	4632      	mov	r2, r6
 801080c:	463b      	mov	r3, r7
 801080e:	f7ef fd45 	bl	800029c <__adddf3>
 8010812:	ec41 0b10 	vmov	d0, r0, r1
 8010816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801081a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801081e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010822:	4334      	orrs	r4, r6
 8010824:	d103      	bne.n	801082e <__ieee754_atan2+0x5e>
 8010826:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801082a:	f001 bd29 	b.w	8012280 <atan>
 801082e:	17bc      	asrs	r4, r7, #30
 8010830:	f004 0402 	and.w	r4, r4, #2
 8010834:	ea53 0909 	orrs.w	r9, r3, r9
 8010838:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801083c:	d107      	bne.n	801084e <__ieee754_atan2+0x7e>
 801083e:	2c02      	cmp	r4, #2
 8010840:	d073      	beq.n	801092a <__ieee754_atan2+0x15a>
 8010842:	2c03      	cmp	r4, #3
 8010844:	d1e5      	bne.n	8010812 <__ieee754_atan2+0x42>
 8010846:	a13e      	add	r1, pc, #248	; (adr r1, 8010940 <__ieee754_atan2+0x170>)
 8010848:	e9d1 0100 	ldrd	r0, r1, [r1]
 801084c:	e7e1      	b.n	8010812 <__ieee754_atan2+0x42>
 801084e:	ea52 0808 	orrs.w	r8, r2, r8
 8010852:	d106      	bne.n	8010862 <__ieee754_atan2+0x92>
 8010854:	f1bc 0f00 	cmp.w	ip, #0
 8010858:	da6b      	bge.n	8010932 <__ieee754_atan2+0x162>
 801085a:	a13b      	add	r1, pc, #236	; (adr r1, 8010948 <__ieee754_atan2+0x178>)
 801085c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010860:	e7d7      	b.n	8010812 <__ieee754_atan2+0x42>
 8010862:	4572      	cmp	r2, lr
 8010864:	d120      	bne.n	80108a8 <__ieee754_atan2+0xd8>
 8010866:	4293      	cmp	r3, r2
 8010868:	d111      	bne.n	801088e <__ieee754_atan2+0xbe>
 801086a:	2c02      	cmp	r4, #2
 801086c:	d007      	beq.n	801087e <__ieee754_atan2+0xae>
 801086e:	2c03      	cmp	r4, #3
 8010870:	d009      	beq.n	8010886 <__ieee754_atan2+0xb6>
 8010872:	2c01      	cmp	r4, #1
 8010874:	d155      	bne.n	8010922 <__ieee754_atan2+0x152>
 8010876:	a136      	add	r1, pc, #216	; (adr r1, 8010950 <__ieee754_atan2+0x180>)
 8010878:	e9d1 0100 	ldrd	r0, r1, [r1]
 801087c:	e7c9      	b.n	8010812 <__ieee754_atan2+0x42>
 801087e:	a136      	add	r1, pc, #216	; (adr r1, 8010958 <__ieee754_atan2+0x188>)
 8010880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010884:	e7c5      	b.n	8010812 <__ieee754_atan2+0x42>
 8010886:	a136      	add	r1, pc, #216	; (adr r1, 8010960 <__ieee754_atan2+0x190>)
 8010888:	e9d1 0100 	ldrd	r0, r1, [r1]
 801088c:	e7c1      	b.n	8010812 <__ieee754_atan2+0x42>
 801088e:	2c02      	cmp	r4, #2
 8010890:	d04b      	beq.n	801092a <__ieee754_atan2+0x15a>
 8010892:	2c03      	cmp	r4, #3
 8010894:	d0d7      	beq.n	8010846 <__ieee754_atan2+0x76>
 8010896:	2c01      	cmp	r4, #1
 8010898:	f04f 0000 	mov.w	r0, #0
 801089c:	d102      	bne.n	80108a4 <__ieee754_atan2+0xd4>
 801089e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80108a2:	e7b6      	b.n	8010812 <__ieee754_atan2+0x42>
 80108a4:	2100      	movs	r1, #0
 80108a6:	e7b4      	b.n	8010812 <__ieee754_atan2+0x42>
 80108a8:	4573      	cmp	r3, lr
 80108aa:	d0d3      	beq.n	8010854 <__ieee754_atan2+0x84>
 80108ac:	1a9b      	subs	r3, r3, r2
 80108ae:	151b      	asrs	r3, r3, #20
 80108b0:	2b3c      	cmp	r3, #60	; 0x3c
 80108b2:	dc1e      	bgt.n	80108f2 <__ieee754_atan2+0x122>
 80108b4:	2f00      	cmp	r7, #0
 80108b6:	da01      	bge.n	80108bc <__ieee754_atan2+0xec>
 80108b8:	333c      	adds	r3, #60	; 0x3c
 80108ba:	db1e      	blt.n	80108fa <__ieee754_atan2+0x12a>
 80108bc:	4632      	mov	r2, r6
 80108be:	463b      	mov	r3, r7
 80108c0:	f7ef ffcc 	bl	800085c <__aeabi_ddiv>
 80108c4:	ec41 0b10 	vmov	d0, r0, r1
 80108c8:	f001 fe7a 	bl	80125c0 <fabs>
 80108cc:	f001 fcd8 	bl	8012280 <atan>
 80108d0:	ec51 0b10 	vmov	r0, r1, d0
 80108d4:	2c01      	cmp	r4, #1
 80108d6:	d013      	beq.n	8010900 <__ieee754_atan2+0x130>
 80108d8:	2c02      	cmp	r4, #2
 80108da:	d015      	beq.n	8010908 <__ieee754_atan2+0x138>
 80108dc:	2c00      	cmp	r4, #0
 80108de:	d098      	beq.n	8010812 <__ieee754_atan2+0x42>
 80108e0:	a321      	add	r3, pc, #132	; (adr r3, 8010968 <__ieee754_atan2+0x198>)
 80108e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e6:	f7ef fcd7 	bl	8000298 <__aeabi_dsub>
 80108ea:	a321      	add	r3, pc, #132	; (adr r3, 8010970 <__ieee754_atan2+0x1a0>)
 80108ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f0:	e014      	b.n	801091c <__ieee754_atan2+0x14c>
 80108f2:	a121      	add	r1, pc, #132	; (adr r1, 8010978 <__ieee754_atan2+0x1a8>)
 80108f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108f8:	e7ec      	b.n	80108d4 <__ieee754_atan2+0x104>
 80108fa:	2000      	movs	r0, #0
 80108fc:	2100      	movs	r1, #0
 80108fe:	e7e9      	b.n	80108d4 <__ieee754_atan2+0x104>
 8010900:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010904:	4619      	mov	r1, r3
 8010906:	e784      	b.n	8010812 <__ieee754_atan2+0x42>
 8010908:	a317      	add	r3, pc, #92	; (adr r3, 8010968 <__ieee754_atan2+0x198>)
 801090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090e:	f7ef fcc3 	bl	8000298 <__aeabi_dsub>
 8010912:	4602      	mov	r2, r0
 8010914:	460b      	mov	r3, r1
 8010916:	a116      	add	r1, pc, #88	; (adr r1, 8010970 <__ieee754_atan2+0x1a0>)
 8010918:	e9d1 0100 	ldrd	r0, r1, [r1]
 801091c:	f7ef fcbc 	bl	8000298 <__aeabi_dsub>
 8010920:	e777      	b.n	8010812 <__ieee754_atan2+0x42>
 8010922:	a117      	add	r1, pc, #92	; (adr r1, 8010980 <__ieee754_atan2+0x1b0>)
 8010924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010928:	e773      	b.n	8010812 <__ieee754_atan2+0x42>
 801092a:	a111      	add	r1, pc, #68	; (adr r1, 8010970 <__ieee754_atan2+0x1a0>)
 801092c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010930:	e76f      	b.n	8010812 <__ieee754_atan2+0x42>
 8010932:	a111      	add	r1, pc, #68	; (adr r1, 8010978 <__ieee754_atan2+0x1a8>)
 8010934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010938:	e76b      	b.n	8010812 <__ieee754_atan2+0x42>
 801093a:	bf00      	nop
 801093c:	f3af 8000 	nop.w
 8010940:	54442d18 	.word	0x54442d18
 8010944:	c00921fb 	.word	0xc00921fb
 8010948:	54442d18 	.word	0x54442d18
 801094c:	bff921fb 	.word	0xbff921fb
 8010950:	54442d18 	.word	0x54442d18
 8010954:	bfe921fb 	.word	0xbfe921fb
 8010958:	7f3321d2 	.word	0x7f3321d2
 801095c:	4002d97c 	.word	0x4002d97c
 8010960:	7f3321d2 	.word	0x7f3321d2
 8010964:	c002d97c 	.word	0xc002d97c
 8010968:	33145c07 	.word	0x33145c07
 801096c:	3ca1a626 	.word	0x3ca1a626
 8010970:	54442d18 	.word	0x54442d18
 8010974:	400921fb 	.word	0x400921fb
 8010978:	54442d18 	.word	0x54442d18
 801097c:	3ff921fb 	.word	0x3ff921fb
 8010980:	54442d18 	.word	0x54442d18
 8010984:	3fe921fb 	.word	0x3fe921fb
 8010988:	7ff00000 	.word	0x7ff00000
 801098c:	00000000 	.word	0x00000000

08010990 <__ieee754_pow>:
 8010990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010994:	b091      	sub	sp, #68	; 0x44
 8010996:	ed8d 1b00 	vstr	d1, [sp]
 801099a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801099e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80109a2:	ea58 0302 	orrs.w	r3, r8, r2
 80109a6:	ec57 6b10 	vmov	r6, r7, d0
 80109aa:	f000 84be 	beq.w	801132a <__ieee754_pow+0x99a>
 80109ae:	4b7a      	ldr	r3, [pc, #488]	; (8010b98 <__ieee754_pow+0x208>)
 80109b0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80109b4:	429c      	cmp	r4, r3
 80109b6:	463d      	mov	r5, r7
 80109b8:	ee10 aa10 	vmov	sl, s0
 80109bc:	dc09      	bgt.n	80109d2 <__ieee754_pow+0x42>
 80109be:	d103      	bne.n	80109c8 <__ieee754_pow+0x38>
 80109c0:	b93e      	cbnz	r6, 80109d2 <__ieee754_pow+0x42>
 80109c2:	45a0      	cmp	r8, r4
 80109c4:	dc0d      	bgt.n	80109e2 <__ieee754_pow+0x52>
 80109c6:	e001      	b.n	80109cc <__ieee754_pow+0x3c>
 80109c8:	4598      	cmp	r8, r3
 80109ca:	dc02      	bgt.n	80109d2 <__ieee754_pow+0x42>
 80109cc:	4598      	cmp	r8, r3
 80109ce:	d10e      	bne.n	80109ee <__ieee754_pow+0x5e>
 80109d0:	b16a      	cbz	r2, 80109ee <__ieee754_pow+0x5e>
 80109d2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80109d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80109da:	ea54 030a 	orrs.w	r3, r4, sl
 80109de:	f000 84a4 	beq.w	801132a <__ieee754_pow+0x99a>
 80109e2:	486e      	ldr	r0, [pc, #440]	; (8010b9c <__ieee754_pow+0x20c>)
 80109e4:	b011      	add	sp, #68	; 0x44
 80109e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ea:	f001 be85 	b.w	80126f8 <nan>
 80109ee:	2d00      	cmp	r5, #0
 80109f0:	da53      	bge.n	8010a9a <__ieee754_pow+0x10a>
 80109f2:	4b6b      	ldr	r3, [pc, #428]	; (8010ba0 <__ieee754_pow+0x210>)
 80109f4:	4598      	cmp	r8, r3
 80109f6:	dc4d      	bgt.n	8010a94 <__ieee754_pow+0x104>
 80109f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80109fc:	4598      	cmp	r8, r3
 80109fe:	dd4c      	ble.n	8010a9a <__ieee754_pow+0x10a>
 8010a00:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010a04:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010a08:	2b14      	cmp	r3, #20
 8010a0a:	dd26      	ble.n	8010a5a <__ieee754_pow+0xca>
 8010a0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010a10:	fa22 f103 	lsr.w	r1, r2, r3
 8010a14:	fa01 f303 	lsl.w	r3, r1, r3
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d13e      	bne.n	8010a9a <__ieee754_pow+0x10a>
 8010a1c:	f001 0101 	and.w	r1, r1, #1
 8010a20:	f1c1 0b02 	rsb	fp, r1, #2
 8010a24:	2a00      	cmp	r2, #0
 8010a26:	d15b      	bne.n	8010ae0 <__ieee754_pow+0x150>
 8010a28:	4b5b      	ldr	r3, [pc, #364]	; (8010b98 <__ieee754_pow+0x208>)
 8010a2a:	4598      	cmp	r8, r3
 8010a2c:	d124      	bne.n	8010a78 <__ieee754_pow+0xe8>
 8010a2e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010a32:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010a36:	ea53 030a 	orrs.w	r3, r3, sl
 8010a3a:	f000 8476 	beq.w	801132a <__ieee754_pow+0x99a>
 8010a3e:	4b59      	ldr	r3, [pc, #356]	; (8010ba4 <__ieee754_pow+0x214>)
 8010a40:	429c      	cmp	r4, r3
 8010a42:	dd2d      	ble.n	8010aa0 <__ieee754_pow+0x110>
 8010a44:	f1b9 0f00 	cmp.w	r9, #0
 8010a48:	f280 8473 	bge.w	8011332 <__ieee754_pow+0x9a2>
 8010a4c:	2000      	movs	r0, #0
 8010a4e:	2100      	movs	r1, #0
 8010a50:	ec41 0b10 	vmov	d0, r0, r1
 8010a54:	b011      	add	sp, #68	; 0x44
 8010a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a5a:	2a00      	cmp	r2, #0
 8010a5c:	d13e      	bne.n	8010adc <__ieee754_pow+0x14c>
 8010a5e:	f1c3 0314 	rsb	r3, r3, #20
 8010a62:	fa48 f103 	asr.w	r1, r8, r3
 8010a66:	fa01 f303 	lsl.w	r3, r1, r3
 8010a6a:	4543      	cmp	r3, r8
 8010a6c:	f040 8469 	bne.w	8011342 <__ieee754_pow+0x9b2>
 8010a70:	f001 0101 	and.w	r1, r1, #1
 8010a74:	f1c1 0b02 	rsb	fp, r1, #2
 8010a78:	4b4b      	ldr	r3, [pc, #300]	; (8010ba8 <__ieee754_pow+0x218>)
 8010a7a:	4598      	cmp	r8, r3
 8010a7c:	d118      	bne.n	8010ab0 <__ieee754_pow+0x120>
 8010a7e:	f1b9 0f00 	cmp.w	r9, #0
 8010a82:	f280 845a 	bge.w	801133a <__ieee754_pow+0x9aa>
 8010a86:	4948      	ldr	r1, [pc, #288]	; (8010ba8 <__ieee754_pow+0x218>)
 8010a88:	4632      	mov	r2, r6
 8010a8a:	463b      	mov	r3, r7
 8010a8c:	2000      	movs	r0, #0
 8010a8e:	f7ef fee5 	bl	800085c <__aeabi_ddiv>
 8010a92:	e7dd      	b.n	8010a50 <__ieee754_pow+0xc0>
 8010a94:	f04f 0b02 	mov.w	fp, #2
 8010a98:	e7c4      	b.n	8010a24 <__ieee754_pow+0x94>
 8010a9a:	f04f 0b00 	mov.w	fp, #0
 8010a9e:	e7c1      	b.n	8010a24 <__ieee754_pow+0x94>
 8010aa0:	f1b9 0f00 	cmp.w	r9, #0
 8010aa4:	dad2      	bge.n	8010a4c <__ieee754_pow+0xbc>
 8010aa6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010aaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010aae:	e7cf      	b.n	8010a50 <__ieee754_pow+0xc0>
 8010ab0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010ab4:	d106      	bne.n	8010ac4 <__ieee754_pow+0x134>
 8010ab6:	4632      	mov	r2, r6
 8010ab8:	463b      	mov	r3, r7
 8010aba:	4610      	mov	r0, r2
 8010abc:	4619      	mov	r1, r3
 8010abe:	f7ef fda3 	bl	8000608 <__aeabi_dmul>
 8010ac2:	e7c5      	b.n	8010a50 <__ieee754_pow+0xc0>
 8010ac4:	4b39      	ldr	r3, [pc, #228]	; (8010bac <__ieee754_pow+0x21c>)
 8010ac6:	4599      	cmp	r9, r3
 8010ac8:	d10a      	bne.n	8010ae0 <__ieee754_pow+0x150>
 8010aca:	2d00      	cmp	r5, #0
 8010acc:	db08      	blt.n	8010ae0 <__ieee754_pow+0x150>
 8010ace:	ec47 6b10 	vmov	d0, r6, r7
 8010ad2:	b011      	add	sp, #68	; 0x44
 8010ad4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad8:	f000 be5c 	b.w	8011794 <__ieee754_sqrt>
 8010adc:	f04f 0b00 	mov.w	fp, #0
 8010ae0:	ec47 6b10 	vmov	d0, r6, r7
 8010ae4:	f001 fd6c 	bl	80125c0 <fabs>
 8010ae8:	ec51 0b10 	vmov	r0, r1, d0
 8010aec:	f1ba 0f00 	cmp.w	sl, #0
 8010af0:	d127      	bne.n	8010b42 <__ieee754_pow+0x1b2>
 8010af2:	b124      	cbz	r4, 8010afe <__ieee754_pow+0x16e>
 8010af4:	4b2c      	ldr	r3, [pc, #176]	; (8010ba8 <__ieee754_pow+0x218>)
 8010af6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d121      	bne.n	8010b42 <__ieee754_pow+0x1b2>
 8010afe:	f1b9 0f00 	cmp.w	r9, #0
 8010b02:	da05      	bge.n	8010b10 <__ieee754_pow+0x180>
 8010b04:	4602      	mov	r2, r0
 8010b06:	460b      	mov	r3, r1
 8010b08:	2000      	movs	r0, #0
 8010b0a:	4927      	ldr	r1, [pc, #156]	; (8010ba8 <__ieee754_pow+0x218>)
 8010b0c:	f7ef fea6 	bl	800085c <__aeabi_ddiv>
 8010b10:	2d00      	cmp	r5, #0
 8010b12:	da9d      	bge.n	8010a50 <__ieee754_pow+0xc0>
 8010b14:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010b18:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b1c:	ea54 030b 	orrs.w	r3, r4, fp
 8010b20:	d108      	bne.n	8010b34 <__ieee754_pow+0x1a4>
 8010b22:	4602      	mov	r2, r0
 8010b24:	460b      	mov	r3, r1
 8010b26:	4610      	mov	r0, r2
 8010b28:	4619      	mov	r1, r3
 8010b2a:	f7ef fbb5 	bl	8000298 <__aeabi_dsub>
 8010b2e:	4602      	mov	r2, r0
 8010b30:	460b      	mov	r3, r1
 8010b32:	e7ac      	b.n	8010a8e <__ieee754_pow+0xfe>
 8010b34:	f1bb 0f01 	cmp.w	fp, #1
 8010b38:	d18a      	bne.n	8010a50 <__ieee754_pow+0xc0>
 8010b3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b3e:	4619      	mov	r1, r3
 8010b40:	e786      	b.n	8010a50 <__ieee754_pow+0xc0>
 8010b42:	0fed      	lsrs	r5, r5, #31
 8010b44:	1e6b      	subs	r3, r5, #1
 8010b46:	930d      	str	r3, [sp, #52]	; 0x34
 8010b48:	ea5b 0303 	orrs.w	r3, fp, r3
 8010b4c:	d102      	bne.n	8010b54 <__ieee754_pow+0x1c4>
 8010b4e:	4632      	mov	r2, r6
 8010b50:	463b      	mov	r3, r7
 8010b52:	e7e8      	b.n	8010b26 <__ieee754_pow+0x196>
 8010b54:	4b16      	ldr	r3, [pc, #88]	; (8010bb0 <__ieee754_pow+0x220>)
 8010b56:	4598      	cmp	r8, r3
 8010b58:	f340 80fe 	ble.w	8010d58 <__ieee754_pow+0x3c8>
 8010b5c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010b60:	4598      	cmp	r8, r3
 8010b62:	dd0a      	ble.n	8010b7a <__ieee754_pow+0x1ea>
 8010b64:	4b0f      	ldr	r3, [pc, #60]	; (8010ba4 <__ieee754_pow+0x214>)
 8010b66:	429c      	cmp	r4, r3
 8010b68:	dc0d      	bgt.n	8010b86 <__ieee754_pow+0x1f6>
 8010b6a:	f1b9 0f00 	cmp.w	r9, #0
 8010b6e:	f6bf af6d 	bge.w	8010a4c <__ieee754_pow+0xbc>
 8010b72:	a307      	add	r3, pc, #28	; (adr r3, 8010b90 <__ieee754_pow+0x200>)
 8010b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b78:	e79f      	b.n	8010aba <__ieee754_pow+0x12a>
 8010b7a:	4b0e      	ldr	r3, [pc, #56]	; (8010bb4 <__ieee754_pow+0x224>)
 8010b7c:	429c      	cmp	r4, r3
 8010b7e:	ddf4      	ble.n	8010b6a <__ieee754_pow+0x1da>
 8010b80:	4b09      	ldr	r3, [pc, #36]	; (8010ba8 <__ieee754_pow+0x218>)
 8010b82:	429c      	cmp	r4, r3
 8010b84:	dd18      	ble.n	8010bb8 <__ieee754_pow+0x228>
 8010b86:	f1b9 0f00 	cmp.w	r9, #0
 8010b8a:	dcf2      	bgt.n	8010b72 <__ieee754_pow+0x1e2>
 8010b8c:	e75e      	b.n	8010a4c <__ieee754_pow+0xbc>
 8010b8e:	bf00      	nop
 8010b90:	8800759c 	.word	0x8800759c
 8010b94:	7e37e43c 	.word	0x7e37e43c
 8010b98:	7ff00000 	.word	0x7ff00000
 8010b9c:	08012d49 	.word	0x08012d49
 8010ba0:	433fffff 	.word	0x433fffff
 8010ba4:	3fefffff 	.word	0x3fefffff
 8010ba8:	3ff00000 	.word	0x3ff00000
 8010bac:	3fe00000 	.word	0x3fe00000
 8010bb0:	41e00000 	.word	0x41e00000
 8010bb4:	3feffffe 	.word	0x3feffffe
 8010bb8:	2200      	movs	r2, #0
 8010bba:	4b63      	ldr	r3, [pc, #396]	; (8010d48 <__ieee754_pow+0x3b8>)
 8010bbc:	f7ef fb6c 	bl	8000298 <__aeabi_dsub>
 8010bc0:	a355      	add	r3, pc, #340	; (adr r3, 8010d18 <__ieee754_pow+0x388>)
 8010bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	460d      	mov	r5, r1
 8010bca:	f7ef fd1d 	bl	8000608 <__aeabi_dmul>
 8010bce:	a354      	add	r3, pc, #336	; (adr r3, 8010d20 <__ieee754_pow+0x390>)
 8010bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd4:	4606      	mov	r6, r0
 8010bd6:	460f      	mov	r7, r1
 8010bd8:	4620      	mov	r0, r4
 8010bda:	4629      	mov	r1, r5
 8010bdc:	f7ef fd14 	bl	8000608 <__aeabi_dmul>
 8010be0:	2200      	movs	r2, #0
 8010be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010be6:	4b59      	ldr	r3, [pc, #356]	; (8010d4c <__ieee754_pow+0x3bc>)
 8010be8:	4620      	mov	r0, r4
 8010bea:	4629      	mov	r1, r5
 8010bec:	f7ef fd0c 	bl	8000608 <__aeabi_dmul>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	a14c      	add	r1, pc, #304	; (adr r1, 8010d28 <__ieee754_pow+0x398>)
 8010bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bfa:	f7ef fb4d 	bl	8000298 <__aeabi_dsub>
 8010bfe:	4622      	mov	r2, r4
 8010c00:	462b      	mov	r3, r5
 8010c02:	f7ef fd01 	bl	8000608 <__aeabi_dmul>
 8010c06:	4602      	mov	r2, r0
 8010c08:	460b      	mov	r3, r1
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	4950      	ldr	r1, [pc, #320]	; (8010d50 <__ieee754_pow+0x3c0>)
 8010c0e:	f7ef fb43 	bl	8000298 <__aeabi_dsub>
 8010c12:	4622      	mov	r2, r4
 8010c14:	462b      	mov	r3, r5
 8010c16:	4680      	mov	r8, r0
 8010c18:	4689      	mov	r9, r1
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	f7ef fcf3 	bl	8000608 <__aeabi_dmul>
 8010c22:	4602      	mov	r2, r0
 8010c24:	460b      	mov	r3, r1
 8010c26:	4640      	mov	r0, r8
 8010c28:	4649      	mov	r1, r9
 8010c2a:	f7ef fced 	bl	8000608 <__aeabi_dmul>
 8010c2e:	a340      	add	r3, pc, #256	; (adr r3, 8010d30 <__ieee754_pow+0x3a0>)
 8010c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c34:	f7ef fce8 	bl	8000608 <__aeabi_dmul>
 8010c38:	4602      	mov	r2, r0
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c40:	f7ef fb2a 	bl	8000298 <__aeabi_dsub>
 8010c44:	4602      	mov	r2, r0
 8010c46:	460b      	mov	r3, r1
 8010c48:	4604      	mov	r4, r0
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	4630      	mov	r0, r6
 8010c4e:	4639      	mov	r1, r7
 8010c50:	f7ef fb24 	bl	800029c <__adddf3>
 8010c54:	2000      	movs	r0, #0
 8010c56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c5a:	4632      	mov	r2, r6
 8010c5c:	463b      	mov	r3, r7
 8010c5e:	f7ef fb1b 	bl	8000298 <__aeabi_dsub>
 8010c62:	4602      	mov	r2, r0
 8010c64:	460b      	mov	r3, r1
 8010c66:	4620      	mov	r0, r4
 8010c68:	4629      	mov	r1, r5
 8010c6a:	f7ef fb15 	bl	8000298 <__aeabi_dsub>
 8010c6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c70:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010c74:	4313      	orrs	r3, r2
 8010c76:	4606      	mov	r6, r0
 8010c78:	460f      	mov	r7, r1
 8010c7a:	f040 81eb 	bne.w	8011054 <__ieee754_pow+0x6c4>
 8010c7e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010d38 <__ieee754_pow+0x3a8>
 8010c82:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010c86:	2400      	movs	r4, #0
 8010c88:	4622      	mov	r2, r4
 8010c8a:	462b      	mov	r3, r5
 8010c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c94:	f7ef fb00 	bl	8000298 <__aeabi_dsub>
 8010c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c9c:	f7ef fcb4 	bl	8000608 <__aeabi_dmul>
 8010ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ca4:	4680      	mov	r8, r0
 8010ca6:	4689      	mov	r9, r1
 8010ca8:	4630      	mov	r0, r6
 8010caa:	4639      	mov	r1, r7
 8010cac:	f7ef fcac 	bl	8000608 <__aeabi_dmul>
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	460b      	mov	r3, r1
 8010cb4:	4640      	mov	r0, r8
 8010cb6:	4649      	mov	r1, r9
 8010cb8:	f7ef faf0 	bl	800029c <__adddf3>
 8010cbc:	4622      	mov	r2, r4
 8010cbe:	462b      	mov	r3, r5
 8010cc0:	4680      	mov	r8, r0
 8010cc2:	4689      	mov	r9, r1
 8010cc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cc8:	f7ef fc9e 	bl	8000608 <__aeabi_dmul>
 8010ccc:	460b      	mov	r3, r1
 8010cce:	4604      	mov	r4, r0
 8010cd0:	460d      	mov	r5, r1
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	4649      	mov	r1, r9
 8010cd6:	4640      	mov	r0, r8
 8010cd8:	e9cd 4500 	strd	r4, r5, [sp]
 8010cdc:	f7ef fade 	bl	800029c <__adddf3>
 8010ce0:	4b1c      	ldr	r3, [pc, #112]	; (8010d54 <__ieee754_pow+0x3c4>)
 8010ce2:	4299      	cmp	r1, r3
 8010ce4:	4606      	mov	r6, r0
 8010ce6:	460f      	mov	r7, r1
 8010ce8:	468b      	mov	fp, r1
 8010cea:	f340 82f7 	ble.w	80112dc <__ieee754_pow+0x94c>
 8010cee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010cf2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010cf6:	4303      	orrs	r3, r0
 8010cf8:	f000 81ea 	beq.w	80110d0 <__ieee754_pow+0x740>
 8010cfc:	a310      	add	r3, pc, #64	; (adr r3, 8010d40 <__ieee754_pow+0x3b0>)
 8010cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d06:	f7ef fc7f 	bl	8000608 <__aeabi_dmul>
 8010d0a:	a30d      	add	r3, pc, #52	; (adr r3, 8010d40 <__ieee754_pow+0x3b0>)
 8010d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d10:	e6d5      	b.n	8010abe <__ieee754_pow+0x12e>
 8010d12:	bf00      	nop
 8010d14:	f3af 8000 	nop.w
 8010d18:	60000000 	.word	0x60000000
 8010d1c:	3ff71547 	.word	0x3ff71547
 8010d20:	f85ddf44 	.word	0xf85ddf44
 8010d24:	3e54ae0b 	.word	0x3e54ae0b
 8010d28:	55555555 	.word	0x55555555
 8010d2c:	3fd55555 	.word	0x3fd55555
 8010d30:	652b82fe 	.word	0x652b82fe
 8010d34:	3ff71547 	.word	0x3ff71547
 8010d38:	00000000 	.word	0x00000000
 8010d3c:	bff00000 	.word	0xbff00000
 8010d40:	8800759c 	.word	0x8800759c
 8010d44:	7e37e43c 	.word	0x7e37e43c
 8010d48:	3ff00000 	.word	0x3ff00000
 8010d4c:	3fd00000 	.word	0x3fd00000
 8010d50:	3fe00000 	.word	0x3fe00000
 8010d54:	408fffff 	.word	0x408fffff
 8010d58:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010d5c:	f04f 0200 	mov.w	r2, #0
 8010d60:	da05      	bge.n	8010d6e <__ieee754_pow+0x3de>
 8010d62:	4bd3      	ldr	r3, [pc, #844]	; (80110b0 <__ieee754_pow+0x720>)
 8010d64:	f7ef fc50 	bl	8000608 <__aeabi_dmul>
 8010d68:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010d6c:	460c      	mov	r4, r1
 8010d6e:	1523      	asrs	r3, r4, #20
 8010d70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010d74:	4413      	add	r3, r2
 8010d76:	9309      	str	r3, [sp, #36]	; 0x24
 8010d78:	4bce      	ldr	r3, [pc, #824]	; (80110b4 <__ieee754_pow+0x724>)
 8010d7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010d7e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010d82:	429c      	cmp	r4, r3
 8010d84:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010d88:	dd08      	ble.n	8010d9c <__ieee754_pow+0x40c>
 8010d8a:	4bcb      	ldr	r3, [pc, #812]	; (80110b8 <__ieee754_pow+0x728>)
 8010d8c:	429c      	cmp	r4, r3
 8010d8e:	f340 815e 	ble.w	801104e <__ieee754_pow+0x6be>
 8010d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d94:	3301      	adds	r3, #1
 8010d96:	9309      	str	r3, [sp, #36]	; 0x24
 8010d98:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010d9c:	f04f 0a00 	mov.w	sl, #0
 8010da0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010da4:	930c      	str	r3, [sp, #48]	; 0x30
 8010da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010da8:	4bc4      	ldr	r3, [pc, #784]	; (80110bc <__ieee754_pow+0x72c>)
 8010daa:	4413      	add	r3, r2
 8010dac:	ed93 7b00 	vldr	d7, [r3]
 8010db0:	4629      	mov	r1, r5
 8010db2:	ec53 2b17 	vmov	r2, r3, d7
 8010db6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010dba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010dbe:	f7ef fa6b 	bl	8000298 <__aeabi_dsub>
 8010dc2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010dc6:	4606      	mov	r6, r0
 8010dc8:	460f      	mov	r7, r1
 8010dca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010dce:	f7ef fa65 	bl	800029c <__adddf3>
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	2000      	movs	r0, #0
 8010dd8:	49b9      	ldr	r1, [pc, #740]	; (80110c0 <__ieee754_pow+0x730>)
 8010dda:	f7ef fd3f 	bl	800085c <__aeabi_ddiv>
 8010dde:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010de2:	4602      	mov	r2, r0
 8010de4:	460b      	mov	r3, r1
 8010de6:	4630      	mov	r0, r6
 8010de8:	4639      	mov	r1, r7
 8010dea:	f7ef fc0d 	bl	8000608 <__aeabi_dmul>
 8010dee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010df2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010df6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	9302      	str	r3, [sp, #8]
 8010dfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010e02:	106d      	asrs	r5, r5, #1
 8010e04:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010e08:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010e12:	4640      	mov	r0, r8
 8010e14:	4649      	mov	r1, r9
 8010e16:	4614      	mov	r4, r2
 8010e18:	461d      	mov	r5, r3
 8010e1a:	f7ef fbf5 	bl	8000608 <__aeabi_dmul>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	460b      	mov	r3, r1
 8010e22:	4630      	mov	r0, r6
 8010e24:	4639      	mov	r1, r7
 8010e26:	f7ef fa37 	bl	8000298 <__aeabi_dsub>
 8010e2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e2e:	4606      	mov	r6, r0
 8010e30:	460f      	mov	r7, r1
 8010e32:	4620      	mov	r0, r4
 8010e34:	4629      	mov	r1, r5
 8010e36:	f7ef fa2f 	bl	8000298 <__aeabi_dsub>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	460b      	mov	r3, r1
 8010e3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010e42:	f7ef fa29 	bl	8000298 <__aeabi_dsub>
 8010e46:	4642      	mov	r2, r8
 8010e48:	464b      	mov	r3, r9
 8010e4a:	f7ef fbdd 	bl	8000608 <__aeabi_dmul>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	460b      	mov	r3, r1
 8010e52:	4630      	mov	r0, r6
 8010e54:	4639      	mov	r1, r7
 8010e56:	f7ef fa1f 	bl	8000298 <__aeabi_dsub>
 8010e5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010e5e:	f7ef fbd3 	bl	8000608 <__aeabi_dmul>
 8010e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010e6a:	4610      	mov	r0, r2
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	f7ef fbcb 	bl	8000608 <__aeabi_dmul>
 8010e72:	a37b      	add	r3, pc, #492	; (adr r3, 8011060 <__ieee754_pow+0x6d0>)
 8010e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e78:	4604      	mov	r4, r0
 8010e7a:	460d      	mov	r5, r1
 8010e7c:	f7ef fbc4 	bl	8000608 <__aeabi_dmul>
 8010e80:	a379      	add	r3, pc, #484	; (adr r3, 8011068 <__ieee754_pow+0x6d8>)
 8010e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e86:	f7ef fa09 	bl	800029c <__adddf3>
 8010e8a:	4622      	mov	r2, r4
 8010e8c:	462b      	mov	r3, r5
 8010e8e:	f7ef fbbb 	bl	8000608 <__aeabi_dmul>
 8010e92:	a377      	add	r3, pc, #476	; (adr r3, 8011070 <__ieee754_pow+0x6e0>)
 8010e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e98:	f7ef fa00 	bl	800029c <__adddf3>
 8010e9c:	4622      	mov	r2, r4
 8010e9e:	462b      	mov	r3, r5
 8010ea0:	f7ef fbb2 	bl	8000608 <__aeabi_dmul>
 8010ea4:	a374      	add	r3, pc, #464	; (adr r3, 8011078 <__ieee754_pow+0x6e8>)
 8010ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eaa:	f7ef f9f7 	bl	800029c <__adddf3>
 8010eae:	4622      	mov	r2, r4
 8010eb0:	462b      	mov	r3, r5
 8010eb2:	f7ef fba9 	bl	8000608 <__aeabi_dmul>
 8010eb6:	a372      	add	r3, pc, #456	; (adr r3, 8011080 <__ieee754_pow+0x6f0>)
 8010eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebc:	f7ef f9ee 	bl	800029c <__adddf3>
 8010ec0:	4622      	mov	r2, r4
 8010ec2:	462b      	mov	r3, r5
 8010ec4:	f7ef fba0 	bl	8000608 <__aeabi_dmul>
 8010ec8:	a36f      	add	r3, pc, #444	; (adr r3, 8011088 <__ieee754_pow+0x6f8>)
 8010eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ece:	f7ef f9e5 	bl	800029c <__adddf3>
 8010ed2:	4622      	mov	r2, r4
 8010ed4:	4606      	mov	r6, r0
 8010ed6:	460f      	mov	r7, r1
 8010ed8:	462b      	mov	r3, r5
 8010eda:	4620      	mov	r0, r4
 8010edc:	4629      	mov	r1, r5
 8010ede:	f7ef fb93 	bl	8000608 <__aeabi_dmul>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	4639      	mov	r1, r7
 8010eea:	f7ef fb8d 	bl	8000608 <__aeabi_dmul>
 8010eee:	4642      	mov	r2, r8
 8010ef0:	4604      	mov	r4, r0
 8010ef2:	460d      	mov	r5, r1
 8010ef4:	464b      	mov	r3, r9
 8010ef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010efa:	f7ef f9cf 	bl	800029c <__adddf3>
 8010efe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f02:	f7ef fb81 	bl	8000608 <__aeabi_dmul>
 8010f06:	4622      	mov	r2, r4
 8010f08:	462b      	mov	r3, r5
 8010f0a:	f7ef f9c7 	bl	800029c <__adddf3>
 8010f0e:	4642      	mov	r2, r8
 8010f10:	4606      	mov	r6, r0
 8010f12:	460f      	mov	r7, r1
 8010f14:	464b      	mov	r3, r9
 8010f16:	4640      	mov	r0, r8
 8010f18:	4649      	mov	r1, r9
 8010f1a:	f7ef fb75 	bl	8000608 <__aeabi_dmul>
 8010f1e:	2200      	movs	r2, #0
 8010f20:	4b68      	ldr	r3, [pc, #416]	; (80110c4 <__ieee754_pow+0x734>)
 8010f22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010f26:	f7ef f9b9 	bl	800029c <__adddf3>
 8010f2a:	4632      	mov	r2, r6
 8010f2c:	463b      	mov	r3, r7
 8010f2e:	f7ef f9b5 	bl	800029c <__adddf3>
 8010f32:	9802      	ldr	r0, [sp, #8]
 8010f34:	460d      	mov	r5, r1
 8010f36:	4604      	mov	r4, r0
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	4640      	mov	r0, r8
 8010f3e:	4649      	mov	r1, r9
 8010f40:	f7ef fb62 	bl	8000608 <__aeabi_dmul>
 8010f44:	2200      	movs	r2, #0
 8010f46:	4680      	mov	r8, r0
 8010f48:	4689      	mov	r9, r1
 8010f4a:	4b5e      	ldr	r3, [pc, #376]	; (80110c4 <__ieee754_pow+0x734>)
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	4629      	mov	r1, r5
 8010f50:	f7ef f9a2 	bl	8000298 <__aeabi_dsub>
 8010f54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010f58:	f7ef f99e 	bl	8000298 <__aeabi_dsub>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	460b      	mov	r3, r1
 8010f60:	4630      	mov	r0, r6
 8010f62:	4639      	mov	r1, r7
 8010f64:	f7ef f998 	bl	8000298 <__aeabi_dsub>
 8010f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f6c:	f7ef fb4c 	bl	8000608 <__aeabi_dmul>
 8010f70:	4622      	mov	r2, r4
 8010f72:	4606      	mov	r6, r0
 8010f74:	460f      	mov	r7, r1
 8010f76:	462b      	mov	r3, r5
 8010f78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f7c:	f7ef fb44 	bl	8000608 <__aeabi_dmul>
 8010f80:	4602      	mov	r2, r0
 8010f82:	460b      	mov	r3, r1
 8010f84:	4630      	mov	r0, r6
 8010f86:	4639      	mov	r1, r7
 8010f88:	f7ef f988 	bl	800029c <__adddf3>
 8010f8c:	4606      	mov	r6, r0
 8010f8e:	460f      	mov	r7, r1
 8010f90:	4602      	mov	r2, r0
 8010f92:	460b      	mov	r3, r1
 8010f94:	4640      	mov	r0, r8
 8010f96:	4649      	mov	r1, r9
 8010f98:	f7ef f980 	bl	800029c <__adddf3>
 8010f9c:	9802      	ldr	r0, [sp, #8]
 8010f9e:	a33c      	add	r3, pc, #240	; (adr r3, 8011090 <__ieee754_pow+0x700>)
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	460d      	mov	r5, r1
 8010fa8:	f7ef fb2e 	bl	8000608 <__aeabi_dmul>
 8010fac:	4642      	mov	r2, r8
 8010fae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010fb2:	464b      	mov	r3, r9
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	4629      	mov	r1, r5
 8010fb8:	f7ef f96e 	bl	8000298 <__aeabi_dsub>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	f7ef f968 	bl	8000298 <__aeabi_dsub>
 8010fc8:	a333      	add	r3, pc, #204	; (adr r3, 8011098 <__ieee754_pow+0x708>)
 8010fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fce:	f7ef fb1b 	bl	8000608 <__aeabi_dmul>
 8010fd2:	a333      	add	r3, pc, #204	; (adr r3, 80110a0 <__ieee754_pow+0x710>)
 8010fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd8:	4606      	mov	r6, r0
 8010fda:	460f      	mov	r7, r1
 8010fdc:	4620      	mov	r0, r4
 8010fde:	4629      	mov	r1, r5
 8010fe0:	f7ef fb12 	bl	8000608 <__aeabi_dmul>
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	4630      	mov	r0, r6
 8010fea:	4639      	mov	r1, r7
 8010fec:	f7ef f956 	bl	800029c <__adddf3>
 8010ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ff2:	4b35      	ldr	r3, [pc, #212]	; (80110c8 <__ieee754_pow+0x738>)
 8010ff4:	4413      	add	r3, r2
 8010ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffa:	f7ef f94f 	bl	800029c <__adddf3>
 8010ffe:	4604      	mov	r4, r0
 8011000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011002:	460d      	mov	r5, r1
 8011004:	f7ef fa96 	bl	8000534 <__aeabi_i2d>
 8011008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801100a:	4b30      	ldr	r3, [pc, #192]	; (80110cc <__ieee754_pow+0x73c>)
 801100c:	4413      	add	r3, r2
 801100e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011012:	4606      	mov	r6, r0
 8011014:	460f      	mov	r7, r1
 8011016:	4622      	mov	r2, r4
 8011018:	462b      	mov	r3, r5
 801101a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801101e:	f7ef f93d 	bl	800029c <__adddf3>
 8011022:	4642      	mov	r2, r8
 8011024:	464b      	mov	r3, r9
 8011026:	f7ef f939 	bl	800029c <__adddf3>
 801102a:	4632      	mov	r2, r6
 801102c:	463b      	mov	r3, r7
 801102e:	f7ef f935 	bl	800029c <__adddf3>
 8011032:	9802      	ldr	r0, [sp, #8]
 8011034:	4632      	mov	r2, r6
 8011036:	463b      	mov	r3, r7
 8011038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801103c:	f7ef f92c 	bl	8000298 <__aeabi_dsub>
 8011040:	4642      	mov	r2, r8
 8011042:	464b      	mov	r3, r9
 8011044:	f7ef f928 	bl	8000298 <__aeabi_dsub>
 8011048:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801104c:	e607      	b.n	8010c5e <__ieee754_pow+0x2ce>
 801104e:	f04f 0a01 	mov.w	sl, #1
 8011052:	e6a5      	b.n	8010da0 <__ieee754_pow+0x410>
 8011054:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80110a8 <__ieee754_pow+0x718>
 8011058:	e613      	b.n	8010c82 <__ieee754_pow+0x2f2>
 801105a:	bf00      	nop
 801105c:	f3af 8000 	nop.w
 8011060:	4a454eef 	.word	0x4a454eef
 8011064:	3fca7e28 	.word	0x3fca7e28
 8011068:	93c9db65 	.word	0x93c9db65
 801106c:	3fcd864a 	.word	0x3fcd864a
 8011070:	a91d4101 	.word	0xa91d4101
 8011074:	3fd17460 	.word	0x3fd17460
 8011078:	518f264d 	.word	0x518f264d
 801107c:	3fd55555 	.word	0x3fd55555
 8011080:	db6fabff 	.word	0xdb6fabff
 8011084:	3fdb6db6 	.word	0x3fdb6db6
 8011088:	33333303 	.word	0x33333303
 801108c:	3fe33333 	.word	0x3fe33333
 8011090:	e0000000 	.word	0xe0000000
 8011094:	3feec709 	.word	0x3feec709
 8011098:	dc3a03fd 	.word	0xdc3a03fd
 801109c:	3feec709 	.word	0x3feec709
 80110a0:	145b01f5 	.word	0x145b01f5
 80110a4:	be3e2fe0 	.word	0xbe3e2fe0
 80110a8:	00000000 	.word	0x00000000
 80110ac:	3ff00000 	.word	0x3ff00000
 80110b0:	43400000 	.word	0x43400000
 80110b4:	0003988e 	.word	0x0003988e
 80110b8:	000bb679 	.word	0x000bb679
 80110bc:	08012e80 	.word	0x08012e80
 80110c0:	3ff00000 	.word	0x3ff00000
 80110c4:	40080000 	.word	0x40080000
 80110c8:	08012ea0 	.word	0x08012ea0
 80110cc:	08012e90 	.word	0x08012e90
 80110d0:	a3b4      	add	r3, pc, #720	; (adr r3, 80113a4 <__ieee754_pow+0xa14>)
 80110d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d6:	4640      	mov	r0, r8
 80110d8:	4649      	mov	r1, r9
 80110da:	f7ef f8df 	bl	800029c <__adddf3>
 80110de:	4622      	mov	r2, r4
 80110e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80110e4:	462b      	mov	r3, r5
 80110e6:	4630      	mov	r0, r6
 80110e8:	4639      	mov	r1, r7
 80110ea:	f7ef f8d5 	bl	8000298 <__aeabi_dsub>
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80110f6:	f7ef fd17 	bl	8000b28 <__aeabi_dcmpgt>
 80110fa:	2800      	cmp	r0, #0
 80110fc:	f47f adfe 	bne.w	8010cfc <__ieee754_pow+0x36c>
 8011100:	4aa3      	ldr	r2, [pc, #652]	; (8011390 <__ieee754_pow+0xa00>)
 8011102:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011106:	4293      	cmp	r3, r2
 8011108:	f340 810a 	ble.w	8011320 <__ieee754_pow+0x990>
 801110c:	151b      	asrs	r3, r3, #20
 801110e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011112:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011116:	fa4a f303 	asr.w	r3, sl, r3
 801111a:	445b      	add	r3, fp
 801111c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011120:	4e9c      	ldr	r6, [pc, #624]	; (8011394 <__ieee754_pow+0xa04>)
 8011122:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011126:	4116      	asrs	r6, r2
 8011128:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801112c:	2000      	movs	r0, #0
 801112e:	ea23 0106 	bic.w	r1, r3, r6
 8011132:	f1c2 0214 	rsb	r2, r2, #20
 8011136:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801113a:	fa4a fa02 	asr.w	sl, sl, r2
 801113e:	f1bb 0f00 	cmp.w	fp, #0
 8011142:	4602      	mov	r2, r0
 8011144:	460b      	mov	r3, r1
 8011146:	4620      	mov	r0, r4
 8011148:	4629      	mov	r1, r5
 801114a:	bfb8      	it	lt
 801114c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011150:	f7ef f8a2 	bl	8000298 <__aeabi_dsub>
 8011154:	e9cd 0100 	strd	r0, r1, [sp]
 8011158:	4642      	mov	r2, r8
 801115a:	464b      	mov	r3, r9
 801115c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011160:	f7ef f89c 	bl	800029c <__adddf3>
 8011164:	2000      	movs	r0, #0
 8011166:	a378      	add	r3, pc, #480	; (adr r3, 8011348 <__ieee754_pow+0x9b8>)
 8011168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116c:	4604      	mov	r4, r0
 801116e:	460d      	mov	r5, r1
 8011170:	f7ef fa4a 	bl	8000608 <__aeabi_dmul>
 8011174:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011178:	4606      	mov	r6, r0
 801117a:	460f      	mov	r7, r1
 801117c:	4620      	mov	r0, r4
 801117e:	4629      	mov	r1, r5
 8011180:	f7ef f88a 	bl	8000298 <__aeabi_dsub>
 8011184:	4602      	mov	r2, r0
 8011186:	460b      	mov	r3, r1
 8011188:	4640      	mov	r0, r8
 801118a:	4649      	mov	r1, r9
 801118c:	f7ef f884 	bl	8000298 <__aeabi_dsub>
 8011190:	a36f      	add	r3, pc, #444	; (adr r3, 8011350 <__ieee754_pow+0x9c0>)
 8011192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011196:	f7ef fa37 	bl	8000608 <__aeabi_dmul>
 801119a:	a36f      	add	r3, pc, #444	; (adr r3, 8011358 <__ieee754_pow+0x9c8>)
 801119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a0:	4680      	mov	r8, r0
 80111a2:	4689      	mov	r9, r1
 80111a4:	4620      	mov	r0, r4
 80111a6:	4629      	mov	r1, r5
 80111a8:	f7ef fa2e 	bl	8000608 <__aeabi_dmul>
 80111ac:	4602      	mov	r2, r0
 80111ae:	460b      	mov	r3, r1
 80111b0:	4640      	mov	r0, r8
 80111b2:	4649      	mov	r1, r9
 80111b4:	f7ef f872 	bl	800029c <__adddf3>
 80111b8:	4604      	mov	r4, r0
 80111ba:	460d      	mov	r5, r1
 80111bc:	4602      	mov	r2, r0
 80111be:	460b      	mov	r3, r1
 80111c0:	4630      	mov	r0, r6
 80111c2:	4639      	mov	r1, r7
 80111c4:	f7ef f86a 	bl	800029c <__adddf3>
 80111c8:	4632      	mov	r2, r6
 80111ca:	463b      	mov	r3, r7
 80111cc:	4680      	mov	r8, r0
 80111ce:	4689      	mov	r9, r1
 80111d0:	f7ef f862 	bl	8000298 <__aeabi_dsub>
 80111d4:	4602      	mov	r2, r0
 80111d6:	460b      	mov	r3, r1
 80111d8:	4620      	mov	r0, r4
 80111da:	4629      	mov	r1, r5
 80111dc:	f7ef f85c 	bl	8000298 <__aeabi_dsub>
 80111e0:	4642      	mov	r2, r8
 80111e2:	4606      	mov	r6, r0
 80111e4:	460f      	mov	r7, r1
 80111e6:	464b      	mov	r3, r9
 80111e8:	4640      	mov	r0, r8
 80111ea:	4649      	mov	r1, r9
 80111ec:	f7ef fa0c 	bl	8000608 <__aeabi_dmul>
 80111f0:	a35b      	add	r3, pc, #364	; (adr r3, 8011360 <__ieee754_pow+0x9d0>)
 80111f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f6:	4604      	mov	r4, r0
 80111f8:	460d      	mov	r5, r1
 80111fa:	f7ef fa05 	bl	8000608 <__aeabi_dmul>
 80111fe:	a35a      	add	r3, pc, #360	; (adr r3, 8011368 <__ieee754_pow+0x9d8>)
 8011200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011204:	f7ef f848 	bl	8000298 <__aeabi_dsub>
 8011208:	4622      	mov	r2, r4
 801120a:	462b      	mov	r3, r5
 801120c:	f7ef f9fc 	bl	8000608 <__aeabi_dmul>
 8011210:	a357      	add	r3, pc, #348	; (adr r3, 8011370 <__ieee754_pow+0x9e0>)
 8011212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011216:	f7ef f841 	bl	800029c <__adddf3>
 801121a:	4622      	mov	r2, r4
 801121c:	462b      	mov	r3, r5
 801121e:	f7ef f9f3 	bl	8000608 <__aeabi_dmul>
 8011222:	a355      	add	r3, pc, #340	; (adr r3, 8011378 <__ieee754_pow+0x9e8>)
 8011224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011228:	f7ef f836 	bl	8000298 <__aeabi_dsub>
 801122c:	4622      	mov	r2, r4
 801122e:	462b      	mov	r3, r5
 8011230:	f7ef f9ea 	bl	8000608 <__aeabi_dmul>
 8011234:	a352      	add	r3, pc, #328	; (adr r3, 8011380 <__ieee754_pow+0x9f0>)
 8011236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123a:	f7ef f82f 	bl	800029c <__adddf3>
 801123e:	4622      	mov	r2, r4
 8011240:	462b      	mov	r3, r5
 8011242:	f7ef f9e1 	bl	8000608 <__aeabi_dmul>
 8011246:	4602      	mov	r2, r0
 8011248:	460b      	mov	r3, r1
 801124a:	4640      	mov	r0, r8
 801124c:	4649      	mov	r1, r9
 801124e:	f7ef f823 	bl	8000298 <__aeabi_dsub>
 8011252:	4604      	mov	r4, r0
 8011254:	460d      	mov	r5, r1
 8011256:	4602      	mov	r2, r0
 8011258:	460b      	mov	r3, r1
 801125a:	4640      	mov	r0, r8
 801125c:	4649      	mov	r1, r9
 801125e:	f7ef f9d3 	bl	8000608 <__aeabi_dmul>
 8011262:	2200      	movs	r2, #0
 8011264:	e9cd 0100 	strd	r0, r1, [sp]
 8011268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801126c:	4620      	mov	r0, r4
 801126e:	4629      	mov	r1, r5
 8011270:	f7ef f812 	bl	8000298 <__aeabi_dsub>
 8011274:	4602      	mov	r2, r0
 8011276:	460b      	mov	r3, r1
 8011278:	e9dd 0100 	ldrd	r0, r1, [sp]
 801127c:	f7ef faee 	bl	800085c <__aeabi_ddiv>
 8011280:	4632      	mov	r2, r6
 8011282:	4604      	mov	r4, r0
 8011284:	460d      	mov	r5, r1
 8011286:	463b      	mov	r3, r7
 8011288:	4640      	mov	r0, r8
 801128a:	4649      	mov	r1, r9
 801128c:	f7ef f9bc 	bl	8000608 <__aeabi_dmul>
 8011290:	4632      	mov	r2, r6
 8011292:	463b      	mov	r3, r7
 8011294:	f7ef f802 	bl	800029c <__adddf3>
 8011298:	4602      	mov	r2, r0
 801129a:	460b      	mov	r3, r1
 801129c:	4620      	mov	r0, r4
 801129e:	4629      	mov	r1, r5
 80112a0:	f7ee fffa 	bl	8000298 <__aeabi_dsub>
 80112a4:	4642      	mov	r2, r8
 80112a6:	464b      	mov	r3, r9
 80112a8:	f7ee fff6 	bl	8000298 <__aeabi_dsub>
 80112ac:	4602      	mov	r2, r0
 80112ae:	460b      	mov	r3, r1
 80112b0:	2000      	movs	r0, #0
 80112b2:	4939      	ldr	r1, [pc, #228]	; (8011398 <__ieee754_pow+0xa08>)
 80112b4:	f7ee fff0 	bl	8000298 <__aeabi_dsub>
 80112b8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80112bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80112c0:	4602      	mov	r2, r0
 80112c2:	460b      	mov	r3, r1
 80112c4:	da2f      	bge.n	8011326 <__ieee754_pow+0x996>
 80112c6:	4650      	mov	r0, sl
 80112c8:	ec43 2b10 	vmov	d0, r2, r3
 80112cc:	f001 faa0 	bl	8012810 <scalbn>
 80112d0:	ec51 0b10 	vmov	r0, r1, d0
 80112d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80112d8:	f7ff bbf1 	b.w	8010abe <__ieee754_pow+0x12e>
 80112dc:	4b2f      	ldr	r3, [pc, #188]	; (801139c <__ieee754_pow+0xa0c>)
 80112de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80112e2:	429e      	cmp	r6, r3
 80112e4:	f77f af0c 	ble.w	8011100 <__ieee754_pow+0x770>
 80112e8:	4b2d      	ldr	r3, [pc, #180]	; (80113a0 <__ieee754_pow+0xa10>)
 80112ea:	440b      	add	r3, r1
 80112ec:	4303      	orrs	r3, r0
 80112ee:	d00b      	beq.n	8011308 <__ieee754_pow+0x978>
 80112f0:	a325      	add	r3, pc, #148	; (adr r3, 8011388 <__ieee754_pow+0x9f8>)
 80112f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112fa:	f7ef f985 	bl	8000608 <__aeabi_dmul>
 80112fe:	a322      	add	r3, pc, #136	; (adr r3, 8011388 <__ieee754_pow+0x9f8>)
 8011300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011304:	f7ff bbdb 	b.w	8010abe <__ieee754_pow+0x12e>
 8011308:	4622      	mov	r2, r4
 801130a:	462b      	mov	r3, r5
 801130c:	f7ee ffc4 	bl	8000298 <__aeabi_dsub>
 8011310:	4642      	mov	r2, r8
 8011312:	464b      	mov	r3, r9
 8011314:	f7ef fbfe 	bl	8000b14 <__aeabi_dcmpge>
 8011318:	2800      	cmp	r0, #0
 801131a:	f43f aef1 	beq.w	8011100 <__ieee754_pow+0x770>
 801131e:	e7e7      	b.n	80112f0 <__ieee754_pow+0x960>
 8011320:	f04f 0a00 	mov.w	sl, #0
 8011324:	e718      	b.n	8011158 <__ieee754_pow+0x7c8>
 8011326:	4621      	mov	r1, r4
 8011328:	e7d4      	b.n	80112d4 <__ieee754_pow+0x944>
 801132a:	2000      	movs	r0, #0
 801132c:	491a      	ldr	r1, [pc, #104]	; (8011398 <__ieee754_pow+0xa08>)
 801132e:	f7ff bb8f 	b.w	8010a50 <__ieee754_pow+0xc0>
 8011332:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011336:	f7ff bb8b 	b.w	8010a50 <__ieee754_pow+0xc0>
 801133a:	4630      	mov	r0, r6
 801133c:	4639      	mov	r1, r7
 801133e:	f7ff bb87 	b.w	8010a50 <__ieee754_pow+0xc0>
 8011342:	4693      	mov	fp, r2
 8011344:	f7ff bb98 	b.w	8010a78 <__ieee754_pow+0xe8>
 8011348:	00000000 	.word	0x00000000
 801134c:	3fe62e43 	.word	0x3fe62e43
 8011350:	fefa39ef 	.word	0xfefa39ef
 8011354:	3fe62e42 	.word	0x3fe62e42
 8011358:	0ca86c39 	.word	0x0ca86c39
 801135c:	be205c61 	.word	0xbe205c61
 8011360:	72bea4d0 	.word	0x72bea4d0
 8011364:	3e663769 	.word	0x3e663769
 8011368:	c5d26bf1 	.word	0xc5d26bf1
 801136c:	3ebbbd41 	.word	0x3ebbbd41
 8011370:	af25de2c 	.word	0xaf25de2c
 8011374:	3f11566a 	.word	0x3f11566a
 8011378:	16bebd93 	.word	0x16bebd93
 801137c:	3f66c16c 	.word	0x3f66c16c
 8011380:	5555553e 	.word	0x5555553e
 8011384:	3fc55555 	.word	0x3fc55555
 8011388:	c2f8f359 	.word	0xc2f8f359
 801138c:	01a56e1f 	.word	0x01a56e1f
 8011390:	3fe00000 	.word	0x3fe00000
 8011394:	000fffff 	.word	0x000fffff
 8011398:	3ff00000 	.word	0x3ff00000
 801139c:	4090cbff 	.word	0x4090cbff
 80113a0:	3f6f3400 	.word	0x3f6f3400
 80113a4:	652b82fe 	.word	0x652b82fe
 80113a8:	3c971547 	.word	0x3c971547
 80113ac:	00000000 	.word	0x00000000

080113b0 <__ieee754_rem_pio2>:
 80113b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	ec57 6b10 	vmov	r6, r7, d0
 80113b8:	4bc3      	ldr	r3, [pc, #780]	; (80116c8 <__ieee754_rem_pio2+0x318>)
 80113ba:	b08d      	sub	sp, #52	; 0x34
 80113bc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80113c0:	4598      	cmp	r8, r3
 80113c2:	4604      	mov	r4, r0
 80113c4:	9704      	str	r7, [sp, #16]
 80113c6:	dc07      	bgt.n	80113d8 <__ieee754_rem_pio2+0x28>
 80113c8:	2200      	movs	r2, #0
 80113ca:	2300      	movs	r3, #0
 80113cc:	ed84 0b00 	vstr	d0, [r4]
 80113d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80113d4:	2500      	movs	r5, #0
 80113d6:	e027      	b.n	8011428 <__ieee754_rem_pio2+0x78>
 80113d8:	4bbc      	ldr	r3, [pc, #752]	; (80116cc <__ieee754_rem_pio2+0x31c>)
 80113da:	4598      	cmp	r8, r3
 80113dc:	dc75      	bgt.n	80114ca <__ieee754_rem_pio2+0x11a>
 80113de:	9b04      	ldr	r3, [sp, #16]
 80113e0:	4dbb      	ldr	r5, [pc, #748]	; (80116d0 <__ieee754_rem_pio2+0x320>)
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	ee10 0a10 	vmov	r0, s0
 80113e8:	a3a9      	add	r3, pc, #676	; (adr r3, 8011690 <__ieee754_rem_pio2+0x2e0>)
 80113ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ee:	4639      	mov	r1, r7
 80113f0:	dd36      	ble.n	8011460 <__ieee754_rem_pio2+0xb0>
 80113f2:	f7ee ff51 	bl	8000298 <__aeabi_dsub>
 80113f6:	45a8      	cmp	r8, r5
 80113f8:	4606      	mov	r6, r0
 80113fa:	460f      	mov	r7, r1
 80113fc:	d018      	beq.n	8011430 <__ieee754_rem_pio2+0x80>
 80113fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8011698 <__ieee754_rem_pio2+0x2e8>)
 8011400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011404:	f7ee ff48 	bl	8000298 <__aeabi_dsub>
 8011408:	4602      	mov	r2, r0
 801140a:	460b      	mov	r3, r1
 801140c:	e9c4 2300 	strd	r2, r3, [r4]
 8011410:	4630      	mov	r0, r6
 8011412:	4639      	mov	r1, r7
 8011414:	f7ee ff40 	bl	8000298 <__aeabi_dsub>
 8011418:	a39f      	add	r3, pc, #636	; (adr r3, 8011698 <__ieee754_rem_pio2+0x2e8>)
 801141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141e:	f7ee ff3b 	bl	8000298 <__aeabi_dsub>
 8011422:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011426:	2501      	movs	r5, #1
 8011428:	4628      	mov	r0, r5
 801142a:	b00d      	add	sp, #52	; 0x34
 801142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011430:	a39b      	add	r3, pc, #620	; (adr r3, 80116a0 <__ieee754_rem_pio2+0x2f0>)
 8011432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011436:	f7ee ff2f 	bl	8000298 <__aeabi_dsub>
 801143a:	a39b      	add	r3, pc, #620	; (adr r3, 80116a8 <__ieee754_rem_pio2+0x2f8>)
 801143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011440:	4606      	mov	r6, r0
 8011442:	460f      	mov	r7, r1
 8011444:	f7ee ff28 	bl	8000298 <__aeabi_dsub>
 8011448:	4602      	mov	r2, r0
 801144a:	460b      	mov	r3, r1
 801144c:	e9c4 2300 	strd	r2, r3, [r4]
 8011450:	4630      	mov	r0, r6
 8011452:	4639      	mov	r1, r7
 8011454:	f7ee ff20 	bl	8000298 <__aeabi_dsub>
 8011458:	a393      	add	r3, pc, #588	; (adr r3, 80116a8 <__ieee754_rem_pio2+0x2f8>)
 801145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145e:	e7de      	b.n	801141e <__ieee754_rem_pio2+0x6e>
 8011460:	f7ee ff1c 	bl	800029c <__adddf3>
 8011464:	45a8      	cmp	r8, r5
 8011466:	4606      	mov	r6, r0
 8011468:	460f      	mov	r7, r1
 801146a:	d016      	beq.n	801149a <__ieee754_rem_pio2+0xea>
 801146c:	a38a      	add	r3, pc, #552	; (adr r3, 8011698 <__ieee754_rem_pio2+0x2e8>)
 801146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011472:	f7ee ff13 	bl	800029c <__adddf3>
 8011476:	4602      	mov	r2, r0
 8011478:	460b      	mov	r3, r1
 801147a:	e9c4 2300 	strd	r2, r3, [r4]
 801147e:	4630      	mov	r0, r6
 8011480:	4639      	mov	r1, r7
 8011482:	f7ee ff09 	bl	8000298 <__aeabi_dsub>
 8011486:	a384      	add	r3, pc, #528	; (adr r3, 8011698 <__ieee754_rem_pio2+0x2e8>)
 8011488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148c:	f7ee ff06 	bl	800029c <__adddf3>
 8011490:	f04f 35ff 	mov.w	r5, #4294967295
 8011494:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011498:	e7c6      	b.n	8011428 <__ieee754_rem_pio2+0x78>
 801149a:	a381      	add	r3, pc, #516	; (adr r3, 80116a0 <__ieee754_rem_pio2+0x2f0>)
 801149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a0:	f7ee fefc 	bl	800029c <__adddf3>
 80114a4:	a380      	add	r3, pc, #512	; (adr r3, 80116a8 <__ieee754_rem_pio2+0x2f8>)
 80114a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114aa:	4606      	mov	r6, r0
 80114ac:	460f      	mov	r7, r1
 80114ae:	f7ee fef5 	bl	800029c <__adddf3>
 80114b2:	4602      	mov	r2, r0
 80114b4:	460b      	mov	r3, r1
 80114b6:	e9c4 2300 	strd	r2, r3, [r4]
 80114ba:	4630      	mov	r0, r6
 80114bc:	4639      	mov	r1, r7
 80114be:	f7ee feeb 	bl	8000298 <__aeabi_dsub>
 80114c2:	a379      	add	r3, pc, #484	; (adr r3, 80116a8 <__ieee754_rem_pio2+0x2f8>)
 80114c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c8:	e7e0      	b.n	801148c <__ieee754_rem_pio2+0xdc>
 80114ca:	4b82      	ldr	r3, [pc, #520]	; (80116d4 <__ieee754_rem_pio2+0x324>)
 80114cc:	4598      	cmp	r8, r3
 80114ce:	f300 80d0 	bgt.w	8011672 <__ieee754_rem_pio2+0x2c2>
 80114d2:	f001 f875 	bl	80125c0 <fabs>
 80114d6:	ec57 6b10 	vmov	r6, r7, d0
 80114da:	ee10 0a10 	vmov	r0, s0
 80114de:	a374      	add	r3, pc, #464	; (adr r3, 80116b0 <__ieee754_rem_pio2+0x300>)
 80114e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e4:	4639      	mov	r1, r7
 80114e6:	f7ef f88f 	bl	8000608 <__aeabi_dmul>
 80114ea:	2200      	movs	r2, #0
 80114ec:	4b7a      	ldr	r3, [pc, #488]	; (80116d8 <__ieee754_rem_pio2+0x328>)
 80114ee:	f7ee fed5 	bl	800029c <__adddf3>
 80114f2:	f7ef fb39 	bl	8000b68 <__aeabi_d2iz>
 80114f6:	4605      	mov	r5, r0
 80114f8:	f7ef f81c 	bl	8000534 <__aeabi_i2d>
 80114fc:	a364      	add	r3, pc, #400	; (adr r3, 8011690 <__ieee754_rem_pio2+0x2e0>)
 80114fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011506:	f7ef f87f 	bl	8000608 <__aeabi_dmul>
 801150a:	4602      	mov	r2, r0
 801150c:	460b      	mov	r3, r1
 801150e:	4630      	mov	r0, r6
 8011510:	4639      	mov	r1, r7
 8011512:	f7ee fec1 	bl	8000298 <__aeabi_dsub>
 8011516:	a360      	add	r3, pc, #384	; (adr r3, 8011698 <__ieee754_rem_pio2+0x2e8>)
 8011518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151c:	4682      	mov	sl, r0
 801151e:	468b      	mov	fp, r1
 8011520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011524:	f7ef f870 	bl	8000608 <__aeabi_dmul>
 8011528:	2d1f      	cmp	r5, #31
 801152a:	4606      	mov	r6, r0
 801152c:	460f      	mov	r7, r1
 801152e:	dc0c      	bgt.n	801154a <__ieee754_rem_pio2+0x19a>
 8011530:	1e6a      	subs	r2, r5, #1
 8011532:	4b6a      	ldr	r3, [pc, #424]	; (80116dc <__ieee754_rem_pio2+0x32c>)
 8011534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011538:	4543      	cmp	r3, r8
 801153a:	d006      	beq.n	801154a <__ieee754_rem_pio2+0x19a>
 801153c:	4632      	mov	r2, r6
 801153e:	463b      	mov	r3, r7
 8011540:	4650      	mov	r0, sl
 8011542:	4659      	mov	r1, fp
 8011544:	f7ee fea8 	bl	8000298 <__aeabi_dsub>
 8011548:	e00e      	b.n	8011568 <__ieee754_rem_pio2+0x1b8>
 801154a:	4632      	mov	r2, r6
 801154c:	463b      	mov	r3, r7
 801154e:	4650      	mov	r0, sl
 8011550:	4659      	mov	r1, fp
 8011552:	f7ee fea1 	bl	8000298 <__aeabi_dsub>
 8011556:	ea4f 5328 	mov.w	r3, r8, asr #20
 801155a:	9305      	str	r3, [sp, #20]
 801155c:	9a05      	ldr	r2, [sp, #20]
 801155e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011562:	1ad3      	subs	r3, r2, r3
 8011564:	2b10      	cmp	r3, #16
 8011566:	dc02      	bgt.n	801156e <__ieee754_rem_pio2+0x1be>
 8011568:	e9c4 0100 	strd	r0, r1, [r4]
 801156c:	e039      	b.n	80115e2 <__ieee754_rem_pio2+0x232>
 801156e:	a34c      	add	r3, pc, #304	; (adr r3, 80116a0 <__ieee754_rem_pio2+0x2f0>)
 8011570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011578:	f7ef f846 	bl	8000608 <__aeabi_dmul>
 801157c:	4606      	mov	r6, r0
 801157e:	460f      	mov	r7, r1
 8011580:	4602      	mov	r2, r0
 8011582:	460b      	mov	r3, r1
 8011584:	4650      	mov	r0, sl
 8011586:	4659      	mov	r1, fp
 8011588:	f7ee fe86 	bl	8000298 <__aeabi_dsub>
 801158c:	4602      	mov	r2, r0
 801158e:	460b      	mov	r3, r1
 8011590:	4680      	mov	r8, r0
 8011592:	4689      	mov	r9, r1
 8011594:	4650      	mov	r0, sl
 8011596:	4659      	mov	r1, fp
 8011598:	f7ee fe7e 	bl	8000298 <__aeabi_dsub>
 801159c:	4632      	mov	r2, r6
 801159e:	463b      	mov	r3, r7
 80115a0:	f7ee fe7a 	bl	8000298 <__aeabi_dsub>
 80115a4:	a340      	add	r3, pc, #256	; (adr r3, 80116a8 <__ieee754_rem_pio2+0x2f8>)
 80115a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115aa:	4606      	mov	r6, r0
 80115ac:	460f      	mov	r7, r1
 80115ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115b2:	f7ef f829 	bl	8000608 <__aeabi_dmul>
 80115b6:	4632      	mov	r2, r6
 80115b8:	463b      	mov	r3, r7
 80115ba:	f7ee fe6d 	bl	8000298 <__aeabi_dsub>
 80115be:	4602      	mov	r2, r0
 80115c0:	460b      	mov	r3, r1
 80115c2:	4606      	mov	r6, r0
 80115c4:	460f      	mov	r7, r1
 80115c6:	4640      	mov	r0, r8
 80115c8:	4649      	mov	r1, r9
 80115ca:	f7ee fe65 	bl	8000298 <__aeabi_dsub>
 80115ce:	9a05      	ldr	r2, [sp, #20]
 80115d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80115d4:	1ad3      	subs	r3, r2, r3
 80115d6:	2b31      	cmp	r3, #49	; 0x31
 80115d8:	dc20      	bgt.n	801161c <__ieee754_rem_pio2+0x26c>
 80115da:	e9c4 0100 	strd	r0, r1, [r4]
 80115de:	46c2      	mov	sl, r8
 80115e0:	46cb      	mov	fp, r9
 80115e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80115e6:	4650      	mov	r0, sl
 80115e8:	4642      	mov	r2, r8
 80115ea:	464b      	mov	r3, r9
 80115ec:	4659      	mov	r1, fp
 80115ee:	f7ee fe53 	bl	8000298 <__aeabi_dsub>
 80115f2:	463b      	mov	r3, r7
 80115f4:	4632      	mov	r2, r6
 80115f6:	f7ee fe4f 	bl	8000298 <__aeabi_dsub>
 80115fa:	9b04      	ldr	r3, [sp, #16]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011602:	f6bf af11 	bge.w	8011428 <__ieee754_rem_pio2+0x78>
 8011606:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801160a:	6063      	str	r3, [r4, #4]
 801160c:	f8c4 8000 	str.w	r8, [r4]
 8011610:	60a0      	str	r0, [r4, #8]
 8011612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011616:	60e3      	str	r3, [r4, #12]
 8011618:	426d      	negs	r5, r5
 801161a:	e705      	b.n	8011428 <__ieee754_rem_pio2+0x78>
 801161c:	a326      	add	r3, pc, #152	; (adr r3, 80116b8 <__ieee754_rem_pio2+0x308>)
 801161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011626:	f7ee ffef 	bl	8000608 <__aeabi_dmul>
 801162a:	4606      	mov	r6, r0
 801162c:	460f      	mov	r7, r1
 801162e:	4602      	mov	r2, r0
 8011630:	460b      	mov	r3, r1
 8011632:	4640      	mov	r0, r8
 8011634:	4649      	mov	r1, r9
 8011636:	f7ee fe2f 	bl	8000298 <__aeabi_dsub>
 801163a:	4602      	mov	r2, r0
 801163c:	460b      	mov	r3, r1
 801163e:	4682      	mov	sl, r0
 8011640:	468b      	mov	fp, r1
 8011642:	4640      	mov	r0, r8
 8011644:	4649      	mov	r1, r9
 8011646:	f7ee fe27 	bl	8000298 <__aeabi_dsub>
 801164a:	4632      	mov	r2, r6
 801164c:	463b      	mov	r3, r7
 801164e:	f7ee fe23 	bl	8000298 <__aeabi_dsub>
 8011652:	a31b      	add	r3, pc, #108	; (adr r3, 80116c0 <__ieee754_rem_pio2+0x310>)
 8011654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011658:	4606      	mov	r6, r0
 801165a:	460f      	mov	r7, r1
 801165c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011660:	f7ee ffd2 	bl	8000608 <__aeabi_dmul>
 8011664:	4632      	mov	r2, r6
 8011666:	463b      	mov	r3, r7
 8011668:	f7ee fe16 	bl	8000298 <__aeabi_dsub>
 801166c:	4606      	mov	r6, r0
 801166e:	460f      	mov	r7, r1
 8011670:	e764      	b.n	801153c <__ieee754_rem_pio2+0x18c>
 8011672:	4b1b      	ldr	r3, [pc, #108]	; (80116e0 <__ieee754_rem_pio2+0x330>)
 8011674:	4598      	cmp	r8, r3
 8011676:	dd35      	ble.n	80116e4 <__ieee754_rem_pio2+0x334>
 8011678:	ee10 2a10 	vmov	r2, s0
 801167c:	463b      	mov	r3, r7
 801167e:	4630      	mov	r0, r6
 8011680:	4639      	mov	r1, r7
 8011682:	f7ee fe09 	bl	8000298 <__aeabi_dsub>
 8011686:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801168a:	e9c4 0100 	strd	r0, r1, [r4]
 801168e:	e6a1      	b.n	80113d4 <__ieee754_rem_pio2+0x24>
 8011690:	54400000 	.word	0x54400000
 8011694:	3ff921fb 	.word	0x3ff921fb
 8011698:	1a626331 	.word	0x1a626331
 801169c:	3dd0b461 	.word	0x3dd0b461
 80116a0:	1a600000 	.word	0x1a600000
 80116a4:	3dd0b461 	.word	0x3dd0b461
 80116a8:	2e037073 	.word	0x2e037073
 80116ac:	3ba3198a 	.word	0x3ba3198a
 80116b0:	6dc9c883 	.word	0x6dc9c883
 80116b4:	3fe45f30 	.word	0x3fe45f30
 80116b8:	2e000000 	.word	0x2e000000
 80116bc:	3ba3198a 	.word	0x3ba3198a
 80116c0:	252049c1 	.word	0x252049c1
 80116c4:	397b839a 	.word	0x397b839a
 80116c8:	3fe921fb 	.word	0x3fe921fb
 80116cc:	4002d97b 	.word	0x4002d97b
 80116d0:	3ff921fb 	.word	0x3ff921fb
 80116d4:	413921fb 	.word	0x413921fb
 80116d8:	3fe00000 	.word	0x3fe00000
 80116dc:	08012eb0 	.word	0x08012eb0
 80116e0:	7fefffff 	.word	0x7fefffff
 80116e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80116e8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80116ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80116f0:	4630      	mov	r0, r6
 80116f2:	460f      	mov	r7, r1
 80116f4:	f7ef fa38 	bl	8000b68 <__aeabi_d2iz>
 80116f8:	f7ee ff1c 	bl	8000534 <__aeabi_i2d>
 80116fc:	4602      	mov	r2, r0
 80116fe:	460b      	mov	r3, r1
 8011700:	4630      	mov	r0, r6
 8011702:	4639      	mov	r1, r7
 8011704:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011708:	f7ee fdc6 	bl	8000298 <__aeabi_dsub>
 801170c:	2200      	movs	r2, #0
 801170e:	4b1f      	ldr	r3, [pc, #124]	; (801178c <__ieee754_rem_pio2+0x3dc>)
 8011710:	f7ee ff7a 	bl	8000608 <__aeabi_dmul>
 8011714:	460f      	mov	r7, r1
 8011716:	4606      	mov	r6, r0
 8011718:	f7ef fa26 	bl	8000b68 <__aeabi_d2iz>
 801171c:	f7ee ff0a 	bl	8000534 <__aeabi_i2d>
 8011720:	4602      	mov	r2, r0
 8011722:	460b      	mov	r3, r1
 8011724:	4630      	mov	r0, r6
 8011726:	4639      	mov	r1, r7
 8011728:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801172c:	f7ee fdb4 	bl	8000298 <__aeabi_dsub>
 8011730:	2200      	movs	r2, #0
 8011732:	4b16      	ldr	r3, [pc, #88]	; (801178c <__ieee754_rem_pio2+0x3dc>)
 8011734:	f7ee ff68 	bl	8000608 <__aeabi_dmul>
 8011738:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801173c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011740:	f04f 0803 	mov.w	r8, #3
 8011744:	2600      	movs	r6, #0
 8011746:	2700      	movs	r7, #0
 8011748:	4632      	mov	r2, r6
 801174a:	463b      	mov	r3, r7
 801174c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011750:	f108 3aff 	add.w	sl, r8, #4294967295
 8011754:	f7ef f9c0 	bl	8000ad8 <__aeabi_dcmpeq>
 8011758:	b9b0      	cbnz	r0, 8011788 <__ieee754_rem_pio2+0x3d8>
 801175a:	4b0d      	ldr	r3, [pc, #52]	; (8011790 <__ieee754_rem_pio2+0x3e0>)
 801175c:	9301      	str	r3, [sp, #4]
 801175e:	2302      	movs	r3, #2
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	462a      	mov	r2, r5
 8011764:	4643      	mov	r3, r8
 8011766:	4621      	mov	r1, r4
 8011768:	a806      	add	r0, sp, #24
 801176a:	f000 f98d 	bl	8011a88 <__kernel_rem_pio2>
 801176e:	9b04      	ldr	r3, [sp, #16]
 8011770:	2b00      	cmp	r3, #0
 8011772:	4605      	mov	r5, r0
 8011774:	f6bf ae58 	bge.w	8011428 <__ieee754_rem_pio2+0x78>
 8011778:	6863      	ldr	r3, [r4, #4]
 801177a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801177e:	6063      	str	r3, [r4, #4]
 8011780:	68e3      	ldr	r3, [r4, #12]
 8011782:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011786:	e746      	b.n	8011616 <__ieee754_rem_pio2+0x266>
 8011788:	46d0      	mov	r8, sl
 801178a:	e7dd      	b.n	8011748 <__ieee754_rem_pio2+0x398>
 801178c:	41700000 	.word	0x41700000
 8011790:	08012f30 	.word	0x08012f30

08011794 <__ieee754_sqrt>:
 8011794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011798:	4955      	ldr	r1, [pc, #340]	; (80118f0 <__ieee754_sqrt+0x15c>)
 801179a:	ec55 4b10 	vmov	r4, r5, d0
 801179e:	43a9      	bics	r1, r5
 80117a0:	462b      	mov	r3, r5
 80117a2:	462a      	mov	r2, r5
 80117a4:	d112      	bne.n	80117cc <__ieee754_sqrt+0x38>
 80117a6:	ee10 2a10 	vmov	r2, s0
 80117aa:	ee10 0a10 	vmov	r0, s0
 80117ae:	4629      	mov	r1, r5
 80117b0:	f7ee ff2a 	bl	8000608 <__aeabi_dmul>
 80117b4:	4602      	mov	r2, r0
 80117b6:	460b      	mov	r3, r1
 80117b8:	4620      	mov	r0, r4
 80117ba:	4629      	mov	r1, r5
 80117bc:	f7ee fd6e 	bl	800029c <__adddf3>
 80117c0:	4604      	mov	r4, r0
 80117c2:	460d      	mov	r5, r1
 80117c4:	ec45 4b10 	vmov	d0, r4, r5
 80117c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117cc:	2d00      	cmp	r5, #0
 80117ce:	ee10 0a10 	vmov	r0, s0
 80117d2:	4621      	mov	r1, r4
 80117d4:	dc0f      	bgt.n	80117f6 <__ieee754_sqrt+0x62>
 80117d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80117da:	4330      	orrs	r0, r6
 80117dc:	d0f2      	beq.n	80117c4 <__ieee754_sqrt+0x30>
 80117de:	b155      	cbz	r5, 80117f6 <__ieee754_sqrt+0x62>
 80117e0:	ee10 2a10 	vmov	r2, s0
 80117e4:	4620      	mov	r0, r4
 80117e6:	4629      	mov	r1, r5
 80117e8:	f7ee fd56 	bl	8000298 <__aeabi_dsub>
 80117ec:	4602      	mov	r2, r0
 80117ee:	460b      	mov	r3, r1
 80117f0:	f7ef f834 	bl	800085c <__aeabi_ddiv>
 80117f4:	e7e4      	b.n	80117c0 <__ieee754_sqrt+0x2c>
 80117f6:	151b      	asrs	r3, r3, #20
 80117f8:	d073      	beq.n	80118e2 <__ieee754_sqrt+0x14e>
 80117fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80117fe:	07dd      	lsls	r5, r3, #31
 8011800:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011804:	bf48      	it	mi
 8011806:	0fc8      	lsrmi	r0, r1, #31
 8011808:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801180c:	bf44      	itt	mi
 801180e:	0049      	lslmi	r1, r1, #1
 8011810:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011814:	2500      	movs	r5, #0
 8011816:	1058      	asrs	r0, r3, #1
 8011818:	0fcb      	lsrs	r3, r1, #31
 801181a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801181e:	0049      	lsls	r1, r1, #1
 8011820:	2316      	movs	r3, #22
 8011822:	462c      	mov	r4, r5
 8011824:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011828:	19a7      	adds	r7, r4, r6
 801182a:	4297      	cmp	r7, r2
 801182c:	bfde      	ittt	le
 801182e:	19bc      	addle	r4, r7, r6
 8011830:	1bd2      	suble	r2, r2, r7
 8011832:	19ad      	addle	r5, r5, r6
 8011834:	0fcf      	lsrs	r7, r1, #31
 8011836:	3b01      	subs	r3, #1
 8011838:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801183c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011840:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011844:	d1f0      	bne.n	8011828 <__ieee754_sqrt+0x94>
 8011846:	f04f 0c20 	mov.w	ip, #32
 801184a:	469e      	mov	lr, r3
 801184c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011850:	42a2      	cmp	r2, r4
 8011852:	eb06 070e 	add.w	r7, r6, lr
 8011856:	dc02      	bgt.n	801185e <__ieee754_sqrt+0xca>
 8011858:	d112      	bne.n	8011880 <__ieee754_sqrt+0xec>
 801185a:	428f      	cmp	r7, r1
 801185c:	d810      	bhi.n	8011880 <__ieee754_sqrt+0xec>
 801185e:	2f00      	cmp	r7, #0
 8011860:	eb07 0e06 	add.w	lr, r7, r6
 8011864:	da42      	bge.n	80118ec <__ieee754_sqrt+0x158>
 8011866:	f1be 0f00 	cmp.w	lr, #0
 801186a:	db3f      	blt.n	80118ec <__ieee754_sqrt+0x158>
 801186c:	f104 0801 	add.w	r8, r4, #1
 8011870:	1b12      	subs	r2, r2, r4
 8011872:	428f      	cmp	r7, r1
 8011874:	bf88      	it	hi
 8011876:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801187a:	1bc9      	subs	r1, r1, r7
 801187c:	4433      	add	r3, r6
 801187e:	4644      	mov	r4, r8
 8011880:	0052      	lsls	r2, r2, #1
 8011882:	f1bc 0c01 	subs.w	ip, ip, #1
 8011886:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801188a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801188e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011892:	d1dd      	bne.n	8011850 <__ieee754_sqrt+0xbc>
 8011894:	430a      	orrs	r2, r1
 8011896:	d006      	beq.n	80118a6 <__ieee754_sqrt+0x112>
 8011898:	1c5c      	adds	r4, r3, #1
 801189a:	bf13      	iteet	ne
 801189c:	3301      	addne	r3, #1
 801189e:	3501      	addeq	r5, #1
 80118a0:	4663      	moveq	r3, ip
 80118a2:	f023 0301 	bicne.w	r3, r3, #1
 80118a6:	106a      	asrs	r2, r5, #1
 80118a8:	085b      	lsrs	r3, r3, #1
 80118aa:	07e9      	lsls	r1, r5, #31
 80118ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80118b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80118b4:	bf48      	it	mi
 80118b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80118ba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80118be:	461c      	mov	r4, r3
 80118c0:	e780      	b.n	80117c4 <__ieee754_sqrt+0x30>
 80118c2:	0aca      	lsrs	r2, r1, #11
 80118c4:	3815      	subs	r0, #21
 80118c6:	0549      	lsls	r1, r1, #21
 80118c8:	2a00      	cmp	r2, #0
 80118ca:	d0fa      	beq.n	80118c2 <__ieee754_sqrt+0x12e>
 80118cc:	02d6      	lsls	r6, r2, #11
 80118ce:	d50a      	bpl.n	80118e6 <__ieee754_sqrt+0x152>
 80118d0:	f1c3 0420 	rsb	r4, r3, #32
 80118d4:	fa21 f404 	lsr.w	r4, r1, r4
 80118d8:	1e5d      	subs	r5, r3, #1
 80118da:	4099      	lsls	r1, r3
 80118dc:	4322      	orrs	r2, r4
 80118de:	1b43      	subs	r3, r0, r5
 80118e0:	e78b      	b.n	80117fa <__ieee754_sqrt+0x66>
 80118e2:	4618      	mov	r0, r3
 80118e4:	e7f0      	b.n	80118c8 <__ieee754_sqrt+0x134>
 80118e6:	0052      	lsls	r2, r2, #1
 80118e8:	3301      	adds	r3, #1
 80118ea:	e7ef      	b.n	80118cc <__ieee754_sqrt+0x138>
 80118ec:	46a0      	mov	r8, r4
 80118ee:	e7bf      	b.n	8011870 <__ieee754_sqrt+0xdc>
 80118f0:	7ff00000 	.word	0x7ff00000
 80118f4:	00000000 	.word	0x00000000

080118f8 <__kernel_cos>:
 80118f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fc:	ec59 8b10 	vmov	r8, r9, d0
 8011900:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011904:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011908:	ed2d 8b02 	vpush	{d8}
 801190c:	eeb0 8a41 	vmov.f32	s16, s2
 8011910:	eef0 8a61 	vmov.f32	s17, s3
 8011914:	da07      	bge.n	8011926 <__kernel_cos+0x2e>
 8011916:	ee10 0a10 	vmov	r0, s0
 801191a:	4649      	mov	r1, r9
 801191c:	f7ef f924 	bl	8000b68 <__aeabi_d2iz>
 8011920:	2800      	cmp	r0, #0
 8011922:	f000 8089 	beq.w	8011a38 <__kernel_cos+0x140>
 8011926:	4642      	mov	r2, r8
 8011928:	464b      	mov	r3, r9
 801192a:	4640      	mov	r0, r8
 801192c:	4649      	mov	r1, r9
 801192e:	f7ee fe6b 	bl	8000608 <__aeabi_dmul>
 8011932:	2200      	movs	r2, #0
 8011934:	4b4e      	ldr	r3, [pc, #312]	; (8011a70 <__kernel_cos+0x178>)
 8011936:	4604      	mov	r4, r0
 8011938:	460d      	mov	r5, r1
 801193a:	f7ee fe65 	bl	8000608 <__aeabi_dmul>
 801193e:	a340      	add	r3, pc, #256	; (adr r3, 8011a40 <__kernel_cos+0x148>)
 8011940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011944:	4682      	mov	sl, r0
 8011946:	468b      	mov	fp, r1
 8011948:	4620      	mov	r0, r4
 801194a:	4629      	mov	r1, r5
 801194c:	f7ee fe5c 	bl	8000608 <__aeabi_dmul>
 8011950:	a33d      	add	r3, pc, #244	; (adr r3, 8011a48 <__kernel_cos+0x150>)
 8011952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011956:	f7ee fca1 	bl	800029c <__adddf3>
 801195a:	4622      	mov	r2, r4
 801195c:	462b      	mov	r3, r5
 801195e:	f7ee fe53 	bl	8000608 <__aeabi_dmul>
 8011962:	a33b      	add	r3, pc, #236	; (adr r3, 8011a50 <__kernel_cos+0x158>)
 8011964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011968:	f7ee fc96 	bl	8000298 <__aeabi_dsub>
 801196c:	4622      	mov	r2, r4
 801196e:	462b      	mov	r3, r5
 8011970:	f7ee fe4a 	bl	8000608 <__aeabi_dmul>
 8011974:	a338      	add	r3, pc, #224	; (adr r3, 8011a58 <__kernel_cos+0x160>)
 8011976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197a:	f7ee fc8f 	bl	800029c <__adddf3>
 801197e:	4622      	mov	r2, r4
 8011980:	462b      	mov	r3, r5
 8011982:	f7ee fe41 	bl	8000608 <__aeabi_dmul>
 8011986:	a336      	add	r3, pc, #216	; (adr r3, 8011a60 <__kernel_cos+0x168>)
 8011988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198c:	f7ee fc84 	bl	8000298 <__aeabi_dsub>
 8011990:	4622      	mov	r2, r4
 8011992:	462b      	mov	r3, r5
 8011994:	f7ee fe38 	bl	8000608 <__aeabi_dmul>
 8011998:	a333      	add	r3, pc, #204	; (adr r3, 8011a68 <__kernel_cos+0x170>)
 801199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199e:	f7ee fc7d 	bl	800029c <__adddf3>
 80119a2:	4622      	mov	r2, r4
 80119a4:	462b      	mov	r3, r5
 80119a6:	f7ee fe2f 	bl	8000608 <__aeabi_dmul>
 80119aa:	4622      	mov	r2, r4
 80119ac:	462b      	mov	r3, r5
 80119ae:	f7ee fe2b 	bl	8000608 <__aeabi_dmul>
 80119b2:	ec53 2b18 	vmov	r2, r3, d8
 80119b6:	4604      	mov	r4, r0
 80119b8:	460d      	mov	r5, r1
 80119ba:	4640      	mov	r0, r8
 80119bc:	4649      	mov	r1, r9
 80119be:	f7ee fe23 	bl	8000608 <__aeabi_dmul>
 80119c2:	460b      	mov	r3, r1
 80119c4:	4602      	mov	r2, r0
 80119c6:	4629      	mov	r1, r5
 80119c8:	4620      	mov	r0, r4
 80119ca:	f7ee fc65 	bl	8000298 <__aeabi_dsub>
 80119ce:	4b29      	ldr	r3, [pc, #164]	; (8011a74 <__kernel_cos+0x17c>)
 80119d0:	429e      	cmp	r6, r3
 80119d2:	4680      	mov	r8, r0
 80119d4:	4689      	mov	r9, r1
 80119d6:	dc11      	bgt.n	80119fc <__kernel_cos+0x104>
 80119d8:	4602      	mov	r2, r0
 80119da:	460b      	mov	r3, r1
 80119dc:	4650      	mov	r0, sl
 80119de:	4659      	mov	r1, fp
 80119e0:	f7ee fc5a 	bl	8000298 <__aeabi_dsub>
 80119e4:	460b      	mov	r3, r1
 80119e6:	4924      	ldr	r1, [pc, #144]	; (8011a78 <__kernel_cos+0x180>)
 80119e8:	4602      	mov	r2, r0
 80119ea:	2000      	movs	r0, #0
 80119ec:	f7ee fc54 	bl	8000298 <__aeabi_dsub>
 80119f0:	ecbd 8b02 	vpop	{d8}
 80119f4:	ec41 0b10 	vmov	d0, r0, r1
 80119f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fc:	4b1f      	ldr	r3, [pc, #124]	; (8011a7c <__kernel_cos+0x184>)
 80119fe:	491e      	ldr	r1, [pc, #120]	; (8011a78 <__kernel_cos+0x180>)
 8011a00:	429e      	cmp	r6, r3
 8011a02:	bfcc      	ite	gt
 8011a04:	4d1e      	ldrgt	r5, [pc, #120]	; (8011a80 <__kernel_cos+0x188>)
 8011a06:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011a0a:	2400      	movs	r4, #0
 8011a0c:	4622      	mov	r2, r4
 8011a0e:	462b      	mov	r3, r5
 8011a10:	2000      	movs	r0, #0
 8011a12:	f7ee fc41 	bl	8000298 <__aeabi_dsub>
 8011a16:	4622      	mov	r2, r4
 8011a18:	4606      	mov	r6, r0
 8011a1a:	460f      	mov	r7, r1
 8011a1c:	462b      	mov	r3, r5
 8011a1e:	4650      	mov	r0, sl
 8011a20:	4659      	mov	r1, fp
 8011a22:	f7ee fc39 	bl	8000298 <__aeabi_dsub>
 8011a26:	4642      	mov	r2, r8
 8011a28:	464b      	mov	r3, r9
 8011a2a:	f7ee fc35 	bl	8000298 <__aeabi_dsub>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	460b      	mov	r3, r1
 8011a32:	4630      	mov	r0, r6
 8011a34:	4639      	mov	r1, r7
 8011a36:	e7d9      	b.n	80119ec <__kernel_cos+0xf4>
 8011a38:	2000      	movs	r0, #0
 8011a3a:	490f      	ldr	r1, [pc, #60]	; (8011a78 <__kernel_cos+0x180>)
 8011a3c:	e7d8      	b.n	80119f0 <__kernel_cos+0xf8>
 8011a3e:	bf00      	nop
 8011a40:	be8838d4 	.word	0xbe8838d4
 8011a44:	bda8fae9 	.word	0xbda8fae9
 8011a48:	bdb4b1c4 	.word	0xbdb4b1c4
 8011a4c:	3e21ee9e 	.word	0x3e21ee9e
 8011a50:	809c52ad 	.word	0x809c52ad
 8011a54:	3e927e4f 	.word	0x3e927e4f
 8011a58:	19cb1590 	.word	0x19cb1590
 8011a5c:	3efa01a0 	.word	0x3efa01a0
 8011a60:	16c15177 	.word	0x16c15177
 8011a64:	3f56c16c 	.word	0x3f56c16c
 8011a68:	5555554c 	.word	0x5555554c
 8011a6c:	3fa55555 	.word	0x3fa55555
 8011a70:	3fe00000 	.word	0x3fe00000
 8011a74:	3fd33332 	.word	0x3fd33332
 8011a78:	3ff00000 	.word	0x3ff00000
 8011a7c:	3fe90000 	.word	0x3fe90000
 8011a80:	3fd20000 	.word	0x3fd20000
 8011a84:	00000000 	.word	0x00000000

08011a88 <__kernel_rem_pio2>:
 8011a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a8c:	ed2d 8b02 	vpush	{d8}
 8011a90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011a94:	1ed4      	subs	r4, r2, #3
 8011a96:	9308      	str	r3, [sp, #32]
 8011a98:	9101      	str	r1, [sp, #4]
 8011a9a:	4bc5      	ldr	r3, [pc, #788]	; (8011db0 <__kernel_rem_pio2+0x328>)
 8011a9c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011a9e:	9009      	str	r0, [sp, #36]	; 0x24
 8011aa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011aa4:	9304      	str	r3, [sp, #16]
 8011aa6:	9b08      	ldr	r3, [sp, #32]
 8011aa8:	3b01      	subs	r3, #1
 8011aaa:	9307      	str	r3, [sp, #28]
 8011aac:	2318      	movs	r3, #24
 8011aae:	fb94 f4f3 	sdiv	r4, r4, r3
 8011ab2:	f06f 0317 	mvn.w	r3, #23
 8011ab6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011aba:	fb04 3303 	mla	r3, r4, r3, r3
 8011abe:	eb03 0a02 	add.w	sl, r3, r2
 8011ac2:	9b04      	ldr	r3, [sp, #16]
 8011ac4:	9a07      	ldr	r2, [sp, #28]
 8011ac6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011da0 <__kernel_rem_pio2+0x318>
 8011aca:	eb03 0802 	add.w	r8, r3, r2
 8011ace:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011ad0:	1aa7      	subs	r7, r4, r2
 8011ad2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011ad6:	ae22      	add	r6, sp, #136	; 0x88
 8011ad8:	2500      	movs	r5, #0
 8011ada:	4545      	cmp	r5, r8
 8011adc:	dd13      	ble.n	8011b06 <__kernel_rem_pio2+0x7e>
 8011ade:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011da0 <__kernel_rem_pio2+0x318>
 8011ae2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011ae6:	2600      	movs	r6, #0
 8011ae8:	9b04      	ldr	r3, [sp, #16]
 8011aea:	429e      	cmp	r6, r3
 8011aec:	dc32      	bgt.n	8011b54 <__kernel_rem_pio2+0xcc>
 8011aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011af0:	9302      	str	r3, [sp, #8]
 8011af2:	9b08      	ldr	r3, [sp, #32]
 8011af4:	199d      	adds	r5, r3, r6
 8011af6:	ab22      	add	r3, sp, #136	; 0x88
 8011af8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011afc:	9306      	str	r3, [sp, #24]
 8011afe:	ec59 8b18 	vmov	r8, r9, d8
 8011b02:	2700      	movs	r7, #0
 8011b04:	e01f      	b.n	8011b46 <__kernel_rem_pio2+0xbe>
 8011b06:	42ef      	cmn	r7, r5
 8011b08:	d407      	bmi.n	8011b1a <__kernel_rem_pio2+0x92>
 8011b0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011b0e:	f7ee fd11 	bl	8000534 <__aeabi_i2d>
 8011b12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011b16:	3501      	adds	r5, #1
 8011b18:	e7df      	b.n	8011ada <__kernel_rem_pio2+0x52>
 8011b1a:	ec51 0b18 	vmov	r0, r1, d8
 8011b1e:	e7f8      	b.n	8011b12 <__kernel_rem_pio2+0x8a>
 8011b20:	9906      	ldr	r1, [sp, #24]
 8011b22:	9d02      	ldr	r5, [sp, #8]
 8011b24:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011b28:	9106      	str	r1, [sp, #24]
 8011b2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011b2e:	9502      	str	r5, [sp, #8]
 8011b30:	f7ee fd6a 	bl	8000608 <__aeabi_dmul>
 8011b34:	4602      	mov	r2, r0
 8011b36:	460b      	mov	r3, r1
 8011b38:	4640      	mov	r0, r8
 8011b3a:	4649      	mov	r1, r9
 8011b3c:	f7ee fbae 	bl	800029c <__adddf3>
 8011b40:	3701      	adds	r7, #1
 8011b42:	4680      	mov	r8, r0
 8011b44:	4689      	mov	r9, r1
 8011b46:	9b07      	ldr	r3, [sp, #28]
 8011b48:	429f      	cmp	r7, r3
 8011b4a:	dde9      	ble.n	8011b20 <__kernel_rem_pio2+0x98>
 8011b4c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011b50:	3601      	adds	r6, #1
 8011b52:	e7c9      	b.n	8011ae8 <__kernel_rem_pio2+0x60>
 8011b54:	9b04      	ldr	r3, [sp, #16]
 8011b56:	aa0e      	add	r2, sp, #56	; 0x38
 8011b58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b5c:	930c      	str	r3, [sp, #48]	; 0x30
 8011b5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011b60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011b64:	9c04      	ldr	r4, [sp, #16]
 8011b66:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b68:	ab9a      	add	r3, sp, #616	; 0x268
 8011b6a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011b6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b76:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011b7a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011b7e:	ab9a      	add	r3, sp, #616	; 0x268
 8011b80:	445b      	add	r3, fp
 8011b82:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011b86:	2500      	movs	r5, #0
 8011b88:	1b63      	subs	r3, r4, r5
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	dc78      	bgt.n	8011c80 <__kernel_rem_pio2+0x1f8>
 8011b8e:	4650      	mov	r0, sl
 8011b90:	ec49 8b10 	vmov	d0, r8, r9
 8011b94:	f000 fe3c 	bl	8012810 <scalbn>
 8011b98:	ec57 6b10 	vmov	r6, r7, d0
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011ba2:	ee10 0a10 	vmov	r0, s0
 8011ba6:	4639      	mov	r1, r7
 8011ba8:	f7ee fd2e 	bl	8000608 <__aeabi_dmul>
 8011bac:	ec41 0b10 	vmov	d0, r0, r1
 8011bb0:	f000 fd1a 	bl	80125e8 <floor>
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	ec51 0b10 	vmov	r0, r1, d0
 8011bba:	4b7e      	ldr	r3, [pc, #504]	; (8011db4 <__kernel_rem_pio2+0x32c>)
 8011bbc:	f7ee fd24 	bl	8000608 <__aeabi_dmul>
 8011bc0:	4602      	mov	r2, r0
 8011bc2:	460b      	mov	r3, r1
 8011bc4:	4630      	mov	r0, r6
 8011bc6:	4639      	mov	r1, r7
 8011bc8:	f7ee fb66 	bl	8000298 <__aeabi_dsub>
 8011bcc:	460f      	mov	r7, r1
 8011bce:	4606      	mov	r6, r0
 8011bd0:	f7ee ffca 	bl	8000b68 <__aeabi_d2iz>
 8011bd4:	9006      	str	r0, [sp, #24]
 8011bd6:	f7ee fcad 	bl	8000534 <__aeabi_i2d>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	460b      	mov	r3, r1
 8011bde:	4630      	mov	r0, r6
 8011be0:	4639      	mov	r1, r7
 8011be2:	f7ee fb59 	bl	8000298 <__aeabi_dsub>
 8011be6:	f1ba 0f00 	cmp.w	sl, #0
 8011bea:	4606      	mov	r6, r0
 8011bec:	460f      	mov	r7, r1
 8011bee:	dd6c      	ble.n	8011cca <__kernel_rem_pio2+0x242>
 8011bf0:	1e62      	subs	r2, r4, #1
 8011bf2:	ab0e      	add	r3, sp, #56	; 0x38
 8011bf4:	f1ca 0118 	rsb	r1, sl, #24
 8011bf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011bfc:	9d06      	ldr	r5, [sp, #24]
 8011bfe:	fa40 f301 	asr.w	r3, r0, r1
 8011c02:	441d      	add	r5, r3
 8011c04:	408b      	lsls	r3, r1
 8011c06:	1ac0      	subs	r0, r0, r3
 8011c08:	ab0e      	add	r3, sp, #56	; 0x38
 8011c0a:	9506      	str	r5, [sp, #24]
 8011c0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011c10:	f1ca 0317 	rsb	r3, sl, #23
 8011c14:	fa40 f303 	asr.w	r3, r0, r3
 8011c18:	9302      	str	r3, [sp, #8]
 8011c1a:	9b02      	ldr	r3, [sp, #8]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	dd62      	ble.n	8011ce6 <__kernel_rem_pio2+0x25e>
 8011c20:	9b06      	ldr	r3, [sp, #24]
 8011c22:	2200      	movs	r2, #0
 8011c24:	3301      	adds	r3, #1
 8011c26:	9306      	str	r3, [sp, #24]
 8011c28:	4615      	mov	r5, r2
 8011c2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011c2e:	4294      	cmp	r4, r2
 8011c30:	f300 8095 	bgt.w	8011d5e <__kernel_rem_pio2+0x2d6>
 8011c34:	f1ba 0f00 	cmp.w	sl, #0
 8011c38:	dd07      	ble.n	8011c4a <__kernel_rem_pio2+0x1c2>
 8011c3a:	f1ba 0f01 	cmp.w	sl, #1
 8011c3e:	f000 80a2 	beq.w	8011d86 <__kernel_rem_pio2+0x2fe>
 8011c42:	f1ba 0f02 	cmp.w	sl, #2
 8011c46:	f000 80c1 	beq.w	8011dcc <__kernel_rem_pio2+0x344>
 8011c4a:	9b02      	ldr	r3, [sp, #8]
 8011c4c:	2b02      	cmp	r3, #2
 8011c4e:	d14a      	bne.n	8011ce6 <__kernel_rem_pio2+0x25e>
 8011c50:	4632      	mov	r2, r6
 8011c52:	463b      	mov	r3, r7
 8011c54:	2000      	movs	r0, #0
 8011c56:	4958      	ldr	r1, [pc, #352]	; (8011db8 <__kernel_rem_pio2+0x330>)
 8011c58:	f7ee fb1e 	bl	8000298 <__aeabi_dsub>
 8011c5c:	4606      	mov	r6, r0
 8011c5e:	460f      	mov	r7, r1
 8011c60:	2d00      	cmp	r5, #0
 8011c62:	d040      	beq.n	8011ce6 <__kernel_rem_pio2+0x25e>
 8011c64:	4650      	mov	r0, sl
 8011c66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011da8 <__kernel_rem_pio2+0x320>
 8011c6a:	f000 fdd1 	bl	8012810 <scalbn>
 8011c6e:	4630      	mov	r0, r6
 8011c70:	4639      	mov	r1, r7
 8011c72:	ec53 2b10 	vmov	r2, r3, d0
 8011c76:	f7ee fb0f 	bl	8000298 <__aeabi_dsub>
 8011c7a:	4606      	mov	r6, r0
 8011c7c:	460f      	mov	r7, r1
 8011c7e:	e032      	b.n	8011ce6 <__kernel_rem_pio2+0x25e>
 8011c80:	2200      	movs	r2, #0
 8011c82:	4b4e      	ldr	r3, [pc, #312]	; (8011dbc <__kernel_rem_pio2+0x334>)
 8011c84:	4640      	mov	r0, r8
 8011c86:	4649      	mov	r1, r9
 8011c88:	f7ee fcbe 	bl	8000608 <__aeabi_dmul>
 8011c8c:	f7ee ff6c 	bl	8000b68 <__aeabi_d2iz>
 8011c90:	f7ee fc50 	bl	8000534 <__aeabi_i2d>
 8011c94:	2200      	movs	r2, #0
 8011c96:	4b4a      	ldr	r3, [pc, #296]	; (8011dc0 <__kernel_rem_pio2+0x338>)
 8011c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c9c:	f7ee fcb4 	bl	8000608 <__aeabi_dmul>
 8011ca0:	4602      	mov	r2, r0
 8011ca2:	460b      	mov	r3, r1
 8011ca4:	4640      	mov	r0, r8
 8011ca6:	4649      	mov	r1, r9
 8011ca8:	f7ee faf6 	bl	8000298 <__aeabi_dsub>
 8011cac:	f7ee ff5c 	bl	8000b68 <__aeabi_d2iz>
 8011cb0:	ab0e      	add	r3, sp, #56	; 0x38
 8011cb2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011cb6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011cbe:	f7ee faed 	bl	800029c <__adddf3>
 8011cc2:	3501      	adds	r5, #1
 8011cc4:	4680      	mov	r8, r0
 8011cc6:	4689      	mov	r9, r1
 8011cc8:	e75e      	b.n	8011b88 <__kernel_rem_pio2+0x100>
 8011cca:	d105      	bne.n	8011cd8 <__kernel_rem_pio2+0x250>
 8011ccc:	1e63      	subs	r3, r4, #1
 8011cce:	aa0e      	add	r2, sp, #56	; 0x38
 8011cd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011cd4:	15c3      	asrs	r3, r0, #23
 8011cd6:	e79f      	b.n	8011c18 <__kernel_rem_pio2+0x190>
 8011cd8:	2200      	movs	r2, #0
 8011cda:	4b3a      	ldr	r3, [pc, #232]	; (8011dc4 <__kernel_rem_pio2+0x33c>)
 8011cdc:	f7ee ff1a 	bl	8000b14 <__aeabi_dcmpge>
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	d139      	bne.n	8011d58 <__kernel_rem_pio2+0x2d0>
 8011ce4:	9002      	str	r0, [sp, #8]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	2300      	movs	r3, #0
 8011cea:	4630      	mov	r0, r6
 8011cec:	4639      	mov	r1, r7
 8011cee:	f7ee fef3 	bl	8000ad8 <__aeabi_dcmpeq>
 8011cf2:	2800      	cmp	r0, #0
 8011cf4:	f000 80c7 	beq.w	8011e86 <__kernel_rem_pio2+0x3fe>
 8011cf8:	1e65      	subs	r5, r4, #1
 8011cfa:	462b      	mov	r3, r5
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	9904      	ldr	r1, [sp, #16]
 8011d00:	428b      	cmp	r3, r1
 8011d02:	da6a      	bge.n	8011dda <__kernel_rem_pio2+0x352>
 8011d04:	2a00      	cmp	r2, #0
 8011d06:	f000 8088 	beq.w	8011e1a <__kernel_rem_pio2+0x392>
 8011d0a:	ab0e      	add	r3, sp, #56	; 0x38
 8011d0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011d10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f000 80b4 	beq.w	8011e82 <__kernel_rem_pio2+0x3fa>
 8011d1a:	4650      	mov	r0, sl
 8011d1c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011da8 <__kernel_rem_pio2+0x320>
 8011d20:	f000 fd76 	bl	8012810 <scalbn>
 8011d24:	00ec      	lsls	r4, r5, #3
 8011d26:	ab72      	add	r3, sp, #456	; 0x1c8
 8011d28:	191e      	adds	r6, r3, r4
 8011d2a:	ec59 8b10 	vmov	r8, r9, d0
 8011d2e:	f106 0a08 	add.w	sl, r6, #8
 8011d32:	462f      	mov	r7, r5
 8011d34:	2f00      	cmp	r7, #0
 8011d36:	f280 80df 	bge.w	8011ef8 <__kernel_rem_pio2+0x470>
 8011d3a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011da0 <__kernel_rem_pio2+0x318>
 8011d3e:	f04f 0a00 	mov.w	sl, #0
 8011d42:	eba5 030a 	sub.w	r3, r5, sl
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	f2c0 810a 	blt.w	8011f60 <__kernel_rem_pio2+0x4d8>
 8011d4c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011dc8 <__kernel_rem_pio2+0x340>
 8011d50:	ec59 8b18 	vmov	r8, r9, d8
 8011d54:	2700      	movs	r7, #0
 8011d56:	e0f5      	b.n	8011f44 <__kernel_rem_pio2+0x4bc>
 8011d58:	2302      	movs	r3, #2
 8011d5a:	9302      	str	r3, [sp, #8]
 8011d5c:	e760      	b.n	8011c20 <__kernel_rem_pio2+0x198>
 8011d5e:	ab0e      	add	r3, sp, #56	; 0x38
 8011d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d64:	b94d      	cbnz	r5, 8011d7a <__kernel_rem_pio2+0x2f2>
 8011d66:	b12b      	cbz	r3, 8011d74 <__kernel_rem_pio2+0x2ec>
 8011d68:	a80e      	add	r0, sp, #56	; 0x38
 8011d6a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011d6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011d72:	2301      	movs	r3, #1
 8011d74:	3201      	adds	r2, #1
 8011d76:	461d      	mov	r5, r3
 8011d78:	e759      	b.n	8011c2e <__kernel_rem_pio2+0x1a6>
 8011d7a:	a80e      	add	r0, sp, #56	; 0x38
 8011d7c:	1acb      	subs	r3, r1, r3
 8011d7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011d82:	462b      	mov	r3, r5
 8011d84:	e7f6      	b.n	8011d74 <__kernel_rem_pio2+0x2ec>
 8011d86:	1e62      	subs	r2, r4, #1
 8011d88:	ab0e      	add	r3, sp, #56	; 0x38
 8011d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011d92:	a90e      	add	r1, sp, #56	; 0x38
 8011d94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011d98:	e757      	b.n	8011c4a <__kernel_rem_pio2+0x1c2>
 8011d9a:	bf00      	nop
 8011d9c:	f3af 8000 	nop.w
	...
 8011dac:	3ff00000 	.word	0x3ff00000
 8011db0:	08013078 	.word	0x08013078
 8011db4:	40200000 	.word	0x40200000
 8011db8:	3ff00000 	.word	0x3ff00000
 8011dbc:	3e700000 	.word	0x3e700000
 8011dc0:	41700000 	.word	0x41700000
 8011dc4:	3fe00000 	.word	0x3fe00000
 8011dc8:	08013038 	.word	0x08013038
 8011dcc:	1e62      	subs	r2, r4, #1
 8011dce:	ab0e      	add	r3, sp, #56	; 0x38
 8011dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011dd8:	e7db      	b.n	8011d92 <__kernel_rem_pio2+0x30a>
 8011dda:	a90e      	add	r1, sp, #56	; 0x38
 8011ddc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011de0:	3b01      	subs	r3, #1
 8011de2:	430a      	orrs	r2, r1
 8011de4:	e78b      	b.n	8011cfe <__kernel_rem_pio2+0x276>
 8011de6:	3301      	adds	r3, #1
 8011de8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011dec:	2900      	cmp	r1, #0
 8011dee:	d0fa      	beq.n	8011de6 <__kernel_rem_pio2+0x35e>
 8011df0:	9a08      	ldr	r2, [sp, #32]
 8011df2:	4422      	add	r2, r4
 8011df4:	00d2      	lsls	r2, r2, #3
 8011df6:	a922      	add	r1, sp, #136	; 0x88
 8011df8:	18e3      	adds	r3, r4, r3
 8011dfa:	9206      	str	r2, [sp, #24]
 8011dfc:	440a      	add	r2, r1
 8011dfe:	9302      	str	r3, [sp, #8]
 8011e00:	f10b 0108 	add.w	r1, fp, #8
 8011e04:	f102 0308 	add.w	r3, r2, #8
 8011e08:	1c66      	adds	r6, r4, #1
 8011e0a:	910a      	str	r1, [sp, #40]	; 0x28
 8011e0c:	2500      	movs	r5, #0
 8011e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8011e10:	9b02      	ldr	r3, [sp, #8]
 8011e12:	42b3      	cmp	r3, r6
 8011e14:	da04      	bge.n	8011e20 <__kernel_rem_pio2+0x398>
 8011e16:	461c      	mov	r4, r3
 8011e18:	e6a6      	b.n	8011b68 <__kernel_rem_pio2+0xe0>
 8011e1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	e7e3      	b.n	8011de8 <__kernel_rem_pio2+0x360>
 8011e20:	9b06      	ldr	r3, [sp, #24]
 8011e22:	18ef      	adds	r7, r5, r3
 8011e24:	ab22      	add	r3, sp, #136	; 0x88
 8011e26:	441f      	add	r7, r3
 8011e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011e2e:	f7ee fb81 	bl	8000534 <__aeabi_i2d>
 8011e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e34:	461c      	mov	r4, r3
 8011e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e38:	e9c7 0100 	strd	r0, r1, [r7]
 8011e3c:	eb03 0b05 	add.w	fp, r3, r5
 8011e40:	2700      	movs	r7, #0
 8011e42:	f04f 0800 	mov.w	r8, #0
 8011e46:	f04f 0900 	mov.w	r9, #0
 8011e4a:	9b07      	ldr	r3, [sp, #28]
 8011e4c:	429f      	cmp	r7, r3
 8011e4e:	dd08      	ble.n	8011e62 <__kernel_rem_pio2+0x3da>
 8011e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e52:	aa72      	add	r2, sp, #456	; 0x1c8
 8011e54:	18eb      	adds	r3, r5, r3
 8011e56:	4413      	add	r3, r2
 8011e58:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011e5c:	3601      	adds	r6, #1
 8011e5e:	3508      	adds	r5, #8
 8011e60:	e7d6      	b.n	8011e10 <__kernel_rem_pio2+0x388>
 8011e62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011e66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011e6a:	f7ee fbcd 	bl	8000608 <__aeabi_dmul>
 8011e6e:	4602      	mov	r2, r0
 8011e70:	460b      	mov	r3, r1
 8011e72:	4640      	mov	r0, r8
 8011e74:	4649      	mov	r1, r9
 8011e76:	f7ee fa11 	bl	800029c <__adddf3>
 8011e7a:	3701      	adds	r7, #1
 8011e7c:	4680      	mov	r8, r0
 8011e7e:	4689      	mov	r9, r1
 8011e80:	e7e3      	b.n	8011e4a <__kernel_rem_pio2+0x3c2>
 8011e82:	3d01      	subs	r5, #1
 8011e84:	e741      	b.n	8011d0a <__kernel_rem_pio2+0x282>
 8011e86:	f1ca 0000 	rsb	r0, sl, #0
 8011e8a:	ec47 6b10 	vmov	d0, r6, r7
 8011e8e:	f000 fcbf 	bl	8012810 <scalbn>
 8011e92:	ec57 6b10 	vmov	r6, r7, d0
 8011e96:	2200      	movs	r2, #0
 8011e98:	4b99      	ldr	r3, [pc, #612]	; (8012100 <__kernel_rem_pio2+0x678>)
 8011e9a:	ee10 0a10 	vmov	r0, s0
 8011e9e:	4639      	mov	r1, r7
 8011ea0:	f7ee fe38 	bl	8000b14 <__aeabi_dcmpge>
 8011ea4:	b1f8      	cbz	r0, 8011ee6 <__kernel_rem_pio2+0x45e>
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	4b96      	ldr	r3, [pc, #600]	; (8012104 <__kernel_rem_pio2+0x67c>)
 8011eaa:	4630      	mov	r0, r6
 8011eac:	4639      	mov	r1, r7
 8011eae:	f7ee fbab 	bl	8000608 <__aeabi_dmul>
 8011eb2:	f7ee fe59 	bl	8000b68 <__aeabi_d2iz>
 8011eb6:	4680      	mov	r8, r0
 8011eb8:	f7ee fb3c 	bl	8000534 <__aeabi_i2d>
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	4b90      	ldr	r3, [pc, #576]	; (8012100 <__kernel_rem_pio2+0x678>)
 8011ec0:	f7ee fba2 	bl	8000608 <__aeabi_dmul>
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	4639      	mov	r1, r7
 8011eca:	4630      	mov	r0, r6
 8011ecc:	f7ee f9e4 	bl	8000298 <__aeabi_dsub>
 8011ed0:	f7ee fe4a 	bl	8000b68 <__aeabi_d2iz>
 8011ed4:	1c65      	adds	r5, r4, #1
 8011ed6:	ab0e      	add	r3, sp, #56	; 0x38
 8011ed8:	f10a 0a18 	add.w	sl, sl, #24
 8011edc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011ee0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011ee4:	e719      	b.n	8011d1a <__kernel_rem_pio2+0x292>
 8011ee6:	4630      	mov	r0, r6
 8011ee8:	4639      	mov	r1, r7
 8011eea:	f7ee fe3d 	bl	8000b68 <__aeabi_d2iz>
 8011eee:	ab0e      	add	r3, sp, #56	; 0x38
 8011ef0:	4625      	mov	r5, r4
 8011ef2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011ef6:	e710      	b.n	8011d1a <__kernel_rem_pio2+0x292>
 8011ef8:	ab0e      	add	r3, sp, #56	; 0x38
 8011efa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011efe:	f7ee fb19 	bl	8000534 <__aeabi_i2d>
 8011f02:	4642      	mov	r2, r8
 8011f04:	464b      	mov	r3, r9
 8011f06:	f7ee fb7f 	bl	8000608 <__aeabi_dmul>
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011f10:	4b7c      	ldr	r3, [pc, #496]	; (8012104 <__kernel_rem_pio2+0x67c>)
 8011f12:	4640      	mov	r0, r8
 8011f14:	4649      	mov	r1, r9
 8011f16:	f7ee fb77 	bl	8000608 <__aeabi_dmul>
 8011f1a:	3f01      	subs	r7, #1
 8011f1c:	4680      	mov	r8, r0
 8011f1e:	4689      	mov	r9, r1
 8011f20:	e708      	b.n	8011d34 <__kernel_rem_pio2+0x2ac>
 8011f22:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8011f2e:	f7ee fb6b 	bl	8000608 <__aeabi_dmul>
 8011f32:	4602      	mov	r2, r0
 8011f34:	460b      	mov	r3, r1
 8011f36:	4640      	mov	r0, r8
 8011f38:	4649      	mov	r1, r9
 8011f3a:	f7ee f9af 	bl	800029c <__adddf3>
 8011f3e:	3701      	adds	r7, #1
 8011f40:	4680      	mov	r8, r0
 8011f42:	4689      	mov	r9, r1
 8011f44:	9b04      	ldr	r3, [sp, #16]
 8011f46:	429f      	cmp	r7, r3
 8011f48:	dc01      	bgt.n	8011f4e <__kernel_rem_pio2+0x4c6>
 8011f4a:	45ba      	cmp	sl, r7
 8011f4c:	dae9      	bge.n	8011f22 <__kernel_rem_pio2+0x49a>
 8011f4e:	ab4a      	add	r3, sp, #296	; 0x128
 8011f50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011f54:	e9c3 8900 	strd	r8, r9, [r3]
 8011f58:	f10a 0a01 	add.w	sl, sl, #1
 8011f5c:	3e08      	subs	r6, #8
 8011f5e:	e6f0      	b.n	8011d42 <__kernel_rem_pio2+0x2ba>
 8011f60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011f62:	2b03      	cmp	r3, #3
 8011f64:	d85b      	bhi.n	801201e <__kernel_rem_pio2+0x596>
 8011f66:	e8df f003 	tbb	[pc, r3]
 8011f6a:	264a      	.short	0x264a
 8011f6c:	0226      	.short	0x0226
 8011f6e:	ab9a      	add	r3, sp, #616	; 0x268
 8011f70:	441c      	add	r4, r3
 8011f72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011f76:	46a2      	mov	sl, r4
 8011f78:	46ab      	mov	fp, r5
 8011f7a:	f1bb 0f00 	cmp.w	fp, #0
 8011f7e:	dc6c      	bgt.n	801205a <__kernel_rem_pio2+0x5d2>
 8011f80:	46a2      	mov	sl, r4
 8011f82:	46ab      	mov	fp, r5
 8011f84:	f1bb 0f01 	cmp.w	fp, #1
 8011f88:	f300 8086 	bgt.w	8012098 <__kernel_rem_pio2+0x610>
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	2100      	movs	r1, #0
 8011f90:	2d01      	cmp	r5, #1
 8011f92:	f300 80a0 	bgt.w	80120d6 <__kernel_rem_pio2+0x64e>
 8011f96:	9b02      	ldr	r3, [sp, #8]
 8011f98:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011f9c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f040 809e 	bne.w	80120e2 <__kernel_rem_pio2+0x65a>
 8011fa6:	9b01      	ldr	r3, [sp, #4]
 8011fa8:	e9c3 7800 	strd	r7, r8, [r3]
 8011fac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011fb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011fb4:	e033      	b.n	801201e <__kernel_rem_pio2+0x596>
 8011fb6:	3408      	adds	r4, #8
 8011fb8:	ab4a      	add	r3, sp, #296	; 0x128
 8011fba:	441c      	add	r4, r3
 8011fbc:	462e      	mov	r6, r5
 8011fbe:	2000      	movs	r0, #0
 8011fc0:	2100      	movs	r1, #0
 8011fc2:	2e00      	cmp	r6, #0
 8011fc4:	da3a      	bge.n	801203c <__kernel_rem_pio2+0x5b4>
 8011fc6:	9b02      	ldr	r3, [sp, #8]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d03d      	beq.n	8012048 <__kernel_rem_pio2+0x5c0>
 8011fcc:	4602      	mov	r2, r0
 8011fce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011fd2:	9c01      	ldr	r4, [sp, #4]
 8011fd4:	e9c4 2300 	strd	r2, r3, [r4]
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011fe0:	f7ee f95a 	bl	8000298 <__aeabi_dsub>
 8011fe4:	ae4c      	add	r6, sp, #304	; 0x130
 8011fe6:	2401      	movs	r4, #1
 8011fe8:	42a5      	cmp	r5, r4
 8011fea:	da30      	bge.n	801204e <__kernel_rem_pio2+0x5c6>
 8011fec:	9b02      	ldr	r3, [sp, #8]
 8011fee:	b113      	cbz	r3, 8011ff6 <__kernel_rem_pio2+0x56e>
 8011ff0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	9b01      	ldr	r3, [sp, #4]
 8011ff8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011ffc:	e00f      	b.n	801201e <__kernel_rem_pio2+0x596>
 8011ffe:	ab9a      	add	r3, sp, #616	; 0x268
 8012000:	441c      	add	r4, r3
 8012002:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012006:	2000      	movs	r0, #0
 8012008:	2100      	movs	r1, #0
 801200a:	2d00      	cmp	r5, #0
 801200c:	da10      	bge.n	8012030 <__kernel_rem_pio2+0x5a8>
 801200e:	9b02      	ldr	r3, [sp, #8]
 8012010:	b113      	cbz	r3, 8012018 <__kernel_rem_pio2+0x590>
 8012012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012016:	4619      	mov	r1, r3
 8012018:	9b01      	ldr	r3, [sp, #4]
 801201a:	e9c3 0100 	strd	r0, r1, [r3]
 801201e:	9b06      	ldr	r3, [sp, #24]
 8012020:	f003 0007 	and.w	r0, r3, #7
 8012024:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012028:	ecbd 8b02 	vpop	{d8}
 801202c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012030:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012034:	f7ee f932 	bl	800029c <__adddf3>
 8012038:	3d01      	subs	r5, #1
 801203a:	e7e6      	b.n	801200a <__kernel_rem_pio2+0x582>
 801203c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012040:	f7ee f92c 	bl	800029c <__adddf3>
 8012044:	3e01      	subs	r6, #1
 8012046:	e7bc      	b.n	8011fc2 <__kernel_rem_pio2+0x53a>
 8012048:	4602      	mov	r2, r0
 801204a:	460b      	mov	r3, r1
 801204c:	e7c1      	b.n	8011fd2 <__kernel_rem_pio2+0x54a>
 801204e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012052:	f7ee f923 	bl	800029c <__adddf3>
 8012056:	3401      	adds	r4, #1
 8012058:	e7c6      	b.n	8011fe8 <__kernel_rem_pio2+0x560>
 801205a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801205e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012062:	4640      	mov	r0, r8
 8012064:	ec53 2b17 	vmov	r2, r3, d7
 8012068:	4649      	mov	r1, r9
 801206a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801206e:	f7ee f915 	bl	800029c <__adddf3>
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	4606      	mov	r6, r0
 8012078:	460f      	mov	r7, r1
 801207a:	4640      	mov	r0, r8
 801207c:	4649      	mov	r1, r9
 801207e:	f7ee f90b 	bl	8000298 <__aeabi_dsub>
 8012082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012086:	f7ee f909 	bl	800029c <__adddf3>
 801208a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801208e:	e9ca 0100 	strd	r0, r1, [sl]
 8012092:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012096:	e770      	b.n	8011f7a <__kernel_rem_pio2+0x4f2>
 8012098:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801209c:	ed3a 7b02 	vldmdb	sl!, {d7}
 80120a0:	4630      	mov	r0, r6
 80120a2:	ec53 2b17 	vmov	r2, r3, d7
 80120a6:	4639      	mov	r1, r7
 80120a8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80120ac:	f7ee f8f6 	bl	800029c <__adddf3>
 80120b0:	4602      	mov	r2, r0
 80120b2:	460b      	mov	r3, r1
 80120b4:	4680      	mov	r8, r0
 80120b6:	4689      	mov	r9, r1
 80120b8:	4630      	mov	r0, r6
 80120ba:	4639      	mov	r1, r7
 80120bc:	f7ee f8ec 	bl	8000298 <__aeabi_dsub>
 80120c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120c4:	f7ee f8ea 	bl	800029c <__adddf3>
 80120c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80120cc:	e9ca 0100 	strd	r0, r1, [sl]
 80120d0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80120d4:	e756      	b.n	8011f84 <__kernel_rem_pio2+0x4fc>
 80120d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80120da:	f7ee f8df 	bl	800029c <__adddf3>
 80120de:	3d01      	subs	r5, #1
 80120e0:	e756      	b.n	8011f90 <__kernel_rem_pio2+0x508>
 80120e2:	9b01      	ldr	r3, [sp, #4]
 80120e4:	9a01      	ldr	r2, [sp, #4]
 80120e6:	601f      	str	r7, [r3, #0]
 80120e8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80120ec:	605c      	str	r4, [r3, #4]
 80120ee:	609d      	str	r5, [r3, #8]
 80120f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80120f4:	60d3      	str	r3, [r2, #12]
 80120f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120fa:	6110      	str	r0, [r2, #16]
 80120fc:	6153      	str	r3, [r2, #20]
 80120fe:	e78e      	b.n	801201e <__kernel_rem_pio2+0x596>
 8012100:	41700000 	.word	0x41700000
 8012104:	3e700000 	.word	0x3e700000

08012108 <__kernel_sin>:
 8012108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801210c:	ec55 4b10 	vmov	r4, r5, d0
 8012110:	b085      	sub	sp, #20
 8012112:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012116:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801211a:	ed8d 1b00 	vstr	d1, [sp]
 801211e:	9002      	str	r0, [sp, #8]
 8012120:	da06      	bge.n	8012130 <__kernel_sin+0x28>
 8012122:	ee10 0a10 	vmov	r0, s0
 8012126:	4629      	mov	r1, r5
 8012128:	f7ee fd1e 	bl	8000b68 <__aeabi_d2iz>
 801212c:	2800      	cmp	r0, #0
 801212e:	d051      	beq.n	80121d4 <__kernel_sin+0xcc>
 8012130:	4622      	mov	r2, r4
 8012132:	462b      	mov	r3, r5
 8012134:	4620      	mov	r0, r4
 8012136:	4629      	mov	r1, r5
 8012138:	f7ee fa66 	bl	8000608 <__aeabi_dmul>
 801213c:	4682      	mov	sl, r0
 801213e:	468b      	mov	fp, r1
 8012140:	4602      	mov	r2, r0
 8012142:	460b      	mov	r3, r1
 8012144:	4620      	mov	r0, r4
 8012146:	4629      	mov	r1, r5
 8012148:	f7ee fa5e 	bl	8000608 <__aeabi_dmul>
 801214c:	a341      	add	r3, pc, #260	; (adr r3, 8012254 <__kernel_sin+0x14c>)
 801214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012152:	4680      	mov	r8, r0
 8012154:	4689      	mov	r9, r1
 8012156:	4650      	mov	r0, sl
 8012158:	4659      	mov	r1, fp
 801215a:	f7ee fa55 	bl	8000608 <__aeabi_dmul>
 801215e:	a33f      	add	r3, pc, #252	; (adr r3, 801225c <__kernel_sin+0x154>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	f7ee f898 	bl	8000298 <__aeabi_dsub>
 8012168:	4652      	mov	r2, sl
 801216a:	465b      	mov	r3, fp
 801216c:	f7ee fa4c 	bl	8000608 <__aeabi_dmul>
 8012170:	a33c      	add	r3, pc, #240	; (adr r3, 8012264 <__kernel_sin+0x15c>)
 8012172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012176:	f7ee f891 	bl	800029c <__adddf3>
 801217a:	4652      	mov	r2, sl
 801217c:	465b      	mov	r3, fp
 801217e:	f7ee fa43 	bl	8000608 <__aeabi_dmul>
 8012182:	a33a      	add	r3, pc, #232	; (adr r3, 801226c <__kernel_sin+0x164>)
 8012184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012188:	f7ee f886 	bl	8000298 <__aeabi_dsub>
 801218c:	4652      	mov	r2, sl
 801218e:	465b      	mov	r3, fp
 8012190:	f7ee fa3a 	bl	8000608 <__aeabi_dmul>
 8012194:	a337      	add	r3, pc, #220	; (adr r3, 8012274 <__kernel_sin+0x16c>)
 8012196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219a:	f7ee f87f 	bl	800029c <__adddf3>
 801219e:	9b02      	ldr	r3, [sp, #8]
 80121a0:	4606      	mov	r6, r0
 80121a2:	460f      	mov	r7, r1
 80121a4:	b9db      	cbnz	r3, 80121de <__kernel_sin+0xd6>
 80121a6:	4602      	mov	r2, r0
 80121a8:	460b      	mov	r3, r1
 80121aa:	4650      	mov	r0, sl
 80121ac:	4659      	mov	r1, fp
 80121ae:	f7ee fa2b 	bl	8000608 <__aeabi_dmul>
 80121b2:	a325      	add	r3, pc, #148	; (adr r3, 8012248 <__kernel_sin+0x140>)
 80121b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b8:	f7ee f86e 	bl	8000298 <__aeabi_dsub>
 80121bc:	4642      	mov	r2, r8
 80121be:	464b      	mov	r3, r9
 80121c0:	f7ee fa22 	bl	8000608 <__aeabi_dmul>
 80121c4:	4602      	mov	r2, r0
 80121c6:	460b      	mov	r3, r1
 80121c8:	4620      	mov	r0, r4
 80121ca:	4629      	mov	r1, r5
 80121cc:	f7ee f866 	bl	800029c <__adddf3>
 80121d0:	4604      	mov	r4, r0
 80121d2:	460d      	mov	r5, r1
 80121d4:	ec45 4b10 	vmov	d0, r4, r5
 80121d8:	b005      	add	sp, #20
 80121da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121de:	2200      	movs	r2, #0
 80121e0:	4b1b      	ldr	r3, [pc, #108]	; (8012250 <__kernel_sin+0x148>)
 80121e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121e6:	f7ee fa0f 	bl	8000608 <__aeabi_dmul>
 80121ea:	4632      	mov	r2, r6
 80121ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121f0:	463b      	mov	r3, r7
 80121f2:	4640      	mov	r0, r8
 80121f4:	4649      	mov	r1, r9
 80121f6:	f7ee fa07 	bl	8000608 <__aeabi_dmul>
 80121fa:	4602      	mov	r2, r0
 80121fc:	460b      	mov	r3, r1
 80121fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012202:	f7ee f849 	bl	8000298 <__aeabi_dsub>
 8012206:	4652      	mov	r2, sl
 8012208:	465b      	mov	r3, fp
 801220a:	f7ee f9fd 	bl	8000608 <__aeabi_dmul>
 801220e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012212:	f7ee f841 	bl	8000298 <__aeabi_dsub>
 8012216:	a30c      	add	r3, pc, #48	; (adr r3, 8012248 <__kernel_sin+0x140>)
 8012218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801221c:	4606      	mov	r6, r0
 801221e:	460f      	mov	r7, r1
 8012220:	4640      	mov	r0, r8
 8012222:	4649      	mov	r1, r9
 8012224:	f7ee f9f0 	bl	8000608 <__aeabi_dmul>
 8012228:	4602      	mov	r2, r0
 801222a:	460b      	mov	r3, r1
 801222c:	4630      	mov	r0, r6
 801222e:	4639      	mov	r1, r7
 8012230:	f7ee f834 	bl	800029c <__adddf3>
 8012234:	4602      	mov	r2, r0
 8012236:	460b      	mov	r3, r1
 8012238:	4620      	mov	r0, r4
 801223a:	4629      	mov	r1, r5
 801223c:	f7ee f82c 	bl	8000298 <__aeabi_dsub>
 8012240:	e7c6      	b.n	80121d0 <__kernel_sin+0xc8>
 8012242:	bf00      	nop
 8012244:	f3af 8000 	nop.w
 8012248:	55555549 	.word	0x55555549
 801224c:	3fc55555 	.word	0x3fc55555
 8012250:	3fe00000 	.word	0x3fe00000
 8012254:	5acfd57c 	.word	0x5acfd57c
 8012258:	3de5d93a 	.word	0x3de5d93a
 801225c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012260:	3e5ae5e6 	.word	0x3e5ae5e6
 8012264:	57b1fe7d 	.word	0x57b1fe7d
 8012268:	3ec71de3 	.word	0x3ec71de3
 801226c:	19c161d5 	.word	0x19c161d5
 8012270:	3f2a01a0 	.word	0x3f2a01a0
 8012274:	1110f8a6 	.word	0x1110f8a6
 8012278:	3f811111 	.word	0x3f811111
 801227c:	00000000 	.word	0x00000000

08012280 <atan>:
 8012280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012284:	ec55 4b10 	vmov	r4, r5, d0
 8012288:	4bc3      	ldr	r3, [pc, #780]	; (8012598 <atan+0x318>)
 801228a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801228e:	429e      	cmp	r6, r3
 8012290:	46ab      	mov	fp, r5
 8012292:	dd18      	ble.n	80122c6 <atan+0x46>
 8012294:	4bc1      	ldr	r3, [pc, #772]	; (801259c <atan+0x31c>)
 8012296:	429e      	cmp	r6, r3
 8012298:	dc01      	bgt.n	801229e <atan+0x1e>
 801229a:	d109      	bne.n	80122b0 <atan+0x30>
 801229c:	b144      	cbz	r4, 80122b0 <atan+0x30>
 801229e:	4622      	mov	r2, r4
 80122a0:	462b      	mov	r3, r5
 80122a2:	4620      	mov	r0, r4
 80122a4:	4629      	mov	r1, r5
 80122a6:	f7ed fff9 	bl	800029c <__adddf3>
 80122aa:	4604      	mov	r4, r0
 80122ac:	460d      	mov	r5, r1
 80122ae:	e006      	b.n	80122be <atan+0x3e>
 80122b0:	f1bb 0f00 	cmp.w	fp, #0
 80122b4:	f340 8131 	ble.w	801251a <atan+0x29a>
 80122b8:	a59b      	add	r5, pc, #620	; (adr r5, 8012528 <atan+0x2a8>)
 80122ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80122be:	ec45 4b10 	vmov	d0, r4, r5
 80122c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c6:	4bb6      	ldr	r3, [pc, #728]	; (80125a0 <atan+0x320>)
 80122c8:	429e      	cmp	r6, r3
 80122ca:	dc14      	bgt.n	80122f6 <atan+0x76>
 80122cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80122d0:	429e      	cmp	r6, r3
 80122d2:	dc0d      	bgt.n	80122f0 <atan+0x70>
 80122d4:	a396      	add	r3, pc, #600	; (adr r3, 8012530 <atan+0x2b0>)
 80122d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122da:	ee10 0a10 	vmov	r0, s0
 80122de:	4629      	mov	r1, r5
 80122e0:	f7ed ffdc 	bl	800029c <__adddf3>
 80122e4:	2200      	movs	r2, #0
 80122e6:	4baf      	ldr	r3, [pc, #700]	; (80125a4 <atan+0x324>)
 80122e8:	f7ee fc1e 	bl	8000b28 <__aeabi_dcmpgt>
 80122ec:	2800      	cmp	r0, #0
 80122ee:	d1e6      	bne.n	80122be <atan+0x3e>
 80122f0:	f04f 3aff 	mov.w	sl, #4294967295
 80122f4:	e02b      	b.n	801234e <atan+0xce>
 80122f6:	f000 f963 	bl	80125c0 <fabs>
 80122fa:	4bab      	ldr	r3, [pc, #684]	; (80125a8 <atan+0x328>)
 80122fc:	429e      	cmp	r6, r3
 80122fe:	ec55 4b10 	vmov	r4, r5, d0
 8012302:	f300 80bf 	bgt.w	8012484 <atan+0x204>
 8012306:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801230a:	429e      	cmp	r6, r3
 801230c:	f300 80a0 	bgt.w	8012450 <atan+0x1d0>
 8012310:	ee10 2a10 	vmov	r2, s0
 8012314:	ee10 0a10 	vmov	r0, s0
 8012318:	462b      	mov	r3, r5
 801231a:	4629      	mov	r1, r5
 801231c:	f7ed ffbe 	bl	800029c <__adddf3>
 8012320:	2200      	movs	r2, #0
 8012322:	4ba0      	ldr	r3, [pc, #640]	; (80125a4 <atan+0x324>)
 8012324:	f7ed ffb8 	bl	8000298 <__aeabi_dsub>
 8012328:	2200      	movs	r2, #0
 801232a:	4606      	mov	r6, r0
 801232c:	460f      	mov	r7, r1
 801232e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012332:	4620      	mov	r0, r4
 8012334:	4629      	mov	r1, r5
 8012336:	f7ed ffb1 	bl	800029c <__adddf3>
 801233a:	4602      	mov	r2, r0
 801233c:	460b      	mov	r3, r1
 801233e:	4630      	mov	r0, r6
 8012340:	4639      	mov	r1, r7
 8012342:	f7ee fa8b 	bl	800085c <__aeabi_ddiv>
 8012346:	f04f 0a00 	mov.w	sl, #0
 801234a:	4604      	mov	r4, r0
 801234c:	460d      	mov	r5, r1
 801234e:	4622      	mov	r2, r4
 8012350:	462b      	mov	r3, r5
 8012352:	4620      	mov	r0, r4
 8012354:	4629      	mov	r1, r5
 8012356:	f7ee f957 	bl	8000608 <__aeabi_dmul>
 801235a:	4602      	mov	r2, r0
 801235c:	460b      	mov	r3, r1
 801235e:	4680      	mov	r8, r0
 8012360:	4689      	mov	r9, r1
 8012362:	f7ee f951 	bl	8000608 <__aeabi_dmul>
 8012366:	a374      	add	r3, pc, #464	; (adr r3, 8012538 <atan+0x2b8>)
 8012368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236c:	4606      	mov	r6, r0
 801236e:	460f      	mov	r7, r1
 8012370:	f7ee f94a 	bl	8000608 <__aeabi_dmul>
 8012374:	a372      	add	r3, pc, #456	; (adr r3, 8012540 <atan+0x2c0>)
 8012376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237a:	f7ed ff8f 	bl	800029c <__adddf3>
 801237e:	4632      	mov	r2, r6
 8012380:	463b      	mov	r3, r7
 8012382:	f7ee f941 	bl	8000608 <__aeabi_dmul>
 8012386:	a370      	add	r3, pc, #448	; (adr r3, 8012548 <atan+0x2c8>)
 8012388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238c:	f7ed ff86 	bl	800029c <__adddf3>
 8012390:	4632      	mov	r2, r6
 8012392:	463b      	mov	r3, r7
 8012394:	f7ee f938 	bl	8000608 <__aeabi_dmul>
 8012398:	a36d      	add	r3, pc, #436	; (adr r3, 8012550 <atan+0x2d0>)
 801239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239e:	f7ed ff7d 	bl	800029c <__adddf3>
 80123a2:	4632      	mov	r2, r6
 80123a4:	463b      	mov	r3, r7
 80123a6:	f7ee f92f 	bl	8000608 <__aeabi_dmul>
 80123aa:	a36b      	add	r3, pc, #428	; (adr r3, 8012558 <atan+0x2d8>)
 80123ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b0:	f7ed ff74 	bl	800029c <__adddf3>
 80123b4:	4632      	mov	r2, r6
 80123b6:	463b      	mov	r3, r7
 80123b8:	f7ee f926 	bl	8000608 <__aeabi_dmul>
 80123bc:	a368      	add	r3, pc, #416	; (adr r3, 8012560 <atan+0x2e0>)
 80123be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c2:	f7ed ff6b 	bl	800029c <__adddf3>
 80123c6:	4642      	mov	r2, r8
 80123c8:	464b      	mov	r3, r9
 80123ca:	f7ee f91d 	bl	8000608 <__aeabi_dmul>
 80123ce:	a366      	add	r3, pc, #408	; (adr r3, 8012568 <atan+0x2e8>)
 80123d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d4:	4680      	mov	r8, r0
 80123d6:	4689      	mov	r9, r1
 80123d8:	4630      	mov	r0, r6
 80123da:	4639      	mov	r1, r7
 80123dc:	f7ee f914 	bl	8000608 <__aeabi_dmul>
 80123e0:	a363      	add	r3, pc, #396	; (adr r3, 8012570 <atan+0x2f0>)
 80123e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e6:	f7ed ff57 	bl	8000298 <__aeabi_dsub>
 80123ea:	4632      	mov	r2, r6
 80123ec:	463b      	mov	r3, r7
 80123ee:	f7ee f90b 	bl	8000608 <__aeabi_dmul>
 80123f2:	a361      	add	r3, pc, #388	; (adr r3, 8012578 <atan+0x2f8>)
 80123f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f8:	f7ed ff4e 	bl	8000298 <__aeabi_dsub>
 80123fc:	4632      	mov	r2, r6
 80123fe:	463b      	mov	r3, r7
 8012400:	f7ee f902 	bl	8000608 <__aeabi_dmul>
 8012404:	a35e      	add	r3, pc, #376	; (adr r3, 8012580 <atan+0x300>)
 8012406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240a:	f7ed ff45 	bl	8000298 <__aeabi_dsub>
 801240e:	4632      	mov	r2, r6
 8012410:	463b      	mov	r3, r7
 8012412:	f7ee f8f9 	bl	8000608 <__aeabi_dmul>
 8012416:	a35c      	add	r3, pc, #368	; (adr r3, 8012588 <atan+0x308>)
 8012418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241c:	f7ed ff3c 	bl	8000298 <__aeabi_dsub>
 8012420:	4632      	mov	r2, r6
 8012422:	463b      	mov	r3, r7
 8012424:	f7ee f8f0 	bl	8000608 <__aeabi_dmul>
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	4640      	mov	r0, r8
 801242e:	4649      	mov	r1, r9
 8012430:	f7ed ff34 	bl	800029c <__adddf3>
 8012434:	4622      	mov	r2, r4
 8012436:	462b      	mov	r3, r5
 8012438:	f7ee f8e6 	bl	8000608 <__aeabi_dmul>
 801243c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012440:	4602      	mov	r2, r0
 8012442:	460b      	mov	r3, r1
 8012444:	d14b      	bne.n	80124de <atan+0x25e>
 8012446:	4620      	mov	r0, r4
 8012448:	4629      	mov	r1, r5
 801244a:	f7ed ff25 	bl	8000298 <__aeabi_dsub>
 801244e:	e72c      	b.n	80122aa <atan+0x2a>
 8012450:	ee10 0a10 	vmov	r0, s0
 8012454:	2200      	movs	r2, #0
 8012456:	4b53      	ldr	r3, [pc, #332]	; (80125a4 <atan+0x324>)
 8012458:	4629      	mov	r1, r5
 801245a:	f7ed ff1d 	bl	8000298 <__aeabi_dsub>
 801245e:	2200      	movs	r2, #0
 8012460:	4606      	mov	r6, r0
 8012462:	460f      	mov	r7, r1
 8012464:	4b4f      	ldr	r3, [pc, #316]	; (80125a4 <atan+0x324>)
 8012466:	4620      	mov	r0, r4
 8012468:	4629      	mov	r1, r5
 801246a:	f7ed ff17 	bl	800029c <__adddf3>
 801246e:	4602      	mov	r2, r0
 8012470:	460b      	mov	r3, r1
 8012472:	4630      	mov	r0, r6
 8012474:	4639      	mov	r1, r7
 8012476:	f7ee f9f1 	bl	800085c <__aeabi_ddiv>
 801247a:	f04f 0a01 	mov.w	sl, #1
 801247e:	4604      	mov	r4, r0
 8012480:	460d      	mov	r5, r1
 8012482:	e764      	b.n	801234e <atan+0xce>
 8012484:	4b49      	ldr	r3, [pc, #292]	; (80125ac <atan+0x32c>)
 8012486:	429e      	cmp	r6, r3
 8012488:	dc1d      	bgt.n	80124c6 <atan+0x246>
 801248a:	ee10 0a10 	vmov	r0, s0
 801248e:	2200      	movs	r2, #0
 8012490:	4b47      	ldr	r3, [pc, #284]	; (80125b0 <atan+0x330>)
 8012492:	4629      	mov	r1, r5
 8012494:	f7ed ff00 	bl	8000298 <__aeabi_dsub>
 8012498:	2200      	movs	r2, #0
 801249a:	4606      	mov	r6, r0
 801249c:	460f      	mov	r7, r1
 801249e:	4b44      	ldr	r3, [pc, #272]	; (80125b0 <atan+0x330>)
 80124a0:	4620      	mov	r0, r4
 80124a2:	4629      	mov	r1, r5
 80124a4:	f7ee f8b0 	bl	8000608 <__aeabi_dmul>
 80124a8:	2200      	movs	r2, #0
 80124aa:	4b3e      	ldr	r3, [pc, #248]	; (80125a4 <atan+0x324>)
 80124ac:	f7ed fef6 	bl	800029c <__adddf3>
 80124b0:	4602      	mov	r2, r0
 80124b2:	460b      	mov	r3, r1
 80124b4:	4630      	mov	r0, r6
 80124b6:	4639      	mov	r1, r7
 80124b8:	f7ee f9d0 	bl	800085c <__aeabi_ddiv>
 80124bc:	f04f 0a02 	mov.w	sl, #2
 80124c0:	4604      	mov	r4, r0
 80124c2:	460d      	mov	r5, r1
 80124c4:	e743      	b.n	801234e <atan+0xce>
 80124c6:	462b      	mov	r3, r5
 80124c8:	ee10 2a10 	vmov	r2, s0
 80124cc:	2000      	movs	r0, #0
 80124ce:	4939      	ldr	r1, [pc, #228]	; (80125b4 <atan+0x334>)
 80124d0:	f7ee f9c4 	bl	800085c <__aeabi_ddiv>
 80124d4:	f04f 0a03 	mov.w	sl, #3
 80124d8:	4604      	mov	r4, r0
 80124da:	460d      	mov	r5, r1
 80124dc:	e737      	b.n	801234e <atan+0xce>
 80124de:	4b36      	ldr	r3, [pc, #216]	; (80125b8 <atan+0x338>)
 80124e0:	4e36      	ldr	r6, [pc, #216]	; (80125bc <atan+0x33c>)
 80124e2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80124e6:	4456      	add	r6, sl
 80124e8:	449a      	add	sl, r3
 80124ea:	e9da 2300 	ldrd	r2, r3, [sl]
 80124ee:	f7ed fed3 	bl	8000298 <__aeabi_dsub>
 80124f2:	4622      	mov	r2, r4
 80124f4:	462b      	mov	r3, r5
 80124f6:	f7ed fecf 	bl	8000298 <__aeabi_dsub>
 80124fa:	4602      	mov	r2, r0
 80124fc:	460b      	mov	r3, r1
 80124fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012502:	f7ed fec9 	bl	8000298 <__aeabi_dsub>
 8012506:	f1bb 0f00 	cmp.w	fp, #0
 801250a:	4604      	mov	r4, r0
 801250c:	460d      	mov	r5, r1
 801250e:	f6bf aed6 	bge.w	80122be <atan+0x3e>
 8012512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012516:	461d      	mov	r5, r3
 8012518:	e6d1      	b.n	80122be <atan+0x3e>
 801251a:	a51d      	add	r5, pc, #116	; (adr r5, 8012590 <atan+0x310>)
 801251c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012520:	e6cd      	b.n	80122be <atan+0x3e>
 8012522:	bf00      	nop
 8012524:	f3af 8000 	nop.w
 8012528:	54442d18 	.word	0x54442d18
 801252c:	3ff921fb 	.word	0x3ff921fb
 8012530:	8800759c 	.word	0x8800759c
 8012534:	7e37e43c 	.word	0x7e37e43c
 8012538:	e322da11 	.word	0xe322da11
 801253c:	3f90ad3a 	.word	0x3f90ad3a
 8012540:	24760deb 	.word	0x24760deb
 8012544:	3fa97b4b 	.word	0x3fa97b4b
 8012548:	a0d03d51 	.word	0xa0d03d51
 801254c:	3fb10d66 	.word	0x3fb10d66
 8012550:	c54c206e 	.word	0xc54c206e
 8012554:	3fb745cd 	.word	0x3fb745cd
 8012558:	920083ff 	.word	0x920083ff
 801255c:	3fc24924 	.word	0x3fc24924
 8012560:	5555550d 	.word	0x5555550d
 8012564:	3fd55555 	.word	0x3fd55555
 8012568:	2c6a6c2f 	.word	0x2c6a6c2f
 801256c:	bfa2b444 	.word	0xbfa2b444
 8012570:	52defd9a 	.word	0x52defd9a
 8012574:	3fadde2d 	.word	0x3fadde2d
 8012578:	af749a6d 	.word	0xaf749a6d
 801257c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012580:	fe231671 	.word	0xfe231671
 8012584:	3fbc71c6 	.word	0x3fbc71c6
 8012588:	9998ebc4 	.word	0x9998ebc4
 801258c:	3fc99999 	.word	0x3fc99999
 8012590:	54442d18 	.word	0x54442d18
 8012594:	bff921fb 	.word	0xbff921fb
 8012598:	440fffff 	.word	0x440fffff
 801259c:	7ff00000 	.word	0x7ff00000
 80125a0:	3fdbffff 	.word	0x3fdbffff
 80125a4:	3ff00000 	.word	0x3ff00000
 80125a8:	3ff2ffff 	.word	0x3ff2ffff
 80125ac:	40037fff 	.word	0x40037fff
 80125b0:	3ff80000 	.word	0x3ff80000
 80125b4:	bff00000 	.word	0xbff00000
 80125b8:	080130a8 	.word	0x080130a8
 80125bc:	08013088 	.word	0x08013088

080125c0 <fabs>:
 80125c0:	ec51 0b10 	vmov	r0, r1, d0
 80125c4:	ee10 2a10 	vmov	r2, s0
 80125c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80125cc:	ec43 2b10 	vmov	d0, r2, r3
 80125d0:	4770      	bx	lr

080125d2 <finite>:
 80125d2:	ee10 3a90 	vmov	r3, s1
 80125d6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80125da:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80125de:	0fc0      	lsrs	r0, r0, #31
 80125e0:	4770      	bx	lr
 80125e2:	0000      	movs	r0, r0
 80125e4:	0000      	movs	r0, r0
	...

080125e8 <floor>:
 80125e8:	ec51 0b10 	vmov	r0, r1, d0
 80125ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80125f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80125f8:	2e13      	cmp	r6, #19
 80125fa:	460c      	mov	r4, r1
 80125fc:	ee10 5a10 	vmov	r5, s0
 8012600:	4680      	mov	r8, r0
 8012602:	dc34      	bgt.n	801266e <floor+0x86>
 8012604:	2e00      	cmp	r6, #0
 8012606:	da16      	bge.n	8012636 <floor+0x4e>
 8012608:	a335      	add	r3, pc, #212	; (adr r3, 80126e0 <floor+0xf8>)
 801260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260e:	f7ed fe45 	bl	800029c <__adddf3>
 8012612:	2200      	movs	r2, #0
 8012614:	2300      	movs	r3, #0
 8012616:	f7ee fa87 	bl	8000b28 <__aeabi_dcmpgt>
 801261a:	b148      	cbz	r0, 8012630 <floor+0x48>
 801261c:	2c00      	cmp	r4, #0
 801261e:	da59      	bge.n	80126d4 <floor+0xec>
 8012620:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012624:	4a30      	ldr	r2, [pc, #192]	; (80126e8 <floor+0x100>)
 8012626:	432b      	orrs	r3, r5
 8012628:	2500      	movs	r5, #0
 801262a:	42ab      	cmp	r3, r5
 801262c:	bf18      	it	ne
 801262e:	4614      	movne	r4, r2
 8012630:	4621      	mov	r1, r4
 8012632:	4628      	mov	r0, r5
 8012634:	e025      	b.n	8012682 <floor+0x9a>
 8012636:	4f2d      	ldr	r7, [pc, #180]	; (80126ec <floor+0x104>)
 8012638:	4137      	asrs	r7, r6
 801263a:	ea01 0307 	and.w	r3, r1, r7
 801263e:	4303      	orrs	r3, r0
 8012640:	d01f      	beq.n	8012682 <floor+0x9a>
 8012642:	a327      	add	r3, pc, #156	; (adr r3, 80126e0 <floor+0xf8>)
 8012644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012648:	f7ed fe28 	bl	800029c <__adddf3>
 801264c:	2200      	movs	r2, #0
 801264e:	2300      	movs	r3, #0
 8012650:	f7ee fa6a 	bl	8000b28 <__aeabi_dcmpgt>
 8012654:	2800      	cmp	r0, #0
 8012656:	d0eb      	beq.n	8012630 <floor+0x48>
 8012658:	2c00      	cmp	r4, #0
 801265a:	bfbe      	ittt	lt
 801265c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012660:	fa43 f606 	asrlt.w	r6, r3, r6
 8012664:	19a4      	addlt	r4, r4, r6
 8012666:	ea24 0407 	bic.w	r4, r4, r7
 801266a:	2500      	movs	r5, #0
 801266c:	e7e0      	b.n	8012630 <floor+0x48>
 801266e:	2e33      	cmp	r6, #51	; 0x33
 8012670:	dd0b      	ble.n	801268a <floor+0xa2>
 8012672:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012676:	d104      	bne.n	8012682 <floor+0x9a>
 8012678:	ee10 2a10 	vmov	r2, s0
 801267c:	460b      	mov	r3, r1
 801267e:	f7ed fe0d 	bl	800029c <__adddf3>
 8012682:	ec41 0b10 	vmov	d0, r0, r1
 8012686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801268a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801268e:	f04f 33ff 	mov.w	r3, #4294967295
 8012692:	fa23 f707 	lsr.w	r7, r3, r7
 8012696:	4207      	tst	r7, r0
 8012698:	d0f3      	beq.n	8012682 <floor+0x9a>
 801269a:	a311      	add	r3, pc, #68	; (adr r3, 80126e0 <floor+0xf8>)
 801269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a0:	f7ed fdfc 	bl	800029c <__adddf3>
 80126a4:	2200      	movs	r2, #0
 80126a6:	2300      	movs	r3, #0
 80126a8:	f7ee fa3e 	bl	8000b28 <__aeabi_dcmpgt>
 80126ac:	2800      	cmp	r0, #0
 80126ae:	d0bf      	beq.n	8012630 <floor+0x48>
 80126b0:	2c00      	cmp	r4, #0
 80126b2:	da02      	bge.n	80126ba <floor+0xd2>
 80126b4:	2e14      	cmp	r6, #20
 80126b6:	d103      	bne.n	80126c0 <floor+0xd8>
 80126b8:	3401      	adds	r4, #1
 80126ba:	ea25 0507 	bic.w	r5, r5, r7
 80126be:	e7b7      	b.n	8012630 <floor+0x48>
 80126c0:	2301      	movs	r3, #1
 80126c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80126c6:	fa03 f606 	lsl.w	r6, r3, r6
 80126ca:	4435      	add	r5, r6
 80126cc:	4545      	cmp	r5, r8
 80126ce:	bf38      	it	cc
 80126d0:	18e4      	addcc	r4, r4, r3
 80126d2:	e7f2      	b.n	80126ba <floor+0xd2>
 80126d4:	2500      	movs	r5, #0
 80126d6:	462c      	mov	r4, r5
 80126d8:	e7aa      	b.n	8012630 <floor+0x48>
 80126da:	bf00      	nop
 80126dc:	f3af 8000 	nop.w
 80126e0:	8800759c 	.word	0x8800759c
 80126e4:	7e37e43c 	.word	0x7e37e43c
 80126e8:	bff00000 	.word	0xbff00000
 80126ec:	000fffff 	.word	0x000fffff

080126f0 <matherr>:
 80126f0:	2000      	movs	r0, #0
 80126f2:	4770      	bx	lr
 80126f4:	0000      	movs	r0, r0
	...

080126f8 <nan>:
 80126f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012700 <nan+0x8>
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop
 8012700:	00000000 	.word	0x00000000
 8012704:	7ff80000 	.word	0x7ff80000

08012708 <rint>:
 8012708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801270a:	ec51 0b10 	vmov	r0, r1, d0
 801270e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012712:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012716:	2e13      	cmp	r6, #19
 8012718:	460b      	mov	r3, r1
 801271a:	ee10 4a10 	vmov	r4, s0
 801271e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012722:	dc56      	bgt.n	80127d2 <rint+0xca>
 8012724:	2e00      	cmp	r6, #0
 8012726:	da2b      	bge.n	8012780 <rint+0x78>
 8012728:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801272c:	4302      	orrs	r2, r0
 801272e:	d023      	beq.n	8012778 <rint+0x70>
 8012730:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012734:	4302      	orrs	r2, r0
 8012736:	4254      	negs	r4, r2
 8012738:	4314      	orrs	r4, r2
 801273a:	0c4b      	lsrs	r3, r1, #17
 801273c:	0b24      	lsrs	r4, r4, #12
 801273e:	045b      	lsls	r3, r3, #17
 8012740:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012744:	ea44 0103 	orr.w	r1, r4, r3
 8012748:	460b      	mov	r3, r1
 801274a:	492f      	ldr	r1, [pc, #188]	; (8012808 <rint+0x100>)
 801274c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012750:	e9d1 6700 	ldrd	r6, r7, [r1]
 8012754:	4602      	mov	r2, r0
 8012756:	4639      	mov	r1, r7
 8012758:	4630      	mov	r0, r6
 801275a:	f7ed fd9f 	bl	800029c <__adddf3>
 801275e:	e9cd 0100 	strd	r0, r1, [sp]
 8012762:	463b      	mov	r3, r7
 8012764:	4632      	mov	r2, r6
 8012766:	e9dd 0100 	ldrd	r0, r1, [sp]
 801276a:	f7ed fd95 	bl	8000298 <__aeabi_dsub>
 801276e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012772:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012776:	4639      	mov	r1, r7
 8012778:	ec41 0b10 	vmov	d0, r0, r1
 801277c:	b003      	add	sp, #12
 801277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012780:	4a22      	ldr	r2, [pc, #136]	; (801280c <rint+0x104>)
 8012782:	4132      	asrs	r2, r6
 8012784:	ea01 0702 	and.w	r7, r1, r2
 8012788:	4307      	orrs	r7, r0
 801278a:	d0f5      	beq.n	8012778 <rint+0x70>
 801278c:	0852      	lsrs	r2, r2, #1
 801278e:	4011      	ands	r1, r2
 8012790:	430c      	orrs	r4, r1
 8012792:	d00b      	beq.n	80127ac <rint+0xa4>
 8012794:	ea23 0202 	bic.w	r2, r3, r2
 8012798:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801279c:	2e13      	cmp	r6, #19
 801279e:	fa43 f306 	asr.w	r3, r3, r6
 80127a2:	bf0c      	ite	eq
 80127a4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80127a8:	2400      	movne	r4, #0
 80127aa:	4313      	orrs	r3, r2
 80127ac:	4916      	ldr	r1, [pc, #88]	; (8012808 <rint+0x100>)
 80127ae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80127b2:	4622      	mov	r2, r4
 80127b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80127b8:	4620      	mov	r0, r4
 80127ba:	4629      	mov	r1, r5
 80127bc:	f7ed fd6e 	bl	800029c <__adddf3>
 80127c0:	e9cd 0100 	strd	r0, r1, [sp]
 80127c4:	4622      	mov	r2, r4
 80127c6:	462b      	mov	r3, r5
 80127c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127cc:	f7ed fd64 	bl	8000298 <__aeabi_dsub>
 80127d0:	e7d2      	b.n	8012778 <rint+0x70>
 80127d2:	2e33      	cmp	r6, #51	; 0x33
 80127d4:	dd07      	ble.n	80127e6 <rint+0xde>
 80127d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80127da:	d1cd      	bne.n	8012778 <rint+0x70>
 80127dc:	ee10 2a10 	vmov	r2, s0
 80127e0:	f7ed fd5c 	bl	800029c <__adddf3>
 80127e4:	e7c8      	b.n	8012778 <rint+0x70>
 80127e6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80127ea:	f04f 32ff 	mov.w	r2, #4294967295
 80127ee:	40f2      	lsrs	r2, r6
 80127f0:	4210      	tst	r0, r2
 80127f2:	d0c1      	beq.n	8012778 <rint+0x70>
 80127f4:	0852      	lsrs	r2, r2, #1
 80127f6:	4210      	tst	r0, r2
 80127f8:	bf1f      	itttt	ne
 80127fa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80127fe:	ea20 0202 	bicne.w	r2, r0, r2
 8012802:	4134      	asrne	r4, r6
 8012804:	4314      	orrne	r4, r2
 8012806:	e7d1      	b.n	80127ac <rint+0xa4>
 8012808:	080130c8 	.word	0x080130c8
 801280c:	000fffff 	.word	0x000fffff

08012810 <scalbn>:
 8012810:	b570      	push	{r4, r5, r6, lr}
 8012812:	ec55 4b10 	vmov	r4, r5, d0
 8012816:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801281a:	4606      	mov	r6, r0
 801281c:	462b      	mov	r3, r5
 801281e:	b9aa      	cbnz	r2, 801284c <scalbn+0x3c>
 8012820:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012824:	4323      	orrs	r3, r4
 8012826:	d03b      	beq.n	80128a0 <scalbn+0x90>
 8012828:	4b31      	ldr	r3, [pc, #196]	; (80128f0 <scalbn+0xe0>)
 801282a:	4629      	mov	r1, r5
 801282c:	2200      	movs	r2, #0
 801282e:	ee10 0a10 	vmov	r0, s0
 8012832:	f7ed fee9 	bl	8000608 <__aeabi_dmul>
 8012836:	4b2f      	ldr	r3, [pc, #188]	; (80128f4 <scalbn+0xe4>)
 8012838:	429e      	cmp	r6, r3
 801283a:	4604      	mov	r4, r0
 801283c:	460d      	mov	r5, r1
 801283e:	da12      	bge.n	8012866 <scalbn+0x56>
 8012840:	a327      	add	r3, pc, #156	; (adr r3, 80128e0 <scalbn+0xd0>)
 8012842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012846:	f7ed fedf 	bl	8000608 <__aeabi_dmul>
 801284a:	e009      	b.n	8012860 <scalbn+0x50>
 801284c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012850:	428a      	cmp	r2, r1
 8012852:	d10c      	bne.n	801286e <scalbn+0x5e>
 8012854:	ee10 2a10 	vmov	r2, s0
 8012858:	4620      	mov	r0, r4
 801285a:	4629      	mov	r1, r5
 801285c:	f7ed fd1e 	bl	800029c <__adddf3>
 8012860:	4604      	mov	r4, r0
 8012862:	460d      	mov	r5, r1
 8012864:	e01c      	b.n	80128a0 <scalbn+0x90>
 8012866:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801286a:	460b      	mov	r3, r1
 801286c:	3a36      	subs	r2, #54	; 0x36
 801286e:	4432      	add	r2, r6
 8012870:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012874:	428a      	cmp	r2, r1
 8012876:	dd0b      	ble.n	8012890 <scalbn+0x80>
 8012878:	ec45 4b11 	vmov	d1, r4, r5
 801287c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80128e8 <scalbn+0xd8>
 8012880:	f000 f83c 	bl	80128fc <copysign>
 8012884:	a318      	add	r3, pc, #96	; (adr r3, 80128e8 <scalbn+0xd8>)
 8012886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288a:	ec51 0b10 	vmov	r0, r1, d0
 801288e:	e7da      	b.n	8012846 <scalbn+0x36>
 8012890:	2a00      	cmp	r2, #0
 8012892:	dd08      	ble.n	80128a6 <scalbn+0x96>
 8012894:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012898:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801289c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80128a0:	ec45 4b10 	vmov	d0, r4, r5
 80128a4:	bd70      	pop	{r4, r5, r6, pc}
 80128a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80128aa:	da0d      	bge.n	80128c8 <scalbn+0xb8>
 80128ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 80128b0:	429e      	cmp	r6, r3
 80128b2:	ec45 4b11 	vmov	d1, r4, r5
 80128b6:	dce1      	bgt.n	801287c <scalbn+0x6c>
 80128b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80128e0 <scalbn+0xd0>
 80128bc:	f000 f81e 	bl	80128fc <copysign>
 80128c0:	a307      	add	r3, pc, #28	; (adr r3, 80128e0 <scalbn+0xd0>)
 80128c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c6:	e7e0      	b.n	801288a <scalbn+0x7a>
 80128c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80128cc:	3236      	adds	r2, #54	; 0x36
 80128ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80128d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80128d6:	4620      	mov	r0, r4
 80128d8:	4629      	mov	r1, r5
 80128da:	2200      	movs	r2, #0
 80128dc:	4b06      	ldr	r3, [pc, #24]	; (80128f8 <scalbn+0xe8>)
 80128de:	e7b2      	b.n	8012846 <scalbn+0x36>
 80128e0:	c2f8f359 	.word	0xc2f8f359
 80128e4:	01a56e1f 	.word	0x01a56e1f
 80128e8:	8800759c 	.word	0x8800759c
 80128ec:	7e37e43c 	.word	0x7e37e43c
 80128f0:	43500000 	.word	0x43500000
 80128f4:	ffff3cb0 	.word	0xffff3cb0
 80128f8:	3c900000 	.word	0x3c900000

080128fc <copysign>:
 80128fc:	ec51 0b10 	vmov	r0, r1, d0
 8012900:	ee11 0a90 	vmov	r0, s3
 8012904:	ee10 2a10 	vmov	r2, s0
 8012908:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801290c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012910:	ea41 0300 	orr.w	r3, r1, r0
 8012914:	ec43 2b10 	vmov	d0, r2, r3
 8012918:	4770      	bx	lr
	...

0801291c <_init>:
 801291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801291e:	bf00      	nop
 8012920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012922:	bc08      	pop	{r3}
 8012924:	469e      	mov	lr, r3
 8012926:	4770      	bx	lr

08012928 <_fini>:
 8012928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801292a:	bf00      	nop
 801292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801292e:	bc08      	pop	{r3}
 8012930:	469e      	mov	lr, r3
 8012932:	4770      	bx	lr
