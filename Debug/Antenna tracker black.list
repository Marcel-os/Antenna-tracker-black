
Antenna tracker black.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  08012bc0  08012bc0  00022bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013350  08013350  000303c8  2**0
                  CONTENTS
  4 .ARM          00000008  08013350  08013350  00023350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013358  08013358  000303c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013358  08013358  00023358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801335c  0801335c  0002335c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  08013360  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001010  200003c8  08013728  000303c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200013d8  08013728  000313d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc38  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047ab  00000000  00000000  00050030  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001738  00000000  00000000  000547e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001500  00000000  00000000  00055f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c530  00000000  00000000  00057418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016ef3  00000000  00000000  00073948  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009751b  00000000  00000000  0008a83b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121d56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007970  00000000  00000000  00121dd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003c8 	.word	0x200003c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012ba4 	.word	0x08012ba4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003cc 	.word	0x200003cc
 80001dc:	08012ba4 	.word	0x08012ba4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <GPS_CallBack>:
	GPS.rxIndex=0;
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
}
//##################################################################################################################
void	GPS_CallBack(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8000f9c:	f001 ff16 	bl	8002dcc <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fa4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000faa:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fae:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000fb2:	d210      	bcs.n	8000fd6 <GPS_CallBack+0x3e>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fb6:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fbe:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fc4:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fc8:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fd2:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}	
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4903      	ldr	r1, [pc, #12]	; (8000fe8 <GPS_CallBack+0x50>)
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <GPS_CallBack+0x54>)
 8000fdc:	f005 ff10 	bl	8006e00 <HAL_UART_Receive_IT>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000410 	.word	0x20000410
 8000fe8:	20000612 	.word	0x20000612
 8000fec:	200009b0 	.word	0x200009b0

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <MX_ADC1_Init+0xb8>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800100a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800100e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001018:	2201      	movs	r2, #1
 800101a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800101e:	2201      	movs	r2, #1
 8001020:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001032:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <MX_ADC1_Init+0xbc>)
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800103e:	2202      	movs	r2, #2
 8001040:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800104c:	2201      	movs	r2, #1
 800104e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001052:	f001 fee9 	bl	8002e28 <HAL_ADC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800105c:	f001 f808 	bl	8002070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001060:	2304      	movs	r3, #4
 8001062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001068:	2307      	movs	r3, #7
 800106a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001072:	f002 f87b 	bl	800316c <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800107c:	f000 fff8 	bl	8002070 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001080:	2305      	movs	r3, #5
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800108e:	f002 f86d 	bl	800316c <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001098:	f000 ffea 	bl	8002070 <Error_Handler>
  }

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000660 	.word	0x20000660
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a33      	ldr	r2, [pc, #204]	; (800119c <HAL_ADC_MspInit+0xec>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d15f      	bne.n	8001192 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800110a:	2330      	movs	r3, #48	; 0x30
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4821      	ldr	r0, [pc, #132]	; (80011a4 <HAL_ADC_MspInit+0xf4>)
 800111e:	f002 fe79 	bl	8003e14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800114c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001168:	f002 fb4a 	bl	8003800 <HAL_DMA_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001172:	f000 ff7d 	bl	8002070 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2012      	movs	r0, #18
 8001188:	f002 fb03 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800118c:	2012      	movs	r0, #18
 800118e:	f002 fb1c 	bl	80037ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40012000 	.word	0x40012000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	200006a8 	.word	0x200006a8
 80011ac:	40026410 	.word	0x40026410

080011b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_DMA_Init+0x3c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2038      	movs	r0, #56	; 0x38
 80011d8:	f002 fadb 	bl	8003792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011dc:	2038      	movs	r0, #56	; 0x38
 80011de:	f002 faf4 	bl	80037ca <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <MX_GPIO_Init+0xbc>)
 800127e:	f002 ff63 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin;
 8001282:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_GPIO_Init+0xbc>)
 800129c:	f002 fdba 	bl	8003e14 <HAL_GPIO_Init>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400

080012b0 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 GPS_CallBack();
 80012b8:	f7ff fe6e 	bl	8000f98 <GPS_CallBack>
 //HAL_UART_Transmit_IT(&huart1, "RAMKA", sizeof("RAMKA"));
// HAL_UART_Transmit_IT(&huart1, &Received, 1); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
// HAL_UART_Receive_IT(&huart3, &Received, 1); // Ponowne włączenie nasłuchiwania

 //		GPS.GPGGA.LatitudeDecimal, GPS.GPGGA.LongitudeDecimal, GPS.GPGGA.MSL_Altitude
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if(htim == &htim4){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d102      	bne.n	80012da <HAL_TIM_PeriodElapsedCallback+0x16>
			//obsługa przerwania co 1ms
		flaga1ms = 1;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
	}
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200008b0 	.word	0x200008b0
 80012ec:	200003e8 	.word	0x200003e8

080012f0 <_write>:

int _write(int file, char *ptr, int len){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
    CDC_Transmit_FS((uint8_t*)ptr, len);
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f009 fba6 	bl	800aa50 <CDC_Transmit_FS>
    return len;
 8001304:	687b      	ldr	r3, [r7, #4]

}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <parse>:

void parse(){
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af04      	add	r7, sp, #16
  	char header[1];
  	int32_t PWM1, PWM2, DIR1, DIR2;
  	//PWM1 - height, PWM2 - azimuth

  	sscanf(ReceivedData, "%s %d %d %d %d", &header, &PWM1, &PWM2, &DIR1, &DIR2);
 8001316:	f107 0110 	add.w	r1, r7, #16
 800131a:	f107 0214 	add.w	r2, r7, #20
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	460b      	mov	r3, r1
 8001330:	4967      	ldr	r1, [pc, #412]	; (80014d0 <parse+0x1c0>)
 8001332:	4868      	ldr	r0, [pc, #416]	; (80014d4 <parse+0x1c4>)
 8001334:	f00a ff9e 	bl	800c274 <siscanf>
  	if( header[0] == 'S' && PWM1 >= 0 && PWM1 < 65535 && PWM2 >= 0 && PWM2 < 65535 && (DIR1 == 1 || DIR1 == 0) && (DIR2 == 1 || DIR2 == 0) )
 8001338:	7d3b      	ldrb	r3, [r7, #20]
 800133a:	2b53      	cmp	r3, #83	; 0x53
 800133c:	f040 80c1 	bne.w	80014c2 <parse+0x1b2>
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	f2c0 80bd 	blt.w	80014c2 <parse+0x1b2>
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800134e:	4293      	cmp	r3, r2
 8001350:	f300 80b7 	bgt.w	80014c2 <parse+0x1b2>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f2c0 80b3 	blt.w	80014c2 <parse+0x1b2>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001362:	4293      	cmp	r3, r2
 8001364:	f300 80ad 	bgt.w	80014c2 <parse+0x1b2>
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d003      	beq.n	8001376 <parse+0x66>
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 80a6 	bne.w	80014c2 <parse+0x1b2>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d003      	beq.n	8001384 <parse+0x74>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f040 809f 	bne.w	80014c2 <parse+0x1b2>
  	{
  		//send_json(PWM1, PWM2);
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM1 );
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4b54      	ldr	r3, [pc, #336]	; (80014d8 <parse+0x1c8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	635a      	str	r2, [r3, #52]	; 0x34
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2 );
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <parse+0x1c8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	639a      	str	r2, [r3, #56]	; 0x38

  		if(DIR1 == 1){
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d10b      	bne.n	80013b2 <parse+0xa2>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a0:	484e      	ldr	r0, [pc, #312]	; (80014dc <parse+0x1cc>)
 80013a2:	f002 fed1 	bl	8004148 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ac:	484b      	ldr	r0, [pc, #300]	; (80014dc <parse+0x1cc>)
 80013ae:	f002 fecb 	bl	8004148 <HAL_GPIO_WritePin>
  		}

  		if(DIR1 == 0){
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10b      	bne.n	80013d0 <parse+0xc0>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013be:	4847      	ldr	r0, [pc, #284]	; (80014dc <parse+0x1cc>)
 80013c0:	f002 fec2 	bl	8004148 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ca:	4844      	ldr	r0, [pc, #272]	; (80014dc <parse+0x1cc>)
 80013cc:	f002 febc 	bl	8004148 <HAL_GPIO_WritePin>
  		}

  		if(DIR2 == 1){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d10b      	bne.n	80013ee <parse+0xde>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013dc:	483f      	ldr	r0, [pc, #252]	; (80014dc <parse+0x1cc>)
 80013de:	f002 feb3 	bl	8004148 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e8:	483c      	ldr	r0, [pc, #240]	; (80014dc <parse+0x1cc>)
 80013ea:	f002 fead 	bl	8004148 <HAL_GPIO_WritePin>
  		}

  		if(DIR2 == 0){
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10b      	bne.n	800140c <parse+0xfc>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fa:	4838      	ldr	r0, [pc, #224]	; (80014dc <parse+0x1cc>)
 80013fc:	f002 fea4 	bl	8004148 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001406:	4835      	ldr	r0, [pc, #212]	; (80014dc <parse+0x1cc>)
 8001408:	f002 fe9e 	bl	8004148 <HAL_GPIO_WritePin>
  		}

  		if( PWM1 == 0 && PWM2 ==0 ){
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d11a      	bne.n	8001448 <parse+0x138>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d117      	bne.n	8001448 <parse+0x138>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800141e:	482f      	ldr	r0, [pc, #188]	; (80014dc <parse+0x1cc>)
 8001420:	f002 fe92 	bl	8004148 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142a:	482c      	ldr	r0, [pc, #176]	; (80014dc <parse+0x1cc>)
 800142c:	f002 fe8c 	bl	8004148 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001436:	4829      	ldr	r0, [pc, #164]	; (80014dc <parse+0x1cc>)
 8001438:	f002 fe86 	bl	8004148 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001442:	4826      	ldr	r0, [pc, #152]	; (80014dc <parse+0x1cc>)
 8001444:	f002 fe80 	bl	8004148 <HAL_GPIO_WritePin>
  		}
  		//send_json(PWM1, PWM2);
  		int a = 0, b = 0, c = 0, d = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  		if(HAL_GPIO_ReadPin(MOTOR11_GPIO_Port, MOTOR11_Pin) == GPIO_PIN_SET) a = 1;
 8001458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145c:	481f      	ldr	r0, [pc, #124]	; (80014dc <parse+0x1cc>)
 800145e:	f002 fe5b 	bl	8004118 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <parse+0x15c>
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  		if(HAL_GPIO_ReadPin(MOTOR12_GPIO_Port, MOTOR12_Pin) == GPIO_PIN_SET) b = 1;
 800146c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001470:	481a      	ldr	r0, [pc, #104]	; (80014dc <parse+0x1cc>)
 8001472:	f002 fe51 	bl	8004118 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <parse+0x170>
 800147c:	2301      	movs	r3, #1
 800147e:	623b      	str	r3, [r7, #32]
  		if(HAL_GPIO_ReadPin(MOTOR21_GPIO_Port, MOTOR21_Pin) == GPIO_PIN_SET) c = 1;
 8001480:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001484:	4815      	ldr	r0, [pc, #84]	; (80014dc <parse+0x1cc>)
 8001486:	f002 fe47 	bl	8004118 <HAL_GPIO_ReadPin>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <parse+0x184>
 8001490:	2301      	movs	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
  		if(HAL_GPIO_ReadPin(MOTOR22_GPIO_Port, MOTOR22_Pin) == GPIO_PIN_SET) d = 1;
 8001494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001498:	4810      	ldr	r0, [pc, #64]	; (80014dc <parse+0x1cc>)
 800149a:	f002 fe3d 	bl	8004118 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <parse+0x198>
 80014a4:	2301      	movs	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]

  		printf("MOTOR11:%d MOTOR12:%d MOTOR21:%d MOTOR22:%d PWM1:%d PWM2:%d\r\n",a,b,c,d, PWM1, PWM2 );
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	9202      	str	r2, [sp, #8]
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	6a3a      	ldr	r2, [r7, #32]
 80014b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ba:	4809      	ldr	r0, [pc, #36]	; (80014e0 <parse+0x1d0>)
 80014bc:	f00a fe28 	bl	800c110 <iprintf>
  	{
 80014c0:	e002      	b.n	80014c8 <parse+0x1b8>
  		//send_json_error(message);

//	  	sprintf(DataToSend, "%d %d %d %d \r\n", PWM1, PWM2, DIR1, DIR2);
//	  	printf(DataToSend);
  	}else printf("error - zle dane \r\n");
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <parse+0x1d4>)
 80014c4:	f00a fe98 	bl	800c1f8 <puts>
}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	08012bc0 	.word	0x08012bc0
 80014d4:	200007e0 	.word	0x200007e0
 80014d8:	20000930 	.word	0x20000930
 80014dc:	40020400 	.word	0x40020400
 80014e0:	08012bd0 	.word	0x08012bd0
 80014e4:	08012c10 	.word	0x08012c10

080014e8 <send_json>:

void send_json(int32_t Encoder1, int32_t Encoder2){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	printf("{\"enkoder1\":%d,\"enkoder2\":%d}\r\n", Encoder1, Encoder2);
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <send_json+0x1c>)
 80014f8:	f00a fe0a 	bl	800c110 <iprintf>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	08012c24 	.word	0x08012c24

08001508 <send_json_ada>:

void send_json_ada(double azimuth, double altitude, double distance){
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b08b      	sub	sp, #44	; 0x2c
 800150c:	af04      	add	r7, sp, #16
 800150e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001512:	ed87 1b02 	vstr	d1, [r7, #8]
 8001516:	ed87 2b00 	vstr	d2, [r7]
	printf("{\"azimuth\":%f,\"altitude\":%f,\"distance\":%f}\r\n", azimuth, altitude, distance);
 800151a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800151e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001522:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001526:	e9cd 3400 	strd	r3, r4, [sp]
 800152a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800152e:	480b      	ldr	r0, [pc, #44]	; (800155c <send_json_ada+0x54>)
 8001530:	f00a fdee 	bl	800c110 <iprintf>
	g_azimuth = azimuth;
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <send_json_ada+0x58>)
 8001536:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800153a:	e9c2 3400 	strd	r3, r4, [r2]
	g_altitude = altitude;
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <send_json_ada+0x5c>)
 8001540:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001544:	e9c2 3400 	strd	r3, r4, [r2]
	g_distance = distance;
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <send_json_ada+0x60>)
 800154a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800154e:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	bf00      	nop
 800155c:	08012c44 	.word	0x08012c44
 8001560:	20000768 	.word	0x20000768
 8001564:	200007d8 	.word	0x200007d8
 8001568:	20000848 	.word	0x20000848

0800156c <send_json_error>:

void send_json_error( char *error){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	printf("{\"error\":\"%s\"}\r\n", error);
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <send_json_error+0x18>)
 8001578:	f00a fdca 	bl	800c110 <iprintf>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	08012c74 	.word	0x08012c74

08001588 <send_json_position>:

void send_json_position(position actual, position predicted){
 8001588:	b084      	sub	sp, #16
 800158a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800158e:	b08d      	sub	sp, #52	; 0x34
 8001590:	af0a      	add	r7, sp, #40	; 0x28
 8001592:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printf("{\"PositionActual\":{\"Lat\":%f,\"Lon\":%f,\"Height\":%f},\"PositionPredicted\":{\"Lat\":%f,\"Lon\":%f,\"Height\":%f}}\r\n", actual.Latitude, actual.Longitude, actual.Height, predicted.Latitude, predicted.Longitude, predicted.Height );
 800159a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800159e:	ed87 7b00 	vstr	d7, [r7]
 80015a2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80015aa:	e9d7 5614 	ldrd	r5, r6, [r7, #80]	; 0x50
 80015ae:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 80015b2:	e9d7 ab18 	ldrd	sl, fp, [r7, #96]	; 0x60
 80015b6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80015ba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80015be:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80015c2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80015c6:	e9cd 3400 	strd	r3, r4, [sp]
 80015ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <send_json_position+0x5c>)
 80015d0:	f00a fd9e 	bl	800c110 <iprintf>
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015de:	b004      	add	sp, #16
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	08012c88 	.word	0x08012c88

080015e8 <calc_azimuth>:

void calc_azimuth(double Latitude1, double Longitude1, double Height1, double Latitude2, double Longitude2, double Height2, double *azimuth, double *distance, double *altitude){ //Latitude = φ Longitude = λ
 80015e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015ec:	ed2d 8b02 	vpush	{d8}
 80015f0:	b09c      	sub	sp, #112	; 0x70
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80015f8:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80015fc:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8001600:	ed87 3b08 	vstr	d3, [r7, #32]
 8001604:	ed87 4b06 	vstr	d4, [r7, #24]
 8001608:	ed87 5b04 	vstr	d5, [r7, #16]
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]

	Latitude1 *= (M_PI/180);
 8001612:	a3e1      	add	r3, pc, #900	; (adr r3, 8001998 <calc_azimuth+0x3b0>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800161c:	f7fe fff4 	bl	8000608 <__aeabi_dmul>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	Longitude1 *= (M_PI/180);
 8001628:	a3db      	add	r3, pc, #876	; (adr r3, 8001998 <calc_azimuth+0x3b0>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001632:	f7fe ffe9 	bl	8000608 <__aeabi_dmul>
 8001636:	4603      	mov	r3, r0
 8001638:	460c      	mov	r4, r1
 800163a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	Latitude2 *= (M_PI/180);
 800163e:	a3d6      	add	r3, pc, #856	; (adr r3, 8001998 <calc_azimuth+0x3b0>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001648:	f7fe ffde 	bl	8000608 <__aeabi_dmul>
 800164c:	4603      	mov	r3, r0
 800164e:	460c      	mov	r4, r1
 8001650:	e9c7 3408 	strd	r3, r4, [r7, #32]
	Longitude2 *= (M_PI/180);
 8001654:	a3d0      	add	r3, pc, #832	; (adr r3, 8001998 <calc_azimuth+0x3b0>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800165e:	f7fe ffd3 	bl	8000608 <__aeabi_dmul>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	e9c7 3406 	strd	r3, r4, [r7, #24]
	Height1 /= 1000;
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4bc8      	ldr	r3, [pc, #800]	; (8001990 <calc_azimuth+0x3a8>)
 8001670:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001674:	f7ff f8f2 	bl	800085c <__aeabi_ddiv>
 8001678:	4603      	mov	r3, r0
 800167a:	460c      	mov	r4, r1
 800167c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	Height2 /= 1000;
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	4bc2      	ldr	r3, [pc, #776]	; (8001990 <calc_azimuth+0x3a8>)
 8001686:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800168a:	f7ff f8e7 	bl	800085c <__aeabi_ddiv>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	e9c7 3404 	strd	r3, r4, [r7, #16]

	double delta_Latitude = (Latitude2 - Latitude1);
 8001696:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800169a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800169e:	f7fe fdfb 	bl	8000298 <__aeabi_dsub>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	double delta_Longitude = (Longitude2 - Longitude1);
 80016aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016b2:	f7fe fdf1 	bl	8000298 <__aeabi_dsub>
 80016b6:	4603      	mov	r3, r0
 80016b8:	460c      	mov	r4, r1
 80016ba:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	double delta_Height = Height2 - Height1;
 80016be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016c6:	f7fe fde7 	bl	8000298 <__aeabi_dsub>
 80016ca:	4603      	mov	r3, r0
 80016cc:	460c      	mov	r4, r1
 80016ce:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58



	//θ = atan2 [(sin Δλ * cos φ₂), (cos φ�? * sin φ₂ �?� sin φ�? * cos φ₂ *  cos Δλ)]
	*azimuth = atan2( ( sin(delta_Longitude) * cos(Latitude2) ) , ( (cos(Latitude1) * sin(Latitude2)) - (sin(Latitude1) * cos(Latitude2) * cos(delta_Longitude)) ) ) * (180/ M_PI );
 80016d2:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80016d6:	f00e fcf7 	bl	80100c8 <sin>
 80016da:	ec55 4b10 	vmov	r4, r5, d0
 80016de:	ed97 0b08 	vldr	d0, [r7, #32]
 80016e2:	f00e fcad 	bl	8010040 <cos>
 80016e6:	ec53 2b10 	vmov	r2, r3, d0
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe ff8b 	bl	8000608 <__aeabi_dmul>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	ec44 3b18 	vmov	d8, r3, r4
 80016fa:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80016fe:	f00e fc9f 	bl	8010040 <cos>
 8001702:	ec55 4b10 	vmov	r4, r5, d0
 8001706:	ed97 0b08 	vldr	d0, [r7, #32]
 800170a:	f00e fcdd 	bl	80100c8 <sin>
 800170e:	ec53 2b10 	vmov	r2, r3, d0
 8001712:	4620      	mov	r0, r4
 8001714:	4629      	mov	r1, r5
 8001716:	f7fe ff77 	bl	8000608 <__aeabi_dmul>
 800171a:	4603      	mov	r3, r0
 800171c:	460c      	mov	r4, r1
 800171e:	4625      	mov	r5, r4
 8001720:	461c      	mov	r4, r3
 8001722:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001726:	f00e fccf 	bl	80100c8 <sin>
 800172a:	ec59 8b10 	vmov	r8, r9, d0
 800172e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001732:	f00e fc85 	bl	8010040 <cos>
 8001736:	ec53 2b10 	vmov	r2, r3, d0
 800173a:	4640      	mov	r0, r8
 800173c:	4649      	mov	r1, r9
 800173e:	f7fe ff63 	bl	8000608 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4690      	mov	r8, r2
 8001748:	4699      	mov	r9, r3
 800174a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800174e:	f00e fc77 	bl	8010040 <cos>
 8001752:	ec53 2b10 	vmov	r2, r3, d0
 8001756:	4640      	mov	r0, r8
 8001758:	4649      	mov	r1, r9
 800175a:	f7fe ff55 	bl	8000608 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fd97 	bl	8000298 <__aeabi_dsub>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	ec44 3b17 	vmov	d7, r3, r4
 8001772:	eeb0 1a47 	vmov.f32	s2, s14
 8001776:	eef0 1a67 	vmov.f32	s3, s15
 800177a:	eeb0 0a48 	vmov.f32	s0, s16
 800177e:	eef0 0a68 	vmov.f32	s1, s17
 8001782:	f00e fd41 	bl	8010208 <atan2>
 8001786:	ec51 0b10 	vmov	r0, r1, d0
 800178a:	a37b      	add	r3, pc, #492	; (adr r3, 8001978 <calc_azimuth+0x390>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe ff3a 	bl	8000608 <__aeabi_dmul>
 8001794:	4603      	mov	r3, r0
 8001796:	460c      	mov	r4, r1
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	e9c2 3400 	strd	r3, r4, [r2]
	//Haversine formula:
	//a = sin²(Δφ/2) + cos φ�? * cos φ₂ * sin²(Δλ/2)
	double a = pow( sin(delta_Latitude/2), 2.0 ) + (cos(Latitude1) * cos(Latitude2) * pow(sin(delta_Longitude/2), 2.0));
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80017aa:	f7ff f857 	bl	800085c <__aeabi_ddiv>
 80017ae:	4603      	mov	r3, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	ec44 3b17 	vmov	d7, r3, r4
 80017b6:	eeb0 0a47 	vmov.f32	s0, s14
 80017ba:	eef0 0a67 	vmov.f32	s1, s15
 80017be:	f00e fc83 	bl	80100c8 <sin>
 80017c2:	eeb0 7a40 	vmov.f32	s14, s0
 80017c6:	eef0 7a60 	vmov.f32	s15, s1
 80017ca:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8001980 <calc_azimuth+0x398>
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f00e fd19 	bl	801020c <pow>
 80017da:	ec59 8b10 	vmov	r8, r9, d0
 80017de:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80017e2:	f00e fc2d 	bl	8010040 <cos>
 80017e6:	ec55 4b10 	vmov	r4, r5, d0
 80017ea:	ed97 0b08 	vldr	d0, [r7, #32]
 80017ee:	f00e fc27 	bl	8010040 <cos>
 80017f2:	ec53 2b10 	vmov	r2, r3, d0
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7fe ff05 	bl	8000608 <__aeabi_dmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	4625      	mov	r5, r4
 8001804:	461c      	mov	r4, r3
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800180e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001812:	f7ff f823 	bl	800085c <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ec43 2b17 	vmov	d7, r2, r3
 800181e:	eeb0 0a47 	vmov.f32	s0, s14
 8001822:	eef0 0a67 	vmov.f32	s1, s15
 8001826:	f00e fc4f 	bl	80100c8 <sin>
 800182a:	eeb0 7a40 	vmov.f32	s14, s0
 800182e:	eef0 7a60 	vmov.f32	s15, s1
 8001832:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8001980 <calc_azimuth+0x398>
 8001836:	eeb0 0a47 	vmov.f32	s0, s14
 800183a:	eef0 0a67 	vmov.f32	s1, s15
 800183e:	f00e fce5 	bl	801020c <pow>
 8001842:	ec53 2b10 	vmov	r2, r3, d0
 8001846:	4620      	mov	r0, r4
 8001848:	4629      	mov	r1, r5
 800184a:	f7fe fedd 	bl	8000608 <__aeabi_dmul>
 800184e:	4603      	mov	r3, r0
 8001850:	460c      	mov	r4, r1
 8001852:	461a      	mov	r2, r3
 8001854:	4623      	mov	r3, r4
 8001856:	4640      	mov	r0, r8
 8001858:	4649      	mov	r1, r9
 800185a:	f7fe fd1f 	bl	800029c <__adddf3>
 800185e:	4603      	mov	r3, r0
 8001860:	460c      	mov	r4, r1
 8001862:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	//c = 2 * atan2 [�?�a, �?�(1�?�a)]
	double c = 2.0 * atan2( sqrt(a), sqrt(1.0-a));
 8001866:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800186a:	f00e fe3f 	bl	80104ec <sqrt>
 800186e:	eeb0 8a40 	vmov.f32	s16, s0
 8001872:	eef0 8a60 	vmov.f32	s17, s1
 8001876:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800187a:	f04f 0000 	mov.w	r0, #0
 800187e:	4945      	ldr	r1, [pc, #276]	; (8001994 <calc_azimuth+0x3ac>)
 8001880:	f7fe fd0a 	bl	8000298 <__aeabi_dsub>
 8001884:	4603      	mov	r3, r0
 8001886:	460c      	mov	r4, r1
 8001888:	ec44 3b17 	vmov	d7, r3, r4
 800188c:	eeb0 0a47 	vmov.f32	s0, s14
 8001890:	eef0 0a67 	vmov.f32	s1, s15
 8001894:	f00e fe2a 	bl	80104ec <sqrt>
 8001898:	eeb0 7a40 	vmov.f32	s14, s0
 800189c:	eef0 7a60 	vmov.f32	s15, s1
 80018a0:	eeb0 1a47 	vmov.f32	s2, s14
 80018a4:	eef0 1a67 	vmov.f32	s3, s15
 80018a8:	eeb0 0a48 	vmov.f32	s0, s16
 80018ac:	eef0 0a68 	vmov.f32	s1, s17
 80018b0:	f00e fcaa 	bl	8010208 <atan2>
 80018b4:	ec51 0b10 	vmov	r0, r1, d0
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	f7fe fcee 	bl	800029c <__adddf3>
 80018c0:	4603      	mov	r3, r0
 80018c2:	460c      	mov	r4, r1
 80018c4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	//d = R * c, R = 6371 km - radius of the Earth
	double sphere_distance = 6371.0 * c; // in km
 80018c8:	a32f      	add	r3, pc, #188	; (adr r3, 8001988 <calc_azimuth+0x3a0>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80018d2:	f7fe fe99 	bl	8000608 <__aeabi_dmul>
 80018d6:	4603      	mov	r3, r0
 80018d8:	460c      	mov	r4, r1
 80018da:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	*distance = sqrt( pow(sphere_distance, 2.0) + pow(delta_Height, 2.0));// in km
 80018de:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001980 <calc_azimuth+0x398>
 80018e2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80018e6:	f00e fc91 	bl	801020c <pow>
 80018ea:	ec55 4b10 	vmov	r4, r5, d0
 80018ee:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001980 <calc_azimuth+0x398>
 80018f2:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80018f6:	f00e fc89 	bl	801020c <pow>
 80018fa:	ec53 2b10 	vmov	r2, r3, d0
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7fe fccb 	bl	800029c <__adddf3>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	ec44 3b17 	vmov	d7, r3, r4
 800190e:	eeb0 0a47 	vmov.f32	s0, s14
 8001912:	eef0 0a67 	vmov.f32	s1, s15
 8001916:	f00e fde9 	bl	80104ec <sqrt>
 800191a:	eeb0 7a40 	vmov.f32	s14, s0
 800191e:	eef0 7a60 	vmov.f32	s15, s1
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	ed83 7b00 	vstr	d7, [r3]
	*altitude = acos(sphere_distance/ *distance)  * (180/M_PI);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800192e:	461a      	mov	r2, r3
 8001930:	4623      	mov	r3, r4
 8001932:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001936:	f7fe ff91 	bl	800085c <__aeabi_ddiv>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	ec44 3b17 	vmov	d7, r3, r4
 8001942:	eeb0 0a47 	vmov.f32	s0, s14
 8001946:	eef0 0a67 	vmov.f32	s1, s15
 800194a:	f00e fc05 	bl	8010158 <acos>
 800194e:	ec51 0b10 	vmov	r0, r1, d0
 8001952:	a309      	add	r3, pc, #36	; (adr r3, 8001978 <calc_azimuth+0x390>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fe56 	bl	8000608 <__aeabi_dmul>
 800195c:	4603      	mov	r3, r0
 800195e:	460c      	mov	r4, r1
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001966:	bf00      	nop
 8001968:	3770      	adds	r7, #112	; 0x70
 800196a:	46bd      	mov	sp, r7
 800196c:	ecbd 8b02 	vpop	{d8}
 8001970:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001974:	f3af 8000 	nop.w
 8001978:	1a63c1f8 	.word	0x1a63c1f8
 800197c:	404ca5dc 	.word	0x404ca5dc
 8001980:	00000000 	.word	0x00000000
 8001984:	40000000 	.word	0x40000000
 8001988:	00000000 	.word	0x00000000
 800198c:	40b8e300 	.word	0x40b8e300
 8001990:	408f4000 	.word	0x408f4000
 8001994:	3ff00000 	.word	0x3ff00000
 8001998:	a2529d39 	.word	0xa2529d39
 800199c:	3f91df46 	.word	0x3f91df46

080019a0 <parse_loc>:

	*distance = sqrt( pow(sphere_distance, 2.0) + pow(delta_Height, 2.0));// in km
	*altitude = acos(sphere_distance/ *distance)  * (180/M_PI);
}

void parse_loc(){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b09a      	sub	sp, #104	; 0x68
 80019a4:	af06      	add	r7, sp, #24
  	char header[1];
  	double Latitude1, Longitude1, Height1, Latitude2, Longitude2, Height2, azimuth, distance, altitude;

  	sscanf(ReceivedData, "%s %lf %lf %lf %lf %lf %lf", &header, &Latitude1, &Longitude1, &Height1, &Latitude2, &Longitude2, &Height2);
 80019a6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80019aa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	9304      	str	r3, [sp, #16]
 80019b4:	f107 0320 	add.w	r3, r7, #32
 80019b8:	9303      	str	r3, [sp, #12]
 80019ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	460b      	mov	r3, r1
 80019ce:	4920      	ldr	r1, [pc, #128]	; (8001a50 <parse_loc+0xb0>)
 80019d0:	4820      	ldr	r0, [pc, #128]	; (8001a54 <parse_loc+0xb4>)
 80019d2:	f00a fc4f 	bl	800c274 <siscanf>
  	if( header[0] == 'G' )
 80019d6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80019da:	2b47      	cmp	r3, #71	; 0x47
 80019dc:	d130      	bne.n	8001a40 <parse_loc+0xa0>
  	{
  		calc_azimuth( Latitude1,  Longitude1,  Height1,  Latitude2,  Longitude2,  Height2,  &azimuth,  &distance,  &altitude);
 80019de:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80019e2:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80019e6:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 80019ea:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 80019ee:	ed97 4b08 	vldr	d4, [r7, #32]
 80019f2:	ed97 5b06 	vldr	d5, [r7, #24]
 80019f6:	463a      	mov	r2, r7
 80019f8:	f107 0108 	add.w	r1, r7, #8
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	eeb0 1a46 	vmov.f32	s2, s12
 8001a06:	eef0 1a66 	vmov.f32	s3, s13
 8001a0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a0e:	eef0 0a67 	vmov.f32	s1, s15
 8001a12:	f7ff fde9 	bl	80015e8 <calc_azimuth>
  		send_json_ada( azimuth, altitude, distance);
 8001a16:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a1a:	ed97 6b00 	vldr	d6, [r7]
 8001a1e:	ed97 5b02 	vldr	d5, [r7, #8]
 8001a22:	eeb0 2a45 	vmov.f32	s4, s10
 8001a26:	eef0 2a65 	vmov.f32	s5, s11
 8001a2a:	eeb0 1a46 	vmov.f32	s2, s12
 8001a2e:	eef0 1a66 	vmov.f32	s3, s13
 8001a32:	eeb0 0a47 	vmov.f32	s0, s14
 8001a36:	eef0 0a67 	vmov.f32	s1, s15
 8001a3a:	f7ff fd65 	bl	8001508 <send_json_ada>
  	}else printf("error - zle dane \r\n");
}
 8001a3e:	e002      	b.n	8001a46 <parse_loc+0xa6>
  	}else printf("error - zle dane \r\n");
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <parse_loc+0xb8>)
 8001a42:	f00a fbd9 	bl	800c1f8 <puts>
}
 8001a46:	bf00      	nop
 8001a48:	3750      	adds	r7, #80	; 0x50
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	08012cf4 	.word	0x08012cf4
 8001a54:	200007e0 	.word	0x200007e0
 8001a58:	08012c10 	.word	0x08012c10

08001a5c <parse_home_pos>:

void parse_home_pos(){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af02      	add	r7, sp, #8
  	char header[1];
  	sscanf(ReceivedData, "%s %lf %lf %lf", &header, &home_position.Latitude, &home_position.Longitude, &home_position.Height);
 8001a62:	1d3a      	adds	r2, r7, #4
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <parse_home_pos+0x24>)
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <parse_home_pos+0x28>)
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <parse_home_pos+0x2c>)
 8001a6e:	4907      	ldr	r1, [pc, #28]	; (8001a8c <parse_home_pos+0x30>)
 8001a70:	4807      	ldr	r0, [pc, #28]	; (8001a90 <parse_home_pos+0x34>)
 8001a72:	f00a fbff 	bl	800c274 <siscanf>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000018 	.word	0x20000018
 8001a84:	20000010 	.word	0x20000010
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	08012d10 	.word	0x08012d10
 8001a90:	200007e0 	.word	0x200007e0

08001a94 <parse_actual_pos>:

void parse_actual_pos(){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af02      	add	r7, sp, #8
  	char header[1];
  	double lat, lon,height;
  	sscanf(ReceivedData, "%s %lf %lf %lf", &header, &actual_position.Latitude, &actual_position.Longitude, &actual_position.Height);
 8001a9a:	1d3a      	adds	r2, r7, #4
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <parse_actual_pos+0x24>)
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <parse_actual_pos+0x28>)
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <parse_actual_pos+0x2c>)
 8001aa6:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <parse_actual_pos+0x30>)
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <parse_actual_pos+0x34>)
 8001aaa:	f00a fbe3 	bl	800c274 <siscanf>
//  	actual_position.Latitude = lat;
//	actual_position.Longitude = lon;
//	actual_position.Height = height;
//	printf("data: %lf,%lf,%lf", lat, lon, height);
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000038 	.word	0x20000038
 8001abc:	20000030 	.word	0x20000030
 8001ac0:	20000028 	.word	0x20000028
 8001ac4:	08012d10 	.word	0x08012d10
 8001ac8:	200007e0 	.word	0x200007e0

08001acc <simple_predict>:

//very simple prediction by linear approximation
position simple_predict(position actual, position old){
 8001acc:	b082      	sub	sp, #8
 8001ace:	b5b0      	push	{r4, r5, r7, lr}
 8001ad0:	b08a      	sub	sp, #40	; 0x28
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001ada:	e881 000c 	stmia.w	r1, {r2, r3}
	position predicted;
	predicted.Latitude = 2.0 * actual.Latitude - old.Latitude;
 8001ade:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	f7fe fbd9 	bl	800029c <__adddf3>
 8001aea:	4603      	mov	r3, r0
 8001aec:	460c      	mov	r4, r1
 8001aee:	4618      	mov	r0, r3
 8001af0:	4621      	mov	r1, r4
 8001af2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001af6:	461a      	mov	r2, r3
 8001af8:	4623      	mov	r3, r4
 8001afa:	f7fe fbcd 	bl	8000298 <__aeabi_dsub>
 8001afe:	4603      	mov	r3, r0
 8001b00:	460c      	mov	r4, r1
 8001b02:	e9c7 3402 	strd	r3, r4, [r7, #8]
	predicted.Longitude = 2.0 * actual.Longitude - old.Longitude;
 8001b06:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	f7fe fbc5 	bl	800029c <__adddf3>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	4618      	mov	r0, r3
 8001b18:	4621      	mov	r1, r4
 8001b1a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4623      	mov	r3, r4
 8001b22:	f7fe fbb9 	bl	8000298 <__aeabi_dsub>
 8001b26:	4603      	mov	r3, r0
 8001b28:	460c      	mov	r4, r1
 8001b2a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	predicted.Height = 2.0 * actual.Height - old.Height;
 8001b2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	f7fe fbb1 	bl	800029c <__adddf3>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4621      	mov	r1, r4
 8001b42:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8001b46:	461a      	mov	r2, r3
 8001b48:	4623      	mov	r3, r4
 8001b4a:	f7fe fba5 	bl	8000298 <__aeabi_dsub>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	e9c7 3406 	strd	r3, r4, [r7, #24]
	return predicted;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	461d      	mov	r5, r3
 8001b5a:	f107 0408 	add.w	r4, r7, #8
 8001b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001b74:	b002      	add	sp, #8
 8001b76:	4770      	bx	lr

08001b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	b097      	sub	sp, #92	; 0x5c
 8001b7c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b7e:	f001 f8bf 	bl	8002d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b82:	f000 fa0d 	bl	8001fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b86:	f7ff fb33 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b8a:	f7ff fb11 	bl	80011b0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001b8e:	f008 fe71 	bl	800a874 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001b92:	f000 fd0d 	bl	80025b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b96:	f000 fdb9 	bl	800270c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b9a:	f000 fe0b 	bl	80027b4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001b9e:	f7ff fa27 	bl	8000ff0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001ba2:	f000 ffa3 	bl	8002aec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ba6:	f000 ffcb 	bl	8002b40 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001baa:	f000 fe57 	bl	800285c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	48b3      	ldr	r0, [pc, #716]	; (8001e80 <main+0x308>)
 8001bb2:	f004 ffb4 	bl	8006b1e <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	48b1      	ldr	r0, [pc, #708]	; (8001e80 <main+0x308>)
 8001bba:	f004 ffb0 	bl	8006b1e <HAL_TIMEx_PWMN_Start>

  TIM2->CNT = 1600;
 8001bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bc2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 1240;
 8001bc8:	4bae      	ldr	r3, [pc, #696]	; (8001e84 <main+0x30c>)
 8001bca:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001bd0:	213c      	movs	r1, #60	; 0x3c
 8001bd2:	48ad      	ldr	r0, [pc, #692]	; (8001e88 <main+0x310>)
 8001bd4:	f004 f9f2 	bl	8005fbc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001bd8:	213c      	movs	r1, #60	; 0x3c
 8001bda:	48ac      	ldr	r0, [pc, #688]	; (8001e8c <main+0x314>)
 8001bdc:	f004 f9ee 	bl	8005fbc <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim4);
 8001be0:	48ab      	ldr	r0, [pc, #684]	; (8001e90 <main+0x318>)
 8001be2:	f004 f8ce 	bl	8005d82 <HAL_TIM_Base_Start_IT>

//  HAL_ADC_Start_DMA(&hadc1, feedback, 2);

  pid_init(&pid_azimuth, 150.0f, 50.0f, 0.005f, 10, 1);
 8001be6:	2201      	movs	r2, #1
 8001be8:	210a      	movs	r1, #10
 8001bea:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 8001e94 <main+0x31c>
 8001bee:	eddf 0aaa 	vldr	s1, [pc, #680]	; 8001e98 <main+0x320>
 8001bf2:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8001e9c <main+0x324>
 8001bf6:	48aa      	ldr	r0, [pc, #680]	; (8001ea0 <main+0x328>)
 8001bf8:	f000 fa41 	bl	800207e <pid_init>
  pid_azimuth.p_max = pid_scale(&pid_azimuth, 4095);
 8001bfc:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8001ea4 <main+0x32c>
 8001c00:	48a7      	ldr	r0, [pc, #668]	; (8001ea0 <main+0x328>)
 8001c02:	f000 fb7f 	bl	8002304 <pid_scale>
 8001c06:	4602      	mov	r2, r0
 8001c08:	4ba5      	ldr	r3, [pc, #660]	; (8001ea0 <main+0x328>)
 8001c0a:	619a      	str	r2, [r3, #24]
  pid_azimuth.p_min = pid_scale(&pid_azimuth, -4095);
 8001c0c:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 8001ea8 <main+0x330>
 8001c10:	48a3      	ldr	r0, [pc, #652]	; (8001ea0 <main+0x328>)
 8001c12:	f000 fb77 	bl	8002304 <pid_scale>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4ba1      	ldr	r3, [pc, #644]	; (8001ea0 <main+0x328>)
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24
  pid_azimuth.i_max = pid_scale(&pid_azimuth, 4095);
 8001c1c:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8001ea4 <main+0x32c>
 8001c20:	489f      	ldr	r0, [pc, #636]	; (8001ea0 <main+0x328>)
 8001c22:	f000 fb6f 	bl	8002304 <pid_scale>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b9d      	ldr	r3, [pc, #628]	; (8001ea0 <main+0x328>)
 8001c2a:	61da      	str	r2, [r3, #28]
  pid_azimuth.i_min = pid_scale(&pid_azimuth, -4095);
 8001c2c:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8001ea8 <main+0x330>
 8001c30:	489b      	ldr	r0, [pc, #620]	; (8001ea0 <main+0x328>)
 8001c32:	f000 fb67 	bl	8002304 <pid_scale>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b99      	ldr	r3, [pc, #612]	; (8001ea0 <main+0x328>)
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
  pid_azimuth.d_max = pid_scale(&pid_azimuth, 4095);
 8001c3c:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8001ea4 <main+0x32c>
 8001c40:	4897      	ldr	r0, [pc, #604]	; (8001ea0 <main+0x328>)
 8001c42:	f000 fb5f 	bl	8002304 <pid_scale>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b95      	ldr	r3, [pc, #596]	; (8001ea0 <main+0x328>)
 8001c4a:	621a      	str	r2, [r3, #32]
  pid_azimuth.d_min = pid_scale(&pid_azimuth, -4095);
 8001c4c:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8001ea8 <main+0x330>
 8001c50:	4893      	ldr	r0, [pc, #588]	; (8001ea0 <main+0x328>)
 8001c52:	f000 fb57 	bl	8002304 <pid_scale>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <main+0x328>)
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_azimuth.total_max = pid_scale(&pid_azimuth, 4095);
 8001c5c:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8001ea4 <main+0x32c>
 8001c60:	488f      	ldr	r0, [pc, #572]	; (8001ea0 <main+0x328>)
 8001c62:	f000 fb4f 	bl	8002304 <pid_scale>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4b8d      	ldr	r3, [pc, #564]	; (8001ea0 <main+0x328>)
 8001c6a:	649a      	str	r2, [r3, #72]	; 0x48
  pid_azimuth.total_min = pid_scale(&pid_azimuth, 0);
 8001c6c:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8001eac <main+0x334>
 8001c70:	488b      	ldr	r0, [pc, #556]	; (8001ea0 <main+0x328>)
 8001c72:	f000 fb47 	bl	8002304 <pid_scale>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b89      	ldr	r3, [pc, #548]	; (8001ea0 <main+0x328>)
 8001c7a:	64da      	str	r2, [r3, #76]	; 0x4c

  pid_init(&pid_height, 1.0f, 0.0f, 0.0f, 10, 1);//1ms - okres
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	210a      	movs	r1, #10
 8001c80:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 8001eac <main+0x334>
 8001c84:	eddf 0a89 	vldr	s1, [pc, #548]	; 8001eac <main+0x334>
 8001c88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c8c:	4888      	ldr	r0, [pc, #544]	; (8001eb0 <main+0x338>)
 8001c8e:	f000 f9f6 	bl	800207e <pid_init>
  pid_height.p_max = pid_scale(&pid_height, 4095);
 8001c92:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8001ea4 <main+0x32c>
 8001c96:	4886      	ldr	r0, [pc, #536]	; (8001eb0 <main+0x338>)
 8001c98:	f000 fb34 	bl	8002304 <pid_scale>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b84      	ldr	r3, [pc, #528]	; (8001eb0 <main+0x338>)
 8001ca0:	619a      	str	r2, [r3, #24]
  pid_height.p_min = pid_scale(&pid_height, -4095);
 8001ca2:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8001ea8 <main+0x330>
 8001ca6:	4882      	ldr	r0, [pc, #520]	; (8001eb0 <main+0x338>)
 8001ca8:	f000 fb2c 	bl	8002304 <pid_scale>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b80      	ldr	r3, [pc, #512]	; (8001eb0 <main+0x338>)
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
  pid_height.i_max = pid_scale(&pid_height, 4095);
 8001cb2:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8001ea4 <main+0x32c>
 8001cb6:	487e      	ldr	r0, [pc, #504]	; (8001eb0 <main+0x338>)
 8001cb8:	f000 fb24 	bl	8002304 <pid_scale>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b7c      	ldr	r3, [pc, #496]	; (8001eb0 <main+0x338>)
 8001cc0:	61da      	str	r2, [r3, #28]
  pid_height.i_min = pid_scale(&pid_height, -4095);
 8001cc2:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8001ea8 <main+0x330>
 8001cc6:	487a      	ldr	r0, [pc, #488]	; (8001eb0 <main+0x338>)
 8001cc8:	f000 fb1c 	bl	8002304 <pid_scale>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b78      	ldr	r3, [pc, #480]	; (8001eb0 <main+0x338>)
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
  pid_height.d_max = pid_scale(&pid_height, 4095);
 8001cd2:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8001ea4 <main+0x32c>
 8001cd6:	4876      	ldr	r0, [pc, #472]	; (8001eb0 <main+0x338>)
 8001cd8:	f000 fb14 	bl	8002304 <pid_scale>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b74      	ldr	r3, [pc, #464]	; (8001eb0 <main+0x338>)
 8001ce0:	621a      	str	r2, [r3, #32]
  pid_height.d_min = pid_scale(&pid_height, -4095);
 8001ce2:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8001ea8 <main+0x330>
 8001ce6:	4872      	ldr	r0, [pc, #456]	; (8001eb0 <main+0x338>)
 8001ce8:	f000 fb0c 	bl	8002304 <pid_scale>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b70      	ldr	r3, [pc, #448]	; (8001eb0 <main+0x338>)
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_height.total_max = pid_scale(&pid_height, 4095);
 8001cf2:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8001ea4 <main+0x32c>
 8001cf6:	486e      	ldr	r0, [pc, #440]	; (8001eb0 <main+0x338>)
 8001cf8:	f000 fb04 	bl	8002304 <pid_scale>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <main+0x338>)
 8001d00:	649a      	str	r2, [r3, #72]	; 0x48
  pid_height.total_min = pid_scale(&pid_height, 0);
 8001d02:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8001eac <main+0x334>
 8001d06:	486a      	ldr	r0, [pc, #424]	; (8001eb0 <main+0x338>)
 8001d08:	f000 fafc 	bl	8002304 <pid_scale>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <main+0x338>)
 8001d10:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001d12:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <main+0x308>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4858      	ldr	r0, [pc, #352]	; (8001e80 <main+0x308>)
 8001d1e:	f004 f889 	bl	8005e34 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001d22:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <main+0x308>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2200      	movs	r2, #0
 8001d28:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	4854      	ldr	r0, [pc, #336]	; (8001e80 <main+0x308>)
 8001d2e:	f004 f881 	bl	8005e34 <HAL_TIM_PWM_Start>

		HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d38:	485e      	ldr	r0, [pc, #376]	; (8001eb4 <main+0x33c>)
 8001d3a:	f002 fa05 	bl	8004148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d44:	485b      	ldr	r0, [pc, #364]	; (8001eb4 <main+0x33c>)
 8001d46:	f002 f9ff 	bl	8004148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d50:	4858      	ldr	r0, [pc, #352]	; (8001eb4 <main+0x33c>)
 8001d52:	f002 f9f9 	bl	8004148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d5c:	4855      	ldr	r0, [pc, #340]	; (8001eb4 <main+0x33c>)
 8001d5e:	f002 f9f3 	bl	8004148 <HAL_GPIO_WritePin>
  while (1)
  {
	  timer_val = __HAL_TIM_GET_COUNTER(&htim4);
 8001d62:	4b4b      	ldr	r3, [pc, #300]	; (8001e90 <main+0x318>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <main+0x340>)
 8001d6c:	601a      	str	r2, [r3, #0]

	  //send_json((int)feedback[0], (int)feedback[1] );
	  pulse_count_azimuth = TIM2->CNT; // przepisanie wartosci z rejestru timera
 8001d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b51      	ldr	r3, [pc, #324]	; (8001ebc <main+0x344>)
 8001d78:	801a      	strh	r2, [r3, #0]
	  positions_azimuth = pulse_count_azimuth/8.88889; // zeskalowanie impulsow do stopni
 8001d7a:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <main+0x344>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fbd7 	bl	8000534 <__aeabi_i2d>
 8001d86:	a33a      	add	r3, pc, #232	; (adr r3, 8001e70 <main+0x2f8>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fd66 	bl	800085c <__aeabi_ddiv>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <main+0x348>)
 8001d96:	e9c2 3400 	strd	r3, r4, [r2]

	  pulse_count_height = TIM3->CNT; // przepisanie wartosci z rejestru timera
 8001d9a:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <main+0x30c>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <main+0x34c>)
 8001da2:	801a      	strh	r2, [r3, #0]
	  positions_height = pulse_count_height/6.88889; // zeskalowanie impulsow do stopni
 8001da4:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <main+0x34c>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbc2 	bl	8000534 <__aeabi_i2d>
 8001db0:	a331      	add	r3, pc, #196	; (adr r3, 8001e78 <main+0x300>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fd51 	bl	800085c <__aeabi_ddiv>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	4a42      	ldr	r2, [pc, #264]	; (8001ec8 <main+0x350>)
 8001dc0:	e9c2 3400 	strd	r3, r4, [r2]

	  	  if( flaga1ms == 1 ){
 8001dc4:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <main+0x354>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d139      	bne.n	8001e40 <main+0x2c8>
	  		  flaga1ms = 0;
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <main+0x354>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
	  		  send_json( positions_height, positions_azimuth );
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <main+0x350>)
 8001dd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4621      	mov	r1, r4
 8001ddc:	f7fe fec4 	bl	8000b68 <__aeabi_d2iz>
 8001de0:	4605      	mov	r5, r0
 8001de2:	4b37      	ldr	r3, [pc, #220]	; (8001ec0 <main+0x348>)
 8001de4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001de8:	4618      	mov	r0, r3
 8001dea:	4621      	mov	r1, r4
 8001dec:	f7fe febc 	bl	8000b68 <__aeabi_d2iz>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4619      	mov	r1, r3
 8001df4:	4628      	mov	r0, r5
 8001df6:	f7ff fb77 	bl	80014e8 <send_json>
	  		  pwm_control_height = pid_calc(&pid_height, (int)positions_height, setpoint_height);
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <main+0x350>)
 8001dfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e00:	4618      	mov	r0, r3
 8001e02:	4621      	mov	r1, r4
 8001e04:	f7fe feb0 	bl	8000b68 <__aeabi_d2iz>
 8001e08:	4601      	mov	r1, r0
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <main+0x358>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4827      	ldr	r0, [pc, #156]	; (8001eb0 <main+0x338>)
 8001e12:	f000 f9bf 	bl	8002194 <pid_calc>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <main+0x35c>)
 8001e1a:	601a      	str	r2, [r3, #0]
	  		  if( pwm_control_height >= 0 ) pwm_dir_height = 1;
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <main+0x35c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db03      	blt.n	8001e2c <main+0x2b4>
 8001e24:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <main+0x360>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e002      	b.n	8001e32 <main+0x2ba>
	  		  else pwm_dir_height = 0;
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <main+0x360>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
	  		  pwm_control_height_abs = abs(pwm_control_height);
 8001e32:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <main+0x35c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bfb8      	it	lt
 8001e3a:	425b      	neglt	r3, r3
 8001e3c:	4a27      	ldr	r2, [pc, #156]	; (8001edc <main+0x364>)
 8001e3e:	6013      	str	r3, [r2, #0]
//			HAL_Delay(100);
//			//send_json((int)feedback[0], (int)feedback[1] );
//			send_json_error("Poza zakresem");
//	  }

	  if(ReceivedDataFlag == 1){
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <main+0x368>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	f040 809e 	bne.w	8001f86 <main+0x40e>
	  	ReceivedDataFlag = 0;
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <main+0x368>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
	  	//parse();
	  	if(ReceivedData[0] == 'S') parse();
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <main+0x36c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b53      	cmp	r3, #83	; 0x53
 8001e56:	d102      	bne.n	8001e5e <main+0x2e6>
 8001e58:	f7ff fa5a 	bl	8001310 <parse>
 8001e5c:	e093      	b.n	8001f86 <main+0x40e>
	  	else if (ReceivedData[0] == 'G') parse_loc();
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <main+0x36c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b47      	cmp	r3, #71	; 0x47
 8001e64:	d140      	bne.n	8001ee8 <main+0x370>
 8001e66:	f7ff fd9b 	bl	80019a0 <parse_loc>
 8001e6a:	e08c      	b.n	8001f86 <main+0x40e>
 8001e6c:	f3af 8000 	nop.w
 8001e70:	970f7b9e 	.word	0x970f7b9e
 8001e74:	4021c71c 	.word	0x4021c71c
 8001e78:	2e1ef73c 	.word	0x2e1ef73c
 8001e7c:	401b8e39 	.word	0x401b8e39
 8001e80:	20000930 	.word	0x20000930
 8001e84:	40000400 	.word	0x40000400
 8001e88:	20000970 	.word	0x20000970
 8001e8c:	200008f0 	.word	0x200008f0
 8001e90:	200008b0 	.word	0x200008b0
 8001e94:	3ba3d70a 	.word	0x3ba3d70a
 8001e98:	42480000 	.word	0x42480000
 8001e9c:	43160000 	.word	0x43160000
 8001ea0:	20000708 	.word	0x20000708
 8001ea4:	457ff000 	.word	0x457ff000
 8001ea8:	c57ff000 	.word	0xc57ff000
 8001eac:	00000000 	.word	0x00000000
 8001eb0:	20000850 	.word	0x20000850
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	200003f8 	.word	0x200003f8
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	200008a8 	.word	0x200008a8
 8001ec4:	20000002 	.word	0x20000002
 8001ec8:	20000760 	.word	0x20000760
 8001ecc:	200003e8 	.word	0x200003e8
 8001ed0:	20000068 	.word	0x20000068
 8001ed4:	200003ec 	.word	0x200003ec
 8001ed8:	200003f4 	.word	0x200003f4
 8001edc:	200003f0 	.word	0x200003f0
 8001ee0:	200003e4 	.word	0x200003e4
 8001ee4:	200007e0 	.word	0x200007e0
	  	else if (ReceivedData[0] == 'H') parse_home_pos();
 8001ee8:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <main+0x418>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b48      	cmp	r3, #72	; 0x48
 8001eee:	d102      	bne.n	8001ef6 <main+0x37e>
 8001ef0:	f7ff fdb4 	bl	8001a5c <parse_home_pos>
 8001ef4:	e047      	b.n	8001f86 <main+0x40e>
	  	else if (ReceivedData[0] == 'A'){
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <main+0x418>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b41      	cmp	r3, #65	; 0x41
 8001efc:	d140      	bne.n	8001f80 <main+0x408>
	  		parse_actual_pos();
 8001efe:	f7ff fdc9 	bl	8001a94 <parse_actual_pos>
		  	send_json_position( actual_position , simple_predict( actual_position, old_position ) );
 8001f02:	46bc      	mov	ip, r7
 8001f04:	4e23      	ldr	r6, [pc, #140]	; (8001f94 <main+0x41c>)
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <main+0x420>)
 8001f08:	ac06      	add	r4, sp, #24
 8001f0a:	461d      	mov	r5, r3
 8001f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f18:	466d      	mov	r5, sp
 8001f1a:	f106 0408 	add.w	r4, r6, #8
 8001f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f2a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001f2e:	4660      	mov	r0, ip
 8001f30:	f7ff fdcc 	bl	8001acc <simple_predict>
 8001f34:	4e17      	ldr	r6, [pc, #92]	; (8001f94 <main+0x41c>)
 8001f36:	ad04      	add	r5, sp, #16
 8001f38:	463c      	mov	r4, r7
 8001f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001f46:	466c      	mov	r4, sp
 8001f48:	f106 0310 	add.w	r3, r6, #16
 8001f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f56:	f7ff fb17 	bl	8001588 <send_json_position>
		  	//HAL_Delay(5000);
		  	old_position.Latitude = actual_position.Latitude;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <main+0x41c>)
 8001f5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <main+0x420>)
 8001f62:	e9c2 3400 	strd	r3, r4, [r2]
		  	old_position.Longitude = actual_position.Longitude;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <main+0x41c>)
 8001f68:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <main+0x420>)
 8001f6e:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  	old_position.Height = actual_position.Height;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <main+0x41c>)
 8001f74:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <main+0x420>)
 8001f7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001f7e:	e002      	b.n	8001f86 <main+0x40e>
	  	}
	  	else send_json_error( "Bad data frame construction!");
 8001f80:	4806      	ldr	r0, [pc, #24]	; (8001f9c <main+0x424>)
 8001f82:	f7ff faf3 	bl	800156c <send_json_error>
	  }
	  HAL_Delay(100);
 8001f86:	2064      	movs	r0, #100	; 0x64
 8001f88:	f000 ff2c 	bl	8002de4 <HAL_Delay>
	  timer_val = __HAL_TIM_GET_COUNTER(&htim4);
 8001f8c:	e6e9      	b.n	8001d62 <main+0x1ea>
 8001f8e:	bf00      	nop
 8001f90:	200007e0 	.word	0x200007e0
 8001f94:	20000028 	.word	0x20000028
 8001f98:	20000048 	.word	0x20000048
 8001f9c:	08012d20 	.word	0x08012d20

08001fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b094      	sub	sp, #80	; 0x50
 8001fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fa6:	f107 0320 	add.w	r3, r7, #32
 8001faa:	2230      	movs	r2, #48	; 0x30
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f009 f9c0 	bl	800b334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <SystemClock_Config+0xc8>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <SystemClock_Config+0xc8>)
 8001fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <SystemClock_Config+0xc8>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	4b21      	ldr	r3, [pc, #132]	; (800206c <SystemClock_Config+0xcc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a20      	ldr	r2, [pc, #128]	; (800206c <SystemClock_Config+0xcc>)
 8001fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <SystemClock_Config+0xcc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002006:	2302      	movs	r3, #2
 8002008:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800200a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002010:	2319      	movs	r3, #25
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002014:	23c0      	movs	r3, #192	; 0xc0
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002018:	2302      	movs	r3, #2
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800201c:	2304      	movs	r3, #4
 800201e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002020:	f107 0320 	add.w	r3, r7, #32
 8002024:	4618      	mov	r0, r3
 8002026:	f003 fa45 	bl	80054b4 <HAL_RCC_OscConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002030:	f000 f81e 	bl	8002070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002034:	230f      	movs	r3, #15
 8002036:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002038:	2302      	movs	r3, #2
 800203a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	2103      	movs	r1, #3
 8002050:	4618      	mov	r0, r3
 8002052:	f003 fc9f 	bl	8005994 <HAL_RCC_ClockConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800205c:	f000 f808 	bl	8002070 <Error_Handler>
  }
}
 8002060:	bf00      	nop
 8002062:	3750      	adds	r7, #80	; 0x50
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	40007000 	.word	0x40007000

08002070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <pid_init>:
 *
 * Created on: 09.03.2018
 * Author: Wojciech Domski
 */
#include "pid.h"
void pid_init(cpid_t *pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 800207e:	b480      	push	{r7}
 8002080:	b089      	sub	sp, #36	; 0x24
 8002082:	af00      	add	r7, sp, #0
 8002084:	6178      	str	r0, [r7, #20]
 8002086:	ed87 0a04 	vstr	s0, [r7, #16]
 800208a:	edc7 0a03 	vstr	s1, [r7, #12]
 800208e:	ed87 1a02 	vstr	s2, [r7, #8]
 8002092:	460b      	mov	r3, r1
 8002094:	603a      	str	r2, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
	uint32_t k;
	pid->power = 1;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2201      	movs	r2, #1
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e007      	b.n	80020b4 <pid_init+0x36>
		pid->power = pid->power * 2;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	005a      	lsls	r2, r3, #1
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3301      	adds	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d3f3      	bcc.n	80020a4 <pid_init+0x26>
	}
	pid->f = f;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	79fa      	ldrb	r2, [r7, #7]
 80020c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pid->p = (int32_t) (p * pid->power);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80020d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020dc:	ee17 2a90 	vmov	r2, s15
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	601a      	str	r2, [r3, #0]
	pid->i = (int32_t) (i * pid->power);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fc:	ee17 2a90 	vmov	r2, s15
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	605a      	str	r2, [r3, #4]
	pid->d = (int32_t) (d * pid->power);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002110:	edd7 7a02 	vldr	s15, [r7, #8]
 8002114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211c:	ee17 2a90 	vmov	r2, s15
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	609a      	str	r2, [r3, #8]
	pid->p_val = 0;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
	pid->i_val = 0;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
	pid->d_val = 0;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2200      	movs	r2, #0
 8002134:	615a      	str	r2, [r3, #20]
	pid->p_max = INT32_MAX;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800213c:	619a      	str	r2, [r3, #24]
	pid->p_min = INT32_MIN;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
	pid->i_max = INT32_MAX;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800214c:	61da      	str	r2, [r3, #28]
	pid->i_min = INT32_MIN;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002154:	629a      	str	r2, [r3, #40]	; 0x28
	pid->d_max = INT32_MAX;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800215c:	621a      	str	r2, [r3, #32]
	pid->d_min = INT32_MIN;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_last = 0;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
	pid->sum = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
	pid->total_max = INT32_MAX;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002178:	649a      	str	r2, [r3, #72]	; 0x48
	pid->total_min = INT32_MIN;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002180:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->dt_ms = dt_ms;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002188:	bf00      	nop
 800218a:	3724      	adds	r7, #36	; 0x24
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <pid_calc>:
int32_t pid_calc(cpid_t *pid, int32_t mv, int32_t dv) {
 8002194:	b480      	push	{r7}
 8002196:	b08b      	sub	sp, #44	; 0x2c
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
	int32_t p, i, d, e, total;
	pid->mv = mv;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->dv = dv;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
//UZUPELNIJ WYLICZANIE BLEDU
	e = dv-mv;
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON PROPORCJONALNY
	p = pid->p*e;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
	if (p > pid->p_max)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dd03      	ble.n	80021d2 <pid_calc+0x3e>
		p = pid->p_max;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	e007      	b.n	80021e2 <pid_calc+0x4e>
	else if (p < pid->p_min)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	429a      	cmp	r2, r3
 80021da:	da02      	bge.n	80021e2 <pid_calc+0x4e>
		p = pid->p_min;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
	pid->p_val = p >> pid->f;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021e8:	461a      	mov	r2, r3
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	fa43 f202 	asr.w	r2, r3, r2
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	60da      	str	r2, [r3, #12]
	i = pid->sum;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	623b      	str	r3, [r7, #32]
//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON CALKUJACY
//PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
	i += pid->i*(pid->dt_ms/1000);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	493f      	ldr	r1, [pc, #252]	; (8002300 <pid_calc+0x16c>)
 8002204:	fb81 0103 	smull	r0, r1, r1, r3
 8002208:	1189      	asrs	r1, r1, #6
 800220a:	17db      	asrs	r3, r3, #31
 800220c:	1acb      	subs	r3, r1, r3
 800220e:	fb03 f302 	mul.w	r3, r3, r2
 8002212:	6a3a      	ldr	r2, [r7, #32]
 8002214:	4413      	add	r3, r2
 8002216:	623b      	str	r3, [r7, #32]
	if (i > pid->i_max)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	6a3a      	ldr	r2, [r7, #32]
 800221e:	429a      	cmp	r2, r3
 8002220:	dd03      	ble.n	800222a <pid_calc+0x96>
		i = pid->i_max;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	e007      	b.n	800223a <pid_calc+0xa6>
	else if (i < pid->i_min)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	6a3a      	ldr	r2, [r7, #32]
 8002230:	429a      	cmp	r2, r3
 8002232:	da02      	bge.n	800223a <pid_calc+0xa6>
		i = pid->i_min;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	623b      	str	r3, [r7, #32]
	pid->sum = i;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	645a      	str	r2, [r3, #68]	; 0x44
	pid->i_val = i >> pid->f;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002246:	461a      	mov	r2, r3
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	fa43 f202 	asr.w	r2, r3, r2
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	611a      	str	r2, [r3, #16]
//UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON ROZNICZKUJACEGO
//PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
	d = pid->d*(e-pid->e_last)/(1000/pid->dt_ms);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800225a:	6979      	ldr	r1, [r7, #20]
 800225c:	1a8a      	subs	r2, r1, r2
 800225e:	fb02 f203 	mul.w	r2, r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800226a:	fb91 f3f3 	sdiv	r3, r1, r3
 800226e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002272:	61fb      	str	r3, [r7, #28]
	if (d > pid->d_max)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	429a      	cmp	r2, r3
 800227c:	dd03      	ble.n	8002286 <pid_calc+0xf2>
		d = pid->d_max;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	e007      	b.n	8002296 <pid_calc+0x102>
	else if (d < pid->d_min)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	429a      	cmp	r2, r3
 800228e:	da02      	bge.n	8002296 <pid_calc+0x102>
		d = pid->d_min;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	61fb      	str	r3, [r7, #28]
	pid->d_val = d >> pid->f;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800229c:	461a      	mov	r2, r3
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa43 f202 	asr.w	r2, r3, r2
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	615a      	str	r2, [r3, #20]
	total = p + i + d;
 80022a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	4413      	add	r3, r2
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
	if (total > pid->total_max)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	dd03      	ble.n	80022c6 <pid_calc+0x132>
		total = pid->total_max;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	e007      	b.n	80022d6 <pid_calc+0x142>
	else if (total < pid->total_min)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	da02      	bge.n	80022d6 <pid_calc+0x142>
		total = pid->total_min;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	61bb      	str	r3, [r7, #24]
	pid->control = total >> pid->f;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022dc:	461a      	mov	r2, r3
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	fa43 f202 	asr.w	r2, r3, r2
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	651a      	str	r2, [r3, #80]	; 0x50
	pid->e_last = e;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
	return pid->control;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	372c      	adds	r7, #44	; 0x2c
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	10624dd3 	.word	0x10624dd3

08002304 <pid_scale>:
int32_t pid_scale(cpid_t *pid, float v) {
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	ed87 0a00 	vstr	s0, [r7]
	return v * pid->power;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800231c:	edd7 7a00 	vldr	s15, [r7]
 8002320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002328:	ee17 3a90 	vmov	r3, s15
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_MspInit+0x58>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <HAL_MspInit+0x58>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_MspInit+0x58>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_MspInit+0x58>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_MspInit+0x58>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_MspInit+0x58>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2001      	movs	r0, #1
 800237c:	f001 fa09 	bl	8003792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002380:	2001      	movs	r0, #1
 8002382:	f001 fa22 	bl	80037ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800

08002394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <MemManage_Handler+0x4>

080023ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <BusFault_Handler+0x4>

080023b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <UsageFault_Handler+0x4>

080023ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e8:	f000 fcdc 	bl	8002da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80023f4:	f003 f844 	bl	8005480 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <ADC_IRQHandler+0x10>)
 8002402:	f000 fd54 	bl	8002eae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000660 	.word	0x20000660

08002410 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002416:	f003 fe08 	bl	800602a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000930 	.word	0x20000930

08002424 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <TIM4_IRQHandler+0x10>)
 800242a:	f003 fdfe 	bl	800602a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200008b0 	.word	0x200008b0

08002438 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <USART1_IRQHandler+0x10>)
 800243e:	f004 fd35 	bl	8006eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200009b0 	.word	0x200009b0

0800244c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <USART2_IRQHandler+0x10>)
 8002452:	f004 fd2b 	bl	8006eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200009f0 	.word	0x200009f0

08002460 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <DMA2_Stream0_IRQHandler+0x10>)
 8002466:	f001 fa9b 	bl	80039a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200006a8 	.word	0x200006a8

08002474 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <OTG_FS_IRQHandler+0x10>)
 800247a:	f001 ffce 	bl	800441a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000fcc 	.word	0x20000fcc

08002488 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e00a      	b.n	80024b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800249a:	f3af 8000 	nop.w
 800249e:	4601      	mov	r1, r0
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60ba      	str	r2, [r7, #8]
 80024a6:	b2ca      	uxtb	r2, r1
 80024a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dbf0      	blt.n	800249a <_read+0x12>
	}

return len;
 80024b8:	687b      	ldr	r3, [r7, #4]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
	return -1;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ea:	605a      	str	r2, [r3, #4]
	return 0;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_isatty>:

int _isatty(int file)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
	return 1;
 8002502:	2301      	movs	r3, #1
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
	return 0;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <_sbrk+0x50>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <_sbrk+0x16>
		heap_end = &end;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <_sbrk+0x50>)
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <_sbrk+0x54>)
 8002540:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <_sbrk+0x50>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <_sbrk+0x50>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	466a      	mov	r2, sp
 8002552:	4293      	cmp	r3, r2
 8002554:	d907      	bls.n	8002566 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002556:	f008 feb3 	bl	800b2c0 <__errno>
 800255a:	4602      	mov	r2, r0
 800255c:	230c      	movs	r3, #12
 800255e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	e006      	b.n	8002574 <_sbrk+0x48>
	}

	heap_end += incr;
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <_sbrk+0x50>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	4a03      	ldr	r2, [pc, #12]	; (800257c <_sbrk+0x50>)
 8002570:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002572:	68fb      	ldr	r3, [r7, #12]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200003fc 	.word	0x200003fc
 8002580:	200013d8 	.word	0x200013d8

08002584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <SystemInit+0x28>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <SystemInit+0x28>)
 8002590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <SystemInit+0x28>)
 800259a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800259e:	609a      	str	r2, [r3, #8]
#endif
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b096      	sub	sp, #88	; 0x58
 80025b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	615a      	str	r2, [r3, #20]
 80025e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	2220      	movs	r2, #32
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f008 fea3 	bl	800b334 <memset>

  htim1.Instance = TIM1;
 80025ee:	4b45      	ldr	r3, [pc, #276]	; (8002704 <MX_TIM1_Init+0x154>)
 80025f0:	4a45      	ldr	r2, [pc, #276]	; (8002708 <MX_TIM1_Init+0x158>)
 80025f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80025f4:	4b43      	ldr	r3, [pc, #268]	; (8002704 <MX_TIM1_Init+0x154>)
 80025f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fc:	4b41      	ldr	r3, [pc, #260]	; (8002704 <MX_TIM1_Init+0x154>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8002602:	4b40      	ldr	r3, [pc, #256]	; (8002704 <MX_TIM1_Init+0x154>)
 8002604:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002608:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260a:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <MX_TIM1_Init+0x154>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002610:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <MX_TIM1_Init+0x154>)
 8002612:	2200      	movs	r2, #0
 8002614:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <MX_TIM1_Init+0x154>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800261c:	4839      	ldr	r0, [pc, #228]	; (8002704 <MX_TIM1_Init+0x154>)
 800261e:	f003 fb85 	bl	8005d2c <HAL_TIM_Base_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002628:	f7ff fd22 	bl	8002070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002630:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002636:	4619      	mov	r1, r3
 8002638:	4832      	ldr	r0, [pc, #200]	; (8002704 <MX_TIM1_Init+0x154>)
 800263a:	f003 fec5 	bl	80063c8 <HAL_TIM_ConfigClockSource>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002644:	f7ff fd14 	bl	8002070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002648:	482e      	ldr	r0, [pc, #184]	; (8002704 <MX_TIM1_Init+0x154>)
 800264a:	f003 fbbe 	bl	8005dca <HAL_TIM_PWM_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002654:	f7ff fd0c 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002660:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002664:	4619      	mov	r1, r3
 8002666:	4827      	ldr	r0, [pc, #156]	; (8002704 <MX_TIM1_Init+0x154>)
 8002668:	f004 fa84 	bl	8006b74 <HAL_TIMEx_MasterConfigSynchronization>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002672:	f7ff fcfd 	bl	8002070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002676:	2360      	movs	r3, #96	; 0x60
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800267e:	2300      	movs	r3, #0
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002682:	2300      	movs	r3, #0
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002696:	2200      	movs	r2, #0
 8002698:	4619      	mov	r1, r3
 800269a:	481a      	ldr	r0, [pc, #104]	; (8002704 <MX_TIM1_Init+0x154>)
 800269c:	f003 fdce 	bl	800623c <HAL_TIM_PWM_ConfigChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80026a6:	f7ff fce3 	bl	8002070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ae:	2204      	movs	r2, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4814      	ldr	r0, [pc, #80]	; (8002704 <MX_TIM1_Init+0x154>)
 80026b4:	f003 fdc2 	bl	800623c <HAL_TIM_PWM_ConfigChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80026be:	f7ff fcd7 	bl	8002070 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	4619      	mov	r1, r3
 80026e4:	4807      	ldr	r0, [pc, #28]	; (8002704 <MX_TIM1_Init+0x154>)
 80026e6:	f004 fab3 	bl	8006c50 <HAL_TIMEx_ConfigBreakDeadTime>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80026f0:	f7ff fcbe 	bl	8002070 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80026f4:	4803      	ldr	r0, [pc, #12]	; (8002704 <MX_TIM1_Init+0x154>)
 80026f6:	f000 f9bf 	bl	8002a78 <HAL_TIM_MspPostInit>

}
 80026fa:	bf00      	nop
 80026fc:	3758      	adds	r7, #88	; 0x58
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000930 	.word	0x20000930
 8002708:	40010000 	.word	0x40010000

0800270c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	; 0x30
 8002710:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	2224      	movs	r2, #36	; 0x24
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f008 fe0a 	bl	800b334 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800272a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800272e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800273e:	f640 427f 	movw	r2, #3199	; 0xc7f
 8002742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002750:	2301      	movs	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002758:	2301      	movs	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002768:	2301      	movs	r3, #1
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	4619      	mov	r1, r3
 800277a:	480d      	ldr	r0, [pc, #52]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800277c:	f003 fb8c 	bl	8005e98 <HAL_TIM_Encoder_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002786:	f7ff fc73 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	4619      	mov	r1, r3
 8002796:	4806      	ldr	r0, [pc, #24]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002798:	f004 f9ec 	bl	8006b74 <HAL_TIMEx_MasterConfigSynchronization>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80027a2:	f7ff fc65 	bl	8002070 <Error_Handler>
  }

}
 80027a6:	bf00      	nop
 80027a8:	3730      	adds	r7, #48	; 0x30
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000970 	.word	0x20000970

080027b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	2224      	movs	r2, #36	; 0x24
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f008 fdb6 	bl	800b334 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <MX_TIM3_Init+0xa0>)
 80027d2:	4a21      	ldr	r2, [pc, #132]	; (8002858 <MX_TIM3_Init+0xa4>)
 80027d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027d6:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <MX_TIM3_Init+0xa0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <MX_TIM3_Init+0xa0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2479;
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <MX_TIM3_Init+0xa0>)
 80027e4:	f640 12af 	movw	r2, #2479	; 0x9af
 80027e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ea:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <MX_TIM3_Init+0xa0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <MX_TIM3_Init+0xa0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027fe:	2301      	movs	r3, #1
 8002800:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800280e:	2301      	movs	r3, #1
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002812:	2300      	movs	r3, #0
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	4619      	mov	r1, r3
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <MX_TIM3_Init+0xa0>)
 8002822:	f003 fb39 	bl	8005e98 <HAL_TIM_Encoder_Init>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800282c:	f7ff fc20 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	4619      	mov	r1, r3
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_TIM3_Init+0xa0>)
 800283e:	f004 f999 	bl	8006b74 <HAL_TIMEx_MasterConfigSynchronization>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002848:	f7ff fc12 	bl	8002070 <Error_Handler>
  }

}
 800284c:	bf00      	nop
 800284e:	3730      	adds	r7, #48	; 0x30
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200008f0 	.word	0x200008f0
 8002858:	40000400 	.word	0x40000400

0800285c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002870:	463b      	mov	r3, r7
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <MX_TIM4_Init+0x94>)
 800287a:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <MX_TIM4_Init+0x98>)
 800287c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9600;
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <MX_TIM4_Init+0x94>)
 8002880:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002884:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <MX_TIM4_Init+0x94>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <MX_TIM4_Init+0x94>)
 800288e:	220a      	movs	r2, #10
 8002890:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <MX_TIM4_Init+0x94>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <MX_TIM4_Init+0x94>)
 800289a:	2200      	movs	r2, #0
 800289c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800289e:	4814      	ldr	r0, [pc, #80]	; (80028f0 <MX_TIM4_Init+0x94>)
 80028a0:	f003 fa44 	bl	8005d2c <HAL_TIM_Base_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80028aa:	f7ff fbe1 	bl	8002070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	4619      	mov	r1, r3
 80028ba:	480d      	ldr	r0, [pc, #52]	; (80028f0 <MX_TIM4_Init+0x94>)
 80028bc:	f003 fd84 	bl	80063c8 <HAL_TIM_ConfigClockSource>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80028c6:	f7ff fbd3 	bl	8002070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028d2:	463b      	mov	r3, r7
 80028d4:	4619      	mov	r1, r3
 80028d6:	4806      	ldr	r0, [pc, #24]	; (80028f0 <MX_TIM4_Init+0x94>)
 80028d8:	f004 f94c 	bl	8006b74 <HAL_TIMEx_MasterConfigSynchronization>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80028e2:	f7ff fbc5 	bl	8002070 <Error_Handler>
  }

}
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	200008b0 	.word	0x200008b0
 80028f4:	40000800 	.word	0x40000800

080028f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <HAL_TIM_Base_MspInit+0x80>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d116      	bne.n	8002938 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_TIM_Base_MspInit+0x84>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a1a      	ldr	r2, [pc, #104]	; (800297c <HAL_TIM_Base_MspInit+0x84>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_TIM_Base_MspInit+0x84>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	2019      	movs	r0, #25
 800292c:	f000 ff31 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002930:	2019      	movs	r0, #25
 8002932:	f000 ff4a 	bl	80037ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002936:	e01a      	b.n	800296e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a10      	ldr	r2, [pc, #64]	; (8002980 <HAL_TIM_Base_MspInit+0x88>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d115      	bne.n	800296e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_TIM_Base_MspInit+0x84>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a0c      	ldr	r2, [pc, #48]	; (800297c <HAL_TIM_Base_MspInit+0x84>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_TIM_Base_MspInit+0x84>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	201e      	movs	r0, #30
 8002964:	f000 ff15 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002968:	201e      	movs	r0, #30
 800296a:	f000 ff2e 	bl	80037ca <HAL_NVIC_EnableIRQ>
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40010000 	.word	0x40010000
 800297c:	40023800 	.word	0x40023800
 8002980:	40000800 	.word	0x40000800

08002984 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08c      	sub	sp, #48	; 0x30
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a4:	d12c      	bne.n	8002a00 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a2f      	ldr	r2, [pc, #188]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029de:	2303      	movs	r3, #3
 80029e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029ee:	2301      	movs	r3, #1
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	4619      	mov	r1, r3
 80029f8:	481d      	ldr	r0, [pc, #116]	; (8002a70 <HAL_TIM_Encoder_MspInit+0xec>)
 80029fa:	f001 fa0b 	bl	8003e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029fe:	e030      	b.n	8002a62 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d12b      	bne.n	8002a62 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a42:	23c0      	movs	r3, #192	; 0xc0
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a52:	2302      	movs	r3, #2
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a56:	f107 031c 	add.w	r3, r7, #28
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4804      	ldr	r0, [pc, #16]	; (8002a70 <HAL_TIM_Encoder_MspInit+0xec>)
 8002a5e:	f001 f9d9 	bl	8003e14 <HAL_GPIO_Init>
}
 8002a62:	bf00      	nop
 8002a64:	3730      	adds	r7, #48	; 0x30
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40000400 	.word	0x40000400

08002a78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <HAL_TIM_MspPostInit+0x68>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d11e      	bne.n	8002ad8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_TIM_MspPostInit+0x6c>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <HAL_TIM_MspPostInit+0x6c>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <HAL_TIM_MspPostInit+0x6c>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <HAL_TIM_MspPostInit+0x70>)
 8002ad4:	f001 f99e 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ad8:	bf00      	nop
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020000 	.word	0x40020000

08002aec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <MX_USART1_UART_Init+0x4c>)
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <MX_USART1_UART_Init+0x50>)
 8002af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <MX_USART1_UART_Init+0x4c>)
 8002af8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <MX_USART1_UART_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_USART1_UART_Init+0x4c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <MX_USART1_UART_Init+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <MX_USART1_UART_Init+0x4c>)
 8002b12:	220c      	movs	r2, #12
 8002b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_USART1_UART_Init+0x4c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <MX_USART1_UART_Init+0x4c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <MX_USART1_UART_Init+0x4c>)
 8002b24:	f004 f91f 	bl	8006d66 <HAL_UART_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b2e:	f7ff fa9f 	bl	8002070 <Error_Handler>
  }

}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200009b0 	.word	0x200009b0
 8002b3c:	40011000 	.word	0x40011000

08002b40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <MX_USART2_UART_Init+0x4c>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <MX_USART2_UART_Init+0x50>)
 8002b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <MX_USART2_UART_Init+0x4c>)
 8002b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <MX_USART2_UART_Init+0x4c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <MX_USART2_UART_Init+0x4c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <MX_USART2_UART_Init+0x4c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <MX_USART2_UART_Init+0x4c>)
 8002b66:	220c      	movs	r2, #12
 8002b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <MX_USART2_UART_Init+0x4c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <MX_USART2_UART_Init+0x4c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b76:	4805      	ldr	r0, [pc, #20]	; (8002b8c <MX_USART2_UART_Init+0x4c>)
 8002b78:	f004 f8f5 	bl	8006d66 <HAL_UART_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b82:	f7ff fa75 	bl	8002070 <Error_Handler>
  }

}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200009f0 	.word	0x200009f0
 8002b90:	40004400 	.word	0x40004400

08002b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a3a      	ldr	r2, [pc, #232]	; (8002c9c <HAL_UART_MspInit+0x108>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d135      	bne.n	8002c22 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	4a38      	ldr	r2, [pc, #224]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002bc0:	f043 0310 	orr.w	r3, r3, #16
 8002bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc6:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002bee:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c00:	2307      	movs	r3, #7
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 031c 	add.w	r3, r7, #28
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4826      	ldr	r0, [pc, #152]	; (8002ca4 <HAL_UART_MspInit+0x110>)
 8002c0c:	f001 f902 	bl	8003e14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	2100      	movs	r1, #0
 8002c14:	2025      	movs	r0, #37	; 0x25
 8002c16:	f000 fdbc 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c1a:	2025      	movs	r0, #37	; 0x25
 8002c1c:	f000 fdd5 	bl	80037ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c20:	e038      	b.n	8002c94 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a20      	ldr	r2, [pc, #128]	; (8002ca8 <HAL_UART_MspInit+0x114>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d133      	bne.n	8002c94 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6313      	str	r3, [r2, #48]	; 0x30
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_UART_MspInit+0x10c>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c64:	230c      	movs	r3, #12
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c74:	2307      	movs	r3, #7
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4809      	ldr	r0, [pc, #36]	; (8002ca4 <HAL_UART_MspInit+0x110>)
 8002c80:	f001 f8c8 	bl	8003e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c84:	2200      	movs	r2, #0
 8002c86:	2100      	movs	r1, #0
 8002c88:	2026      	movs	r0, #38	; 0x26
 8002c8a:	f000 fd82 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c8e:	2026      	movs	r0, #38	; 0x26
 8002c90:	f000 fd9b 	bl	80037ca <HAL_NVIC_EnableIRQ>
}
 8002c94:	bf00      	nop
 8002c96:	3730      	adds	r7, #48	; 0x30
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40011000 	.word	0x40011000
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40004400 	.word	0x40004400

08002cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cb2:	e003      	b.n	8002cbc <LoopCopyDataInit>

08002cb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cba:	3104      	adds	r1, #4

08002cbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cbc:	480b      	ldr	r0, [pc, #44]	; (8002cec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cc4:	d3f6      	bcc.n	8002cb4 <CopyDataInit>
  ldr  r2, =_sbss
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cc8:	e002      	b.n	8002cd0 <LoopFillZerobss>

08002cca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ccc:	f842 3b04 	str.w	r3, [r2], #4

08002cd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cd4:	d3f9      	bcc.n	8002cca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cd6:	f7ff fc55 	bl	8002584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cda:	f008 faf7 	bl	800b2cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cde:	f7fe ff4b 	bl	8001b78 <main>
  bx  lr    
 8002ce2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ce4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ce8:	08013360 	.word	0x08013360
  ldr  r0, =_sdata
 8002cec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cf0:	200003c8 	.word	0x200003c8
  ldr  r2, =_sbss
 8002cf4:	200003c8 	.word	0x200003c8
  ldr  r3, = _ebss
 8002cf8:	200013d8 	.word	0x200013d8

08002cfc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <DMA1_Stream0_IRQHandler>
	...

08002d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_Init+0x40>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <HAL_Init+0x40>)
 8002d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_Init+0x40>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <HAL_Init+0x40>)
 8002d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_Init+0x40>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <HAL_Init+0x40>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f000 fd27 	bl	800377c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f000 f808 	bl	8002d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d34:	f7ff fb00 	bl	8002338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023c00 	.word	0x40023c00

08002d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_InitTick+0x54>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_InitTick+0x58>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fd3f 	bl	80037e6 <HAL_SYSTICK_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00e      	b.n	8002d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d80a      	bhi.n	8002d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f000 fd07 	bl	8003792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d84:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <HAL_InitTick+0x5c>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	2000006c 	.word	0x2000006c
 8002d9c:	20000074 	.word	0x20000074
 8002da0:	20000070 	.word	0x20000070

08002da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_IncTick+0x20>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_IncTick+0x24>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4413      	add	r3, r2
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <HAL_IncTick+0x24>)
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000074 	.word	0x20000074
 8002dc8:	20000a30 	.word	0x20000a30

08002dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_GetTick+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000a30 	.word	0x20000a30

08002de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff ffee 	bl	8002dcc <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d005      	beq.n	8002e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_Delay+0x40>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e0a:	bf00      	nop
 8002e0c:	f7ff ffde 	bl	8002dcc <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d8f7      	bhi.n	8002e0c <HAL_Delay+0x28>
  {
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000074 	.word	0x20000074

08002e28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e033      	b.n	8002ea6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe f932 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e6e:	f023 0302 	bic.w	r3, r3, #2
 8002e72:	f043 0202 	orr.w	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 faa8 	bl	80033d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	f043 0201 	orr.w	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
 8002e96:	e001      	b.n	8002e9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d049      	beq.n	8002f84 <HAL_ADC_IRQHandler+0xd6>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d046      	beq.n	8002f84 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d12b      	bne.n	8002f74 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d127      	bne.n	8002f74 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d119      	bne.n	8002f74 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0220 	bic.w	r2, r2, #32
 8002f4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f8db 	bl	8003130 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f06f 0212 	mvn.w	r2, #18
 8002f82:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	bf0c      	ite	eq
 8002f92:	2301      	moveq	r3, #1
 8002f94:	2300      	movne	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	2b80      	cmp	r3, #128	; 0x80
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d057      	beq.n	8003066 <HAL_ADC_IRQHandler+0x1b8>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d054      	beq.n	8003066 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d139      	bne.n	8003056 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d12b      	bne.n	8003056 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003008:	2b00      	cmp	r3, #0
 800300a:	d124      	bne.n	8003056 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003016:	2b00      	cmp	r3, #0
 8003018:	d11d      	bne.n	8003056 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800301e:	2b00      	cmp	r3, #0
 8003020:	d119      	bne.n	8003056 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003030:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fab6 	bl	80035c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 020c 	mvn.w	r2, #12
 8003064:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d017      	beq.n	80030c8 <HAL_ADC_IRQHandler+0x21a>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d014      	beq.n	80030c8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d10d      	bne.n	80030c8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f843 	bl	8003144 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f06f 0201 	mvn.w	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ec:	bf0c      	ite	eq
 80030ee:	2301      	moveq	r3, #1
 80030f0:	2300      	movne	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d015      	beq.n	8003128 <HAL_ADC_IRQHandler+0x27a>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d012      	beq.n	8003128 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f06f 0220 	mvn.w	r2, #32
 8003116:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f81d 	bl	8003158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f06f 0220 	mvn.w	r2, #32
 8003126:	601a      	str	r2, [r3, #0]
  }
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x1c>
 8003184:	2302      	movs	r3, #2
 8003186:	e113      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x244>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b09      	cmp	r3, #9
 8003196:	d925      	bls.n	80031e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68d9      	ldr	r1, [r3, #12]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	3b1e      	subs	r3, #30
 80031ae:	2207      	movs	r2, #7
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43da      	mvns	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	400a      	ands	r2, r1
 80031bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68d9      	ldr	r1, [r3, #12]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	4603      	mov	r3, r0
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4403      	add	r3, r0
 80031d6:	3b1e      	subs	r3, #30
 80031d8:	409a      	lsls	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	e022      	b.n	800322a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6919      	ldr	r1, [r3, #16]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	2207      	movs	r2, #7
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	400a      	ands	r2, r1
 8003206:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6919      	ldr	r1, [r3, #16]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	4618      	mov	r0, r3
 800321a:	4603      	mov	r3, r0
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4403      	add	r3, r0
 8003220:	409a      	lsls	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b06      	cmp	r3, #6
 8003230:	d824      	bhi.n	800327c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	3b05      	subs	r3, #5
 8003244:	221f      	movs	r2, #31
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43da      	mvns	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	400a      	ands	r2, r1
 8003252:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	4618      	mov	r0, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	3b05      	subs	r3, #5
 800326e:	fa00 f203 	lsl.w	r2, r0, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	635a      	str	r2, [r3, #52]	; 0x34
 800327a:	e04c      	b.n	8003316 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	d824      	bhi.n	80032ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	3b23      	subs	r3, #35	; 0x23
 8003296:	221f      	movs	r2, #31
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43da      	mvns	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	400a      	ands	r2, r1
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	4618      	mov	r0, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	3b23      	subs	r3, #35	; 0x23
 80032c0:	fa00 f203 	lsl.w	r2, r0, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
 80032cc:	e023      	b.n	8003316 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	3b41      	subs	r3, #65	; 0x41
 80032e0:	221f      	movs	r2, #31
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	400a      	ands	r2, r1
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4618      	mov	r0, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	3b41      	subs	r3, #65	; 0x41
 800330a:	fa00 f203 	lsl.w	r2, r0, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003316:	4b29      	ldr	r3, [pc, #164]	; (80033bc <HAL_ADC_ConfigChannel+0x250>)
 8003318:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <HAL_ADC_ConfigChannel+0x254>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10f      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x1d8>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b12      	cmp	r3, #18
 800332a:	d10b      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_ADC_ConfigChannel+0x254>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d12b      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x23a>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <HAL_ADC_ConfigChannel+0x258>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <HAL_ADC_ConfigChannel+0x1f4>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b11      	cmp	r3, #17
 800335e:	d122      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <HAL_ADC_ConfigChannel+0x258>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d111      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a11      	ldr	r2, [pc, #68]	; (80033cc <HAL_ADC_ConfigChannel+0x260>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	0c9a      	lsrs	r2, r3, #18
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003398:	e002      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3b01      	subs	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f9      	bne.n	800339a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40012300 	.word	0x40012300
 80033c0:	40012000 	.word	0x40012000
 80033c4:	10000012 	.word	0x10000012
 80033c8:	2000006c 	.word	0x2000006c
 80033cc:	431bde83 	.word	0x431bde83

080033d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033d8:	4b79      	ldr	r3, [pc, #484]	; (80035c0 <ADC_Init+0x1f0>)
 80033da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003404:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	021a      	lsls	r2, r3, #8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003428:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800344a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6899      	ldr	r1, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <ADC_Init+0x1f4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d022      	beq.n	80034ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003476:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6899      	ldr	r1, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003498:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6899      	ldr	r1, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	e00f      	b.n	80034ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0202 	bic.w	r2, r2, #2
 80034dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6899      	ldr	r1, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	7e1b      	ldrb	r3, [r3, #24]
 80034e8:	005a      	lsls	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01b      	beq.n	8003534 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800351a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6859      	ldr	r1, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	3b01      	subs	r3, #1
 8003528:	035a      	lsls	r2, r3, #13
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	e007      	b.n	8003544 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003542:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	3b01      	subs	r3, #1
 8003560:	051a      	lsls	r2, r3, #20
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003586:	025a      	lsls	r2, r3, #9
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	029a      	lsls	r2, r3, #10
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40012300 	.word	0x40012300
 80035c4:	0f000001 	.word	0x0f000001

080035c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035ec:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <__NVIC_SetPriorityGrouping+0x44>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f8:	4013      	ands	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360e:	4a04      	ldr	r2, [pc, #16]	; (8003620 <__NVIC_SetPriorityGrouping+0x44>)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	60d3      	str	r3, [r2, #12]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <__NVIC_GetPriorityGrouping+0x18>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	f003 0307 	and.w	r3, r3, #7
}
 8003632:	4618      	mov	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	2b00      	cmp	r3, #0
 8003650:	db0b      	blt.n	800366a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	4907      	ldr	r1, [pc, #28]	; (8003678 <__NVIC_EnableIRQ+0x38>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2001      	movs	r0, #1
 8003662:	fa00 f202 	lsl.w	r2, r0, r2
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000e100 	.word	0xe000e100

0800367c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	6039      	str	r1, [r7, #0]
 8003686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	2b00      	cmp	r3, #0
 800368e:	db0a      	blt.n	80036a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	490c      	ldr	r1, [pc, #48]	; (80036c8 <__NVIC_SetPriority+0x4c>)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	0112      	lsls	r2, r2, #4
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	440b      	add	r3, r1
 80036a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a4:	e00a      	b.n	80036bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4908      	ldr	r1, [pc, #32]	; (80036cc <__NVIC_SetPriority+0x50>)
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	3b04      	subs	r3, #4
 80036b4:	0112      	lsls	r2, r2, #4
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	440b      	add	r3, r1
 80036ba:	761a      	strb	r2, [r3, #24]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000e100 	.word	0xe000e100
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f1c3 0307 	rsb	r3, r3, #7
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	bf28      	it	cs
 80036ee:	2304      	movcs	r3, #4
 80036f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d902      	bls.n	8003700 <NVIC_EncodePriority+0x30>
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3b03      	subs	r3, #3
 80036fe:	e000      	b.n	8003702 <NVIC_EncodePriority+0x32>
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003704:	f04f 32ff 	mov.w	r2, #4294967295
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43da      	mvns	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	401a      	ands	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003718:	f04f 31ff 	mov.w	r1, #4294967295
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	43d9      	mvns	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003728:	4313      	orrs	r3, r2
         );
}
 800372a:	4618      	mov	r0, r3
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003748:	d301      	bcc.n	800374e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800374a:	2301      	movs	r3, #1
 800374c:	e00f      	b.n	800376e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <SysTick_Config+0x40>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003756:	210f      	movs	r1, #15
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f7ff ff8e 	bl	800367c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <SysTick_Config+0x40>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <SysTick_Config+0x40>)
 8003768:	2207      	movs	r2, #7
 800376a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	e000e010 	.word	0xe000e010

0800377c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff29 	bl	80035dc <__NVIC_SetPriorityGrouping>
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037a4:	f7ff ff3e 	bl	8003624 <__NVIC_GetPriorityGrouping>
 80037a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	6978      	ldr	r0, [r7, #20]
 80037b0:	f7ff ff8e 	bl	80036d0 <NVIC_EncodePriority>
 80037b4:	4602      	mov	r2, r0
 80037b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff5d 	bl	800367c <__NVIC_SetPriority>
}
 80037c2:	bf00      	nop
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4603      	mov	r3, r0
 80037d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff31 	bl	8003640 <__NVIC_EnableIRQ>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ffa2 	bl	8003738 <SysTick_Config>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800380c:	f7ff fade 	bl	8002dcc <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e099      	b.n	8003950 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800383c:	e00f      	b.n	800385e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800383e:	f7ff fac5 	bl	8002dcc <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b05      	cmp	r3, #5
 800384a:	d908      	bls.n	800385e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2203      	movs	r2, #3
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e078      	b.n	8003950 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e8      	bne.n	800383e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	4b38      	ldr	r3, [pc, #224]	; (8003958 <HAL_DMA_Init+0x158>)
 8003878:	4013      	ands	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800388a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d107      	bne.n	80038c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	4313      	orrs	r3, r2
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0307 	bic.w	r3, r3, #7
 80038de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d117      	bne.n	8003922 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00e      	beq.n	8003922 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fa0b 	bl	8003d20 <DMA_CheckFifoParam>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2240      	movs	r2, #64	; 0x40
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800391e:	2301      	movs	r3, #1
 8003920:	e016      	b.n	8003950 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9c2 	bl	8003cb4 <DMA_CalcBaseAndBitshift>
 8003930:	4603      	mov	r3, r0
 8003932:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	223f      	movs	r2, #63	; 0x3f
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	f010803f 	.word	0xf010803f

0800395c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d004      	beq.n	800397a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e00c      	b.n	8003994 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2205      	movs	r2, #5
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039ac:	4b92      	ldr	r3, [pc, #584]	; (8003bf8 <HAL_DMA_IRQHandler+0x258>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a92      	ldr	r2, [pc, #584]	; (8003bfc <HAL_DMA_IRQHandler+0x25c>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	2208      	movs	r2, #8
 80039cc:	409a      	lsls	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01a      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0204 	bic.w	r2, r2, #4
 80039f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2208      	movs	r2, #8
 80039fa:	409a      	lsls	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	f043 0201 	orr.w	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	2201      	movs	r2, #1
 8003a30:	409a      	lsls	r2, r3
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	f043 0202 	orr.w	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	2204      	movs	r2, #4
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d012      	beq.n	8003a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00b      	beq.n	8003a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	2204      	movs	r2, #4
 8003a66:	409a      	lsls	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f043 0204 	orr.w	r2, r3, #4
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d043      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d03c      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d024      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4798      	blx	r3
 8003ace:	e01f      	b.n	8003b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01b      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
 8003ae0:	e016      	b.n	8003b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d107      	bne.n	8003b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0208 	bic.w	r2, r2, #8
 8003afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	2220      	movs	r2, #32
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 808e 	beq.w	8003c3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8086 	beq.w	8003c3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	2220      	movs	r2, #32
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d136      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0216 	bic.w	r2, r2, #22
 8003b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <HAL_DMA_IRQHandler+0x1da>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0208 	bic.w	r2, r2, #8
 8003b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	223f      	movs	r2, #63	; 0x3f
 8003b90:	409a      	lsls	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d07d      	beq.n	8003caa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
        }
        return;
 8003bb6:	e078      	b.n	8003caa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01c      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d108      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d030      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
 8003be4:	e02b      	b.n	8003c3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d027      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
 8003bf6:	e022      	b.n	8003c3e <HAL_DMA_IRQHandler+0x29e>
 8003bf8:	2000006c 	.word	0x2000006c
 8003bfc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10f      	bne.n	8003c2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0210 	bic.w	r2, r2, #16
 8003c1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d032      	beq.n	8003cac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d022      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2205      	movs	r2, #5
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d307      	bcc.n	8003c86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f2      	bne.n	8003c6a <HAL_DMA_IRQHandler+0x2ca>
 8003c84:	e000      	b.n	8003c88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c86:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
 8003ca8:	e000      	b.n	8003cac <HAL_DMA_IRQHandler+0x30c>
        return;
 8003caa:	bf00      	nop
    }
  }
}
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop

08003cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	3b10      	subs	r3, #16
 8003cc4:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <DMA_CalcBaseAndBitshift+0x64>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <DMA_CalcBaseAndBitshift+0x68>)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d909      	bls.n	8003cf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	1d1a      	adds	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	659a      	str	r2, [r3, #88]	; 0x58
 8003cf4:	e007      	b.n	8003d06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	aaaaaaab 	.word	0xaaaaaaab
 8003d1c:	08012dac 	.word	0x08012dac

08003d20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d11f      	bne.n	8003d7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d855      	bhi.n	8003dec <DMA_CheckFifoParam+0xcc>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <DMA_CheckFifoParam+0x28>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d6b 	.word	0x08003d6b
 8003d50:	08003d59 	.word	0x08003d59
 8003d54:	08003ded 	.word	0x08003ded
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d045      	beq.n	8003df0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d68:	e042      	b.n	8003df0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d72:	d13f      	bne.n	8003df4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d78:	e03c      	b.n	8003df4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	d121      	bne.n	8003dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d836      	bhi.n	8003df8 <DMA_CheckFifoParam+0xd8>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <DMA_CheckFifoParam+0x70>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003da7 	.word	0x08003da7
 8003d98:	08003da1 	.word	0x08003da1
 8003d9c:	08003db9 	.word	0x08003db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      break;
 8003da4:	e02f      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d024      	beq.n	8003dfc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db6:	e021      	b.n	8003dfc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dc0:	d11e      	bne.n	8003e00 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dc6:	e01b      	b.n	8003e00 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d902      	bls.n	8003dd4 <DMA_CheckFifoParam+0xb4>
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d003      	beq.n	8003dda <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dd2:	e018      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd8:	e015      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00e      	beq.n	8003e04 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dea:	e00b      	b.n	8003e04 <DMA_CheckFifoParam+0xe4>
      break;
 8003dec:	bf00      	nop
 8003dee:	e00a      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
      break;
 8003df0:	bf00      	nop
 8003df2:	e008      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
      break;
 8003df4:	bf00      	nop
 8003df6:	e006      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
      break;
 8003df8:	bf00      	nop
 8003dfa:	e004      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
      break;
 8003dfc:	bf00      	nop
 8003dfe:	e002      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
      break;   
 8003e00:	bf00      	nop
 8003e02:	e000      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
      break;
 8003e04:	bf00      	nop
    }
  } 
  
  return status; 
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	; 0x24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e159      	b.n	80040e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e30:	2201      	movs	r2, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	f040 8148 	bne.w	80040de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d00b      	beq.n	8003e6e <HAL_GPIO_Init+0x5a>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d007      	beq.n	8003e6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e62:	2b11      	cmp	r3, #17
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b12      	cmp	r3, #18
 8003e6c:	d130      	bne.n	8003ed0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	2203      	movs	r2, #3
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 0201 	and.w	r2, r3, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	2203      	movs	r2, #3
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0xfc>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b12      	cmp	r3, #18
 8003f0e:	d123      	bne.n	8003f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	220f      	movs	r2, #15
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	08da      	lsrs	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3208      	adds	r2, #8
 8003f52:	69b9      	ldr	r1, [r7, #24]
 8003f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0203 	and.w	r2, r3, #3
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a2 	beq.w	80040de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	4b56      	ldr	r3, [pc, #344]	; (80040f8 <HAL_GPIO_Init+0x2e4>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	4a55      	ldr	r2, [pc, #340]	; (80040f8 <HAL_GPIO_Init+0x2e4>)
 8003fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003faa:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_GPIO_Init+0x2e4>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fb6:	4a51      	ldr	r2, [pc, #324]	; (80040fc <HAL_GPIO_Init+0x2e8>)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	220f      	movs	r2, #15
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a48      	ldr	r2, [pc, #288]	; (8004100 <HAL_GPIO_Init+0x2ec>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d019      	beq.n	8004016 <HAL_GPIO_Init+0x202>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a47      	ldr	r2, [pc, #284]	; (8004104 <HAL_GPIO_Init+0x2f0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <HAL_GPIO_Init+0x1fe>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a46      	ldr	r2, [pc, #280]	; (8004108 <HAL_GPIO_Init+0x2f4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00d      	beq.n	800400e <HAL_GPIO_Init+0x1fa>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a45      	ldr	r2, [pc, #276]	; (800410c <HAL_GPIO_Init+0x2f8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d007      	beq.n	800400a <HAL_GPIO_Init+0x1f6>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a44      	ldr	r2, [pc, #272]	; (8004110 <HAL_GPIO_Init+0x2fc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d101      	bne.n	8004006 <HAL_GPIO_Init+0x1f2>
 8004002:	2304      	movs	r3, #4
 8004004:	e008      	b.n	8004018 <HAL_GPIO_Init+0x204>
 8004006:	2307      	movs	r3, #7
 8004008:	e006      	b.n	8004018 <HAL_GPIO_Init+0x204>
 800400a:	2303      	movs	r3, #3
 800400c:	e004      	b.n	8004018 <HAL_GPIO_Init+0x204>
 800400e:	2302      	movs	r3, #2
 8004010:	e002      	b.n	8004018 <HAL_GPIO_Init+0x204>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_GPIO_Init+0x204>
 8004016:	2300      	movs	r3, #0
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	f002 0203 	and.w	r2, r2, #3
 800401e:	0092      	lsls	r2, r2, #2
 8004020:	4093      	lsls	r3, r2
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004028:	4934      	ldr	r1, [pc, #208]	; (80040fc <HAL_GPIO_Init+0x2e8>)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	089b      	lsrs	r3, r3, #2
 800402e:	3302      	adds	r3, #2
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004036:	4b37      	ldr	r3, [pc, #220]	; (8004114 <HAL_GPIO_Init+0x300>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800405a:	4a2e      	ldr	r2, [pc, #184]	; (8004114 <HAL_GPIO_Init+0x300>)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004060:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <HAL_GPIO_Init+0x300>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004084:	4a23      	ldr	r2, [pc, #140]	; (8004114 <HAL_GPIO_Init+0x300>)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800408a:	4b22      	ldr	r3, [pc, #136]	; (8004114 <HAL_GPIO_Init+0x300>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ae:	4a19      	ldr	r2, [pc, #100]	; (8004114 <HAL_GPIO_Init+0x300>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b4:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_GPIO_Init+0x300>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d8:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <HAL_GPIO_Init+0x300>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3301      	adds	r3, #1
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b0f      	cmp	r3, #15
 80040e8:	f67f aea2 	bls.w	8003e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	3724      	adds	r7, #36	; 0x24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40013800 	.word	0x40013800
 8004100:	40020000 	.word	0x40020000
 8004104:	40020400 	.word	0x40020400
 8004108:	40020800 	.word	0x40020800
 800410c:	40020c00 	.word	0x40020c00
 8004110:	40021000 	.word	0x40021000
 8004114:	40013c00 	.word	0x40013c00

08004118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	887b      	ldrh	r3, [r7, #2]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	e001      	b.n	800413a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
 8004154:	4613      	mov	r3, r2
 8004156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004158:	787b      	ldrb	r3, [r7, #1]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004164:	e003      	b.n	800416e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004166:	887b      	ldrh	r3, [r7, #2]
 8004168:	041a      	lsls	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	619a      	str	r2, [r3, #24]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800417a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417c:	b08f      	sub	sp, #60	; 0x3c
 800417e:	af0a      	add	r7, sp, #40	; 0x28
 8004180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e10f      	b.n	80043ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f006 fd98 	bl	800acdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2203      	movs	r2, #3
 80041b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f003 fd35 	bl	8007c3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	687e      	ldr	r6, [r7, #4]
 80041d8:	466d      	mov	r5, sp
 80041da:	f106 0410 	add.w	r4, r6, #16
 80041de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80041ee:	1d33      	adds	r3, r6, #4
 80041f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041f2:	6838      	ldr	r0, [r7, #0]
 80041f4:	f003 fc0c 	bl	8007a10 <USB_CoreInit>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0d0      	b.n	80043ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f003 fd23 	bl	8007c5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
 800421a:	e04a      	b.n	80042b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	333d      	adds	r3, #61	; 0x3d
 800422c:	2201      	movs	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004230:	7bfa      	ldrb	r2, [r7, #15]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	333c      	adds	r3, #60	; 0x3c
 8004240:	7bfa      	ldrb	r2, [r7, #15]
 8004242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004244:	7bfa      	ldrb	r2, [r7, #15]
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	b298      	uxth	r0, r3
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	3342      	adds	r3, #66	; 0x42
 8004258:	4602      	mov	r2, r0
 800425a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800425c:	7bfa      	ldrb	r2, [r7, #15]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	333f      	adds	r3, #63	; 0x3f
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004270:	7bfa      	ldrb	r2, [r7, #15]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	3344      	adds	r3, #68	; 0x44
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	3348      	adds	r3, #72	; 0x48
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	3350      	adds	r3, #80	; 0x50
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	3301      	adds	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
 80042b2:	7bfa      	ldrb	r2, [r7, #15]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d3af      	bcc.n	800421c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042bc:	2300      	movs	r3, #0
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	e044      	b.n	800434c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042c2:	7bfa      	ldrb	r2, [r7, #15]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042d8:	7bfa      	ldrb	r2, [r7, #15]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004304:	7bfa      	ldrb	r2, [r7, #15]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800431a:	7bfa      	ldrb	r2, [r7, #15]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004330:	7bfa      	ldrb	r2, [r7, #15]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	3301      	adds	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d3b5      	bcc.n	80042c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	687e      	ldr	r6, [r7, #4]
 800435e:	466d      	mov	r5, sp
 8004360:	f106 0410 	add.w	r4, r6, #16
 8004364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800436a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800436c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004370:	e885 0003 	stmia.w	r5, {r0, r1}
 8004374:	1d33      	adds	r3, r6, #4
 8004376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004378:	6838      	ldr	r0, [r7, #0]
 800437a:	f003 fc99 	bl	8007cb0 <USB_DevInit>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e00d      	b.n	80043ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f004 fce1 	bl	8008d6c <USB_DevDisconnect>

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_PCD_Start+0x1c>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e020      	b.n	8004412 <HAL_PCD_Start+0x5e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d109      	bne.n	80043f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d005      	beq.n	80043f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f003 fc0d 	bl	8007c18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f004 fc91 	bl	8008d2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800441a:	b590      	push	{r4, r7, lr}
 800441c:	b08d      	sub	sp, #52	; 0x34
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f004 fd4f 	bl	8008ed4 <USB_GetMode>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	f040 839d 	bne.w	8004b78 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f004 fcb3 	bl	8008dae <USB_ReadInterrupts>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8393 	beq.w	8004b76 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f004 fcaa 	bl	8008dae <USB_ReadInterrupts>
 800445a:	4603      	mov	r3, r0
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d107      	bne.n	8004474 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f002 0202 	and.w	r2, r2, #2
 8004472:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f004 fc98 	bl	8008dae <USB_ReadInterrupts>
 800447e:	4603      	mov	r3, r0
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b10      	cmp	r3, #16
 8004486:	d161      	bne.n	800454c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0210 	bic.w	r2, r2, #16
 8004496:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4413      	add	r3, r2
 80044b4:	3304      	adds	r3, #4
 80044b6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	0c5b      	lsrs	r3, r3, #17
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d124      	bne.n	800450e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d035      	beq.n	800453c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044de:	b29b      	uxth	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	6a38      	ldr	r0, [r7, #32]
 80044e4:	f004 fafe 	bl	8008ae4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044f4:	441a      	add	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004506:	441a      	add	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	619a      	str	r2, [r3, #24]
 800450c:	e016      	b.n	800453c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	0c5b      	lsrs	r3, r3, #17
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	2b06      	cmp	r3, #6
 8004518:	d110      	bne.n	800453c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004520:	2208      	movs	r2, #8
 8004522:	4619      	mov	r1, r3
 8004524:	6a38      	ldr	r0, [r7, #32]
 8004526:	f004 fadd 	bl	8008ae4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004536:	441a      	add	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0210 	orr.w	r2, r2, #16
 800454a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f004 fc2c 	bl	8008dae <USB_ReadInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800455c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004560:	d16e      	bne.n	8004640 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f004 fc32 	bl	8008dd4 <USB_ReadDevAllOutEpInterrupt>
 8004570:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004572:	e062      	b.n	800463a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d057      	beq.n	800462e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f004 fc57 	bl	8008e3c <USB_ReadDevOutEPInterrupt>
 800458e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	461a      	mov	r2, r3
 80045a8:	2301      	movs	r3, #1
 80045aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80045ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fdb0 	bl	8005114 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	461a      	mov	r2, r3
 80045cc:	2308      	movs	r3, #8
 80045ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 feaa 	bl	800532c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	461a      	mov	r2, r3
 80045f0:	2310      	movs	r3, #16
 80045f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460a:	461a      	mov	r2, r3
 800460c:	2320      	movs	r3, #32
 800460e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	461a      	mov	r2, r3
 8004628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800462c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	3301      	adds	r3, #1
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d199      	bne.n	8004574 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f004 fbb2 	bl	8008dae <USB_ReadInterrupts>
 800464a:	4603      	mov	r3, r0
 800464c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004654:	f040 80c0 	bne.w	80047d8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f004 fbd3 	bl	8008e08 <USB_ReadDevAllInEpInterrupt>
 8004662:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004668:	e0b2      	b.n	80047d0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80a7 	beq.w	80047c4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f004 fbf9 	bl	8008e78 <USB_ReadDevInEPInterrupt>
 8004686:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d057      	beq.n	8004742 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	2201      	movs	r2, #1
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69f9      	ldr	r1, [r7, #28]
 80046ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b2:	4013      	ands	r3, r2
 80046b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	461a      	mov	r2, r3
 80046c4:	2301      	movs	r3, #1
 80046c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d132      	bne.n	8004736 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	3348      	adds	r3, #72	; 0x48
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4403      	add	r3, r0
 80046f0:	3344      	adds	r3, #68	; 0x44
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4419      	add	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fa:	4613      	mov	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4403      	add	r3, r0
 8004704:	3348      	adds	r3, #72	; 0x48
 8004706:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	2b00      	cmp	r3, #0
 800470c:	d113      	bne.n	8004736 <HAL_PCD_IRQHandler+0x31c>
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004712:	4613      	mov	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	3350      	adds	r3, #80	; 0x50
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d108      	bne.n	8004736 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800472e:	461a      	mov	r2, r3
 8004730:	2101      	movs	r1, #1
 8004732:	f004 fc01 	bl	8008f38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	b2db      	uxtb	r3, r3
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f006 fb4e 	bl	800adde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	461a      	mov	r2, r3
 800475a:	2308      	movs	r3, #8
 800475c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	461a      	mov	r2, r3
 8004776:	2310      	movs	r3, #16
 8004778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004790:	461a      	mov	r2, r3
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	461a      	mov	r2, r3
 80047ae:	2302      	movs	r3, #2
 80047b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fc1b 	bl	8004ffa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	3301      	adds	r3, #1
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	085b      	lsrs	r3, r3, #1
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f47f af49 	bne.w	800466a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f004 fae6 	bl	8008dae <USB_ReadInterrupts>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ec:	d122      	bne.n	8004834 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004808:	2b01      	cmp	r3, #1
 800480a:	d108      	bne.n	800481e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004814:	2100      	movs	r1, #0
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fe26 	bl	8005468 <HAL_PCDEx_LPM_Callback>
 800481c:	e002      	b.n	8004824 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f006 fb4a 	bl	800aeb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f004 fab8 	bl	8008dae <USB_ReadInterrupts>
 800483e:	4603      	mov	r3, r0
 8004840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004848:	d112      	bne.n	8004870 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b01      	cmp	r3, #1
 8004858:	d102      	bne.n	8004860 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f006 fb06 	bl	800ae6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800486e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f004 fa9a 	bl	8008dae <USB_ReadInterrupts>
 800487a:	4603      	mov	r3, r0
 800487c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004884:	f040 80c7 	bne.w	8004a16 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2110      	movs	r1, #16
 80048a2:	4618      	mov	r0, r3
 80048a4:	f003 fb68 	bl	8007f78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048a8:	2300      	movs	r3, #0
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ac:	e056      	b.n	800495c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	461a      	mov	r2, r3
 80048bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d2:	0151      	lsls	r1, r2, #5
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	440a      	add	r2, r1
 80048d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048e0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004900:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490e:	461a      	mov	r2, r3
 8004910:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004914:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004926:	0151      	lsls	r1, r2, #5
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	440a      	add	r2, r1
 800492c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004930:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004934:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004950:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004954:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	3301      	adds	r3, #1
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004962:	429a      	cmp	r2, r3
 8004964:	d3a3      	bcc.n	80048ae <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004974:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004978:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004992:	f043 030b 	orr.w	r3, r3, #11
 8004996:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a8:	f043 030b 	orr.w	r3, r3, #11
 80049ac:	6453      	str	r3, [r2, #68]	; 0x44
 80049ae:	e015      	b.n	80049dc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80049c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d6:	f043 030b 	orr.w	r3, r3, #11
 80049da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a00:	461a      	mov	r2, r3
 8004a02:	f004 fa99 	bl	8008f38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f004 f9c7 	bl	8008dae <USB_ReadInterrupts>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2a:	d124      	bne.n	8004a76 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f004 fa5d 	bl	8008ef0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f003 fafd 	bl	800803a <USB_GetDevSpeed>
 8004a40:	4603      	mov	r3, r0
 8004a42:	461a      	mov	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681c      	ldr	r4, [r3, #0]
 8004a4c:	f001 f93a 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8004a50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f003 f83a 	bl	8007ad4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f006 f9e4 	bl	800ae2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f004 f997 	bl	8008dae <USB_ReadInterrupts>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d10a      	bne.n	8004aa0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f006 f9c1 	bl	800ae12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695a      	ldr	r2, [r3, #20]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f002 0208 	and.w	r2, r2, #8
 8004a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f004 f982 	bl	8008dae <USB_ReadInterrupts>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab4:	d10f      	bne.n	8004ad6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f006 fa19 	bl	800aef8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f004 f967 	bl	8008dae <USB_ReadInterrupts>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aea:	d10f      	bne.n	8004b0c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f006 f9ec 	bl	800aed4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f004 f94c 	bl	8008dae <USB_ReadInterrupts>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b20:	d10a      	bne.n	8004b38 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f006 f9fa 	bl	800af1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695a      	ldr	r2, [r3, #20]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f004 f936 	bl	8008dae <USB_ReadInterrupts>
 8004b42:	4603      	mov	r3, r0
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d115      	bne.n	8004b78 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f006 f9ea 	bl	800af38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6859      	ldr	r1, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
 8004b74:	e000      	b.n	8004b78 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004b76:	bf00      	nop
    }
  }
}
 8004b78:	3734      	adds	r7, #52	; 0x34
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd90      	pop	{r4, r7, pc}

08004b7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_PCD_SetAddress+0x1a>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e013      	b.n	8004bc0 <HAL_PCD_SetAddress+0x42>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f004 f894 	bl	8008cde <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	70fb      	strb	r3, [r7, #3]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	803b      	strh	r3, [r7, #0]
 8004bde:	4613      	mov	r3, r2
 8004be0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	da0f      	bge.n	8004c0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	f003 020f 	and.w	r2, r3, #15
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	3338      	adds	r3, #56	; 0x38
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	3304      	adds	r3, #4
 8004c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	705a      	strb	r2, [r3, #1]
 8004c0c:	e00f      	b.n	8004c2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	f003 020f 	and.w	r2, r3, #15
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4413      	add	r3, r2
 8004c24:	3304      	adds	r3, #4
 8004c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c3a:	883a      	ldrh	r2, [r7, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	78ba      	ldrb	r2, [r7, #2]
 8004c44:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	785b      	ldrb	r3, [r3, #1]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c58:	78bb      	ldrb	r3, [r7, #2]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d102      	bne.n	8004c64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_PCD_EP_Open+0xaa>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e00e      	b.n	8004c90 <HAL_PCD_EP_Open+0xc8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f003 f9ff 	bl	8008084 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004c8e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da0f      	bge.n	8004ccc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	f003 020f 	and.w	r2, r3, #15
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	1a9b      	subs	r3, r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	3338      	adds	r3, #56	; 0x38
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	705a      	strb	r2, [r3, #1]
 8004cca:	e00f      	b.n	8004cec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	f003 020f 	and.w	r2, r3, #15
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_PCD_EP_Close+0x6e>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e00e      	b.n	8004d24 <HAL_PCD_EP_Close+0x8c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68f9      	ldr	r1, [r7, #12]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f003 fa3d 	bl	8008194 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d3c:	7afb      	ldrb	r3, [r7, #11]
 8004d3e:	f003 020f 	and.w	r2, r3, #15
 8004d42:	4613      	mov	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4413      	add	r3, r2
 8004d52:	3304      	adds	r3, #4
 8004d54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d6e:	7afb      	ldrb	r3, [r7, #11]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d102      	bne.n	8004d88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d88:	7afb      	ldrb	r3, [r7, #11]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	f003 fd18 	bl	80087d4 <USB_EP0StartXfer>
 8004da4:	e008      	b.n	8004db8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	6979      	ldr	r1, [r7, #20]
 8004db4:	f003 faca 	bl	800834c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	460b      	mov	r3, r1
 8004dcc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	f003 020f 	and.w	r2, r3, #15
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	1a9b      	subs	r3, r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004de4:	681b      	ldr	r3, [r3, #0]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e02:	7afb      	ldrb	r3, [r7, #11]
 8004e04:	f003 020f 	and.w	r2, r3, #15
 8004e08:	4613      	mov	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	3338      	adds	r3, #56	; 0x38
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	3304      	adds	r3, #4
 8004e18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e32:	7afb      	ldrb	r3, [r7, #11]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d102      	bne.n	8004e4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e4c:	7afb      	ldrb	r3, [r7, #11]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	6979      	ldr	r1, [r7, #20]
 8004e64:	f003 fcb6 	bl	80087d4 <USB_EP0StartXfer>
 8004e68:	e008      	b.n	8004e7c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	6979      	ldr	r1, [r7, #20]
 8004e78:	f003 fa68 	bl	800834c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	f003 020f 	and.w	r2, r3, #15
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d901      	bls.n	8004ea4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e050      	b.n	8004f46 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da0f      	bge.n	8004ecc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	f003 020f 	and.w	r2, r3, #15
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	3338      	adds	r3, #56	; 0x38
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	705a      	strb	r2, [r3, #1]
 8004eca:	e00d      	b.n	8004ee8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ecc:	78fa      	ldrb	r2, [r7, #3]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	3304      	adds	r3, #4
 8004ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_PCD_EP_SetStall+0x82>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e01e      	b.n	8004f46 <HAL_PCD_EP_SetStall+0xc0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68f9      	ldr	r1, [r7, #12]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f003 fe0d 	bl	8008b36 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	b2d9      	uxtb	r1, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f36:	461a      	mov	r2, r3
 8004f38:	f003 fffe 	bl	8008f38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	f003 020f 	and.w	r2, r3, #15
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d901      	bls.n	8004f6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e042      	b.n	8004ff2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	da0f      	bge.n	8004f94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	f003 020f 	and.w	r2, r3, #15
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	3338      	adds	r3, #56	; 0x38
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	4413      	add	r3, r2
 8004f88:	3304      	adds	r3, #4
 8004f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	705a      	strb	r2, [r3, #1]
 8004f92:	e00f      	b.n	8004fb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	f003 020f 	and.w	r2, r3, #15
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	4413      	add	r3, r2
 8004faa:	3304      	adds	r3, #4
 8004fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_PCD_EP_ClrStall+0x86>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e00e      	b.n	8004ff2 <HAL_PCD_EP_ClrStall+0xa4>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68f9      	ldr	r1, [r7, #12]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f003 fe15 	bl	8008c12 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b08a      	sub	sp, #40	; 0x28
 8004ffe:	af02      	add	r7, sp, #8
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	3338      	adds	r3, #56	; 0x38
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	3304      	adds	r3, #4
 8005020:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	429a      	cmp	r2, r3
 800502c:	d901      	bls.n	8005032 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e06c      	b.n	800510c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	429a      	cmp	r2, r3
 8005046:	d902      	bls.n	800504e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3303      	adds	r3, #3
 8005052:	089b      	lsrs	r3, r3, #2
 8005054:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005056:	e02b      	b.n	80050b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	429a      	cmp	r2, r3
 800506c:	d902      	bls.n	8005074 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3303      	adds	r3, #3
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68d9      	ldr	r1, [r3, #12]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800508c:	b2db      	uxtb	r3, r3
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	4603      	mov	r3, r0
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f003 fcf1 	bl	8008a7a <USB_WritePacket>

    ep->xfer_buff  += len;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	441a      	add	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	441a      	add	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d809      	bhi.n	80050da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d203      	bcs.n	80050da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1be      	bne.n	8005058 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d811      	bhi.n	800510a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	2201      	movs	r2, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	43db      	mvns	r3, r3
 8005100:	6939      	ldr	r1, [r7, #16]
 8005102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005106:	4013      	ands	r3, r2
 8005108:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3720      	adds	r7, #32
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	333c      	adds	r3, #60	; 0x3c
 800512c:	3304      	adds	r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b01      	cmp	r3, #1
 8005148:	f040 80a0 	bne.w	800528c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d015      	beq.n	8005182 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a72      	ldr	r2, [pc, #456]	; (8005324 <PCD_EP_OutXfrComplete_int+0x210>)
 800515a:	4293      	cmp	r3, r2
 800515c:	f240 80dd 	bls.w	800531a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80d7 	beq.w	800531a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005178:	461a      	mov	r2, r3
 800517a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517e:	6093      	str	r3, [r2, #8]
 8005180:	e0cb      	b.n	800531a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d009      	beq.n	80051a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	461a      	mov	r2, r3
 800519a:	2320      	movs	r3, #32
 800519c:	6093      	str	r3, [r2, #8]
 800519e:	e0bc      	b.n	800531a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f040 80b7 	bne.w	800531a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a5d      	ldr	r2, [pc, #372]	; (8005324 <PCD_EP_OutXfrComplete_int+0x210>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d90f      	bls.n	80051d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	461a      	mov	r2, r3
 80051cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d0:	6093      	str	r3, [r2, #8]
 80051d2:	e0a2      	b.n	800531a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80051e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	0159      	lsls	r1, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	440b      	add	r3, r1
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80051fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4403      	add	r3, r0
 800520a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800520e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4403      	add	r3, r0
 8005232:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4419      	add	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4403      	add	r3, r0
 8005248:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800524c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d114      	bne.n	800527e <PCD_EP_OutXfrComplete_int+0x16a>
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d108      	bne.n	800527e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005276:	461a      	mov	r2, r3
 8005278:	2101      	movs	r1, #1
 800527a:	f003 fe5d 	bl	8008f38 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	4619      	mov	r1, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f005 fd8f 	bl	800ada8 <HAL_PCD_DataOutStageCallback>
 800528a:	e046      	b.n	800531a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a26      	ldr	r2, [pc, #152]	; (8005328 <PCD_EP_OutXfrComplete_int+0x214>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d124      	bne.n	80052de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	461a      	mov	r2, r3
 80052ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b0:	6093      	str	r3, [r2, #8]
 80052b2:	e032      	b.n	800531a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	461a      	mov	r2, r3
 80052cc:	2320      	movs	r3, #32
 80052ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f005 fd66 	bl	800ada8 <HAL_PCD_DataOutStageCallback>
 80052dc:	e01d      	b.n	800531a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d114      	bne.n	800530e <PCD_EP_OutXfrComplete_int+0x1fa>
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d108      	bne.n	800530e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005306:	461a      	mov	r2, r3
 8005308:	2100      	movs	r1, #0
 800530a:	f003 fe15 	bl	8008f38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f005 fd47 	bl	800ada8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	4f54300a 	.word	0x4f54300a
 8005328:	4f54310a 	.word	0x4f54310a

0800532c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	333c      	adds	r3, #60	; 0x3c
 8005344:	3304      	adds	r3, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d90e      	bls.n	8005380 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	461a      	mov	r2, r3
 800537a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f005 fcff 	bl	800ad84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d90c      	bls.n	80053a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d108      	bne.n	80053a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053a0:	461a      	mov	r2, r3
 80053a2:	2101      	movs	r1, #1
 80053a4:	f003 fdc8 	bl	8008f38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	4f54300a 	.word	0x4f54300a

080053b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	70fb      	strb	r3, [r7, #3]
 80053c4:	4613      	mov	r3, r2
 80053c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d107      	bne.n	80053e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80053d6:	883b      	ldrh	r3, [r7, #0]
 80053d8:	0419      	lsls	r1, r3, #16
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28
 80053e4:	e028      	b.n	8005438 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	0c1b      	lsrs	r3, r3, #16
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	4413      	add	r3, r2
 80053f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80053f4:	2300      	movs	r3, #0
 80053f6:	73fb      	strb	r3, [r7, #15]
 80053f8:	e00d      	b.n	8005416 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	3340      	adds	r3, #64	; 0x40
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4413      	add	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	3301      	adds	r3, #1
 8005414:	73fb      	strb	r3, [r7, #15]
 8005416:	7bfa      	ldrb	r2, [r7, #15]
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	3b01      	subs	r3, #1
 800541c:	429a      	cmp	r2, r3
 800541e:	d3ec      	bcc.n	80053fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005420:	883b      	ldrh	r3, [r7, #0]
 8005422:	0418      	lsls	r0, r3, #16
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6819      	ldr	r1, [r3, #0]
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	3b01      	subs	r3, #1
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	4302      	orrs	r2, r0
 8005430:	3340      	adds	r3, #64	; 0x40
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	887a      	ldrh	r2, [r7, #2]
 8005458:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d005      	beq.n	800549c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005490:	f000 f808 	bl	80054a4 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005494:	4b02      	ldr	r3, [pc, #8]	; (80054a0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005496:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800549a:	615a      	str	r2, [r3, #20]
  }
}
 800549c:	bf00      	nop
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40013c00 	.word	0x40013c00

080054a4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e25b      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d075      	beq.n	80055be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054d2:	4ba3      	ldr	r3, [pc, #652]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d00c      	beq.n	80054f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054de:	4ba0      	ldr	r3, [pc, #640]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d112      	bne.n	8005510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ea:	4b9d      	ldr	r3, [pc, #628]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f6:	d10b      	bne.n	8005510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	4b99      	ldr	r3, [pc, #612]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d05b      	beq.n	80055bc <HAL_RCC_OscConfig+0x108>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d157      	bne.n	80055bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e236      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005518:	d106      	bne.n	8005528 <HAL_RCC_OscConfig+0x74>
 800551a:	4b91      	ldr	r3, [pc, #580]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a90      	ldr	r2, [pc, #576]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e01d      	b.n	8005564 <HAL_RCC_OscConfig+0xb0>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005530:	d10c      	bne.n	800554c <HAL_RCC_OscConfig+0x98>
 8005532:	4b8b      	ldr	r3, [pc, #556]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a8a      	ldr	r2, [pc, #552]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	4b88      	ldr	r3, [pc, #544]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a87      	ldr	r2, [pc, #540]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e00b      	b.n	8005564 <HAL_RCC_OscConfig+0xb0>
 800554c:	4b84      	ldr	r3, [pc, #528]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a83      	ldr	r2, [pc, #524]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	4b81      	ldr	r3, [pc, #516]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a80      	ldr	r2, [pc, #512]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 800555e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d013      	beq.n	8005594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fd fc2e 	bl	8002dcc <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005574:	f7fd fc2a 	bl	8002dcc <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	; 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e1fb      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005586:	4b76      	ldr	r3, [pc, #472]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0xc0>
 8005592:	e014      	b.n	80055be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005594:	f7fd fc1a 	bl	8002dcc <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800559c:	f7fd fc16 	bl	8002dcc <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b64      	cmp	r3, #100	; 0x64
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e1e7      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ae:	4b6c      	ldr	r3, [pc, #432]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0xe8>
 80055ba:	e000      	b.n	80055be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d063      	beq.n	8005692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ca:	4b65      	ldr	r3, [pc, #404]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 030c 	and.w	r3, r3, #12
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055d6:	4b62      	ldr	r3, [pc, #392]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d11c      	bne.n	800561c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055e2:	4b5f      	ldr	r3, [pc, #380]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d116      	bne.n	800561c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ee:	4b5c      	ldr	r3, [pc, #368]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <HAL_RCC_OscConfig+0x152>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d001      	beq.n	8005606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e1bb      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005606:	4b56      	ldr	r3, [pc, #344]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4952      	ldr	r1, [pc, #328]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005616:	4313      	orrs	r3, r2
 8005618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800561a:	e03a      	b.n	8005692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d020      	beq.n	8005666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005624:	4b4f      	ldr	r3, [pc, #316]	; (8005764 <HAL_RCC_OscConfig+0x2b0>)
 8005626:	2201      	movs	r2, #1
 8005628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562a:	f7fd fbcf 	bl	8002dcc <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005632:	f7fd fbcb 	bl	8002dcc <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e19c      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005644:	4b46      	ldr	r3, [pc, #280]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005650:	4b43      	ldr	r3, [pc, #268]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4940      	ldr	r1, [pc, #256]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005660:	4313      	orrs	r3, r2
 8005662:	600b      	str	r3, [r1, #0]
 8005664:	e015      	b.n	8005692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005666:	4b3f      	ldr	r3, [pc, #252]	; (8005764 <HAL_RCC_OscConfig+0x2b0>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566c:	f7fd fbae 	bl	8002dcc <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005674:	f7fd fbaa 	bl	8002dcc <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e17b      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005686:	4b36      	ldr	r3, [pc, #216]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d030      	beq.n	8005700 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d016      	beq.n	80056d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a6:	4b30      	ldr	r3, [pc, #192]	; (8005768 <HAL_RCC_OscConfig+0x2b4>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fd fb8e 	bl	8002dcc <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b4:	f7fd fb8a 	bl	8002dcc <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e15b      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c6:	4b26      	ldr	r3, [pc, #152]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x200>
 80056d2:	e015      	b.n	8005700 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d4:	4b24      	ldr	r3, [pc, #144]	; (8005768 <HAL_RCC_OscConfig+0x2b4>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056da:	f7fd fb77 	bl	8002dcc <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e2:	f7fd fb73 	bl	8002dcc <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e144      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f4:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 80056f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f0      	bne.n	80056e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80a0 	beq.w	800584e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005712:	4b13      	ldr	r3, [pc, #76]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10f      	bne.n	800573e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	4a0e      	ldr	r2, [pc, #56]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572c:	6413      	str	r3, [r2, #64]	; 0x40
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <HAL_RCC_OscConfig+0x2ac>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <HAL_RCC_OscConfig+0x2b8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d121      	bne.n	800578e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800574a:	4b08      	ldr	r3, [pc, #32]	; (800576c <HAL_RCC_OscConfig+0x2b8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a07      	ldr	r2, [pc, #28]	; (800576c <HAL_RCC_OscConfig+0x2b8>)
 8005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005756:	f7fd fb39 	bl	8002dcc <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575c:	e011      	b.n	8005782 <HAL_RCC_OscConfig+0x2ce>
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800
 8005764:	42470000 	.word	0x42470000
 8005768:	42470e80 	.word	0x42470e80
 800576c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005770:	f7fd fb2c 	bl	8002dcc <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e0fd      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005782:	4b81      	ldr	r3, [pc, #516]	; (8005988 <HAL_RCC_OscConfig+0x4d4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d106      	bne.n	80057a4 <HAL_RCC_OscConfig+0x2f0>
 8005796:	4b7d      	ldr	r3, [pc, #500]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	4a7c      	ldr	r2, [pc, #496]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	6713      	str	r3, [r2, #112]	; 0x70
 80057a2:	e01c      	b.n	80057de <HAL_RCC_OscConfig+0x32a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b05      	cmp	r3, #5
 80057aa:	d10c      	bne.n	80057c6 <HAL_RCC_OscConfig+0x312>
 80057ac:	4b77      	ldr	r3, [pc, #476]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	4a76      	ldr	r2, [pc, #472]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 80057b2:	f043 0304 	orr.w	r3, r3, #4
 80057b6:	6713      	str	r3, [r2, #112]	; 0x70
 80057b8:	4b74      	ldr	r3, [pc, #464]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	4a73      	ldr	r2, [pc, #460]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6713      	str	r3, [r2, #112]	; 0x70
 80057c4:	e00b      	b.n	80057de <HAL_RCC_OscConfig+0x32a>
 80057c6:	4b71      	ldr	r3, [pc, #452]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	4a70      	ldr	r2, [pc, #448]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	6713      	str	r3, [r2, #112]	; 0x70
 80057d2:	4b6e      	ldr	r3, [pc, #440]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	4a6d      	ldr	r2, [pc, #436]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 80057d8:	f023 0304 	bic.w	r3, r3, #4
 80057dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d015      	beq.n	8005812 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fd faf1 	bl	8002dcc <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ec:	e00a      	b.n	8005804 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ee:	f7fd faed 	bl	8002dcc <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e0bc      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005804:	4b61      	ldr	r3, [pc, #388]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ee      	beq.n	80057ee <HAL_RCC_OscConfig+0x33a>
 8005810:	e014      	b.n	800583c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005812:	f7fd fadb 	bl	8002dcc <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005818:	e00a      	b.n	8005830 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581a:	f7fd fad7 	bl	8002dcc <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	f241 3288 	movw	r2, #5000	; 0x1388
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e0a6      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005830:	4b56      	ldr	r3, [pc, #344]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ee      	bne.n	800581a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800583c:	7dfb      	ldrb	r3, [r7, #23]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d105      	bne.n	800584e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005842:	4b52      	ldr	r3, [pc, #328]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	4a51      	ldr	r2, [pc, #324]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 8005848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800584c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8092 	beq.w	800597c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005858:	4b4c      	ldr	r3, [pc, #304]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 030c 	and.w	r3, r3, #12
 8005860:	2b08      	cmp	r3, #8
 8005862:	d05c      	beq.n	800591e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d141      	bne.n	80058f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586c:	4b48      	ldr	r3, [pc, #288]	; (8005990 <HAL_RCC_OscConfig+0x4dc>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005872:	f7fd faab 	bl	8002dcc <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587a:	f7fd faa7 	bl	8002dcc <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e078      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588c:	4b3f      	ldr	r3, [pc, #252]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f0      	bne.n	800587a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	019b      	lsls	r3, r3, #6
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	3b01      	subs	r3, #1
 80058b2:	041b      	lsls	r3, r3, #16
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	4933      	ldr	r1, [pc, #204]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058c2:	4b33      	ldr	r3, [pc, #204]	; (8005990 <HAL_RCC_OscConfig+0x4dc>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fd fa80 	bl	8002dcc <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fd fa7c 	bl	8002dcc <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e04d      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e2:	4b2a      	ldr	r3, [pc, #168]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0x41c>
 80058ee:	e045      	b.n	800597c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f0:	4b27      	ldr	r3, [pc, #156]	; (8005990 <HAL_RCC_OscConfig+0x4dc>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fd fa69 	bl	8002dcc <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fe:	f7fd fa65 	bl	8002dcc <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e036      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005910:	4b1e      	ldr	r3, [pc, #120]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f0      	bne.n	80058fe <HAL_RCC_OscConfig+0x44a>
 800591c:	e02e      	b.n	800597c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e029      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800592a:	4b18      	ldr	r3, [pc, #96]	; (800598c <HAL_RCC_OscConfig+0x4d8>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	429a      	cmp	r2, r3
 800593c:	d11c      	bne.n	8005978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005948:	429a      	cmp	r2, r3
 800594a:	d115      	bne.n	8005978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005952:	4013      	ands	r3, r2
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005958:	4293      	cmp	r3, r2
 800595a:	d10d      	bne.n	8005978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d106      	bne.n	8005978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40007000 	.word	0x40007000
 800598c:	40023800 	.word	0x40023800
 8005990:	42470060 	.word	0x42470060

08005994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0cc      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a8:	4b68      	ldr	r3, [pc, #416]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d90c      	bls.n	80059d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b65      	ldr	r3, [pc, #404]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b63      	ldr	r3, [pc, #396]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0b8      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d020      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059e8:	4b59      	ldr	r3, [pc, #356]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4a58      	ldr	r2, [pc, #352]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a00:	4b53      	ldr	r3, [pc, #332]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4a52      	ldr	r2, [pc, #328]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a0c:	4b50      	ldr	r3, [pc, #320]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	494d      	ldr	r1, [pc, #308]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d044      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d107      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a32:	4b47      	ldr	r3, [pc, #284]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d119      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e07f      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d003      	beq.n	8005a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d107      	bne.n	8005a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a52:	4b3f      	ldr	r3, [pc, #252]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e06f      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a62:	4b3b      	ldr	r3, [pc, #236]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e067      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a72:	4b37      	ldr	r3, [pc, #220]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f023 0203 	bic.w	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4934      	ldr	r1, [pc, #208]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a84:	f7fd f9a2 	bl	8002dcc <HAL_GetTick>
 8005a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8a:	e00a      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8c:	f7fd f99e 	bl	8002dcc <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e04f      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa2:	4b2b      	ldr	r3, [pc, #172]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 020c 	and.w	r2, r3, #12
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d1eb      	bne.n	8005a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ab4:	4b25      	ldr	r3, [pc, #148]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d20c      	bcs.n	8005adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac2:	4b22      	ldr	r3, [pc, #136]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <HAL_RCC_ClockConfig+0x1b8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e032      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ae8:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4916      	ldr	r1, [pc, #88]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b06:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	490e      	ldr	r1, [pc, #56]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b1a:	f000 f821 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 8005b1e:	4601      	mov	r1, r0
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_RCC_ClockConfig+0x1bc>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	091b      	lsrs	r3, r3, #4
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	4a0a      	ldr	r2, [pc, #40]	; (8005b54 <HAL_RCC_ClockConfig+0x1c0>)
 8005b2c:	5cd3      	ldrb	r3, [r2, r3]
 8005b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b32:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <HAL_RCC_ClockConfig+0x1c8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fd f902 	bl	8002d44 <HAL_InitTick>

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40023c00 	.word	0x40023c00
 8005b50:	40023800 	.word	0x40023800
 8005b54:	08012d94 	.word	0x08012d94
 8005b58:	2000006c 	.word	0x2000006c
 8005b5c:	20000070 	.word	0x20000070

08005b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b76:	4b50      	ldr	r3, [pc, #320]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d007      	beq.n	8005b92 <HAL_RCC_GetSysClockFreq+0x32>
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d008      	beq.n	8005b98 <HAL_RCC_GetSysClockFreq+0x38>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f040 808d 	bne.w	8005ca6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b8c:	4b4b      	ldr	r3, [pc, #300]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8005b8e:	60bb      	str	r3, [r7, #8]
       break;
 8005b90:	e08c      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b92:	4b4b      	ldr	r3, [pc, #300]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b94:	60bb      	str	r3, [r7, #8]
      break;
 8005b96:	e089      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b98:	4b47      	ldr	r3, [pc, #284]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ba2:	4b45      	ldr	r3, [pc, #276]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d023      	beq.n	8005bf6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bae:	4b42      	ldr	r3, [pc, #264]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	099b      	lsrs	r3, r3, #6
 8005bb4:	f04f 0400 	mov.w	r4, #0
 8005bb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	ea03 0501 	and.w	r5, r3, r1
 8005bc4:	ea04 0602 	and.w	r6, r4, r2
 8005bc8:	4a3d      	ldr	r2, [pc, #244]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005bca:	fb02 f106 	mul.w	r1, r2, r6
 8005bce:	2200      	movs	r2, #0
 8005bd0:	fb02 f205 	mul.w	r2, r2, r5
 8005bd4:	440a      	add	r2, r1
 8005bd6:	493a      	ldr	r1, [pc, #232]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005bd8:	fba5 0101 	umull	r0, r1, r5, r1
 8005bdc:	1853      	adds	r3, r2, r1
 8005bde:	4619      	mov	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f04f 0400 	mov.w	r4, #0
 8005be6:	461a      	mov	r2, r3
 8005be8:	4623      	mov	r3, r4
 8005bea:	f7fb f855 	bl	8000c98 <__aeabi_uldivmod>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e049      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf6:	4b30      	ldr	r3, [pc, #192]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	099b      	lsrs	r3, r3, #6
 8005bfc:	f04f 0400 	mov.w	r4, #0
 8005c00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	ea03 0501 	and.w	r5, r3, r1
 8005c0c:	ea04 0602 	and.w	r6, r4, r2
 8005c10:	4629      	mov	r1, r5
 8005c12:	4632      	mov	r2, r6
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	f04f 0400 	mov.w	r4, #0
 8005c1c:	0154      	lsls	r4, r2, #5
 8005c1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c22:	014b      	lsls	r3, r1, #5
 8005c24:	4619      	mov	r1, r3
 8005c26:	4622      	mov	r2, r4
 8005c28:	1b49      	subs	r1, r1, r5
 8005c2a:	eb62 0206 	sbc.w	r2, r2, r6
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	f04f 0400 	mov.w	r4, #0
 8005c36:	0194      	lsls	r4, r2, #6
 8005c38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c3c:	018b      	lsls	r3, r1, #6
 8005c3e:	1a5b      	subs	r3, r3, r1
 8005c40:	eb64 0402 	sbc.w	r4, r4, r2
 8005c44:	f04f 0100 	mov.w	r1, #0
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	00e2      	lsls	r2, r4, #3
 8005c4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c52:	00d9      	lsls	r1, r3, #3
 8005c54:	460b      	mov	r3, r1
 8005c56:	4614      	mov	r4, r2
 8005c58:	195b      	adds	r3, r3, r5
 8005c5a:	eb44 0406 	adc.w	r4, r4, r6
 8005c5e:	f04f 0100 	mov.w	r1, #0
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	02a2      	lsls	r2, r4, #10
 8005c68:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005c6c:	0299      	lsls	r1, r3, #10
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4614      	mov	r4, r2
 8005c72:	4618      	mov	r0, r3
 8005c74:	4621      	mov	r1, r4
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f04f 0400 	mov.w	r4, #0
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4623      	mov	r3, r4
 8005c80:	f7fb f80a 	bl	8000c98 <__aeabi_uldivmod>
 8005c84:	4603      	mov	r3, r0
 8005c86:	460c      	mov	r4, r1
 8005c88:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c8a:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	0c1b      	lsrs	r3, r3, #16
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	3301      	adds	r3, #1
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca2:	60bb      	str	r3, [r7, #8]
      break;
 8005ca4:	e002      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ca8:	60bb      	str	r3, [r7, #8]
      break;
 8005caa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cac:	68bb      	ldr	r3, [r7, #8]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	00f42400 	.word	0x00f42400
 8005cc0:	017d7840 	.word	0x017d7840

08005cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc8:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cca:	681b      	ldr	r3, [r3, #0]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	2000006c 	.word	0x2000006c

08005cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ce0:	f7ff fff0 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8005ce4:	4601      	mov	r1, r0
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	0a9b      	lsrs	r3, r3, #10
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	4a03      	ldr	r2, [pc, #12]	; (8005d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cf2:	5cd3      	ldrb	r3, [r2, r3]
 8005cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	08012da4 	.word	0x08012da4

08005d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d08:	f7ff ffdc 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8005d0c:	4601      	mov	r1, r0
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	0b5b      	lsrs	r3, r3, #13
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	4a03      	ldr	r2, [pc, #12]	; (8005d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d1a:	5cd3      	ldrb	r3, [r2, r3]
 8005d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40023800 	.word	0x40023800
 8005d28:	08012da4 	.word	0x08012da4

08005d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e01d      	b.n	8005d7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fc fdd0 	bl	80028f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 fc0c 	bl	8006588 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0201 	orr.w	r2, r2, #1
 8005d98:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b06      	cmp	r3, #6
 8005daa:	d007      	beq.n	8005dbc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e01d      	b.n	8005e18 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f815 	bl	8005e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3304      	adds	r3, #4
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f000 fbbd 	bl	8006588 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2201      	movs	r2, #1
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fe44 	bl	8006ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a10      	ldr	r2, [pc, #64]	; (8005e94 <HAL_TIM_PWM_Start+0x60>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d107      	bne.n	8005e66 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b06      	cmp	r3, #6
 8005e76:	d007      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000

08005e98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e083      	b.n	8005fb4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d106      	bne.n	8005ec6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7fc fd5f 	bl	8002984 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005edc:	f023 0307 	bic.w	r3, r3, #7
 8005ee0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f000 fb4b 	bl	8006588 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1a:	f023 0303 	bic.w	r3, r3, #3
 8005f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f38:	f023 030c 	bic.w	r3, r3, #12
 8005f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	4313      	orrs	r3, r2
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	011a      	lsls	r2, r3, #4
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	031b      	lsls	r3, r3, #12
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_TIM_Encoder_Start+0x16>
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d008      	beq.n	8005fe2 <HAL_TIM_Encoder_Start+0x26>
 8005fd0:	e00f      	b.n	8005ff2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fd7a 	bl	8006ad4 <TIM_CCxChannelCmd>
      break;
 8005fe0:	e016      	b.n	8006010 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	2104      	movs	r1, #4
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fd72 	bl	8006ad4 <TIM_CCxChannelCmd>
      break;
 8005ff0:	e00e      	b.n	8006010 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fd6a 	bl	8006ad4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2201      	movs	r2, #1
 8006006:	2104      	movs	r1, #4
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fd63 	bl	8006ad4 <TIM_CCxChannelCmd>
      break;
 800600e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d122      	bne.n	8006086 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b02      	cmp	r3, #2
 800604c:	d11b      	bne.n	8006086 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f06f 0202 	mvn.w	r2, #2
 8006056:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fa6c 	bl	800654a <HAL_TIM_IC_CaptureCallback>
 8006072:	e005      	b.n	8006080 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa5e 	bl	8006536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa6f 	bl	800655e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b04      	cmp	r3, #4
 8006092:	d122      	bne.n	80060da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d11b      	bne.n	80060da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f06f 0204 	mvn.w	r2, #4
 80060aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fa42 	bl	800654a <HAL_TIM_IC_CaptureCallback>
 80060c6:	e005      	b.n	80060d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fa34 	bl	8006536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fa45 	bl	800655e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d122      	bne.n	800612e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d11b      	bne.n	800612e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f06f 0208 	mvn.w	r2, #8
 80060fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2204      	movs	r2, #4
 8006104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fa18 	bl	800654a <HAL_TIM_IC_CaptureCallback>
 800611a:	e005      	b.n	8006128 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fa0a 	bl	8006536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa1b 	bl	800655e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b10      	cmp	r3, #16
 800613a:	d122      	bne.n	8006182 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	2b10      	cmp	r3, #16
 8006148:	d11b      	bne.n	8006182 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f06f 0210 	mvn.w	r2, #16
 8006152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2208      	movs	r2, #8
 8006158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f9ee 	bl	800654a <HAL_TIM_IC_CaptureCallback>
 800616e:	e005      	b.n	800617c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f9e0 	bl	8006536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9f1 	bl	800655e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b01      	cmp	r3, #1
 800618e:	d10e      	bne.n	80061ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b01      	cmp	r3, #1
 800619c:	d107      	bne.n	80061ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f06f 0201 	mvn.w	r2, #1
 80061a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fb f88b 	bl	80012c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b80      	cmp	r3, #128	; 0x80
 80061ba:	d10e      	bne.n	80061da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c6:	2b80      	cmp	r3, #128	; 0x80
 80061c8:	d107      	bne.n	80061da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fd97 	bl	8006d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d10e      	bne.n	8006206 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d107      	bne.n	8006206 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f9b6 	bl	8006572 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d10e      	bne.n	8006232 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b20      	cmp	r3, #32
 8006220:	d107      	bne.n	8006232 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f06f 0220 	mvn.w	r2, #32
 800622a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fd61 	bl	8006cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006252:	2302      	movs	r3, #2
 8006254:	e0b4      	b.n	80063c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b0c      	cmp	r3, #12
 800626a:	f200 809f 	bhi.w	80063ac <HAL_TIM_PWM_ConfigChannel+0x170>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	080062a9 	.word	0x080062a9
 8006278:	080063ad 	.word	0x080063ad
 800627c:	080063ad 	.word	0x080063ad
 8006280:	080063ad 	.word	0x080063ad
 8006284:	080062e9 	.word	0x080062e9
 8006288:	080063ad 	.word	0x080063ad
 800628c:	080063ad 	.word	0x080063ad
 8006290:	080063ad 	.word	0x080063ad
 8006294:	0800632b 	.word	0x0800632b
 8006298:	080063ad 	.word	0x080063ad
 800629c:	080063ad 	.word	0x080063ad
 80062a0:	080063ad 	.word	0x080063ad
 80062a4:	0800636b 	.word	0x0800636b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f9ea 	bl	8006688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0208 	orr.w	r2, r2, #8
 80062c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0204 	bic.w	r2, r2, #4
 80062d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6999      	ldr	r1, [r3, #24]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	619a      	str	r2, [r3, #24]
      break;
 80062e6:	e062      	b.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fa30 	bl	8006754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6999      	ldr	r1, [r3, #24]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	021a      	lsls	r2, r3, #8
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	619a      	str	r2, [r3, #24]
      break;
 8006328:	e041      	b.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fa7b 	bl	800682c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0208 	orr.w	r2, r2, #8
 8006344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0204 	bic.w	r2, r2, #4
 8006354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69d9      	ldr	r1, [r3, #28]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	61da      	str	r2, [r3, #28]
      break;
 8006368:	e021      	b.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fac5 	bl	8006900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69d9      	ldr	r1, [r3, #28]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	021a      	lsls	r2, r3, #8
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	61da      	str	r2, [r3, #28]
      break;
 80063aa:	e000      	b.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80063ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_TIM_ConfigClockSource+0x18>
 80063dc:	2302      	movs	r3, #2
 80063de:	e0a6      	b.n	800652e <HAL_TIM_ConfigClockSource+0x166>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006406:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	d067      	beq.n	80064e8 <HAL_TIM_ConfigClockSource+0x120>
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	d80b      	bhi.n	8006434 <HAL_TIM_ConfigClockSource+0x6c>
 800641c:	2b10      	cmp	r3, #16
 800641e:	d073      	beq.n	8006508 <HAL_TIM_ConfigClockSource+0x140>
 8006420:	2b10      	cmp	r3, #16
 8006422:	d802      	bhi.n	800642a <HAL_TIM_ConfigClockSource+0x62>
 8006424:	2b00      	cmp	r3, #0
 8006426:	d06f      	beq.n	8006508 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006428:	e078      	b.n	800651c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800642a:	2b20      	cmp	r3, #32
 800642c:	d06c      	beq.n	8006508 <HAL_TIM_ConfigClockSource+0x140>
 800642e:	2b30      	cmp	r3, #48	; 0x30
 8006430:	d06a      	beq.n	8006508 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006432:	e073      	b.n	800651c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006434:	2b70      	cmp	r3, #112	; 0x70
 8006436:	d00d      	beq.n	8006454 <HAL_TIM_ConfigClockSource+0x8c>
 8006438:	2b70      	cmp	r3, #112	; 0x70
 800643a:	d804      	bhi.n	8006446 <HAL_TIM_ConfigClockSource+0x7e>
 800643c:	2b50      	cmp	r3, #80	; 0x50
 800643e:	d033      	beq.n	80064a8 <HAL_TIM_ConfigClockSource+0xe0>
 8006440:	2b60      	cmp	r3, #96	; 0x60
 8006442:	d041      	beq.n	80064c8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006444:	e06a      	b.n	800651c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644a:	d066      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x152>
 800644c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006450:	d017      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006452:	e063      	b.n	800651c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	6899      	ldr	r1, [r3, #8]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f000 fb16 	bl	8006a94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006476:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	609a      	str	r2, [r3, #8]
      break;
 8006480:	e04c      	b.n	800651c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6899      	ldr	r1, [r3, #8]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f000 faff 	bl	8006a94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a4:	609a      	str	r2, [r3, #8]
      break;
 80064a6:	e039      	b.n	800651c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	6859      	ldr	r1, [r3, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	461a      	mov	r2, r3
 80064b6:	f000 fa73 	bl	80069a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2150      	movs	r1, #80	; 0x50
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 facc 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 80064c6:	e029      	b.n	800651c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	6859      	ldr	r1, [r3, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	461a      	mov	r2, r3
 80064d6:	f000 fa92 	bl	80069fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2160      	movs	r1, #96	; 0x60
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fabc 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 80064e6:	e019      	b.n	800651c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	461a      	mov	r2, r3
 80064f6:	f000 fa53 	bl	80069a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2140      	movs	r1, #64	; 0x40
 8006500:	4618      	mov	r0, r3
 8006502:	f000 faac 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 8006506:	e009      	b.n	800651c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f000 faa3 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 8006518:	e000      	b.n	800651c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800651a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a34      	ldr	r2, [pc, #208]	; (800666c <TIM_Base_SetConfig+0xe4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00f      	beq.n	80065c0 <TIM_Base_SetConfig+0x38>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a6:	d00b      	beq.n	80065c0 <TIM_Base_SetConfig+0x38>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a31      	ldr	r2, [pc, #196]	; (8006670 <TIM_Base_SetConfig+0xe8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d007      	beq.n	80065c0 <TIM_Base_SetConfig+0x38>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a30      	ldr	r2, [pc, #192]	; (8006674 <TIM_Base_SetConfig+0xec>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_Base_SetConfig+0x38>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a2f      	ldr	r2, [pc, #188]	; (8006678 <TIM_Base_SetConfig+0xf0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d108      	bne.n	80065d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a25      	ldr	r2, [pc, #148]	; (800666c <TIM_Base_SetConfig+0xe4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d01b      	beq.n	8006612 <TIM_Base_SetConfig+0x8a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e0:	d017      	beq.n	8006612 <TIM_Base_SetConfig+0x8a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a22      	ldr	r2, [pc, #136]	; (8006670 <TIM_Base_SetConfig+0xe8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d013      	beq.n	8006612 <TIM_Base_SetConfig+0x8a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a21      	ldr	r2, [pc, #132]	; (8006674 <TIM_Base_SetConfig+0xec>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00f      	beq.n	8006612 <TIM_Base_SetConfig+0x8a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a20      	ldr	r2, [pc, #128]	; (8006678 <TIM_Base_SetConfig+0xf0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00b      	beq.n	8006612 <TIM_Base_SetConfig+0x8a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1f      	ldr	r2, [pc, #124]	; (800667c <TIM_Base_SetConfig+0xf4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d007      	beq.n	8006612 <TIM_Base_SetConfig+0x8a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1e      	ldr	r2, [pc, #120]	; (8006680 <TIM_Base_SetConfig+0xf8>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_Base_SetConfig+0x8a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1d      	ldr	r2, [pc, #116]	; (8006684 <TIM_Base_SetConfig+0xfc>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d108      	bne.n	8006624 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a08      	ldr	r2, [pc, #32]	; (800666c <TIM_Base_SetConfig+0xe4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d103      	bne.n	8006658 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	615a      	str	r2, [r3, #20]
}
 800665e:	bf00      	nop
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40010000 	.word	0x40010000
 8006670:	40000400 	.word	0x40000400
 8006674:	40000800 	.word	0x40000800
 8006678:	40000c00 	.word	0x40000c00
 800667c:	40014000 	.word	0x40014000
 8006680:	40014400 	.word	0x40014400
 8006684:	40014800 	.word	0x40014800

08006688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 0302 	bic.w	r3, r3, #2
 80066d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <TIM_OC1_SetConfig+0xc8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d10c      	bne.n	80066fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 0308 	bic.w	r3, r3, #8
 80066ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a13      	ldr	r2, [pc, #76]	; (8006750 <TIM_OC1_SetConfig+0xc8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d111      	bne.n	800672a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800670c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	621a      	str	r2, [r3, #32]
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40010000 	.word	0x40010000

08006754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f023 0210 	bic.w	r2, r3, #16
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800678a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0320 	bic.w	r3, r3, #32
 800679e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <TIM_OC2_SetConfig+0xd4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d10d      	bne.n	80067d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a15      	ldr	r2, [pc, #84]	; (8006828 <TIM_OC2_SetConfig+0xd4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d113      	bne.n	8006800 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000

0800682c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1d      	ldr	r2, [pc, #116]	; (80068fc <TIM_OC3_SetConfig+0xd0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d10d      	bne.n	80068a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a14      	ldr	r2, [pc, #80]	; (80068fc <TIM_OC3_SetConfig+0xd0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d113      	bne.n	80068d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	621a      	str	r2, [r3, #32]
}
 80068f0:	bf00      	nop
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	40010000 	.word	0x40010000

08006900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800694a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	031b      	lsls	r3, r3, #12
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a10      	ldr	r2, [pc, #64]	; (800699c <TIM_OC4_SetConfig+0x9c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d109      	bne.n	8006974 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	019b      	lsls	r3, r3, #6
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40010000 	.word	0x40010000

080069a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f023 0201 	bic.w	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 030a 	bic.w	r3, r3, #10
 80069dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b087      	sub	sp, #28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0210 	bic.w	r2, r3, #16
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	031b      	lsls	r3, r3, #12
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b085      	sub	sp, #20
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f043 0307 	orr.w	r3, r3, #7
 8006a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	021a      	lsls	r2, r3, #8
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	609a      	str	r2, [r3, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1a      	ldr	r2, [r3, #32]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	43db      	mvns	r3, r3
 8006af6:	401a      	ands	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a1a      	ldr	r2, [r3, #32]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	621a      	str	r2, [r3, #32]
}
 8006b12:	bf00      	nop
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f8f3 	bl	8006d1c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b06      	cmp	r3, #6
 8006b56:	d007      	beq.n	8006b68 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e050      	b.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1c      	ldr	r2, [pc, #112]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d018      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd8:	d013      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00e      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a16      	ldr	r2, [pc, #88]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a15      	ldr	r2, [pc, #84]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a13      	ldr	r2, [pc, #76]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d10c      	bne.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40010000 	.word	0x40010000
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40000c00 	.word	0x40000c00
 8006c4c:	40014000 	.word	0x40014000

08006c50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e03d      	b.n	8006ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2204      	movs	r2, #4
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1a      	ldr	r2, [r3, #32]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	401a      	ands	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	fa01 f303 	lsl.w	r3, r1, r3
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e03f      	b.n	8006df8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d106      	bne.n	8006d92 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7fb ff01 	bl	8002b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2224      	movs	r2, #36	; 0x24
 8006d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006da8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fab4 	bl	8007318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dbe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695a      	ldr	r2, [r3, #20]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dde:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d140      	bne.n	8006e9c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <HAL_UART_Receive_IT+0x26>
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e039      	b.n	8006e9e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_UART_Receive_IT+0x38>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e032      	b.n	8006e9e <HAL_UART_Receive_IT+0x9e>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	88fa      	ldrh	r2, [r7, #6]
 8006e4a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	88fa      	ldrh	r2, [r7, #6]
 8006e50:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2222      	movs	r2, #34	; 0x22
 8006e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e76:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	695a      	ldr	r2, [r3, #20]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0220 	orr.w	r2, r2, #32
 8006e96:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	e000      	b.n	8006e9e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006e9c:	2302      	movs	r3, #2
  }
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <HAL_UART_IRQHandler+0x52>
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f98c 	bl	8007214 <UART_Receive_IT>
      return;
 8006efc:	e0d1      	b.n	80070a2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80b0 	beq.w	8007066 <HAL_UART_IRQHandler+0x1ba>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <HAL_UART_IRQHandler+0x70>
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80a5 	beq.w	8007066 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <HAL_UART_IRQHandler+0x90>
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f34:	f043 0201 	orr.w	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <HAL_UART_IRQHandler+0xb0>
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f54:	f043 0202 	orr.w	r2, r3, #2
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <HAL_UART_IRQHandler+0xd0>
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	f043 0204 	orr.w	r2, r3, #4
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00f      	beq.n	8006fa6 <HAL_UART_IRQHandler+0xfa>
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	f003 0320 	and.w	r3, r3, #32
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <HAL_UART_IRQHandler+0xee>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9e:	f043 0208 	orr.w	r2, r3, #8
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d078      	beq.n	80070a0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x11c>
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f926 	bl	8007214 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <HAL_UART_IRQHandler+0x144>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d031      	beq.n	8007054 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f86f 	bl	80070d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d123      	bne.n	800704c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695a      	ldr	r2, [r3, #20]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007012:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	2b00      	cmp	r3, #0
 800701a:	d013      	beq.n	8007044 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007020:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <HAL_UART_IRQHandler+0x1fc>)
 8007022:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	4618      	mov	r0, r3
 800702a:	f7fc fc97 	bl	800395c <HAL_DMA_Abort_IT>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d016      	beq.n	8007062 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800703e:	4610      	mov	r0, r2
 8007040:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007042:	e00e      	b.n	8007062 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f83b 	bl	80070c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704a:	e00a      	b.n	8007062 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f837 	bl	80070c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007052:	e006      	b.n	8007062 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f833 	bl	80070c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007060:	e01e      	b.n	80070a0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007062:	bf00      	nop
    return;
 8007064:	e01c      	b.n	80070a0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <HAL_UART_IRQHandler+0x1d6>
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f85c 	bl	8007138 <UART_Transmit_IT>
    return;
 8007080:	e00f      	b.n	80070a2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <HAL_UART_IRQHandler+0x1f6>
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8a4 	bl	80071e4 <UART_EndTransmit_IT>
    return;
 800709c:	bf00      	nop
 800709e:	e000      	b.n	80070a2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80070a0:	bf00      	nop
  }
}
 80070a2:	3720      	adds	r7, #32
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	08007111 	.word	0x08007111

080070ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695a      	ldr	r2, [r3, #20]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff ffc8 	bl	80070c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b21      	cmp	r3, #33	; 0x21
 800714a:	d144      	bne.n	80071d6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007154:	d11a      	bne.n	800718c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800716a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d105      	bne.n	8007180 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	1c9a      	adds	r2, r3, #2
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	621a      	str	r2, [r3, #32]
 800717e:	e00e      	b.n	800719e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	621a      	str	r2, [r3, #32]
 800718a:	e008      	b.n	800719e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	1c59      	adds	r1, r3, #1
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6211      	str	r1, [r2, #32]
 8007196:	781a      	ldrb	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	4619      	mov	r1, r3
 80071ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10f      	bne.n	80071d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	e000      	b.n	80071d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80071d6:	2302      	movs	r3, #2
  }
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff ff51 	bl	80070ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b22      	cmp	r3, #34	; 0x22
 8007226:	d171      	bne.n	800730c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007230:	d123      	bne.n	800727a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10e      	bne.n	800725e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b29b      	uxth	r3, r3
 8007248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724c:	b29a      	uxth	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	1c9a      	adds	r2, r3, #2
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	629a      	str	r2, [r3, #40]	; 0x28
 800725c:	e029      	b.n	80072b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	b29b      	uxth	r3, r3
 8007266:	b2db      	uxtb	r3, r3
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	629a      	str	r2, [r3, #40]	; 0x28
 8007278:	e01b      	b.n	80072b2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6858      	ldr	r0, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	1c59      	adds	r1, r3, #1
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6291      	str	r1, [r2, #40]	; 0x28
 8007292:	b2c2      	uxtb	r2, r0
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e00c      	b.n	80072b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	1c58      	adds	r0, r3, #1
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	6288      	str	r0, [r1, #40]	; 0x28
 80072aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	4619      	mov	r1, r3
 80072c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d120      	bne.n	8007308 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0220 	bic.w	r2, r2, #32
 80072d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695a      	ldr	r2, [r3, #20]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0201 	bic.w	r2, r2, #1
 80072f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7f9 ffd6 	bl	80012b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	e002      	b.n	800730e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	e000      	b.n	800730e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800730c:	2302      	movs	r3, #2
  }
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800735a:	f023 030c 	bic.w	r3, r3, #12
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6812      	ldr	r2, [r2, #0]
 8007362:	68f9      	ldr	r1, [r7, #12]
 8007364:	430b      	orrs	r3, r1
 8007366:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007386:	f040 818b 	bne.w	80076a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4ac1      	ldr	r2, [pc, #772]	; (8007694 <UART_SetConfig+0x37c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d005      	beq.n	80073a0 <UART_SetConfig+0x88>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4abf      	ldr	r2, [pc, #764]	; (8007698 <UART_SetConfig+0x380>)
 800739a:	4293      	cmp	r3, r2
 800739c:	f040 80bd 	bne.w	800751a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073a0:	f7fe fcb0 	bl	8005d04 <HAL_RCC_GetPCLK2Freq>
 80073a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	461d      	mov	r5, r3
 80073aa:	f04f 0600 	mov.w	r6, #0
 80073ae:	46a8      	mov	r8, r5
 80073b0:	46b1      	mov	r9, r6
 80073b2:	eb18 0308 	adds.w	r3, r8, r8
 80073b6:	eb49 0409 	adc.w	r4, r9, r9
 80073ba:	4698      	mov	r8, r3
 80073bc:	46a1      	mov	r9, r4
 80073be:	eb18 0805 	adds.w	r8, r8, r5
 80073c2:	eb49 0906 	adc.w	r9, r9, r6
 80073c6:	f04f 0100 	mov.w	r1, #0
 80073ca:	f04f 0200 	mov.w	r2, #0
 80073ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80073d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80073da:	4688      	mov	r8, r1
 80073dc:	4691      	mov	r9, r2
 80073de:	eb18 0005 	adds.w	r0, r8, r5
 80073e2:	eb49 0106 	adc.w	r1, r9, r6
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	461d      	mov	r5, r3
 80073ec:	f04f 0600 	mov.w	r6, #0
 80073f0:	196b      	adds	r3, r5, r5
 80073f2:	eb46 0406 	adc.w	r4, r6, r6
 80073f6:	461a      	mov	r2, r3
 80073f8:	4623      	mov	r3, r4
 80073fa:	f7f9 fc4d 	bl	8000c98 <__aeabi_uldivmod>
 80073fe:	4603      	mov	r3, r0
 8007400:	460c      	mov	r4, r1
 8007402:	461a      	mov	r2, r3
 8007404:	4ba5      	ldr	r3, [pc, #660]	; (800769c <UART_SetConfig+0x384>)
 8007406:	fba3 2302 	umull	r2, r3, r3, r2
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	461d      	mov	r5, r3
 8007414:	f04f 0600 	mov.w	r6, #0
 8007418:	46a9      	mov	r9, r5
 800741a:	46b2      	mov	sl, r6
 800741c:	eb19 0309 	adds.w	r3, r9, r9
 8007420:	eb4a 040a 	adc.w	r4, sl, sl
 8007424:	4699      	mov	r9, r3
 8007426:	46a2      	mov	sl, r4
 8007428:	eb19 0905 	adds.w	r9, r9, r5
 800742c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007430:	f04f 0100 	mov.w	r1, #0
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800743c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007440:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007444:	4689      	mov	r9, r1
 8007446:	4692      	mov	sl, r2
 8007448:	eb19 0005 	adds.w	r0, r9, r5
 800744c:	eb4a 0106 	adc.w	r1, sl, r6
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	461d      	mov	r5, r3
 8007456:	f04f 0600 	mov.w	r6, #0
 800745a:	196b      	adds	r3, r5, r5
 800745c:	eb46 0406 	adc.w	r4, r6, r6
 8007460:	461a      	mov	r2, r3
 8007462:	4623      	mov	r3, r4
 8007464:	f7f9 fc18 	bl	8000c98 <__aeabi_uldivmod>
 8007468:	4603      	mov	r3, r0
 800746a:	460c      	mov	r4, r1
 800746c:	461a      	mov	r2, r3
 800746e:	4b8b      	ldr	r3, [pc, #556]	; (800769c <UART_SetConfig+0x384>)
 8007470:	fba3 1302 	umull	r1, r3, r3, r2
 8007474:	095b      	lsrs	r3, r3, #5
 8007476:	2164      	movs	r1, #100	; 0x64
 8007478:	fb01 f303 	mul.w	r3, r1, r3
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	3332      	adds	r3, #50	; 0x32
 8007482:	4a86      	ldr	r2, [pc, #536]	; (800769c <UART_SetConfig+0x384>)
 8007484:	fba2 2303 	umull	r2, r3, r2, r3
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007490:	4498      	add	r8, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	461d      	mov	r5, r3
 8007496:	f04f 0600 	mov.w	r6, #0
 800749a:	46a9      	mov	r9, r5
 800749c:	46b2      	mov	sl, r6
 800749e:	eb19 0309 	adds.w	r3, r9, r9
 80074a2:	eb4a 040a 	adc.w	r4, sl, sl
 80074a6:	4699      	mov	r9, r3
 80074a8:	46a2      	mov	sl, r4
 80074aa:	eb19 0905 	adds.w	r9, r9, r5
 80074ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80074b2:	f04f 0100 	mov.w	r1, #0
 80074b6:	f04f 0200 	mov.w	r2, #0
 80074ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074c6:	4689      	mov	r9, r1
 80074c8:	4692      	mov	sl, r2
 80074ca:	eb19 0005 	adds.w	r0, r9, r5
 80074ce:	eb4a 0106 	adc.w	r1, sl, r6
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	461d      	mov	r5, r3
 80074d8:	f04f 0600 	mov.w	r6, #0
 80074dc:	196b      	adds	r3, r5, r5
 80074de:	eb46 0406 	adc.w	r4, r6, r6
 80074e2:	461a      	mov	r2, r3
 80074e4:	4623      	mov	r3, r4
 80074e6:	f7f9 fbd7 	bl	8000c98 <__aeabi_uldivmod>
 80074ea:	4603      	mov	r3, r0
 80074ec:	460c      	mov	r4, r1
 80074ee:	461a      	mov	r2, r3
 80074f0:	4b6a      	ldr	r3, [pc, #424]	; (800769c <UART_SetConfig+0x384>)
 80074f2:	fba3 1302 	umull	r1, r3, r3, r2
 80074f6:	095b      	lsrs	r3, r3, #5
 80074f8:	2164      	movs	r1, #100	; 0x64
 80074fa:	fb01 f303 	mul.w	r3, r1, r3
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	3332      	adds	r3, #50	; 0x32
 8007504:	4a65      	ldr	r2, [pc, #404]	; (800769c <UART_SetConfig+0x384>)
 8007506:	fba2 2303 	umull	r2, r3, r2, r3
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	f003 0207 	and.w	r2, r3, #7
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4442      	add	r2, r8
 8007516:	609a      	str	r2, [r3, #8]
 8007518:	e26f      	b.n	80079fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800751a:	f7fe fbdf 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 800751e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	461d      	mov	r5, r3
 8007524:	f04f 0600 	mov.w	r6, #0
 8007528:	46a8      	mov	r8, r5
 800752a:	46b1      	mov	r9, r6
 800752c:	eb18 0308 	adds.w	r3, r8, r8
 8007530:	eb49 0409 	adc.w	r4, r9, r9
 8007534:	4698      	mov	r8, r3
 8007536:	46a1      	mov	r9, r4
 8007538:	eb18 0805 	adds.w	r8, r8, r5
 800753c:	eb49 0906 	adc.w	r9, r9, r6
 8007540:	f04f 0100 	mov.w	r1, #0
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800754c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007550:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007554:	4688      	mov	r8, r1
 8007556:	4691      	mov	r9, r2
 8007558:	eb18 0005 	adds.w	r0, r8, r5
 800755c:	eb49 0106 	adc.w	r1, r9, r6
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	461d      	mov	r5, r3
 8007566:	f04f 0600 	mov.w	r6, #0
 800756a:	196b      	adds	r3, r5, r5
 800756c:	eb46 0406 	adc.w	r4, r6, r6
 8007570:	461a      	mov	r2, r3
 8007572:	4623      	mov	r3, r4
 8007574:	f7f9 fb90 	bl	8000c98 <__aeabi_uldivmod>
 8007578:	4603      	mov	r3, r0
 800757a:	460c      	mov	r4, r1
 800757c:	461a      	mov	r2, r3
 800757e:	4b47      	ldr	r3, [pc, #284]	; (800769c <UART_SetConfig+0x384>)
 8007580:	fba3 2302 	umull	r2, r3, r3, r2
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	461d      	mov	r5, r3
 800758e:	f04f 0600 	mov.w	r6, #0
 8007592:	46a9      	mov	r9, r5
 8007594:	46b2      	mov	sl, r6
 8007596:	eb19 0309 	adds.w	r3, r9, r9
 800759a:	eb4a 040a 	adc.w	r4, sl, sl
 800759e:	4699      	mov	r9, r3
 80075a0:	46a2      	mov	sl, r4
 80075a2:	eb19 0905 	adds.w	r9, r9, r5
 80075a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80075aa:	f04f 0100 	mov.w	r1, #0
 80075ae:	f04f 0200 	mov.w	r2, #0
 80075b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075be:	4689      	mov	r9, r1
 80075c0:	4692      	mov	sl, r2
 80075c2:	eb19 0005 	adds.w	r0, r9, r5
 80075c6:	eb4a 0106 	adc.w	r1, sl, r6
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	461d      	mov	r5, r3
 80075d0:	f04f 0600 	mov.w	r6, #0
 80075d4:	196b      	adds	r3, r5, r5
 80075d6:	eb46 0406 	adc.w	r4, r6, r6
 80075da:	461a      	mov	r2, r3
 80075dc:	4623      	mov	r3, r4
 80075de:	f7f9 fb5b 	bl	8000c98 <__aeabi_uldivmod>
 80075e2:	4603      	mov	r3, r0
 80075e4:	460c      	mov	r4, r1
 80075e6:	461a      	mov	r2, r3
 80075e8:	4b2c      	ldr	r3, [pc, #176]	; (800769c <UART_SetConfig+0x384>)
 80075ea:	fba3 1302 	umull	r1, r3, r3, r2
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	2164      	movs	r1, #100	; 0x64
 80075f2:	fb01 f303 	mul.w	r3, r1, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	3332      	adds	r3, #50	; 0x32
 80075fc:	4a27      	ldr	r2, [pc, #156]	; (800769c <UART_SetConfig+0x384>)
 80075fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800760a:	4498      	add	r8, r3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	461d      	mov	r5, r3
 8007610:	f04f 0600 	mov.w	r6, #0
 8007614:	46a9      	mov	r9, r5
 8007616:	46b2      	mov	sl, r6
 8007618:	eb19 0309 	adds.w	r3, r9, r9
 800761c:	eb4a 040a 	adc.w	r4, sl, sl
 8007620:	4699      	mov	r9, r3
 8007622:	46a2      	mov	sl, r4
 8007624:	eb19 0905 	adds.w	r9, r9, r5
 8007628:	eb4a 0a06 	adc.w	sl, sl, r6
 800762c:	f04f 0100 	mov.w	r1, #0
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007638:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800763c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007640:	4689      	mov	r9, r1
 8007642:	4692      	mov	sl, r2
 8007644:	eb19 0005 	adds.w	r0, r9, r5
 8007648:	eb4a 0106 	adc.w	r1, sl, r6
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	461d      	mov	r5, r3
 8007652:	f04f 0600 	mov.w	r6, #0
 8007656:	196b      	adds	r3, r5, r5
 8007658:	eb46 0406 	adc.w	r4, r6, r6
 800765c:	461a      	mov	r2, r3
 800765e:	4623      	mov	r3, r4
 8007660:	f7f9 fb1a 	bl	8000c98 <__aeabi_uldivmod>
 8007664:	4603      	mov	r3, r0
 8007666:	460c      	mov	r4, r1
 8007668:	461a      	mov	r2, r3
 800766a:	4b0c      	ldr	r3, [pc, #48]	; (800769c <UART_SetConfig+0x384>)
 800766c:	fba3 1302 	umull	r1, r3, r3, r2
 8007670:	095b      	lsrs	r3, r3, #5
 8007672:	2164      	movs	r1, #100	; 0x64
 8007674:	fb01 f303 	mul.w	r3, r1, r3
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	3332      	adds	r3, #50	; 0x32
 800767e:	4a07      	ldr	r2, [pc, #28]	; (800769c <UART_SetConfig+0x384>)
 8007680:	fba2 2303 	umull	r2, r3, r2, r3
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	f003 0207 	and.w	r2, r3, #7
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4442      	add	r2, r8
 8007690:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007692:	e1b2      	b.n	80079fa <UART_SetConfig+0x6e2>
 8007694:	40011000 	.word	0x40011000
 8007698:	40011400 	.word	0x40011400
 800769c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4ad7      	ldr	r2, [pc, #860]	; (8007a04 <UART_SetConfig+0x6ec>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d005      	beq.n	80076b6 <UART_SetConfig+0x39e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4ad6      	ldr	r2, [pc, #856]	; (8007a08 <UART_SetConfig+0x6f0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	f040 80d1 	bne.w	8007858 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80076b6:	f7fe fb25 	bl	8005d04 <HAL_RCC_GetPCLK2Freq>
 80076ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	469a      	mov	sl, r3
 80076c0:	f04f 0b00 	mov.w	fp, #0
 80076c4:	46d0      	mov	r8, sl
 80076c6:	46d9      	mov	r9, fp
 80076c8:	eb18 0308 	adds.w	r3, r8, r8
 80076cc:	eb49 0409 	adc.w	r4, r9, r9
 80076d0:	4698      	mov	r8, r3
 80076d2:	46a1      	mov	r9, r4
 80076d4:	eb18 080a 	adds.w	r8, r8, sl
 80076d8:	eb49 090b 	adc.w	r9, r9, fp
 80076dc:	f04f 0100 	mov.w	r1, #0
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80076e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80076ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80076f0:	4688      	mov	r8, r1
 80076f2:	4691      	mov	r9, r2
 80076f4:	eb1a 0508 	adds.w	r5, sl, r8
 80076f8:	eb4b 0609 	adc.w	r6, fp, r9
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	4619      	mov	r1, r3
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	f04f 0400 	mov.w	r4, #0
 800770e:	0094      	lsls	r4, r2, #2
 8007710:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007714:	008b      	lsls	r3, r1, #2
 8007716:	461a      	mov	r2, r3
 8007718:	4623      	mov	r3, r4
 800771a:	4628      	mov	r0, r5
 800771c:	4631      	mov	r1, r6
 800771e:	f7f9 fabb 	bl	8000c98 <__aeabi_uldivmod>
 8007722:	4603      	mov	r3, r0
 8007724:	460c      	mov	r4, r1
 8007726:	461a      	mov	r2, r3
 8007728:	4bb8      	ldr	r3, [pc, #736]	; (8007a0c <UART_SetConfig+0x6f4>)
 800772a:	fba3 2302 	umull	r2, r3, r3, r2
 800772e:	095b      	lsrs	r3, r3, #5
 8007730:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	469b      	mov	fp, r3
 8007738:	f04f 0c00 	mov.w	ip, #0
 800773c:	46d9      	mov	r9, fp
 800773e:	46e2      	mov	sl, ip
 8007740:	eb19 0309 	adds.w	r3, r9, r9
 8007744:	eb4a 040a 	adc.w	r4, sl, sl
 8007748:	4699      	mov	r9, r3
 800774a:	46a2      	mov	sl, r4
 800774c:	eb19 090b 	adds.w	r9, r9, fp
 8007750:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007754:	f04f 0100 	mov.w	r1, #0
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007760:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007764:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007768:	4689      	mov	r9, r1
 800776a:	4692      	mov	sl, r2
 800776c:	eb1b 0509 	adds.w	r5, fp, r9
 8007770:	eb4c 060a 	adc.w	r6, ip, sl
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	4619      	mov	r1, r3
 800777a:	f04f 0200 	mov.w	r2, #0
 800777e:	f04f 0300 	mov.w	r3, #0
 8007782:	f04f 0400 	mov.w	r4, #0
 8007786:	0094      	lsls	r4, r2, #2
 8007788:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800778c:	008b      	lsls	r3, r1, #2
 800778e:	461a      	mov	r2, r3
 8007790:	4623      	mov	r3, r4
 8007792:	4628      	mov	r0, r5
 8007794:	4631      	mov	r1, r6
 8007796:	f7f9 fa7f 	bl	8000c98 <__aeabi_uldivmod>
 800779a:	4603      	mov	r3, r0
 800779c:	460c      	mov	r4, r1
 800779e:	461a      	mov	r2, r3
 80077a0:	4b9a      	ldr	r3, [pc, #616]	; (8007a0c <UART_SetConfig+0x6f4>)
 80077a2:	fba3 1302 	umull	r1, r3, r3, r2
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	2164      	movs	r1, #100	; 0x64
 80077aa:	fb01 f303 	mul.w	r3, r1, r3
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	3332      	adds	r3, #50	; 0x32
 80077b4:	4a95      	ldr	r2, [pc, #596]	; (8007a0c <UART_SetConfig+0x6f4>)
 80077b6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077c0:	4498      	add	r8, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	469b      	mov	fp, r3
 80077c6:	f04f 0c00 	mov.w	ip, #0
 80077ca:	46d9      	mov	r9, fp
 80077cc:	46e2      	mov	sl, ip
 80077ce:	eb19 0309 	adds.w	r3, r9, r9
 80077d2:	eb4a 040a 	adc.w	r4, sl, sl
 80077d6:	4699      	mov	r9, r3
 80077d8:	46a2      	mov	sl, r4
 80077da:	eb19 090b 	adds.w	r9, r9, fp
 80077de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80077e2:	f04f 0100 	mov.w	r1, #0
 80077e6:	f04f 0200 	mov.w	r2, #0
 80077ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077f6:	4689      	mov	r9, r1
 80077f8:	4692      	mov	sl, r2
 80077fa:	eb1b 0509 	adds.w	r5, fp, r9
 80077fe:	eb4c 060a 	adc.w	r6, ip, sl
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	4619      	mov	r1, r3
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	f04f 0300 	mov.w	r3, #0
 8007810:	f04f 0400 	mov.w	r4, #0
 8007814:	0094      	lsls	r4, r2, #2
 8007816:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800781a:	008b      	lsls	r3, r1, #2
 800781c:	461a      	mov	r2, r3
 800781e:	4623      	mov	r3, r4
 8007820:	4628      	mov	r0, r5
 8007822:	4631      	mov	r1, r6
 8007824:	f7f9 fa38 	bl	8000c98 <__aeabi_uldivmod>
 8007828:	4603      	mov	r3, r0
 800782a:	460c      	mov	r4, r1
 800782c:	461a      	mov	r2, r3
 800782e:	4b77      	ldr	r3, [pc, #476]	; (8007a0c <UART_SetConfig+0x6f4>)
 8007830:	fba3 1302 	umull	r1, r3, r3, r2
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	2164      	movs	r1, #100	; 0x64
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	3332      	adds	r3, #50	; 0x32
 8007842:	4a72      	ldr	r2, [pc, #456]	; (8007a0c <UART_SetConfig+0x6f4>)
 8007844:	fba2 2303 	umull	r2, r3, r2, r3
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	f003 020f 	and.w	r2, r3, #15
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4442      	add	r2, r8
 8007854:	609a      	str	r2, [r3, #8]
 8007856:	e0d0      	b.n	80079fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007858:	f7fe fa40 	bl	8005cdc <HAL_RCC_GetPCLK1Freq>
 800785c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	469a      	mov	sl, r3
 8007862:	f04f 0b00 	mov.w	fp, #0
 8007866:	46d0      	mov	r8, sl
 8007868:	46d9      	mov	r9, fp
 800786a:	eb18 0308 	adds.w	r3, r8, r8
 800786e:	eb49 0409 	adc.w	r4, r9, r9
 8007872:	4698      	mov	r8, r3
 8007874:	46a1      	mov	r9, r4
 8007876:	eb18 080a 	adds.w	r8, r8, sl
 800787a:	eb49 090b 	adc.w	r9, r9, fp
 800787e:	f04f 0100 	mov.w	r1, #0
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800788a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800788e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007892:	4688      	mov	r8, r1
 8007894:	4691      	mov	r9, r2
 8007896:	eb1a 0508 	adds.w	r5, sl, r8
 800789a:	eb4b 0609 	adc.w	r6, fp, r9
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	4619      	mov	r1, r3
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	f04f 0400 	mov.w	r4, #0
 80078b0:	0094      	lsls	r4, r2, #2
 80078b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078b6:	008b      	lsls	r3, r1, #2
 80078b8:	461a      	mov	r2, r3
 80078ba:	4623      	mov	r3, r4
 80078bc:	4628      	mov	r0, r5
 80078be:	4631      	mov	r1, r6
 80078c0:	f7f9 f9ea 	bl	8000c98 <__aeabi_uldivmod>
 80078c4:	4603      	mov	r3, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	461a      	mov	r2, r3
 80078ca:	4b50      	ldr	r3, [pc, #320]	; (8007a0c <UART_SetConfig+0x6f4>)
 80078cc:	fba3 2302 	umull	r2, r3, r3, r2
 80078d0:	095b      	lsrs	r3, r3, #5
 80078d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	469b      	mov	fp, r3
 80078da:	f04f 0c00 	mov.w	ip, #0
 80078de:	46d9      	mov	r9, fp
 80078e0:	46e2      	mov	sl, ip
 80078e2:	eb19 0309 	adds.w	r3, r9, r9
 80078e6:	eb4a 040a 	adc.w	r4, sl, sl
 80078ea:	4699      	mov	r9, r3
 80078ec:	46a2      	mov	sl, r4
 80078ee:	eb19 090b 	adds.w	r9, r9, fp
 80078f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078f6:	f04f 0100 	mov.w	r1, #0
 80078fa:	f04f 0200 	mov.w	r2, #0
 80078fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007902:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007906:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800790a:	4689      	mov	r9, r1
 800790c:	4692      	mov	sl, r2
 800790e:	eb1b 0509 	adds.w	r5, fp, r9
 8007912:	eb4c 060a 	adc.w	r6, ip, sl
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	4619      	mov	r1, r3
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	f04f 0400 	mov.w	r4, #0
 8007928:	0094      	lsls	r4, r2, #2
 800792a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800792e:	008b      	lsls	r3, r1, #2
 8007930:	461a      	mov	r2, r3
 8007932:	4623      	mov	r3, r4
 8007934:	4628      	mov	r0, r5
 8007936:	4631      	mov	r1, r6
 8007938:	f7f9 f9ae 	bl	8000c98 <__aeabi_uldivmod>
 800793c:	4603      	mov	r3, r0
 800793e:	460c      	mov	r4, r1
 8007940:	461a      	mov	r2, r3
 8007942:	4b32      	ldr	r3, [pc, #200]	; (8007a0c <UART_SetConfig+0x6f4>)
 8007944:	fba3 1302 	umull	r1, r3, r3, r2
 8007948:	095b      	lsrs	r3, r3, #5
 800794a:	2164      	movs	r1, #100	; 0x64
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	3332      	adds	r3, #50	; 0x32
 8007956:	4a2d      	ldr	r2, [pc, #180]	; (8007a0c <UART_SetConfig+0x6f4>)
 8007958:	fba2 2303 	umull	r2, r3, r2, r3
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007962:	4498      	add	r8, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	469b      	mov	fp, r3
 8007968:	f04f 0c00 	mov.w	ip, #0
 800796c:	46d9      	mov	r9, fp
 800796e:	46e2      	mov	sl, ip
 8007970:	eb19 0309 	adds.w	r3, r9, r9
 8007974:	eb4a 040a 	adc.w	r4, sl, sl
 8007978:	4699      	mov	r9, r3
 800797a:	46a2      	mov	sl, r4
 800797c:	eb19 090b 	adds.w	r9, r9, fp
 8007980:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007984:	f04f 0100 	mov.w	r1, #0
 8007988:	f04f 0200 	mov.w	r2, #0
 800798c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007990:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007994:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007998:	4689      	mov	r9, r1
 800799a:	4692      	mov	sl, r2
 800799c:	eb1b 0509 	adds.w	r5, fp, r9
 80079a0:	eb4c 060a 	adc.w	r6, ip, sl
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	4619      	mov	r1, r3
 80079aa:	f04f 0200 	mov.w	r2, #0
 80079ae:	f04f 0300 	mov.w	r3, #0
 80079b2:	f04f 0400 	mov.w	r4, #0
 80079b6:	0094      	lsls	r4, r2, #2
 80079b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079bc:	008b      	lsls	r3, r1, #2
 80079be:	461a      	mov	r2, r3
 80079c0:	4623      	mov	r3, r4
 80079c2:	4628      	mov	r0, r5
 80079c4:	4631      	mov	r1, r6
 80079c6:	f7f9 f967 	bl	8000c98 <__aeabi_uldivmod>
 80079ca:	4603      	mov	r3, r0
 80079cc:	460c      	mov	r4, r1
 80079ce:	461a      	mov	r2, r3
 80079d0:	4b0e      	ldr	r3, [pc, #56]	; (8007a0c <UART_SetConfig+0x6f4>)
 80079d2:	fba3 1302 	umull	r1, r3, r3, r2
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	2164      	movs	r1, #100	; 0x64
 80079da:	fb01 f303 	mul.w	r3, r1, r3
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	3332      	adds	r3, #50	; 0x32
 80079e4:	4a09      	ldr	r2, [pc, #36]	; (8007a0c <UART_SetConfig+0x6f4>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	f003 020f 	and.w	r2, r3, #15
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4442      	add	r2, r8
 80079f6:	609a      	str	r2, [r3, #8]
}
 80079f8:	e7ff      	b.n	80079fa <UART_SetConfig+0x6e2>
 80079fa:	bf00      	nop
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a04:	40011000 	.word	0x40011000
 8007a08:	40011400 	.word	0x40011400
 8007a0c:	51eb851f 	.word	0x51eb851f

08007a10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a10:	b084      	sub	sp, #16
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	f107 001c 	add.w	r0, r7, #28
 8007a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d122      	bne.n	8007a6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d105      	bne.n	8007a62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 fac6 	bl	8008ff4 <USB_CoreReset>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]
 8007a6c:	e01a      	b.n	8007aa4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 faba 	bl	8008ff4 <USB_CoreReset>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d106      	bne.n	8007a98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	639a      	str	r2, [r3, #56]	; 0x38
 8007a96:	e005      	b.n	8007aa4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d10b      	bne.n	8007ac2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f043 0206 	orr.w	r2, r3, #6
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f043 0220 	orr.w	r2, r3, #32
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ace:	b004      	add	sp, #16
 8007ad0:	4770      	bx	lr
	...

08007ad4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d165      	bne.n	8007bb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	4a41      	ldr	r2, [pc, #260]	; (8007bf0 <USB_SetTurnaroundTime+0x11c>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d906      	bls.n	8007afe <USB_SetTurnaroundTime+0x2a>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4a40      	ldr	r2, [pc, #256]	; (8007bf4 <USB_SetTurnaroundTime+0x120>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d802      	bhi.n	8007afe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007af8:	230f      	movs	r3, #15
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	e062      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	4a3c      	ldr	r2, [pc, #240]	; (8007bf4 <USB_SetTurnaroundTime+0x120>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d906      	bls.n	8007b14 <USB_SetTurnaroundTime+0x40>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	4a3b      	ldr	r2, [pc, #236]	; (8007bf8 <USB_SetTurnaroundTime+0x124>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d802      	bhi.n	8007b14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b0e:	230e      	movs	r3, #14
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	e057      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4a38      	ldr	r2, [pc, #224]	; (8007bf8 <USB_SetTurnaroundTime+0x124>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d906      	bls.n	8007b2a <USB_SetTurnaroundTime+0x56>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	4a37      	ldr	r2, [pc, #220]	; (8007bfc <USB_SetTurnaroundTime+0x128>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d802      	bhi.n	8007b2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b24:	230d      	movs	r3, #13
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	e04c      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	4a33      	ldr	r2, [pc, #204]	; (8007bfc <USB_SetTurnaroundTime+0x128>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d906      	bls.n	8007b40 <USB_SetTurnaroundTime+0x6c>
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4a32      	ldr	r2, [pc, #200]	; (8007c00 <USB_SetTurnaroundTime+0x12c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d802      	bhi.n	8007b40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	e041      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4a2f      	ldr	r2, [pc, #188]	; (8007c00 <USB_SetTurnaroundTime+0x12c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d906      	bls.n	8007b56 <USB_SetTurnaroundTime+0x82>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4a2e      	ldr	r2, [pc, #184]	; (8007c04 <USB_SetTurnaroundTime+0x130>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d802      	bhi.n	8007b56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007b50:	230b      	movs	r3, #11
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e036      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	4a2a      	ldr	r2, [pc, #168]	; (8007c04 <USB_SetTurnaroundTime+0x130>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d906      	bls.n	8007b6c <USB_SetTurnaroundTime+0x98>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	4a29      	ldr	r2, [pc, #164]	; (8007c08 <USB_SetTurnaroundTime+0x134>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d802      	bhi.n	8007b6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007b66:	230a      	movs	r3, #10
 8007b68:	617b      	str	r3, [r7, #20]
 8007b6a:	e02b      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4a26      	ldr	r2, [pc, #152]	; (8007c08 <USB_SetTurnaroundTime+0x134>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d906      	bls.n	8007b82 <USB_SetTurnaroundTime+0xae>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	4a25      	ldr	r2, [pc, #148]	; (8007c0c <USB_SetTurnaroundTime+0x138>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d802      	bhi.n	8007b82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007b7c:	2309      	movs	r3, #9
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	e020      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	4a21      	ldr	r2, [pc, #132]	; (8007c0c <USB_SetTurnaroundTime+0x138>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d906      	bls.n	8007b98 <USB_SetTurnaroundTime+0xc4>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	4a20      	ldr	r2, [pc, #128]	; (8007c10 <USB_SetTurnaroundTime+0x13c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d802      	bhi.n	8007b98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007b92:	2308      	movs	r3, #8
 8007b94:	617b      	str	r3, [r7, #20]
 8007b96:	e015      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4a1d      	ldr	r2, [pc, #116]	; (8007c10 <USB_SetTurnaroundTime+0x13c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d906      	bls.n	8007bae <USB_SetTurnaroundTime+0xda>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4a1c      	ldr	r2, [pc, #112]	; (8007c14 <USB_SetTurnaroundTime+0x140>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d802      	bhi.n	8007bae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ba8:	2307      	movs	r3, #7
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	e00a      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007bae:	2306      	movs	r3, #6
 8007bb0:	617b      	str	r3, [r7, #20]
 8007bb2:	e007      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007bba:	2309      	movs	r3, #9
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	e001      	b.n	8007bc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007bc0:	2309      	movs	r3, #9
 8007bc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	029b      	lsls	r3, r3, #10
 8007bd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	371c      	adds	r7, #28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	00d8acbf 	.word	0x00d8acbf
 8007bf4:	00e4e1bf 	.word	0x00e4e1bf
 8007bf8:	00f423ff 	.word	0x00f423ff
 8007bfc:	0106737f 	.word	0x0106737f
 8007c00:	011a499f 	.word	0x011a499f
 8007c04:	01312cff 	.word	0x01312cff
 8007c08:	014ca43f 	.word	0x014ca43f
 8007c0c:	016e35ff 	.word	0x016e35ff
 8007c10:	01a6ab1f 	.word	0x01a6ab1f
 8007c14:	01e847ff 	.word	0x01e847ff

08007c18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f043 0201 	orr.w	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f023 0201 	bic.w	r2, r3, #1
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d106      	bne.n	8007c88 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60da      	str	r2, [r3, #12]
 8007c86:	e00b      	b.n	8007ca0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	e001      	b.n	8007ca0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e003      	b.n	8007ca8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007ca0:	2032      	movs	r0, #50	; 0x32
 8007ca2:	f7fb f89f 	bl	8002de4 <HAL_Delay>

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b086      	sub	sp, #24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007cca:	2300      	movs	r3, #0
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	e009      	b.n	8007ce4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	3340      	adds	r3, #64	; 0x40
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	2200      	movs	r2, #0
 8007cdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	2b0e      	cmp	r3, #14
 8007ce8:	d9f2      	bls.n	8007cd0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d11c      	bne.n	8007d2a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cfe:	f043 0302 	orr.w	r3, r3, #2
 8007d02:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d14:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d20:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	639a      	str	r2, [r3, #56]	; 0x38
 8007d28:	e00b      	b.n	8007d42 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d48:	461a      	mov	r2, r3
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d54:	4619      	mov	r1, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	680b      	ldr	r3, [r1, #0]
 8007d60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d10c      	bne.n	8007d82 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d104      	bne.n	8007d78 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d6e:	2100      	movs	r1, #0
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f949 	bl	8008008 <USB_SetDevSpeed>
 8007d76:	e008      	b.n	8007d8a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d78:	2101      	movs	r1, #1
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f944 	bl	8008008 <USB_SetDevSpeed>
 8007d80:	e003      	b.n	8007d8a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d82:	2103      	movs	r1, #3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f93f 	bl	8008008 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d8a:	2110      	movs	r1, #16
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f8f3 	bl	8007f78 <USB_FlushTxFifo>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f911 	bl	8007fc4 <USB_FlushRxFifo>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db2:	461a      	mov	r2, r3
 8007db4:	2300      	movs	r3, #0
 8007db6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dca:	461a      	mov	r2, r3
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	e043      	b.n	8007e5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dec:	d118      	bne.n	8007e20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e00:	461a      	mov	r2, r3
 8007e02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	e013      	b.n	8007e32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e16:	461a      	mov	r2, r3
 8007e18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	e008      	b.n	8007e32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	2300      	movs	r3, #0
 8007e30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3e:	461a      	mov	r2, r3
 8007e40:	2300      	movs	r3, #0
 8007e42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	461a      	mov	r2, r3
 8007e52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d3b7      	bcc.n	8007dd6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	e043      	b.n	8007ef4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e82:	d118      	bne.n	8007eb6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10a      	bne.n	8007ea0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e96:	461a      	mov	r2, r3
 8007e98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	e013      	b.n	8007ec8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eac:	461a      	mov	r2, r3
 8007eae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	e008      	b.n	8007ec8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007eec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	613b      	str	r3, [r7, #16]
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d3b7      	bcc.n	8007e6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d105      	bne.n	8007f30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	f043 0210 	orr.w	r2, r3, #16
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	699a      	ldr	r2, [r3, #24]
 8007f34:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <USB_DevInit+0x2c4>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d005      	beq.n	8007f4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	f043 0208 	orr.w	r2, r3, #8
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d107      	bne.n	8007f64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f5c:	f043 0304 	orr.w	r3, r3, #4
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f70:	b004      	add	sp, #16
 8007f72:	4770      	bx	lr
 8007f74:	803c3800 	.word	0x803c3800

08007f78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	019b      	lsls	r3, r3, #6
 8007f8a:	f043 0220 	orr.w	r2, r3, #32
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3301      	adds	r3, #1
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <USB_FlushTxFifo+0x48>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d901      	bls.n	8007fa4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e006      	b.n	8007fb2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f003 0320 	and.w	r3, r3, #32
 8007fac:	2b20      	cmp	r3, #32
 8007fae:	d0f0      	beq.n	8007f92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	00030d40 	.word	0x00030d40

08007fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2210      	movs	r2, #16
 8007fd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4a09      	ldr	r2, [pc, #36]	; (8008004 <USB_FlushRxFifo+0x40>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d901      	bls.n	8007fe8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e006      	b.n	8007ff6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	2b10      	cmp	r3, #16
 8007ff2:	d0f0      	beq.n	8007fd6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	00030d40 	.word	0x00030d40

08008008 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	68f9      	ldr	r1, [r7, #12]
 8008024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008028:	4313      	orrs	r3, r2
 800802a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800803a:	b480      	push	{r7}
 800803c:	b087      	sub	sp, #28
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 0306 	and.w	r3, r3, #6
 8008052:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d102      	bne.n	8008060 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800805a:	2300      	movs	r3, #0
 800805c:	75fb      	strb	r3, [r7, #23]
 800805e:	e00a      	b.n	8008076 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b02      	cmp	r3, #2
 8008064:	d002      	beq.n	800806c <USB_GetDevSpeed+0x32>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b06      	cmp	r3, #6
 800806a:	d102      	bne.n	8008072 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800806c:	2302      	movs	r3, #2
 800806e:	75fb      	strb	r3, [r7, #23]
 8008070:	e001      	b.n	8008076 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008072:	230f      	movs	r3, #15
 8008074:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008076:	7dfb      	ldrb	r3, [r7, #23]
}
 8008078:	4618      	mov	r0, r3
 800807a:	371c      	adds	r7, #28
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d13a      	bne.n	8008116 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	2101      	movs	r1, #1
 80080b2:	fa01 f303 	lsl.w	r3, r1, r3
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	68f9      	ldr	r1, [r7, #12]
 80080ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080be:	4313      	orrs	r3, r2
 80080c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d155      	bne.n	8008184 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	78db      	ldrb	r3, [r3, #3]
 80080f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	059b      	lsls	r3, r3, #22
 80080fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080fc:	4313      	orrs	r3, r2
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	0151      	lsls	r1, r2, #5
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	440a      	add	r2, r1
 8008106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800810a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800810e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	e036      	b.n	8008184 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811c:	69da      	ldr	r2, [r3, #28]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f003 030f 	and.w	r3, r3, #15
 8008126:	2101      	movs	r1, #1
 8008128:	fa01 f303 	lsl.w	r3, r1, r3
 800812c:	041b      	lsls	r3, r3, #16
 800812e:	68f9      	ldr	r1, [r7, #12]
 8008130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008134:	4313      	orrs	r3, r2
 8008136:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d11a      	bne.n	8008184 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	78db      	ldrb	r3, [r3, #3]
 8008168:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800816a:	430b      	orrs	r3, r1
 800816c:	4313      	orrs	r3, r2
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	440a      	add	r2, r1
 8008176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800817a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008182:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
	...

08008194 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d161      	bne.n	8008274 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081c6:	d11f      	bne.n	8008208 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	0151      	lsls	r1, r2, #5
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	440a      	add	r2, r1
 80081de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008206:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	f003 030f 	and.w	r3, r3, #15
 8008218:	2101      	movs	r1, #1
 800821a:	fa01 f303 	lsl.w	r3, r1, r3
 800821e:	b29b      	uxth	r3, r3
 8008220:	43db      	mvns	r3, r3
 8008222:	68f9      	ldr	r1, [r7, #12]
 8008224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008228:	4013      	ands	r3, r2
 800822a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 030f 	and.w	r3, r3, #15
 800823c:	2101      	movs	r1, #1
 800823e:	fa01 f303 	lsl.w	r3, r1, r3
 8008242:	b29b      	uxth	r3, r3
 8008244:	43db      	mvns	r3, r3
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800824c:	4013      	ands	r3, r2
 800824e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	0159      	lsls	r1, r3, #5
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	440b      	add	r3, r1
 8008266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826a:	4619      	mov	r1, r3
 800826c:	4b35      	ldr	r3, [pc, #212]	; (8008344 <USB_DeactivateEndpoint+0x1b0>)
 800826e:	4013      	ands	r3, r2
 8008270:	600b      	str	r3, [r1, #0]
 8008272:	e060      	b.n	8008336 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800828a:	d11f      	bne.n	80082cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	0151      	lsls	r1, r2, #5
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	440a      	add	r2, r1
 80082a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	0151      	lsls	r1, r2, #5
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	440a      	add	r2, r1
 80082c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	f003 030f 	and.w	r3, r3, #15
 80082dc:	2101      	movs	r1, #1
 80082de:	fa01 f303 	lsl.w	r3, r1, r3
 80082e2:	041b      	lsls	r3, r3, #16
 80082e4:	43db      	mvns	r3, r3
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ec:	4013      	ands	r3, r2
 80082ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f6:	69da      	ldr	r2, [r3, #28]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	f003 030f 	and.w	r3, r3, #15
 8008300:	2101      	movs	r1, #1
 8008302:	fa01 f303 	lsl.w	r3, r1, r3
 8008306:	041b      	lsls	r3, r3, #16
 8008308:	43db      	mvns	r3, r3
 800830a:	68f9      	ldr	r1, [r7, #12]
 800830c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008310:	4013      	ands	r3, r2
 8008312:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	0159      	lsls	r1, r3, #5
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	440b      	add	r3, r1
 800832a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832e:	4619      	mov	r1, r3
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <USB_DeactivateEndpoint+0x1b4>)
 8008332:	4013      	ands	r3, r2
 8008334:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	ec337800 	.word	0xec337800
 8008348:	eff37800 	.word	0xeff37800

0800834c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	; 0x28
 8008350:	af02      	add	r7, sp, #8
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	785b      	ldrb	r3, [r3, #1]
 8008368:	2b01      	cmp	r3, #1
 800836a:	f040 815c 	bne.w	8008626 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d132      	bne.n	80083dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008390:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008394:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008398:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	0151      	lsls	r1, r2, #5
 80083ac:	69fa      	ldr	r2, [r7, #28]
 80083ae:	440a      	add	r2, r1
 80083b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	0151      	lsls	r1, r2, #5
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	440a      	add	r2, r1
 80083d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083d4:	0cdb      	lsrs	r3, r3, #19
 80083d6:	04db      	lsls	r3, r3, #19
 80083d8:	6113      	str	r3, [r2, #16]
 80083da:	e074      	b.n	80084c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	0151      	lsls	r1, r2, #5
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	440a      	add	r2, r1
 80083f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083f6:	0cdb      	lsrs	r3, r3, #19
 80083f8:	04db      	lsls	r3, r3, #19
 80083fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	69ba      	ldr	r2, [r7, #24]
 800840c:	0151      	lsls	r1, r2, #5
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	440a      	add	r2, r1
 8008412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008416:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800841a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800841e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842c:	691a      	ldr	r2, [r3, #16]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6959      	ldr	r1, [r3, #20]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	440b      	add	r3, r1
 8008438:	1e59      	subs	r1, r3, #1
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008442:	04d9      	lsls	r1, r3, #19
 8008444:	4b9d      	ldr	r3, [pc, #628]	; (80086bc <USB_EPStartXfer+0x370>)
 8008446:	400b      	ands	r3, r1
 8008448:	69b9      	ldr	r1, [r7, #24]
 800844a:	0148      	lsls	r0, r1, #5
 800844c:	69f9      	ldr	r1, [r7, #28]
 800844e:	4401      	add	r1, r0
 8008450:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008454:	4313      	orrs	r3, r2
 8008456:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008464:	691a      	ldr	r2, [r3, #16]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800846e:	69b9      	ldr	r1, [r7, #24]
 8008470:	0148      	lsls	r0, r1, #5
 8008472:	69f9      	ldr	r1, [r7, #28]
 8008474:	4401      	add	r1, r0
 8008476:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800847a:	4313      	orrs	r3, r2
 800847c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	78db      	ldrb	r3, [r3, #3]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d11f      	bne.n	80084c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	0151      	lsls	r1, r2, #5
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	440a      	add	r2, r1
 800849c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80084a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	69fa      	ldr	r2, [r7, #28]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d14b      	bne.n	8008564 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d009      	beq.n	80084e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e0:	461a      	mov	r2, r3
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	78db      	ldrb	r3, [r3, #3]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d128      	bne.n	8008542 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d110      	bne.n	8008522 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	0151      	lsls	r1, r2, #5
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	440a      	add	r2, r1
 8008516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	e00f      	b.n	8008542 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	69fa      	ldr	r2, [r7, #28]
 8008536:	440a      	add	r2, r1
 8008538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008540:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	69fa      	ldr	r2, [r7, #28]
 8008556:	440a      	add	r2, r1
 8008558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800855c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	e12f      	b.n	80087c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	0151      	lsls	r1, r2, #5
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	440a      	add	r2, r1
 800857a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800857e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008582:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	78db      	ldrb	r3, [r3, #3]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d015      	beq.n	80085b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 8117 	beq.w	80087c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	f003 030f 	and.w	r3, r3, #15
 80085a6:	2101      	movs	r1, #1
 80085a8:	fa01 f303 	lsl.w	r3, r1, r3
 80085ac:	69f9      	ldr	r1, [r7, #28]
 80085ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085b2:	4313      	orrs	r3, r2
 80085b4:	634b      	str	r3, [r1, #52]	; 0x34
 80085b6:	e105      	b.n	80087c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d110      	bne.n	80085ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	e00f      	b.n	800860a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	69fa      	ldr	r2, [r7, #28]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008608:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	68d9      	ldr	r1, [r3, #12]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	781a      	ldrb	r2, [r3, #0]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	b298      	uxth	r0, r3
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4603      	mov	r3, r0
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 fa2b 	bl	8008a7a <USB_WritePacket>
 8008624:	e0ce      	b.n	80087c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008640:	0cdb      	lsrs	r3, r3, #19
 8008642:	04db      	lsls	r3, r3, #19
 8008644:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	4413      	add	r3, r2
 800864e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	0151      	lsls	r1, r2, #5
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	440a      	add	r2, r1
 800865c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008660:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008664:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008668:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d126      	bne.n	80086c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867e:	691a      	ldr	r2, [r3, #16]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008688:	69b9      	ldr	r1, [r7, #24]
 800868a:	0148      	lsls	r0, r1, #5
 800868c:	69f9      	ldr	r1, [r7, #28]
 800868e:	4401      	add	r1, r0
 8008690:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008694:	4313      	orrs	r3, r2
 8008696:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086b6:	6113      	str	r3, [r2, #16]
 80086b8:	e036      	b.n	8008728 <USB_EPStartXfer+0x3dc>
 80086ba:	bf00      	nop
 80086bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	695a      	ldr	r2, [r3, #20]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	4413      	add	r3, r2
 80086ca:	1e5a      	subs	r2, r3, #1
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	015a      	lsls	r2, r3, #5
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	8afb      	ldrh	r3, [r7, #22]
 80086e6:	04d9      	lsls	r1, r3, #19
 80086e8:	4b39      	ldr	r3, [pc, #228]	; (80087d0 <USB_EPStartXfer+0x484>)
 80086ea:	400b      	ands	r3, r1
 80086ec:	69b9      	ldr	r1, [r7, #24]
 80086ee:	0148      	lsls	r0, r1, #5
 80086f0:	69f9      	ldr	r1, [r7, #28]
 80086f2:	4401      	add	r1, r0
 80086f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086f8:	4313      	orrs	r3, r2
 80086fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008708:	691a      	ldr	r2, [r3, #16]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	8af9      	ldrh	r1, [r7, #22]
 8008710:	fb01 f303 	mul.w	r3, r1, r3
 8008714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008718:	69b9      	ldr	r1, [r7, #24]
 800871a:	0148      	lsls	r0, r1, #5
 800871c:	69f9      	ldr	r1, [r7, #28]
 800871e:	4401      	add	r1, r0
 8008720:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008724:	4313      	orrs	r3, r2
 8008726:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d10d      	bne.n	800874a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d009      	beq.n	800874a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	68d9      	ldr	r1, [r3, #12]
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008746:	460a      	mov	r2, r1
 8008748:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	78db      	ldrb	r3, [r3, #3]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d128      	bne.n	80087a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875e:	2b00      	cmp	r3, #0
 8008760:	d110      	bne.n	8008784 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	0151      	lsls	r1, r2, #5
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	440a      	add	r2, r1
 8008778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800877c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	e00f      	b.n	80087a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	4413      	add	r3, r2
 800878c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	0151      	lsls	r1, r2, #5
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	440a      	add	r2, r1
 800879a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800879e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	0151      	lsls	r1, r2, #5
 80087b6:	69fa      	ldr	r2, [r7, #28]
 80087b8:	440a      	add	r2, r1
 80087ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3720      	adds	r7, #32
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	1ff80000 	.word	0x1ff80000

080087d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	4613      	mov	r3, r2
 80087e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	785b      	ldrb	r3, [r3, #1]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	f040 80cd 	bne.w	8008990 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d132      	bne.n	8008864 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	0151      	lsls	r1, r2, #5
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	440a      	add	r2, r1
 8008814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800881c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	4413      	add	r3, r2
 800882a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	0151      	lsls	r1, r2, #5
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	440a      	add	r2, r1
 8008838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800883c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	0151      	lsls	r1, r2, #5
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	440a      	add	r2, r1
 8008858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800885c:	0cdb      	lsrs	r3, r3, #19
 800885e:	04db      	lsls	r3, r3, #19
 8008860:	6113      	str	r3, [r2, #16]
 8008862:	e04e      	b.n	8008902 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	440a      	add	r2, r1
 800887a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800887e:	0cdb      	lsrs	r3, r3, #19
 8008880:	04db      	lsls	r3, r3, #19
 8008882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	0151      	lsls	r1, r2, #5
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	440a      	add	r2, r1
 800889a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800889e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	695a      	ldr	r2, [r3, #20]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d903      	bls.n	80088bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e8:	691a      	ldr	r2, [r3, #16]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088f2:	6939      	ldr	r1, [r7, #16]
 80088f4:	0148      	lsls	r0, r1, #5
 80088f6:	6979      	ldr	r1, [r7, #20]
 80088f8:	4401      	add	r1, r0
 80088fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80088fe:	4313      	orrs	r3, r2
 8008900:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d11e      	bne.n	8008946 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891c:	461a      	mov	r2, r3
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	0151      	lsls	r1, r2, #5
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	440a      	add	r2, r1
 800893a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800893e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	e092      	b.n	8008a6c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	0151      	lsls	r1, r2, #5
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	440a      	add	r2, r1
 800895c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008960:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008964:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d07e      	beq.n	8008a6c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f003 030f 	and.w	r3, r3, #15
 800897e:	2101      	movs	r1, #1
 8008980:	fa01 f303 	lsl.w	r3, r1, r3
 8008984:	6979      	ldr	r1, [r7, #20]
 8008986:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800898a:	4313      	orrs	r3, r2
 800898c:	634b      	str	r3, [r1, #52]	; 0x34
 800898e:	e06d      	b.n	8008a6c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	0151      	lsls	r1, r2, #5
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	440a      	add	r2, r1
 80089a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089aa:	0cdb      	lsrs	r3, r3, #19
 80089ac:	04db      	lsls	r3, r3, #19
 80089ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	0151      	lsls	r1, r2, #5
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	440a      	add	r2, r1
 80089fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a1a:	6939      	ldr	r1, [r7, #16]
 8008a1c:	0148      	lsls	r0, r1, #5
 8008a1e:	6979      	ldr	r1, [r7, #20]
 8008a20:	4401      	add	r1, r0
 8008a22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a26:	4313      	orrs	r3, r2
 8008a28:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d10d      	bne.n	8008a4c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d009      	beq.n	8008a4c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	68d9      	ldr	r1, [r3, #12]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a48:	460a      	mov	r2, r1
 8008a4a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	0151      	lsls	r1, r2, #5
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	440a      	add	r2, r1
 8008a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	371c      	adds	r7, #28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b089      	sub	sp, #36	; 0x24
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	4611      	mov	r1, r2
 8008a86:	461a      	mov	r2, r3
 8008a88:	460b      	mov	r3, r1
 8008a8a:	71fb      	strb	r3, [r7, #7]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008a98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d11a      	bne.n	8008ad6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008aa0:	88bb      	ldrh	r3, [r7, #4]
 8008aa2:	3303      	adds	r3, #3
 8008aa4:	089b      	lsrs	r3, r3, #2
 8008aa6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	e00f      	b.n	8008ace <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	031a      	lsls	r2, r3, #12
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aba:	461a      	mov	r2, r3
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	3301      	adds	r3, #1
 8008acc:	61bb      	str	r3, [r7, #24]
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d3eb      	bcc.n	8008aae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3724      	adds	r7, #36	; 0x24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b089      	sub	sp, #36	; 0x24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	4613      	mov	r3, r2
 8008af0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	3303      	adds	r3, #3
 8008afe:	089b      	lsrs	r3, r3, #2
 8008b00:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008b02:	2300      	movs	r3, #0
 8008b04:	61bb      	str	r3, [r7, #24]
 8008b06:	e00b      	b.n	8008b20 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	3304      	adds	r3, #4
 8008b18:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	61bb      	str	r3, [r7, #24]
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d3ef      	bcc.n	8008b08 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008b28:	69fb      	ldr	r3, [r7, #28]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3724      	adds	r7, #36	; 0x24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b085      	sub	sp, #20
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d12c      	bne.n	8008bac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	db12      	blt.n	8008b8a <USB_EPSetStall+0x54>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00f      	beq.n	8008b8a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b88:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	e02b      	b.n	8008c04 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	db12      	blt.n	8008be4 <USB_EPSetStall+0xae>
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00f      	beq.n	8008be4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	0151      	lsls	r1, r2, #5
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	440a      	add	r2, r1
 8008bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008be2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	0151      	lsls	r1, r2, #5
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	440a      	add	r2, r1
 8008bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b085      	sub	sp, #20
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d128      	bne.n	8008c80 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	0151      	lsls	r1, r2, #5
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	440a      	add	r2, r1
 8008c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	78db      	ldrb	r3, [r3, #3]
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d003      	beq.n	8008c5e <USB_EPClearStall+0x4c>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	78db      	ldrb	r3, [r3, #3]
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d138      	bne.n	8008cd0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	0151      	lsls	r1, r2, #5
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	440a      	add	r2, r1
 8008c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	e027      	b.n	8008cd0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	0151      	lsls	r1, r2, #5
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	440a      	add	r2, r1
 8008c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	78db      	ldrb	r3, [r3, #3]
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d003      	beq.n	8008cb0 <USB_EPClearStall+0x9e>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	78db      	ldrb	r3, [r3, #3]
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d10f      	bne.n	8008cd0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	0151      	lsls	r1, r2, #5
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	440a      	add	r2, r1
 8008cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b085      	sub	sp, #20
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cfc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d00:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	011b      	lsls	r3, r3, #4
 8008d0e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d44:	f023 0303 	bic.w	r3, r3, #3
 8008d48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d58:	f023 0302 	bic.w	r3, r3, #2
 8008d5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d86:	f023 0303 	bic.w	r3, r3, #3
 8008d8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d9a:	f043 0302 	orr.w	r3, r3, #2
 8008d9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	4013      	ands	r3, r2
 8008df6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	0c1b      	lsrs	r3, r3, #16
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	b29b      	uxth	r3, r3
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	4013      	ands	r3, r2
 8008e68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e9c:	78fb      	ldrb	r3, [r7, #3]
 8008e9e:	f003 030f 	and.w	r3, r3, #15
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea8:	01db      	lsls	r3, r3, #7
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008eb2:	78fb      	ldrb	r3, [r7, #3]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f0e:	f023 0307 	bic.w	r3, r3, #7
 8008f12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
	...

08008f38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	460b      	mov	r3, r1
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	333c      	adds	r3, #60	; 0x3c
 8008f4e:	3304      	adds	r3, #4
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	4a26      	ldr	r2, [pc, #152]	; (8008ff0 <USB_EP0_OutStart+0xb8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d90a      	bls.n	8008f72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f6c:	d101      	bne.n	8008f72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e037      	b.n	8008fe2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f78:	461a      	mov	r2, r3
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa0:	f043 0318 	orr.w	r3, r3, #24
 8008fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fba:	7afb      	ldrb	r3, [r7, #11]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d10f      	bne.n	8008fe0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008fde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	4f54300a 	.word	0x4f54300a

08008ff4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3301      	adds	r3, #1
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4a13      	ldr	r2, [pc, #76]	; (8009058 <USB_CoreReset+0x64>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d901      	bls.n	8009012 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e01b      	b.n	800904a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	daf2      	bge.n	8009000 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f043 0201 	orr.w	r2, r3, #1
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3301      	adds	r3, #1
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4a09      	ldr	r2, [pc, #36]	; (8009058 <USB_CoreReset+0x64>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d901      	bls.n	800903c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e006      	b.n	800904a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b01      	cmp	r3, #1
 8009046:	d0f0      	beq.n	800902a <USB_CoreReset+0x36>

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	00030d40 	.word	0x00030d40

0800905c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009068:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800906c:	f002 f952 	bl	800b314 <malloc>
 8009070:	4603      	mov	r3, r0
 8009072:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d105      	bne.n	8009086 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009082:	2302      	movs	r3, #2
 8009084:	e066      	b.n	8009154 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	7c1b      	ldrb	r3, [r3, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d119      	bne.n	80090ca <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800909a:	2202      	movs	r2, #2
 800909c:	2181      	movs	r1, #129	; 0x81
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 ffbf 	bl	800b022 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090ae:	2202      	movs	r2, #2
 80090b0:	2101      	movs	r1, #1
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 ffb5 	bl	800b022 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2210      	movs	r2, #16
 80090c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80090c8:	e016      	b.n	80090f8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090ca:	2340      	movs	r3, #64	; 0x40
 80090cc:	2202      	movs	r2, #2
 80090ce:	2181      	movs	r1, #129	; 0x81
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 ffa6 	bl	800b022 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090dc:	2340      	movs	r3, #64	; 0x40
 80090de:	2202      	movs	r2, #2
 80090e0:	2101      	movs	r1, #1
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 ff9d 	bl	800b022 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2210      	movs	r2, #16
 80090f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80090f8:	2308      	movs	r3, #8
 80090fa:	2203      	movs	r2, #3
 80090fc:	2182      	movs	r1, #130	; 0x82
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f001 ff8f 	bl	800b022 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7c1b      	ldrb	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009138:	2101      	movs	r1, #1
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f002 f860 	bl	800b200 <USBD_LL_PrepareReceive>
 8009140:	e007      	b.n	8009152 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009148:	2340      	movs	r3, #64	; 0x40
 800914a:	2101      	movs	r1, #1
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f002 f857 	bl	800b200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800916c:	2181      	movs	r1, #129	; 0x81
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f001 ff7d 	bl	800b06e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800917a:	2101      	movs	r1, #1
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 ff76 	bl	800b06e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800918a:	2182      	movs	r1, #130	; 0x82
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 ff6e 	bl	800b06e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00e      	beq.n	80091ca <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091bc:	4618      	mov	r0, r3
 80091be:	f002 f8b1 	bl	800b324 <free>
    pdev->pClassData = NULL;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d03a      	beq.n	8009274 <USBD_CDC_Setup+0xa0>
 80091fe:	2b20      	cmp	r3, #32
 8009200:	f040 8097 	bne.w	8009332 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	88db      	ldrh	r3, [r3, #6]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d029      	beq.n	8009260 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	b25b      	sxtb	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	da11      	bge.n	800923a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8009222:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	88d2      	ldrh	r2, [r2, #6]
 8009228:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800922a:	6939      	ldr	r1, [r7, #16]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	88db      	ldrh	r3, [r3, #6]
 8009230:	461a      	mov	r2, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 fa9d 	bl	800a772 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8009238:	e082      	b.n	8009340 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	785a      	ldrb	r2, [r3, #1]
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	88db      	ldrh	r3, [r3, #6]
 8009248:	b2da      	uxtb	r2, r3
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009250:	6939      	ldr	r1, [r7, #16]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	88db      	ldrh	r3, [r3, #6]
 8009256:	461a      	mov	r2, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 fab6 	bl	800a7ca <USBD_CtlPrepareRx>
    break;
 800925e:	e06f      	b.n	8009340 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	7850      	ldrb	r0, [r2, #1]
 800926c:	2200      	movs	r2, #0
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	4798      	blx	r3
    break;
 8009272:	e065      	b.n	8009340 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	785b      	ldrb	r3, [r3, #1]
 8009278:	2b0b      	cmp	r3, #11
 800927a:	d84f      	bhi.n	800931c <USBD_CDC_Setup+0x148>
 800927c:	a201      	add	r2, pc, #4	; (adr r2, 8009284 <USBD_CDC_Setup+0xb0>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	080092b5 	.word	0x080092b5
 8009288:	0800932b 	.word	0x0800932b
 800928c:	0800931d 	.word	0x0800931d
 8009290:	0800931d 	.word	0x0800931d
 8009294:	0800931d 	.word	0x0800931d
 8009298:	0800931d 	.word	0x0800931d
 800929c:	0800931d 	.word	0x0800931d
 80092a0:	0800931d 	.word	0x0800931d
 80092a4:	0800931d 	.word	0x0800931d
 80092a8:	0800931d 	.word	0x0800931d
 80092ac:	080092dd 	.word	0x080092dd
 80092b0:	08009305 	.word	0x08009305
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d107      	bne.n	80092ce <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80092be:	f107 030c 	add.w	r3, r7, #12
 80092c2:	2202      	movs	r2, #2
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 fa53 	bl	800a772 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80092cc:	e030      	b.n	8009330 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 f9dd 	bl	800a690 <USBD_CtlError>
        ret = USBD_FAIL;
 80092d6:	2303      	movs	r3, #3
 80092d8:	75fb      	strb	r3, [r7, #23]
      break;
 80092da:	e029      	b.n	8009330 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d107      	bne.n	80092f6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80092e6:	f107 030f 	add.w	r3, r7, #15
 80092ea:	2201      	movs	r2, #1
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 fa3f 	bl	800a772 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80092f4:	e01c      	b.n	8009330 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 f9c9 	bl	800a690 <USBD_CtlError>
        ret = USBD_FAIL;
 80092fe:	2303      	movs	r3, #3
 8009300:	75fb      	strb	r3, [r7, #23]
      break;
 8009302:	e015      	b.n	8009330 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930a:	2b03      	cmp	r3, #3
 800930c:	d00f      	beq.n	800932e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 f9bd 	bl	800a690 <USBD_CtlError>
        ret = USBD_FAIL;
 8009316:	2303      	movs	r3, #3
 8009318:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800931a:	e008      	b.n	800932e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 f9b6 	bl	800a690 <USBD_CtlError>
      ret = USBD_FAIL;
 8009324:	2303      	movs	r3, #3
 8009326:	75fb      	strb	r3, [r7, #23]
      break;
 8009328:	e002      	b.n	8009330 <USBD_CDC_Setup+0x15c>
      break;
 800932a:	bf00      	nop
 800932c:	e008      	b.n	8009340 <USBD_CDC_Setup+0x16c>
      break;
 800932e:	bf00      	nop
    }
    break;
 8009330:	e006      	b.n	8009340 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f001 f9ab 	bl	800a690 <USBD_CtlError>
    ret = USBD_FAIL;
 800933a:	2303      	movs	r3, #3
 800933c:	75fb      	strb	r3, [r7, #23]
    break;
 800933e:	bf00      	nop
  }

  return (uint8_t)ret;
 8009340:	7dfb      	ldrb	r3, [r7, #23]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop

0800934c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800935e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800936a:	2303      	movs	r3, #3
 800936c:	e049      	b.n	8009402 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009374:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009376:	78fa      	ldrb	r2, [r7, #3]
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	3318      	adds	r3, #24
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d029      	beq.n	80093e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800938c:	78fa      	ldrb	r2, [r7, #3]
 800938e:	6879      	ldr	r1, [r7, #4]
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	3318      	adds	r3, #24
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	78f9      	ldrb	r1, [r7, #3]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	460b      	mov	r3, r1
 80093a4:	00db      	lsls	r3, r3, #3
 80093a6:	1a5b      	subs	r3, r3, r1
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4403      	add	r3, r0
 80093ac:	3344      	adds	r3, #68	; 0x44
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80093b4:	fb03 f301 	mul.w	r3, r3, r1
 80093b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d110      	bne.n	80093e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	440b      	add	r3, r1
 80093cc:	3318      	adds	r3, #24
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093d2:	78f9      	ldrb	r1, [r7, #3]
 80093d4:	2300      	movs	r3, #0
 80093d6:	2200      	movs	r2, #0
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 fef0 	bl	800b1be <USBD_LL_Transmit>
 80093de:	e00f      	b.n	8009400 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80093fc:	78fa      	ldrb	r2, [r7, #3]
 80093fe:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800941c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009424:	2b00      	cmp	r3, #0
 8009426:	d101      	bne.n	800942c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009428:	2303      	movs	r3, #3
 800942a:	e015      	b.n	8009458 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800942c:	78fb      	ldrb	r3, [r7, #3]
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 ff06 	bl	800b242 <USBD_LL_GetRxDataSize>
 8009436:	4602      	mov	r2, r0
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009452:	4611      	mov	r1, r2
 8009454:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800946e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d015      	beq.n	80094a6 <USBD_CDC_EP0_RxReady+0x46>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009480:	2bff      	cmp	r3, #255	; 0xff
 8009482:	d010      	beq.n	80094a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009492:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800949a:	b292      	uxth	r2, r2
 800949c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	22ff      	movs	r2, #255	; 0xff
 80094a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2243      	movs	r2, #67	; 0x43
 80094bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80094be:	4b03      	ldr	r3, [pc, #12]	; (80094cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	20000100 	.word	0x20000100

080094d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2243      	movs	r2, #67	; 0x43
 80094dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80094de:	4b03      	ldr	r3, [pc, #12]	; (80094ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	200000bc 	.word	0x200000bc

080094f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2243      	movs	r2, #67	; 0x43
 80094fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80094fe:	4b03      	ldr	r3, [pc, #12]	; (800950c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	20000144 	.word	0x20000144

08009510 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	220a      	movs	r2, #10
 800951c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800951e:	4b03      	ldr	r3, [pc, #12]	; (800952c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	20000078 	.word	0x20000078

08009530 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009540:	2303      	movs	r3, #3
 8009542:	e004      	b.n	800954e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800955a:	b480      	push	{r7}
 800955c:	b087      	sub	sp, #28
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800956c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	371c      	adds	r7, #28
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800959c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80095c4:	2301      	movs	r3, #1
 80095c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e01a      	b.n	800960c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d114      	bne.n	800960a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80095fe:	2181      	movs	r1, #129	; 0x81
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 fddc 	bl	800b1be <USBD_LL_Transmit>

    ret = USBD_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800960a:	7bfb      	ldrb	r3, [r7, #15]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009622:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800962e:	2303      	movs	r3, #3
 8009630:	e016      	b.n	8009660 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	7c1b      	ldrb	r3, [r3, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009644:	2101      	movs	r1, #1
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f001 fdda 	bl	800b200 <USBD_LL_PrepareReceive>
 800964c:	e007      	b.n	800965e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009654:	2340      	movs	r3, #64	; 0x40
 8009656:	2101      	movs	r1, #1
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f001 fdd1 	bl	800b200 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	4613      	mov	r3, r2
 8009674:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800967c:	2303      	movs	r3, #3
 800967e:	e025      	b.n	80096cc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009686:	2b00      	cmp	r3, #0
 8009688:	d003      	beq.n	8009692 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	79fa      	ldrb	r2, [r7, #7]
 80096be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f001 fc47 	bl	800af54 <USBD_LL_Init>
 80096c6:	4603      	mov	r3, r0
 80096c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e010      	b.n	800970e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fc:	f107 020e 	add.w	r2, r7, #14
 8009700:	4610      	mov	r0, r2
 8009702:	4798      	blx	r3
 8009704:	4602      	mov	r2, r0
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f001 fc64 	bl	800afec <USBD_LL_Start>
 8009724:	4603      	mov	r3, r0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009750:	2303      	movs	r3, #3
 8009752:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975a:	2b00      	cmp	r3, #0
 800975c:	d009      	beq.n	8009772 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	78fa      	ldrb	r2, [r7, #3]
 8009768:	4611      	mov	r1, r2
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
 800976e:	4603      	mov	r3, r0
 8009770:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009772:	7bfb      	ldrb	r3, [r7, #15]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978e:	2b00      	cmp	r3, #0
 8009790:	d007      	beq.n	80097a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	78fa      	ldrb	r2, [r7, #3]
 800979c:	4611      	mov	r1, r2
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	4798      	blx	r3
  }

  return USBD_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 ff2c 	bl	800a61c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80097d2:	461a      	mov	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097e0:	f003 031f 	and.w	r3, r3, #31
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d00e      	beq.n	8009806 <USBD_LL_SetupStage+0x5a>
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d302      	bcc.n	80097f2 <USBD_LL_SetupStage+0x46>
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d014      	beq.n	800981a <USBD_LL_SetupStage+0x6e>
 80097f0:	e01d      	b.n	800982e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa18 	bl	8009c30 <USBD_StdDevReq>
 8009800:	4603      	mov	r3, r0
 8009802:	73fb      	strb	r3, [r7, #15]
      break;
 8009804:	e020      	b.n	8009848 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800980c:	4619      	mov	r1, r3
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa7c 	bl	8009d0c <USBD_StdItfReq>
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]
      break;
 8009818:	e016      	b.n	8009848 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fab8 	bl	8009d98 <USBD_StdEPReq>
 8009828:	4603      	mov	r3, r0
 800982a:	73fb      	strb	r3, [r7, #15]
      break;
 800982c:	e00c      	b.n	8009848 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009834:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009838:	b2db      	uxtb	r3, r3
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f001 fc35 	bl	800b0ac <USBD_LL_StallEP>
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]
      break;
 8009846:	bf00      	nop
  }

  return ret;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b086      	sub	sp, #24
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	460b      	mov	r3, r1
 800985c:	607a      	str	r2, [r7, #4]
 800985e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009860:	7afb      	ldrb	r3, [r7, #11]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d137      	bne.n	80098d6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800986c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009874:	2b03      	cmp	r3, #3
 8009876:	d14a      	bne.n	800990e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	689a      	ldr	r2, [r3, #8]
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	429a      	cmp	r2, r3
 8009882:	d913      	bls.n	80098ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	1ad2      	subs	r2, r2, r3
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	4293      	cmp	r3, r2
 800989c:	bf28      	it	cs
 800989e:	4613      	movcs	r3, r2
 80098a0:	461a      	mov	r2, r3
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 ffad 	bl	800a804 <USBD_CtlContinueRx>
 80098aa:	e030      	b.n	800990e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00a      	beq.n	80098ce <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d105      	bne.n	80098ce <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 ffa9 	bl	800a826 <USBD_CtlSendStatus>
 80098d4:	e01b      	b.n	800990e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d013      	beq.n	800990a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d10e      	bne.n	800990a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	7afa      	ldrb	r2, [r7, #11]
 80098f6:	4611      	mov	r1, r2
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	4798      	blx	r3
 80098fc:	4603      	mov	r3, r0
 80098fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009900:	7dfb      	ldrb	r3, [r7, #23]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	e002      	b.n	8009910 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800990a:	2303      	movs	r3, #3
 800990c:	e000      	b.n	8009910 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	460b      	mov	r3, r1
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009926:	7afb      	ldrb	r3, [r7, #11]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d16a      	bne.n	8009a02 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3314      	adds	r3, #20
 8009930:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009938:	2b02      	cmp	r3, #2
 800993a:	d155      	bne.n	80099e8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	429a      	cmp	r2, r3
 8009946:	d914      	bls.n	8009972 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	1ad2      	subs	r2, r2, r3
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	461a      	mov	r2, r3
 800995c:	6879      	ldr	r1, [r7, #4]
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 ff22 	bl	800a7a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009964:	2300      	movs	r3, #0
 8009966:	2200      	movs	r2, #0
 8009968:	2100      	movs	r1, #0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f001 fc48 	bl	800b200 <USBD_LL_PrepareReceive>
 8009970:	e03a      	b.n	80099e8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	429a      	cmp	r2, r3
 800997c:	d11c      	bne.n	80099b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009986:	429a      	cmp	r2, r3
 8009988:	d316      	bcc.n	80099b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009994:	429a      	cmp	r2, r3
 8009996:	d20f      	bcs.n	80099b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009998:	2200      	movs	r2, #0
 800999a:	2100      	movs	r1, #0
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 ff03 	bl	800a7a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099aa:	2300      	movs	r3, #0
 80099ac:	2200      	movs	r2, #0
 80099ae:	2100      	movs	r1, #0
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f001 fc25 	bl	800b200 <USBD_LL_PrepareReceive>
 80099b6:	e017      	b.n	80099e8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00a      	beq.n	80099da <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d105      	bne.n	80099da <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80099da:	2180      	movs	r1, #128	; 0x80
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f001 fb65 	bl	800b0ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f000 ff32 	bl	800a84c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d123      	bne.n	8009a3a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7ff fe9b 	bl	800972e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009a00:	e01b      	b.n	8009a3a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d013      	beq.n	8009a36 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a14:	2b03      	cmp	r3, #3
 8009a16:	d10e      	bne.n	8009a36 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	7afa      	ldrb	r2, [r7, #11]
 8009a22:	4611      	mov	r1, r2
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	4798      	blx	r3
 8009a28:	4603      	mov	r3, r0
 8009a2a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8009a32:	7dfb      	ldrb	r3, [r7, #23]
 8009a34:	e002      	b.n	8009a3c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e000      	b.n	8009a3c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d009      	beq.n	8009a88 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6852      	ldr	r2, [r2, #4]
 8009a80:	b2d2      	uxtb	r2, r2
 8009a82:	4611      	mov	r1, r2
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a88:	2340      	movs	r3, #64	; 0x40
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 fac7 	bl	800b022 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2240      	movs	r2, #64	; 0x40
 8009aa0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009aa4:	2340      	movs	r3, #64	; 0x40
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2180      	movs	r1, #128	; 0x80
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 fab9 	bl	800b022 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2240      	movs	r2, #64	; 0x40
 8009aba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2204      	movs	r2, #4
 8009afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d105      	bne.n	8009b2e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d10b      	bne.n	8009b66 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d005      	beq.n	8009b66 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	370c      	adds	r7, #12
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	460b      	mov	r3, r1
 8009b94:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b082      	sub	sp, #8
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d009      	beq.n	8009be8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	6852      	ldr	r2, [r2, #4]
 8009be0:	b2d2      	uxtb	r2, r2
 8009be2:	4611      	mov	r1, r2
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	4798      	blx	r3
  }

  return USBD_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b087      	sub	sp, #28
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	3301      	adds	r3, #1
 8009c08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c10:	8a3b      	ldrh	r3, [r7, #16]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	b21a      	sxth	r2, r3
 8009c16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	b21b      	sxth	r3, r3
 8009c1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c20:	89fb      	ldrh	r3, [r7, #14]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	371c      	adds	r7, #28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
	...

08009c30 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	d004      	beq.n	8009c54 <USBD_StdDevReq+0x24>
 8009c4a:	2b40      	cmp	r3, #64	; 0x40
 8009c4c:	d002      	beq.n	8009c54 <USBD_StdDevReq+0x24>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <USBD_StdDevReq+0x38>
 8009c52:	e050      	b.n	8009cf6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	4798      	blx	r3
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]
    break;
 8009c66:	e04b      	b.n	8009d00 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	785b      	ldrb	r3, [r3, #1]
 8009c6c:	2b09      	cmp	r3, #9
 8009c6e:	d83c      	bhi.n	8009cea <USBD_StdDevReq+0xba>
 8009c70:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <USBD_StdDevReq+0x48>)
 8009c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c76:	bf00      	nop
 8009c78:	08009ccd 	.word	0x08009ccd
 8009c7c:	08009ce1 	.word	0x08009ce1
 8009c80:	08009ceb 	.word	0x08009ceb
 8009c84:	08009cd7 	.word	0x08009cd7
 8009c88:	08009ceb 	.word	0x08009ceb
 8009c8c:	08009cab 	.word	0x08009cab
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009ceb 	.word	0x08009ceb
 8009c98:	08009cc3 	.word	0x08009cc3
 8009c9c:	08009cb5 	.word	0x08009cb5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f9ce 	bl	800a044 <USBD_GetDescriptor>
      break;
 8009ca8:	e024      	b.n	8009cf4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fb33 	bl	800a318 <USBD_SetAddress>
      break;
 8009cb2:	e01f      	b.n	8009cf4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fb70 	bl	800a39c <USBD_SetConfig>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc0:	e018      	b.n	8009cf4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fc0d 	bl	800a4e4 <USBD_GetConfig>
      break;
 8009cca:	e013      	b.n	8009cf4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fc3c 	bl	800a54c <USBD_GetStatus>
      break;
 8009cd4:	e00e      	b.n	8009cf4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fc6a 	bl	800a5b2 <USBD_SetFeature>
      break;
 8009cde:	e009      	b.n	8009cf4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fc79 	bl	800a5da <USBD_ClrFeature>
      break;
 8009ce8:	e004      	b.n	8009cf4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fccf 	bl	800a690 <USBD_CtlError>
      break;
 8009cf2:	bf00      	nop
    }
    break;
 8009cf4:	e004      	b.n	8009d00 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fcc9 	bl	800a690 <USBD_CtlError>
    break;
 8009cfe:	bf00      	nop
  }

  return ret;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop

08009d0c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d22:	2b20      	cmp	r3, #32
 8009d24:	d003      	beq.n	8009d2e <USBD_StdItfReq+0x22>
 8009d26:	2b40      	cmp	r3, #64	; 0x40
 8009d28:	d001      	beq.n	8009d2e <USBD_StdItfReq+0x22>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d12a      	bne.n	8009d84 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d34:	3b01      	subs	r3, #1
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d81d      	bhi.n	8009d76 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	889b      	ldrh	r3, [r3, #4]
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d813      	bhi.n	8009d6c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	6839      	ldr	r1, [r7, #0]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	4798      	blx	r3
 8009d52:	4603      	mov	r3, r0
 8009d54:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	88db      	ldrh	r3, [r3, #6]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d110      	bne.n	8009d80 <USBD_StdItfReq+0x74>
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10d      	bne.n	8009d80 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fd5e 	bl	800a826 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009d6a:	e009      	b.n	8009d80 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fc8e 	bl	800a690 <USBD_CtlError>
      break;
 8009d74:	e004      	b.n	8009d80 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fc89 	bl	800a690 <USBD_CtlError>
      break;
 8009d7e:	e000      	b.n	8009d82 <USBD_StdItfReq+0x76>
      break;
 8009d80:	bf00      	nop
    }
    break;
 8009d82:	e004      	b.n	8009d8e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fc82 	bl	800a690 <USBD_CtlError>
    break;
 8009d8c:	bf00      	nop
  }

  return ret;
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	889b      	ldrh	r3, [r3, #4]
 8009daa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d004      	beq.n	8009dc2 <USBD_StdEPReq+0x2a>
 8009db8:	2b40      	cmp	r3, #64	; 0x40
 8009dba:	d002      	beq.n	8009dc2 <USBD_StdEPReq+0x2a>
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00a      	beq.n	8009dd6 <USBD_StdEPReq+0x3e>
 8009dc0:	e135      	b.n	800a02e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	4798      	blx	r3
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd4:	e130      	b.n	800a038 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	785b      	ldrb	r3, [r3, #1]
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d03e      	beq.n	8009e5c <USBD_StdEPReq+0xc4>
 8009dde:	2b03      	cmp	r3, #3
 8009de0:	d002      	beq.n	8009de8 <USBD_StdEPReq+0x50>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d077      	beq.n	8009ed6 <USBD_StdEPReq+0x13e>
 8009de6:	e11c      	b.n	800a022 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d002      	beq.n	8009df8 <USBD_StdEPReq+0x60>
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d015      	beq.n	8009e22 <USBD_StdEPReq+0x8a>
 8009df6:	e02b      	b.n	8009e50 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00c      	beq.n	8009e18 <USBD_StdEPReq+0x80>
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b80      	cmp	r3, #128	; 0x80
 8009e02:	d009      	beq.n	8009e18 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f001 f94f 	bl	800b0ac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e0e:	2180      	movs	r1, #128	; 0x80
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 f94b 	bl	800b0ac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009e16:	e020      	b.n	8009e5a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fc38 	bl	800a690 <USBD_CtlError>
        break;
 8009e20:	e01b      	b.n	8009e5a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	885b      	ldrh	r3, [r3, #2]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10e      	bne.n	8009e48 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00b      	beq.n	8009e48 <USBD_StdEPReq+0xb0>
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	2b80      	cmp	r3, #128	; 0x80
 8009e34:	d008      	beq.n	8009e48 <USBD_StdEPReq+0xb0>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	88db      	ldrh	r3, [r3, #6]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d104      	bne.n	8009e48 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e3e:	7bbb      	ldrb	r3, [r7, #14]
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f001 f932 	bl	800b0ac <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fcec 	bl	800a826 <USBD_CtlSendStatus>

        break;
 8009e4e:	e004      	b.n	8009e5a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fc1c 	bl	800a690 <USBD_CtlError>
        break;
 8009e58:	bf00      	nop
      }
      break;
 8009e5a:	e0e7      	b.n	800a02c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d002      	beq.n	8009e6c <USBD_StdEPReq+0xd4>
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d015      	beq.n	8009e96 <USBD_StdEPReq+0xfe>
 8009e6a:	e02d      	b.n	8009ec8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00c      	beq.n	8009e8c <USBD_StdEPReq+0xf4>
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	2b80      	cmp	r3, #128	; 0x80
 8009e76:	d009      	beq.n	8009e8c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f915 	bl	800b0ac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e82:	2180      	movs	r1, #128	; 0x80
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 f911 	bl	800b0ac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009e8a:	e023      	b.n	8009ed4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fbfe 	bl	800a690 <USBD_CtlError>
        break;
 8009e94:	e01e      	b.n	8009ed4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	885b      	ldrh	r3, [r3, #2]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d119      	bne.n	8009ed2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d004      	beq.n	8009eb2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ea8:	7bbb      	ldrb	r3, [r7, #14]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 f91c 	bl	800b0ea <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fcb7 	bl	800a826 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	4798      	blx	r3
        }
        break;
 8009ec6:	e004      	b.n	8009ed2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fbe0 	bl	800a690 <USBD_CtlError>
        break;
 8009ed0:	e000      	b.n	8009ed4 <USBD_StdEPReq+0x13c>
        break;
 8009ed2:	bf00      	nop
      }
      break;
 8009ed4:	e0aa      	b.n	800a02c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d002      	beq.n	8009ee6 <USBD_StdEPReq+0x14e>
 8009ee0:	2b03      	cmp	r3, #3
 8009ee2:	d032      	beq.n	8009f4a <USBD_StdEPReq+0x1b2>
 8009ee4:	e097      	b.n	800a016 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d007      	beq.n	8009efc <USBD_StdEPReq+0x164>
 8009eec:	7bbb      	ldrb	r3, [r7, #14]
 8009eee:	2b80      	cmp	r3, #128	; 0x80
 8009ef0:	d004      	beq.n	8009efc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fbcb 	bl	800a690 <USBD_CtlError>
          break;
 8009efa:	e091      	b.n	800a020 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da0b      	bge.n	8009f1c <USBD_StdEPReq+0x184>
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	3310      	adds	r3, #16
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	4413      	add	r3, r2
 8009f18:	3304      	adds	r3, #4
 8009f1a:	e00b      	b.n	8009f34 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f22:	4613      	mov	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	4413      	add	r3, r2
 8009f32:	3304      	adds	r3, #4
 8009f34:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fc15 	bl	800a772 <USBD_CtlSendData>
        break;
 8009f48:	e06a      	b.n	800a020 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009f4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	da11      	bge.n	8009f76 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	f003 020f 	and.w	r2, r3, #15
 8009f58:	6879      	ldr	r1, [r7, #4]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	3324      	adds	r3, #36	; 0x24
 8009f66:	881b      	ldrh	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d117      	bne.n	8009f9c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fb8e 	bl	800a690 <USBD_CtlError>
            break;
 8009f74:	e054      	b.n	800a020 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	f003 020f 	and.w	r2, r3, #15
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	440b      	add	r3, r1
 8009f88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d104      	bne.n	8009f9c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fb7b 	bl	800a690 <USBD_CtlError>
            break;
 8009f9a:	e041      	b.n	800a020 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	da0b      	bge.n	8009fbc <USBD_StdEPReq+0x224>
 8009fa4:	7bbb      	ldrb	r3, [r7, #14]
 8009fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	3310      	adds	r3, #16
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	3304      	adds	r3, #4
 8009fba:	e00b      	b.n	8009fd4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
 8009fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <USBD_StdEPReq+0x24a>
 8009fdc:	7bbb      	ldrb	r3, [r7, #14]
 8009fde:	2b80      	cmp	r3, #128	; 0x80
 8009fe0:	d103      	bne.n	8009fea <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	e00e      	b.n	800a008 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f001 f89a 	bl	800b128 <USBD_LL_IsStallEP>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	e002      	b.n	800a008 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2200      	movs	r2, #0
 800a006:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2202      	movs	r2, #2
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fbaf 	bl	800a772 <USBD_CtlSendData>
          break;
 800a014:	e004      	b.n	800a020 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fb39 	bl	800a690 <USBD_CtlError>
        break;
 800a01e:	bf00      	nop
      }
      break;
 800a020:	e004      	b.n	800a02c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fb33 	bl	800a690 <USBD_CtlError>
      break;
 800a02a:	bf00      	nop
    }
    break;
 800a02c:	e004      	b.n	800a038 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 fb2d 	bl	800a690 <USBD_CtlError>
    break;
 800a036:	bf00      	nop
  }

  return ret;
 800a038:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a056:	2300      	movs	r3, #0
 800a058:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	885b      	ldrh	r3, [r3, #2]
 800a05e:	0a1b      	lsrs	r3, r3, #8
 800a060:	b29b      	uxth	r3, r3
 800a062:	3b01      	subs	r3, #1
 800a064:	2b06      	cmp	r3, #6
 800a066:	f200 8128 	bhi.w	800a2ba <USBD_GetDescriptor+0x276>
 800a06a:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <USBD_GetDescriptor+0x2c>)
 800a06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a070:	0800a08d 	.word	0x0800a08d
 800a074:	0800a0a5 	.word	0x0800a0a5
 800a078:	0800a0e5 	.word	0x0800a0e5
 800a07c:	0800a2bb 	.word	0x0800a2bb
 800a080:	0800a2bb 	.word	0x0800a2bb
 800a084:	0800a25b 	.word	0x0800a25b
 800a088:	0800a287 	.word	0x0800a287
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7c12      	ldrb	r2, [r2, #16]
 800a098:	f107 0108 	add.w	r1, r7, #8
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
    break;
 800a0a2:	e112      	b.n	800a2ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	7c1b      	ldrb	r3, [r3, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10d      	bne.n	800a0c8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b4:	f107 0208 	add.w	r2, r7, #8
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	4798      	blx	r3
 800a0bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a0c6:	e100      	b.n	800a2ca <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	f107 0208 	add.w	r2, r7, #8
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	4798      	blx	r3
 800a0d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	2202      	movs	r2, #2
 800a0e0:	701a      	strb	r2, [r3, #0]
    break;
 800a0e2:	e0f2      	b.n	800a2ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	885b      	ldrh	r3, [r3, #2]
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b05      	cmp	r3, #5
 800a0ec:	f200 80ac 	bhi.w	800a248 <USBD_GetDescriptor+0x204>
 800a0f0:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <USBD_GetDescriptor+0xb4>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a111 	.word	0x0800a111
 800a0fc:	0800a145 	.word	0x0800a145
 800a100:	0800a179 	.word	0x0800a179
 800a104:	0800a1ad 	.word	0x0800a1ad
 800a108:	0800a1e1 	.word	0x0800a1e1
 800a10c:	0800a215 	.word	0x0800a215
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	7c12      	ldrb	r2, [r2, #16]
 800a128:	f107 0108 	add.w	r1, r7, #8
 800a12c:	4610      	mov	r0, r2
 800a12e:	4798      	blx	r3
 800a130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a132:	e091      	b.n	800a258 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 faaa 	bl	800a690 <USBD_CtlError>
        err++;
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	3301      	adds	r3, #1
 800a140:	72fb      	strb	r3, [r7, #11]
      break;
 800a142:	e089      	b.n	800a258 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	7c12      	ldrb	r2, [r2, #16]
 800a15c:	f107 0108 	add.w	r1, r7, #8
 800a160:	4610      	mov	r0, r2
 800a162:	4798      	blx	r3
 800a164:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a166:	e077      	b.n	800a258 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fa90 	bl	800a690 <USBD_CtlError>
        err++;
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	3301      	adds	r3, #1
 800a174:	72fb      	strb	r3, [r7, #11]
      break;
 800a176:	e06f      	b.n	800a258 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00b      	beq.n	800a19c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7c12      	ldrb	r2, [r2, #16]
 800a190:	f107 0108 	add.w	r1, r7, #8
 800a194:	4610      	mov	r0, r2
 800a196:	4798      	blx	r3
 800a198:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a19a:	e05d      	b.n	800a258 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fa76 	bl	800a690 <USBD_CtlError>
        err++;
 800a1a4:	7afb      	ldrb	r3, [r7, #11]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	72fb      	strb	r3, [r7, #11]
      break;
 800a1aa:	e055      	b.n	800a258 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00b      	beq.n	800a1d0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	7c12      	ldrb	r2, [r2, #16]
 800a1c4:	f107 0108 	add.w	r1, r7, #8
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4798      	blx	r3
 800a1cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1ce:	e043      	b.n	800a258 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fa5c 	bl	800a690 <USBD_CtlError>
        err++;
 800a1d8:	7afb      	ldrb	r3, [r7, #11]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	72fb      	strb	r3, [r7, #11]
      break;
 800a1de:	e03b      	b.n	800a258 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00b      	beq.n	800a204 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	7c12      	ldrb	r2, [r2, #16]
 800a1f8:	f107 0108 	add.w	r1, r7, #8
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	4798      	blx	r3
 800a200:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a202:	e029      	b.n	800a258 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fa42 	bl	800a690 <USBD_CtlError>
        err++;
 800a20c:	7afb      	ldrb	r3, [r7, #11]
 800a20e:	3301      	adds	r3, #1
 800a210:	72fb      	strb	r3, [r7, #11]
      break;
 800a212:	e021      	b.n	800a258 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	7c12      	ldrb	r2, [r2, #16]
 800a22c:	f107 0108 	add.w	r1, r7, #8
 800a230:	4610      	mov	r0, r2
 800a232:	4798      	blx	r3
 800a234:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a236:	e00f      	b.n	800a258 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fa28 	bl	800a690 <USBD_CtlError>
        err++;
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	3301      	adds	r3, #1
 800a244:	72fb      	strb	r3, [r7, #11]
      break;
 800a246:	e007      	b.n	800a258 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fa20 	bl	800a690 <USBD_CtlError>
      err++;
 800a250:	7afb      	ldrb	r3, [r7, #11]
 800a252:	3301      	adds	r3, #1
 800a254:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800a256:	bf00      	nop
    }
    break;
 800a258:	e037      	b.n	800a2ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	7c1b      	ldrb	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26a:	f107 0208 	add.w	r2, r7, #8
 800a26e:	4610      	mov	r0, r2
 800a270:	4798      	blx	r3
 800a272:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a274:	e029      	b.n	800a2ca <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fa09 	bl	800a690 <USBD_CtlError>
      err++;
 800a27e:	7afb      	ldrb	r3, [r7, #11]
 800a280:	3301      	adds	r3, #1
 800a282:	72fb      	strb	r3, [r7, #11]
    break;
 800a284:	e021      	b.n	800a2ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7c1b      	ldrb	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10d      	bne.n	800a2aa <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a296:	f107 0208 	add.w	r2, r7, #8
 800a29a:	4610      	mov	r0, r2
 800a29c:	4798      	blx	r3
 800a29e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	2207      	movs	r2, #7
 800a2a6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a2a8:	e00f      	b.n	800a2ca <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f9ef 	bl	800a690 <USBD_CtlError>
      err++;
 800a2b2:	7afb      	ldrb	r3, [r7, #11]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	72fb      	strb	r3, [r7, #11]
    break;
 800a2b8:	e007      	b.n	800a2ca <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f9e7 	bl	800a690 <USBD_CtlError>
    err++;
 800a2c2:	7afb      	ldrb	r3, [r7, #11]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	72fb      	strb	r3, [r7, #11]
    break;
 800a2c8:	bf00      	nop
  }

  if (err != 0U)
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d11e      	bne.n	800a30e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	88db      	ldrh	r3, [r3, #6]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d016      	beq.n	800a306 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800a2d8:	893b      	ldrh	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00e      	beq.n	800a2fc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	88da      	ldrh	r2, [r3, #6]
 800a2e2:	893b      	ldrh	r3, [r7, #8]
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	bf28      	it	cs
 800a2e8:	4613      	movcs	r3, r2
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2ee:	893b      	ldrh	r3, [r7, #8]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	68f9      	ldr	r1, [r7, #12]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fa3c 	bl	800a772 <USBD_CtlSendData>
 800a2fa:	e009      	b.n	800a310 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f9c6 	bl	800a690 <USBD_CtlError>
 800a304:	e004      	b.n	800a310 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fa8d 	bl	800a826 <USBD_CtlSendStatus>
 800a30c:	e000      	b.n	800a310 <USBD_GetDescriptor+0x2cc>
    return;
 800a30e:	bf00      	nop
    }
  }
}
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop

0800a318 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	889b      	ldrh	r3, [r3, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d130      	bne.n	800a38c <USBD_SetAddress+0x74>
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	88db      	ldrh	r3, [r3, #6]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d12c      	bne.n	800a38c <USBD_SetAddress+0x74>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	885b      	ldrh	r3, [r3, #2]
 800a336:	2b7f      	cmp	r3, #127	; 0x7f
 800a338:	d828      	bhi.n	800a38c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	885b      	ldrh	r3, [r3, #2]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a344:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	d104      	bne.n	800a35a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f99c 	bl	800a690 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a358:	e01c      	b.n	800a394 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	7bfa      	ldrb	r2, [r7, #15]
 800a35e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a362:	7bfb      	ldrb	r3, [r7, #15]
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 ff0a 	bl	800b180 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fa5a 	bl	800a826 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a372:	7bfb      	ldrb	r3, [r7, #15]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d004      	beq.n	800a382 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a380:	e008      	b.n	800a394 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38a:	e003      	b.n	800a394 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f97e 	bl	800a690 <USBD_CtlError>
  }
}
 800a394:	bf00      	nop
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	885b      	ldrh	r3, [r3, #2]
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	4b4b      	ldr	r3, [pc, #300]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a3b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3b4:	4b4a      	ldr	r3, [pc, #296]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d905      	bls.n	800a3c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f966 	bl	800a690 <USBD_CtlError>
    return USBD_FAIL;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e087      	b.n	800a4d8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d002      	beq.n	800a3d8 <USBD_SetConfig+0x3c>
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d025      	beq.n	800a422 <USBD_SetConfig+0x86>
 800a3d6:	e071      	b.n	800a4bc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a3d8:	4b41      	ldr	r3, [pc, #260]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01c      	beq.n	800a41a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a3e0:	4b3f      	ldr	r3, [pc, #252]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3ea:	4b3d      	ldr	r3, [pc, #244]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff f9a7 	bl	8009744 <USBD_SetClassConfig>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d004      	beq.n	800a40a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a400:	6839      	ldr	r1, [r7, #0]
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f944 	bl	800a690 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a408:	e065      	b.n	800a4d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa0b 	bl	800a826 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2203      	movs	r2, #3
 800a414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a418:	e05d      	b.n	800a4d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fa03 	bl	800a826 <USBD_CtlSendStatus>
    break;
 800a420:	e059      	b.n	800a4d6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a422:	4b2f      	ldr	r3, [pc, #188]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d112      	bne.n	800a450 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2202      	movs	r2, #2
 800a42e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a432:	4b2b      	ldr	r3, [pc, #172]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a43c:	4b28      	ldr	r3, [pc, #160]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff f99a 	bl	800977c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f9ec 	bl	800a826 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a44e:	e042      	b.n	800a4d6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a450:	4b23      	ldr	r3, [pc, #140]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	461a      	mov	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d02a      	beq.n	800a4b4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff f988 	bl	800977c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a46c:	4b1c      	ldr	r3, [pc, #112]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	461a      	mov	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a476:	4b1a      	ldr	r3, [pc, #104]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff f961 	bl	8009744 <USBD_SetClassConfig>
 800a482:	4603      	mov	r3, r0
 800a484:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00f      	beq.n	800a4ac <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f8fe 	bl	800a690 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff f96d 	bl	800977c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2202      	movs	r2, #2
 800a4a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a4aa:	e014      	b.n	800a4d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f9ba 	bl	800a826 <USBD_CtlSendStatus>
    break;
 800a4b2:	e010      	b.n	800a4d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f9b6 	bl	800a826 <USBD_CtlSendStatus>
    break;
 800a4ba:	e00c      	b.n	800a4d6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f8e6 	bl	800a690 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4c4:	4b06      	ldr	r3, [pc, #24]	; (800a4e0 <USBD_SetConfig+0x144>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7ff f956 	bl	800977c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d4:	bf00      	nop
  }

  return ret;
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	20000400 	.word	0x20000400

0800a4e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	88db      	ldrh	r3, [r3, #6]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d004      	beq.n	800a500 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f8c9 	bl	800a690 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a4fe:	e021      	b.n	800a544 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a506:	2b01      	cmp	r3, #1
 800a508:	db17      	blt.n	800a53a <USBD_GetConfig+0x56>
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	dd02      	ble.n	800a514 <USBD_GetConfig+0x30>
 800a50e:	2b03      	cmp	r3, #3
 800a510:	d00b      	beq.n	800a52a <USBD_GetConfig+0x46>
 800a512:	e012      	b.n	800a53a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3308      	adds	r3, #8
 800a51e:	2201      	movs	r2, #1
 800a520:	4619      	mov	r1, r3
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f925 	bl	800a772 <USBD_CtlSendData>
      break;
 800a528:	e00c      	b.n	800a544 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3304      	adds	r3, #4
 800a52e:	2201      	movs	r2, #1
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f91d 	bl	800a772 <USBD_CtlSendData>
      break;
 800a538:	e004      	b.n	800a544 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f8a7 	bl	800a690 <USBD_CtlError>
      break;
 800a542:	bf00      	nop
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a55c:	3b01      	subs	r3, #1
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d81e      	bhi.n	800a5a0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	88db      	ldrh	r3, [r3, #6]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d004      	beq.n	800a574 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f88f 	bl	800a690 <USBD_CtlError>
      break;
 800a572:	e01a      	b.n	800a5aa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a580:	2b00      	cmp	r3, #0
 800a582:	d005      	beq.n	800a590 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	f043 0202 	orr.w	r2, r3, #2
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	330c      	adds	r3, #12
 800a594:	2202      	movs	r2, #2
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f8ea 	bl	800a772 <USBD_CtlSendData>
    break;
 800a59e:	e004      	b.n	800a5aa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f874 	bl	800a690 <USBD_CtlError>
    break;
 800a5a8:	bf00      	nop
  }
}
 800a5aa:	bf00      	nop
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	885b      	ldrh	r3, [r3, #2]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d106      	bne.n	800a5d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f92a 	bl	800a826 <USBD_CtlSendStatus>
  }
}
 800a5d2:	bf00      	nop
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b082      	sub	sp, #8
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d80b      	bhi.n	800a608 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	885b      	ldrh	r3, [r3, #2]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d10c      	bne.n	800a612 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f910 	bl	800a826 <USBD_CtlSendStatus>
      }
      break;
 800a606:	e004      	b.n	800a612 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f840 	bl	800a690 <USBD_CtlError>
      break;
 800a610:	e000      	b.n	800a614 <USBD_ClrFeature+0x3a>
      break;
 800a612:	bf00      	nop
  }
}
 800a614:	bf00      	nop
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	781a      	ldrb	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3301      	adds	r3, #1
 800a636:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	781a      	ldrb	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3301      	adds	r3, #1
 800a644:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f7ff fad3 	bl	8009bf2 <SWAPBYTE>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461a      	mov	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3301      	adds	r3, #1
 800a658:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3301      	adds	r3, #1
 800a65e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7ff fac6 	bl	8009bf2 <SWAPBYTE>
 800a666:	4603      	mov	r3, r0
 800a668:	461a      	mov	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3301      	adds	r3, #1
 800a672:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3301      	adds	r3, #1
 800a678:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7ff fab9 	bl	8009bf2 <SWAPBYTE>
 800a680:	4603      	mov	r3, r0
 800a682:	461a      	mov	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	80da      	strh	r2, [r3, #6]
}
 800a688:	bf00      	nop
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a69a:	2180      	movs	r1, #128	; 0x80
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fd05 	bl	800b0ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fd01 	bl	800b0ac <USBD_LL_StallEP>
}
 800a6aa:	bf00      	nop
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b086      	sub	sp, #24
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	60b9      	str	r1, [r7, #8]
 800a6bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d036      	beq.n	800a736 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a6cc:	6938      	ldr	r0, [r7, #16]
 800a6ce:	f000 f836 	bl	800a73e <USBD_GetLen>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	005b      	lsls	r3, r3, #1
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	7812      	ldrb	r2, [r2, #0]
 800a6ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	2203      	movs	r2, #3
 800a6fa:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	3301      	adds	r3, #1
 800a700:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a702:	e013      	b.n	800a72c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a704:	7dfb      	ldrb	r3, [r7, #23]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	4413      	add	r3, r2
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	7812      	ldrb	r2, [r2, #0]
 800a70e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	3301      	adds	r3, #1
 800a714:	613b      	str	r3, [r7, #16]
    idx++;
 800a716:	7dfb      	ldrb	r3, [r7, #23]
 800a718:	3301      	adds	r3, #1
 800a71a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	4413      	add	r3, r2
 800a722:	2200      	movs	r2, #0
 800a724:	701a      	strb	r2, [r3, #0]
    idx++;
 800a726:	7dfb      	ldrb	r3, [r7, #23]
 800a728:	3301      	adds	r3, #1
 800a72a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1e7      	bne.n	800a704 <USBD_GetString+0x52>
 800a734:	e000      	b.n	800a738 <USBD_GetString+0x86>
    return;
 800a736:	bf00      	nop
  }
}
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a73e:	b480      	push	{r7}
 800a740:	b085      	sub	sp, #20
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a74e:	e005      	b.n	800a75c <USBD_GetLen+0x1e>
  {
    len++;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	3301      	adds	r3, #1
 800a754:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	3301      	adds	r3, #1
 800a75a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1f5      	bne.n	800a750 <USBD_GetLen+0x12>
  }

  return len;
 800a764:	7bfb      	ldrb	r3, [r7, #15]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2202      	movs	r2, #2
 800a782:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	2100      	movs	r1, #0
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 fd10 	bl	800b1be <USBD_LL_Transmit>

  return USBD_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f000 fcff 	bl	800b1be <USBD_LL_Transmit>

  return USBD_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	60f8      	str	r0, [r7, #12]
 800a7d2:	60b9      	str	r1, [r7, #8]
 800a7d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2203      	movs	r2, #3
 800a7da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 fd03 	bl	800b200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	2100      	movs	r1, #0
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 fcf2 	bl	800b200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b082      	sub	sp, #8
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2204      	movs	r2, #4
 800a832:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a836:	2300      	movs	r3, #0
 800a838:	2200      	movs	r2, #0
 800a83a:	2100      	movs	r1, #0
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fcbe 	bl	800b1be <USBD_LL_Transmit>

  return USBD_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2205      	movs	r2, #5
 800a858:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a85c:	2300      	movs	r3, #0
 800a85e:	2200      	movs	r2, #0
 800a860:	2100      	movs	r1, #0
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fccc 	bl	800b200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a878:	2200      	movs	r2, #0
 800a87a:	4912      	ldr	r1, [pc, #72]	; (800a8c4 <MX_USB_DEVICE_Init+0x50>)
 800a87c:	4812      	ldr	r0, [pc, #72]	; (800a8c8 <MX_USB_DEVICE_Init+0x54>)
 800a87e:	f7fe fef3 	bl	8009668 <USBD_Init>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a888:	f7f7 fbf2 	bl	8002070 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a88c:	490f      	ldr	r1, [pc, #60]	; (800a8cc <MX_USB_DEVICE_Init+0x58>)
 800a88e:	480e      	ldr	r0, [pc, #56]	; (800a8c8 <MX_USB_DEVICE_Init+0x54>)
 800a890:	f7fe ff20 	bl	80096d4 <USBD_RegisterClass>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a89a:	f7f7 fbe9 	bl	8002070 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a89e:	490c      	ldr	r1, [pc, #48]	; (800a8d0 <MX_USB_DEVICE_Init+0x5c>)
 800a8a0:	4809      	ldr	r0, [pc, #36]	; (800a8c8 <MX_USB_DEVICE_Init+0x54>)
 800a8a2:	f7fe fe45 	bl	8009530 <USBD_CDC_RegisterInterface>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a8ac:	f7f7 fbe0 	bl	8002070 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a8b0:	4805      	ldr	r0, [pc, #20]	; (800a8c8 <MX_USB_DEVICE_Init+0x54>)
 800a8b2:	f7fe ff30 	bl	8009716 <USBD_Start>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a8bc:	f7f7 fbd8 	bl	8002070 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a8c0:	bf00      	nop
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	200001a4 	.word	0x200001a4
 800a8c8:	20000a34 	.word	0x20000a34
 800a8cc:	20000084 	.word	0x20000084
 800a8d0:	20000188 	.word	0x20000188

0800a8d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8d8:	2200      	movs	r2, #0
 800a8da:	4905      	ldr	r1, [pc, #20]	; (800a8f0 <CDC_Init_FS+0x1c>)
 800a8dc:	4805      	ldr	r0, [pc, #20]	; (800a8f4 <CDC_Init_FS+0x20>)
 800a8de:	f7fe fe3c 	bl	800955a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8e2:	4905      	ldr	r1, [pc, #20]	; (800a8f8 <CDC_Init_FS+0x24>)
 800a8e4:	4803      	ldr	r0, [pc, #12]	; (800a8f4 <CDC_Init_FS+0x20>)
 800a8e6:	f7fe fe51 	bl	800958c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	20000d68 	.word	0x20000d68
 800a8f4:	20000a34 	.word	0x20000a34
 800a8f8:	20000d04 	.word	0x20000d04

0800a8fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a900:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a902:	4618      	mov	r0, r3
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	6039      	str	r1, [r7, #0]
 800a916:	71fb      	strb	r3, [r7, #7]
 800a918:	4613      	mov	r3, r2
 800a91a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint8_t lineCoding[7] = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 }; // 115200bps, 1stop, no parity, 8bit

  switch(cmd)
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	2b23      	cmp	r3, #35	; 0x23
 800a920:	d85c      	bhi.n	800a9dc <CDC_Control_FS+0xd0>
 800a922:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <CDC_Control_FS+0x1c>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a9dd 	.word	0x0800a9dd
 800a92c:	0800a9dd 	.word	0x0800a9dd
 800a930:	0800a9dd 	.word	0x0800a9dd
 800a934:	0800a9dd 	.word	0x0800a9dd
 800a938:	0800a9dd 	.word	0x0800a9dd
 800a93c:	0800a9dd 	.word	0x0800a9dd
 800a940:	0800a9dd 	.word	0x0800a9dd
 800a944:	0800a9dd 	.word	0x0800a9dd
 800a948:	0800a9dd 	.word	0x0800a9dd
 800a94c:	0800a9dd 	.word	0x0800a9dd
 800a950:	0800a9dd 	.word	0x0800a9dd
 800a954:	0800a9dd 	.word	0x0800a9dd
 800a958:	0800a9dd 	.word	0x0800a9dd
 800a95c:	0800a9dd 	.word	0x0800a9dd
 800a960:	0800a9dd 	.word	0x0800a9dd
 800a964:	0800a9dd 	.word	0x0800a9dd
 800a968:	0800a9dd 	.word	0x0800a9dd
 800a96c:	0800a9dd 	.word	0x0800a9dd
 800a970:	0800a9dd 	.word	0x0800a9dd
 800a974:	0800a9dd 	.word	0x0800a9dd
 800a978:	0800a9dd 	.word	0x0800a9dd
 800a97c:	0800a9dd 	.word	0x0800a9dd
 800a980:	0800a9dd 	.word	0x0800a9dd
 800a984:	0800a9dd 	.word	0x0800a9dd
 800a988:	0800a9dd 	.word	0x0800a9dd
 800a98c:	0800a9dd 	.word	0x0800a9dd
 800a990:	0800a9dd 	.word	0x0800a9dd
 800a994:	0800a9dd 	.word	0x0800a9dd
 800a998:	0800a9dd 	.word	0x0800a9dd
 800a99c:	0800a9dd 	.word	0x0800a9dd
 800a9a0:	0800a9dd 	.word	0x0800a9dd
 800a9a4:	0800a9dd 	.word	0x0800a9dd
 800a9a8:	0800a9b9 	.word	0x0800a9b9
 800a9ac:	0800a9cb 	.word	0x0800a9cb
 800a9b0:	0800a9dd 	.word	0x0800a9dd
 800a9b4:	0800a9dd 	.word	0x0800a9dd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800a9b8:	4b0c      	ldr	r3, [pc, #48]	; (800a9ec <CDC_Control_FS+0xe0>)
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	6810      	ldr	r0, [r2, #0]
 800a9be:	6018      	str	r0, [r3, #0]
 800a9c0:	8891      	ldrh	r1, [r2, #4]
 800a9c2:	7992      	ldrb	r2, [r2, #6]
 800a9c4:	8099      	strh	r1, [r3, #4]
 800a9c6:	719a      	strb	r2, [r3, #6]
    break;
 800a9c8:	e009      	b.n	800a9de <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	4a07      	ldr	r2, [pc, #28]	; (800a9ec <CDC_Control_FS+0xe0>)
 800a9ce:	6810      	ldr	r0, [r2, #0]
 800a9d0:	6018      	str	r0, [r3, #0]
 800a9d2:	8891      	ldrh	r1, [r2, #4]
 800a9d4:	7992      	ldrb	r2, [r2, #6]
 800a9d6:	8099      	strh	r1, [r3, #4]
 800a9d8:	719a      	strb	r2, [r3, #6]
    break;
 800a9da:	e000      	b.n	800a9de <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a9dc:	bf00      	nop
  }

  return (USBD_OK);
 800a9de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	2000019c 	.word	0x2000019c

0800a9f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9fa:	6879      	ldr	r1, [r7, #4]
 800a9fc:	4811      	ldr	r0, [pc, #68]	; (800aa44 <CDC_Receive_FS+0x54>)
 800a9fe:	f7fe fdc5 	bl	800958c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa02:	4810      	ldr	r0, [pc, #64]	; (800aa44 <CDC_Receive_FS+0x54>)
 800aa04:	f7fe fe06 	bl	8009614 <USBD_CDC_ReceivePacket>
	  extern uint8_t ReceivedData[100]; // Tablica przechowujaca odebrane dane
	  extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

	  // Wyczyszczenie tablicy odebranych danych
	  uint8_t iter;
	  for(iter = 0; iter<100; ++iter){
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
 800aa0c:	e006      	b.n	800aa1c <CDC_Receive_FS+0x2c>
		  ReceivedData[iter] = 0;
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	4a0d      	ldr	r2, [pc, #52]	; (800aa48 <CDC_Receive_FS+0x58>)
 800aa12:	2100      	movs	r1, #0
 800aa14:	54d1      	strb	r1, [r2, r3]
	  for(iter = 0; iter<100; ++iter){
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	73fb      	strb	r3, [r7, #15]
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	2b63      	cmp	r3, #99	; 0x63
 800aa20:	d9f5      	bls.n	800aa0e <CDC_Receive_FS+0x1e>
	  }

	  strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	461a      	mov	r2, r3
 800aa2a:	6879      	ldr	r1, [r7, #4]
 800aa2c:	4806      	ldr	r0, [pc, #24]	; (800aa48 <CDC_Receive_FS+0x58>)
 800aa2e:	f001 fc90 	bl	800c352 <strlcpy>
	  ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 800aa32:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <CDC_Receive_FS+0x5c>)
 800aa34:	2201      	movs	r2, #1
 800aa36:	701a      	strb	r2, [r3, #0]

	  return (USBD_OK);
 800aa38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000a34 	.word	0x20000a34
 800aa48:	200007e0 	.word	0x200007e0
 800aa4c:	200003e4 	.word	0x200003e4

0800aa50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa60:	4b0d      	ldr	r3, [pc, #52]	; (800aa98 <CDC_Transmit_FS+0x48>)
 800aa62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e00b      	b.n	800aa8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa76:	887b      	ldrh	r3, [r7, #2]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6879      	ldr	r1, [r7, #4]
 800aa7c:	4806      	ldr	r0, [pc, #24]	; (800aa98 <CDC_Transmit_FS+0x48>)
 800aa7e:	f7fe fd6c 	bl	800955a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa82:	4805      	ldr	r0, [pc, #20]	; (800aa98 <CDC_Transmit_FS+0x48>)
 800aa84:	f7fe fd96 	bl	80095b4 <USBD_CDC_TransmitPacket>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	20000a34 	.word	0x20000a34

0800aa9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aaae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	371c      	adds	r7, #28
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
	...

0800aac0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	4603      	mov	r3, r0
 800aac8:	6039      	str	r1, [r7, #0]
 800aaca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	2212      	movs	r2, #18
 800aad0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aad2:	4b03      	ldr	r3, [pc, #12]	; (800aae0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	200001c0 	.word	0x200001c0

0800aae4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	2204      	movs	r2, #4
 800aaf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aaf6:	4b03      	ldr	r3, [pc, #12]	; (800ab04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	200001d4 	.word	0x200001d4

0800ab08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	6039      	str	r1, [r7, #0]
 800ab12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d105      	bne.n	800ab26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	4907      	ldr	r1, [pc, #28]	; (800ab3c <USBD_FS_ProductStrDescriptor+0x34>)
 800ab1e:	4808      	ldr	r0, [pc, #32]	; (800ab40 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab20:	f7ff fdc7 	bl	800a6b2 <USBD_GetString>
 800ab24:	e004      	b.n	800ab30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	4904      	ldr	r1, [pc, #16]	; (800ab3c <USBD_FS_ProductStrDescriptor+0x34>)
 800ab2a:	4805      	ldr	r0, [pc, #20]	; (800ab40 <USBD_FS_ProductStrDescriptor+0x38>)
 800ab2c:	f7ff fdc1 	bl	800a6b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab30:	4b02      	ldr	r3, [pc, #8]	; (800ab3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20000dcc 	.word	0x20000dcc
 800ab40:	08012d40 	.word	0x08012d40

0800ab44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	6039      	str	r1, [r7, #0]
 800ab4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	4904      	ldr	r1, [pc, #16]	; (800ab64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab54:	4804      	ldr	r0, [pc, #16]	; (800ab68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab56:	f7ff fdac 	bl	800a6b2 <USBD_GetString>
  return USBD_StrDesc;
 800ab5a:	4b02      	ldr	r3, [pc, #8]	; (800ab64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	20000dcc 	.word	0x20000dcc
 800ab68:	08012d58 	.word	0x08012d58

0800ab6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	6039      	str	r1, [r7, #0]
 800ab76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	221a      	movs	r2, #26
 800ab7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab7e:	f000 f843 	bl	800ac08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab82:	4b02      	ldr	r3, [pc, #8]	; (800ab8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	200001d8 	.word	0x200001d8

0800ab90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	6039      	str	r1, [r7, #0]
 800ab9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d105      	bne.n	800abae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	4907      	ldr	r1, [pc, #28]	; (800abc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aba6:	4808      	ldr	r0, [pc, #32]	; (800abc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aba8:	f7ff fd83 	bl	800a6b2 <USBD_GetString>
 800abac:	e004      	b.n	800abb8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	4904      	ldr	r1, [pc, #16]	; (800abc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800abb2:	4805      	ldr	r0, [pc, #20]	; (800abc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800abb4:	f7ff fd7d 	bl	800a6b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb8:	4b02      	ldr	r3, [pc, #8]	; (800abc4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20000dcc 	.word	0x20000dcc
 800abc8:	08012d6c 	.word	0x08012d6c

0800abcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	6039      	str	r1, [r7, #0]
 800abd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abd8:	79fb      	ldrb	r3, [r7, #7]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d105      	bne.n	800abea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	4907      	ldr	r1, [pc, #28]	; (800ac00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abe2:	4808      	ldr	r0, [pc, #32]	; (800ac04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abe4:	f7ff fd65 	bl	800a6b2 <USBD_GetString>
 800abe8:	e004      	b.n	800abf4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	4904      	ldr	r1, [pc, #16]	; (800ac00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abee:	4805      	ldr	r0, [pc, #20]	; (800ac04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abf0:	f7ff fd5f 	bl	800a6b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abf4:	4b02      	ldr	r3, [pc, #8]	; (800ac00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	20000dcc 	.word	0x20000dcc
 800ac04:	08012d78 	.word	0x08012d78

0800ac08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac0e:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <Get_SerialNum+0x44>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac14:	4b0e      	ldr	r3, [pc, #56]	; (800ac50 <Get_SerialNum+0x48>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac1a:	4b0e      	ldr	r3, [pc, #56]	; (800ac54 <Get_SerialNum+0x4c>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4413      	add	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d009      	beq.n	800ac42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac2e:	2208      	movs	r2, #8
 800ac30:	4909      	ldr	r1, [pc, #36]	; (800ac58 <Get_SerialNum+0x50>)
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 f814 	bl	800ac60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac38:	2204      	movs	r2, #4
 800ac3a:	4908      	ldr	r1, [pc, #32]	; (800ac5c <Get_SerialNum+0x54>)
 800ac3c:	68b8      	ldr	r0, [r7, #8]
 800ac3e:	f000 f80f 	bl	800ac60 <IntToUnicode>
  }
}
 800ac42:	bf00      	nop
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	1fff7a10 	.word	0x1fff7a10
 800ac50:	1fff7a14 	.word	0x1fff7a14
 800ac54:	1fff7a18 	.word	0x1fff7a18
 800ac58:	200001da 	.word	0x200001da
 800ac5c:	200001ea 	.word	0x200001ea

0800ac60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b087      	sub	sp, #28
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac72:	2300      	movs	r3, #0
 800ac74:	75fb      	strb	r3, [r7, #23]
 800ac76:	e027      	b.n	800acc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	0f1b      	lsrs	r3, r3, #28
 800ac7c:	2b09      	cmp	r3, #9
 800ac7e:	d80b      	bhi.n	800ac98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	0f1b      	lsrs	r3, r3, #28
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	7dfb      	ldrb	r3, [r7, #23]
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	440b      	add	r3, r1
 800ac90:	3230      	adds	r2, #48	; 0x30
 800ac92:	b2d2      	uxtb	r2, r2
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	e00a      	b.n	800acae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	0f1b      	lsrs	r3, r3, #28
 800ac9c:	b2da      	uxtb	r2, r3
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	005b      	lsls	r3, r3, #1
 800aca2:	4619      	mov	r1, r3
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	440b      	add	r3, r1
 800aca8:	3237      	adds	r2, #55	; 0x37
 800acaa:	b2d2      	uxtb	r2, r2
 800acac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	011b      	lsls	r3, r3, #4
 800acb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800acb4:	7dfb      	ldrb	r3, [r7, #23]
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	3301      	adds	r3, #1
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	4413      	add	r3, r2
 800acbe:	2200      	movs	r2, #0
 800acc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	3301      	adds	r3, #1
 800acc6:	75fb      	strb	r3, [r7, #23]
 800acc8:	7dfa      	ldrb	r2, [r7, #23]
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	429a      	cmp	r2, r3
 800acce:	d3d3      	bcc.n	800ac78 <IntToUnicode+0x18>
  }
}
 800acd0:	bf00      	nop
 800acd2:	371c      	adds	r7, #28
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08a      	sub	sp, #40	; 0x28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ace4:	f107 0314 	add.w	r3, r7, #20
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
 800acec:	605a      	str	r2, [r3, #4]
 800acee:	609a      	str	r2, [r3, #8]
 800acf0:	60da      	str	r2, [r3, #12]
 800acf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acfc:	d13a      	bne.n	800ad74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acfe:	2300      	movs	r3, #0
 800ad00:	613b      	str	r3, [r7, #16]
 800ad02:	4b1e      	ldr	r3, [pc, #120]	; (800ad7c <HAL_PCD_MspInit+0xa0>)
 800ad04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad06:	4a1d      	ldr	r2, [pc, #116]	; (800ad7c <HAL_PCD_MspInit+0xa0>)
 800ad08:	f043 0301 	orr.w	r3, r3, #1
 800ad0c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad0e:	4b1b      	ldr	r3, [pc, #108]	; (800ad7c <HAL_PCD_MspInit+0xa0>)
 800ad10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	613b      	str	r3, [r7, #16]
 800ad18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ad1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ad1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad20:	2302      	movs	r3, #2
 800ad22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad2c:	230a      	movs	r3, #10
 800ad2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad30:	f107 0314 	add.w	r3, r7, #20
 800ad34:	4619      	mov	r1, r3
 800ad36:	4812      	ldr	r0, [pc, #72]	; (800ad80 <HAL_PCD_MspInit+0xa4>)
 800ad38:	f7f9 f86c 	bl	8003e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad3c:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <HAL_PCD_MspInit+0xa0>)
 800ad3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad40:	4a0e      	ldr	r2, [pc, #56]	; (800ad7c <HAL_PCD_MspInit+0xa0>)
 800ad42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad46:	6353      	str	r3, [r2, #52]	; 0x34
 800ad48:	2300      	movs	r3, #0
 800ad4a:	60fb      	str	r3, [r7, #12]
 800ad4c:	4b0b      	ldr	r3, [pc, #44]	; (800ad7c <HAL_PCD_MspInit+0xa0>)
 800ad4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad50:	4a0a      	ldr	r2, [pc, #40]	; (800ad7c <HAL_PCD_MspInit+0xa0>)
 800ad52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad56:	6453      	str	r3, [r2, #68]	; 0x44
 800ad58:	4b08      	ldr	r3, [pc, #32]	; (800ad7c <HAL_PCD_MspInit+0xa0>)
 800ad5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad60:	60fb      	str	r3, [r7, #12]
 800ad62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad64:	2200      	movs	r2, #0
 800ad66:	2100      	movs	r1, #0
 800ad68:	2043      	movs	r0, #67	; 0x43
 800ad6a:	f7f8 fd12 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad6e:	2043      	movs	r0, #67	; 0x43
 800ad70:	f7f8 fd2b 	bl	80037ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad74:	bf00      	nop
 800ad76:	3728      	adds	r7, #40	; 0x28
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	40023800 	.word	0x40023800
 800ad80:	40020000 	.word	0x40020000

0800ad84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7fe fd06 	bl	80097ac <USBD_LL_SetupStage>
}
 800ada0:	bf00      	nop
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800adba:	78fa      	ldrb	r2, [r7, #3]
 800adbc:	6879      	ldr	r1, [r7, #4]
 800adbe:	4613      	mov	r3, r2
 800adc0:	00db      	lsls	r3, r3, #3
 800adc2:	1a9b      	subs	r3, r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	440b      	add	r3, r1
 800adc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	78fb      	ldrb	r3, [r7, #3]
 800add0:	4619      	mov	r1, r3
 800add2:	f7fe fd3e 	bl	8009852 <USBD_LL_DataOutStage>
}
 800add6:	bf00      	nop
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	460b      	mov	r3, r1
 800ade8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800adf0:	78fa      	ldrb	r2, [r7, #3]
 800adf2:	6879      	ldr	r1, [r7, #4]
 800adf4:	4613      	mov	r3, r2
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	440b      	add	r3, r1
 800adfe:	3348      	adds	r3, #72	; 0x48
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	78fb      	ldrb	r3, [r7, #3]
 800ae04:	4619      	mov	r1, r3
 800ae06:	f7fe fd87 	bl	8009918 <USBD_LL_DataInStage>
}
 800ae0a:	bf00      	nop
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fe fe8b 	bl	8009b3c <USBD_LL_SOF>
}
 800ae26:	bf00      	nop
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae36:	2301      	movs	r3, #1
 800ae38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d001      	beq.n	800ae46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae42:	f7f7 f915 	bl	8002070 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae4c:	7bfa      	ldrb	r2, [r7, #15]
 800ae4e:	4611      	mov	r1, r2
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fe fe38 	bl	8009ac6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe fdf1 	bl	8009a44 <USBD_LL_Reset>
}
 800ae62:	bf00      	nop
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
	...

0800ae6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fe fe33 	bl	8009ae6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	6812      	ldr	r2, [r2, #0]
 800ae8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae92:	f043 0301 	orr.w	r3, r3, #1
 800ae96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d005      	beq.n	800aeac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aea0:	4b04      	ldr	r3, [pc, #16]	; (800aeb4 <HAL_PCD_SuspendCallback+0x48>)
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	4a03      	ldr	r2, [pc, #12]	; (800aeb4 <HAL_PCD_SuspendCallback+0x48>)
 800aea6:	f043 0306 	orr.w	r3, r3, #6
 800aeaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aeac:	bf00      	nop
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	e000ed00 	.word	0xe000ed00

0800aeb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fe22 	bl	8009b10 <USBD_LL_Resume>
}
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aee6:	78fa      	ldrb	r2, [r7, #3]
 800aee8:	4611      	mov	r1, r2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe fe4d 	bl	8009b8a <USBD_LL_IsoOUTIncomplete>
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af0a:	78fa      	ldrb	r2, [r7, #3]
 800af0c:	4611      	mov	r1, r2
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fe fe2e 	bl	8009b70 <USBD_LL_IsoINIncomplete>
}
 800af14:	bf00      	nop
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe fe3a 	bl	8009ba4 <USBD_LL_DevConnected>
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe fe37 	bl	8009bba <USBD_LL_DevDisconnected>
}
 800af4c:	bf00      	nop
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d13c      	bne.n	800afde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af64:	4a20      	ldr	r2, [pc, #128]	; (800afe8 <USBD_LL_Init+0x94>)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a1e      	ldr	r2, [pc, #120]	; (800afe8 <USBD_LL_Init+0x94>)
 800af70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af74:	4b1c      	ldr	r3, [pc, #112]	; (800afe8 <USBD_LL_Init+0x94>)
 800af76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800af7c:	4b1a      	ldr	r3, [pc, #104]	; (800afe8 <USBD_LL_Init+0x94>)
 800af7e:	2204      	movs	r2, #4
 800af80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af82:	4b19      	ldr	r3, [pc, #100]	; (800afe8 <USBD_LL_Init+0x94>)
 800af84:	2202      	movs	r2, #2
 800af86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af88:	4b17      	ldr	r3, [pc, #92]	; (800afe8 <USBD_LL_Init+0x94>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af8e:	4b16      	ldr	r3, [pc, #88]	; (800afe8 <USBD_LL_Init+0x94>)
 800af90:	2202      	movs	r2, #2
 800af92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af94:	4b14      	ldr	r3, [pc, #80]	; (800afe8 <USBD_LL_Init+0x94>)
 800af96:	2200      	movs	r2, #0
 800af98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af9a:	4b13      	ldr	r3, [pc, #76]	; (800afe8 <USBD_LL_Init+0x94>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800afa0:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <USBD_LL_Init+0x94>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800afa6:	4b10      	ldr	r3, [pc, #64]	; (800afe8 <USBD_LL_Init+0x94>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800afac:	4b0e      	ldr	r3, [pc, #56]	; (800afe8 <USBD_LL_Init+0x94>)
 800afae:	2200      	movs	r2, #0
 800afb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800afb2:	480d      	ldr	r0, [pc, #52]	; (800afe8 <USBD_LL_Init+0x94>)
 800afb4:	f7f9 f8e1 	bl	800417a <HAL_PCD_Init>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800afbe:	f7f7 f857 	bl	8002070 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800afc2:	2180      	movs	r1, #128	; 0x80
 800afc4:	4808      	ldr	r0, [pc, #32]	; (800afe8 <USBD_LL_Init+0x94>)
 800afc6:	f7fa fa3e 	bl	8005446 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800afca:	2240      	movs	r2, #64	; 0x40
 800afcc:	2100      	movs	r1, #0
 800afce:	4806      	ldr	r0, [pc, #24]	; (800afe8 <USBD_LL_Init+0x94>)
 800afd0:	f7fa f9f2 	bl	80053b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800afd4:	2280      	movs	r2, #128	; 0x80
 800afd6:	2101      	movs	r1, #1
 800afd8:	4803      	ldr	r0, [pc, #12]	; (800afe8 <USBD_LL_Init+0x94>)
 800afda:	f7fa f9ed 	bl	80053b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	20000fcc 	.word	0x20000fcc

0800afec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b002:	4618      	mov	r0, r3
 800b004:	f7f9 f9d6 	bl	80043b4 <HAL_PCD_Start>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 f92a 	bl	800b268 <USBD_Get_USB_Status>
 800b014:	4603      	mov	r3, r0
 800b016:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b018:	7bbb      	ldrb	r3, [r7, #14]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	4608      	mov	r0, r1
 800b02c:	4611      	mov	r1, r2
 800b02e:	461a      	mov	r2, r3
 800b030:	4603      	mov	r3, r0
 800b032:	70fb      	strb	r3, [r7, #3]
 800b034:	460b      	mov	r3, r1
 800b036:	70bb      	strb	r3, [r7, #2]
 800b038:	4613      	mov	r3, r2
 800b03a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b04a:	78bb      	ldrb	r3, [r7, #2]
 800b04c:	883a      	ldrh	r2, [r7, #0]
 800b04e:	78f9      	ldrb	r1, [r7, #3]
 800b050:	f7f9 fdba 	bl	8004bc8 <HAL_PCD_EP_Open>
 800b054:	4603      	mov	r3, r0
 800b056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 f904 	bl	800b268 <USBD_Get_USB_Status>
 800b060:	4603      	mov	r3, r0
 800b062:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b064:	7bbb      	ldrb	r3, [r7, #14]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	460b      	mov	r3, r1
 800b078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b088:	78fa      	ldrb	r2, [r7, #3]
 800b08a:	4611      	mov	r1, r2
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7f9 fe03 	bl	8004c98 <HAL_PCD_EP_Close>
 800b092:	4603      	mov	r3, r0
 800b094:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	4618      	mov	r0, r3
 800b09a:	f000 f8e5 	bl	800b268 <USBD_Get_USB_Status>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0c6:	78fa      	ldrb	r2, [r7, #3]
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f9 fedb 	bl	8004e86 <HAL_PCD_EP_SetStall>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 f8c6 	bl	800b268 <USBD_Get_USB_Status>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800b0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b104:	78fa      	ldrb	r2, [r7, #3]
 800b106:	4611      	mov	r1, r2
 800b108:	4618      	mov	r0, r3
 800b10a:	f7f9 ff20 	bl	8004f4e <HAL_PCD_EP_ClrStall>
 800b10e:	4603      	mov	r3, r0
 800b110:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800b112:	7bfb      	ldrb	r3, [r7, #15]
 800b114:	4618      	mov	r0, r3
 800b116:	f000 f8a7 	bl	800b268 <USBD_Get_USB_Status>
 800b11a:	4603      	mov	r3, r0
 800b11c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b13a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b13c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b140:	2b00      	cmp	r3, #0
 800b142:	da0b      	bge.n	800b15c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b144:	78fb      	ldrb	r3, [r7, #3]
 800b146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b14a:	68f9      	ldr	r1, [r7, #12]
 800b14c:	4613      	mov	r3, r2
 800b14e:	00db      	lsls	r3, r3, #3
 800b150:	1a9b      	subs	r3, r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	440b      	add	r3, r1
 800b156:	333e      	adds	r3, #62	; 0x3e
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	e00b      	b.n	800b174 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b15c:	78fb      	ldrb	r3, [r7, #3]
 800b15e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b162:	68f9      	ldr	r1, [r7, #12]
 800b164:	4613      	mov	r3, r2
 800b166:	00db      	lsls	r3, r3, #3
 800b168:	1a9b      	subs	r3, r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	440b      	add	r3, r1
 800b16e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b172:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b19a:	78fa      	ldrb	r2, [r7, #3]
 800b19c:	4611      	mov	r1, r2
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7f9 fced 	bl	8004b7e <HAL_PCD_SetAddress>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 f85c 	bl	800b268 <USBD_Get_USB_Status>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b086      	sub	sp, #24
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	60f8      	str	r0, [r7, #12]
 800b1c6:	607a      	str	r2, [r7, #4]
 800b1c8:	603b      	str	r3, [r7, #0]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1dc:	7af9      	ldrb	r1, [r7, #11]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	f7f9 fe06 	bl	8004df2 <HAL_PCD_EP_Transmit>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 f83b 	bl	800b268 <USBD_Get_USB_Status>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800b1f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	607a      	str	r2, [r7, #4]
 800b20a:	603b      	str	r3, [r7, #0]
 800b20c:	460b      	mov	r3, r1
 800b20e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b214:	2300      	movs	r3, #0
 800b216:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b21e:	7af9      	ldrb	r1, [r7, #11]
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	f7f9 fd82 	bl	8004d2c <HAL_PCD_EP_Receive>
 800b228:	4603      	mov	r3, r0
 800b22a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 f81a 	bl	800b268 <USBD_Get_USB_Status>
 800b234:	4603      	mov	r3, r0
 800b236:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800b238:	7dbb      	ldrb	r3, [r7, #22]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3718      	adds	r7, #24
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b082      	sub	sp, #8
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	460b      	mov	r3, r1
 800b24c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b254:	78fa      	ldrb	r2, [r7, #3]
 800b256:	4611      	mov	r1, r2
 800b258:	4618      	mov	r0, r3
 800b25a:	f7f9 fdb2 	bl	8004dc2 <HAL_PCD_EP_GetRxCount>
 800b25e:	4603      	mov	r3, r0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b276:	79fb      	ldrb	r3, [r7, #7]
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d817      	bhi.n	800b2ac <USBD_Get_USB_Status+0x44>
 800b27c:	a201      	add	r2, pc, #4	; (adr r2, 800b284 <USBD_Get_USB_Status+0x1c>)
 800b27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b282:	bf00      	nop
 800b284:	0800b295 	.word	0x0800b295
 800b288:	0800b29b 	.word	0x0800b29b
 800b28c:	0800b2a1 	.word	0x0800b2a1
 800b290:	0800b2a7 	.word	0x0800b2a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	73fb      	strb	r3, [r7, #15]
    break;
 800b298:	e00b      	b.n	800b2b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b29a:	2303      	movs	r3, #3
 800b29c:	73fb      	strb	r3, [r7, #15]
    break;
 800b29e:	e008      	b.n	800b2b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a4:	e005      	b.n	800b2b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b2aa:	e002      	b.n	800b2b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b0:	bf00      	nop
  }
  return usb_status;
 800b2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <__errno>:
 800b2c0:	4b01      	ldr	r3, [pc, #4]	; (800b2c8 <__errno+0x8>)
 800b2c2:	6818      	ldr	r0, [r3, #0]
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	200001f4 	.word	0x200001f4

0800b2cc <__libc_init_array>:
 800b2cc:	b570      	push	{r4, r5, r6, lr}
 800b2ce:	4e0d      	ldr	r6, [pc, #52]	; (800b304 <__libc_init_array+0x38>)
 800b2d0:	4c0d      	ldr	r4, [pc, #52]	; (800b308 <__libc_init_array+0x3c>)
 800b2d2:	1ba4      	subs	r4, r4, r6
 800b2d4:	10a4      	asrs	r4, r4, #2
 800b2d6:	2500      	movs	r5, #0
 800b2d8:	42a5      	cmp	r5, r4
 800b2da:	d109      	bne.n	800b2f0 <__libc_init_array+0x24>
 800b2dc:	4e0b      	ldr	r6, [pc, #44]	; (800b30c <__libc_init_array+0x40>)
 800b2de:	4c0c      	ldr	r4, [pc, #48]	; (800b310 <__libc_init_array+0x44>)
 800b2e0:	f007 fc60 	bl	8012ba4 <_init>
 800b2e4:	1ba4      	subs	r4, r4, r6
 800b2e6:	10a4      	asrs	r4, r4, #2
 800b2e8:	2500      	movs	r5, #0
 800b2ea:	42a5      	cmp	r5, r4
 800b2ec:	d105      	bne.n	800b2fa <__libc_init_array+0x2e>
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
 800b2f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2f4:	4798      	blx	r3
 800b2f6:	3501      	adds	r5, #1
 800b2f8:	e7ee      	b.n	800b2d8 <__libc_init_array+0xc>
 800b2fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2fe:	4798      	blx	r3
 800b300:	3501      	adds	r5, #1
 800b302:	e7f2      	b.n	800b2ea <__libc_init_array+0x1e>
 800b304:	08013358 	.word	0x08013358
 800b308:	08013358 	.word	0x08013358
 800b30c:	08013358 	.word	0x08013358
 800b310:	0801335c 	.word	0x0801335c

0800b314 <malloc>:
 800b314:	4b02      	ldr	r3, [pc, #8]	; (800b320 <malloc+0xc>)
 800b316:	4601      	mov	r1, r0
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	f000 b861 	b.w	800b3e0 <_malloc_r>
 800b31e:	bf00      	nop
 800b320:	200001f4 	.word	0x200001f4

0800b324 <free>:
 800b324:	4b02      	ldr	r3, [pc, #8]	; (800b330 <free+0xc>)
 800b326:	4601      	mov	r1, r0
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	f000 b80b 	b.w	800b344 <_free_r>
 800b32e:	bf00      	nop
 800b330:	200001f4 	.word	0x200001f4

0800b334 <memset>:
 800b334:	4402      	add	r2, r0
 800b336:	4603      	mov	r3, r0
 800b338:	4293      	cmp	r3, r2
 800b33a:	d100      	bne.n	800b33e <memset+0xa>
 800b33c:	4770      	bx	lr
 800b33e:	f803 1b01 	strb.w	r1, [r3], #1
 800b342:	e7f9      	b.n	800b338 <memset+0x4>

0800b344 <_free_r>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4605      	mov	r5, r0
 800b348:	2900      	cmp	r1, #0
 800b34a:	d045      	beq.n	800b3d8 <_free_r+0x94>
 800b34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b350:	1f0c      	subs	r4, r1, #4
 800b352:	2b00      	cmp	r3, #0
 800b354:	bfb8      	it	lt
 800b356:	18e4      	addlt	r4, r4, r3
 800b358:	f003 fb3b 	bl	800e9d2 <__malloc_lock>
 800b35c:	4a1f      	ldr	r2, [pc, #124]	; (800b3dc <_free_r+0x98>)
 800b35e:	6813      	ldr	r3, [r2, #0]
 800b360:	4610      	mov	r0, r2
 800b362:	b933      	cbnz	r3, 800b372 <_free_r+0x2e>
 800b364:	6063      	str	r3, [r4, #4]
 800b366:	6014      	str	r4, [r2, #0]
 800b368:	4628      	mov	r0, r5
 800b36a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b36e:	f003 bb31 	b.w	800e9d4 <__malloc_unlock>
 800b372:	42a3      	cmp	r3, r4
 800b374:	d90c      	bls.n	800b390 <_free_r+0x4c>
 800b376:	6821      	ldr	r1, [r4, #0]
 800b378:	1862      	adds	r2, r4, r1
 800b37a:	4293      	cmp	r3, r2
 800b37c:	bf04      	itt	eq
 800b37e:	681a      	ldreq	r2, [r3, #0]
 800b380:	685b      	ldreq	r3, [r3, #4]
 800b382:	6063      	str	r3, [r4, #4]
 800b384:	bf04      	itt	eq
 800b386:	1852      	addeq	r2, r2, r1
 800b388:	6022      	streq	r2, [r4, #0]
 800b38a:	6004      	str	r4, [r0, #0]
 800b38c:	e7ec      	b.n	800b368 <_free_r+0x24>
 800b38e:	4613      	mov	r3, r2
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	b10a      	cbz	r2, 800b398 <_free_r+0x54>
 800b394:	42a2      	cmp	r2, r4
 800b396:	d9fa      	bls.n	800b38e <_free_r+0x4a>
 800b398:	6819      	ldr	r1, [r3, #0]
 800b39a:	1858      	adds	r0, r3, r1
 800b39c:	42a0      	cmp	r0, r4
 800b39e:	d10b      	bne.n	800b3b8 <_free_r+0x74>
 800b3a0:	6820      	ldr	r0, [r4, #0]
 800b3a2:	4401      	add	r1, r0
 800b3a4:	1858      	adds	r0, r3, r1
 800b3a6:	4282      	cmp	r2, r0
 800b3a8:	6019      	str	r1, [r3, #0]
 800b3aa:	d1dd      	bne.n	800b368 <_free_r+0x24>
 800b3ac:	6810      	ldr	r0, [r2, #0]
 800b3ae:	6852      	ldr	r2, [r2, #4]
 800b3b0:	605a      	str	r2, [r3, #4]
 800b3b2:	4401      	add	r1, r0
 800b3b4:	6019      	str	r1, [r3, #0]
 800b3b6:	e7d7      	b.n	800b368 <_free_r+0x24>
 800b3b8:	d902      	bls.n	800b3c0 <_free_r+0x7c>
 800b3ba:	230c      	movs	r3, #12
 800b3bc:	602b      	str	r3, [r5, #0]
 800b3be:	e7d3      	b.n	800b368 <_free_r+0x24>
 800b3c0:	6820      	ldr	r0, [r4, #0]
 800b3c2:	1821      	adds	r1, r4, r0
 800b3c4:	428a      	cmp	r2, r1
 800b3c6:	bf04      	itt	eq
 800b3c8:	6811      	ldreq	r1, [r2, #0]
 800b3ca:	6852      	ldreq	r2, [r2, #4]
 800b3cc:	6062      	str	r2, [r4, #4]
 800b3ce:	bf04      	itt	eq
 800b3d0:	1809      	addeq	r1, r1, r0
 800b3d2:	6021      	streq	r1, [r4, #0]
 800b3d4:	605c      	str	r4, [r3, #4]
 800b3d6:	e7c7      	b.n	800b368 <_free_r+0x24>
 800b3d8:	bd38      	pop	{r3, r4, r5, pc}
 800b3da:	bf00      	nop
 800b3dc:	20000404 	.word	0x20000404

0800b3e0 <_malloc_r>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	1ccd      	adds	r5, r1, #3
 800b3e4:	f025 0503 	bic.w	r5, r5, #3
 800b3e8:	3508      	adds	r5, #8
 800b3ea:	2d0c      	cmp	r5, #12
 800b3ec:	bf38      	it	cc
 800b3ee:	250c      	movcc	r5, #12
 800b3f0:	2d00      	cmp	r5, #0
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	db01      	blt.n	800b3fa <_malloc_r+0x1a>
 800b3f6:	42a9      	cmp	r1, r5
 800b3f8:	d903      	bls.n	800b402 <_malloc_r+0x22>
 800b3fa:	230c      	movs	r3, #12
 800b3fc:	6033      	str	r3, [r6, #0]
 800b3fe:	2000      	movs	r0, #0
 800b400:	bd70      	pop	{r4, r5, r6, pc}
 800b402:	f003 fae6 	bl	800e9d2 <__malloc_lock>
 800b406:	4a21      	ldr	r2, [pc, #132]	; (800b48c <_malloc_r+0xac>)
 800b408:	6814      	ldr	r4, [r2, #0]
 800b40a:	4621      	mov	r1, r4
 800b40c:	b991      	cbnz	r1, 800b434 <_malloc_r+0x54>
 800b40e:	4c20      	ldr	r4, [pc, #128]	; (800b490 <_malloc_r+0xb0>)
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	b91b      	cbnz	r3, 800b41c <_malloc_r+0x3c>
 800b414:	4630      	mov	r0, r6
 800b416:	f000 fef7 	bl	800c208 <_sbrk_r>
 800b41a:	6020      	str	r0, [r4, #0]
 800b41c:	4629      	mov	r1, r5
 800b41e:	4630      	mov	r0, r6
 800b420:	f000 fef2 	bl	800c208 <_sbrk_r>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d124      	bne.n	800b472 <_malloc_r+0x92>
 800b428:	230c      	movs	r3, #12
 800b42a:	6033      	str	r3, [r6, #0]
 800b42c:	4630      	mov	r0, r6
 800b42e:	f003 fad1 	bl	800e9d4 <__malloc_unlock>
 800b432:	e7e4      	b.n	800b3fe <_malloc_r+0x1e>
 800b434:	680b      	ldr	r3, [r1, #0]
 800b436:	1b5b      	subs	r3, r3, r5
 800b438:	d418      	bmi.n	800b46c <_malloc_r+0x8c>
 800b43a:	2b0b      	cmp	r3, #11
 800b43c:	d90f      	bls.n	800b45e <_malloc_r+0x7e>
 800b43e:	600b      	str	r3, [r1, #0]
 800b440:	50cd      	str	r5, [r1, r3]
 800b442:	18cc      	adds	r4, r1, r3
 800b444:	4630      	mov	r0, r6
 800b446:	f003 fac5 	bl	800e9d4 <__malloc_unlock>
 800b44a:	f104 000b 	add.w	r0, r4, #11
 800b44e:	1d23      	adds	r3, r4, #4
 800b450:	f020 0007 	bic.w	r0, r0, #7
 800b454:	1ac3      	subs	r3, r0, r3
 800b456:	d0d3      	beq.n	800b400 <_malloc_r+0x20>
 800b458:	425a      	negs	r2, r3
 800b45a:	50e2      	str	r2, [r4, r3]
 800b45c:	e7d0      	b.n	800b400 <_malloc_r+0x20>
 800b45e:	428c      	cmp	r4, r1
 800b460:	684b      	ldr	r3, [r1, #4]
 800b462:	bf16      	itet	ne
 800b464:	6063      	strne	r3, [r4, #4]
 800b466:	6013      	streq	r3, [r2, #0]
 800b468:	460c      	movne	r4, r1
 800b46a:	e7eb      	b.n	800b444 <_malloc_r+0x64>
 800b46c:	460c      	mov	r4, r1
 800b46e:	6849      	ldr	r1, [r1, #4]
 800b470:	e7cc      	b.n	800b40c <_malloc_r+0x2c>
 800b472:	1cc4      	adds	r4, r0, #3
 800b474:	f024 0403 	bic.w	r4, r4, #3
 800b478:	42a0      	cmp	r0, r4
 800b47a:	d005      	beq.n	800b488 <_malloc_r+0xa8>
 800b47c:	1a21      	subs	r1, r4, r0
 800b47e:	4630      	mov	r0, r6
 800b480:	f000 fec2 	bl	800c208 <_sbrk_r>
 800b484:	3001      	adds	r0, #1
 800b486:	d0cf      	beq.n	800b428 <_malloc_r+0x48>
 800b488:	6025      	str	r5, [r4, #0]
 800b48a:	e7db      	b.n	800b444 <_malloc_r+0x64>
 800b48c:	20000404 	.word	0x20000404
 800b490:	20000408 	.word	0x20000408

0800b494 <__cvt>:
 800b494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b498:	ec55 4b10 	vmov	r4, r5, d0
 800b49c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b49e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b4a2:	2d00      	cmp	r5, #0
 800b4a4:	460e      	mov	r6, r1
 800b4a6:	4691      	mov	r9, r2
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	bfb8      	it	lt
 800b4ac:	4622      	movlt	r2, r4
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	f027 0720 	bic.w	r7, r7, #32
 800b4b4:	bfbb      	ittet	lt
 800b4b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b4ba:	461d      	movlt	r5, r3
 800b4bc:	2300      	movge	r3, #0
 800b4be:	232d      	movlt	r3, #45	; 0x2d
 800b4c0:	bfb8      	it	lt
 800b4c2:	4614      	movlt	r4, r2
 800b4c4:	2f46      	cmp	r7, #70	; 0x46
 800b4c6:	700b      	strb	r3, [r1, #0]
 800b4c8:	d004      	beq.n	800b4d4 <__cvt+0x40>
 800b4ca:	2f45      	cmp	r7, #69	; 0x45
 800b4cc:	d100      	bne.n	800b4d0 <__cvt+0x3c>
 800b4ce:	3601      	adds	r6, #1
 800b4d0:	2102      	movs	r1, #2
 800b4d2:	e000      	b.n	800b4d6 <__cvt+0x42>
 800b4d4:	2103      	movs	r1, #3
 800b4d6:	ab03      	add	r3, sp, #12
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	ab02      	add	r3, sp, #8
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	4632      	mov	r2, r6
 800b4e0:	4653      	mov	r3, sl
 800b4e2:	ec45 4b10 	vmov	d0, r4, r5
 800b4e6:	f001 ff67 	bl	800d3b8 <_dtoa_r>
 800b4ea:	2f47      	cmp	r7, #71	; 0x47
 800b4ec:	4680      	mov	r8, r0
 800b4ee:	d102      	bne.n	800b4f6 <__cvt+0x62>
 800b4f0:	f019 0f01 	tst.w	r9, #1
 800b4f4:	d026      	beq.n	800b544 <__cvt+0xb0>
 800b4f6:	2f46      	cmp	r7, #70	; 0x46
 800b4f8:	eb08 0906 	add.w	r9, r8, r6
 800b4fc:	d111      	bne.n	800b522 <__cvt+0x8e>
 800b4fe:	f898 3000 	ldrb.w	r3, [r8]
 800b502:	2b30      	cmp	r3, #48	; 0x30
 800b504:	d10a      	bne.n	800b51c <__cvt+0x88>
 800b506:	2200      	movs	r2, #0
 800b508:	2300      	movs	r3, #0
 800b50a:	4620      	mov	r0, r4
 800b50c:	4629      	mov	r1, r5
 800b50e:	f7f5 fae3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b512:	b918      	cbnz	r0, 800b51c <__cvt+0x88>
 800b514:	f1c6 0601 	rsb	r6, r6, #1
 800b518:	f8ca 6000 	str.w	r6, [sl]
 800b51c:	f8da 3000 	ldr.w	r3, [sl]
 800b520:	4499      	add	r9, r3
 800b522:	2200      	movs	r2, #0
 800b524:	2300      	movs	r3, #0
 800b526:	4620      	mov	r0, r4
 800b528:	4629      	mov	r1, r5
 800b52a:	f7f5 fad5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b52e:	b938      	cbnz	r0, 800b540 <__cvt+0xac>
 800b530:	2230      	movs	r2, #48	; 0x30
 800b532:	9b03      	ldr	r3, [sp, #12]
 800b534:	454b      	cmp	r3, r9
 800b536:	d205      	bcs.n	800b544 <__cvt+0xb0>
 800b538:	1c59      	adds	r1, r3, #1
 800b53a:	9103      	str	r1, [sp, #12]
 800b53c:	701a      	strb	r2, [r3, #0]
 800b53e:	e7f8      	b.n	800b532 <__cvt+0x9e>
 800b540:	f8cd 900c 	str.w	r9, [sp, #12]
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b548:	eba3 0308 	sub.w	r3, r3, r8
 800b54c:	4640      	mov	r0, r8
 800b54e:	6013      	str	r3, [r2, #0]
 800b550:	b004      	add	sp, #16
 800b552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b556 <__exponent>:
 800b556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b558:	2900      	cmp	r1, #0
 800b55a:	4604      	mov	r4, r0
 800b55c:	bfba      	itte	lt
 800b55e:	4249      	neglt	r1, r1
 800b560:	232d      	movlt	r3, #45	; 0x2d
 800b562:	232b      	movge	r3, #43	; 0x2b
 800b564:	2909      	cmp	r1, #9
 800b566:	f804 2b02 	strb.w	r2, [r4], #2
 800b56a:	7043      	strb	r3, [r0, #1]
 800b56c:	dd20      	ble.n	800b5b0 <__exponent+0x5a>
 800b56e:	f10d 0307 	add.w	r3, sp, #7
 800b572:	461f      	mov	r7, r3
 800b574:	260a      	movs	r6, #10
 800b576:	fb91 f5f6 	sdiv	r5, r1, r6
 800b57a:	fb06 1115 	mls	r1, r6, r5, r1
 800b57e:	3130      	adds	r1, #48	; 0x30
 800b580:	2d09      	cmp	r5, #9
 800b582:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b586:	f103 32ff 	add.w	r2, r3, #4294967295
 800b58a:	4629      	mov	r1, r5
 800b58c:	dc09      	bgt.n	800b5a2 <__exponent+0x4c>
 800b58e:	3130      	adds	r1, #48	; 0x30
 800b590:	3b02      	subs	r3, #2
 800b592:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b596:	42bb      	cmp	r3, r7
 800b598:	4622      	mov	r2, r4
 800b59a:	d304      	bcc.n	800b5a6 <__exponent+0x50>
 800b59c:	1a10      	subs	r0, r2, r0
 800b59e:	b003      	add	sp, #12
 800b5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	e7e7      	b.n	800b576 <__exponent+0x20>
 800b5a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5aa:	f804 2b01 	strb.w	r2, [r4], #1
 800b5ae:	e7f2      	b.n	800b596 <__exponent+0x40>
 800b5b0:	2330      	movs	r3, #48	; 0x30
 800b5b2:	4419      	add	r1, r3
 800b5b4:	7083      	strb	r3, [r0, #2]
 800b5b6:	1d02      	adds	r2, r0, #4
 800b5b8:	70c1      	strb	r1, [r0, #3]
 800b5ba:	e7ef      	b.n	800b59c <__exponent+0x46>

0800b5bc <_printf_float>:
 800b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	b08d      	sub	sp, #52	; 0x34
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b5c8:	4616      	mov	r6, r2
 800b5ca:	461f      	mov	r7, r3
 800b5cc:	4605      	mov	r5, r0
 800b5ce:	f003 f95f 	bl	800e890 <_localeconv_r>
 800b5d2:	6803      	ldr	r3, [r0, #0]
 800b5d4:	9304      	str	r3, [sp, #16]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7f4 fe02 	bl	80001e0 <strlen>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	930a      	str	r3, [sp, #40]	; 0x28
 800b5e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b5e4:	9005      	str	r0, [sp, #20]
 800b5e6:	3307      	adds	r3, #7
 800b5e8:	f023 0307 	bic.w	r3, r3, #7
 800b5ec:	f103 0208 	add.w	r2, r3, #8
 800b5f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b5f4:	f8d4 b000 	ldr.w	fp, [r4]
 800b5f8:	f8c8 2000 	str.w	r2, [r8]
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b604:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b608:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b60c:	9307      	str	r3, [sp, #28]
 800b60e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b612:	f04f 32ff 	mov.w	r2, #4294967295
 800b616:	4ba7      	ldr	r3, [pc, #668]	; (800b8b4 <_printf_float+0x2f8>)
 800b618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b61c:	f7f5 fa8e 	bl	8000b3c <__aeabi_dcmpun>
 800b620:	bb70      	cbnz	r0, 800b680 <_printf_float+0xc4>
 800b622:	f04f 32ff 	mov.w	r2, #4294967295
 800b626:	4ba3      	ldr	r3, [pc, #652]	; (800b8b4 <_printf_float+0x2f8>)
 800b628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b62c:	f7f5 fa68 	bl	8000b00 <__aeabi_dcmple>
 800b630:	bb30      	cbnz	r0, 800b680 <_printf_float+0xc4>
 800b632:	2200      	movs	r2, #0
 800b634:	2300      	movs	r3, #0
 800b636:	4640      	mov	r0, r8
 800b638:	4649      	mov	r1, r9
 800b63a:	f7f5 fa57 	bl	8000aec <__aeabi_dcmplt>
 800b63e:	b110      	cbz	r0, 800b646 <_printf_float+0x8a>
 800b640:	232d      	movs	r3, #45	; 0x2d
 800b642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b646:	4a9c      	ldr	r2, [pc, #624]	; (800b8b8 <_printf_float+0x2fc>)
 800b648:	4b9c      	ldr	r3, [pc, #624]	; (800b8bc <_printf_float+0x300>)
 800b64a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b64e:	bf8c      	ite	hi
 800b650:	4690      	movhi	r8, r2
 800b652:	4698      	movls	r8, r3
 800b654:	2303      	movs	r3, #3
 800b656:	f02b 0204 	bic.w	r2, fp, #4
 800b65a:	6123      	str	r3, [r4, #16]
 800b65c:	6022      	str	r2, [r4, #0]
 800b65e:	f04f 0900 	mov.w	r9, #0
 800b662:	9700      	str	r7, [sp, #0]
 800b664:	4633      	mov	r3, r6
 800b666:	aa0b      	add	r2, sp, #44	; 0x2c
 800b668:	4621      	mov	r1, r4
 800b66a:	4628      	mov	r0, r5
 800b66c:	f000 f9e6 	bl	800ba3c <_printf_common>
 800b670:	3001      	adds	r0, #1
 800b672:	f040 808d 	bne.w	800b790 <_printf_float+0x1d4>
 800b676:	f04f 30ff 	mov.w	r0, #4294967295
 800b67a:	b00d      	add	sp, #52	; 0x34
 800b67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b680:	4642      	mov	r2, r8
 800b682:	464b      	mov	r3, r9
 800b684:	4640      	mov	r0, r8
 800b686:	4649      	mov	r1, r9
 800b688:	f7f5 fa58 	bl	8000b3c <__aeabi_dcmpun>
 800b68c:	b110      	cbz	r0, 800b694 <_printf_float+0xd8>
 800b68e:	4a8c      	ldr	r2, [pc, #560]	; (800b8c0 <_printf_float+0x304>)
 800b690:	4b8c      	ldr	r3, [pc, #560]	; (800b8c4 <_printf_float+0x308>)
 800b692:	e7da      	b.n	800b64a <_printf_float+0x8e>
 800b694:	6861      	ldr	r1, [r4, #4]
 800b696:	1c4b      	adds	r3, r1, #1
 800b698:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b69c:	a80a      	add	r0, sp, #40	; 0x28
 800b69e:	d13e      	bne.n	800b71e <_printf_float+0x162>
 800b6a0:	2306      	movs	r3, #6
 800b6a2:	6063      	str	r3, [r4, #4]
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b6aa:	ab09      	add	r3, sp, #36	; 0x24
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	ec49 8b10 	vmov	d0, r8, r9
 800b6b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b6b6:	6022      	str	r2, [r4, #0]
 800b6b8:	f8cd a004 	str.w	sl, [sp, #4]
 800b6bc:	6861      	ldr	r1, [r4, #4]
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f7ff fee8 	bl	800b494 <__cvt>
 800b6c4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b6c8:	2b47      	cmp	r3, #71	; 0x47
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	d109      	bne.n	800b6e2 <_printf_float+0x126>
 800b6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d0:	1cd8      	adds	r0, r3, #3
 800b6d2:	db02      	blt.n	800b6da <_printf_float+0x11e>
 800b6d4:	6862      	ldr	r2, [r4, #4]
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	dd47      	ble.n	800b76a <_printf_float+0x1ae>
 800b6da:	f1aa 0a02 	sub.w	sl, sl, #2
 800b6de:	fa5f fa8a 	uxtb.w	sl, sl
 800b6e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b6e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6e8:	d824      	bhi.n	800b734 <_printf_float+0x178>
 800b6ea:	3901      	subs	r1, #1
 800b6ec:	4652      	mov	r2, sl
 800b6ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b6f2:	9109      	str	r1, [sp, #36]	; 0x24
 800b6f4:	f7ff ff2f 	bl	800b556 <__exponent>
 800b6f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6fa:	1813      	adds	r3, r2, r0
 800b6fc:	2a01      	cmp	r2, #1
 800b6fe:	4681      	mov	r9, r0
 800b700:	6123      	str	r3, [r4, #16]
 800b702:	dc02      	bgt.n	800b70a <_printf_float+0x14e>
 800b704:	6822      	ldr	r2, [r4, #0]
 800b706:	07d1      	lsls	r1, r2, #31
 800b708:	d501      	bpl.n	800b70e <_printf_float+0x152>
 800b70a:	3301      	adds	r3, #1
 800b70c:	6123      	str	r3, [r4, #16]
 800b70e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0a5      	beq.n	800b662 <_printf_float+0xa6>
 800b716:	232d      	movs	r3, #45	; 0x2d
 800b718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b71c:	e7a1      	b.n	800b662 <_printf_float+0xa6>
 800b71e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b722:	f000 8177 	beq.w	800ba14 <_printf_float+0x458>
 800b726:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b72a:	d1bb      	bne.n	800b6a4 <_printf_float+0xe8>
 800b72c:	2900      	cmp	r1, #0
 800b72e:	d1b9      	bne.n	800b6a4 <_printf_float+0xe8>
 800b730:	2301      	movs	r3, #1
 800b732:	e7b6      	b.n	800b6a2 <_printf_float+0xe6>
 800b734:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b738:	d119      	bne.n	800b76e <_printf_float+0x1b2>
 800b73a:	2900      	cmp	r1, #0
 800b73c:	6863      	ldr	r3, [r4, #4]
 800b73e:	dd0c      	ble.n	800b75a <_printf_float+0x19e>
 800b740:	6121      	str	r1, [r4, #16]
 800b742:	b913      	cbnz	r3, 800b74a <_printf_float+0x18e>
 800b744:	6822      	ldr	r2, [r4, #0]
 800b746:	07d2      	lsls	r2, r2, #31
 800b748:	d502      	bpl.n	800b750 <_printf_float+0x194>
 800b74a:	3301      	adds	r3, #1
 800b74c:	440b      	add	r3, r1
 800b74e:	6123      	str	r3, [r4, #16]
 800b750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b752:	65a3      	str	r3, [r4, #88]	; 0x58
 800b754:	f04f 0900 	mov.w	r9, #0
 800b758:	e7d9      	b.n	800b70e <_printf_float+0x152>
 800b75a:	b913      	cbnz	r3, 800b762 <_printf_float+0x1a6>
 800b75c:	6822      	ldr	r2, [r4, #0]
 800b75e:	07d0      	lsls	r0, r2, #31
 800b760:	d501      	bpl.n	800b766 <_printf_float+0x1aa>
 800b762:	3302      	adds	r3, #2
 800b764:	e7f3      	b.n	800b74e <_printf_float+0x192>
 800b766:	2301      	movs	r3, #1
 800b768:	e7f1      	b.n	800b74e <_printf_float+0x192>
 800b76a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b76e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b772:	4293      	cmp	r3, r2
 800b774:	db05      	blt.n	800b782 <_printf_float+0x1c6>
 800b776:	6822      	ldr	r2, [r4, #0]
 800b778:	6123      	str	r3, [r4, #16]
 800b77a:	07d1      	lsls	r1, r2, #31
 800b77c:	d5e8      	bpl.n	800b750 <_printf_float+0x194>
 800b77e:	3301      	adds	r3, #1
 800b780:	e7e5      	b.n	800b74e <_printf_float+0x192>
 800b782:	2b00      	cmp	r3, #0
 800b784:	bfd4      	ite	le
 800b786:	f1c3 0302 	rsble	r3, r3, #2
 800b78a:	2301      	movgt	r3, #1
 800b78c:	4413      	add	r3, r2
 800b78e:	e7de      	b.n	800b74e <_printf_float+0x192>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	055a      	lsls	r2, r3, #21
 800b794:	d407      	bmi.n	800b7a6 <_printf_float+0x1ea>
 800b796:	6923      	ldr	r3, [r4, #16]
 800b798:	4642      	mov	r2, r8
 800b79a:	4631      	mov	r1, r6
 800b79c:	4628      	mov	r0, r5
 800b79e:	47b8      	blx	r7
 800b7a0:	3001      	adds	r0, #1
 800b7a2:	d12b      	bne.n	800b7fc <_printf_float+0x240>
 800b7a4:	e767      	b.n	800b676 <_printf_float+0xba>
 800b7a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b7aa:	f240 80dc 	bls.w	800b966 <_printf_float+0x3aa>
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7b6:	f7f5 f98f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d033      	beq.n	800b826 <_printf_float+0x26a>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	4a41      	ldr	r2, [pc, #260]	; (800b8c8 <_printf_float+0x30c>)
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	47b8      	blx	r7
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	f43f af54 	beq.w	800b676 <_printf_float+0xba>
 800b7ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	db02      	blt.n	800b7dc <_printf_float+0x220>
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	07d8      	lsls	r0, r3, #31
 800b7da:	d50f      	bpl.n	800b7fc <_printf_float+0x240>
 800b7dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7e0:	4631      	mov	r1, r6
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	47b8      	blx	r7
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	f43f af45 	beq.w	800b676 <_printf_float+0xba>
 800b7ec:	f04f 0800 	mov.w	r8, #0
 800b7f0:	f104 091a 	add.w	r9, r4, #26
 800b7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	4543      	cmp	r3, r8
 800b7fa:	dc09      	bgt.n	800b810 <_printf_float+0x254>
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	079b      	lsls	r3, r3, #30
 800b800:	f100 8103 	bmi.w	800ba0a <_printf_float+0x44e>
 800b804:	68e0      	ldr	r0, [r4, #12]
 800b806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b808:	4298      	cmp	r0, r3
 800b80a:	bfb8      	it	lt
 800b80c:	4618      	movlt	r0, r3
 800b80e:	e734      	b.n	800b67a <_printf_float+0xbe>
 800b810:	2301      	movs	r3, #1
 800b812:	464a      	mov	r2, r9
 800b814:	4631      	mov	r1, r6
 800b816:	4628      	mov	r0, r5
 800b818:	47b8      	blx	r7
 800b81a:	3001      	adds	r0, #1
 800b81c:	f43f af2b 	beq.w	800b676 <_printf_float+0xba>
 800b820:	f108 0801 	add.w	r8, r8, #1
 800b824:	e7e6      	b.n	800b7f4 <_printf_float+0x238>
 800b826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b828:	2b00      	cmp	r3, #0
 800b82a:	dc2b      	bgt.n	800b884 <_printf_float+0x2c8>
 800b82c:	2301      	movs	r3, #1
 800b82e:	4a26      	ldr	r2, [pc, #152]	; (800b8c8 <_printf_float+0x30c>)
 800b830:	4631      	mov	r1, r6
 800b832:	4628      	mov	r0, r5
 800b834:	47b8      	blx	r7
 800b836:	3001      	adds	r0, #1
 800b838:	f43f af1d 	beq.w	800b676 <_printf_float+0xba>
 800b83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83e:	b923      	cbnz	r3, 800b84a <_printf_float+0x28e>
 800b840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b842:	b913      	cbnz	r3, 800b84a <_printf_float+0x28e>
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	07d9      	lsls	r1, r3, #31
 800b848:	d5d8      	bpl.n	800b7fc <_printf_float+0x240>
 800b84a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b84e:	4631      	mov	r1, r6
 800b850:	4628      	mov	r0, r5
 800b852:	47b8      	blx	r7
 800b854:	3001      	adds	r0, #1
 800b856:	f43f af0e 	beq.w	800b676 <_printf_float+0xba>
 800b85a:	f04f 0900 	mov.w	r9, #0
 800b85e:	f104 0a1a 	add.w	sl, r4, #26
 800b862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b864:	425b      	negs	r3, r3
 800b866:	454b      	cmp	r3, r9
 800b868:	dc01      	bgt.n	800b86e <_printf_float+0x2b2>
 800b86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b86c:	e794      	b.n	800b798 <_printf_float+0x1dc>
 800b86e:	2301      	movs	r3, #1
 800b870:	4652      	mov	r2, sl
 800b872:	4631      	mov	r1, r6
 800b874:	4628      	mov	r0, r5
 800b876:	47b8      	blx	r7
 800b878:	3001      	adds	r0, #1
 800b87a:	f43f aefc 	beq.w	800b676 <_printf_float+0xba>
 800b87e:	f109 0901 	add.w	r9, r9, #1
 800b882:	e7ee      	b.n	800b862 <_printf_float+0x2a6>
 800b884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b886:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b888:	429a      	cmp	r2, r3
 800b88a:	bfa8      	it	ge
 800b88c:	461a      	movge	r2, r3
 800b88e:	2a00      	cmp	r2, #0
 800b890:	4691      	mov	r9, r2
 800b892:	dd07      	ble.n	800b8a4 <_printf_float+0x2e8>
 800b894:	4613      	mov	r3, r2
 800b896:	4631      	mov	r1, r6
 800b898:	4642      	mov	r2, r8
 800b89a:	4628      	mov	r0, r5
 800b89c:	47b8      	blx	r7
 800b89e:	3001      	adds	r0, #1
 800b8a0:	f43f aee9 	beq.w	800b676 <_printf_float+0xba>
 800b8a4:	f104 031a 	add.w	r3, r4, #26
 800b8a8:	f04f 0b00 	mov.w	fp, #0
 800b8ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8b0:	9306      	str	r3, [sp, #24]
 800b8b2:	e015      	b.n	800b8e0 <_printf_float+0x324>
 800b8b4:	7fefffff 	.word	0x7fefffff
 800b8b8:	08012dbc 	.word	0x08012dbc
 800b8bc:	08012db8 	.word	0x08012db8
 800b8c0:	08012dc4 	.word	0x08012dc4
 800b8c4:	08012dc0 	.word	0x08012dc0
 800b8c8:	08012fe3 	.word	0x08012fe3
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	9a06      	ldr	r2, [sp, #24]
 800b8d0:	4631      	mov	r1, r6
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	47b8      	blx	r7
 800b8d6:	3001      	adds	r0, #1
 800b8d8:	f43f aecd 	beq.w	800b676 <_printf_float+0xba>
 800b8dc:	f10b 0b01 	add.w	fp, fp, #1
 800b8e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b8e4:	ebaa 0309 	sub.w	r3, sl, r9
 800b8e8:	455b      	cmp	r3, fp
 800b8ea:	dcef      	bgt.n	800b8cc <_printf_float+0x310>
 800b8ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	44d0      	add	r8, sl
 800b8f4:	db15      	blt.n	800b922 <_printf_float+0x366>
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	07da      	lsls	r2, r3, #31
 800b8fa:	d412      	bmi.n	800b922 <_printf_float+0x366>
 800b8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b900:	eba3 020a 	sub.w	r2, r3, sl
 800b904:	eba3 0a01 	sub.w	sl, r3, r1
 800b908:	4592      	cmp	sl, r2
 800b90a:	bfa8      	it	ge
 800b90c:	4692      	movge	sl, r2
 800b90e:	f1ba 0f00 	cmp.w	sl, #0
 800b912:	dc0e      	bgt.n	800b932 <_printf_float+0x376>
 800b914:	f04f 0800 	mov.w	r8, #0
 800b918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b91c:	f104 091a 	add.w	r9, r4, #26
 800b920:	e019      	b.n	800b956 <_printf_float+0x39a>
 800b922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b926:	4631      	mov	r1, r6
 800b928:	4628      	mov	r0, r5
 800b92a:	47b8      	blx	r7
 800b92c:	3001      	adds	r0, #1
 800b92e:	d1e5      	bne.n	800b8fc <_printf_float+0x340>
 800b930:	e6a1      	b.n	800b676 <_printf_float+0xba>
 800b932:	4653      	mov	r3, sl
 800b934:	4642      	mov	r2, r8
 800b936:	4631      	mov	r1, r6
 800b938:	4628      	mov	r0, r5
 800b93a:	47b8      	blx	r7
 800b93c:	3001      	adds	r0, #1
 800b93e:	d1e9      	bne.n	800b914 <_printf_float+0x358>
 800b940:	e699      	b.n	800b676 <_printf_float+0xba>
 800b942:	2301      	movs	r3, #1
 800b944:	464a      	mov	r2, r9
 800b946:	4631      	mov	r1, r6
 800b948:	4628      	mov	r0, r5
 800b94a:	47b8      	blx	r7
 800b94c:	3001      	adds	r0, #1
 800b94e:	f43f ae92 	beq.w	800b676 <_printf_float+0xba>
 800b952:	f108 0801 	add.w	r8, r8, #1
 800b956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b95a:	1a9b      	subs	r3, r3, r2
 800b95c:	eba3 030a 	sub.w	r3, r3, sl
 800b960:	4543      	cmp	r3, r8
 800b962:	dcee      	bgt.n	800b942 <_printf_float+0x386>
 800b964:	e74a      	b.n	800b7fc <_printf_float+0x240>
 800b966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b968:	2a01      	cmp	r2, #1
 800b96a:	dc01      	bgt.n	800b970 <_printf_float+0x3b4>
 800b96c:	07db      	lsls	r3, r3, #31
 800b96e:	d53a      	bpl.n	800b9e6 <_printf_float+0x42a>
 800b970:	2301      	movs	r3, #1
 800b972:	4642      	mov	r2, r8
 800b974:	4631      	mov	r1, r6
 800b976:	4628      	mov	r0, r5
 800b978:	47b8      	blx	r7
 800b97a:	3001      	adds	r0, #1
 800b97c:	f43f ae7b 	beq.w	800b676 <_printf_float+0xba>
 800b980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b984:	4631      	mov	r1, r6
 800b986:	4628      	mov	r0, r5
 800b988:	47b8      	blx	r7
 800b98a:	3001      	adds	r0, #1
 800b98c:	f108 0801 	add.w	r8, r8, #1
 800b990:	f43f ae71 	beq.w	800b676 <_printf_float+0xba>
 800b994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b996:	2200      	movs	r2, #0
 800b998:	f103 3aff 	add.w	sl, r3, #4294967295
 800b99c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f7f5 f899 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9a6:	b9c8      	cbnz	r0, 800b9dc <_printf_float+0x420>
 800b9a8:	4653      	mov	r3, sl
 800b9aa:	4642      	mov	r2, r8
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	47b8      	blx	r7
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d10e      	bne.n	800b9d4 <_printf_float+0x418>
 800b9b6:	e65e      	b.n	800b676 <_printf_float+0xba>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	4652      	mov	r2, sl
 800b9bc:	4631      	mov	r1, r6
 800b9be:	4628      	mov	r0, r5
 800b9c0:	47b8      	blx	r7
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	f43f ae57 	beq.w	800b676 <_printf_float+0xba>
 800b9c8:	f108 0801 	add.w	r8, r8, #1
 800b9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	4543      	cmp	r3, r8
 800b9d2:	dcf1      	bgt.n	800b9b8 <_printf_float+0x3fc>
 800b9d4:	464b      	mov	r3, r9
 800b9d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b9da:	e6de      	b.n	800b79a <_printf_float+0x1de>
 800b9dc:	f04f 0800 	mov.w	r8, #0
 800b9e0:	f104 0a1a 	add.w	sl, r4, #26
 800b9e4:	e7f2      	b.n	800b9cc <_printf_float+0x410>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e7df      	b.n	800b9aa <_printf_float+0x3ee>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	464a      	mov	r2, r9
 800b9ee:	4631      	mov	r1, r6
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	47b8      	blx	r7
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	f43f ae3e 	beq.w	800b676 <_printf_float+0xba>
 800b9fa:	f108 0801 	add.w	r8, r8, #1
 800b9fe:	68e3      	ldr	r3, [r4, #12]
 800ba00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba02:	1a9b      	subs	r3, r3, r2
 800ba04:	4543      	cmp	r3, r8
 800ba06:	dcf0      	bgt.n	800b9ea <_printf_float+0x42e>
 800ba08:	e6fc      	b.n	800b804 <_printf_float+0x248>
 800ba0a:	f04f 0800 	mov.w	r8, #0
 800ba0e:	f104 0919 	add.w	r9, r4, #25
 800ba12:	e7f4      	b.n	800b9fe <_printf_float+0x442>
 800ba14:	2900      	cmp	r1, #0
 800ba16:	f43f ae8b 	beq.w	800b730 <_printf_float+0x174>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ba20:	ab09      	add	r3, sp, #36	; 0x24
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	ec49 8b10 	vmov	d0, r8, r9
 800ba28:	6022      	str	r2, [r4, #0]
 800ba2a:	f8cd a004 	str.w	sl, [sp, #4]
 800ba2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba32:	4628      	mov	r0, r5
 800ba34:	f7ff fd2e 	bl	800b494 <__cvt>
 800ba38:	4680      	mov	r8, r0
 800ba3a:	e648      	b.n	800b6ce <_printf_float+0x112>

0800ba3c <_printf_common>:
 800ba3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba40:	4691      	mov	r9, r2
 800ba42:	461f      	mov	r7, r3
 800ba44:	688a      	ldr	r2, [r1, #8]
 800ba46:	690b      	ldr	r3, [r1, #16]
 800ba48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	bfb8      	it	lt
 800ba50:	4613      	movlt	r3, r2
 800ba52:	f8c9 3000 	str.w	r3, [r9]
 800ba56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	b112      	cbz	r2, 800ba66 <_printf_common+0x2a>
 800ba60:	3301      	adds	r3, #1
 800ba62:	f8c9 3000 	str.w	r3, [r9]
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	0699      	lsls	r1, r3, #26
 800ba6a:	bf42      	ittt	mi
 800ba6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ba70:	3302      	addmi	r3, #2
 800ba72:	f8c9 3000 	strmi.w	r3, [r9]
 800ba76:	6825      	ldr	r5, [r4, #0]
 800ba78:	f015 0506 	ands.w	r5, r5, #6
 800ba7c:	d107      	bne.n	800ba8e <_printf_common+0x52>
 800ba7e:	f104 0a19 	add.w	sl, r4, #25
 800ba82:	68e3      	ldr	r3, [r4, #12]
 800ba84:	f8d9 2000 	ldr.w	r2, [r9]
 800ba88:	1a9b      	subs	r3, r3, r2
 800ba8a:	42ab      	cmp	r3, r5
 800ba8c:	dc28      	bgt.n	800bae0 <_printf_common+0xa4>
 800ba8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	3300      	adds	r3, #0
 800ba96:	bf18      	it	ne
 800ba98:	2301      	movne	r3, #1
 800ba9a:	0692      	lsls	r2, r2, #26
 800ba9c:	d42d      	bmi.n	800bafa <_printf_common+0xbe>
 800ba9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800baa2:	4639      	mov	r1, r7
 800baa4:	4630      	mov	r0, r6
 800baa6:	47c0      	blx	r8
 800baa8:	3001      	adds	r0, #1
 800baaa:	d020      	beq.n	800baee <_printf_common+0xb2>
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	68e5      	ldr	r5, [r4, #12]
 800bab0:	f8d9 2000 	ldr.w	r2, [r9]
 800bab4:	f003 0306 	and.w	r3, r3, #6
 800bab8:	2b04      	cmp	r3, #4
 800baba:	bf08      	it	eq
 800babc:	1aad      	subeq	r5, r5, r2
 800babe:	68a3      	ldr	r3, [r4, #8]
 800bac0:	6922      	ldr	r2, [r4, #16]
 800bac2:	bf0c      	ite	eq
 800bac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bac8:	2500      	movne	r5, #0
 800baca:	4293      	cmp	r3, r2
 800bacc:	bfc4      	itt	gt
 800bace:	1a9b      	subgt	r3, r3, r2
 800bad0:	18ed      	addgt	r5, r5, r3
 800bad2:	f04f 0900 	mov.w	r9, #0
 800bad6:	341a      	adds	r4, #26
 800bad8:	454d      	cmp	r5, r9
 800bada:	d11a      	bne.n	800bb12 <_printf_common+0xd6>
 800badc:	2000      	movs	r0, #0
 800bade:	e008      	b.n	800baf2 <_printf_common+0xb6>
 800bae0:	2301      	movs	r3, #1
 800bae2:	4652      	mov	r2, sl
 800bae4:	4639      	mov	r1, r7
 800bae6:	4630      	mov	r0, r6
 800bae8:	47c0      	blx	r8
 800baea:	3001      	adds	r0, #1
 800baec:	d103      	bne.n	800baf6 <_printf_common+0xba>
 800baee:	f04f 30ff 	mov.w	r0, #4294967295
 800baf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf6:	3501      	adds	r5, #1
 800baf8:	e7c3      	b.n	800ba82 <_printf_common+0x46>
 800bafa:	18e1      	adds	r1, r4, r3
 800bafc:	1c5a      	adds	r2, r3, #1
 800bafe:	2030      	movs	r0, #48	; 0x30
 800bb00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb04:	4422      	add	r2, r4
 800bb06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb0e:	3302      	adds	r3, #2
 800bb10:	e7c5      	b.n	800ba9e <_printf_common+0x62>
 800bb12:	2301      	movs	r3, #1
 800bb14:	4622      	mov	r2, r4
 800bb16:	4639      	mov	r1, r7
 800bb18:	4630      	mov	r0, r6
 800bb1a:	47c0      	blx	r8
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	d0e6      	beq.n	800baee <_printf_common+0xb2>
 800bb20:	f109 0901 	add.w	r9, r9, #1
 800bb24:	e7d8      	b.n	800bad8 <_printf_common+0x9c>
	...

0800bb28 <_printf_i>:
 800bb28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bb30:	460c      	mov	r4, r1
 800bb32:	7e09      	ldrb	r1, [r1, #24]
 800bb34:	b085      	sub	sp, #20
 800bb36:	296e      	cmp	r1, #110	; 0x6e
 800bb38:	4617      	mov	r7, r2
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	4698      	mov	r8, r3
 800bb3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb40:	f000 80b3 	beq.w	800bcaa <_printf_i+0x182>
 800bb44:	d822      	bhi.n	800bb8c <_printf_i+0x64>
 800bb46:	2963      	cmp	r1, #99	; 0x63
 800bb48:	d036      	beq.n	800bbb8 <_printf_i+0x90>
 800bb4a:	d80a      	bhi.n	800bb62 <_printf_i+0x3a>
 800bb4c:	2900      	cmp	r1, #0
 800bb4e:	f000 80b9 	beq.w	800bcc4 <_printf_i+0x19c>
 800bb52:	2958      	cmp	r1, #88	; 0x58
 800bb54:	f000 8083 	beq.w	800bc5e <_printf_i+0x136>
 800bb58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bb60:	e032      	b.n	800bbc8 <_printf_i+0xa0>
 800bb62:	2964      	cmp	r1, #100	; 0x64
 800bb64:	d001      	beq.n	800bb6a <_printf_i+0x42>
 800bb66:	2969      	cmp	r1, #105	; 0x69
 800bb68:	d1f6      	bne.n	800bb58 <_printf_i+0x30>
 800bb6a:	6820      	ldr	r0, [r4, #0]
 800bb6c:	6813      	ldr	r3, [r2, #0]
 800bb6e:	0605      	lsls	r5, r0, #24
 800bb70:	f103 0104 	add.w	r1, r3, #4
 800bb74:	d52a      	bpl.n	800bbcc <_printf_i+0xa4>
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6011      	str	r1, [r2, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	da03      	bge.n	800bb86 <_printf_i+0x5e>
 800bb7e:	222d      	movs	r2, #45	; 0x2d
 800bb80:	425b      	negs	r3, r3
 800bb82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bb86:	486f      	ldr	r0, [pc, #444]	; (800bd44 <_printf_i+0x21c>)
 800bb88:	220a      	movs	r2, #10
 800bb8a:	e039      	b.n	800bc00 <_printf_i+0xd8>
 800bb8c:	2973      	cmp	r1, #115	; 0x73
 800bb8e:	f000 809d 	beq.w	800bccc <_printf_i+0x1a4>
 800bb92:	d808      	bhi.n	800bba6 <_printf_i+0x7e>
 800bb94:	296f      	cmp	r1, #111	; 0x6f
 800bb96:	d020      	beq.n	800bbda <_printf_i+0xb2>
 800bb98:	2970      	cmp	r1, #112	; 0x70
 800bb9a:	d1dd      	bne.n	800bb58 <_printf_i+0x30>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	f043 0320 	orr.w	r3, r3, #32
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	e003      	b.n	800bbae <_printf_i+0x86>
 800bba6:	2975      	cmp	r1, #117	; 0x75
 800bba8:	d017      	beq.n	800bbda <_printf_i+0xb2>
 800bbaa:	2978      	cmp	r1, #120	; 0x78
 800bbac:	d1d4      	bne.n	800bb58 <_printf_i+0x30>
 800bbae:	2378      	movs	r3, #120	; 0x78
 800bbb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbb4:	4864      	ldr	r0, [pc, #400]	; (800bd48 <_printf_i+0x220>)
 800bbb6:	e055      	b.n	800bc64 <_printf_i+0x13c>
 800bbb8:	6813      	ldr	r3, [r2, #0]
 800bbba:	1d19      	adds	r1, r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	6011      	str	r1, [r2, #0]
 800bbc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e08c      	b.n	800bce6 <_printf_i+0x1be>
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	6011      	str	r1, [r2, #0]
 800bbd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbd4:	bf18      	it	ne
 800bbd6:	b21b      	sxthne	r3, r3
 800bbd8:	e7cf      	b.n	800bb7a <_printf_i+0x52>
 800bbda:	6813      	ldr	r3, [r2, #0]
 800bbdc:	6825      	ldr	r5, [r4, #0]
 800bbde:	1d18      	adds	r0, r3, #4
 800bbe0:	6010      	str	r0, [r2, #0]
 800bbe2:	0628      	lsls	r0, r5, #24
 800bbe4:	d501      	bpl.n	800bbea <_printf_i+0xc2>
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	e002      	b.n	800bbf0 <_printf_i+0xc8>
 800bbea:	0668      	lsls	r0, r5, #25
 800bbec:	d5fb      	bpl.n	800bbe6 <_printf_i+0xbe>
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	4854      	ldr	r0, [pc, #336]	; (800bd44 <_printf_i+0x21c>)
 800bbf2:	296f      	cmp	r1, #111	; 0x6f
 800bbf4:	bf14      	ite	ne
 800bbf6:	220a      	movne	r2, #10
 800bbf8:	2208      	moveq	r2, #8
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc00:	6865      	ldr	r5, [r4, #4]
 800bc02:	60a5      	str	r5, [r4, #8]
 800bc04:	2d00      	cmp	r5, #0
 800bc06:	f2c0 8095 	blt.w	800bd34 <_printf_i+0x20c>
 800bc0a:	6821      	ldr	r1, [r4, #0]
 800bc0c:	f021 0104 	bic.w	r1, r1, #4
 800bc10:	6021      	str	r1, [r4, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d13d      	bne.n	800bc92 <_printf_i+0x16a>
 800bc16:	2d00      	cmp	r5, #0
 800bc18:	f040 808e 	bne.w	800bd38 <_printf_i+0x210>
 800bc1c:	4665      	mov	r5, ip
 800bc1e:	2a08      	cmp	r2, #8
 800bc20:	d10b      	bne.n	800bc3a <_printf_i+0x112>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	07db      	lsls	r3, r3, #31
 800bc26:	d508      	bpl.n	800bc3a <_printf_i+0x112>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	6862      	ldr	r2, [r4, #4]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	bfde      	ittt	le
 800bc30:	2330      	movle	r3, #48	; 0x30
 800bc32:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc36:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc3a:	ebac 0305 	sub.w	r3, ip, r5
 800bc3e:	6123      	str	r3, [r4, #16]
 800bc40:	f8cd 8000 	str.w	r8, [sp]
 800bc44:	463b      	mov	r3, r7
 800bc46:	aa03      	add	r2, sp, #12
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff fef6 	bl	800ba3c <_printf_common>
 800bc50:	3001      	adds	r0, #1
 800bc52:	d14d      	bne.n	800bcf0 <_printf_i+0x1c8>
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295
 800bc58:	b005      	add	sp, #20
 800bc5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc5e:	4839      	ldr	r0, [pc, #228]	; (800bd44 <_printf_i+0x21c>)
 800bc60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bc64:	6813      	ldr	r3, [r2, #0]
 800bc66:	6821      	ldr	r1, [r4, #0]
 800bc68:	1d1d      	adds	r5, r3, #4
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6015      	str	r5, [r2, #0]
 800bc6e:	060a      	lsls	r2, r1, #24
 800bc70:	d50b      	bpl.n	800bc8a <_printf_i+0x162>
 800bc72:	07ca      	lsls	r2, r1, #31
 800bc74:	bf44      	itt	mi
 800bc76:	f041 0120 	orrmi.w	r1, r1, #32
 800bc7a:	6021      	strmi	r1, [r4, #0]
 800bc7c:	b91b      	cbnz	r3, 800bc86 <_printf_i+0x15e>
 800bc7e:	6822      	ldr	r2, [r4, #0]
 800bc80:	f022 0220 	bic.w	r2, r2, #32
 800bc84:	6022      	str	r2, [r4, #0]
 800bc86:	2210      	movs	r2, #16
 800bc88:	e7b7      	b.n	800bbfa <_printf_i+0xd2>
 800bc8a:	064d      	lsls	r5, r1, #25
 800bc8c:	bf48      	it	mi
 800bc8e:	b29b      	uxthmi	r3, r3
 800bc90:	e7ef      	b.n	800bc72 <_printf_i+0x14a>
 800bc92:	4665      	mov	r5, ip
 800bc94:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc98:	fb02 3311 	mls	r3, r2, r1, r3
 800bc9c:	5cc3      	ldrb	r3, [r0, r3]
 800bc9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bca2:	460b      	mov	r3, r1
 800bca4:	2900      	cmp	r1, #0
 800bca6:	d1f5      	bne.n	800bc94 <_printf_i+0x16c>
 800bca8:	e7b9      	b.n	800bc1e <_printf_i+0xf6>
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	6825      	ldr	r5, [r4, #0]
 800bcae:	6961      	ldr	r1, [r4, #20]
 800bcb0:	1d18      	adds	r0, r3, #4
 800bcb2:	6010      	str	r0, [r2, #0]
 800bcb4:	0628      	lsls	r0, r5, #24
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	d501      	bpl.n	800bcbe <_printf_i+0x196>
 800bcba:	6019      	str	r1, [r3, #0]
 800bcbc:	e002      	b.n	800bcc4 <_printf_i+0x19c>
 800bcbe:	066a      	lsls	r2, r5, #25
 800bcc0:	d5fb      	bpl.n	800bcba <_printf_i+0x192>
 800bcc2:	8019      	strh	r1, [r3, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	6123      	str	r3, [r4, #16]
 800bcc8:	4665      	mov	r5, ip
 800bcca:	e7b9      	b.n	800bc40 <_printf_i+0x118>
 800bccc:	6813      	ldr	r3, [r2, #0]
 800bcce:	1d19      	adds	r1, r3, #4
 800bcd0:	6011      	str	r1, [r2, #0]
 800bcd2:	681d      	ldr	r5, [r3, #0]
 800bcd4:	6862      	ldr	r2, [r4, #4]
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	4628      	mov	r0, r5
 800bcda:	f7f4 fa89 	bl	80001f0 <memchr>
 800bcde:	b108      	cbz	r0, 800bce4 <_printf_i+0x1bc>
 800bce0:	1b40      	subs	r0, r0, r5
 800bce2:	6060      	str	r0, [r4, #4]
 800bce4:	6863      	ldr	r3, [r4, #4]
 800bce6:	6123      	str	r3, [r4, #16]
 800bce8:	2300      	movs	r3, #0
 800bcea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcee:	e7a7      	b.n	800bc40 <_printf_i+0x118>
 800bcf0:	6923      	ldr	r3, [r4, #16]
 800bcf2:	462a      	mov	r2, r5
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	47c0      	blx	r8
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	d0aa      	beq.n	800bc54 <_printf_i+0x12c>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	079b      	lsls	r3, r3, #30
 800bd02:	d413      	bmi.n	800bd2c <_printf_i+0x204>
 800bd04:	68e0      	ldr	r0, [r4, #12]
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	4298      	cmp	r0, r3
 800bd0a:	bfb8      	it	lt
 800bd0c:	4618      	movlt	r0, r3
 800bd0e:	e7a3      	b.n	800bc58 <_printf_i+0x130>
 800bd10:	2301      	movs	r3, #1
 800bd12:	464a      	mov	r2, r9
 800bd14:	4639      	mov	r1, r7
 800bd16:	4630      	mov	r0, r6
 800bd18:	47c0      	blx	r8
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	d09a      	beq.n	800bc54 <_printf_i+0x12c>
 800bd1e:	3501      	adds	r5, #1
 800bd20:	68e3      	ldr	r3, [r4, #12]
 800bd22:	9a03      	ldr	r2, [sp, #12]
 800bd24:	1a9b      	subs	r3, r3, r2
 800bd26:	42ab      	cmp	r3, r5
 800bd28:	dcf2      	bgt.n	800bd10 <_printf_i+0x1e8>
 800bd2a:	e7eb      	b.n	800bd04 <_printf_i+0x1dc>
 800bd2c:	2500      	movs	r5, #0
 800bd2e:	f104 0919 	add.w	r9, r4, #25
 800bd32:	e7f5      	b.n	800bd20 <_printf_i+0x1f8>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1ac      	bne.n	800bc92 <_printf_i+0x16a>
 800bd38:	7803      	ldrb	r3, [r0, #0]
 800bd3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd42:	e76c      	b.n	800bc1e <_printf_i+0xf6>
 800bd44:	08012dc8 	.word	0x08012dc8
 800bd48:	08012dd9 	.word	0x08012dd9

0800bd4c <_scanf_float>:
 800bd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd50:	469a      	mov	sl, r3
 800bd52:	688b      	ldr	r3, [r1, #8]
 800bd54:	4616      	mov	r6, r2
 800bd56:	1e5a      	subs	r2, r3, #1
 800bd58:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd5c:	b087      	sub	sp, #28
 800bd5e:	bf83      	ittte	hi
 800bd60:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800bd64:	189b      	addhi	r3, r3, r2
 800bd66:	9301      	strhi	r3, [sp, #4]
 800bd68:	2300      	movls	r3, #0
 800bd6a:	bf86      	itte	hi
 800bd6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd70:	608b      	strhi	r3, [r1, #8]
 800bd72:	9301      	strls	r3, [sp, #4]
 800bd74:	680b      	ldr	r3, [r1, #0]
 800bd76:	4688      	mov	r8, r1
 800bd78:	f04f 0b00 	mov.w	fp, #0
 800bd7c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bd80:	f848 3b1c 	str.w	r3, [r8], #28
 800bd84:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800bd88:	4607      	mov	r7, r0
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	4645      	mov	r5, r8
 800bd8e:	465a      	mov	r2, fp
 800bd90:	46d9      	mov	r9, fp
 800bd92:	f8cd b008 	str.w	fp, [sp, #8]
 800bd96:	68a1      	ldr	r1, [r4, #8]
 800bd98:	b181      	cbz	r1, 800bdbc <_scanf_float+0x70>
 800bd9a:	6833      	ldr	r3, [r6, #0]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b49      	cmp	r3, #73	; 0x49
 800bda0:	d071      	beq.n	800be86 <_scanf_float+0x13a>
 800bda2:	d84d      	bhi.n	800be40 <_scanf_float+0xf4>
 800bda4:	2b39      	cmp	r3, #57	; 0x39
 800bda6:	d840      	bhi.n	800be2a <_scanf_float+0xde>
 800bda8:	2b31      	cmp	r3, #49	; 0x31
 800bdaa:	f080 8088 	bcs.w	800bebe <_scanf_float+0x172>
 800bdae:	2b2d      	cmp	r3, #45	; 0x2d
 800bdb0:	f000 8090 	beq.w	800bed4 <_scanf_float+0x188>
 800bdb4:	d815      	bhi.n	800bde2 <_scanf_float+0x96>
 800bdb6:	2b2b      	cmp	r3, #43	; 0x2b
 800bdb8:	f000 808c 	beq.w	800bed4 <_scanf_float+0x188>
 800bdbc:	f1b9 0f00 	cmp.w	r9, #0
 800bdc0:	d003      	beq.n	800bdca <_scanf_float+0x7e>
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	3a01      	subs	r2, #1
 800bdcc:	2a01      	cmp	r2, #1
 800bdce:	f200 80ea 	bhi.w	800bfa6 <_scanf_float+0x25a>
 800bdd2:	4545      	cmp	r5, r8
 800bdd4:	f200 80dc 	bhi.w	800bf90 <_scanf_float+0x244>
 800bdd8:	2601      	movs	r6, #1
 800bdda:	4630      	mov	r0, r6
 800bddc:	b007      	add	sp, #28
 800bdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde2:	2b2e      	cmp	r3, #46	; 0x2e
 800bde4:	f000 809f 	beq.w	800bf26 <_scanf_float+0x1da>
 800bde8:	2b30      	cmp	r3, #48	; 0x30
 800bdea:	d1e7      	bne.n	800bdbc <_scanf_float+0x70>
 800bdec:	6820      	ldr	r0, [r4, #0]
 800bdee:	f410 7f80 	tst.w	r0, #256	; 0x100
 800bdf2:	d064      	beq.n	800bebe <_scanf_float+0x172>
 800bdf4:	9b01      	ldr	r3, [sp, #4]
 800bdf6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800bdfa:	6020      	str	r0, [r4, #0]
 800bdfc:	f109 0901 	add.w	r9, r9, #1
 800be00:	b11b      	cbz	r3, 800be0a <_scanf_float+0xbe>
 800be02:	3b01      	subs	r3, #1
 800be04:	3101      	adds	r1, #1
 800be06:	9301      	str	r3, [sp, #4]
 800be08:	60a1      	str	r1, [r4, #8]
 800be0a:	68a3      	ldr	r3, [r4, #8]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	60a3      	str	r3, [r4, #8]
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	3301      	adds	r3, #1
 800be14:	6123      	str	r3, [r4, #16]
 800be16:	6873      	ldr	r3, [r6, #4]
 800be18:	3b01      	subs	r3, #1
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	6073      	str	r3, [r6, #4]
 800be1e:	f340 80ac 	ble.w	800bf7a <_scanf_float+0x22e>
 800be22:	6833      	ldr	r3, [r6, #0]
 800be24:	3301      	adds	r3, #1
 800be26:	6033      	str	r3, [r6, #0]
 800be28:	e7b5      	b.n	800bd96 <_scanf_float+0x4a>
 800be2a:	2b45      	cmp	r3, #69	; 0x45
 800be2c:	f000 8085 	beq.w	800bf3a <_scanf_float+0x1ee>
 800be30:	2b46      	cmp	r3, #70	; 0x46
 800be32:	d06a      	beq.n	800bf0a <_scanf_float+0x1be>
 800be34:	2b41      	cmp	r3, #65	; 0x41
 800be36:	d1c1      	bne.n	800bdbc <_scanf_float+0x70>
 800be38:	2a01      	cmp	r2, #1
 800be3a:	d1bf      	bne.n	800bdbc <_scanf_float+0x70>
 800be3c:	2202      	movs	r2, #2
 800be3e:	e046      	b.n	800bece <_scanf_float+0x182>
 800be40:	2b65      	cmp	r3, #101	; 0x65
 800be42:	d07a      	beq.n	800bf3a <_scanf_float+0x1ee>
 800be44:	d818      	bhi.n	800be78 <_scanf_float+0x12c>
 800be46:	2b54      	cmp	r3, #84	; 0x54
 800be48:	d066      	beq.n	800bf18 <_scanf_float+0x1cc>
 800be4a:	d811      	bhi.n	800be70 <_scanf_float+0x124>
 800be4c:	2b4e      	cmp	r3, #78	; 0x4e
 800be4e:	d1b5      	bne.n	800bdbc <_scanf_float+0x70>
 800be50:	2a00      	cmp	r2, #0
 800be52:	d146      	bne.n	800bee2 <_scanf_float+0x196>
 800be54:	f1b9 0f00 	cmp.w	r9, #0
 800be58:	d145      	bne.n	800bee6 <_scanf_float+0x19a>
 800be5a:	6821      	ldr	r1, [r4, #0]
 800be5c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800be60:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800be64:	d13f      	bne.n	800bee6 <_scanf_float+0x19a>
 800be66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800be6a:	6021      	str	r1, [r4, #0]
 800be6c:	2201      	movs	r2, #1
 800be6e:	e02e      	b.n	800bece <_scanf_float+0x182>
 800be70:	2b59      	cmp	r3, #89	; 0x59
 800be72:	d01e      	beq.n	800beb2 <_scanf_float+0x166>
 800be74:	2b61      	cmp	r3, #97	; 0x61
 800be76:	e7de      	b.n	800be36 <_scanf_float+0xea>
 800be78:	2b6e      	cmp	r3, #110	; 0x6e
 800be7a:	d0e9      	beq.n	800be50 <_scanf_float+0x104>
 800be7c:	d815      	bhi.n	800beaa <_scanf_float+0x15e>
 800be7e:	2b66      	cmp	r3, #102	; 0x66
 800be80:	d043      	beq.n	800bf0a <_scanf_float+0x1be>
 800be82:	2b69      	cmp	r3, #105	; 0x69
 800be84:	d19a      	bne.n	800bdbc <_scanf_float+0x70>
 800be86:	f1bb 0f00 	cmp.w	fp, #0
 800be8a:	d138      	bne.n	800befe <_scanf_float+0x1b2>
 800be8c:	f1b9 0f00 	cmp.w	r9, #0
 800be90:	d197      	bne.n	800bdc2 <_scanf_float+0x76>
 800be92:	6821      	ldr	r1, [r4, #0]
 800be94:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800be98:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800be9c:	d195      	bne.n	800bdca <_scanf_float+0x7e>
 800be9e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bea2:	6021      	str	r1, [r4, #0]
 800bea4:	f04f 0b01 	mov.w	fp, #1
 800bea8:	e011      	b.n	800bece <_scanf_float+0x182>
 800beaa:	2b74      	cmp	r3, #116	; 0x74
 800beac:	d034      	beq.n	800bf18 <_scanf_float+0x1cc>
 800beae:	2b79      	cmp	r3, #121	; 0x79
 800beb0:	d184      	bne.n	800bdbc <_scanf_float+0x70>
 800beb2:	f1bb 0f07 	cmp.w	fp, #7
 800beb6:	d181      	bne.n	800bdbc <_scanf_float+0x70>
 800beb8:	f04f 0b08 	mov.w	fp, #8
 800bebc:	e007      	b.n	800bece <_scanf_float+0x182>
 800bebe:	eb12 0f0b 	cmn.w	r2, fp
 800bec2:	f47f af7b 	bne.w	800bdbc <_scanf_float+0x70>
 800bec6:	6821      	ldr	r1, [r4, #0]
 800bec8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800becc:	6021      	str	r1, [r4, #0]
 800bece:	702b      	strb	r3, [r5, #0]
 800bed0:	3501      	adds	r5, #1
 800bed2:	e79a      	b.n	800be0a <_scanf_float+0xbe>
 800bed4:	6821      	ldr	r1, [r4, #0]
 800bed6:	0608      	lsls	r0, r1, #24
 800bed8:	f57f af70 	bpl.w	800bdbc <_scanf_float+0x70>
 800bedc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bee0:	e7f4      	b.n	800becc <_scanf_float+0x180>
 800bee2:	2a02      	cmp	r2, #2
 800bee4:	d047      	beq.n	800bf76 <_scanf_float+0x22a>
 800bee6:	f1bb 0f01 	cmp.w	fp, #1
 800beea:	d003      	beq.n	800bef4 <_scanf_float+0x1a8>
 800beec:	f1bb 0f04 	cmp.w	fp, #4
 800bef0:	f47f af64 	bne.w	800bdbc <_scanf_float+0x70>
 800bef4:	f10b 0b01 	add.w	fp, fp, #1
 800bef8:	fa5f fb8b 	uxtb.w	fp, fp
 800befc:	e7e7      	b.n	800bece <_scanf_float+0x182>
 800befe:	f1bb 0f03 	cmp.w	fp, #3
 800bf02:	d0f7      	beq.n	800bef4 <_scanf_float+0x1a8>
 800bf04:	f1bb 0f05 	cmp.w	fp, #5
 800bf08:	e7f2      	b.n	800bef0 <_scanf_float+0x1a4>
 800bf0a:	f1bb 0f02 	cmp.w	fp, #2
 800bf0e:	f47f af55 	bne.w	800bdbc <_scanf_float+0x70>
 800bf12:	f04f 0b03 	mov.w	fp, #3
 800bf16:	e7da      	b.n	800bece <_scanf_float+0x182>
 800bf18:	f1bb 0f06 	cmp.w	fp, #6
 800bf1c:	f47f af4e 	bne.w	800bdbc <_scanf_float+0x70>
 800bf20:	f04f 0b07 	mov.w	fp, #7
 800bf24:	e7d3      	b.n	800bece <_scanf_float+0x182>
 800bf26:	6821      	ldr	r1, [r4, #0]
 800bf28:	0588      	lsls	r0, r1, #22
 800bf2a:	f57f af47 	bpl.w	800bdbc <_scanf_float+0x70>
 800bf2e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800bf32:	6021      	str	r1, [r4, #0]
 800bf34:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf38:	e7c9      	b.n	800bece <_scanf_float+0x182>
 800bf3a:	6821      	ldr	r1, [r4, #0]
 800bf3c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800bf40:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bf44:	d006      	beq.n	800bf54 <_scanf_float+0x208>
 800bf46:	0548      	lsls	r0, r1, #21
 800bf48:	f57f af38 	bpl.w	800bdbc <_scanf_float+0x70>
 800bf4c:	f1b9 0f00 	cmp.w	r9, #0
 800bf50:	f43f af3b 	beq.w	800bdca <_scanf_float+0x7e>
 800bf54:	0588      	lsls	r0, r1, #22
 800bf56:	bf58      	it	pl
 800bf58:	9802      	ldrpl	r0, [sp, #8]
 800bf5a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bf5e:	bf58      	it	pl
 800bf60:	eba9 0000 	subpl.w	r0, r9, r0
 800bf64:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800bf68:	bf58      	it	pl
 800bf6a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800bf6e:	6021      	str	r1, [r4, #0]
 800bf70:	f04f 0900 	mov.w	r9, #0
 800bf74:	e7ab      	b.n	800bece <_scanf_float+0x182>
 800bf76:	2203      	movs	r2, #3
 800bf78:	e7a9      	b.n	800bece <_scanf_float+0x182>
 800bf7a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bf7e:	9205      	str	r2, [sp, #20]
 800bf80:	4631      	mov	r1, r6
 800bf82:	4638      	mov	r0, r7
 800bf84:	4798      	blx	r3
 800bf86:	9a05      	ldr	r2, [sp, #20]
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	f43f af04 	beq.w	800bd96 <_scanf_float+0x4a>
 800bf8e:	e715      	b.n	800bdbc <_scanf_float+0x70>
 800bf90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bf98:	4632      	mov	r2, r6
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	4798      	blx	r3
 800bf9e:	6923      	ldr	r3, [r4, #16]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	6123      	str	r3, [r4, #16]
 800bfa4:	e715      	b.n	800bdd2 <_scanf_float+0x86>
 800bfa6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bfaa:	2b06      	cmp	r3, #6
 800bfac:	d80a      	bhi.n	800bfc4 <_scanf_float+0x278>
 800bfae:	f1bb 0f02 	cmp.w	fp, #2
 800bfb2:	d968      	bls.n	800c086 <_scanf_float+0x33a>
 800bfb4:	f1ab 0b03 	sub.w	fp, fp, #3
 800bfb8:	fa5f fb8b 	uxtb.w	fp, fp
 800bfbc:	eba5 0b0b 	sub.w	fp, r5, fp
 800bfc0:	455d      	cmp	r5, fp
 800bfc2:	d14b      	bne.n	800c05c <_scanf_float+0x310>
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	05da      	lsls	r2, r3, #23
 800bfc8:	d51f      	bpl.n	800c00a <_scanf_float+0x2be>
 800bfca:	055b      	lsls	r3, r3, #21
 800bfcc:	d468      	bmi.n	800c0a0 <_scanf_float+0x354>
 800bfce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bfd2:	6923      	ldr	r3, [r4, #16]
 800bfd4:	2965      	cmp	r1, #101	; 0x65
 800bfd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800bfda:	f105 3bff 	add.w	fp, r5, #4294967295
 800bfde:	6123      	str	r3, [r4, #16]
 800bfe0:	d00d      	beq.n	800bffe <_scanf_float+0x2b2>
 800bfe2:	2945      	cmp	r1, #69	; 0x45
 800bfe4:	d00b      	beq.n	800bffe <_scanf_float+0x2b2>
 800bfe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bfea:	4632      	mov	r2, r6
 800bfec:	4638      	mov	r0, r7
 800bfee:	4798      	blx	r3
 800bff0:	6923      	ldr	r3, [r4, #16]
 800bff2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800bff6:	3b01      	subs	r3, #1
 800bff8:	f1a5 0b02 	sub.w	fp, r5, #2
 800bffc:	6123      	str	r3, [r4, #16]
 800bffe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c002:	4632      	mov	r2, r6
 800c004:	4638      	mov	r0, r7
 800c006:	4798      	blx	r3
 800c008:	465d      	mov	r5, fp
 800c00a:	6826      	ldr	r6, [r4, #0]
 800c00c:	f016 0610 	ands.w	r6, r6, #16
 800c010:	d17a      	bne.n	800c108 <_scanf_float+0x3bc>
 800c012:	702e      	strb	r6, [r5, #0]
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c01e:	d142      	bne.n	800c0a6 <_scanf_float+0x35a>
 800c020:	9b02      	ldr	r3, [sp, #8]
 800c022:	eba9 0303 	sub.w	r3, r9, r3
 800c026:	425a      	negs	r2, r3
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d149      	bne.n	800c0c0 <_scanf_float+0x374>
 800c02c:	2200      	movs	r2, #0
 800c02e:	4641      	mov	r1, r8
 800c030:	4638      	mov	r0, r7
 800c032:	f000 ffb5 	bl	800cfa0 <_strtod_r>
 800c036:	6825      	ldr	r5, [r4, #0]
 800c038:	f8da 3000 	ldr.w	r3, [sl]
 800c03c:	f015 0f02 	tst.w	r5, #2
 800c040:	f103 0204 	add.w	r2, r3, #4
 800c044:	ec59 8b10 	vmov	r8, r9, d0
 800c048:	f8ca 2000 	str.w	r2, [sl]
 800c04c:	d043      	beq.n	800c0d6 <_scanf_float+0x38a>
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	e9c3 8900 	strd	r8, r9, [r3]
 800c054:	68e3      	ldr	r3, [r4, #12]
 800c056:	3301      	adds	r3, #1
 800c058:	60e3      	str	r3, [r4, #12]
 800c05a:	e6be      	b.n	800bdda <_scanf_float+0x8e>
 800c05c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c060:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c064:	4632      	mov	r2, r6
 800c066:	4638      	mov	r0, r7
 800c068:	4798      	blx	r3
 800c06a:	6923      	ldr	r3, [r4, #16]
 800c06c:	3b01      	subs	r3, #1
 800c06e:	6123      	str	r3, [r4, #16]
 800c070:	e7a6      	b.n	800bfc0 <_scanf_float+0x274>
 800c072:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c076:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c07a:	4632      	mov	r2, r6
 800c07c:	4638      	mov	r0, r7
 800c07e:	4798      	blx	r3
 800c080:	6923      	ldr	r3, [r4, #16]
 800c082:	3b01      	subs	r3, #1
 800c084:	6123      	str	r3, [r4, #16]
 800c086:	4545      	cmp	r5, r8
 800c088:	d8f3      	bhi.n	800c072 <_scanf_float+0x326>
 800c08a:	e6a5      	b.n	800bdd8 <_scanf_float+0x8c>
 800c08c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c090:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c094:	4632      	mov	r2, r6
 800c096:	4638      	mov	r0, r7
 800c098:	4798      	blx	r3
 800c09a:	6923      	ldr	r3, [r4, #16]
 800c09c:	3b01      	subs	r3, #1
 800c09e:	6123      	str	r3, [r4, #16]
 800c0a0:	4545      	cmp	r5, r8
 800c0a2:	d8f3      	bhi.n	800c08c <_scanf_float+0x340>
 800c0a4:	e698      	b.n	800bdd8 <_scanf_float+0x8c>
 800c0a6:	9b03      	ldr	r3, [sp, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d0bf      	beq.n	800c02c <_scanf_float+0x2e0>
 800c0ac:	9904      	ldr	r1, [sp, #16]
 800c0ae:	230a      	movs	r3, #10
 800c0b0:	4632      	mov	r2, r6
 800c0b2:	3101      	adds	r1, #1
 800c0b4:	4638      	mov	r0, r7
 800c0b6:	f000 ffff 	bl	800d0b8 <_strtol_r>
 800c0ba:	9b03      	ldr	r3, [sp, #12]
 800c0bc:	9d04      	ldr	r5, [sp, #16]
 800c0be:	1ac2      	subs	r2, r0, r3
 800c0c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c0c4:	429d      	cmp	r5, r3
 800c0c6:	bf28      	it	cs
 800c0c8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800c0cc:	490f      	ldr	r1, [pc, #60]	; (800c10c <_scanf_float+0x3c0>)
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	f000 f8b0 	bl	800c234 <siprintf>
 800c0d4:	e7aa      	b.n	800c02c <_scanf_float+0x2e0>
 800c0d6:	f015 0504 	ands.w	r5, r5, #4
 800c0da:	d1b8      	bne.n	800c04e <_scanf_float+0x302>
 800c0dc:	681f      	ldr	r7, [r3, #0]
 800c0de:	ee10 2a10 	vmov	r2, s0
 800c0e2:	464b      	mov	r3, r9
 800c0e4:	ee10 0a10 	vmov	r0, s0
 800c0e8:	4649      	mov	r1, r9
 800c0ea:	f7f4 fd27 	bl	8000b3c <__aeabi_dcmpun>
 800c0ee:	b128      	cbz	r0, 800c0fc <_scanf_float+0x3b0>
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f000 f899 	bl	800c228 <nanf>
 800c0f6:	ed87 0a00 	vstr	s0, [r7]
 800c0fa:	e7ab      	b.n	800c054 <_scanf_float+0x308>
 800c0fc:	4640      	mov	r0, r8
 800c0fe:	4649      	mov	r1, r9
 800c100:	f7f4 fd7a 	bl	8000bf8 <__aeabi_d2f>
 800c104:	6038      	str	r0, [r7, #0]
 800c106:	e7a5      	b.n	800c054 <_scanf_float+0x308>
 800c108:	2600      	movs	r6, #0
 800c10a:	e666      	b.n	800bdda <_scanf_float+0x8e>
 800c10c:	08012dea 	.word	0x08012dea

0800c110 <iprintf>:
 800c110:	b40f      	push	{r0, r1, r2, r3}
 800c112:	4b0a      	ldr	r3, [pc, #40]	; (800c13c <iprintf+0x2c>)
 800c114:	b513      	push	{r0, r1, r4, lr}
 800c116:	681c      	ldr	r4, [r3, #0]
 800c118:	b124      	cbz	r4, 800c124 <iprintf+0x14>
 800c11a:	69a3      	ldr	r3, [r4, #24]
 800c11c:	b913      	cbnz	r3, 800c124 <iprintf+0x14>
 800c11e:	4620      	mov	r0, r4
 800c120:	f001 fff2 	bl	800e108 <__sinit>
 800c124:	ab05      	add	r3, sp, #20
 800c126:	9a04      	ldr	r2, [sp, #16]
 800c128:	68a1      	ldr	r1, [r4, #8]
 800c12a:	9301      	str	r3, [sp, #4]
 800c12c:	4620      	mov	r0, r4
 800c12e:	f003 fb85 	bl	800f83c <_vfiprintf_r>
 800c132:	b002      	add	sp, #8
 800c134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c138:	b004      	add	sp, #16
 800c13a:	4770      	bx	lr
 800c13c:	200001f4 	.word	0x200001f4

0800c140 <_puts_r>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	460e      	mov	r6, r1
 800c144:	4605      	mov	r5, r0
 800c146:	b118      	cbz	r0, 800c150 <_puts_r+0x10>
 800c148:	6983      	ldr	r3, [r0, #24]
 800c14a:	b90b      	cbnz	r3, 800c150 <_puts_r+0x10>
 800c14c:	f001 ffdc 	bl	800e108 <__sinit>
 800c150:	69ab      	ldr	r3, [r5, #24]
 800c152:	68ac      	ldr	r4, [r5, #8]
 800c154:	b913      	cbnz	r3, 800c15c <_puts_r+0x1c>
 800c156:	4628      	mov	r0, r5
 800c158:	f001 ffd6 	bl	800e108 <__sinit>
 800c15c:	4b23      	ldr	r3, [pc, #140]	; (800c1ec <_puts_r+0xac>)
 800c15e:	429c      	cmp	r4, r3
 800c160:	d117      	bne.n	800c192 <_puts_r+0x52>
 800c162:	686c      	ldr	r4, [r5, #4]
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	071b      	lsls	r3, r3, #28
 800c168:	d51d      	bpl.n	800c1a6 <_puts_r+0x66>
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	b1db      	cbz	r3, 800c1a6 <_puts_r+0x66>
 800c16e:	3e01      	subs	r6, #1
 800c170:	68a3      	ldr	r3, [r4, #8]
 800c172:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c176:	3b01      	subs	r3, #1
 800c178:	60a3      	str	r3, [r4, #8]
 800c17a:	b9e9      	cbnz	r1, 800c1b8 <_puts_r+0x78>
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	da2e      	bge.n	800c1de <_puts_r+0x9e>
 800c180:	4622      	mov	r2, r4
 800c182:	210a      	movs	r1, #10
 800c184:	4628      	mov	r0, r5
 800c186:	f000 ffa9 	bl	800d0dc <__swbuf_r>
 800c18a:	3001      	adds	r0, #1
 800c18c:	d011      	beq.n	800c1b2 <_puts_r+0x72>
 800c18e:	200a      	movs	r0, #10
 800c190:	e011      	b.n	800c1b6 <_puts_r+0x76>
 800c192:	4b17      	ldr	r3, [pc, #92]	; (800c1f0 <_puts_r+0xb0>)
 800c194:	429c      	cmp	r4, r3
 800c196:	d101      	bne.n	800c19c <_puts_r+0x5c>
 800c198:	68ac      	ldr	r4, [r5, #8]
 800c19a:	e7e3      	b.n	800c164 <_puts_r+0x24>
 800c19c:	4b15      	ldr	r3, [pc, #84]	; (800c1f4 <_puts_r+0xb4>)
 800c19e:	429c      	cmp	r4, r3
 800c1a0:	bf08      	it	eq
 800c1a2:	68ec      	ldreq	r4, [r5, #12]
 800c1a4:	e7de      	b.n	800c164 <_puts_r+0x24>
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	f000 fffb 	bl	800d1a4 <__swsetup_r>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d0dd      	beq.n	800c16e <_puts_r+0x2e>
 800c1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b6:	bd70      	pop	{r4, r5, r6, pc}
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	da04      	bge.n	800c1c6 <_puts_r+0x86>
 800c1bc:	69a2      	ldr	r2, [r4, #24]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	dc06      	bgt.n	800c1d0 <_puts_r+0x90>
 800c1c2:	290a      	cmp	r1, #10
 800c1c4:	d004      	beq.n	800c1d0 <_puts_r+0x90>
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	1c5a      	adds	r2, r3, #1
 800c1ca:	6022      	str	r2, [r4, #0]
 800c1cc:	7019      	strb	r1, [r3, #0]
 800c1ce:	e7cf      	b.n	800c170 <_puts_r+0x30>
 800c1d0:	4622      	mov	r2, r4
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f000 ff82 	bl	800d0dc <__swbuf_r>
 800c1d8:	3001      	adds	r0, #1
 800c1da:	d1c9      	bne.n	800c170 <_puts_r+0x30>
 800c1dc:	e7e9      	b.n	800c1b2 <_puts_r+0x72>
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	200a      	movs	r0, #10
 800c1e2:	1c5a      	adds	r2, r3, #1
 800c1e4:	6022      	str	r2, [r4, #0]
 800c1e6:	7018      	strb	r0, [r3, #0]
 800c1e8:	e7e5      	b.n	800c1b6 <_puts_r+0x76>
 800c1ea:	bf00      	nop
 800c1ec:	08012e70 	.word	0x08012e70
 800c1f0:	08012e90 	.word	0x08012e90
 800c1f4:	08012e50 	.word	0x08012e50

0800c1f8 <puts>:
 800c1f8:	4b02      	ldr	r3, [pc, #8]	; (800c204 <puts+0xc>)
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	6818      	ldr	r0, [r3, #0]
 800c1fe:	f7ff bf9f 	b.w	800c140 <_puts_r>
 800c202:	bf00      	nop
 800c204:	200001f4 	.word	0x200001f4

0800c208 <_sbrk_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	4c06      	ldr	r4, [pc, #24]	; (800c224 <_sbrk_r+0x1c>)
 800c20c:	2300      	movs	r3, #0
 800c20e:	4605      	mov	r5, r0
 800c210:	4608      	mov	r0, r1
 800c212:	6023      	str	r3, [r4, #0]
 800c214:	f7f6 f98a 	bl	800252c <_sbrk>
 800c218:	1c43      	adds	r3, r0, #1
 800c21a:	d102      	bne.n	800c222 <_sbrk_r+0x1a>
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	b103      	cbz	r3, 800c222 <_sbrk_r+0x1a>
 800c220:	602b      	str	r3, [r5, #0]
 800c222:	bd38      	pop	{r3, r4, r5, pc}
 800c224:	200013d4 	.word	0x200013d4

0800c228 <nanf>:
 800c228:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c230 <nanf+0x8>
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	7fc00000 	.word	0x7fc00000

0800c234 <siprintf>:
 800c234:	b40e      	push	{r1, r2, r3}
 800c236:	b500      	push	{lr}
 800c238:	b09c      	sub	sp, #112	; 0x70
 800c23a:	ab1d      	add	r3, sp, #116	; 0x74
 800c23c:	9002      	str	r0, [sp, #8]
 800c23e:	9006      	str	r0, [sp, #24]
 800c240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c244:	4809      	ldr	r0, [pc, #36]	; (800c26c <siprintf+0x38>)
 800c246:	9107      	str	r1, [sp, #28]
 800c248:	9104      	str	r1, [sp, #16]
 800c24a:	4909      	ldr	r1, [pc, #36]	; (800c270 <siprintf+0x3c>)
 800c24c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c250:	9105      	str	r1, [sp, #20]
 800c252:	6800      	ldr	r0, [r0, #0]
 800c254:	9301      	str	r3, [sp, #4]
 800c256:	a902      	add	r1, sp, #8
 800c258:	f003 f824 	bl	800f2a4 <_svfiprintf_r>
 800c25c:	9b02      	ldr	r3, [sp, #8]
 800c25e:	2200      	movs	r2, #0
 800c260:	701a      	strb	r2, [r3, #0]
 800c262:	b01c      	add	sp, #112	; 0x70
 800c264:	f85d eb04 	ldr.w	lr, [sp], #4
 800c268:	b003      	add	sp, #12
 800c26a:	4770      	bx	lr
 800c26c:	200001f4 	.word	0x200001f4
 800c270:	ffff0208 	.word	0xffff0208

0800c274 <siscanf>:
 800c274:	b40e      	push	{r1, r2, r3}
 800c276:	b530      	push	{r4, r5, lr}
 800c278:	b09c      	sub	sp, #112	; 0x70
 800c27a:	ac1f      	add	r4, sp, #124	; 0x7c
 800c27c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c280:	f854 5b04 	ldr.w	r5, [r4], #4
 800c284:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c288:	9002      	str	r0, [sp, #8]
 800c28a:	9006      	str	r0, [sp, #24]
 800c28c:	f7f3 ffa8 	bl	80001e0 <strlen>
 800c290:	4b0b      	ldr	r3, [pc, #44]	; (800c2c0 <siscanf+0x4c>)
 800c292:	9003      	str	r0, [sp, #12]
 800c294:	9007      	str	r0, [sp, #28]
 800c296:	930b      	str	r3, [sp, #44]	; 0x2c
 800c298:	480a      	ldr	r0, [pc, #40]	; (800c2c4 <siscanf+0x50>)
 800c29a:	9401      	str	r4, [sp, #4]
 800c29c:	2300      	movs	r3, #0
 800c29e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2a0:	9314      	str	r3, [sp, #80]	; 0x50
 800c2a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c2aa:	462a      	mov	r2, r5
 800c2ac:	4623      	mov	r3, r4
 800c2ae:	a902      	add	r1, sp, #8
 800c2b0:	6800      	ldr	r0, [r0, #0]
 800c2b2:	f003 f949 	bl	800f548 <__ssvfiscanf_r>
 800c2b6:	b01c      	add	sp, #112	; 0x70
 800c2b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2bc:	b003      	add	sp, #12
 800c2be:	4770      	bx	lr
 800c2c0:	0800c2eb 	.word	0x0800c2eb
 800c2c4:	200001f4 	.word	0x200001f4

0800c2c8 <__sread>:
 800c2c8:	b510      	push	{r4, lr}
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d0:	f003 fd22 	bl	800fd18 <_read_r>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	bfab      	itete	ge
 800c2d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2da:	89a3      	ldrhlt	r3, [r4, #12]
 800c2dc:	181b      	addge	r3, r3, r0
 800c2de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2e2:	bfac      	ite	ge
 800c2e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2e6:	81a3      	strhlt	r3, [r4, #12]
 800c2e8:	bd10      	pop	{r4, pc}

0800c2ea <__seofread>:
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	4770      	bx	lr

0800c2ee <__swrite>:
 800c2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f2:	461f      	mov	r7, r3
 800c2f4:	898b      	ldrh	r3, [r1, #12]
 800c2f6:	05db      	lsls	r3, r3, #23
 800c2f8:	4605      	mov	r5, r0
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	4616      	mov	r6, r2
 800c2fe:	d505      	bpl.n	800c30c <__swrite+0x1e>
 800c300:	2302      	movs	r3, #2
 800c302:	2200      	movs	r2, #0
 800c304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c308:	f002 fad0 	bl	800e8ac <_lseek_r>
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c316:	81a3      	strh	r3, [r4, #12]
 800c318:	4632      	mov	r2, r6
 800c31a:	463b      	mov	r3, r7
 800c31c:	4628      	mov	r0, r5
 800c31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c322:	f000 bf2d 	b.w	800d180 <_write_r>

0800c326 <__sseek>:
 800c326:	b510      	push	{r4, lr}
 800c328:	460c      	mov	r4, r1
 800c32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c32e:	f002 fabd 	bl	800e8ac <_lseek_r>
 800c332:	1c43      	adds	r3, r0, #1
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	bf15      	itete	ne
 800c338:	6560      	strne	r0, [r4, #84]	; 0x54
 800c33a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c33e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c342:	81a3      	strheq	r3, [r4, #12]
 800c344:	bf18      	it	ne
 800c346:	81a3      	strhne	r3, [r4, #12]
 800c348:	bd10      	pop	{r4, pc}

0800c34a <__sclose>:
 800c34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c34e:	f000 bf97 	b.w	800d280 <_close_r>

0800c352 <strlcpy>:
 800c352:	b510      	push	{r4, lr}
 800c354:	460b      	mov	r3, r1
 800c356:	b162      	cbz	r2, 800c372 <strlcpy+0x20>
 800c358:	3a01      	subs	r2, #1
 800c35a:	d008      	beq.n	800c36e <strlcpy+0x1c>
 800c35c:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c360:	f800 4b01 	strb.w	r4, [r0], #1
 800c364:	2c00      	cmp	r4, #0
 800c366:	d1f7      	bne.n	800c358 <strlcpy+0x6>
 800c368:	1a58      	subs	r0, r3, r1
 800c36a:	3801      	subs	r0, #1
 800c36c:	bd10      	pop	{r4, pc}
 800c36e:	2200      	movs	r2, #0
 800c370:	7002      	strb	r2, [r0, #0]
 800c372:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c376:	2a00      	cmp	r2, #0
 800c378:	d1fb      	bne.n	800c372 <strlcpy+0x20>
 800c37a:	e7f5      	b.n	800c368 <strlcpy+0x16>

0800c37c <sulp>:
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	4604      	mov	r4, r0
 800c380:	460d      	mov	r5, r1
 800c382:	ec45 4b10 	vmov	d0, r4, r5
 800c386:	4616      	mov	r6, r2
 800c388:	f002 fdf0 	bl	800ef6c <__ulp>
 800c38c:	ec51 0b10 	vmov	r0, r1, d0
 800c390:	b17e      	cbz	r6, 800c3b2 <sulp+0x36>
 800c392:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c396:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	dd09      	ble.n	800c3b2 <sulp+0x36>
 800c39e:	051b      	lsls	r3, r3, #20
 800c3a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c3a4:	2400      	movs	r4, #0
 800c3a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c3aa:	4622      	mov	r2, r4
 800c3ac:	462b      	mov	r3, r5
 800c3ae:	f7f4 f92b 	bl	8000608 <__aeabi_dmul>
 800c3b2:	bd70      	pop	{r4, r5, r6, pc}
 800c3b4:	0000      	movs	r0, r0
	...

0800c3b8 <_strtod_l>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	461f      	mov	r7, r3
 800c3be:	b0a1      	sub	sp, #132	; 0x84
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	4681      	mov	r9, r0
 800c3c4:	4638      	mov	r0, r7
 800c3c6:	460e      	mov	r6, r1
 800c3c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c3ca:	931c      	str	r3, [sp, #112]	; 0x70
 800c3cc:	f002 fa5e 	bl	800e88c <__localeconv_l>
 800c3d0:	4680      	mov	r8, r0
 800c3d2:	6800      	ldr	r0, [r0, #0]
 800c3d4:	f7f3 ff04 	bl	80001e0 <strlen>
 800c3d8:	f04f 0a00 	mov.w	sl, #0
 800c3dc:	4604      	mov	r4, r0
 800c3de:	f04f 0b00 	mov.w	fp, #0
 800c3e2:	961b      	str	r6, [sp, #108]	; 0x6c
 800c3e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3e6:	781a      	ldrb	r2, [r3, #0]
 800c3e8:	2a0d      	cmp	r2, #13
 800c3ea:	d832      	bhi.n	800c452 <_strtod_l+0x9a>
 800c3ec:	2a09      	cmp	r2, #9
 800c3ee:	d236      	bcs.n	800c45e <_strtod_l+0xa6>
 800c3f0:	2a00      	cmp	r2, #0
 800c3f2:	d03e      	beq.n	800c472 <_strtod_l+0xba>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	930d      	str	r3, [sp, #52]	; 0x34
 800c3f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c3fa:	782b      	ldrb	r3, [r5, #0]
 800c3fc:	2b30      	cmp	r3, #48	; 0x30
 800c3fe:	f040 80ac 	bne.w	800c55a <_strtod_l+0x1a2>
 800c402:	786b      	ldrb	r3, [r5, #1]
 800c404:	2b58      	cmp	r3, #88	; 0x58
 800c406:	d001      	beq.n	800c40c <_strtod_l+0x54>
 800c408:	2b78      	cmp	r3, #120	; 0x78
 800c40a:	d167      	bne.n	800c4dc <_strtod_l+0x124>
 800c40c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	ab1c      	add	r3, sp, #112	; 0x70
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	9702      	str	r7, [sp, #8]
 800c416:	ab1d      	add	r3, sp, #116	; 0x74
 800c418:	4a88      	ldr	r2, [pc, #544]	; (800c63c <_strtod_l+0x284>)
 800c41a:	a91b      	add	r1, sp, #108	; 0x6c
 800c41c:	4648      	mov	r0, r9
 800c41e:	f001 ff4c 	bl	800e2ba <__gethex>
 800c422:	f010 0407 	ands.w	r4, r0, #7
 800c426:	4606      	mov	r6, r0
 800c428:	d005      	beq.n	800c436 <_strtod_l+0x7e>
 800c42a:	2c06      	cmp	r4, #6
 800c42c:	d12b      	bne.n	800c486 <_strtod_l+0xce>
 800c42e:	3501      	adds	r5, #1
 800c430:	2300      	movs	r3, #0
 800c432:	951b      	str	r5, [sp, #108]	; 0x6c
 800c434:	930d      	str	r3, [sp, #52]	; 0x34
 800c436:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f040 859a 	bne.w	800cf72 <_strtod_l+0xbba>
 800c43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c440:	b1e3      	cbz	r3, 800c47c <_strtod_l+0xc4>
 800c442:	4652      	mov	r2, sl
 800c444:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c448:	ec43 2b10 	vmov	d0, r2, r3
 800c44c:	b021      	add	sp, #132	; 0x84
 800c44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c452:	2a2b      	cmp	r2, #43	; 0x2b
 800c454:	d015      	beq.n	800c482 <_strtod_l+0xca>
 800c456:	2a2d      	cmp	r2, #45	; 0x2d
 800c458:	d004      	beq.n	800c464 <_strtod_l+0xac>
 800c45a:	2a20      	cmp	r2, #32
 800c45c:	d1ca      	bne.n	800c3f4 <_strtod_l+0x3c>
 800c45e:	3301      	adds	r3, #1
 800c460:	931b      	str	r3, [sp, #108]	; 0x6c
 800c462:	e7bf      	b.n	800c3e4 <_strtod_l+0x2c>
 800c464:	2201      	movs	r2, #1
 800c466:	920d      	str	r2, [sp, #52]	; 0x34
 800c468:	1c5a      	adds	r2, r3, #1
 800c46a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c46c:	785b      	ldrb	r3, [r3, #1]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1c2      	bne.n	800c3f8 <_strtod_l+0x40>
 800c472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c474:	961b      	str	r6, [sp, #108]	; 0x6c
 800c476:	2b00      	cmp	r3, #0
 800c478:	f040 8579 	bne.w	800cf6e <_strtod_l+0xbb6>
 800c47c:	4652      	mov	r2, sl
 800c47e:	465b      	mov	r3, fp
 800c480:	e7e2      	b.n	800c448 <_strtod_l+0x90>
 800c482:	2200      	movs	r2, #0
 800c484:	e7ef      	b.n	800c466 <_strtod_l+0xae>
 800c486:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c488:	b13a      	cbz	r2, 800c49a <_strtod_l+0xe2>
 800c48a:	2135      	movs	r1, #53	; 0x35
 800c48c:	a81e      	add	r0, sp, #120	; 0x78
 800c48e:	f002 fe65 	bl	800f15c <__copybits>
 800c492:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c494:	4648      	mov	r0, r9
 800c496:	f002 fad2 	bl	800ea3e <_Bfree>
 800c49a:	3c01      	subs	r4, #1
 800c49c:	2c04      	cmp	r4, #4
 800c49e:	d806      	bhi.n	800c4ae <_strtod_l+0xf6>
 800c4a0:	e8df f004 	tbb	[pc, r4]
 800c4a4:	1714030a 	.word	0x1714030a
 800c4a8:	0a          	.byte	0x0a
 800c4a9:	00          	.byte	0x00
 800c4aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800c4ae:	0730      	lsls	r0, r6, #28
 800c4b0:	d5c1      	bpl.n	800c436 <_strtod_l+0x7e>
 800c4b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c4b6:	e7be      	b.n	800c436 <_strtod_l+0x7e>
 800c4b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800c4bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c4be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c4c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c4c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c4ca:	e7f0      	b.n	800c4ae <_strtod_l+0xf6>
 800c4cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800c640 <_strtod_l+0x288>
 800c4d0:	e7ed      	b.n	800c4ae <_strtod_l+0xf6>
 800c4d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c4d6:	f04f 3aff 	mov.w	sl, #4294967295
 800c4da:	e7e8      	b.n	800c4ae <_strtod_l+0xf6>
 800c4dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c4e2:	785b      	ldrb	r3, [r3, #1]
 800c4e4:	2b30      	cmp	r3, #48	; 0x30
 800c4e6:	d0f9      	beq.n	800c4dc <_strtod_l+0x124>
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d0a4      	beq.n	800c436 <_strtod_l+0x7e>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	2500      	movs	r5, #0
 800c4f0:	9306      	str	r3, [sp, #24]
 800c4f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4f4:	9308      	str	r3, [sp, #32]
 800c4f6:	9507      	str	r5, [sp, #28]
 800c4f8:	9505      	str	r5, [sp, #20]
 800c4fa:	220a      	movs	r2, #10
 800c4fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c4fe:	7807      	ldrb	r7, [r0, #0]
 800c500:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c504:	b2d9      	uxtb	r1, r3
 800c506:	2909      	cmp	r1, #9
 800c508:	d929      	bls.n	800c55e <_strtod_l+0x1a6>
 800c50a:	4622      	mov	r2, r4
 800c50c:	f8d8 1000 	ldr.w	r1, [r8]
 800c510:	f003 fc46 	bl	800fda0 <strncmp>
 800c514:	2800      	cmp	r0, #0
 800c516:	d031      	beq.n	800c57c <_strtod_l+0x1c4>
 800c518:	2000      	movs	r0, #0
 800c51a:	9c05      	ldr	r4, [sp, #20]
 800c51c:	9004      	str	r0, [sp, #16]
 800c51e:	463b      	mov	r3, r7
 800c520:	4602      	mov	r2, r0
 800c522:	2b65      	cmp	r3, #101	; 0x65
 800c524:	d001      	beq.n	800c52a <_strtod_l+0x172>
 800c526:	2b45      	cmp	r3, #69	; 0x45
 800c528:	d114      	bne.n	800c554 <_strtod_l+0x19c>
 800c52a:	b924      	cbnz	r4, 800c536 <_strtod_l+0x17e>
 800c52c:	b910      	cbnz	r0, 800c534 <_strtod_l+0x17c>
 800c52e:	9b06      	ldr	r3, [sp, #24]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d09e      	beq.n	800c472 <_strtod_l+0xba>
 800c534:	2400      	movs	r4, #0
 800c536:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c538:	1c73      	adds	r3, r6, #1
 800c53a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c53c:	7873      	ldrb	r3, [r6, #1]
 800c53e:	2b2b      	cmp	r3, #43	; 0x2b
 800c540:	d078      	beq.n	800c634 <_strtod_l+0x27c>
 800c542:	2b2d      	cmp	r3, #45	; 0x2d
 800c544:	d070      	beq.n	800c628 <_strtod_l+0x270>
 800c546:	f04f 0c00 	mov.w	ip, #0
 800c54a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c54e:	2f09      	cmp	r7, #9
 800c550:	d97c      	bls.n	800c64c <_strtod_l+0x294>
 800c552:	961b      	str	r6, [sp, #108]	; 0x6c
 800c554:	f04f 0e00 	mov.w	lr, #0
 800c558:	e09a      	b.n	800c690 <_strtod_l+0x2d8>
 800c55a:	2300      	movs	r3, #0
 800c55c:	e7c7      	b.n	800c4ee <_strtod_l+0x136>
 800c55e:	9905      	ldr	r1, [sp, #20]
 800c560:	2908      	cmp	r1, #8
 800c562:	bfdd      	ittte	le
 800c564:	9907      	ldrle	r1, [sp, #28]
 800c566:	fb02 3301 	mlale	r3, r2, r1, r3
 800c56a:	9307      	strle	r3, [sp, #28]
 800c56c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c570:	9b05      	ldr	r3, [sp, #20]
 800c572:	3001      	adds	r0, #1
 800c574:	3301      	adds	r3, #1
 800c576:	9305      	str	r3, [sp, #20]
 800c578:	901b      	str	r0, [sp, #108]	; 0x6c
 800c57a:	e7bf      	b.n	800c4fc <_strtod_l+0x144>
 800c57c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c57e:	191a      	adds	r2, r3, r4
 800c580:	921b      	str	r2, [sp, #108]	; 0x6c
 800c582:	9a05      	ldr	r2, [sp, #20]
 800c584:	5d1b      	ldrb	r3, [r3, r4]
 800c586:	2a00      	cmp	r2, #0
 800c588:	d037      	beq.n	800c5fa <_strtod_l+0x242>
 800c58a:	9c05      	ldr	r4, [sp, #20]
 800c58c:	4602      	mov	r2, r0
 800c58e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c592:	2909      	cmp	r1, #9
 800c594:	d913      	bls.n	800c5be <_strtod_l+0x206>
 800c596:	2101      	movs	r1, #1
 800c598:	9104      	str	r1, [sp, #16]
 800c59a:	e7c2      	b.n	800c522 <_strtod_l+0x16a>
 800c59c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c59e:	1c5a      	adds	r2, r3, #1
 800c5a0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c5a2:	785b      	ldrb	r3, [r3, #1]
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	2b30      	cmp	r3, #48	; 0x30
 800c5a8:	d0f8      	beq.n	800c59c <_strtod_l+0x1e4>
 800c5aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c5ae:	2a08      	cmp	r2, #8
 800c5b0:	f200 84e4 	bhi.w	800cf7c <_strtod_l+0xbc4>
 800c5b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c5b6:	9208      	str	r2, [sp, #32]
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	4604      	mov	r4, r0
 800c5be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c5c2:	f100 0101 	add.w	r1, r0, #1
 800c5c6:	d012      	beq.n	800c5ee <_strtod_l+0x236>
 800c5c8:	440a      	add	r2, r1
 800c5ca:	eb00 0c04 	add.w	ip, r0, r4
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	270a      	movs	r7, #10
 800c5d2:	458c      	cmp	ip, r1
 800c5d4:	d113      	bne.n	800c5fe <_strtod_l+0x246>
 800c5d6:	1821      	adds	r1, r4, r0
 800c5d8:	2908      	cmp	r1, #8
 800c5da:	f104 0401 	add.w	r4, r4, #1
 800c5de:	4404      	add	r4, r0
 800c5e0:	dc19      	bgt.n	800c616 <_strtod_l+0x25e>
 800c5e2:	9b07      	ldr	r3, [sp, #28]
 800c5e4:	210a      	movs	r1, #10
 800c5e6:	fb01 e303 	mla	r3, r1, r3, lr
 800c5ea:	9307      	str	r3, [sp, #28]
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5f0:	1c58      	adds	r0, r3, #1
 800c5f2:	901b      	str	r0, [sp, #108]	; 0x6c
 800c5f4:	785b      	ldrb	r3, [r3, #1]
 800c5f6:	4608      	mov	r0, r1
 800c5f8:	e7c9      	b.n	800c58e <_strtod_l+0x1d6>
 800c5fa:	9805      	ldr	r0, [sp, #20]
 800c5fc:	e7d3      	b.n	800c5a6 <_strtod_l+0x1ee>
 800c5fe:	2908      	cmp	r1, #8
 800c600:	f101 0101 	add.w	r1, r1, #1
 800c604:	dc03      	bgt.n	800c60e <_strtod_l+0x256>
 800c606:	9b07      	ldr	r3, [sp, #28]
 800c608:	437b      	muls	r3, r7
 800c60a:	9307      	str	r3, [sp, #28]
 800c60c:	e7e1      	b.n	800c5d2 <_strtod_l+0x21a>
 800c60e:	2910      	cmp	r1, #16
 800c610:	bfd8      	it	le
 800c612:	437d      	mulle	r5, r7
 800c614:	e7dd      	b.n	800c5d2 <_strtod_l+0x21a>
 800c616:	2c10      	cmp	r4, #16
 800c618:	bfdc      	itt	le
 800c61a:	210a      	movle	r1, #10
 800c61c:	fb01 e505 	mlale	r5, r1, r5, lr
 800c620:	e7e4      	b.n	800c5ec <_strtod_l+0x234>
 800c622:	2301      	movs	r3, #1
 800c624:	9304      	str	r3, [sp, #16]
 800c626:	e781      	b.n	800c52c <_strtod_l+0x174>
 800c628:	f04f 0c01 	mov.w	ip, #1
 800c62c:	1cb3      	adds	r3, r6, #2
 800c62e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c630:	78b3      	ldrb	r3, [r6, #2]
 800c632:	e78a      	b.n	800c54a <_strtod_l+0x192>
 800c634:	f04f 0c00 	mov.w	ip, #0
 800c638:	e7f8      	b.n	800c62c <_strtod_l+0x274>
 800c63a:	bf00      	nop
 800c63c:	08012df0 	.word	0x08012df0
 800c640:	7ff00000 	.word	0x7ff00000
 800c644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c646:	1c5f      	adds	r7, r3, #1
 800c648:	971b      	str	r7, [sp, #108]	; 0x6c
 800c64a:	785b      	ldrb	r3, [r3, #1]
 800c64c:	2b30      	cmp	r3, #48	; 0x30
 800c64e:	d0f9      	beq.n	800c644 <_strtod_l+0x28c>
 800c650:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c654:	2f08      	cmp	r7, #8
 800c656:	f63f af7d 	bhi.w	800c554 <_strtod_l+0x19c>
 800c65a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c65e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c660:	930a      	str	r3, [sp, #40]	; 0x28
 800c662:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c664:	1c5f      	adds	r7, r3, #1
 800c666:	971b      	str	r7, [sp, #108]	; 0x6c
 800c668:	785b      	ldrb	r3, [r3, #1]
 800c66a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c66e:	f1b8 0f09 	cmp.w	r8, #9
 800c672:	d937      	bls.n	800c6e4 <_strtod_l+0x32c>
 800c674:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c676:	1a7f      	subs	r7, r7, r1
 800c678:	2f08      	cmp	r7, #8
 800c67a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c67e:	dc37      	bgt.n	800c6f0 <_strtod_l+0x338>
 800c680:	45be      	cmp	lr, r7
 800c682:	bfa8      	it	ge
 800c684:	46be      	movge	lr, r7
 800c686:	f1bc 0f00 	cmp.w	ip, #0
 800c68a:	d001      	beq.n	800c690 <_strtod_l+0x2d8>
 800c68c:	f1ce 0e00 	rsb	lr, lr, #0
 800c690:	2c00      	cmp	r4, #0
 800c692:	d151      	bne.n	800c738 <_strtod_l+0x380>
 800c694:	2800      	cmp	r0, #0
 800c696:	f47f aece 	bne.w	800c436 <_strtod_l+0x7e>
 800c69a:	9a06      	ldr	r2, [sp, #24]
 800c69c:	2a00      	cmp	r2, #0
 800c69e:	f47f aeca 	bne.w	800c436 <_strtod_l+0x7e>
 800c6a2:	9a04      	ldr	r2, [sp, #16]
 800c6a4:	2a00      	cmp	r2, #0
 800c6a6:	f47f aee4 	bne.w	800c472 <_strtod_l+0xba>
 800c6aa:	2b4e      	cmp	r3, #78	; 0x4e
 800c6ac:	d027      	beq.n	800c6fe <_strtod_l+0x346>
 800c6ae:	dc21      	bgt.n	800c6f4 <_strtod_l+0x33c>
 800c6b0:	2b49      	cmp	r3, #73	; 0x49
 800c6b2:	f47f aede 	bne.w	800c472 <_strtod_l+0xba>
 800c6b6:	49a0      	ldr	r1, [pc, #640]	; (800c938 <_strtod_l+0x580>)
 800c6b8:	a81b      	add	r0, sp, #108	; 0x6c
 800c6ba:	f002 f831 	bl	800e720 <__match>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	f43f aed7 	beq.w	800c472 <_strtod_l+0xba>
 800c6c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6c6:	499d      	ldr	r1, [pc, #628]	; (800c93c <_strtod_l+0x584>)
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	a81b      	add	r0, sp, #108	; 0x6c
 800c6cc:	931b      	str	r3, [sp, #108]	; 0x6c
 800c6ce:	f002 f827 	bl	800e720 <__match>
 800c6d2:	b910      	cbnz	r0, 800c6da <_strtod_l+0x322>
 800c6d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c6da:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c950 <_strtod_l+0x598>
 800c6de:	f04f 0a00 	mov.w	sl, #0
 800c6e2:	e6a8      	b.n	800c436 <_strtod_l+0x7e>
 800c6e4:	210a      	movs	r1, #10
 800c6e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c6ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c6ee:	e7b8      	b.n	800c662 <_strtod_l+0x2aa>
 800c6f0:	46be      	mov	lr, r7
 800c6f2:	e7c8      	b.n	800c686 <_strtod_l+0x2ce>
 800c6f4:	2b69      	cmp	r3, #105	; 0x69
 800c6f6:	d0de      	beq.n	800c6b6 <_strtod_l+0x2fe>
 800c6f8:	2b6e      	cmp	r3, #110	; 0x6e
 800c6fa:	f47f aeba 	bne.w	800c472 <_strtod_l+0xba>
 800c6fe:	4990      	ldr	r1, [pc, #576]	; (800c940 <_strtod_l+0x588>)
 800c700:	a81b      	add	r0, sp, #108	; 0x6c
 800c702:	f002 f80d 	bl	800e720 <__match>
 800c706:	2800      	cmp	r0, #0
 800c708:	f43f aeb3 	beq.w	800c472 <_strtod_l+0xba>
 800c70c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b28      	cmp	r3, #40	; 0x28
 800c712:	d10e      	bne.n	800c732 <_strtod_l+0x37a>
 800c714:	aa1e      	add	r2, sp, #120	; 0x78
 800c716:	498b      	ldr	r1, [pc, #556]	; (800c944 <_strtod_l+0x58c>)
 800c718:	a81b      	add	r0, sp, #108	; 0x6c
 800c71a:	f002 f815 	bl	800e748 <__hexnan>
 800c71e:	2805      	cmp	r0, #5
 800c720:	d107      	bne.n	800c732 <_strtod_l+0x37a>
 800c722:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c724:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c728:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c72c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c730:	e681      	b.n	800c436 <_strtod_l+0x7e>
 800c732:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c958 <_strtod_l+0x5a0>
 800c736:	e7d2      	b.n	800c6de <_strtod_l+0x326>
 800c738:	ebae 0302 	sub.w	r3, lr, r2
 800c73c:	9306      	str	r3, [sp, #24]
 800c73e:	9b05      	ldr	r3, [sp, #20]
 800c740:	9807      	ldr	r0, [sp, #28]
 800c742:	2b00      	cmp	r3, #0
 800c744:	bf08      	it	eq
 800c746:	4623      	moveq	r3, r4
 800c748:	2c10      	cmp	r4, #16
 800c74a:	9305      	str	r3, [sp, #20]
 800c74c:	46a0      	mov	r8, r4
 800c74e:	bfa8      	it	ge
 800c750:	f04f 0810 	movge.w	r8, #16
 800c754:	f7f3 fede 	bl	8000514 <__aeabi_ui2d>
 800c758:	2c09      	cmp	r4, #9
 800c75a:	4682      	mov	sl, r0
 800c75c:	468b      	mov	fp, r1
 800c75e:	dc13      	bgt.n	800c788 <_strtod_l+0x3d0>
 800c760:	9b06      	ldr	r3, [sp, #24]
 800c762:	2b00      	cmp	r3, #0
 800c764:	f43f ae67 	beq.w	800c436 <_strtod_l+0x7e>
 800c768:	9b06      	ldr	r3, [sp, #24]
 800c76a:	dd7a      	ble.n	800c862 <_strtod_l+0x4aa>
 800c76c:	2b16      	cmp	r3, #22
 800c76e:	dc61      	bgt.n	800c834 <_strtod_l+0x47c>
 800c770:	4a75      	ldr	r2, [pc, #468]	; (800c948 <_strtod_l+0x590>)
 800c772:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c776:	e9de 0100 	ldrd	r0, r1, [lr]
 800c77a:	4652      	mov	r2, sl
 800c77c:	465b      	mov	r3, fp
 800c77e:	f7f3 ff43 	bl	8000608 <__aeabi_dmul>
 800c782:	4682      	mov	sl, r0
 800c784:	468b      	mov	fp, r1
 800c786:	e656      	b.n	800c436 <_strtod_l+0x7e>
 800c788:	4b6f      	ldr	r3, [pc, #444]	; (800c948 <_strtod_l+0x590>)
 800c78a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c78e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c792:	f7f3 ff39 	bl	8000608 <__aeabi_dmul>
 800c796:	4606      	mov	r6, r0
 800c798:	4628      	mov	r0, r5
 800c79a:	460f      	mov	r7, r1
 800c79c:	f7f3 feba 	bl	8000514 <__aeabi_ui2d>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	4639      	mov	r1, r7
 800c7a8:	f7f3 fd78 	bl	800029c <__adddf3>
 800c7ac:	2c0f      	cmp	r4, #15
 800c7ae:	4682      	mov	sl, r0
 800c7b0:	468b      	mov	fp, r1
 800c7b2:	ddd5      	ble.n	800c760 <_strtod_l+0x3a8>
 800c7b4:	9b06      	ldr	r3, [sp, #24]
 800c7b6:	eba4 0808 	sub.w	r8, r4, r8
 800c7ba:	4498      	add	r8, r3
 800c7bc:	f1b8 0f00 	cmp.w	r8, #0
 800c7c0:	f340 8096 	ble.w	800c8f0 <_strtod_l+0x538>
 800c7c4:	f018 030f 	ands.w	r3, r8, #15
 800c7c8:	d00a      	beq.n	800c7e0 <_strtod_l+0x428>
 800c7ca:	495f      	ldr	r1, [pc, #380]	; (800c948 <_strtod_l+0x590>)
 800c7cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c7d0:	4652      	mov	r2, sl
 800c7d2:	465b      	mov	r3, fp
 800c7d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7d8:	f7f3 ff16 	bl	8000608 <__aeabi_dmul>
 800c7dc:	4682      	mov	sl, r0
 800c7de:	468b      	mov	fp, r1
 800c7e0:	f038 080f 	bics.w	r8, r8, #15
 800c7e4:	d073      	beq.n	800c8ce <_strtod_l+0x516>
 800c7e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c7ea:	dd47      	ble.n	800c87c <_strtod_l+0x4c4>
 800c7ec:	2400      	movs	r4, #0
 800c7ee:	46a0      	mov	r8, r4
 800c7f0:	9407      	str	r4, [sp, #28]
 800c7f2:	9405      	str	r4, [sp, #20]
 800c7f4:	2322      	movs	r3, #34	; 0x22
 800c7f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c950 <_strtod_l+0x598>
 800c7fa:	f8c9 3000 	str.w	r3, [r9]
 800c7fe:	f04f 0a00 	mov.w	sl, #0
 800c802:	9b07      	ldr	r3, [sp, #28]
 800c804:	2b00      	cmp	r3, #0
 800c806:	f43f ae16 	beq.w	800c436 <_strtod_l+0x7e>
 800c80a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c80c:	4648      	mov	r0, r9
 800c80e:	f002 f916 	bl	800ea3e <_Bfree>
 800c812:	9905      	ldr	r1, [sp, #20]
 800c814:	4648      	mov	r0, r9
 800c816:	f002 f912 	bl	800ea3e <_Bfree>
 800c81a:	4641      	mov	r1, r8
 800c81c:	4648      	mov	r0, r9
 800c81e:	f002 f90e 	bl	800ea3e <_Bfree>
 800c822:	9907      	ldr	r1, [sp, #28]
 800c824:	4648      	mov	r0, r9
 800c826:	f002 f90a 	bl	800ea3e <_Bfree>
 800c82a:	4621      	mov	r1, r4
 800c82c:	4648      	mov	r0, r9
 800c82e:	f002 f906 	bl	800ea3e <_Bfree>
 800c832:	e600      	b.n	800c436 <_strtod_l+0x7e>
 800c834:	9a06      	ldr	r2, [sp, #24]
 800c836:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c83a:	4293      	cmp	r3, r2
 800c83c:	dbba      	blt.n	800c7b4 <_strtod_l+0x3fc>
 800c83e:	4d42      	ldr	r5, [pc, #264]	; (800c948 <_strtod_l+0x590>)
 800c840:	f1c4 040f 	rsb	r4, r4, #15
 800c844:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c848:	4652      	mov	r2, sl
 800c84a:	465b      	mov	r3, fp
 800c84c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c850:	f7f3 feda 	bl	8000608 <__aeabi_dmul>
 800c854:	9b06      	ldr	r3, [sp, #24]
 800c856:	1b1c      	subs	r4, r3, r4
 800c858:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c85c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c860:	e78d      	b.n	800c77e <_strtod_l+0x3c6>
 800c862:	f113 0f16 	cmn.w	r3, #22
 800c866:	dba5      	blt.n	800c7b4 <_strtod_l+0x3fc>
 800c868:	4a37      	ldr	r2, [pc, #220]	; (800c948 <_strtod_l+0x590>)
 800c86a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c86e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c872:	4650      	mov	r0, sl
 800c874:	4659      	mov	r1, fp
 800c876:	f7f3 fff1 	bl	800085c <__aeabi_ddiv>
 800c87a:	e782      	b.n	800c782 <_strtod_l+0x3ca>
 800c87c:	2300      	movs	r3, #0
 800c87e:	4e33      	ldr	r6, [pc, #204]	; (800c94c <_strtod_l+0x594>)
 800c880:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c884:	4650      	mov	r0, sl
 800c886:	4659      	mov	r1, fp
 800c888:	461d      	mov	r5, r3
 800c88a:	f1b8 0f01 	cmp.w	r8, #1
 800c88e:	dc21      	bgt.n	800c8d4 <_strtod_l+0x51c>
 800c890:	b10b      	cbz	r3, 800c896 <_strtod_l+0x4de>
 800c892:	4682      	mov	sl, r0
 800c894:	468b      	mov	fp, r1
 800c896:	4b2d      	ldr	r3, [pc, #180]	; (800c94c <_strtod_l+0x594>)
 800c898:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c89c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c8a0:	4652      	mov	r2, sl
 800c8a2:	465b      	mov	r3, fp
 800c8a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c8a8:	f7f3 feae 	bl	8000608 <__aeabi_dmul>
 800c8ac:	4b28      	ldr	r3, [pc, #160]	; (800c950 <_strtod_l+0x598>)
 800c8ae:	460a      	mov	r2, r1
 800c8b0:	400b      	ands	r3, r1
 800c8b2:	4928      	ldr	r1, [pc, #160]	; (800c954 <_strtod_l+0x59c>)
 800c8b4:	428b      	cmp	r3, r1
 800c8b6:	4682      	mov	sl, r0
 800c8b8:	d898      	bhi.n	800c7ec <_strtod_l+0x434>
 800c8ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c8be:	428b      	cmp	r3, r1
 800c8c0:	bf86      	itte	hi
 800c8c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c95c <_strtod_l+0x5a4>
 800c8c6:	f04f 3aff 	movhi.w	sl, #4294967295
 800c8ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9304      	str	r3, [sp, #16]
 800c8d2:	e077      	b.n	800c9c4 <_strtod_l+0x60c>
 800c8d4:	f018 0f01 	tst.w	r8, #1
 800c8d8:	d006      	beq.n	800c8e8 <_strtod_l+0x530>
 800c8da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e2:	f7f3 fe91 	bl	8000608 <__aeabi_dmul>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	3501      	adds	r5, #1
 800c8ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c8ee:	e7cc      	b.n	800c88a <_strtod_l+0x4d2>
 800c8f0:	d0ed      	beq.n	800c8ce <_strtod_l+0x516>
 800c8f2:	f1c8 0800 	rsb	r8, r8, #0
 800c8f6:	f018 020f 	ands.w	r2, r8, #15
 800c8fa:	d00a      	beq.n	800c912 <_strtod_l+0x55a>
 800c8fc:	4b12      	ldr	r3, [pc, #72]	; (800c948 <_strtod_l+0x590>)
 800c8fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c902:	4650      	mov	r0, sl
 800c904:	4659      	mov	r1, fp
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	f7f3 ffa7 	bl	800085c <__aeabi_ddiv>
 800c90e:	4682      	mov	sl, r0
 800c910:	468b      	mov	fp, r1
 800c912:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c916:	d0da      	beq.n	800c8ce <_strtod_l+0x516>
 800c918:	f1b8 0f1f 	cmp.w	r8, #31
 800c91c:	dd20      	ble.n	800c960 <_strtod_l+0x5a8>
 800c91e:	2400      	movs	r4, #0
 800c920:	46a0      	mov	r8, r4
 800c922:	9407      	str	r4, [sp, #28]
 800c924:	9405      	str	r4, [sp, #20]
 800c926:	2322      	movs	r3, #34	; 0x22
 800c928:	f04f 0a00 	mov.w	sl, #0
 800c92c:	f04f 0b00 	mov.w	fp, #0
 800c930:	f8c9 3000 	str.w	r3, [r9]
 800c934:	e765      	b.n	800c802 <_strtod_l+0x44a>
 800c936:	bf00      	nop
 800c938:	08012dbd 	.word	0x08012dbd
 800c93c:	08012e43 	.word	0x08012e43
 800c940:	08012dc5 	.word	0x08012dc5
 800c944:	08012e04 	.word	0x08012e04
 800c948:	08012ee8 	.word	0x08012ee8
 800c94c:	08012ec0 	.word	0x08012ec0
 800c950:	7ff00000 	.word	0x7ff00000
 800c954:	7ca00000 	.word	0x7ca00000
 800c958:	fff80000 	.word	0xfff80000
 800c95c:	7fefffff 	.word	0x7fefffff
 800c960:	f018 0310 	ands.w	r3, r8, #16
 800c964:	bf18      	it	ne
 800c966:	236a      	movne	r3, #106	; 0x6a
 800c968:	4da0      	ldr	r5, [pc, #640]	; (800cbec <_strtod_l+0x834>)
 800c96a:	9304      	str	r3, [sp, #16]
 800c96c:	4650      	mov	r0, sl
 800c96e:	4659      	mov	r1, fp
 800c970:	2300      	movs	r3, #0
 800c972:	f1b8 0f00 	cmp.w	r8, #0
 800c976:	f300 810a 	bgt.w	800cb8e <_strtod_l+0x7d6>
 800c97a:	b10b      	cbz	r3, 800c980 <_strtod_l+0x5c8>
 800c97c:	4682      	mov	sl, r0
 800c97e:	468b      	mov	fp, r1
 800c980:	9b04      	ldr	r3, [sp, #16]
 800c982:	b1bb      	cbz	r3, 800c9b4 <_strtod_l+0x5fc>
 800c984:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c988:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	4659      	mov	r1, fp
 800c990:	dd10      	ble.n	800c9b4 <_strtod_l+0x5fc>
 800c992:	2b1f      	cmp	r3, #31
 800c994:	f340 8107 	ble.w	800cba6 <_strtod_l+0x7ee>
 800c998:	2b34      	cmp	r3, #52	; 0x34
 800c99a:	bfde      	ittt	le
 800c99c:	3b20      	suble	r3, #32
 800c99e:	f04f 32ff 	movle.w	r2, #4294967295
 800c9a2:	fa02 f303 	lslle.w	r3, r2, r3
 800c9a6:	f04f 0a00 	mov.w	sl, #0
 800c9aa:	bfcc      	ite	gt
 800c9ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c9b0:	ea03 0b01 	andle.w	fp, r3, r1
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	4650      	mov	r0, sl
 800c9ba:	4659      	mov	r1, fp
 800c9bc:	f7f4 f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d1ac      	bne.n	800c91e <_strtod_l+0x566>
 800c9c4:	9b07      	ldr	r3, [sp, #28]
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	9a05      	ldr	r2, [sp, #20]
 800c9ca:	9908      	ldr	r1, [sp, #32]
 800c9cc:	4623      	mov	r3, r4
 800c9ce:	4648      	mov	r0, r9
 800c9d0:	f002 f887 	bl	800eae2 <__s2b>
 800c9d4:	9007      	str	r0, [sp, #28]
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	f43f af08 	beq.w	800c7ec <_strtod_l+0x434>
 800c9dc:	9a06      	ldr	r2, [sp, #24]
 800c9de:	9b06      	ldr	r3, [sp, #24]
 800c9e0:	2a00      	cmp	r2, #0
 800c9e2:	f1c3 0300 	rsb	r3, r3, #0
 800c9e6:	bfa8      	it	ge
 800c9e8:	2300      	movge	r3, #0
 800c9ea:	930e      	str	r3, [sp, #56]	; 0x38
 800c9ec:	2400      	movs	r4, #0
 800c9ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c9f2:	9316      	str	r3, [sp, #88]	; 0x58
 800c9f4:	46a0      	mov	r8, r4
 800c9f6:	9b07      	ldr	r3, [sp, #28]
 800c9f8:	4648      	mov	r0, r9
 800c9fa:	6859      	ldr	r1, [r3, #4]
 800c9fc:	f001 ffeb 	bl	800e9d6 <_Balloc>
 800ca00:	9005      	str	r0, [sp, #20]
 800ca02:	2800      	cmp	r0, #0
 800ca04:	f43f aef6 	beq.w	800c7f4 <_strtod_l+0x43c>
 800ca08:	9b07      	ldr	r3, [sp, #28]
 800ca0a:	691a      	ldr	r2, [r3, #16]
 800ca0c:	3202      	adds	r2, #2
 800ca0e:	f103 010c 	add.w	r1, r3, #12
 800ca12:	0092      	lsls	r2, r2, #2
 800ca14:	300c      	adds	r0, #12
 800ca16:	f001 ffd1 	bl	800e9bc <memcpy>
 800ca1a:	aa1e      	add	r2, sp, #120	; 0x78
 800ca1c:	a91d      	add	r1, sp, #116	; 0x74
 800ca1e:	ec4b ab10 	vmov	d0, sl, fp
 800ca22:	4648      	mov	r0, r9
 800ca24:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ca28:	f002 fb16 	bl	800f058 <__d2b>
 800ca2c:	901c      	str	r0, [sp, #112]	; 0x70
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	f43f aee0 	beq.w	800c7f4 <_strtod_l+0x43c>
 800ca34:	2101      	movs	r1, #1
 800ca36:	4648      	mov	r0, r9
 800ca38:	f002 f8df 	bl	800ebfa <__i2b>
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f43f aed8 	beq.w	800c7f4 <_strtod_l+0x43c>
 800ca44:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ca46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ca48:	2e00      	cmp	r6, #0
 800ca4a:	bfab      	itete	ge
 800ca4c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ca4e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ca50:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ca52:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ca54:	bfac      	ite	ge
 800ca56:	18f7      	addge	r7, r6, r3
 800ca58:	1b9d      	sublt	r5, r3, r6
 800ca5a:	9b04      	ldr	r3, [sp, #16]
 800ca5c:	1af6      	subs	r6, r6, r3
 800ca5e:	4416      	add	r6, r2
 800ca60:	4b63      	ldr	r3, [pc, #396]	; (800cbf0 <_strtod_l+0x838>)
 800ca62:	3e01      	subs	r6, #1
 800ca64:	429e      	cmp	r6, r3
 800ca66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ca6a:	f280 80af 	bge.w	800cbcc <_strtod_l+0x814>
 800ca6e:	1b9b      	subs	r3, r3, r6
 800ca70:	2b1f      	cmp	r3, #31
 800ca72:	eba2 0203 	sub.w	r2, r2, r3
 800ca76:	f04f 0101 	mov.w	r1, #1
 800ca7a:	f300 809b 	bgt.w	800cbb4 <_strtod_l+0x7fc>
 800ca7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ca82:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca84:	2300      	movs	r3, #0
 800ca86:	930a      	str	r3, [sp, #40]	; 0x28
 800ca88:	18be      	adds	r6, r7, r2
 800ca8a:	9b04      	ldr	r3, [sp, #16]
 800ca8c:	42b7      	cmp	r7, r6
 800ca8e:	4415      	add	r5, r2
 800ca90:	441d      	add	r5, r3
 800ca92:	463b      	mov	r3, r7
 800ca94:	bfa8      	it	ge
 800ca96:	4633      	movge	r3, r6
 800ca98:	42ab      	cmp	r3, r5
 800ca9a:	bfa8      	it	ge
 800ca9c:	462b      	movge	r3, r5
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	bfc2      	ittt	gt
 800caa2:	1af6      	subgt	r6, r6, r3
 800caa4:	1aed      	subgt	r5, r5, r3
 800caa6:	1aff      	subgt	r7, r7, r3
 800caa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800caaa:	b1bb      	cbz	r3, 800cadc <_strtod_l+0x724>
 800caac:	4641      	mov	r1, r8
 800caae:	461a      	mov	r2, r3
 800cab0:	4648      	mov	r0, r9
 800cab2:	f002 f941 	bl	800ed38 <__pow5mult>
 800cab6:	4680      	mov	r8, r0
 800cab8:	2800      	cmp	r0, #0
 800caba:	f43f ae9b 	beq.w	800c7f4 <_strtod_l+0x43c>
 800cabe:	4601      	mov	r1, r0
 800cac0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cac2:	4648      	mov	r0, r9
 800cac4:	f002 f8a2 	bl	800ec0c <__multiply>
 800cac8:	900c      	str	r0, [sp, #48]	; 0x30
 800caca:	2800      	cmp	r0, #0
 800cacc:	f43f ae92 	beq.w	800c7f4 <_strtod_l+0x43c>
 800cad0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cad2:	4648      	mov	r0, r9
 800cad4:	f001 ffb3 	bl	800ea3e <_Bfree>
 800cad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cada:	931c      	str	r3, [sp, #112]	; 0x70
 800cadc:	2e00      	cmp	r6, #0
 800cade:	dc7a      	bgt.n	800cbd6 <_strtod_l+0x81e>
 800cae0:	9b06      	ldr	r3, [sp, #24]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	dd08      	ble.n	800caf8 <_strtod_l+0x740>
 800cae6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cae8:	9905      	ldr	r1, [sp, #20]
 800caea:	4648      	mov	r0, r9
 800caec:	f002 f924 	bl	800ed38 <__pow5mult>
 800caf0:	9005      	str	r0, [sp, #20]
 800caf2:	2800      	cmp	r0, #0
 800caf4:	f43f ae7e 	beq.w	800c7f4 <_strtod_l+0x43c>
 800caf8:	2d00      	cmp	r5, #0
 800cafa:	dd08      	ble.n	800cb0e <_strtod_l+0x756>
 800cafc:	462a      	mov	r2, r5
 800cafe:	9905      	ldr	r1, [sp, #20]
 800cb00:	4648      	mov	r0, r9
 800cb02:	f002 f967 	bl	800edd4 <__lshift>
 800cb06:	9005      	str	r0, [sp, #20]
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	f43f ae73 	beq.w	800c7f4 <_strtod_l+0x43c>
 800cb0e:	2f00      	cmp	r7, #0
 800cb10:	dd08      	ble.n	800cb24 <_strtod_l+0x76c>
 800cb12:	4641      	mov	r1, r8
 800cb14:	463a      	mov	r2, r7
 800cb16:	4648      	mov	r0, r9
 800cb18:	f002 f95c 	bl	800edd4 <__lshift>
 800cb1c:	4680      	mov	r8, r0
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	f43f ae68 	beq.w	800c7f4 <_strtod_l+0x43c>
 800cb24:	9a05      	ldr	r2, [sp, #20]
 800cb26:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cb28:	4648      	mov	r0, r9
 800cb2a:	f002 f9c1 	bl	800eeb0 <__mdiff>
 800cb2e:	4604      	mov	r4, r0
 800cb30:	2800      	cmp	r0, #0
 800cb32:	f43f ae5f 	beq.w	800c7f4 <_strtod_l+0x43c>
 800cb36:	68c3      	ldr	r3, [r0, #12]
 800cb38:	930c      	str	r3, [sp, #48]	; 0x30
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	60c3      	str	r3, [r0, #12]
 800cb3e:	4641      	mov	r1, r8
 800cb40:	f002 f99c 	bl	800ee7c <__mcmp>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	da55      	bge.n	800cbf4 <_strtod_l+0x83c>
 800cb48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb4a:	b9e3      	cbnz	r3, 800cb86 <_strtod_l+0x7ce>
 800cb4c:	f1ba 0f00 	cmp.w	sl, #0
 800cb50:	d119      	bne.n	800cb86 <_strtod_l+0x7ce>
 800cb52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb56:	b9b3      	cbnz	r3, 800cb86 <_strtod_l+0x7ce>
 800cb58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb5c:	0d1b      	lsrs	r3, r3, #20
 800cb5e:	051b      	lsls	r3, r3, #20
 800cb60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cb64:	d90f      	bls.n	800cb86 <_strtod_l+0x7ce>
 800cb66:	6963      	ldr	r3, [r4, #20]
 800cb68:	b913      	cbnz	r3, 800cb70 <_strtod_l+0x7b8>
 800cb6a:	6923      	ldr	r3, [r4, #16]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	dd0a      	ble.n	800cb86 <_strtod_l+0x7ce>
 800cb70:	4621      	mov	r1, r4
 800cb72:	2201      	movs	r2, #1
 800cb74:	4648      	mov	r0, r9
 800cb76:	f002 f92d 	bl	800edd4 <__lshift>
 800cb7a:	4641      	mov	r1, r8
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	f002 f97d 	bl	800ee7c <__mcmp>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	dc67      	bgt.n	800cc56 <_strtod_l+0x89e>
 800cb86:	9b04      	ldr	r3, [sp, #16]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d171      	bne.n	800cc70 <_strtod_l+0x8b8>
 800cb8c:	e63d      	b.n	800c80a <_strtod_l+0x452>
 800cb8e:	f018 0f01 	tst.w	r8, #1
 800cb92:	d004      	beq.n	800cb9e <_strtod_l+0x7e6>
 800cb94:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb98:	f7f3 fd36 	bl	8000608 <__aeabi_dmul>
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cba2:	3508      	adds	r5, #8
 800cba4:	e6e5      	b.n	800c972 <_strtod_l+0x5ba>
 800cba6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbaa:	fa02 f303 	lsl.w	r3, r2, r3
 800cbae:	ea03 0a0a 	and.w	sl, r3, sl
 800cbb2:	e6ff      	b.n	800c9b4 <_strtod_l+0x5fc>
 800cbb4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800cbb8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800cbbc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800cbc0:	36e2      	adds	r6, #226	; 0xe2
 800cbc2:	fa01 f306 	lsl.w	r3, r1, r6
 800cbc6:	930a      	str	r3, [sp, #40]	; 0x28
 800cbc8:	910f      	str	r1, [sp, #60]	; 0x3c
 800cbca:	e75d      	b.n	800ca88 <_strtod_l+0x6d0>
 800cbcc:	2300      	movs	r3, #0
 800cbce:	930a      	str	r3, [sp, #40]	; 0x28
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbd4:	e758      	b.n	800ca88 <_strtod_l+0x6d0>
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cbda:	4648      	mov	r0, r9
 800cbdc:	f002 f8fa 	bl	800edd4 <__lshift>
 800cbe0:	901c      	str	r0, [sp, #112]	; 0x70
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	f47f af7c 	bne.w	800cae0 <_strtod_l+0x728>
 800cbe8:	e604      	b.n	800c7f4 <_strtod_l+0x43c>
 800cbea:	bf00      	nop
 800cbec:	08012e18 	.word	0x08012e18
 800cbf0:	fffffc02 	.word	0xfffffc02
 800cbf4:	465d      	mov	r5, fp
 800cbf6:	f040 8086 	bne.w	800cd06 <_strtod_l+0x94e>
 800cbfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc00:	b32a      	cbz	r2, 800cc4e <_strtod_l+0x896>
 800cc02:	4aaf      	ldr	r2, [pc, #700]	; (800cec0 <_strtod_l+0xb08>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d153      	bne.n	800ccb0 <_strtod_l+0x8f8>
 800cc08:	9b04      	ldr	r3, [sp, #16]
 800cc0a:	4650      	mov	r0, sl
 800cc0c:	b1d3      	cbz	r3, 800cc44 <_strtod_l+0x88c>
 800cc0e:	4aad      	ldr	r2, [pc, #692]	; (800cec4 <_strtod_l+0xb0c>)
 800cc10:	402a      	ands	r2, r5
 800cc12:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cc16:	f04f 31ff 	mov.w	r1, #4294967295
 800cc1a:	d816      	bhi.n	800cc4a <_strtod_l+0x892>
 800cc1c:	0d12      	lsrs	r2, r2, #20
 800cc1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cc22:	fa01 f303 	lsl.w	r3, r1, r3
 800cc26:	4298      	cmp	r0, r3
 800cc28:	d142      	bne.n	800ccb0 <_strtod_l+0x8f8>
 800cc2a:	4ba7      	ldr	r3, [pc, #668]	; (800cec8 <_strtod_l+0xb10>)
 800cc2c:	429d      	cmp	r5, r3
 800cc2e:	d102      	bne.n	800cc36 <_strtod_l+0x87e>
 800cc30:	3001      	adds	r0, #1
 800cc32:	f43f addf 	beq.w	800c7f4 <_strtod_l+0x43c>
 800cc36:	4ba3      	ldr	r3, [pc, #652]	; (800cec4 <_strtod_l+0xb0c>)
 800cc38:	402b      	ands	r3, r5
 800cc3a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cc3e:	f04f 0a00 	mov.w	sl, #0
 800cc42:	e7a0      	b.n	800cb86 <_strtod_l+0x7ce>
 800cc44:	f04f 33ff 	mov.w	r3, #4294967295
 800cc48:	e7ed      	b.n	800cc26 <_strtod_l+0x86e>
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	e7eb      	b.n	800cc26 <_strtod_l+0x86e>
 800cc4e:	bb7b      	cbnz	r3, 800ccb0 <_strtod_l+0x8f8>
 800cc50:	f1ba 0f00 	cmp.w	sl, #0
 800cc54:	d12c      	bne.n	800ccb0 <_strtod_l+0x8f8>
 800cc56:	9904      	ldr	r1, [sp, #16]
 800cc58:	4a9a      	ldr	r2, [pc, #616]	; (800cec4 <_strtod_l+0xb0c>)
 800cc5a:	465b      	mov	r3, fp
 800cc5c:	b1f1      	cbz	r1, 800cc9c <_strtod_l+0x8e4>
 800cc5e:	ea02 010b 	and.w	r1, r2, fp
 800cc62:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cc66:	dc19      	bgt.n	800cc9c <_strtod_l+0x8e4>
 800cc68:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cc6c:	f77f ae5b 	ble.w	800c926 <_strtod_l+0x56e>
 800cc70:	4a96      	ldr	r2, [pc, #600]	; (800cecc <_strtod_l+0xb14>)
 800cc72:	2300      	movs	r3, #0
 800cc74:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800cc78:	4650      	mov	r0, sl
 800cc7a:	4659      	mov	r1, fp
 800cc7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cc80:	f7f3 fcc2 	bl	8000608 <__aeabi_dmul>
 800cc84:	4682      	mov	sl, r0
 800cc86:	468b      	mov	fp, r1
 800cc88:	2900      	cmp	r1, #0
 800cc8a:	f47f adbe 	bne.w	800c80a <_strtod_l+0x452>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	f47f adbb 	bne.w	800c80a <_strtod_l+0x452>
 800cc94:	2322      	movs	r3, #34	; 0x22
 800cc96:	f8c9 3000 	str.w	r3, [r9]
 800cc9a:	e5b6      	b.n	800c80a <_strtod_l+0x452>
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cca2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cca6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ccaa:	f04f 3aff 	mov.w	sl, #4294967295
 800ccae:	e76a      	b.n	800cb86 <_strtod_l+0x7ce>
 800ccb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccb2:	b193      	cbz	r3, 800ccda <_strtod_l+0x922>
 800ccb4:	422b      	tst	r3, r5
 800ccb6:	f43f af66 	beq.w	800cb86 <_strtod_l+0x7ce>
 800ccba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccbc:	9a04      	ldr	r2, [sp, #16]
 800ccbe:	4650      	mov	r0, sl
 800ccc0:	4659      	mov	r1, fp
 800ccc2:	b173      	cbz	r3, 800cce2 <_strtod_l+0x92a>
 800ccc4:	f7ff fb5a 	bl	800c37c <sulp>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ccd0:	f7f3 fae4 	bl	800029c <__adddf3>
 800ccd4:	4682      	mov	sl, r0
 800ccd6:	468b      	mov	fp, r1
 800ccd8:	e755      	b.n	800cb86 <_strtod_l+0x7ce>
 800ccda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccdc:	ea13 0f0a 	tst.w	r3, sl
 800cce0:	e7e9      	b.n	800ccb6 <_strtod_l+0x8fe>
 800cce2:	f7ff fb4b 	bl	800c37c <sulp>
 800cce6:	4602      	mov	r2, r0
 800cce8:	460b      	mov	r3, r1
 800ccea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ccee:	f7f3 fad3 	bl	8000298 <__aeabi_dsub>
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	4682      	mov	sl, r0
 800ccf8:	468b      	mov	fp, r1
 800ccfa:	f7f3 feed 	bl	8000ad8 <__aeabi_dcmpeq>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	f47f ae11 	bne.w	800c926 <_strtod_l+0x56e>
 800cd04:	e73f      	b.n	800cb86 <_strtod_l+0x7ce>
 800cd06:	4641      	mov	r1, r8
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f002 f9f4 	bl	800f0f6 <__ratio>
 800cd0e:	ec57 6b10 	vmov	r6, r7, d0
 800cd12:	2200      	movs	r2, #0
 800cd14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd18:	ee10 0a10 	vmov	r0, s0
 800cd1c:	4639      	mov	r1, r7
 800cd1e:	f7f3 feef 	bl	8000b00 <__aeabi_dcmple>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d077      	beq.n	800ce16 <_strtod_l+0xa5e>
 800cd26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d04a      	beq.n	800cdc2 <_strtod_l+0xa0a>
 800cd2c:	4b68      	ldr	r3, [pc, #416]	; (800ced0 <_strtod_l+0xb18>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cd34:	4f66      	ldr	r7, [pc, #408]	; (800ced0 <_strtod_l+0xb18>)
 800cd36:	2600      	movs	r6, #0
 800cd38:	4b62      	ldr	r3, [pc, #392]	; (800cec4 <_strtod_l+0xb0c>)
 800cd3a:	402b      	ands	r3, r5
 800cd3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd40:	4b64      	ldr	r3, [pc, #400]	; (800ced4 <_strtod_l+0xb1c>)
 800cd42:	429a      	cmp	r2, r3
 800cd44:	f040 80ce 	bne.w	800cee4 <_strtod_l+0xb2c>
 800cd48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cd4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd50:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800cd54:	ec4b ab10 	vmov	d0, sl, fp
 800cd58:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800cd5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cd60:	f002 f904 	bl	800ef6c <__ulp>
 800cd64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd68:	ec53 2b10 	vmov	r2, r3, d0
 800cd6c:	f7f3 fc4c 	bl	8000608 <__aeabi_dmul>
 800cd70:	4652      	mov	r2, sl
 800cd72:	465b      	mov	r3, fp
 800cd74:	f7f3 fa92 	bl	800029c <__adddf3>
 800cd78:	460b      	mov	r3, r1
 800cd7a:	4952      	ldr	r1, [pc, #328]	; (800cec4 <_strtod_l+0xb0c>)
 800cd7c:	4a56      	ldr	r2, [pc, #344]	; (800ced8 <_strtod_l+0xb20>)
 800cd7e:	4019      	ands	r1, r3
 800cd80:	4291      	cmp	r1, r2
 800cd82:	4682      	mov	sl, r0
 800cd84:	d95b      	bls.n	800ce3e <_strtod_l+0xa86>
 800cd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd88:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d103      	bne.n	800cd98 <_strtod_l+0x9e0>
 800cd90:	9b08      	ldr	r3, [sp, #32]
 800cd92:	3301      	adds	r3, #1
 800cd94:	f43f ad2e 	beq.w	800c7f4 <_strtod_l+0x43c>
 800cd98:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800cec8 <_strtod_l+0xb10>
 800cd9c:	f04f 3aff 	mov.w	sl, #4294967295
 800cda0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cda2:	4648      	mov	r0, r9
 800cda4:	f001 fe4b 	bl	800ea3e <_Bfree>
 800cda8:	9905      	ldr	r1, [sp, #20]
 800cdaa:	4648      	mov	r0, r9
 800cdac:	f001 fe47 	bl	800ea3e <_Bfree>
 800cdb0:	4641      	mov	r1, r8
 800cdb2:	4648      	mov	r0, r9
 800cdb4:	f001 fe43 	bl	800ea3e <_Bfree>
 800cdb8:	4621      	mov	r1, r4
 800cdba:	4648      	mov	r0, r9
 800cdbc:	f001 fe3f 	bl	800ea3e <_Bfree>
 800cdc0:	e619      	b.n	800c9f6 <_strtod_l+0x63e>
 800cdc2:	f1ba 0f00 	cmp.w	sl, #0
 800cdc6:	d11a      	bne.n	800cdfe <_strtod_l+0xa46>
 800cdc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdcc:	b9eb      	cbnz	r3, 800ce0a <_strtod_l+0xa52>
 800cdce:	2200      	movs	r2, #0
 800cdd0:	4b3f      	ldr	r3, [pc, #252]	; (800ced0 <_strtod_l+0xb18>)
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	f7f3 fe89 	bl	8000aec <__aeabi_dcmplt>
 800cdda:	b9c8      	cbnz	r0, 800ce10 <_strtod_l+0xa58>
 800cddc:	4630      	mov	r0, r6
 800cdde:	4639      	mov	r1, r7
 800cde0:	2200      	movs	r2, #0
 800cde2:	4b3e      	ldr	r3, [pc, #248]	; (800cedc <_strtod_l+0xb24>)
 800cde4:	f7f3 fc10 	bl	8000608 <__aeabi_dmul>
 800cde8:	4606      	mov	r6, r0
 800cdea:	460f      	mov	r7, r1
 800cdec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cdf0:	9618      	str	r6, [sp, #96]	; 0x60
 800cdf2:	9319      	str	r3, [sp, #100]	; 0x64
 800cdf4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800cdf8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cdfc:	e79c      	b.n	800cd38 <_strtod_l+0x980>
 800cdfe:	f1ba 0f01 	cmp.w	sl, #1
 800ce02:	d102      	bne.n	800ce0a <_strtod_l+0xa52>
 800ce04:	2d00      	cmp	r5, #0
 800ce06:	f43f ad8e 	beq.w	800c926 <_strtod_l+0x56e>
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	4b34      	ldr	r3, [pc, #208]	; (800cee0 <_strtod_l+0xb28>)
 800ce0e:	e78f      	b.n	800cd30 <_strtod_l+0x978>
 800ce10:	2600      	movs	r6, #0
 800ce12:	4f32      	ldr	r7, [pc, #200]	; (800cedc <_strtod_l+0xb24>)
 800ce14:	e7ea      	b.n	800cdec <_strtod_l+0xa34>
 800ce16:	4b31      	ldr	r3, [pc, #196]	; (800cedc <_strtod_l+0xb24>)
 800ce18:	4630      	mov	r0, r6
 800ce1a:	4639      	mov	r1, r7
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f7f3 fbf3 	bl	8000608 <__aeabi_dmul>
 800ce22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce24:	4606      	mov	r6, r0
 800ce26:	460f      	mov	r7, r1
 800ce28:	b933      	cbnz	r3, 800ce38 <_strtod_l+0xa80>
 800ce2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce2e:	9010      	str	r0, [sp, #64]	; 0x40
 800ce30:	9311      	str	r3, [sp, #68]	; 0x44
 800ce32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ce36:	e7df      	b.n	800cdf8 <_strtod_l+0xa40>
 800ce38:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ce3c:	e7f9      	b.n	800ce32 <_strtod_l+0xa7a>
 800ce3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ce42:	9b04      	ldr	r3, [sp, #16]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1ab      	bne.n	800cda0 <_strtod_l+0x9e8>
 800ce48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce4c:	0d1b      	lsrs	r3, r3, #20
 800ce4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce50:	051b      	lsls	r3, r3, #20
 800ce52:	429a      	cmp	r2, r3
 800ce54:	465d      	mov	r5, fp
 800ce56:	d1a3      	bne.n	800cda0 <_strtod_l+0x9e8>
 800ce58:	4639      	mov	r1, r7
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f7f3 fe84 	bl	8000b68 <__aeabi_d2iz>
 800ce60:	f7f3 fb68 	bl	8000534 <__aeabi_i2d>
 800ce64:	460b      	mov	r3, r1
 800ce66:	4602      	mov	r2, r0
 800ce68:	4639      	mov	r1, r7
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f7f3 fa14 	bl	8000298 <__aeabi_dsub>
 800ce70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce72:	4606      	mov	r6, r0
 800ce74:	460f      	mov	r7, r1
 800ce76:	b933      	cbnz	r3, 800ce86 <_strtod_l+0xace>
 800ce78:	f1ba 0f00 	cmp.w	sl, #0
 800ce7c:	d103      	bne.n	800ce86 <_strtod_l+0xace>
 800ce7e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ce82:	2d00      	cmp	r5, #0
 800ce84:	d06d      	beq.n	800cf62 <_strtod_l+0xbaa>
 800ce86:	a30a      	add	r3, pc, #40	; (adr r3, 800ceb0 <_strtod_l+0xaf8>)
 800ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	4639      	mov	r1, r7
 800ce90:	f7f3 fe2c 	bl	8000aec <__aeabi_dcmplt>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	f47f acb8 	bne.w	800c80a <_strtod_l+0x452>
 800ce9a:	a307      	add	r3, pc, #28	; (adr r3, 800ceb8 <_strtod_l+0xb00>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	4630      	mov	r0, r6
 800cea2:	4639      	mov	r1, r7
 800cea4:	f7f3 fe40 	bl	8000b28 <__aeabi_dcmpgt>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	f43f af79 	beq.w	800cda0 <_strtod_l+0x9e8>
 800ceae:	e4ac      	b.n	800c80a <_strtod_l+0x452>
 800ceb0:	94a03595 	.word	0x94a03595
 800ceb4:	3fdfffff 	.word	0x3fdfffff
 800ceb8:	35afe535 	.word	0x35afe535
 800cebc:	3fe00000 	.word	0x3fe00000
 800cec0:	000fffff 	.word	0x000fffff
 800cec4:	7ff00000 	.word	0x7ff00000
 800cec8:	7fefffff 	.word	0x7fefffff
 800cecc:	39500000 	.word	0x39500000
 800ced0:	3ff00000 	.word	0x3ff00000
 800ced4:	7fe00000 	.word	0x7fe00000
 800ced8:	7c9fffff 	.word	0x7c9fffff
 800cedc:	3fe00000 	.word	0x3fe00000
 800cee0:	bff00000 	.word	0xbff00000
 800cee4:	9b04      	ldr	r3, [sp, #16]
 800cee6:	b333      	cbz	r3, 800cf36 <_strtod_l+0xb7e>
 800cee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ceea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ceee:	d822      	bhi.n	800cf36 <_strtod_l+0xb7e>
 800cef0:	a327      	add	r3, pc, #156	; (adr r3, 800cf90 <_strtod_l+0xbd8>)
 800cef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef6:	4630      	mov	r0, r6
 800cef8:	4639      	mov	r1, r7
 800cefa:	f7f3 fe01 	bl	8000b00 <__aeabi_dcmple>
 800cefe:	b1a0      	cbz	r0, 800cf2a <_strtod_l+0xb72>
 800cf00:	4639      	mov	r1, r7
 800cf02:	4630      	mov	r0, r6
 800cf04:	f7f3 fe58 	bl	8000bb8 <__aeabi_d2uiz>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	bf08      	it	eq
 800cf0c:	2001      	moveq	r0, #1
 800cf0e:	f7f3 fb01 	bl	8000514 <__aeabi_ui2d>
 800cf12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf14:	4606      	mov	r6, r0
 800cf16:	460f      	mov	r7, r1
 800cf18:	bb03      	cbnz	r3, 800cf5c <_strtod_l+0xba4>
 800cf1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf1e:	9012      	str	r0, [sp, #72]	; 0x48
 800cf20:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cf26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cf2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf2e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cf32:	1a9b      	subs	r3, r3, r2
 800cf34:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf36:	ed9d 0b08 	vldr	d0, [sp, #32]
 800cf3a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800cf3e:	f002 f815 	bl	800ef6c <__ulp>
 800cf42:	4650      	mov	r0, sl
 800cf44:	ec53 2b10 	vmov	r2, r3, d0
 800cf48:	4659      	mov	r1, fp
 800cf4a:	f7f3 fb5d 	bl	8000608 <__aeabi_dmul>
 800cf4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cf52:	f7f3 f9a3 	bl	800029c <__adddf3>
 800cf56:	4682      	mov	sl, r0
 800cf58:	468b      	mov	fp, r1
 800cf5a:	e772      	b.n	800ce42 <_strtod_l+0xa8a>
 800cf5c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800cf60:	e7df      	b.n	800cf22 <_strtod_l+0xb6a>
 800cf62:	a30d      	add	r3, pc, #52	; (adr r3, 800cf98 <_strtod_l+0xbe0>)
 800cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf68:	f7f3 fdc0 	bl	8000aec <__aeabi_dcmplt>
 800cf6c:	e79c      	b.n	800cea8 <_strtod_l+0xaf0>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	930d      	str	r3, [sp, #52]	; 0x34
 800cf72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf76:	6013      	str	r3, [r2, #0]
 800cf78:	f7ff ba61 	b.w	800c43e <_strtod_l+0x86>
 800cf7c:	2b65      	cmp	r3, #101	; 0x65
 800cf7e:	f04f 0200 	mov.w	r2, #0
 800cf82:	f43f ab4e 	beq.w	800c622 <_strtod_l+0x26a>
 800cf86:	2101      	movs	r1, #1
 800cf88:	4614      	mov	r4, r2
 800cf8a:	9104      	str	r1, [sp, #16]
 800cf8c:	f7ff bacb 	b.w	800c526 <_strtod_l+0x16e>
 800cf90:	ffc00000 	.word	0xffc00000
 800cf94:	41dfffff 	.word	0x41dfffff
 800cf98:	94a03595 	.word	0x94a03595
 800cf9c:	3fcfffff 	.word	0x3fcfffff

0800cfa0 <_strtod_r>:
 800cfa0:	4b05      	ldr	r3, [pc, #20]	; (800cfb8 <_strtod_r+0x18>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	b410      	push	{r4}
 800cfa6:	6a1b      	ldr	r3, [r3, #32]
 800cfa8:	4c04      	ldr	r4, [pc, #16]	; (800cfbc <_strtod_r+0x1c>)
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	bf08      	it	eq
 800cfae:	4623      	moveq	r3, r4
 800cfb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfb4:	f7ff ba00 	b.w	800c3b8 <_strtod_l>
 800cfb8:	200001f4 	.word	0x200001f4
 800cfbc:	20000258 	.word	0x20000258

0800cfc0 <_strtol_l.isra.0>:
 800cfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc4:	4680      	mov	r8, r0
 800cfc6:	4689      	mov	r9, r1
 800cfc8:	4692      	mov	sl, r2
 800cfca:	461e      	mov	r6, r3
 800cfcc:	460f      	mov	r7, r1
 800cfce:	463d      	mov	r5, r7
 800cfd0:	9808      	ldr	r0, [sp, #32]
 800cfd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfd6:	f001 fc47 	bl	800e868 <__locale_ctype_ptr_l>
 800cfda:	4420      	add	r0, r4
 800cfdc:	7843      	ldrb	r3, [r0, #1]
 800cfde:	f013 0308 	ands.w	r3, r3, #8
 800cfe2:	d132      	bne.n	800d04a <_strtol_l.isra.0+0x8a>
 800cfe4:	2c2d      	cmp	r4, #45	; 0x2d
 800cfe6:	d132      	bne.n	800d04e <_strtol_l.isra.0+0x8e>
 800cfe8:	787c      	ldrb	r4, [r7, #1]
 800cfea:	1cbd      	adds	r5, r7, #2
 800cfec:	2201      	movs	r2, #1
 800cfee:	2e00      	cmp	r6, #0
 800cff0:	d05d      	beq.n	800d0ae <_strtol_l.isra.0+0xee>
 800cff2:	2e10      	cmp	r6, #16
 800cff4:	d109      	bne.n	800d00a <_strtol_l.isra.0+0x4a>
 800cff6:	2c30      	cmp	r4, #48	; 0x30
 800cff8:	d107      	bne.n	800d00a <_strtol_l.isra.0+0x4a>
 800cffa:	782b      	ldrb	r3, [r5, #0]
 800cffc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d000:	2b58      	cmp	r3, #88	; 0x58
 800d002:	d14f      	bne.n	800d0a4 <_strtol_l.isra.0+0xe4>
 800d004:	786c      	ldrb	r4, [r5, #1]
 800d006:	2610      	movs	r6, #16
 800d008:	3502      	adds	r5, #2
 800d00a:	2a00      	cmp	r2, #0
 800d00c:	bf14      	ite	ne
 800d00e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d012:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d016:	2700      	movs	r7, #0
 800d018:	fbb1 fcf6 	udiv	ip, r1, r6
 800d01c:	4638      	mov	r0, r7
 800d01e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d022:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d026:	2b09      	cmp	r3, #9
 800d028:	d817      	bhi.n	800d05a <_strtol_l.isra.0+0x9a>
 800d02a:	461c      	mov	r4, r3
 800d02c:	42a6      	cmp	r6, r4
 800d02e:	dd23      	ble.n	800d078 <_strtol_l.isra.0+0xb8>
 800d030:	1c7b      	adds	r3, r7, #1
 800d032:	d007      	beq.n	800d044 <_strtol_l.isra.0+0x84>
 800d034:	4584      	cmp	ip, r0
 800d036:	d31c      	bcc.n	800d072 <_strtol_l.isra.0+0xb2>
 800d038:	d101      	bne.n	800d03e <_strtol_l.isra.0+0x7e>
 800d03a:	45a6      	cmp	lr, r4
 800d03c:	db19      	blt.n	800d072 <_strtol_l.isra.0+0xb2>
 800d03e:	fb00 4006 	mla	r0, r0, r6, r4
 800d042:	2701      	movs	r7, #1
 800d044:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d048:	e7eb      	b.n	800d022 <_strtol_l.isra.0+0x62>
 800d04a:	462f      	mov	r7, r5
 800d04c:	e7bf      	b.n	800cfce <_strtol_l.isra.0+0xe>
 800d04e:	2c2b      	cmp	r4, #43	; 0x2b
 800d050:	bf04      	itt	eq
 800d052:	1cbd      	addeq	r5, r7, #2
 800d054:	787c      	ldrbeq	r4, [r7, #1]
 800d056:	461a      	mov	r2, r3
 800d058:	e7c9      	b.n	800cfee <_strtol_l.isra.0+0x2e>
 800d05a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d05e:	2b19      	cmp	r3, #25
 800d060:	d801      	bhi.n	800d066 <_strtol_l.isra.0+0xa6>
 800d062:	3c37      	subs	r4, #55	; 0x37
 800d064:	e7e2      	b.n	800d02c <_strtol_l.isra.0+0x6c>
 800d066:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d06a:	2b19      	cmp	r3, #25
 800d06c:	d804      	bhi.n	800d078 <_strtol_l.isra.0+0xb8>
 800d06e:	3c57      	subs	r4, #87	; 0x57
 800d070:	e7dc      	b.n	800d02c <_strtol_l.isra.0+0x6c>
 800d072:	f04f 37ff 	mov.w	r7, #4294967295
 800d076:	e7e5      	b.n	800d044 <_strtol_l.isra.0+0x84>
 800d078:	1c7b      	adds	r3, r7, #1
 800d07a:	d108      	bne.n	800d08e <_strtol_l.isra.0+0xce>
 800d07c:	2322      	movs	r3, #34	; 0x22
 800d07e:	f8c8 3000 	str.w	r3, [r8]
 800d082:	4608      	mov	r0, r1
 800d084:	f1ba 0f00 	cmp.w	sl, #0
 800d088:	d107      	bne.n	800d09a <_strtol_l.isra.0+0xda>
 800d08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d08e:	b102      	cbz	r2, 800d092 <_strtol_l.isra.0+0xd2>
 800d090:	4240      	negs	r0, r0
 800d092:	f1ba 0f00 	cmp.w	sl, #0
 800d096:	d0f8      	beq.n	800d08a <_strtol_l.isra.0+0xca>
 800d098:	b10f      	cbz	r7, 800d09e <_strtol_l.isra.0+0xde>
 800d09a:	f105 39ff 	add.w	r9, r5, #4294967295
 800d09e:	f8ca 9000 	str.w	r9, [sl]
 800d0a2:	e7f2      	b.n	800d08a <_strtol_l.isra.0+0xca>
 800d0a4:	2430      	movs	r4, #48	; 0x30
 800d0a6:	2e00      	cmp	r6, #0
 800d0a8:	d1af      	bne.n	800d00a <_strtol_l.isra.0+0x4a>
 800d0aa:	2608      	movs	r6, #8
 800d0ac:	e7ad      	b.n	800d00a <_strtol_l.isra.0+0x4a>
 800d0ae:	2c30      	cmp	r4, #48	; 0x30
 800d0b0:	d0a3      	beq.n	800cffa <_strtol_l.isra.0+0x3a>
 800d0b2:	260a      	movs	r6, #10
 800d0b4:	e7a9      	b.n	800d00a <_strtol_l.isra.0+0x4a>
	...

0800d0b8 <_strtol_r>:
 800d0b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0ba:	4c06      	ldr	r4, [pc, #24]	; (800d0d4 <_strtol_r+0x1c>)
 800d0bc:	4d06      	ldr	r5, [pc, #24]	; (800d0d8 <_strtol_r+0x20>)
 800d0be:	6824      	ldr	r4, [r4, #0]
 800d0c0:	6a24      	ldr	r4, [r4, #32]
 800d0c2:	2c00      	cmp	r4, #0
 800d0c4:	bf08      	it	eq
 800d0c6:	462c      	moveq	r4, r5
 800d0c8:	9400      	str	r4, [sp, #0]
 800d0ca:	f7ff ff79 	bl	800cfc0 <_strtol_l.isra.0>
 800d0ce:	b003      	add	sp, #12
 800d0d0:	bd30      	pop	{r4, r5, pc}
 800d0d2:	bf00      	nop
 800d0d4:	200001f4 	.word	0x200001f4
 800d0d8:	20000258 	.word	0x20000258

0800d0dc <__swbuf_r>:
 800d0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0de:	460e      	mov	r6, r1
 800d0e0:	4614      	mov	r4, r2
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	b118      	cbz	r0, 800d0ee <__swbuf_r+0x12>
 800d0e6:	6983      	ldr	r3, [r0, #24]
 800d0e8:	b90b      	cbnz	r3, 800d0ee <__swbuf_r+0x12>
 800d0ea:	f001 f80d 	bl	800e108 <__sinit>
 800d0ee:	4b21      	ldr	r3, [pc, #132]	; (800d174 <__swbuf_r+0x98>)
 800d0f0:	429c      	cmp	r4, r3
 800d0f2:	d12a      	bne.n	800d14a <__swbuf_r+0x6e>
 800d0f4:	686c      	ldr	r4, [r5, #4]
 800d0f6:	69a3      	ldr	r3, [r4, #24]
 800d0f8:	60a3      	str	r3, [r4, #8]
 800d0fa:	89a3      	ldrh	r3, [r4, #12]
 800d0fc:	071a      	lsls	r2, r3, #28
 800d0fe:	d52e      	bpl.n	800d15e <__swbuf_r+0x82>
 800d100:	6923      	ldr	r3, [r4, #16]
 800d102:	b363      	cbz	r3, 800d15e <__swbuf_r+0x82>
 800d104:	6923      	ldr	r3, [r4, #16]
 800d106:	6820      	ldr	r0, [r4, #0]
 800d108:	1ac0      	subs	r0, r0, r3
 800d10a:	6963      	ldr	r3, [r4, #20]
 800d10c:	b2f6      	uxtb	r6, r6
 800d10e:	4283      	cmp	r3, r0
 800d110:	4637      	mov	r7, r6
 800d112:	dc04      	bgt.n	800d11e <__swbuf_r+0x42>
 800d114:	4621      	mov	r1, r4
 800d116:	4628      	mov	r0, r5
 800d118:	f000 ff8c 	bl	800e034 <_fflush_r>
 800d11c:	bb28      	cbnz	r0, 800d16a <__swbuf_r+0x8e>
 800d11e:	68a3      	ldr	r3, [r4, #8]
 800d120:	3b01      	subs	r3, #1
 800d122:	60a3      	str	r3, [r4, #8]
 800d124:	6823      	ldr	r3, [r4, #0]
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	6022      	str	r2, [r4, #0]
 800d12a:	701e      	strb	r6, [r3, #0]
 800d12c:	6963      	ldr	r3, [r4, #20]
 800d12e:	3001      	adds	r0, #1
 800d130:	4283      	cmp	r3, r0
 800d132:	d004      	beq.n	800d13e <__swbuf_r+0x62>
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	07db      	lsls	r3, r3, #31
 800d138:	d519      	bpl.n	800d16e <__swbuf_r+0x92>
 800d13a:	2e0a      	cmp	r6, #10
 800d13c:	d117      	bne.n	800d16e <__swbuf_r+0x92>
 800d13e:	4621      	mov	r1, r4
 800d140:	4628      	mov	r0, r5
 800d142:	f000 ff77 	bl	800e034 <_fflush_r>
 800d146:	b190      	cbz	r0, 800d16e <__swbuf_r+0x92>
 800d148:	e00f      	b.n	800d16a <__swbuf_r+0x8e>
 800d14a:	4b0b      	ldr	r3, [pc, #44]	; (800d178 <__swbuf_r+0x9c>)
 800d14c:	429c      	cmp	r4, r3
 800d14e:	d101      	bne.n	800d154 <__swbuf_r+0x78>
 800d150:	68ac      	ldr	r4, [r5, #8]
 800d152:	e7d0      	b.n	800d0f6 <__swbuf_r+0x1a>
 800d154:	4b09      	ldr	r3, [pc, #36]	; (800d17c <__swbuf_r+0xa0>)
 800d156:	429c      	cmp	r4, r3
 800d158:	bf08      	it	eq
 800d15a:	68ec      	ldreq	r4, [r5, #12]
 800d15c:	e7cb      	b.n	800d0f6 <__swbuf_r+0x1a>
 800d15e:	4621      	mov	r1, r4
 800d160:	4628      	mov	r0, r5
 800d162:	f000 f81f 	bl	800d1a4 <__swsetup_r>
 800d166:	2800      	cmp	r0, #0
 800d168:	d0cc      	beq.n	800d104 <__swbuf_r+0x28>
 800d16a:	f04f 37ff 	mov.w	r7, #4294967295
 800d16e:	4638      	mov	r0, r7
 800d170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d172:	bf00      	nop
 800d174:	08012e70 	.word	0x08012e70
 800d178:	08012e90 	.word	0x08012e90
 800d17c:	08012e50 	.word	0x08012e50

0800d180 <_write_r>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4c07      	ldr	r4, [pc, #28]	; (800d1a0 <_write_r+0x20>)
 800d184:	4605      	mov	r5, r0
 800d186:	4608      	mov	r0, r1
 800d188:	4611      	mov	r1, r2
 800d18a:	2200      	movs	r2, #0
 800d18c:	6022      	str	r2, [r4, #0]
 800d18e:	461a      	mov	r2, r3
 800d190:	f7f4 f8ae 	bl	80012f0 <_write>
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	d102      	bne.n	800d19e <_write_r+0x1e>
 800d198:	6823      	ldr	r3, [r4, #0]
 800d19a:	b103      	cbz	r3, 800d19e <_write_r+0x1e>
 800d19c:	602b      	str	r3, [r5, #0]
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	200013d4 	.word	0x200013d4

0800d1a4 <__swsetup_r>:
 800d1a4:	4b32      	ldr	r3, [pc, #200]	; (800d270 <__swsetup_r+0xcc>)
 800d1a6:	b570      	push	{r4, r5, r6, lr}
 800d1a8:	681d      	ldr	r5, [r3, #0]
 800d1aa:	4606      	mov	r6, r0
 800d1ac:	460c      	mov	r4, r1
 800d1ae:	b125      	cbz	r5, 800d1ba <__swsetup_r+0x16>
 800d1b0:	69ab      	ldr	r3, [r5, #24]
 800d1b2:	b913      	cbnz	r3, 800d1ba <__swsetup_r+0x16>
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f000 ffa7 	bl	800e108 <__sinit>
 800d1ba:	4b2e      	ldr	r3, [pc, #184]	; (800d274 <__swsetup_r+0xd0>)
 800d1bc:	429c      	cmp	r4, r3
 800d1be:	d10f      	bne.n	800d1e0 <__swsetup_r+0x3c>
 800d1c0:	686c      	ldr	r4, [r5, #4]
 800d1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	0715      	lsls	r5, r2, #28
 800d1ca:	d42c      	bmi.n	800d226 <__swsetup_r+0x82>
 800d1cc:	06d0      	lsls	r0, r2, #27
 800d1ce:	d411      	bmi.n	800d1f4 <__swsetup_r+0x50>
 800d1d0:	2209      	movs	r2, #9
 800d1d2:	6032      	str	r2, [r6, #0]
 800d1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d8:	81a3      	strh	r3, [r4, #12]
 800d1da:	f04f 30ff 	mov.w	r0, #4294967295
 800d1de:	e03e      	b.n	800d25e <__swsetup_r+0xba>
 800d1e0:	4b25      	ldr	r3, [pc, #148]	; (800d278 <__swsetup_r+0xd4>)
 800d1e2:	429c      	cmp	r4, r3
 800d1e4:	d101      	bne.n	800d1ea <__swsetup_r+0x46>
 800d1e6:	68ac      	ldr	r4, [r5, #8]
 800d1e8:	e7eb      	b.n	800d1c2 <__swsetup_r+0x1e>
 800d1ea:	4b24      	ldr	r3, [pc, #144]	; (800d27c <__swsetup_r+0xd8>)
 800d1ec:	429c      	cmp	r4, r3
 800d1ee:	bf08      	it	eq
 800d1f0:	68ec      	ldreq	r4, [r5, #12]
 800d1f2:	e7e6      	b.n	800d1c2 <__swsetup_r+0x1e>
 800d1f4:	0751      	lsls	r1, r2, #29
 800d1f6:	d512      	bpl.n	800d21e <__swsetup_r+0x7a>
 800d1f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1fa:	b141      	cbz	r1, 800d20e <__swsetup_r+0x6a>
 800d1fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d200:	4299      	cmp	r1, r3
 800d202:	d002      	beq.n	800d20a <__swsetup_r+0x66>
 800d204:	4630      	mov	r0, r6
 800d206:	f7fe f89d 	bl	800b344 <_free_r>
 800d20a:	2300      	movs	r3, #0
 800d20c:	6363      	str	r3, [r4, #52]	; 0x34
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d214:	81a3      	strh	r3, [r4, #12]
 800d216:	2300      	movs	r3, #0
 800d218:	6063      	str	r3, [r4, #4]
 800d21a:	6923      	ldr	r3, [r4, #16]
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	89a3      	ldrh	r3, [r4, #12]
 800d220:	f043 0308 	orr.w	r3, r3, #8
 800d224:	81a3      	strh	r3, [r4, #12]
 800d226:	6923      	ldr	r3, [r4, #16]
 800d228:	b94b      	cbnz	r3, 800d23e <__swsetup_r+0x9a>
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d234:	d003      	beq.n	800d23e <__swsetup_r+0x9a>
 800d236:	4621      	mov	r1, r4
 800d238:	4630      	mov	r0, r6
 800d23a:	f001 fb6d 	bl	800e918 <__smakebuf_r>
 800d23e:	89a2      	ldrh	r2, [r4, #12]
 800d240:	f012 0301 	ands.w	r3, r2, #1
 800d244:	d00c      	beq.n	800d260 <__swsetup_r+0xbc>
 800d246:	2300      	movs	r3, #0
 800d248:	60a3      	str	r3, [r4, #8]
 800d24a:	6963      	ldr	r3, [r4, #20]
 800d24c:	425b      	negs	r3, r3
 800d24e:	61a3      	str	r3, [r4, #24]
 800d250:	6923      	ldr	r3, [r4, #16]
 800d252:	b953      	cbnz	r3, 800d26a <__swsetup_r+0xc6>
 800d254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d258:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d25c:	d1ba      	bne.n	800d1d4 <__swsetup_r+0x30>
 800d25e:	bd70      	pop	{r4, r5, r6, pc}
 800d260:	0792      	lsls	r2, r2, #30
 800d262:	bf58      	it	pl
 800d264:	6963      	ldrpl	r3, [r4, #20]
 800d266:	60a3      	str	r3, [r4, #8]
 800d268:	e7f2      	b.n	800d250 <__swsetup_r+0xac>
 800d26a:	2000      	movs	r0, #0
 800d26c:	e7f7      	b.n	800d25e <__swsetup_r+0xba>
 800d26e:	bf00      	nop
 800d270:	200001f4 	.word	0x200001f4
 800d274:	08012e70 	.word	0x08012e70
 800d278:	08012e90 	.word	0x08012e90
 800d27c:	08012e50 	.word	0x08012e50

0800d280 <_close_r>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	4c06      	ldr	r4, [pc, #24]	; (800d29c <_close_r+0x1c>)
 800d284:	2300      	movs	r3, #0
 800d286:	4605      	mov	r5, r0
 800d288:	4608      	mov	r0, r1
 800d28a:	6023      	str	r3, [r4, #0]
 800d28c:	f7f5 f919 	bl	80024c2 <_close>
 800d290:	1c43      	adds	r3, r0, #1
 800d292:	d102      	bne.n	800d29a <_close_r+0x1a>
 800d294:	6823      	ldr	r3, [r4, #0]
 800d296:	b103      	cbz	r3, 800d29a <_close_r+0x1a>
 800d298:	602b      	str	r3, [r5, #0]
 800d29a:	bd38      	pop	{r3, r4, r5, pc}
 800d29c:	200013d4 	.word	0x200013d4

0800d2a0 <quorem>:
 800d2a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a4:	6903      	ldr	r3, [r0, #16]
 800d2a6:	690c      	ldr	r4, [r1, #16]
 800d2a8:	42a3      	cmp	r3, r4
 800d2aa:	4680      	mov	r8, r0
 800d2ac:	f2c0 8082 	blt.w	800d3b4 <quorem+0x114>
 800d2b0:	3c01      	subs	r4, #1
 800d2b2:	f101 0714 	add.w	r7, r1, #20
 800d2b6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d2ba:	f100 0614 	add.w	r6, r0, #20
 800d2be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d2c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d2c6:	eb06 030c 	add.w	r3, r6, ip
 800d2ca:	3501      	adds	r5, #1
 800d2cc:	eb07 090c 	add.w	r9, r7, ip
 800d2d0:	9301      	str	r3, [sp, #4]
 800d2d2:	fbb0 f5f5 	udiv	r5, r0, r5
 800d2d6:	b395      	cbz	r5, 800d33e <quorem+0x9e>
 800d2d8:	f04f 0a00 	mov.w	sl, #0
 800d2dc:	4638      	mov	r0, r7
 800d2de:	46b6      	mov	lr, r6
 800d2e0:	46d3      	mov	fp, sl
 800d2e2:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2e6:	b293      	uxth	r3, r2
 800d2e8:	fb05 a303 	mla	r3, r5, r3, sl
 800d2ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	ebab 0303 	sub.w	r3, fp, r3
 800d2f6:	0c12      	lsrs	r2, r2, #16
 800d2f8:	f8de b000 	ldr.w	fp, [lr]
 800d2fc:	fb05 a202 	mla	r2, r5, r2, sl
 800d300:	fa13 f38b 	uxtah	r3, r3, fp
 800d304:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d308:	fa1f fb82 	uxth.w	fp, r2
 800d30c:	f8de 2000 	ldr.w	r2, [lr]
 800d310:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d318:	b29b      	uxth	r3, r3
 800d31a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d31e:	4581      	cmp	r9, r0
 800d320:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d324:	f84e 3b04 	str.w	r3, [lr], #4
 800d328:	d2db      	bcs.n	800d2e2 <quorem+0x42>
 800d32a:	f856 300c 	ldr.w	r3, [r6, ip]
 800d32e:	b933      	cbnz	r3, 800d33e <quorem+0x9e>
 800d330:	9b01      	ldr	r3, [sp, #4]
 800d332:	3b04      	subs	r3, #4
 800d334:	429e      	cmp	r6, r3
 800d336:	461a      	mov	r2, r3
 800d338:	d330      	bcc.n	800d39c <quorem+0xfc>
 800d33a:	f8c8 4010 	str.w	r4, [r8, #16]
 800d33e:	4640      	mov	r0, r8
 800d340:	f001 fd9c 	bl	800ee7c <__mcmp>
 800d344:	2800      	cmp	r0, #0
 800d346:	db25      	blt.n	800d394 <quorem+0xf4>
 800d348:	3501      	adds	r5, #1
 800d34a:	4630      	mov	r0, r6
 800d34c:	f04f 0c00 	mov.w	ip, #0
 800d350:	f857 2b04 	ldr.w	r2, [r7], #4
 800d354:	f8d0 e000 	ldr.w	lr, [r0]
 800d358:	b293      	uxth	r3, r2
 800d35a:	ebac 0303 	sub.w	r3, ip, r3
 800d35e:	0c12      	lsrs	r2, r2, #16
 800d360:	fa13 f38e 	uxtah	r3, r3, lr
 800d364:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d368:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d372:	45b9      	cmp	r9, r7
 800d374:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d378:	f840 3b04 	str.w	r3, [r0], #4
 800d37c:	d2e8      	bcs.n	800d350 <quorem+0xb0>
 800d37e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d382:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d386:	b92a      	cbnz	r2, 800d394 <quorem+0xf4>
 800d388:	3b04      	subs	r3, #4
 800d38a:	429e      	cmp	r6, r3
 800d38c:	461a      	mov	r2, r3
 800d38e:	d30b      	bcc.n	800d3a8 <quorem+0x108>
 800d390:	f8c8 4010 	str.w	r4, [r8, #16]
 800d394:	4628      	mov	r0, r5
 800d396:	b003      	add	sp, #12
 800d398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d39c:	6812      	ldr	r2, [r2, #0]
 800d39e:	3b04      	subs	r3, #4
 800d3a0:	2a00      	cmp	r2, #0
 800d3a2:	d1ca      	bne.n	800d33a <quorem+0x9a>
 800d3a4:	3c01      	subs	r4, #1
 800d3a6:	e7c5      	b.n	800d334 <quorem+0x94>
 800d3a8:	6812      	ldr	r2, [r2, #0]
 800d3aa:	3b04      	subs	r3, #4
 800d3ac:	2a00      	cmp	r2, #0
 800d3ae:	d1ef      	bne.n	800d390 <quorem+0xf0>
 800d3b0:	3c01      	subs	r4, #1
 800d3b2:	e7ea      	b.n	800d38a <quorem+0xea>
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	e7ee      	b.n	800d396 <quorem+0xf6>

0800d3b8 <_dtoa_r>:
 800d3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3bc:	ec57 6b10 	vmov	r6, r7, d0
 800d3c0:	b097      	sub	sp, #92	; 0x5c
 800d3c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d3c4:	9106      	str	r1, [sp, #24]
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d3ca:	9312      	str	r3, [sp, #72]	; 0x48
 800d3cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d3d0:	e9cd 6700 	strd	r6, r7, [sp]
 800d3d4:	b93d      	cbnz	r5, 800d3e6 <_dtoa_r+0x2e>
 800d3d6:	2010      	movs	r0, #16
 800d3d8:	f7fd ff9c 	bl	800b314 <malloc>
 800d3dc:	6260      	str	r0, [r4, #36]	; 0x24
 800d3de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3e2:	6005      	str	r5, [r0, #0]
 800d3e4:	60c5      	str	r5, [r0, #12]
 800d3e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3e8:	6819      	ldr	r1, [r3, #0]
 800d3ea:	b151      	cbz	r1, 800d402 <_dtoa_r+0x4a>
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	604a      	str	r2, [r1, #4]
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	4093      	lsls	r3, r2
 800d3f4:	608b      	str	r3, [r1, #8]
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f001 fb21 	bl	800ea3e <_Bfree>
 800d3fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3fe:	2200      	movs	r2, #0
 800d400:	601a      	str	r2, [r3, #0]
 800d402:	1e3b      	subs	r3, r7, #0
 800d404:	bfbb      	ittet	lt
 800d406:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d40a:	9301      	strlt	r3, [sp, #4]
 800d40c:	2300      	movge	r3, #0
 800d40e:	2201      	movlt	r2, #1
 800d410:	bfac      	ite	ge
 800d412:	f8c8 3000 	strge.w	r3, [r8]
 800d416:	f8c8 2000 	strlt.w	r2, [r8]
 800d41a:	4baf      	ldr	r3, [pc, #700]	; (800d6d8 <_dtoa_r+0x320>)
 800d41c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d420:	ea33 0308 	bics.w	r3, r3, r8
 800d424:	d114      	bne.n	800d450 <_dtoa_r+0x98>
 800d426:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d428:	f242 730f 	movw	r3, #9999	; 0x270f
 800d42c:	6013      	str	r3, [r2, #0]
 800d42e:	9b00      	ldr	r3, [sp, #0]
 800d430:	b923      	cbnz	r3, 800d43c <_dtoa_r+0x84>
 800d432:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d436:	2800      	cmp	r0, #0
 800d438:	f000 8542 	beq.w	800dec0 <_dtoa_r+0xb08>
 800d43c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d43e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d6ec <_dtoa_r+0x334>
 800d442:	2b00      	cmp	r3, #0
 800d444:	f000 8544 	beq.w	800ded0 <_dtoa_r+0xb18>
 800d448:	f10b 0303 	add.w	r3, fp, #3
 800d44c:	f000 bd3e 	b.w	800decc <_dtoa_r+0xb14>
 800d450:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d454:	2200      	movs	r2, #0
 800d456:	2300      	movs	r3, #0
 800d458:	4630      	mov	r0, r6
 800d45a:	4639      	mov	r1, r7
 800d45c:	f7f3 fb3c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d460:	4681      	mov	r9, r0
 800d462:	b168      	cbz	r0, 800d480 <_dtoa_r+0xc8>
 800d464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d466:	2301      	movs	r3, #1
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 8524 	beq.w	800deba <_dtoa_r+0xb02>
 800d472:	4b9a      	ldr	r3, [pc, #616]	; (800d6dc <_dtoa_r+0x324>)
 800d474:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d476:	f103 3bff 	add.w	fp, r3, #4294967295
 800d47a:	6013      	str	r3, [r2, #0]
 800d47c:	f000 bd28 	b.w	800ded0 <_dtoa_r+0xb18>
 800d480:	aa14      	add	r2, sp, #80	; 0x50
 800d482:	a915      	add	r1, sp, #84	; 0x54
 800d484:	ec47 6b10 	vmov	d0, r6, r7
 800d488:	4620      	mov	r0, r4
 800d48a:	f001 fde5 	bl	800f058 <__d2b>
 800d48e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d492:	9004      	str	r0, [sp, #16]
 800d494:	2d00      	cmp	r5, #0
 800d496:	d07c      	beq.n	800d592 <_dtoa_r+0x1da>
 800d498:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d49c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d4a0:	46b2      	mov	sl, r6
 800d4a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d4a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d4aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	4b8b      	ldr	r3, [pc, #556]	; (800d6e0 <_dtoa_r+0x328>)
 800d4b2:	4650      	mov	r0, sl
 800d4b4:	4659      	mov	r1, fp
 800d4b6:	f7f2 feef 	bl	8000298 <__aeabi_dsub>
 800d4ba:	a381      	add	r3, pc, #516	; (adr r3, 800d6c0 <_dtoa_r+0x308>)
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	f7f3 f8a2 	bl	8000608 <__aeabi_dmul>
 800d4c4:	a380      	add	r3, pc, #512	; (adr r3, 800d6c8 <_dtoa_r+0x310>)
 800d4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ca:	f7f2 fee7 	bl	800029c <__adddf3>
 800d4ce:	4606      	mov	r6, r0
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	460f      	mov	r7, r1
 800d4d4:	f7f3 f82e 	bl	8000534 <__aeabi_i2d>
 800d4d8:	a37d      	add	r3, pc, #500	; (adr r3, 800d6d0 <_dtoa_r+0x318>)
 800d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4de:	f7f3 f893 	bl	8000608 <__aeabi_dmul>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	f7f2 fed7 	bl	800029c <__adddf3>
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	460f      	mov	r7, r1
 800d4f2:	f7f3 fb39 	bl	8000b68 <__aeabi_d2iz>
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	4682      	mov	sl, r0
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	4639      	mov	r1, r7
 800d500:	f7f3 faf4 	bl	8000aec <__aeabi_dcmplt>
 800d504:	b148      	cbz	r0, 800d51a <_dtoa_r+0x162>
 800d506:	4650      	mov	r0, sl
 800d508:	f7f3 f814 	bl	8000534 <__aeabi_i2d>
 800d50c:	4632      	mov	r2, r6
 800d50e:	463b      	mov	r3, r7
 800d510:	f7f3 fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 800d514:	b908      	cbnz	r0, 800d51a <_dtoa_r+0x162>
 800d516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d51a:	f1ba 0f16 	cmp.w	sl, #22
 800d51e:	d859      	bhi.n	800d5d4 <_dtoa_r+0x21c>
 800d520:	4970      	ldr	r1, [pc, #448]	; (800d6e4 <_dtoa_r+0x32c>)
 800d522:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d526:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d52a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d52e:	f7f3 fafb 	bl	8000b28 <__aeabi_dcmpgt>
 800d532:	2800      	cmp	r0, #0
 800d534:	d050      	beq.n	800d5d8 <_dtoa_r+0x220>
 800d536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d53a:	2300      	movs	r3, #0
 800d53c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d53e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d540:	1b5d      	subs	r5, r3, r5
 800d542:	f1b5 0801 	subs.w	r8, r5, #1
 800d546:	bf49      	itett	mi
 800d548:	f1c5 0301 	rsbmi	r3, r5, #1
 800d54c:	2300      	movpl	r3, #0
 800d54e:	9305      	strmi	r3, [sp, #20]
 800d550:	f04f 0800 	movmi.w	r8, #0
 800d554:	bf58      	it	pl
 800d556:	9305      	strpl	r3, [sp, #20]
 800d558:	f1ba 0f00 	cmp.w	sl, #0
 800d55c:	db3e      	blt.n	800d5dc <_dtoa_r+0x224>
 800d55e:	2300      	movs	r3, #0
 800d560:	44d0      	add	r8, sl
 800d562:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d566:	9307      	str	r3, [sp, #28]
 800d568:	9b06      	ldr	r3, [sp, #24]
 800d56a:	2b09      	cmp	r3, #9
 800d56c:	f200 8090 	bhi.w	800d690 <_dtoa_r+0x2d8>
 800d570:	2b05      	cmp	r3, #5
 800d572:	bfc4      	itt	gt
 800d574:	3b04      	subgt	r3, #4
 800d576:	9306      	strgt	r3, [sp, #24]
 800d578:	9b06      	ldr	r3, [sp, #24]
 800d57a:	f1a3 0302 	sub.w	r3, r3, #2
 800d57e:	bfcc      	ite	gt
 800d580:	2500      	movgt	r5, #0
 800d582:	2501      	movle	r5, #1
 800d584:	2b03      	cmp	r3, #3
 800d586:	f200 808f 	bhi.w	800d6a8 <_dtoa_r+0x2f0>
 800d58a:	e8df f003 	tbb	[pc, r3]
 800d58e:	7f7d      	.short	0x7f7d
 800d590:	7131      	.short	0x7131
 800d592:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d596:	441d      	add	r5, r3
 800d598:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d59c:	2820      	cmp	r0, #32
 800d59e:	dd13      	ble.n	800d5c8 <_dtoa_r+0x210>
 800d5a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d5a4:	9b00      	ldr	r3, [sp, #0]
 800d5a6:	fa08 f800 	lsl.w	r8, r8, r0
 800d5aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d5ae:	fa23 f000 	lsr.w	r0, r3, r0
 800d5b2:	ea48 0000 	orr.w	r0, r8, r0
 800d5b6:	f7f2 ffad 	bl	8000514 <__aeabi_ui2d>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	4682      	mov	sl, r0
 800d5be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d5c2:	3d01      	subs	r5, #1
 800d5c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d5c6:	e772      	b.n	800d4ae <_dtoa_r+0xf6>
 800d5c8:	9b00      	ldr	r3, [sp, #0]
 800d5ca:	f1c0 0020 	rsb	r0, r0, #32
 800d5ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d5d2:	e7f0      	b.n	800d5b6 <_dtoa_r+0x1fe>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e7b1      	b.n	800d53c <_dtoa_r+0x184>
 800d5d8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d5da:	e7b0      	b.n	800d53e <_dtoa_r+0x186>
 800d5dc:	9b05      	ldr	r3, [sp, #20]
 800d5de:	eba3 030a 	sub.w	r3, r3, sl
 800d5e2:	9305      	str	r3, [sp, #20]
 800d5e4:	f1ca 0300 	rsb	r3, sl, #0
 800d5e8:	9307      	str	r3, [sp, #28]
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	930e      	str	r3, [sp, #56]	; 0x38
 800d5ee:	e7bb      	b.n	800d568 <_dtoa_r+0x1b0>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	930a      	str	r3, [sp, #40]	; 0x28
 800d5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	dd59      	ble.n	800d6ae <_dtoa_r+0x2f6>
 800d5fa:	9302      	str	r3, [sp, #8]
 800d5fc:	4699      	mov	r9, r3
 800d5fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d600:	2200      	movs	r2, #0
 800d602:	6072      	str	r2, [r6, #4]
 800d604:	2204      	movs	r2, #4
 800d606:	f102 0014 	add.w	r0, r2, #20
 800d60a:	4298      	cmp	r0, r3
 800d60c:	6871      	ldr	r1, [r6, #4]
 800d60e:	d953      	bls.n	800d6b8 <_dtoa_r+0x300>
 800d610:	4620      	mov	r0, r4
 800d612:	f001 f9e0 	bl	800e9d6 <_Balloc>
 800d616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d618:	6030      	str	r0, [r6, #0]
 800d61a:	f1b9 0f0e 	cmp.w	r9, #14
 800d61e:	f8d3 b000 	ldr.w	fp, [r3]
 800d622:	f200 80e6 	bhi.w	800d7f2 <_dtoa_r+0x43a>
 800d626:	2d00      	cmp	r5, #0
 800d628:	f000 80e3 	beq.w	800d7f2 <_dtoa_r+0x43a>
 800d62c:	ed9d 7b00 	vldr	d7, [sp]
 800d630:	f1ba 0f00 	cmp.w	sl, #0
 800d634:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d638:	dd74      	ble.n	800d724 <_dtoa_r+0x36c>
 800d63a:	4a2a      	ldr	r2, [pc, #168]	; (800d6e4 <_dtoa_r+0x32c>)
 800d63c:	f00a 030f 	and.w	r3, sl, #15
 800d640:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d644:	ed93 7b00 	vldr	d7, [r3]
 800d648:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d64c:	06f0      	lsls	r0, r6, #27
 800d64e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d652:	d565      	bpl.n	800d720 <_dtoa_r+0x368>
 800d654:	4b24      	ldr	r3, [pc, #144]	; (800d6e8 <_dtoa_r+0x330>)
 800d656:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d65a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d65e:	f7f3 f8fd 	bl	800085c <__aeabi_ddiv>
 800d662:	e9cd 0100 	strd	r0, r1, [sp]
 800d666:	f006 060f 	and.w	r6, r6, #15
 800d66a:	2503      	movs	r5, #3
 800d66c:	4f1e      	ldr	r7, [pc, #120]	; (800d6e8 <_dtoa_r+0x330>)
 800d66e:	e04c      	b.n	800d70a <_dtoa_r+0x352>
 800d670:	2301      	movs	r3, #1
 800d672:	930a      	str	r3, [sp, #40]	; 0x28
 800d674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d676:	4453      	add	r3, sl
 800d678:	f103 0901 	add.w	r9, r3, #1
 800d67c:	9302      	str	r3, [sp, #8]
 800d67e:	464b      	mov	r3, r9
 800d680:	2b01      	cmp	r3, #1
 800d682:	bfb8      	it	lt
 800d684:	2301      	movlt	r3, #1
 800d686:	e7ba      	b.n	800d5fe <_dtoa_r+0x246>
 800d688:	2300      	movs	r3, #0
 800d68a:	e7b2      	b.n	800d5f2 <_dtoa_r+0x23a>
 800d68c:	2300      	movs	r3, #0
 800d68e:	e7f0      	b.n	800d672 <_dtoa_r+0x2ba>
 800d690:	2501      	movs	r5, #1
 800d692:	2300      	movs	r3, #0
 800d694:	9306      	str	r3, [sp, #24]
 800d696:	950a      	str	r5, [sp, #40]	; 0x28
 800d698:	f04f 33ff 	mov.w	r3, #4294967295
 800d69c:	9302      	str	r3, [sp, #8]
 800d69e:	4699      	mov	r9, r3
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	2312      	movs	r3, #18
 800d6a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800d6a6:	e7aa      	b.n	800d5fe <_dtoa_r+0x246>
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d6ac:	e7f4      	b.n	800d698 <_dtoa_r+0x2e0>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	9302      	str	r3, [sp, #8]
 800d6b2:	4699      	mov	r9, r3
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	e7f5      	b.n	800d6a4 <_dtoa_r+0x2ec>
 800d6b8:	3101      	adds	r1, #1
 800d6ba:	6071      	str	r1, [r6, #4]
 800d6bc:	0052      	lsls	r2, r2, #1
 800d6be:	e7a2      	b.n	800d606 <_dtoa_r+0x24e>
 800d6c0:	636f4361 	.word	0x636f4361
 800d6c4:	3fd287a7 	.word	0x3fd287a7
 800d6c8:	8b60c8b3 	.word	0x8b60c8b3
 800d6cc:	3fc68a28 	.word	0x3fc68a28
 800d6d0:	509f79fb 	.word	0x509f79fb
 800d6d4:	3fd34413 	.word	0x3fd34413
 800d6d8:	7ff00000 	.word	0x7ff00000
 800d6dc:	08012fe4 	.word	0x08012fe4
 800d6e0:	3ff80000 	.word	0x3ff80000
 800d6e4:	08012ee8 	.word	0x08012ee8
 800d6e8:	08012ec0 	.word	0x08012ec0
 800d6ec:	08012e49 	.word	0x08012e49
 800d6f0:	07f1      	lsls	r1, r6, #31
 800d6f2:	d508      	bpl.n	800d706 <_dtoa_r+0x34e>
 800d6f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d6f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6fc:	f7f2 ff84 	bl	8000608 <__aeabi_dmul>
 800d700:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d704:	3501      	adds	r5, #1
 800d706:	1076      	asrs	r6, r6, #1
 800d708:	3708      	adds	r7, #8
 800d70a:	2e00      	cmp	r6, #0
 800d70c:	d1f0      	bne.n	800d6f0 <_dtoa_r+0x338>
 800d70e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d712:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d716:	f7f3 f8a1 	bl	800085c <__aeabi_ddiv>
 800d71a:	e9cd 0100 	strd	r0, r1, [sp]
 800d71e:	e01a      	b.n	800d756 <_dtoa_r+0x39e>
 800d720:	2502      	movs	r5, #2
 800d722:	e7a3      	b.n	800d66c <_dtoa_r+0x2b4>
 800d724:	f000 80a0 	beq.w	800d868 <_dtoa_r+0x4b0>
 800d728:	f1ca 0600 	rsb	r6, sl, #0
 800d72c:	4b9f      	ldr	r3, [pc, #636]	; (800d9ac <_dtoa_r+0x5f4>)
 800d72e:	4fa0      	ldr	r7, [pc, #640]	; (800d9b0 <_dtoa_r+0x5f8>)
 800d730:	f006 020f 	and.w	r2, r6, #15
 800d734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d740:	f7f2 ff62 	bl	8000608 <__aeabi_dmul>
 800d744:	e9cd 0100 	strd	r0, r1, [sp]
 800d748:	1136      	asrs	r6, r6, #4
 800d74a:	2300      	movs	r3, #0
 800d74c:	2502      	movs	r5, #2
 800d74e:	2e00      	cmp	r6, #0
 800d750:	d17f      	bne.n	800d852 <_dtoa_r+0x49a>
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e1      	bne.n	800d71a <_dtoa_r+0x362>
 800d756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f000 8087 	beq.w	800d86c <_dtoa_r+0x4b4>
 800d75e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d762:	2200      	movs	r2, #0
 800d764:	4b93      	ldr	r3, [pc, #588]	; (800d9b4 <_dtoa_r+0x5fc>)
 800d766:	4630      	mov	r0, r6
 800d768:	4639      	mov	r1, r7
 800d76a:	f7f3 f9bf 	bl	8000aec <__aeabi_dcmplt>
 800d76e:	2800      	cmp	r0, #0
 800d770:	d07c      	beq.n	800d86c <_dtoa_r+0x4b4>
 800d772:	f1b9 0f00 	cmp.w	r9, #0
 800d776:	d079      	beq.n	800d86c <_dtoa_r+0x4b4>
 800d778:	9b02      	ldr	r3, [sp, #8]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	dd35      	ble.n	800d7ea <_dtoa_r+0x432>
 800d77e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d782:	9308      	str	r3, [sp, #32]
 800d784:	4639      	mov	r1, r7
 800d786:	2200      	movs	r2, #0
 800d788:	4b8b      	ldr	r3, [pc, #556]	; (800d9b8 <_dtoa_r+0x600>)
 800d78a:	4630      	mov	r0, r6
 800d78c:	f7f2 ff3c 	bl	8000608 <__aeabi_dmul>
 800d790:	e9cd 0100 	strd	r0, r1, [sp]
 800d794:	9f02      	ldr	r7, [sp, #8]
 800d796:	3501      	adds	r5, #1
 800d798:	4628      	mov	r0, r5
 800d79a:	f7f2 fecb 	bl	8000534 <__aeabi_i2d>
 800d79e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7a2:	f7f2 ff31 	bl	8000608 <__aeabi_dmul>
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	4b84      	ldr	r3, [pc, #528]	; (800d9bc <_dtoa_r+0x604>)
 800d7aa:	f7f2 fd77 	bl	800029c <__adddf3>
 800d7ae:	4605      	mov	r5, r0
 800d7b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d7b4:	2f00      	cmp	r7, #0
 800d7b6:	d15d      	bne.n	800d874 <_dtoa_r+0x4bc>
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	4b81      	ldr	r3, [pc, #516]	; (800d9c0 <_dtoa_r+0x608>)
 800d7bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7c0:	f7f2 fd6a 	bl	8000298 <__aeabi_dsub>
 800d7c4:	462a      	mov	r2, r5
 800d7c6:	4633      	mov	r3, r6
 800d7c8:	e9cd 0100 	strd	r0, r1, [sp]
 800d7cc:	f7f3 f9ac 	bl	8000b28 <__aeabi_dcmpgt>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	f040 8288 	bne.w	800dce6 <_dtoa_r+0x92e>
 800d7d6:	462a      	mov	r2, r5
 800d7d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d7dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7e0:	f7f3 f984 	bl	8000aec <__aeabi_dcmplt>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	f040 827c 	bne.w	800dce2 <_dtoa_r+0x92a>
 800d7ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d7ee:	e9cd 2300 	strd	r2, r3, [sp]
 800d7f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f2c0 8150 	blt.w	800da9a <_dtoa_r+0x6e2>
 800d7fa:	f1ba 0f0e 	cmp.w	sl, #14
 800d7fe:	f300 814c 	bgt.w	800da9a <_dtoa_r+0x6e2>
 800d802:	4b6a      	ldr	r3, [pc, #424]	; (800d9ac <_dtoa_r+0x5f4>)
 800d804:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d808:	ed93 7b00 	vldr	d7, [r3]
 800d80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d80e:	2b00      	cmp	r3, #0
 800d810:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d814:	f280 80d8 	bge.w	800d9c8 <_dtoa_r+0x610>
 800d818:	f1b9 0f00 	cmp.w	r9, #0
 800d81c:	f300 80d4 	bgt.w	800d9c8 <_dtoa_r+0x610>
 800d820:	f040 825e 	bne.w	800dce0 <_dtoa_r+0x928>
 800d824:	2200      	movs	r2, #0
 800d826:	4b66      	ldr	r3, [pc, #408]	; (800d9c0 <_dtoa_r+0x608>)
 800d828:	ec51 0b17 	vmov	r0, r1, d7
 800d82c:	f7f2 feec 	bl	8000608 <__aeabi_dmul>
 800d830:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d834:	f7f3 f96e 	bl	8000b14 <__aeabi_dcmpge>
 800d838:	464f      	mov	r7, r9
 800d83a:	464e      	mov	r6, r9
 800d83c:	2800      	cmp	r0, #0
 800d83e:	f040 8234 	bne.w	800dcaa <_dtoa_r+0x8f2>
 800d842:	2331      	movs	r3, #49	; 0x31
 800d844:	f10b 0501 	add.w	r5, fp, #1
 800d848:	f88b 3000 	strb.w	r3, [fp]
 800d84c:	f10a 0a01 	add.w	sl, sl, #1
 800d850:	e22f      	b.n	800dcb2 <_dtoa_r+0x8fa>
 800d852:	07f2      	lsls	r2, r6, #31
 800d854:	d505      	bpl.n	800d862 <_dtoa_r+0x4aa>
 800d856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d85a:	f7f2 fed5 	bl	8000608 <__aeabi_dmul>
 800d85e:	3501      	adds	r5, #1
 800d860:	2301      	movs	r3, #1
 800d862:	1076      	asrs	r6, r6, #1
 800d864:	3708      	adds	r7, #8
 800d866:	e772      	b.n	800d74e <_dtoa_r+0x396>
 800d868:	2502      	movs	r5, #2
 800d86a:	e774      	b.n	800d756 <_dtoa_r+0x39e>
 800d86c:	f8cd a020 	str.w	sl, [sp, #32]
 800d870:	464f      	mov	r7, r9
 800d872:	e791      	b.n	800d798 <_dtoa_r+0x3e0>
 800d874:	4b4d      	ldr	r3, [pc, #308]	; (800d9ac <_dtoa_r+0x5f4>)
 800d876:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d87a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d880:	2b00      	cmp	r3, #0
 800d882:	d047      	beq.n	800d914 <_dtoa_r+0x55c>
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	2000      	movs	r0, #0
 800d88a:	494e      	ldr	r1, [pc, #312]	; (800d9c4 <_dtoa_r+0x60c>)
 800d88c:	f7f2 ffe6 	bl	800085c <__aeabi_ddiv>
 800d890:	462a      	mov	r2, r5
 800d892:	4633      	mov	r3, r6
 800d894:	f7f2 fd00 	bl	8000298 <__aeabi_dsub>
 800d898:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d89c:	465d      	mov	r5, fp
 800d89e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8a2:	f7f3 f961 	bl	8000b68 <__aeabi_d2iz>
 800d8a6:	4606      	mov	r6, r0
 800d8a8:	f7f2 fe44 	bl	8000534 <__aeabi_i2d>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8b4:	f7f2 fcf0 	bl	8000298 <__aeabi_dsub>
 800d8b8:	3630      	adds	r6, #48	; 0x30
 800d8ba:	f805 6b01 	strb.w	r6, [r5], #1
 800d8be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d8c2:	e9cd 0100 	strd	r0, r1, [sp]
 800d8c6:	f7f3 f911 	bl	8000aec <__aeabi_dcmplt>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d163      	bne.n	800d996 <_dtoa_r+0x5de>
 800d8ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	4937      	ldr	r1, [pc, #220]	; (800d9b4 <_dtoa_r+0x5fc>)
 800d8d6:	f7f2 fcdf 	bl	8000298 <__aeabi_dsub>
 800d8da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d8de:	f7f3 f905 	bl	8000aec <__aeabi_dcmplt>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f040 80b7 	bne.w	800da56 <_dtoa_r+0x69e>
 800d8e8:	eba5 030b 	sub.w	r3, r5, fp
 800d8ec:	429f      	cmp	r7, r3
 800d8ee:	f77f af7c 	ble.w	800d7ea <_dtoa_r+0x432>
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	4b30      	ldr	r3, [pc, #192]	; (800d9b8 <_dtoa_r+0x600>)
 800d8f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d8fa:	f7f2 fe85 	bl	8000608 <__aeabi_dmul>
 800d8fe:	2200      	movs	r2, #0
 800d900:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d904:	4b2c      	ldr	r3, [pc, #176]	; (800d9b8 <_dtoa_r+0x600>)
 800d906:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d90a:	f7f2 fe7d 	bl	8000608 <__aeabi_dmul>
 800d90e:	e9cd 0100 	strd	r0, r1, [sp]
 800d912:	e7c4      	b.n	800d89e <_dtoa_r+0x4e6>
 800d914:	462a      	mov	r2, r5
 800d916:	4633      	mov	r3, r6
 800d918:	f7f2 fe76 	bl	8000608 <__aeabi_dmul>
 800d91c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d920:	eb0b 0507 	add.w	r5, fp, r7
 800d924:	465e      	mov	r6, fp
 800d926:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d92a:	f7f3 f91d 	bl	8000b68 <__aeabi_d2iz>
 800d92e:	4607      	mov	r7, r0
 800d930:	f7f2 fe00 	bl	8000534 <__aeabi_i2d>
 800d934:	3730      	adds	r7, #48	; 0x30
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
 800d93a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d93e:	f7f2 fcab 	bl	8000298 <__aeabi_dsub>
 800d942:	f806 7b01 	strb.w	r7, [r6], #1
 800d946:	42ae      	cmp	r6, r5
 800d948:	e9cd 0100 	strd	r0, r1, [sp]
 800d94c:	f04f 0200 	mov.w	r2, #0
 800d950:	d126      	bne.n	800d9a0 <_dtoa_r+0x5e8>
 800d952:	4b1c      	ldr	r3, [pc, #112]	; (800d9c4 <_dtoa_r+0x60c>)
 800d954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d958:	f7f2 fca0 	bl	800029c <__adddf3>
 800d95c:	4602      	mov	r2, r0
 800d95e:	460b      	mov	r3, r1
 800d960:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d964:	f7f3 f8e0 	bl	8000b28 <__aeabi_dcmpgt>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d174      	bne.n	800da56 <_dtoa_r+0x69e>
 800d96c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d970:	2000      	movs	r0, #0
 800d972:	4914      	ldr	r1, [pc, #80]	; (800d9c4 <_dtoa_r+0x60c>)
 800d974:	f7f2 fc90 	bl	8000298 <__aeabi_dsub>
 800d978:	4602      	mov	r2, r0
 800d97a:	460b      	mov	r3, r1
 800d97c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d980:	f7f3 f8b4 	bl	8000aec <__aeabi_dcmplt>
 800d984:	2800      	cmp	r0, #0
 800d986:	f43f af30 	beq.w	800d7ea <_dtoa_r+0x432>
 800d98a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d98e:	2b30      	cmp	r3, #48	; 0x30
 800d990:	f105 32ff 	add.w	r2, r5, #4294967295
 800d994:	d002      	beq.n	800d99c <_dtoa_r+0x5e4>
 800d996:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d99a:	e04a      	b.n	800da32 <_dtoa_r+0x67a>
 800d99c:	4615      	mov	r5, r2
 800d99e:	e7f4      	b.n	800d98a <_dtoa_r+0x5d2>
 800d9a0:	4b05      	ldr	r3, [pc, #20]	; (800d9b8 <_dtoa_r+0x600>)
 800d9a2:	f7f2 fe31 	bl	8000608 <__aeabi_dmul>
 800d9a6:	e9cd 0100 	strd	r0, r1, [sp]
 800d9aa:	e7bc      	b.n	800d926 <_dtoa_r+0x56e>
 800d9ac:	08012ee8 	.word	0x08012ee8
 800d9b0:	08012ec0 	.word	0x08012ec0
 800d9b4:	3ff00000 	.word	0x3ff00000
 800d9b8:	40240000 	.word	0x40240000
 800d9bc:	401c0000 	.word	0x401c0000
 800d9c0:	40140000 	.word	0x40140000
 800d9c4:	3fe00000 	.word	0x3fe00000
 800d9c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d9cc:	465d      	mov	r5, fp
 800d9ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	4639      	mov	r1, r7
 800d9d6:	f7f2 ff41 	bl	800085c <__aeabi_ddiv>
 800d9da:	f7f3 f8c5 	bl	8000b68 <__aeabi_d2iz>
 800d9de:	4680      	mov	r8, r0
 800d9e0:	f7f2 fda8 	bl	8000534 <__aeabi_i2d>
 800d9e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9e8:	f7f2 fe0e 	bl	8000608 <__aeabi_dmul>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	4639      	mov	r1, r7
 800d9f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d9f8:	f7f2 fc4e 	bl	8000298 <__aeabi_dsub>
 800d9fc:	f805 6b01 	strb.w	r6, [r5], #1
 800da00:	eba5 060b 	sub.w	r6, r5, fp
 800da04:	45b1      	cmp	r9, r6
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	d139      	bne.n	800da80 <_dtoa_r+0x6c8>
 800da0c:	f7f2 fc46 	bl	800029c <__adddf3>
 800da10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da14:	4606      	mov	r6, r0
 800da16:	460f      	mov	r7, r1
 800da18:	f7f3 f886 	bl	8000b28 <__aeabi_dcmpgt>
 800da1c:	b9c8      	cbnz	r0, 800da52 <_dtoa_r+0x69a>
 800da1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da22:	4630      	mov	r0, r6
 800da24:	4639      	mov	r1, r7
 800da26:	f7f3 f857 	bl	8000ad8 <__aeabi_dcmpeq>
 800da2a:	b110      	cbz	r0, 800da32 <_dtoa_r+0x67a>
 800da2c:	f018 0f01 	tst.w	r8, #1
 800da30:	d10f      	bne.n	800da52 <_dtoa_r+0x69a>
 800da32:	9904      	ldr	r1, [sp, #16]
 800da34:	4620      	mov	r0, r4
 800da36:	f001 f802 	bl	800ea3e <_Bfree>
 800da3a:	2300      	movs	r3, #0
 800da3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da3e:	702b      	strb	r3, [r5, #0]
 800da40:	f10a 0301 	add.w	r3, sl, #1
 800da44:	6013      	str	r3, [r2, #0]
 800da46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f000 8241 	beq.w	800ded0 <_dtoa_r+0xb18>
 800da4e:	601d      	str	r5, [r3, #0]
 800da50:	e23e      	b.n	800ded0 <_dtoa_r+0xb18>
 800da52:	f8cd a020 	str.w	sl, [sp, #32]
 800da56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da5a:	2a39      	cmp	r2, #57	; 0x39
 800da5c:	f105 33ff 	add.w	r3, r5, #4294967295
 800da60:	d108      	bne.n	800da74 <_dtoa_r+0x6bc>
 800da62:	459b      	cmp	fp, r3
 800da64:	d10a      	bne.n	800da7c <_dtoa_r+0x6c4>
 800da66:	9b08      	ldr	r3, [sp, #32]
 800da68:	3301      	adds	r3, #1
 800da6a:	9308      	str	r3, [sp, #32]
 800da6c:	2330      	movs	r3, #48	; 0x30
 800da6e:	f88b 3000 	strb.w	r3, [fp]
 800da72:	465b      	mov	r3, fp
 800da74:	781a      	ldrb	r2, [r3, #0]
 800da76:	3201      	adds	r2, #1
 800da78:	701a      	strb	r2, [r3, #0]
 800da7a:	e78c      	b.n	800d996 <_dtoa_r+0x5de>
 800da7c:	461d      	mov	r5, r3
 800da7e:	e7ea      	b.n	800da56 <_dtoa_r+0x69e>
 800da80:	2200      	movs	r2, #0
 800da82:	4b9b      	ldr	r3, [pc, #620]	; (800dcf0 <_dtoa_r+0x938>)
 800da84:	f7f2 fdc0 	bl	8000608 <__aeabi_dmul>
 800da88:	2200      	movs	r2, #0
 800da8a:	2300      	movs	r3, #0
 800da8c:	4606      	mov	r6, r0
 800da8e:	460f      	mov	r7, r1
 800da90:	f7f3 f822 	bl	8000ad8 <__aeabi_dcmpeq>
 800da94:	2800      	cmp	r0, #0
 800da96:	d09a      	beq.n	800d9ce <_dtoa_r+0x616>
 800da98:	e7cb      	b.n	800da32 <_dtoa_r+0x67a>
 800da9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da9c:	2a00      	cmp	r2, #0
 800da9e:	f000 808b 	beq.w	800dbb8 <_dtoa_r+0x800>
 800daa2:	9a06      	ldr	r2, [sp, #24]
 800daa4:	2a01      	cmp	r2, #1
 800daa6:	dc6e      	bgt.n	800db86 <_dtoa_r+0x7ce>
 800daa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800daaa:	2a00      	cmp	r2, #0
 800daac:	d067      	beq.n	800db7e <_dtoa_r+0x7c6>
 800daae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dab2:	9f07      	ldr	r7, [sp, #28]
 800dab4:	9d05      	ldr	r5, [sp, #20]
 800dab6:	9a05      	ldr	r2, [sp, #20]
 800dab8:	2101      	movs	r1, #1
 800daba:	441a      	add	r2, r3
 800dabc:	4620      	mov	r0, r4
 800dabe:	9205      	str	r2, [sp, #20]
 800dac0:	4498      	add	r8, r3
 800dac2:	f001 f89a 	bl	800ebfa <__i2b>
 800dac6:	4606      	mov	r6, r0
 800dac8:	2d00      	cmp	r5, #0
 800daca:	dd0c      	ble.n	800dae6 <_dtoa_r+0x72e>
 800dacc:	f1b8 0f00 	cmp.w	r8, #0
 800dad0:	dd09      	ble.n	800dae6 <_dtoa_r+0x72e>
 800dad2:	4545      	cmp	r5, r8
 800dad4:	9a05      	ldr	r2, [sp, #20]
 800dad6:	462b      	mov	r3, r5
 800dad8:	bfa8      	it	ge
 800dada:	4643      	movge	r3, r8
 800dadc:	1ad2      	subs	r2, r2, r3
 800dade:	9205      	str	r2, [sp, #20]
 800dae0:	1aed      	subs	r5, r5, r3
 800dae2:	eba8 0803 	sub.w	r8, r8, r3
 800dae6:	9b07      	ldr	r3, [sp, #28]
 800dae8:	b1eb      	cbz	r3, 800db26 <_dtoa_r+0x76e>
 800daea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daec:	2b00      	cmp	r3, #0
 800daee:	d067      	beq.n	800dbc0 <_dtoa_r+0x808>
 800daf0:	b18f      	cbz	r7, 800db16 <_dtoa_r+0x75e>
 800daf2:	4631      	mov	r1, r6
 800daf4:	463a      	mov	r2, r7
 800daf6:	4620      	mov	r0, r4
 800daf8:	f001 f91e 	bl	800ed38 <__pow5mult>
 800dafc:	9a04      	ldr	r2, [sp, #16]
 800dafe:	4601      	mov	r1, r0
 800db00:	4606      	mov	r6, r0
 800db02:	4620      	mov	r0, r4
 800db04:	f001 f882 	bl	800ec0c <__multiply>
 800db08:	9904      	ldr	r1, [sp, #16]
 800db0a:	9008      	str	r0, [sp, #32]
 800db0c:	4620      	mov	r0, r4
 800db0e:	f000 ff96 	bl	800ea3e <_Bfree>
 800db12:	9b08      	ldr	r3, [sp, #32]
 800db14:	9304      	str	r3, [sp, #16]
 800db16:	9b07      	ldr	r3, [sp, #28]
 800db18:	1bda      	subs	r2, r3, r7
 800db1a:	d004      	beq.n	800db26 <_dtoa_r+0x76e>
 800db1c:	9904      	ldr	r1, [sp, #16]
 800db1e:	4620      	mov	r0, r4
 800db20:	f001 f90a 	bl	800ed38 <__pow5mult>
 800db24:	9004      	str	r0, [sp, #16]
 800db26:	2101      	movs	r1, #1
 800db28:	4620      	mov	r0, r4
 800db2a:	f001 f866 	bl	800ebfa <__i2b>
 800db2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db30:	4607      	mov	r7, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	f000 81d0 	beq.w	800ded8 <_dtoa_r+0xb20>
 800db38:	461a      	mov	r2, r3
 800db3a:	4601      	mov	r1, r0
 800db3c:	4620      	mov	r0, r4
 800db3e:	f001 f8fb 	bl	800ed38 <__pow5mult>
 800db42:	9b06      	ldr	r3, [sp, #24]
 800db44:	2b01      	cmp	r3, #1
 800db46:	4607      	mov	r7, r0
 800db48:	dc40      	bgt.n	800dbcc <_dtoa_r+0x814>
 800db4a:	9b00      	ldr	r3, [sp, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d139      	bne.n	800dbc4 <_dtoa_r+0x80c>
 800db50:	9b01      	ldr	r3, [sp, #4]
 800db52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db56:	2b00      	cmp	r3, #0
 800db58:	d136      	bne.n	800dbc8 <_dtoa_r+0x810>
 800db5a:	9b01      	ldr	r3, [sp, #4]
 800db5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db60:	0d1b      	lsrs	r3, r3, #20
 800db62:	051b      	lsls	r3, r3, #20
 800db64:	b12b      	cbz	r3, 800db72 <_dtoa_r+0x7ba>
 800db66:	9b05      	ldr	r3, [sp, #20]
 800db68:	3301      	adds	r3, #1
 800db6a:	9305      	str	r3, [sp, #20]
 800db6c:	f108 0801 	add.w	r8, r8, #1
 800db70:	2301      	movs	r3, #1
 800db72:	9307      	str	r3, [sp, #28]
 800db74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db76:	2b00      	cmp	r3, #0
 800db78:	d12a      	bne.n	800dbd0 <_dtoa_r+0x818>
 800db7a:	2001      	movs	r0, #1
 800db7c:	e030      	b.n	800dbe0 <_dtoa_r+0x828>
 800db7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800db84:	e795      	b.n	800dab2 <_dtoa_r+0x6fa>
 800db86:	9b07      	ldr	r3, [sp, #28]
 800db88:	f109 37ff 	add.w	r7, r9, #4294967295
 800db8c:	42bb      	cmp	r3, r7
 800db8e:	bfbf      	itttt	lt
 800db90:	9b07      	ldrlt	r3, [sp, #28]
 800db92:	9707      	strlt	r7, [sp, #28]
 800db94:	1afa      	sublt	r2, r7, r3
 800db96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800db98:	bfbb      	ittet	lt
 800db9a:	189b      	addlt	r3, r3, r2
 800db9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800db9e:	1bdf      	subge	r7, r3, r7
 800dba0:	2700      	movlt	r7, #0
 800dba2:	f1b9 0f00 	cmp.w	r9, #0
 800dba6:	bfb5      	itete	lt
 800dba8:	9b05      	ldrlt	r3, [sp, #20]
 800dbaa:	9d05      	ldrge	r5, [sp, #20]
 800dbac:	eba3 0509 	sublt.w	r5, r3, r9
 800dbb0:	464b      	movge	r3, r9
 800dbb2:	bfb8      	it	lt
 800dbb4:	2300      	movlt	r3, #0
 800dbb6:	e77e      	b.n	800dab6 <_dtoa_r+0x6fe>
 800dbb8:	9f07      	ldr	r7, [sp, #28]
 800dbba:	9d05      	ldr	r5, [sp, #20]
 800dbbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800dbbe:	e783      	b.n	800dac8 <_dtoa_r+0x710>
 800dbc0:	9a07      	ldr	r2, [sp, #28]
 800dbc2:	e7ab      	b.n	800db1c <_dtoa_r+0x764>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	e7d4      	b.n	800db72 <_dtoa_r+0x7ba>
 800dbc8:	9b00      	ldr	r3, [sp, #0]
 800dbca:	e7d2      	b.n	800db72 <_dtoa_r+0x7ba>
 800dbcc:	2300      	movs	r3, #0
 800dbce:	9307      	str	r3, [sp, #28]
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800dbd6:	6918      	ldr	r0, [r3, #16]
 800dbd8:	f000 ffc1 	bl	800eb5e <__hi0bits>
 800dbdc:	f1c0 0020 	rsb	r0, r0, #32
 800dbe0:	4440      	add	r0, r8
 800dbe2:	f010 001f 	ands.w	r0, r0, #31
 800dbe6:	d047      	beq.n	800dc78 <_dtoa_r+0x8c0>
 800dbe8:	f1c0 0320 	rsb	r3, r0, #32
 800dbec:	2b04      	cmp	r3, #4
 800dbee:	dd3b      	ble.n	800dc68 <_dtoa_r+0x8b0>
 800dbf0:	9b05      	ldr	r3, [sp, #20]
 800dbf2:	f1c0 001c 	rsb	r0, r0, #28
 800dbf6:	4403      	add	r3, r0
 800dbf8:	9305      	str	r3, [sp, #20]
 800dbfa:	4405      	add	r5, r0
 800dbfc:	4480      	add	r8, r0
 800dbfe:	9b05      	ldr	r3, [sp, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	dd05      	ble.n	800dc10 <_dtoa_r+0x858>
 800dc04:	461a      	mov	r2, r3
 800dc06:	9904      	ldr	r1, [sp, #16]
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f001 f8e3 	bl	800edd4 <__lshift>
 800dc0e:	9004      	str	r0, [sp, #16]
 800dc10:	f1b8 0f00 	cmp.w	r8, #0
 800dc14:	dd05      	ble.n	800dc22 <_dtoa_r+0x86a>
 800dc16:	4639      	mov	r1, r7
 800dc18:	4642      	mov	r2, r8
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f001 f8da 	bl	800edd4 <__lshift>
 800dc20:	4607      	mov	r7, r0
 800dc22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc24:	b353      	cbz	r3, 800dc7c <_dtoa_r+0x8c4>
 800dc26:	4639      	mov	r1, r7
 800dc28:	9804      	ldr	r0, [sp, #16]
 800dc2a:	f001 f927 	bl	800ee7c <__mcmp>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	da24      	bge.n	800dc7c <_dtoa_r+0x8c4>
 800dc32:	2300      	movs	r3, #0
 800dc34:	220a      	movs	r2, #10
 800dc36:	9904      	ldr	r1, [sp, #16]
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f000 ff17 	bl	800ea6c <__multadd>
 800dc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc40:	9004      	str	r0, [sp, #16]
 800dc42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f000 814d 	beq.w	800dee6 <_dtoa_r+0xb2e>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4631      	mov	r1, r6
 800dc50:	220a      	movs	r2, #10
 800dc52:	4620      	mov	r0, r4
 800dc54:	f000 ff0a 	bl	800ea6c <__multadd>
 800dc58:	9b02      	ldr	r3, [sp, #8]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	dc4f      	bgt.n	800dd00 <_dtoa_r+0x948>
 800dc60:	9b06      	ldr	r3, [sp, #24]
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	dd4c      	ble.n	800dd00 <_dtoa_r+0x948>
 800dc66:	e011      	b.n	800dc8c <_dtoa_r+0x8d4>
 800dc68:	d0c9      	beq.n	800dbfe <_dtoa_r+0x846>
 800dc6a:	9a05      	ldr	r2, [sp, #20]
 800dc6c:	331c      	adds	r3, #28
 800dc6e:	441a      	add	r2, r3
 800dc70:	9205      	str	r2, [sp, #20]
 800dc72:	441d      	add	r5, r3
 800dc74:	4498      	add	r8, r3
 800dc76:	e7c2      	b.n	800dbfe <_dtoa_r+0x846>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	e7f6      	b.n	800dc6a <_dtoa_r+0x8b2>
 800dc7c:	f1b9 0f00 	cmp.w	r9, #0
 800dc80:	dc38      	bgt.n	800dcf4 <_dtoa_r+0x93c>
 800dc82:	9b06      	ldr	r3, [sp, #24]
 800dc84:	2b02      	cmp	r3, #2
 800dc86:	dd35      	ble.n	800dcf4 <_dtoa_r+0x93c>
 800dc88:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc8c:	9b02      	ldr	r3, [sp, #8]
 800dc8e:	b963      	cbnz	r3, 800dcaa <_dtoa_r+0x8f2>
 800dc90:	4639      	mov	r1, r7
 800dc92:	2205      	movs	r2, #5
 800dc94:	4620      	mov	r0, r4
 800dc96:	f000 fee9 	bl	800ea6c <__multadd>
 800dc9a:	4601      	mov	r1, r0
 800dc9c:	4607      	mov	r7, r0
 800dc9e:	9804      	ldr	r0, [sp, #16]
 800dca0:	f001 f8ec 	bl	800ee7c <__mcmp>
 800dca4:	2800      	cmp	r0, #0
 800dca6:	f73f adcc 	bgt.w	800d842 <_dtoa_r+0x48a>
 800dcaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcac:	465d      	mov	r5, fp
 800dcae:	ea6f 0a03 	mvn.w	sl, r3
 800dcb2:	f04f 0900 	mov.w	r9, #0
 800dcb6:	4639      	mov	r1, r7
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f000 fec0 	bl	800ea3e <_Bfree>
 800dcbe:	2e00      	cmp	r6, #0
 800dcc0:	f43f aeb7 	beq.w	800da32 <_dtoa_r+0x67a>
 800dcc4:	f1b9 0f00 	cmp.w	r9, #0
 800dcc8:	d005      	beq.n	800dcd6 <_dtoa_r+0x91e>
 800dcca:	45b1      	cmp	r9, r6
 800dccc:	d003      	beq.n	800dcd6 <_dtoa_r+0x91e>
 800dcce:	4649      	mov	r1, r9
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f000 feb4 	bl	800ea3e <_Bfree>
 800dcd6:	4631      	mov	r1, r6
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f000 feb0 	bl	800ea3e <_Bfree>
 800dcde:	e6a8      	b.n	800da32 <_dtoa_r+0x67a>
 800dce0:	2700      	movs	r7, #0
 800dce2:	463e      	mov	r6, r7
 800dce4:	e7e1      	b.n	800dcaa <_dtoa_r+0x8f2>
 800dce6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dcea:	463e      	mov	r6, r7
 800dcec:	e5a9      	b.n	800d842 <_dtoa_r+0x48a>
 800dcee:	bf00      	nop
 800dcf0:	40240000 	.word	0x40240000
 800dcf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcf6:	f8cd 9008 	str.w	r9, [sp, #8]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f000 80fa 	beq.w	800def4 <_dtoa_r+0xb3c>
 800dd00:	2d00      	cmp	r5, #0
 800dd02:	dd05      	ble.n	800dd10 <_dtoa_r+0x958>
 800dd04:	4631      	mov	r1, r6
 800dd06:	462a      	mov	r2, r5
 800dd08:	4620      	mov	r0, r4
 800dd0a:	f001 f863 	bl	800edd4 <__lshift>
 800dd0e:	4606      	mov	r6, r0
 800dd10:	9b07      	ldr	r3, [sp, #28]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d04c      	beq.n	800ddb0 <_dtoa_r+0x9f8>
 800dd16:	6871      	ldr	r1, [r6, #4]
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 fe5c 	bl	800e9d6 <_Balloc>
 800dd1e:	6932      	ldr	r2, [r6, #16]
 800dd20:	3202      	adds	r2, #2
 800dd22:	4605      	mov	r5, r0
 800dd24:	0092      	lsls	r2, r2, #2
 800dd26:	f106 010c 	add.w	r1, r6, #12
 800dd2a:	300c      	adds	r0, #12
 800dd2c:	f000 fe46 	bl	800e9bc <memcpy>
 800dd30:	2201      	movs	r2, #1
 800dd32:	4629      	mov	r1, r5
 800dd34:	4620      	mov	r0, r4
 800dd36:	f001 f84d 	bl	800edd4 <__lshift>
 800dd3a:	9b00      	ldr	r3, [sp, #0]
 800dd3c:	f8cd b014 	str.w	fp, [sp, #20]
 800dd40:	f003 0301 	and.w	r3, r3, #1
 800dd44:	46b1      	mov	r9, r6
 800dd46:	9307      	str	r3, [sp, #28]
 800dd48:	4606      	mov	r6, r0
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	9804      	ldr	r0, [sp, #16]
 800dd4e:	f7ff faa7 	bl	800d2a0 <quorem>
 800dd52:	4649      	mov	r1, r9
 800dd54:	4605      	mov	r5, r0
 800dd56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dd5a:	9804      	ldr	r0, [sp, #16]
 800dd5c:	f001 f88e 	bl	800ee7c <__mcmp>
 800dd60:	4632      	mov	r2, r6
 800dd62:	9000      	str	r0, [sp, #0]
 800dd64:	4639      	mov	r1, r7
 800dd66:	4620      	mov	r0, r4
 800dd68:	f001 f8a2 	bl	800eeb0 <__mdiff>
 800dd6c:	68c3      	ldr	r3, [r0, #12]
 800dd6e:	4602      	mov	r2, r0
 800dd70:	bb03      	cbnz	r3, 800ddb4 <_dtoa_r+0x9fc>
 800dd72:	4601      	mov	r1, r0
 800dd74:	9008      	str	r0, [sp, #32]
 800dd76:	9804      	ldr	r0, [sp, #16]
 800dd78:	f001 f880 	bl	800ee7c <__mcmp>
 800dd7c:	9a08      	ldr	r2, [sp, #32]
 800dd7e:	4603      	mov	r3, r0
 800dd80:	4611      	mov	r1, r2
 800dd82:	4620      	mov	r0, r4
 800dd84:	9308      	str	r3, [sp, #32]
 800dd86:	f000 fe5a 	bl	800ea3e <_Bfree>
 800dd8a:	9b08      	ldr	r3, [sp, #32]
 800dd8c:	b9a3      	cbnz	r3, 800ddb8 <_dtoa_r+0xa00>
 800dd8e:	9a06      	ldr	r2, [sp, #24]
 800dd90:	b992      	cbnz	r2, 800ddb8 <_dtoa_r+0xa00>
 800dd92:	9a07      	ldr	r2, [sp, #28]
 800dd94:	b982      	cbnz	r2, 800ddb8 <_dtoa_r+0xa00>
 800dd96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dd9a:	d029      	beq.n	800ddf0 <_dtoa_r+0xa38>
 800dd9c:	9b00      	ldr	r3, [sp, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	dd01      	ble.n	800dda6 <_dtoa_r+0x9ee>
 800dda2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800dda6:	9b05      	ldr	r3, [sp, #20]
 800dda8:	1c5d      	adds	r5, r3, #1
 800ddaa:	f883 8000 	strb.w	r8, [r3]
 800ddae:	e782      	b.n	800dcb6 <_dtoa_r+0x8fe>
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	e7c2      	b.n	800dd3a <_dtoa_r+0x982>
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	e7e3      	b.n	800dd80 <_dtoa_r+0x9c8>
 800ddb8:	9a00      	ldr	r2, [sp, #0]
 800ddba:	2a00      	cmp	r2, #0
 800ddbc:	db04      	blt.n	800ddc8 <_dtoa_r+0xa10>
 800ddbe:	d125      	bne.n	800de0c <_dtoa_r+0xa54>
 800ddc0:	9a06      	ldr	r2, [sp, #24]
 800ddc2:	bb1a      	cbnz	r2, 800de0c <_dtoa_r+0xa54>
 800ddc4:	9a07      	ldr	r2, [sp, #28]
 800ddc6:	bb0a      	cbnz	r2, 800de0c <_dtoa_r+0xa54>
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	ddec      	ble.n	800dda6 <_dtoa_r+0x9ee>
 800ddcc:	2201      	movs	r2, #1
 800ddce:	9904      	ldr	r1, [sp, #16]
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f000 ffff 	bl	800edd4 <__lshift>
 800ddd6:	4639      	mov	r1, r7
 800ddd8:	9004      	str	r0, [sp, #16]
 800ddda:	f001 f84f 	bl	800ee7c <__mcmp>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	dc03      	bgt.n	800ddea <_dtoa_r+0xa32>
 800dde2:	d1e0      	bne.n	800dda6 <_dtoa_r+0x9ee>
 800dde4:	f018 0f01 	tst.w	r8, #1
 800dde8:	d0dd      	beq.n	800dda6 <_dtoa_r+0x9ee>
 800ddea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ddee:	d1d8      	bne.n	800dda2 <_dtoa_r+0x9ea>
 800ddf0:	9b05      	ldr	r3, [sp, #20]
 800ddf2:	9a05      	ldr	r2, [sp, #20]
 800ddf4:	1c5d      	adds	r5, r3, #1
 800ddf6:	2339      	movs	r3, #57	; 0x39
 800ddf8:	7013      	strb	r3, [r2, #0]
 800ddfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ddfe:	2b39      	cmp	r3, #57	; 0x39
 800de00:	f105 32ff 	add.w	r2, r5, #4294967295
 800de04:	d04f      	beq.n	800dea6 <_dtoa_r+0xaee>
 800de06:	3301      	adds	r3, #1
 800de08:	7013      	strb	r3, [r2, #0]
 800de0a:	e754      	b.n	800dcb6 <_dtoa_r+0x8fe>
 800de0c:	9a05      	ldr	r2, [sp, #20]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f102 0501 	add.w	r5, r2, #1
 800de14:	dd06      	ble.n	800de24 <_dtoa_r+0xa6c>
 800de16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800de1a:	d0e9      	beq.n	800ddf0 <_dtoa_r+0xa38>
 800de1c:	f108 0801 	add.w	r8, r8, #1
 800de20:	9b05      	ldr	r3, [sp, #20]
 800de22:	e7c2      	b.n	800ddaa <_dtoa_r+0x9f2>
 800de24:	9a02      	ldr	r2, [sp, #8]
 800de26:	f805 8c01 	strb.w	r8, [r5, #-1]
 800de2a:	eba5 030b 	sub.w	r3, r5, fp
 800de2e:	4293      	cmp	r3, r2
 800de30:	d021      	beq.n	800de76 <_dtoa_r+0xabe>
 800de32:	2300      	movs	r3, #0
 800de34:	220a      	movs	r2, #10
 800de36:	9904      	ldr	r1, [sp, #16]
 800de38:	4620      	mov	r0, r4
 800de3a:	f000 fe17 	bl	800ea6c <__multadd>
 800de3e:	45b1      	cmp	r9, r6
 800de40:	9004      	str	r0, [sp, #16]
 800de42:	f04f 0300 	mov.w	r3, #0
 800de46:	f04f 020a 	mov.w	r2, #10
 800de4a:	4649      	mov	r1, r9
 800de4c:	4620      	mov	r0, r4
 800de4e:	d105      	bne.n	800de5c <_dtoa_r+0xaa4>
 800de50:	f000 fe0c 	bl	800ea6c <__multadd>
 800de54:	4681      	mov	r9, r0
 800de56:	4606      	mov	r6, r0
 800de58:	9505      	str	r5, [sp, #20]
 800de5a:	e776      	b.n	800dd4a <_dtoa_r+0x992>
 800de5c:	f000 fe06 	bl	800ea6c <__multadd>
 800de60:	4631      	mov	r1, r6
 800de62:	4681      	mov	r9, r0
 800de64:	2300      	movs	r3, #0
 800de66:	220a      	movs	r2, #10
 800de68:	4620      	mov	r0, r4
 800de6a:	f000 fdff 	bl	800ea6c <__multadd>
 800de6e:	4606      	mov	r6, r0
 800de70:	e7f2      	b.n	800de58 <_dtoa_r+0xaa0>
 800de72:	f04f 0900 	mov.w	r9, #0
 800de76:	2201      	movs	r2, #1
 800de78:	9904      	ldr	r1, [sp, #16]
 800de7a:	4620      	mov	r0, r4
 800de7c:	f000 ffaa 	bl	800edd4 <__lshift>
 800de80:	4639      	mov	r1, r7
 800de82:	9004      	str	r0, [sp, #16]
 800de84:	f000 fffa 	bl	800ee7c <__mcmp>
 800de88:	2800      	cmp	r0, #0
 800de8a:	dcb6      	bgt.n	800ddfa <_dtoa_r+0xa42>
 800de8c:	d102      	bne.n	800de94 <_dtoa_r+0xadc>
 800de8e:	f018 0f01 	tst.w	r8, #1
 800de92:	d1b2      	bne.n	800ddfa <_dtoa_r+0xa42>
 800de94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de98:	2b30      	cmp	r3, #48	; 0x30
 800de9a:	f105 32ff 	add.w	r2, r5, #4294967295
 800de9e:	f47f af0a 	bne.w	800dcb6 <_dtoa_r+0x8fe>
 800dea2:	4615      	mov	r5, r2
 800dea4:	e7f6      	b.n	800de94 <_dtoa_r+0xadc>
 800dea6:	4593      	cmp	fp, r2
 800dea8:	d105      	bne.n	800deb6 <_dtoa_r+0xafe>
 800deaa:	2331      	movs	r3, #49	; 0x31
 800deac:	f10a 0a01 	add.w	sl, sl, #1
 800deb0:	f88b 3000 	strb.w	r3, [fp]
 800deb4:	e6ff      	b.n	800dcb6 <_dtoa_r+0x8fe>
 800deb6:	4615      	mov	r5, r2
 800deb8:	e79f      	b.n	800ddfa <_dtoa_r+0xa42>
 800deba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800df20 <_dtoa_r+0xb68>
 800debe:	e007      	b.n	800ded0 <_dtoa_r+0xb18>
 800dec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dec2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800df24 <_dtoa_r+0xb6c>
 800dec6:	b11b      	cbz	r3, 800ded0 <_dtoa_r+0xb18>
 800dec8:	f10b 0308 	add.w	r3, fp, #8
 800decc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dece:	6013      	str	r3, [r2, #0]
 800ded0:	4658      	mov	r0, fp
 800ded2:	b017      	add	sp, #92	; 0x5c
 800ded4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded8:	9b06      	ldr	r3, [sp, #24]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	f77f ae35 	ble.w	800db4a <_dtoa_r+0x792>
 800dee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dee2:	9307      	str	r3, [sp, #28]
 800dee4:	e649      	b.n	800db7a <_dtoa_r+0x7c2>
 800dee6:	9b02      	ldr	r3, [sp, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	dc03      	bgt.n	800def4 <_dtoa_r+0xb3c>
 800deec:	9b06      	ldr	r3, [sp, #24]
 800deee:	2b02      	cmp	r3, #2
 800def0:	f73f aecc 	bgt.w	800dc8c <_dtoa_r+0x8d4>
 800def4:	465d      	mov	r5, fp
 800def6:	4639      	mov	r1, r7
 800def8:	9804      	ldr	r0, [sp, #16]
 800defa:	f7ff f9d1 	bl	800d2a0 <quorem>
 800defe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800df02:	f805 8b01 	strb.w	r8, [r5], #1
 800df06:	9a02      	ldr	r2, [sp, #8]
 800df08:	eba5 030b 	sub.w	r3, r5, fp
 800df0c:	429a      	cmp	r2, r3
 800df0e:	ddb0      	ble.n	800de72 <_dtoa_r+0xaba>
 800df10:	2300      	movs	r3, #0
 800df12:	220a      	movs	r2, #10
 800df14:	9904      	ldr	r1, [sp, #16]
 800df16:	4620      	mov	r0, r4
 800df18:	f000 fda8 	bl	800ea6c <__multadd>
 800df1c:	9004      	str	r0, [sp, #16]
 800df1e:	e7ea      	b.n	800def6 <_dtoa_r+0xb3e>
 800df20:	08012fe3 	.word	0x08012fe3
 800df24:	08012e40 	.word	0x08012e40

0800df28 <__sflush_r>:
 800df28:	898a      	ldrh	r2, [r1, #12]
 800df2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df2e:	4605      	mov	r5, r0
 800df30:	0710      	lsls	r0, r2, #28
 800df32:	460c      	mov	r4, r1
 800df34:	d458      	bmi.n	800dfe8 <__sflush_r+0xc0>
 800df36:	684b      	ldr	r3, [r1, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	dc05      	bgt.n	800df48 <__sflush_r+0x20>
 800df3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df3e:	2b00      	cmp	r3, #0
 800df40:	dc02      	bgt.n	800df48 <__sflush_r+0x20>
 800df42:	2000      	movs	r0, #0
 800df44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df4a:	2e00      	cmp	r6, #0
 800df4c:	d0f9      	beq.n	800df42 <__sflush_r+0x1a>
 800df4e:	2300      	movs	r3, #0
 800df50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df54:	682f      	ldr	r7, [r5, #0]
 800df56:	6a21      	ldr	r1, [r4, #32]
 800df58:	602b      	str	r3, [r5, #0]
 800df5a:	d032      	beq.n	800dfc2 <__sflush_r+0x9a>
 800df5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df5e:	89a3      	ldrh	r3, [r4, #12]
 800df60:	075a      	lsls	r2, r3, #29
 800df62:	d505      	bpl.n	800df70 <__sflush_r+0x48>
 800df64:	6863      	ldr	r3, [r4, #4]
 800df66:	1ac0      	subs	r0, r0, r3
 800df68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df6a:	b10b      	cbz	r3, 800df70 <__sflush_r+0x48>
 800df6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df6e:	1ac0      	subs	r0, r0, r3
 800df70:	2300      	movs	r3, #0
 800df72:	4602      	mov	r2, r0
 800df74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df76:	6a21      	ldr	r1, [r4, #32]
 800df78:	4628      	mov	r0, r5
 800df7a:	47b0      	blx	r6
 800df7c:	1c43      	adds	r3, r0, #1
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	d106      	bne.n	800df90 <__sflush_r+0x68>
 800df82:	6829      	ldr	r1, [r5, #0]
 800df84:	291d      	cmp	r1, #29
 800df86:	d848      	bhi.n	800e01a <__sflush_r+0xf2>
 800df88:	4a29      	ldr	r2, [pc, #164]	; (800e030 <__sflush_r+0x108>)
 800df8a:	40ca      	lsrs	r2, r1
 800df8c:	07d6      	lsls	r6, r2, #31
 800df8e:	d544      	bpl.n	800e01a <__sflush_r+0xf2>
 800df90:	2200      	movs	r2, #0
 800df92:	6062      	str	r2, [r4, #4]
 800df94:	04d9      	lsls	r1, r3, #19
 800df96:	6922      	ldr	r2, [r4, #16]
 800df98:	6022      	str	r2, [r4, #0]
 800df9a:	d504      	bpl.n	800dfa6 <__sflush_r+0x7e>
 800df9c:	1c42      	adds	r2, r0, #1
 800df9e:	d101      	bne.n	800dfa4 <__sflush_r+0x7c>
 800dfa0:	682b      	ldr	r3, [r5, #0]
 800dfa2:	b903      	cbnz	r3, 800dfa6 <__sflush_r+0x7e>
 800dfa4:	6560      	str	r0, [r4, #84]	; 0x54
 800dfa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfa8:	602f      	str	r7, [r5, #0]
 800dfaa:	2900      	cmp	r1, #0
 800dfac:	d0c9      	beq.n	800df42 <__sflush_r+0x1a>
 800dfae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfb2:	4299      	cmp	r1, r3
 800dfb4:	d002      	beq.n	800dfbc <__sflush_r+0x94>
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	f7fd f9c4 	bl	800b344 <_free_r>
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	6360      	str	r0, [r4, #52]	; 0x34
 800dfc0:	e7c0      	b.n	800df44 <__sflush_r+0x1c>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	47b0      	blx	r6
 800dfc8:	1c41      	adds	r1, r0, #1
 800dfca:	d1c8      	bne.n	800df5e <__sflush_r+0x36>
 800dfcc:	682b      	ldr	r3, [r5, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d0c5      	beq.n	800df5e <__sflush_r+0x36>
 800dfd2:	2b1d      	cmp	r3, #29
 800dfd4:	d001      	beq.n	800dfda <__sflush_r+0xb2>
 800dfd6:	2b16      	cmp	r3, #22
 800dfd8:	d101      	bne.n	800dfde <__sflush_r+0xb6>
 800dfda:	602f      	str	r7, [r5, #0]
 800dfdc:	e7b1      	b.n	800df42 <__sflush_r+0x1a>
 800dfde:	89a3      	ldrh	r3, [r4, #12]
 800dfe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfe4:	81a3      	strh	r3, [r4, #12]
 800dfe6:	e7ad      	b.n	800df44 <__sflush_r+0x1c>
 800dfe8:	690f      	ldr	r7, [r1, #16]
 800dfea:	2f00      	cmp	r7, #0
 800dfec:	d0a9      	beq.n	800df42 <__sflush_r+0x1a>
 800dfee:	0793      	lsls	r3, r2, #30
 800dff0:	680e      	ldr	r6, [r1, #0]
 800dff2:	bf08      	it	eq
 800dff4:	694b      	ldreq	r3, [r1, #20]
 800dff6:	600f      	str	r7, [r1, #0]
 800dff8:	bf18      	it	ne
 800dffa:	2300      	movne	r3, #0
 800dffc:	eba6 0807 	sub.w	r8, r6, r7
 800e000:	608b      	str	r3, [r1, #8]
 800e002:	f1b8 0f00 	cmp.w	r8, #0
 800e006:	dd9c      	ble.n	800df42 <__sflush_r+0x1a>
 800e008:	4643      	mov	r3, r8
 800e00a:	463a      	mov	r2, r7
 800e00c:	6a21      	ldr	r1, [r4, #32]
 800e00e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e010:	4628      	mov	r0, r5
 800e012:	47b0      	blx	r6
 800e014:	2800      	cmp	r0, #0
 800e016:	dc06      	bgt.n	800e026 <__sflush_r+0xfe>
 800e018:	89a3      	ldrh	r3, [r4, #12]
 800e01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e01e:	81a3      	strh	r3, [r4, #12]
 800e020:	f04f 30ff 	mov.w	r0, #4294967295
 800e024:	e78e      	b.n	800df44 <__sflush_r+0x1c>
 800e026:	4407      	add	r7, r0
 800e028:	eba8 0800 	sub.w	r8, r8, r0
 800e02c:	e7e9      	b.n	800e002 <__sflush_r+0xda>
 800e02e:	bf00      	nop
 800e030:	20400001 	.word	0x20400001

0800e034 <_fflush_r>:
 800e034:	b538      	push	{r3, r4, r5, lr}
 800e036:	690b      	ldr	r3, [r1, #16]
 800e038:	4605      	mov	r5, r0
 800e03a:	460c      	mov	r4, r1
 800e03c:	b1db      	cbz	r3, 800e076 <_fflush_r+0x42>
 800e03e:	b118      	cbz	r0, 800e048 <_fflush_r+0x14>
 800e040:	6983      	ldr	r3, [r0, #24]
 800e042:	b90b      	cbnz	r3, 800e048 <_fflush_r+0x14>
 800e044:	f000 f860 	bl	800e108 <__sinit>
 800e048:	4b0c      	ldr	r3, [pc, #48]	; (800e07c <_fflush_r+0x48>)
 800e04a:	429c      	cmp	r4, r3
 800e04c:	d109      	bne.n	800e062 <_fflush_r+0x2e>
 800e04e:	686c      	ldr	r4, [r5, #4]
 800e050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e054:	b17b      	cbz	r3, 800e076 <_fflush_r+0x42>
 800e056:	4621      	mov	r1, r4
 800e058:	4628      	mov	r0, r5
 800e05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e05e:	f7ff bf63 	b.w	800df28 <__sflush_r>
 800e062:	4b07      	ldr	r3, [pc, #28]	; (800e080 <_fflush_r+0x4c>)
 800e064:	429c      	cmp	r4, r3
 800e066:	d101      	bne.n	800e06c <_fflush_r+0x38>
 800e068:	68ac      	ldr	r4, [r5, #8]
 800e06a:	e7f1      	b.n	800e050 <_fflush_r+0x1c>
 800e06c:	4b05      	ldr	r3, [pc, #20]	; (800e084 <_fflush_r+0x50>)
 800e06e:	429c      	cmp	r4, r3
 800e070:	bf08      	it	eq
 800e072:	68ec      	ldreq	r4, [r5, #12]
 800e074:	e7ec      	b.n	800e050 <_fflush_r+0x1c>
 800e076:	2000      	movs	r0, #0
 800e078:	bd38      	pop	{r3, r4, r5, pc}
 800e07a:	bf00      	nop
 800e07c:	08012e70 	.word	0x08012e70
 800e080:	08012e90 	.word	0x08012e90
 800e084:	08012e50 	.word	0x08012e50

0800e088 <std>:
 800e088:	2300      	movs	r3, #0
 800e08a:	b510      	push	{r4, lr}
 800e08c:	4604      	mov	r4, r0
 800e08e:	e9c0 3300 	strd	r3, r3, [r0]
 800e092:	6083      	str	r3, [r0, #8]
 800e094:	8181      	strh	r1, [r0, #12]
 800e096:	6643      	str	r3, [r0, #100]	; 0x64
 800e098:	81c2      	strh	r2, [r0, #14]
 800e09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e09e:	6183      	str	r3, [r0, #24]
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	2208      	movs	r2, #8
 800e0a4:	305c      	adds	r0, #92	; 0x5c
 800e0a6:	f7fd f945 	bl	800b334 <memset>
 800e0aa:	4b05      	ldr	r3, [pc, #20]	; (800e0c0 <std+0x38>)
 800e0ac:	6263      	str	r3, [r4, #36]	; 0x24
 800e0ae:	4b05      	ldr	r3, [pc, #20]	; (800e0c4 <std+0x3c>)
 800e0b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e0b2:	4b05      	ldr	r3, [pc, #20]	; (800e0c8 <std+0x40>)
 800e0b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0b6:	4b05      	ldr	r3, [pc, #20]	; (800e0cc <std+0x44>)
 800e0b8:	6224      	str	r4, [r4, #32]
 800e0ba:	6323      	str	r3, [r4, #48]	; 0x30
 800e0bc:	bd10      	pop	{r4, pc}
 800e0be:	bf00      	nop
 800e0c0:	0800c2c9 	.word	0x0800c2c9
 800e0c4:	0800c2ef 	.word	0x0800c2ef
 800e0c8:	0800c327 	.word	0x0800c327
 800e0cc:	0800c34b 	.word	0x0800c34b

0800e0d0 <_cleanup_r>:
 800e0d0:	4901      	ldr	r1, [pc, #4]	; (800e0d8 <_cleanup_r+0x8>)
 800e0d2:	f000 b885 	b.w	800e1e0 <_fwalk_reent>
 800e0d6:	bf00      	nop
 800e0d8:	0800e035 	.word	0x0800e035

0800e0dc <__sfmoreglue>:
 800e0dc:	b570      	push	{r4, r5, r6, lr}
 800e0de:	1e4a      	subs	r2, r1, #1
 800e0e0:	2568      	movs	r5, #104	; 0x68
 800e0e2:	4355      	muls	r5, r2
 800e0e4:	460e      	mov	r6, r1
 800e0e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e0ea:	f7fd f979 	bl	800b3e0 <_malloc_r>
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	b140      	cbz	r0, 800e104 <__sfmoreglue+0x28>
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	e9c0 1600 	strd	r1, r6, [r0]
 800e0f8:	300c      	adds	r0, #12
 800e0fa:	60a0      	str	r0, [r4, #8]
 800e0fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e100:	f7fd f918 	bl	800b334 <memset>
 800e104:	4620      	mov	r0, r4
 800e106:	bd70      	pop	{r4, r5, r6, pc}

0800e108 <__sinit>:
 800e108:	6983      	ldr	r3, [r0, #24]
 800e10a:	b510      	push	{r4, lr}
 800e10c:	4604      	mov	r4, r0
 800e10e:	bb33      	cbnz	r3, 800e15e <__sinit+0x56>
 800e110:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e114:	6503      	str	r3, [r0, #80]	; 0x50
 800e116:	4b12      	ldr	r3, [pc, #72]	; (800e160 <__sinit+0x58>)
 800e118:	4a12      	ldr	r2, [pc, #72]	; (800e164 <__sinit+0x5c>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	6282      	str	r2, [r0, #40]	; 0x28
 800e11e:	4298      	cmp	r0, r3
 800e120:	bf04      	itt	eq
 800e122:	2301      	moveq	r3, #1
 800e124:	6183      	streq	r3, [r0, #24]
 800e126:	f000 f81f 	bl	800e168 <__sfp>
 800e12a:	6060      	str	r0, [r4, #4]
 800e12c:	4620      	mov	r0, r4
 800e12e:	f000 f81b 	bl	800e168 <__sfp>
 800e132:	60a0      	str	r0, [r4, #8]
 800e134:	4620      	mov	r0, r4
 800e136:	f000 f817 	bl	800e168 <__sfp>
 800e13a:	2200      	movs	r2, #0
 800e13c:	60e0      	str	r0, [r4, #12]
 800e13e:	2104      	movs	r1, #4
 800e140:	6860      	ldr	r0, [r4, #4]
 800e142:	f7ff ffa1 	bl	800e088 <std>
 800e146:	2201      	movs	r2, #1
 800e148:	2109      	movs	r1, #9
 800e14a:	68a0      	ldr	r0, [r4, #8]
 800e14c:	f7ff ff9c 	bl	800e088 <std>
 800e150:	2202      	movs	r2, #2
 800e152:	2112      	movs	r1, #18
 800e154:	68e0      	ldr	r0, [r4, #12]
 800e156:	f7ff ff97 	bl	800e088 <std>
 800e15a:	2301      	movs	r3, #1
 800e15c:	61a3      	str	r3, [r4, #24]
 800e15e:	bd10      	pop	{r4, pc}
 800e160:	08012db4 	.word	0x08012db4
 800e164:	0800e0d1 	.word	0x0800e0d1

0800e168 <__sfp>:
 800e168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16a:	4b1b      	ldr	r3, [pc, #108]	; (800e1d8 <__sfp+0x70>)
 800e16c:	681e      	ldr	r6, [r3, #0]
 800e16e:	69b3      	ldr	r3, [r6, #24]
 800e170:	4607      	mov	r7, r0
 800e172:	b913      	cbnz	r3, 800e17a <__sfp+0x12>
 800e174:	4630      	mov	r0, r6
 800e176:	f7ff ffc7 	bl	800e108 <__sinit>
 800e17a:	3648      	adds	r6, #72	; 0x48
 800e17c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e180:	3b01      	subs	r3, #1
 800e182:	d503      	bpl.n	800e18c <__sfp+0x24>
 800e184:	6833      	ldr	r3, [r6, #0]
 800e186:	b133      	cbz	r3, 800e196 <__sfp+0x2e>
 800e188:	6836      	ldr	r6, [r6, #0]
 800e18a:	e7f7      	b.n	800e17c <__sfp+0x14>
 800e18c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e190:	b16d      	cbz	r5, 800e1ae <__sfp+0x46>
 800e192:	3468      	adds	r4, #104	; 0x68
 800e194:	e7f4      	b.n	800e180 <__sfp+0x18>
 800e196:	2104      	movs	r1, #4
 800e198:	4638      	mov	r0, r7
 800e19a:	f7ff ff9f 	bl	800e0dc <__sfmoreglue>
 800e19e:	6030      	str	r0, [r6, #0]
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d1f1      	bne.n	800e188 <__sfp+0x20>
 800e1a4:	230c      	movs	r3, #12
 800e1a6:	603b      	str	r3, [r7, #0]
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ae:	4b0b      	ldr	r3, [pc, #44]	; (800e1dc <__sfp+0x74>)
 800e1b0:	6665      	str	r5, [r4, #100]	; 0x64
 800e1b2:	e9c4 5500 	strd	r5, r5, [r4]
 800e1b6:	60a5      	str	r5, [r4, #8]
 800e1b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e1bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e1c0:	2208      	movs	r2, #8
 800e1c2:	4629      	mov	r1, r5
 800e1c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e1c8:	f7fd f8b4 	bl	800b334 <memset>
 800e1cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e1d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e1d4:	e7e9      	b.n	800e1aa <__sfp+0x42>
 800e1d6:	bf00      	nop
 800e1d8:	08012db4 	.word	0x08012db4
 800e1dc:	ffff0001 	.word	0xffff0001

0800e1e0 <_fwalk_reent>:
 800e1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	4680      	mov	r8, r0
 800e1e6:	4689      	mov	r9, r1
 800e1e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1ec:	2600      	movs	r6, #0
 800e1ee:	b914      	cbnz	r4, 800e1f6 <_fwalk_reent+0x16>
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e1fa:	3f01      	subs	r7, #1
 800e1fc:	d501      	bpl.n	800e202 <_fwalk_reent+0x22>
 800e1fe:	6824      	ldr	r4, [r4, #0]
 800e200:	e7f5      	b.n	800e1ee <_fwalk_reent+0xe>
 800e202:	89ab      	ldrh	r3, [r5, #12]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d907      	bls.n	800e218 <_fwalk_reent+0x38>
 800e208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e20c:	3301      	adds	r3, #1
 800e20e:	d003      	beq.n	800e218 <_fwalk_reent+0x38>
 800e210:	4629      	mov	r1, r5
 800e212:	4640      	mov	r0, r8
 800e214:	47c8      	blx	r9
 800e216:	4306      	orrs	r6, r0
 800e218:	3568      	adds	r5, #104	; 0x68
 800e21a:	e7ee      	b.n	800e1fa <_fwalk_reent+0x1a>

0800e21c <rshift>:
 800e21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e21e:	6906      	ldr	r6, [r0, #16]
 800e220:	114b      	asrs	r3, r1, #5
 800e222:	429e      	cmp	r6, r3
 800e224:	f100 0414 	add.w	r4, r0, #20
 800e228:	dd30      	ble.n	800e28c <rshift+0x70>
 800e22a:	f011 011f 	ands.w	r1, r1, #31
 800e22e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e232:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e236:	d108      	bne.n	800e24a <rshift+0x2e>
 800e238:	4621      	mov	r1, r4
 800e23a:	42b2      	cmp	r2, r6
 800e23c:	460b      	mov	r3, r1
 800e23e:	d211      	bcs.n	800e264 <rshift+0x48>
 800e240:	f852 3b04 	ldr.w	r3, [r2], #4
 800e244:	f841 3b04 	str.w	r3, [r1], #4
 800e248:	e7f7      	b.n	800e23a <rshift+0x1e>
 800e24a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e24e:	f1c1 0c20 	rsb	ip, r1, #32
 800e252:	40cd      	lsrs	r5, r1
 800e254:	3204      	adds	r2, #4
 800e256:	4623      	mov	r3, r4
 800e258:	42b2      	cmp	r2, r6
 800e25a:	4617      	mov	r7, r2
 800e25c:	d30c      	bcc.n	800e278 <rshift+0x5c>
 800e25e:	601d      	str	r5, [r3, #0]
 800e260:	b105      	cbz	r5, 800e264 <rshift+0x48>
 800e262:	3304      	adds	r3, #4
 800e264:	1b1a      	subs	r2, r3, r4
 800e266:	42a3      	cmp	r3, r4
 800e268:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e26c:	bf08      	it	eq
 800e26e:	2300      	moveq	r3, #0
 800e270:	6102      	str	r2, [r0, #16]
 800e272:	bf08      	it	eq
 800e274:	6143      	streq	r3, [r0, #20]
 800e276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e278:	683f      	ldr	r7, [r7, #0]
 800e27a:	fa07 f70c 	lsl.w	r7, r7, ip
 800e27e:	433d      	orrs	r5, r7
 800e280:	f843 5b04 	str.w	r5, [r3], #4
 800e284:	f852 5b04 	ldr.w	r5, [r2], #4
 800e288:	40cd      	lsrs	r5, r1
 800e28a:	e7e5      	b.n	800e258 <rshift+0x3c>
 800e28c:	4623      	mov	r3, r4
 800e28e:	e7e9      	b.n	800e264 <rshift+0x48>

0800e290 <__hexdig_fun>:
 800e290:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e294:	2b09      	cmp	r3, #9
 800e296:	d802      	bhi.n	800e29e <__hexdig_fun+0xe>
 800e298:	3820      	subs	r0, #32
 800e29a:	b2c0      	uxtb	r0, r0
 800e29c:	4770      	bx	lr
 800e29e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e2a2:	2b05      	cmp	r3, #5
 800e2a4:	d801      	bhi.n	800e2aa <__hexdig_fun+0x1a>
 800e2a6:	3847      	subs	r0, #71	; 0x47
 800e2a8:	e7f7      	b.n	800e29a <__hexdig_fun+0xa>
 800e2aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e2ae:	2b05      	cmp	r3, #5
 800e2b0:	d801      	bhi.n	800e2b6 <__hexdig_fun+0x26>
 800e2b2:	3827      	subs	r0, #39	; 0x27
 800e2b4:	e7f1      	b.n	800e29a <__hexdig_fun+0xa>
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	4770      	bx	lr

0800e2ba <__gethex>:
 800e2ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2be:	b08b      	sub	sp, #44	; 0x2c
 800e2c0:	468a      	mov	sl, r1
 800e2c2:	9002      	str	r0, [sp, #8]
 800e2c4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e2c6:	9306      	str	r3, [sp, #24]
 800e2c8:	4690      	mov	r8, r2
 800e2ca:	f000 fadf 	bl	800e88c <__localeconv_l>
 800e2ce:	6803      	ldr	r3, [r0, #0]
 800e2d0:	9303      	str	r3, [sp, #12]
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7f1 ff84 	bl	80001e0 <strlen>
 800e2d8:	9b03      	ldr	r3, [sp, #12]
 800e2da:	9001      	str	r0, [sp, #4]
 800e2dc:	4403      	add	r3, r0
 800e2de:	f04f 0b00 	mov.w	fp, #0
 800e2e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e2e6:	9307      	str	r3, [sp, #28]
 800e2e8:	f8da 3000 	ldr.w	r3, [sl]
 800e2ec:	3302      	adds	r3, #2
 800e2ee:	461f      	mov	r7, r3
 800e2f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e2f4:	2830      	cmp	r0, #48	; 0x30
 800e2f6:	d06c      	beq.n	800e3d2 <__gethex+0x118>
 800e2f8:	f7ff ffca 	bl	800e290 <__hexdig_fun>
 800e2fc:	4604      	mov	r4, r0
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d16a      	bne.n	800e3d8 <__gethex+0x11e>
 800e302:	9a01      	ldr	r2, [sp, #4]
 800e304:	9903      	ldr	r1, [sp, #12]
 800e306:	4638      	mov	r0, r7
 800e308:	f001 fd4a 	bl	800fda0 <strncmp>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d166      	bne.n	800e3de <__gethex+0x124>
 800e310:	9b01      	ldr	r3, [sp, #4]
 800e312:	5cf8      	ldrb	r0, [r7, r3]
 800e314:	18fe      	adds	r6, r7, r3
 800e316:	f7ff ffbb 	bl	800e290 <__hexdig_fun>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d062      	beq.n	800e3e4 <__gethex+0x12a>
 800e31e:	4633      	mov	r3, r6
 800e320:	7818      	ldrb	r0, [r3, #0]
 800e322:	2830      	cmp	r0, #48	; 0x30
 800e324:	461f      	mov	r7, r3
 800e326:	f103 0301 	add.w	r3, r3, #1
 800e32a:	d0f9      	beq.n	800e320 <__gethex+0x66>
 800e32c:	f7ff ffb0 	bl	800e290 <__hexdig_fun>
 800e330:	fab0 f580 	clz	r5, r0
 800e334:	096d      	lsrs	r5, r5, #5
 800e336:	4634      	mov	r4, r6
 800e338:	f04f 0b01 	mov.w	fp, #1
 800e33c:	463a      	mov	r2, r7
 800e33e:	4616      	mov	r6, r2
 800e340:	3201      	adds	r2, #1
 800e342:	7830      	ldrb	r0, [r6, #0]
 800e344:	f7ff ffa4 	bl	800e290 <__hexdig_fun>
 800e348:	2800      	cmp	r0, #0
 800e34a:	d1f8      	bne.n	800e33e <__gethex+0x84>
 800e34c:	9a01      	ldr	r2, [sp, #4]
 800e34e:	9903      	ldr	r1, [sp, #12]
 800e350:	4630      	mov	r0, r6
 800e352:	f001 fd25 	bl	800fda0 <strncmp>
 800e356:	b950      	cbnz	r0, 800e36e <__gethex+0xb4>
 800e358:	b954      	cbnz	r4, 800e370 <__gethex+0xb6>
 800e35a:	9b01      	ldr	r3, [sp, #4]
 800e35c:	18f4      	adds	r4, r6, r3
 800e35e:	4622      	mov	r2, r4
 800e360:	4616      	mov	r6, r2
 800e362:	3201      	adds	r2, #1
 800e364:	7830      	ldrb	r0, [r6, #0]
 800e366:	f7ff ff93 	bl	800e290 <__hexdig_fun>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d1f8      	bne.n	800e360 <__gethex+0xa6>
 800e36e:	b10c      	cbz	r4, 800e374 <__gethex+0xba>
 800e370:	1ba4      	subs	r4, r4, r6
 800e372:	00a4      	lsls	r4, r4, #2
 800e374:	7833      	ldrb	r3, [r6, #0]
 800e376:	2b50      	cmp	r3, #80	; 0x50
 800e378:	d001      	beq.n	800e37e <__gethex+0xc4>
 800e37a:	2b70      	cmp	r3, #112	; 0x70
 800e37c:	d140      	bne.n	800e400 <__gethex+0x146>
 800e37e:	7873      	ldrb	r3, [r6, #1]
 800e380:	2b2b      	cmp	r3, #43	; 0x2b
 800e382:	d031      	beq.n	800e3e8 <__gethex+0x12e>
 800e384:	2b2d      	cmp	r3, #45	; 0x2d
 800e386:	d033      	beq.n	800e3f0 <__gethex+0x136>
 800e388:	1c71      	adds	r1, r6, #1
 800e38a:	f04f 0900 	mov.w	r9, #0
 800e38e:	7808      	ldrb	r0, [r1, #0]
 800e390:	f7ff ff7e 	bl	800e290 <__hexdig_fun>
 800e394:	1e43      	subs	r3, r0, #1
 800e396:	b2db      	uxtb	r3, r3
 800e398:	2b18      	cmp	r3, #24
 800e39a:	d831      	bhi.n	800e400 <__gethex+0x146>
 800e39c:	f1a0 0210 	sub.w	r2, r0, #16
 800e3a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e3a4:	f7ff ff74 	bl	800e290 <__hexdig_fun>
 800e3a8:	1e43      	subs	r3, r0, #1
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	2b18      	cmp	r3, #24
 800e3ae:	d922      	bls.n	800e3f6 <__gethex+0x13c>
 800e3b0:	f1b9 0f00 	cmp.w	r9, #0
 800e3b4:	d000      	beq.n	800e3b8 <__gethex+0xfe>
 800e3b6:	4252      	negs	r2, r2
 800e3b8:	4414      	add	r4, r2
 800e3ba:	f8ca 1000 	str.w	r1, [sl]
 800e3be:	b30d      	cbz	r5, 800e404 <__gethex+0x14a>
 800e3c0:	f1bb 0f00 	cmp.w	fp, #0
 800e3c4:	bf0c      	ite	eq
 800e3c6:	2706      	moveq	r7, #6
 800e3c8:	2700      	movne	r7, #0
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	b00b      	add	sp, #44	; 0x2c
 800e3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d2:	f10b 0b01 	add.w	fp, fp, #1
 800e3d6:	e78a      	b.n	800e2ee <__gethex+0x34>
 800e3d8:	2500      	movs	r5, #0
 800e3da:	462c      	mov	r4, r5
 800e3dc:	e7ae      	b.n	800e33c <__gethex+0x82>
 800e3de:	463e      	mov	r6, r7
 800e3e0:	2501      	movs	r5, #1
 800e3e2:	e7c7      	b.n	800e374 <__gethex+0xba>
 800e3e4:	4604      	mov	r4, r0
 800e3e6:	e7fb      	b.n	800e3e0 <__gethex+0x126>
 800e3e8:	f04f 0900 	mov.w	r9, #0
 800e3ec:	1cb1      	adds	r1, r6, #2
 800e3ee:	e7ce      	b.n	800e38e <__gethex+0xd4>
 800e3f0:	f04f 0901 	mov.w	r9, #1
 800e3f4:	e7fa      	b.n	800e3ec <__gethex+0x132>
 800e3f6:	230a      	movs	r3, #10
 800e3f8:	fb03 0202 	mla	r2, r3, r2, r0
 800e3fc:	3a10      	subs	r2, #16
 800e3fe:	e7cf      	b.n	800e3a0 <__gethex+0xe6>
 800e400:	4631      	mov	r1, r6
 800e402:	e7da      	b.n	800e3ba <__gethex+0x100>
 800e404:	1bf3      	subs	r3, r6, r7
 800e406:	3b01      	subs	r3, #1
 800e408:	4629      	mov	r1, r5
 800e40a:	2b07      	cmp	r3, #7
 800e40c:	dc49      	bgt.n	800e4a2 <__gethex+0x1e8>
 800e40e:	9802      	ldr	r0, [sp, #8]
 800e410:	f000 fae1 	bl	800e9d6 <_Balloc>
 800e414:	9b01      	ldr	r3, [sp, #4]
 800e416:	f100 0914 	add.w	r9, r0, #20
 800e41a:	f04f 0b00 	mov.w	fp, #0
 800e41e:	f1c3 0301 	rsb	r3, r3, #1
 800e422:	4605      	mov	r5, r0
 800e424:	f8cd 9010 	str.w	r9, [sp, #16]
 800e428:	46da      	mov	sl, fp
 800e42a:	9308      	str	r3, [sp, #32]
 800e42c:	42b7      	cmp	r7, r6
 800e42e:	d33b      	bcc.n	800e4a8 <__gethex+0x1ee>
 800e430:	9804      	ldr	r0, [sp, #16]
 800e432:	f840 ab04 	str.w	sl, [r0], #4
 800e436:	eba0 0009 	sub.w	r0, r0, r9
 800e43a:	1080      	asrs	r0, r0, #2
 800e43c:	6128      	str	r0, [r5, #16]
 800e43e:	0147      	lsls	r7, r0, #5
 800e440:	4650      	mov	r0, sl
 800e442:	f000 fb8c 	bl	800eb5e <__hi0bits>
 800e446:	f8d8 6000 	ldr.w	r6, [r8]
 800e44a:	1a3f      	subs	r7, r7, r0
 800e44c:	42b7      	cmp	r7, r6
 800e44e:	dd64      	ble.n	800e51a <__gethex+0x260>
 800e450:	1bbf      	subs	r7, r7, r6
 800e452:	4639      	mov	r1, r7
 800e454:	4628      	mov	r0, r5
 800e456:	f000 fe9b 	bl	800f190 <__any_on>
 800e45a:	4682      	mov	sl, r0
 800e45c:	b178      	cbz	r0, 800e47e <__gethex+0x1c4>
 800e45e:	1e7b      	subs	r3, r7, #1
 800e460:	1159      	asrs	r1, r3, #5
 800e462:	f003 021f 	and.w	r2, r3, #31
 800e466:	f04f 0a01 	mov.w	sl, #1
 800e46a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e46e:	fa0a f202 	lsl.w	r2, sl, r2
 800e472:	420a      	tst	r2, r1
 800e474:	d003      	beq.n	800e47e <__gethex+0x1c4>
 800e476:	4553      	cmp	r3, sl
 800e478:	dc46      	bgt.n	800e508 <__gethex+0x24e>
 800e47a:	f04f 0a02 	mov.w	sl, #2
 800e47e:	4639      	mov	r1, r7
 800e480:	4628      	mov	r0, r5
 800e482:	f7ff fecb 	bl	800e21c <rshift>
 800e486:	443c      	add	r4, r7
 800e488:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e48c:	42a3      	cmp	r3, r4
 800e48e:	da52      	bge.n	800e536 <__gethex+0x27c>
 800e490:	4629      	mov	r1, r5
 800e492:	9802      	ldr	r0, [sp, #8]
 800e494:	f000 fad3 	bl	800ea3e <_Bfree>
 800e498:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e49a:	2300      	movs	r3, #0
 800e49c:	6013      	str	r3, [r2, #0]
 800e49e:	27a3      	movs	r7, #163	; 0xa3
 800e4a0:	e793      	b.n	800e3ca <__gethex+0x110>
 800e4a2:	3101      	adds	r1, #1
 800e4a4:	105b      	asrs	r3, r3, #1
 800e4a6:	e7b0      	b.n	800e40a <__gethex+0x150>
 800e4a8:	1e73      	subs	r3, r6, #1
 800e4aa:	9305      	str	r3, [sp, #20]
 800e4ac:	9a07      	ldr	r2, [sp, #28]
 800e4ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d018      	beq.n	800e4e8 <__gethex+0x22e>
 800e4b6:	f1bb 0f20 	cmp.w	fp, #32
 800e4ba:	d107      	bne.n	800e4cc <__gethex+0x212>
 800e4bc:	9b04      	ldr	r3, [sp, #16]
 800e4be:	f8c3 a000 	str.w	sl, [r3]
 800e4c2:	3304      	adds	r3, #4
 800e4c4:	f04f 0a00 	mov.w	sl, #0
 800e4c8:	9304      	str	r3, [sp, #16]
 800e4ca:	46d3      	mov	fp, sl
 800e4cc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e4d0:	f7ff fede 	bl	800e290 <__hexdig_fun>
 800e4d4:	f000 000f 	and.w	r0, r0, #15
 800e4d8:	fa00 f00b 	lsl.w	r0, r0, fp
 800e4dc:	ea4a 0a00 	orr.w	sl, sl, r0
 800e4e0:	f10b 0b04 	add.w	fp, fp, #4
 800e4e4:	9b05      	ldr	r3, [sp, #20]
 800e4e6:	e00d      	b.n	800e504 <__gethex+0x24a>
 800e4e8:	9b05      	ldr	r3, [sp, #20]
 800e4ea:	9a08      	ldr	r2, [sp, #32]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	42bb      	cmp	r3, r7
 800e4f0:	d3e1      	bcc.n	800e4b6 <__gethex+0x1fc>
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	9a01      	ldr	r2, [sp, #4]
 800e4f6:	9903      	ldr	r1, [sp, #12]
 800e4f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e4fa:	f001 fc51 	bl	800fda0 <strncmp>
 800e4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e500:	2800      	cmp	r0, #0
 800e502:	d1d8      	bne.n	800e4b6 <__gethex+0x1fc>
 800e504:	461e      	mov	r6, r3
 800e506:	e791      	b.n	800e42c <__gethex+0x172>
 800e508:	1eb9      	subs	r1, r7, #2
 800e50a:	4628      	mov	r0, r5
 800e50c:	f000 fe40 	bl	800f190 <__any_on>
 800e510:	2800      	cmp	r0, #0
 800e512:	d0b2      	beq.n	800e47a <__gethex+0x1c0>
 800e514:	f04f 0a03 	mov.w	sl, #3
 800e518:	e7b1      	b.n	800e47e <__gethex+0x1c4>
 800e51a:	da09      	bge.n	800e530 <__gethex+0x276>
 800e51c:	1bf7      	subs	r7, r6, r7
 800e51e:	4629      	mov	r1, r5
 800e520:	463a      	mov	r2, r7
 800e522:	9802      	ldr	r0, [sp, #8]
 800e524:	f000 fc56 	bl	800edd4 <__lshift>
 800e528:	1be4      	subs	r4, r4, r7
 800e52a:	4605      	mov	r5, r0
 800e52c:	f100 0914 	add.w	r9, r0, #20
 800e530:	f04f 0a00 	mov.w	sl, #0
 800e534:	e7a8      	b.n	800e488 <__gethex+0x1ce>
 800e536:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e53a:	42a0      	cmp	r0, r4
 800e53c:	dd6a      	ble.n	800e614 <__gethex+0x35a>
 800e53e:	1b04      	subs	r4, r0, r4
 800e540:	42a6      	cmp	r6, r4
 800e542:	dc2e      	bgt.n	800e5a2 <__gethex+0x2e8>
 800e544:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d022      	beq.n	800e592 <__gethex+0x2d8>
 800e54c:	2b03      	cmp	r3, #3
 800e54e:	d024      	beq.n	800e59a <__gethex+0x2e0>
 800e550:	2b01      	cmp	r3, #1
 800e552:	d115      	bne.n	800e580 <__gethex+0x2c6>
 800e554:	42a6      	cmp	r6, r4
 800e556:	d113      	bne.n	800e580 <__gethex+0x2c6>
 800e558:	2e01      	cmp	r6, #1
 800e55a:	dc0b      	bgt.n	800e574 <__gethex+0x2ba>
 800e55c:	9a06      	ldr	r2, [sp, #24]
 800e55e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e562:	6013      	str	r3, [r2, #0]
 800e564:	2301      	movs	r3, #1
 800e566:	612b      	str	r3, [r5, #16]
 800e568:	f8c9 3000 	str.w	r3, [r9]
 800e56c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e56e:	2762      	movs	r7, #98	; 0x62
 800e570:	601d      	str	r5, [r3, #0]
 800e572:	e72a      	b.n	800e3ca <__gethex+0x110>
 800e574:	1e71      	subs	r1, r6, #1
 800e576:	4628      	mov	r0, r5
 800e578:	f000 fe0a 	bl	800f190 <__any_on>
 800e57c:	2800      	cmp	r0, #0
 800e57e:	d1ed      	bne.n	800e55c <__gethex+0x2a2>
 800e580:	4629      	mov	r1, r5
 800e582:	9802      	ldr	r0, [sp, #8]
 800e584:	f000 fa5b 	bl	800ea3e <_Bfree>
 800e588:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e58a:	2300      	movs	r3, #0
 800e58c:	6013      	str	r3, [r2, #0]
 800e58e:	2750      	movs	r7, #80	; 0x50
 800e590:	e71b      	b.n	800e3ca <__gethex+0x110>
 800e592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e594:	2b00      	cmp	r3, #0
 800e596:	d0e1      	beq.n	800e55c <__gethex+0x2a2>
 800e598:	e7f2      	b.n	800e580 <__gethex+0x2c6>
 800e59a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1dd      	bne.n	800e55c <__gethex+0x2a2>
 800e5a0:	e7ee      	b.n	800e580 <__gethex+0x2c6>
 800e5a2:	1e67      	subs	r7, r4, #1
 800e5a4:	f1ba 0f00 	cmp.w	sl, #0
 800e5a8:	d131      	bne.n	800e60e <__gethex+0x354>
 800e5aa:	b127      	cbz	r7, 800e5b6 <__gethex+0x2fc>
 800e5ac:	4639      	mov	r1, r7
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	f000 fdee 	bl	800f190 <__any_on>
 800e5b4:	4682      	mov	sl, r0
 800e5b6:	117a      	asrs	r2, r7, #5
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	f007 071f 	and.w	r7, r7, #31
 800e5be:	fa03 f707 	lsl.w	r7, r3, r7
 800e5c2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	421f      	tst	r7, r3
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	bf18      	it	ne
 800e5ce:	f04a 0a02 	orrne.w	sl, sl, #2
 800e5d2:	1b36      	subs	r6, r6, r4
 800e5d4:	f7ff fe22 	bl	800e21c <rshift>
 800e5d8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e5dc:	2702      	movs	r7, #2
 800e5de:	f1ba 0f00 	cmp.w	sl, #0
 800e5e2:	d048      	beq.n	800e676 <__gethex+0x3bc>
 800e5e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e5e8:	2b02      	cmp	r3, #2
 800e5ea:	d015      	beq.n	800e618 <__gethex+0x35e>
 800e5ec:	2b03      	cmp	r3, #3
 800e5ee:	d017      	beq.n	800e620 <__gethex+0x366>
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d109      	bne.n	800e608 <__gethex+0x34e>
 800e5f4:	f01a 0f02 	tst.w	sl, #2
 800e5f8:	d006      	beq.n	800e608 <__gethex+0x34e>
 800e5fa:	f8d9 3000 	ldr.w	r3, [r9]
 800e5fe:	ea4a 0a03 	orr.w	sl, sl, r3
 800e602:	f01a 0f01 	tst.w	sl, #1
 800e606:	d10e      	bne.n	800e626 <__gethex+0x36c>
 800e608:	f047 0710 	orr.w	r7, r7, #16
 800e60c:	e033      	b.n	800e676 <__gethex+0x3bc>
 800e60e:	f04f 0a01 	mov.w	sl, #1
 800e612:	e7d0      	b.n	800e5b6 <__gethex+0x2fc>
 800e614:	2701      	movs	r7, #1
 800e616:	e7e2      	b.n	800e5de <__gethex+0x324>
 800e618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e61a:	f1c3 0301 	rsb	r3, r3, #1
 800e61e:	9315      	str	r3, [sp, #84]	; 0x54
 800e620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e622:	2b00      	cmp	r3, #0
 800e624:	d0f0      	beq.n	800e608 <__gethex+0x34e>
 800e626:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e62a:	f105 0314 	add.w	r3, r5, #20
 800e62e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e632:	eb03 010a 	add.w	r1, r3, sl
 800e636:	f04f 0c00 	mov.w	ip, #0
 800e63a:	4618      	mov	r0, r3
 800e63c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e640:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e644:	d01c      	beq.n	800e680 <__gethex+0x3c6>
 800e646:	3201      	adds	r2, #1
 800e648:	6002      	str	r2, [r0, #0]
 800e64a:	2f02      	cmp	r7, #2
 800e64c:	f105 0314 	add.w	r3, r5, #20
 800e650:	d138      	bne.n	800e6c4 <__gethex+0x40a>
 800e652:	f8d8 2000 	ldr.w	r2, [r8]
 800e656:	3a01      	subs	r2, #1
 800e658:	42b2      	cmp	r2, r6
 800e65a:	d10a      	bne.n	800e672 <__gethex+0x3b8>
 800e65c:	1171      	asrs	r1, r6, #5
 800e65e:	2201      	movs	r2, #1
 800e660:	f006 061f 	and.w	r6, r6, #31
 800e664:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e668:	fa02 f606 	lsl.w	r6, r2, r6
 800e66c:	421e      	tst	r6, r3
 800e66e:	bf18      	it	ne
 800e670:	4617      	movne	r7, r2
 800e672:	f047 0720 	orr.w	r7, r7, #32
 800e676:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e678:	601d      	str	r5, [r3, #0]
 800e67a:	9b06      	ldr	r3, [sp, #24]
 800e67c:	601c      	str	r4, [r3, #0]
 800e67e:	e6a4      	b.n	800e3ca <__gethex+0x110>
 800e680:	4299      	cmp	r1, r3
 800e682:	f843 cc04 	str.w	ip, [r3, #-4]
 800e686:	d8d8      	bhi.n	800e63a <__gethex+0x380>
 800e688:	68ab      	ldr	r3, [r5, #8]
 800e68a:	4599      	cmp	r9, r3
 800e68c:	db12      	blt.n	800e6b4 <__gethex+0x3fa>
 800e68e:	6869      	ldr	r1, [r5, #4]
 800e690:	9802      	ldr	r0, [sp, #8]
 800e692:	3101      	adds	r1, #1
 800e694:	f000 f99f 	bl	800e9d6 <_Balloc>
 800e698:	692a      	ldr	r2, [r5, #16]
 800e69a:	3202      	adds	r2, #2
 800e69c:	f105 010c 	add.w	r1, r5, #12
 800e6a0:	4683      	mov	fp, r0
 800e6a2:	0092      	lsls	r2, r2, #2
 800e6a4:	300c      	adds	r0, #12
 800e6a6:	f000 f989 	bl	800e9bc <memcpy>
 800e6aa:	4629      	mov	r1, r5
 800e6ac:	9802      	ldr	r0, [sp, #8]
 800e6ae:	f000 f9c6 	bl	800ea3e <_Bfree>
 800e6b2:	465d      	mov	r5, fp
 800e6b4:	692b      	ldr	r3, [r5, #16]
 800e6b6:	1c5a      	adds	r2, r3, #1
 800e6b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e6bc:	612a      	str	r2, [r5, #16]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	615a      	str	r2, [r3, #20]
 800e6c2:	e7c2      	b.n	800e64a <__gethex+0x390>
 800e6c4:	692a      	ldr	r2, [r5, #16]
 800e6c6:	454a      	cmp	r2, r9
 800e6c8:	dd0b      	ble.n	800e6e2 <__gethex+0x428>
 800e6ca:	2101      	movs	r1, #1
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	f7ff fda5 	bl	800e21c <rshift>
 800e6d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6d6:	3401      	adds	r4, #1
 800e6d8:	42a3      	cmp	r3, r4
 800e6da:	f6ff aed9 	blt.w	800e490 <__gethex+0x1d6>
 800e6de:	2701      	movs	r7, #1
 800e6e0:	e7c7      	b.n	800e672 <__gethex+0x3b8>
 800e6e2:	f016 061f 	ands.w	r6, r6, #31
 800e6e6:	d0fa      	beq.n	800e6de <__gethex+0x424>
 800e6e8:	449a      	add	sl, r3
 800e6ea:	f1c6 0620 	rsb	r6, r6, #32
 800e6ee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e6f2:	f000 fa34 	bl	800eb5e <__hi0bits>
 800e6f6:	42b0      	cmp	r0, r6
 800e6f8:	dbe7      	blt.n	800e6ca <__gethex+0x410>
 800e6fa:	e7f0      	b.n	800e6de <__gethex+0x424>

0800e6fc <L_shift>:
 800e6fc:	f1c2 0208 	rsb	r2, r2, #8
 800e700:	0092      	lsls	r2, r2, #2
 800e702:	b570      	push	{r4, r5, r6, lr}
 800e704:	f1c2 0620 	rsb	r6, r2, #32
 800e708:	6843      	ldr	r3, [r0, #4]
 800e70a:	6804      	ldr	r4, [r0, #0]
 800e70c:	fa03 f506 	lsl.w	r5, r3, r6
 800e710:	432c      	orrs	r4, r5
 800e712:	40d3      	lsrs	r3, r2
 800e714:	6004      	str	r4, [r0, #0]
 800e716:	f840 3f04 	str.w	r3, [r0, #4]!
 800e71a:	4288      	cmp	r0, r1
 800e71c:	d3f4      	bcc.n	800e708 <L_shift+0xc>
 800e71e:	bd70      	pop	{r4, r5, r6, pc}

0800e720 <__match>:
 800e720:	b530      	push	{r4, r5, lr}
 800e722:	6803      	ldr	r3, [r0, #0]
 800e724:	3301      	adds	r3, #1
 800e726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e72a:	b914      	cbnz	r4, 800e732 <__match+0x12>
 800e72c:	6003      	str	r3, [r0, #0]
 800e72e:	2001      	movs	r0, #1
 800e730:	bd30      	pop	{r4, r5, pc}
 800e732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e736:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e73a:	2d19      	cmp	r5, #25
 800e73c:	bf98      	it	ls
 800e73e:	3220      	addls	r2, #32
 800e740:	42a2      	cmp	r2, r4
 800e742:	d0f0      	beq.n	800e726 <__match+0x6>
 800e744:	2000      	movs	r0, #0
 800e746:	e7f3      	b.n	800e730 <__match+0x10>

0800e748 <__hexnan>:
 800e748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74c:	680b      	ldr	r3, [r1, #0]
 800e74e:	6801      	ldr	r1, [r0, #0]
 800e750:	115f      	asrs	r7, r3, #5
 800e752:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e756:	f013 031f 	ands.w	r3, r3, #31
 800e75a:	b087      	sub	sp, #28
 800e75c:	bf18      	it	ne
 800e75e:	3704      	addne	r7, #4
 800e760:	2500      	movs	r5, #0
 800e762:	1f3e      	subs	r6, r7, #4
 800e764:	4682      	mov	sl, r0
 800e766:	4690      	mov	r8, r2
 800e768:	9301      	str	r3, [sp, #4]
 800e76a:	f847 5c04 	str.w	r5, [r7, #-4]
 800e76e:	46b1      	mov	r9, r6
 800e770:	4634      	mov	r4, r6
 800e772:	9502      	str	r5, [sp, #8]
 800e774:	46ab      	mov	fp, r5
 800e776:	784a      	ldrb	r2, [r1, #1]
 800e778:	1c4b      	adds	r3, r1, #1
 800e77a:	9303      	str	r3, [sp, #12]
 800e77c:	b342      	cbz	r2, 800e7d0 <__hexnan+0x88>
 800e77e:	4610      	mov	r0, r2
 800e780:	9105      	str	r1, [sp, #20]
 800e782:	9204      	str	r2, [sp, #16]
 800e784:	f7ff fd84 	bl	800e290 <__hexdig_fun>
 800e788:	2800      	cmp	r0, #0
 800e78a:	d143      	bne.n	800e814 <__hexnan+0xcc>
 800e78c:	9a04      	ldr	r2, [sp, #16]
 800e78e:	9905      	ldr	r1, [sp, #20]
 800e790:	2a20      	cmp	r2, #32
 800e792:	d818      	bhi.n	800e7c6 <__hexnan+0x7e>
 800e794:	9b02      	ldr	r3, [sp, #8]
 800e796:	459b      	cmp	fp, r3
 800e798:	dd13      	ble.n	800e7c2 <__hexnan+0x7a>
 800e79a:	454c      	cmp	r4, r9
 800e79c:	d206      	bcs.n	800e7ac <__hexnan+0x64>
 800e79e:	2d07      	cmp	r5, #7
 800e7a0:	dc04      	bgt.n	800e7ac <__hexnan+0x64>
 800e7a2:	462a      	mov	r2, r5
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f7ff ffa8 	bl	800e6fc <L_shift>
 800e7ac:	4544      	cmp	r4, r8
 800e7ae:	d944      	bls.n	800e83a <__hexnan+0xf2>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	f1a4 0904 	sub.w	r9, r4, #4
 800e7b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7ba:	f8cd b008 	str.w	fp, [sp, #8]
 800e7be:	464c      	mov	r4, r9
 800e7c0:	461d      	mov	r5, r3
 800e7c2:	9903      	ldr	r1, [sp, #12]
 800e7c4:	e7d7      	b.n	800e776 <__hexnan+0x2e>
 800e7c6:	2a29      	cmp	r2, #41	; 0x29
 800e7c8:	d14a      	bne.n	800e860 <__hexnan+0x118>
 800e7ca:	3102      	adds	r1, #2
 800e7cc:	f8ca 1000 	str.w	r1, [sl]
 800e7d0:	f1bb 0f00 	cmp.w	fp, #0
 800e7d4:	d044      	beq.n	800e860 <__hexnan+0x118>
 800e7d6:	454c      	cmp	r4, r9
 800e7d8:	d206      	bcs.n	800e7e8 <__hexnan+0xa0>
 800e7da:	2d07      	cmp	r5, #7
 800e7dc:	dc04      	bgt.n	800e7e8 <__hexnan+0xa0>
 800e7de:	462a      	mov	r2, r5
 800e7e0:	4649      	mov	r1, r9
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f7ff ff8a 	bl	800e6fc <L_shift>
 800e7e8:	4544      	cmp	r4, r8
 800e7ea:	d928      	bls.n	800e83e <__hexnan+0xf6>
 800e7ec:	4643      	mov	r3, r8
 800e7ee:	f854 2b04 	ldr.w	r2, [r4], #4
 800e7f2:	f843 2b04 	str.w	r2, [r3], #4
 800e7f6:	42a6      	cmp	r6, r4
 800e7f8:	d2f9      	bcs.n	800e7ee <__hexnan+0xa6>
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f843 2b04 	str.w	r2, [r3], #4
 800e800:	429e      	cmp	r6, r3
 800e802:	d2fb      	bcs.n	800e7fc <__hexnan+0xb4>
 800e804:	6833      	ldr	r3, [r6, #0]
 800e806:	b91b      	cbnz	r3, 800e810 <__hexnan+0xc8>
 800e808:	4546      	cmp	r6, r8
 800e80a:	d127      	bne.n	800e85c <__hexnan+0x114>
 800e80c:	2301      	movs	r3, #1
 800e80e:	6033      	str	r3, [r6, #0]
 800e810:	2005      	movs	r0, #5
 800e812:	e026      	b.n	800e862 <__hexnan+0x11a>
 800e814:	3501      	adds	r5, #1
 800e816:	2d08      	cmp	r5, #8
 800e818:	f10b 0b01 	add.w	fp, fp, #1
 800e81c:	dd06      	ble.n	800e82c <__hexnan+0xe4>
 800e81e:	4544      	cmp	r4, r8
 800e820:	d9cf      	bls.n	800e7c2 <__hexnan+0x7a>
 800e822:	2300      	movs	r3, #0
 800e824:	f844 3c04 	str.w	r3, [r4, #-4]
 800e828:	2501      	movs	r5, #1
 800e82a:	3c04      	subs	r4, #4
 800e82c:	6822      	ldr	r2, [r4, #0]
 800e82e:	f000 000f 	and.w	r0, r0, #15
 800e832:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e836:	6020      	str	r0, [r4, #0]
 800e838:	e7c3      	b.n	800e7c2 <__hexnan+0x7a>
 800e83a:	2508      	movs	r5, #8
 800e83c:	e7c1      	b.n	800e7c2 <__hexnan+0x7a>
 800e83e:	9b01      	ldr	r3, [sp, #4]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d0df      	beq.n	800e804 <__hexnan+0xbc>
 800e844:	f04f 32ff 	mov.w	r2, #4294967295
 800e848:	f1c3 0320 	rsb	r3, r3, #32
 800e84c:	fa22 f303 	lsr.w	r3, r2, r3
 800e850:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e854:	401a      	ands	r2, r3
 800e856:	f847 2c04 	str.w	r2, [r7, #-4]
 800e85a:	e7d3      	b.n	800e804 <__hexnan+0xbc>
 800e85c:	3e04      	subs	r6, #4
 800e85e:	e7d1      	b.n	800e804 <__hexnan+0xbc>
 800e860:	2004      	movs	r0, #4
 800e862:	b007      	add	sp, #28
 800e864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e868 <__locale_ctype_ptr_l>:
 800e868:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e86c:	4770      	bx	lr
	...

0800e870 <__locale_ctype_ptr>:
 800e870:	4b04      	ldr	r3, [pc, #16]	; (800e884 <__locale_ctype_ptr+0x14>)
 800e872:	4a05      	ldr	r2, [pc, #20]	; (800e888 <__locale_ctype_ptr+0x18>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	6a1b      	ldr	r3, [r3, #32]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	bf08      	it	eq
 800e87c:	4613      	moveq	r3, r2
 800e87e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800e882:	4770      	bx	lr
 800e884:	200001f4 	.word	0x200001f4
 800e888:	20000258 	.word	0x20000258

0800e88c <__localeconv_l>:
 800e88c:	30f0      	adds	r0, #240	; 0xf0
 800e88e:	4770      	bx	lr

0800e890 <_localeconv_r>:
 800e890:	4b04      	ldr	r3, [pc, #16]	; (800e8a4 <_localeconv_r+0x14>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6a18      	ldr	r0, [r3, #32]
 800e896:	4b04      	ldr	r3, [pc, #16]	; (800e8a8 <_localeconv_r+0x18>)
 800e898:	2800      	cmp	r0, #0
 800e89a:	bf08      	it	eq
 800e89c:	4618      	moveq	r0, r3
 800e89e:	30f0      	adds	r0, #240	; 0xf0
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	200001f4 	.word	0x200001f4
 800e8a8:	20000258 	.word	0x20000258

0800e8ac <_lseek_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4c07      	ldr	r4, [pc, #28]	; (800e8cc <_lseek_r+0x20>)
 800e8b0:	4605      	mov	r5, r0
 800e8b2:	4608      	mov	r0, r1
 800e8b4:	4611      	mov	r1, r2
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	6022      	str	r2, [r4, #0]
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	f7f3 fe28 	bl	8002510 <_lseek>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	d102      	bne.n	800e8ca <_lseek_r+0x1e>
 800e8c4:	6823      	ldr	r3, [r4, #0]
 800e8c6:	b103      	cbz	r3, 800e8ca <_lseek_r+0x1e>
 800e8c8:	602b      	str	r3, [r5, #0]
 800e8ca:	bd38      	pop	{r3, r4, r5, pc}
 800e8cc:	200013d4 	.word	0x200013d4

0800e8d0 <__swhatbuf_r>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	460e      	mov	r6, r1
 800e8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8d8:	2900      	cmp	r1, #0
 800e8da:	b096      	sub	sp, #88	; 0x58
 800e8dc:	4614      	mov	r4, r2
 800e8de:	461d      	mov	r5, r3
 800e8e0:	da07      	bge.n	800e8f2 <__swhatbuf_r+0x22>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	602b      	str	r3, [r5, #0]
 800e8e6:	89b3      	ldrh	r3, [r6, #12]
 800e8e8:	061a      	lsls	r2, r3, #24
 800e8ea:	d410      	bmi.n	800e90e <__swhatbuf_r+0x3e>
 800e8ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8f0:	e00e      	b.n	800e910 <__swhatbuf_r+0x40>
 800e8f2:	466a      	mov	r2, sp
 800e8f4:	f001 fb3a 	bl	800ff6c <_fstat_r>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	dbf2      	blt.n	800e8e2 <__swhatbuf_r+0x12>
 800e8fc:	9a01      	ldr	r2, [sp, #4]
 800e8fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e902:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e906:	425a      	negs	r2, r3
 800e908:	415a      	adcs	r2, r3
 800e90a:	602a      	str	r2, [r5, #0]
 800e90c:	e7ee      	b.n	800e8ec <__swhatbuf_r+0x1c>
 800e90e:	2340      	movs	r3, #64	; 0x40
 800e910:	2000      	movs	r0, #0
 800e912:	6023      	str	r3, [r4, #0]
 800e914:	b016      	add	sp, #88	; 0x58
 800e916:	bd70      	pop	{r4, r5, r6, pc}

0800e918 <__smakebuf_r>:
 800e918:	898b      	ldrh	r3, [r1, #12]
 800e91a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e91c:	079d      	lsls	r5, r3, #30
 800e91e:	4606      	mov	r6, r0
 800e920:	460c      	mov	r4, r1
 800e922:	d507      	bpl.n	800e934 <__smakebuf_r+0x1c>
 800e924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	6123      	str	r3, [r4, #16]
 800e92c:	2301      	movs	r3, #1
 800e92e:	6163      	str	r3, [r4, #20]
 800e930:	b002      	add	sp, #8
 800e932:	bd70      	pop	{r4, r5, r6, pc}
 800e934:	ab01      	add	r3, sp, #4
 800e936:	466a      	mov	r2, sp
 800e938:	f7ff ffca 	bl	800e8d0 <__swhatbuf_r>
 800e93c:	9900      	ldr	r1, [sp, #0]
 800e93e:	4605      	mov	r5, r0
 800e940:	4630      	mov	r0, r6
 800e942:	f7fc fd4d 	bl	800b3e0 <_malloc_r>
 800e946:	b948      	cbnz	r0, 800e95c <__smakebuf_r+0x44>
 800e948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e94c:	059a      	lsls	r2, r3, #22
 800e94e:	d4ef      	bmi.n	800e930 <__smakebuf_r+0x18>
 800e950:	f023 0303 	bic.w	r3, r3, #3
 800e954:	f043 0302 	orr.w	r3, r3, #2
 800e958:	81a3      	strh	r3, [r4, #12]
 800e95a:	e7e3      	b.n	800e924 <__smakebuf_r+0xc>
 800e95c:	4b0d      	ldr	r3, [pc, #52]	; (800e994 <__smakebuf_r+0x7c>)
 800e95e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e960:	89a3      	ldrh	r3, [r4, #12]
 800e962:	6020      	str	r0, [r4, #0]
 800e964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e968:	81a3      	strh	r3, [r4, #12]
 800e96a:	9b00      	ldr	r3, [sp, #0]
 800e96c:	6163      	str	r3, [r4, #20]
 800e96e:	9b01      	ldr	r3, [sp, #4]
 800e970:	6120      	str	r0, [r4, #16]
 800e972:	b15b      	cbz	r3, 800e98c <__smakebuf_r+0x74>
 800e974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e978:	4630      	mov	r0, r6
 800e97a:	f001 fb09 	bl	800ff90 <_isatty_r>
 800e97e:	b128      	cbz	r0, 800e98c <__smakebuf_r+0x74>
 800e980:	89a3      	ldrh	r3, [r4, #12]
 800e982:	f023 0303 	bic.w	r3, r3, #3
 800e986:	f043 0301 	orr.w	r3, r3, #1
 800e98a:	81a3      	strh	r3, [r4, #12]
 800e98c:	89a3      	ldrh	r3, [r4, #12]
 800e98e:	431d      	orrs	r5, r3
 800e990:	81a5      	strh	r5, [r4, #12]
 800e992:	e7cd      	b.n	800e930 <__smakebuf_r+0x18>
 800e994:	0800e0d1 	.word	0x0800e0d1

0800e998 <__ascii_mbtowc>:
 800e998:	b082      	sub	sp, #8
 800e99a:	b901      	cbnz	r1, 800e99e <__ascii_mbtowc+0x6>
 800e99c:	a901      	add	r1, sp, #4
 800e99e:	b142      	cbz	r2, 800e9b2 <__ascii_mbtowc+0x1a>
 800e9a0:	b14b      	cbz	r3, 800e9b6 <__ascii_mbtowc+0x1e>
 800e9a2:	7813      	ldrb	r3, [r2, #0]
 800e9a4:	600b      	str	r3, [r1, #0]
 800e9a6:	7812      	ldrb	r2, [r2, #0]
 800e9a8:	1c10      	adds	r0, r2, #0
 800e9aa:	bf18      	it	ne
 800e9ac:	2001      	movne	r0, #1
 800e9ae:	b002      	add	sp, #8
 800e9b0:	4770      	bx	lr
 800e9b2:	4610      	mov	r0, r2
 800e9b4:	e7fb      	b.n	800e9ae <__ascii_mbtowc+0x16>
 800e9b6:	f06f 0001 	mvn.w	r0, #1
 800e9ba:	e7f8      	b.n	800e9ae <__ascii_mbtowc+0x16>

0800e9bc <memcpy>:
 800e9bc:	b510      	push	{r4, lr}
 800e9be:	1e43      	subs	r3, r0, #1
 800e9c0:	440a      	add	r2, r1
 800e9c2:	4291      	cmp	r1, r2
 800e9c4:	d100      	bne.n	800e9c8 <memcpy+0xc>
 800e9c6:	bd10      	pop	{r4, pc}
 800e9c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9d0:	e7f7      	b.n	800e9c2 <memcpy+0x6>

0800e9d2 <__malloc_lock>:
 800e9d2:	4770      	bx	lr

0800e9d4 <__malloc_unlock>:
 800e9d4:	4770      	bx	lr

0800e9d6 <_Balloc>:
 800e9d6:	b570      	push	{r4, r5, r6, lr}
 800e9d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e9da:	4604      	mov	r4, r0
 800e9dc:	460e      	mov	r6, r1
 800e9de:	b93d      	cbnz	r5, 800e9f0 <_Balloc+0x1a>
 800e9e0:	2010      	movs	r0, #16
 800e9e2:	f7fc fc97 	bl	800b314 <malloc>
 800e9e6:	6260      	str	r0, [r4, #36]	; 0x24
 800e9e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e9ec:	6005      	str	r5, [r0, #0]
 800e9ee:	60c5      	str	r5, [r0, #12]
 800e9f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e9f2:	68eb      	ldr	r3, [r5, #12]
 800e9f4:	b183      	cbz	r3, 800ea18 <_Balloc+0x42>
 800e9f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9f8:	68db      	ldr	r3, [r3, #12]
 800e9fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e9fe:	b9b8      	cbnz	r0, 800ea30 <_Balloc+0x5a>
 800ea00:	2101      	movs	r1, #1
 800ea02:	fa01 f506 	lsl.w	r5, r1, r6
 800ea06:	1d6a      	adds	r2, r5, #5
 800ea08:	0092      	lsls	r2, r2, #2
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f000 fbe1 	bl	800f1d2 <_calloc_r>
 800ea10:	b160      	cbz	r0, 800ea2c <_Balloc+0x56>
 800ea12:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ea16:	e00e      	b.n	800ea36 <_Balloc+0x60>
 800ea18:	2221      	movs	r2, #33	; 0x21
 800ea1a:	2104      	movs	r1, #4
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f000 fbd8 	bl	800f1d2 <_calloc_r>
 800ea22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea24:	60e8      	str	r0, [r5, #12]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1e4      	bne.n	800e9f6 <_Balloc+0x20>
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	bd70      	pop	{r4, r5, r6, pc}
 800ea30:	6802      	ldr	r2, [r0, #0]
 800ea32:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ea36:	2300      	movs	r3, #0
 800ea38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea3c:	e7f7      	b.n	800ea2e <_Balloc+0x58>

0800ea3e <_Bfree>:
 800ea3e:	b570      	push	{r4, r5, r6, lr}
 800ea40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ea42:	4606      	mov	r6, r0
 800ea44:	460d      	mov	r5, r1
 800ea46:	b93c      	cbnz	r4, 800ea58 <_Bfree+0x1a>
 800ea48:	2010      	movs	r0, #16
 800ea4a:	f7fc fc63 	bl	800b314 <malloc>
 800ea4e:	6270      	str	r0, [r6, #36]	; 0x24
 800ea50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea54:	6004      	str	r4, [r0, #0]
 800ea56:	60c4      	str	r4, [r0, #12]
 800ea58:	b13d      	cbz	r5, 800ea6a <_Bfree+0x2c>
 800ea5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ea5c:	686a      	ldr	r2, [r5, #4]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea64:	6029      	str	r1, [r5, #0]
 800ea66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ea6a:	bd70      	pop	{r4, r5, r6, pc}

0800ea6c <__multadd>:
 800ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea70:	690d      	ldr	r5, [r1, #16]
 800ea72:	461f      	mov	r7, r3
 800ea74:	4606      	mov	r6, r0
 800ea76:	460c      	mov	r4, r1
 800ea78:	f101 0c14 	add.w	ip, r1, #20
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	f8dc 0000 	ldr.w	r0, [ip]
 800ea82:	b281      	uxth	r1, r0
 800ea84:	fb02 7101 	mla	r1, r2, r1, r7
 800ea88:	0c0f      	lsrs	r7, r1, #16
 800ea8a:	0c00      	lsrs	r0, r0, #16
 800ea8c:	fb02 7000 	mla	r0, r2, r0, r7
 800ea90:	b289      	uxth	r1, r1
 800ea92:	3301      	adds	r3, #1
 800ea94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ea98:	429d      	cmp	r5, r3
 800ea9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ea9e:	f84c 1b04 	str.w	r1, [ip], #4
 800eaa2:	dcec      	bgt.n	800ea7e <__multadd+0x12>
 800eaa4:	b1d7      	cbz	r7, 800eadc <__multadd+0x70>
 800eaa6:	68a3      	ldr	r3, [r4, #8]
 800eaa8:	42ab      	cmp	r3, r5
 800eaaa:	dc12      	bgt.n	800ead2 <__multadd+0x66>
 800eaac:	6861      	ldr	r1, [r4, #4]
 800eaae:	4630      	mov	r0, r6
 800eab0:	3101      	adds	r1, #1
 800eab2:	f7ff ff90 	bl	800e9d6 <_Balloc>
 800eab6:	6922      	ldr	r2, [r4, #16]
 800eab8:	3202      	adds	r2, #2
 800eaba:	f104 010c 	add.w	r1, r4, #12
 800eabe:	4680      	mov	r8, r0
 800eac0:	0092      	lsls	r2, r2, #2
 800eac2:	300c      	adds	r0, #12
 800eac4:	f7ff ff7a 	bl	800e9bc <memcpy>
 800eac8:	4621      	mov	r1, r4
 800eaca:	4630      	mov	r0, r6
 800eacc:	f7ff ffb7 	bl	800ea3e <_Bfree>
 800ead0:	4644      	mov	r4, r8
 800ead2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ead6:	3501      	adds	r5, #1
 800ead8:	615f      	str	r7, [r3, #20]
 800eada:	6125      	str	r5, [r4, #16]
 800eadc:	4620      	mov	r0, r4
 800eade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eae2 <__s2b>:
 800eae2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eae6:	460c      	mov	r4, r1
 800eae8:	4615      	mov	r5, r2
 800eaea:	461f      	mov	r7, r3
 800eaec:	2209      	movs	r2, #9
 800eaee:	3308      	adds	r3, #8
 800eaf0:	4606      	mov	r6, r0
 800eaf2:	fb93 f3f2 	sdiv	r3, r3, r2
 800eaf6:	2100      	movs	r1, #0
 800eaf8:	2201      	movs	r2, #1
 800eafa:	429a      	cmp	r2, r3
 800eafc:	db20      	blt.n	800eb40 <__s2b+0x5e>
 800eafe:	4630      	mov	r0, r6
 800eb00:	f7ff ff69 	bl	800e9d6 <_Balloc>
 800eb04:	9b08      	ldr	r3, [sp, #32]
 800eb06:	6143      	str	r3, [r0, #20]
 800eb08:	2d09      	cmp	r5, #9
 800eb0a:	f04f 0301 	mov.w	r3, #1
 800eb0e:	6103      	str	r3, [r0, #16]
 800eb10:	dd19      	ble.n	800eb46 <__s2b+0x64>
 800eb12:	f104 0809 	add.w	r8, r4, #9
 800eb16:	46c1      	mov	r9, r8
 800eb18:	442c      	add	r4, r5
 800eb1a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800eb1e:	4601      	mov	r1, r0
 800eb20:	3b30      	subs	r3, #48	; 0x30
 800eb22:	220a      	movs	r2, #10
 800eb24:	4630      	mov	r0, r6
 800eb26:	f7ff ffa1 	bl	800ea6c <__multadd>
 800eb2a:	45a1      	cmp	r9, r4
 800eb2c:	d1f5      	bne.n	800eb1a <__s2b+0x38>
 800eb2e:	eb08 0405 	add.w	r4, r8, r5
 800eb32:	3c08      	subs	r4, #8
 800eb34:	1b2d      	subs	r5, r5, r4
 800eb36:	1963      	adds	r3, r4, r5
 800eb38:	42bb      	cmp	r3, r7
 800eb3a:	db07      	blt.n	800eb4c <__s2b+0x6a>
 800eb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb40:	0052      	lsls	r2, r2, #1
 800eb42:	3101      	adds	r1, #1
 800eb44:	e7d9      	b.n	800eafa <__s2b+0x18>
 800eb46:	340a      	adds	r4, #10
 800eb48:	2509      	movs	r5, #9
 800eb4a:	e7f3      	b.n	800eb34 <__s2b+0x52>
 800eb4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb50:	4601      	mov	r1, r0
 800eb52:	3b30      	subs	r3, #48	; 0x30
 800eb54:	220a      	movs	r2, #10
 800eb56:	4630      	mov	r0, r6
 800eb58:	f7ff ff88 	bl	800ea6c <__multadd>
 800eb5c:	e7eb      	b.n	800eb36 <__s2b+0x54>

0800eb5e <__hi0bits>:
 800eb5e:	0c02      	lsrs	r2, r0, #16
 800eb60:	0412      	lsls	r2, r2, #16
 800eb62:	4603      	mov	r3, r0
 800eb64:	b9b2      	cbnz	r2, 800eb94 <__hi0bits+0x36>
 800eb66:	0403      	lsls	r3, r0, #16
 800eb68:	2010      	movs	r0, #16
 800eb6a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800eb6e:	bf04      	itt	eq
 800eb70:	021b      	lsleq	r3, r3, #8
 800eb72:	3008      	addeq	r0, #8
 800eb74:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800eb78:	bf04      	itt	eq
 800eb7a:	011b      	lsleq	r3, r3, #4
 800eb7c:	3004      	addeq	r0, #4
 800eb7e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800eb82:	bf04      	itt	eq
 800eb84:	009b      	lsleq	r3, r3, #2
 800eb86:	3002      	addeq	r0, #2
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	db06      	blt.n	800eb9a <__hi0bits+0x3c>
 800eb8c:	005b      	lsls	r3, r3, #1
 800eb8e:	d503      	bpl.n	800eb98 <__hi0bits+0x3a>
 800eb90:	3001      	adds	r0, #1
 800eb92:	4770      	bx	lr
 800eb94:	2000      	movs	r0, #0
 800eb96:	e7e8      	b.n	800eb6a <__hi0bits+0xc>
 800eb98:	2020      	movs	r0, #32
 800eb9a:	4770      	bx	lr

0800eb9c <__lo0bits>:
 800eb9c:	6803      	ldr	r3, [r0, #0]
 800eb9e:	f013 0207 	ands.w	r2, r3, #7
 800eba2:	4601      	mov	r1, r0
 800eba4:	d00b      	beq.n	800ebbe <__lo0bits+0x22>
 800eba6:	07da      	lsls	r2, r3, #31
 800eba8:	d423      	bmi.n	800ebf2 <__lo0bits+0x56>
 800ebaa:	0798      	lsls	r0, r3, #30
 800ebac:	bf49      	itett	mi
 800ebae:	085b      	lsrmi	r3, r3, #1
 800ebb0:	089b      	lsrpl	r3, r3, #2
 800ebb2:	2001      	movmi	r0, #1
 800ebb4:	600b      	strmi	r3, [r1, #0]
 800ebb6:	bf5c      	itt	pl
 800ebb8:	600b      	strpl	r3, [r1, #0]
 800ebba:	2002      	movpl	r0, #2
 800ebbc:	4770      	bx	lr
 800ebbe:	b298      	uxth	r0, r3
 800ebc0:	b9a8      	cbnz	r0, 800ebee <__lo0bits+0x52>
 800ebc2:	0c1b      	lsrs	r3, r3, #16
 800ebc4:	2010      	movs	r0, #16
 800ebc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ebca:	bf04      	itt	eq
 800ebcc:	0a1b      	lsreq	r3, r3, #8
 800ebce:	3008      	addeq	r0, #8
 800ebd0:	071a      	lsls	r2, r3, #28
 800ebd2:	bf04      	itt	eq
 800ebd4:	091b      	lsreq	r3, r3, #4
 800ebd6:	3004      	addeq	r0, #4
 800ebd8:	079a      	lsls	r2, r3, #30
 800ebda:	bf04      	itt	eq
 800ebdc:	089b      	lsreq	r3, r3, #2
 800ebde:	3002      	addeq	r0, #2
 800ebe0:	07da      	lsls	r2, r3, #31
 800ebe2:	d402      	bmi.n	800ebea <__lo0bits+0x4e>
 800ebe4:	085b      	lsrs	r3, r3, #1
 800ebe6:	d006      	beq.n	800ebf6 <__lo0bits+0x5a>
 800ebe8:	3001      	adds	r0, #1
 800ebea:	600b      	str	r3, [r1, #0]
 800ebec:	4770      	bx	lr
 800ebee:	4610      	mov	r0, r2
 800ebf0:	e7e9      	b.n	800ebc6 <__lo0bits+0x2a>
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	4770      	bx	lr
 800ebf6:	2020      	movs	r0, #32
 800ebf8:	4770      	bx	lr

0800ebfa <__i2b>:
 800ebfa:	b510      	push	{r4, lr}
 800ebfc:	460c      	mov	r4, r1
 800ebfe:	2101      	movs	r1, #1
 800ec00:	f7ff fee9 	bl	800e9d6 <_Balloc>
 800ec04:	2201      	movs	r2, #1
 800ec06:	6144      	str	r4, [r0, #20]
 800ec08:	6102      	str	r2, [r0, #16]
 800ec0a:	bd10      	pop	{r4, pc}

0800ec0c <__multiply>:
 800ec0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec10:	4614      	mov	r4, r2
 800ec12:	690a      	ldr	r2, [r1, #16]
 800ec14:	6923      	ldr	r3, [r4, #16]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	bfb8      	it	lt
 800ec1a:	460b      	movlt	r3, r1
 800ec1c:	4688      	mov	r8, r1
 800ec1e:	bfbc      	itt	lt
 800ec20:	46a0      	movlt	r8, r4
 800ec22:	461c      	movlt	r4, r3
 800ec24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ec28:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ec2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ec34:	eb07 0609 	add.w	r6, r7, r9
 800ec38:	42b3      	cmp	r3, r6
 800ec3a:	bfb8      	it	lt
 800ec3c:	3101      	addlt	r1, #1
 800ec3e:	f7ff feca 	bl	800e9d6 <_Balloc>
 800ec42:	f100 0514 	add.w	r5, r0, #20
 800ec46:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ec4a:	462b      	mov	r3, r5
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	4573      	cmp	r3, lr
 800ec50:	d316      	bcc.n	800ec80 <__multiply+0x74>
 800ec52:	f104 0214 	add.w	r2, r4, #20
 800ec56:	f108 0114 	add.w	r1, r8, #20
 800ec5a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ec5e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ec62:	9300      	str	r3, [sp, #0]
 800ec64:	9b00      	ldr	r3, [sp, #0]
 800ec66:	9201      	str	r2, [sp, #4]
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d80c      	bhi.n	800ec86 <__multiply+0x7a>
 800ec6c:	2e00      	cmp	r6, #0
 800ec6e:	dd03      	ble.n	800ec78 <__multiply+0x6c>
 800ec70:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d05d      	beq.n	800ed34 <__multiply+0x128>
 800ec78:	6106      	str	r6, [r0, #16]
 800ec7a:	b003      	add	sp, #12
 800ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec80:	f843 2b04 	str.w	r2, [r3], #4
 800ec84:	e7e3      	b.n	800ec4e <__multiply+0x42>
 800ec86:	f8b2 b000 	ldrh.w	fp, [r2]
 800ec8a:	f1bb 0f00 	cmp.w	fp, #0
 800ec8e:	d023      	beq.n	800ecd8 <__multiply+0xcc>
 800ec90:	4689      	mov	r9, r1
 800ec92:	46ac      	mov	ip, r5
 800ec94:	f04f 0800 	mov.w	r8, #0
 800ec98:	f859 4b04 	ldr.w	r4, [r9], #4
 800ec9c:	f8dc a000 	ldr.w	sl, [ip]
 800eca0:	b2a3      	uxth	r3, r4
 800eca2:	fa1f fa8a 	uxth.w	sl, sl
 800eca6:	fb0b a303 	mla	r3, fp, r3, sl
 800ecaa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ecae:	f8dc 4000 	ldr.w	r4, [ip]
 800ecb2:	4443      	add	r3, r8
 800ecb4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ecb8:	fb0b 840a 	mla	r4, fp, sl, r8
 800ecbc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ecc0:	46e2      	mov	sl, ip
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ecc8:	454f      	cmp	r7, r9
 800ecca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ecce:	f84a 3b04 	str.w	r3, [sl], #4
 800ecd2:	d82b      	bhi.n	800ed2c <__multiply+0x120>
 800ecd4:	f8cc 8004 	str.w	r8, [ip, #4]
 800ecd8:	9b01      	ldr	r3, [sp, #4]
 800ecda:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ecde:	3204      	adds	r2, #4
 800ece0:	f1ba 0f00 	cmp.w	sl, #0
 800ece4:	d020      	beq.n	800ed28 <__multiply+0x11c>
 800ece6:	682b      	ldr	r3, [r5, #0]
 800ece8:	4689      	mov	r9, r1
 800ecea:	46a8      	mov	r8, r5
 800ecec:	f04f 0b00 	mov.w	fp, #0
 800ecf0:	f8b9 c000 	ldrh.w	ip, [r9]
 800ecf4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ecf8:	fb0a 440c 	mla	r4, sl, ip, r4
 800ecfc:	445c      	add	r4, fp
 800ecfe:	46c4      	mov	ip, r8
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ed06:	f84c 3b04 	str.w	r3, [ip], #4
 800ed0a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ed0e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ed12:	0c1b      	lsrs	r3, r3, #16
 800ed14:	fb0a b303 	mla	r3, sl, r3, fp
 800ed18:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ed1c:	454f      	cmp	r7, r9
 800ed1e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ed22:	d805      	bhi.n	800ed30 <__multiply+0x124>
 800ed24:	f8c8 3004 	str.w	r3, [r8, #4]
 800ed28:	3504      	adds	r5, #4
 800ed2a:	e79b      	b.n	800ec64 <__multiply+0x58>
 800ed2c:	46d4      	mov	ip, sl
 800ed2e:	e7b3      	b.n	800ec98 <__multiply+0x8c>
 800ed30:	46e0      	mov	r8, ip
 800ed32:	e7dd      	b.n	800ecf0 <__multiply+0xe4>
 800ed34:	3e01      	subs	r6, #1
 800ed36:	e799      	b.n	800ec6c <__multiply+0x60>

0800ed38 <__pow5mult>:
 800ed38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed3c:	4615      	mov	r5, r2
 800ed3e:	f012 0203 	ands.w	r2, r2, #3
 800ed42:	4606      	mov	r6, r0
 800ed44:	460f      	mov	r7, r1
 800ed46:	d007      	beq.n	800ed58 <__pow5mult+0x20>
 800ed48:	3a01      	subs	r2, #1
 800ed4a:	4c21      	ldr	r4, [pc, #132]	; (800edd0 <__pow5mult+0x98>)
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed52:	f7ff fe8b 	bl	800ea6c <__multadd>
 800ed56:	4607      	mov	r7, r0
 800ed58:	10ad      	asrs	r5, r5, #2
 800ed5a:	d035      	beq.n	800edc8 <__pow5mult+0x90>
 800ed5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ed5e:	b93c      	cbnz	r4, 800ed70 <__pow5mult+0x38>
 800ed60:	2010      	movs	r0, #16
 800ed62:	f7fc fad7 	bl	800b314 <malloc>
 800ed66:	6270      	str	r0, [r6, #36]	; 0x24
 800ed68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed6c:	6004      	str	r4, [r0, #0]
 800ed6e:	60c4      	str	r4, [r0, #12]
 800ed70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ed74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed78:	b94c      	cbnz	r4, 800ed8e <__pow5mult+0x56>
 800ed7a:	f240 2171 	movw	r1, #625	; 0x271
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f7ff ff3b 	bl	800ebfa <__i2b>
 800ed84:	2300      	movs	r3, #0
 800ed86:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	6003      	str	r3, [r0, #0]
 800ed8e:	f04f 0800 	mov.w	r8, #0
 800ed92:	07eb      	lsls	r3, r5, #31
 800ed94:	d50a      	bpl.n	800edac <__pow5mult+0x74>
 800ed96:	4639      	mov	r1, r7
 800ed98:	4622      	mov	r2, r4
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	f7ff ff36 	bl	800ec0c <__multiply>
 800eda0:	4639      	mov	r1, r7
 800eda2:	4681      	mov	r9, r0
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7ff fe4a 	bl	800ea3e <_Bfree>
 800edaa:	464f      	mov	r7, r9
 800edac:	106d      	asrs	r5, r5, #1
 800edae:	d00b      	beq.n	800edc8 <__pow5mult+0x90>
 800edb0:	6820      	ldr	r0, [r4, #0]
 800edb2:	b938      	cbnz	r0, 800edc4 <__pow5mult+0x8c>
 800edb4:	4622      	mov	r2, r4
 800edb6:	4621      	mov	r1, r4
 800edb8:	4630      	mov	r0, r6
 800edba:	f7ff ff27 	bl	800ec0c <__multiply>
 800edbe:	6020      	str	r0, [r4, #0]
 800edc0:	f8c0 8000 	str.w	r8, [r0]
 800edc4:	4604      	mov	r4, r0
 800edc6:	e7e4      	b.n	800ed92 <__pow5mult+0x5a>
 800edc8:	4638      	mov	r0, r7
 800edca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edce:	bf00      	nop
 800edd0:	08012fb0 	.word	0x08012fb0

0800edd4 <__lshift>:
 800edd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edd8:	460c      	mov	r4, r1
 800edda:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800edde:	6923      	ldr	r3, [r4, #16]
 800ede0:	6849      	ldr	r1, [r1, #4]
 800ede2:	eb0a 0903 	add.w	r9, sl, r3
 800ede6:	68a3      	ldr	r3, [r4, #8]
 800ede8:	4607      	mov	r7, r0
 800edea:	4616      	mov	r6, r2
 800edec:	f109 0501 	add.w	r5, r9, #1
 800edf0:	42ab      	cmp	r3, r5
 800edf2:	db32      	blt.n	800ee5a <__lshift+0x86>
 800edf4:	4638      	mov	r0, r7
 800edf6:	f7ff fdee 	bl	800e9d6 <_Balloc>
 800edfa:	2300      	movs	r3, #0
 800edfc:	4680      	mov	r8, r0
 800edfe:	f100 0114 	add.w	r1, r0, #20
 800ee02:	461a      	mov	r2, r3
 800ee04:	4553      	cmp	r3, sl
 800ee06:	db2b      	blt.n	800ee60 <__lshift+0x8c>
 800ee08:	6920      	ldr	r0, [r4, #16]
 800ee0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee0e:	f104 0314 	add.w	r3, r4, #20
 800ee12:	f016 021f 	ands.w	r2, r6, #31
 800ee16:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee1a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee1e:	d025      	beq.n	800ee6c <__lshift+0x98>
 800ee20:	f1c2 0e20 	rsb	lr, r2, #32
 800ee24:	2000      	movs	r0, #0
 800ee26:	681e      	ldr	r6, [r3, #0]
 800ee28:	468a      	mov	sl, r1
 800ee2a:	4096      	lsls	r6, r2
 800ee2c:	4330      	orrs	r0, r6
 800ee2e:	f84a 0b04 	str.w	r0, [sl], #4
 800ee32:	f853 0b04 	ldr.w	r0, [r3], #4
 800ee36:	459c      	cmp	ip, r3
 800ee38:	fa20 f00e 	lsr.w	r0, r0, lr
 800ee3c:	d814      	bhi.n	800ee68 <__lshift+0x94>
 800ee3e:	6048      	str	r0, [r1, #4]
 800ee40:	b108      	cbz	r0, 800ee46 <__lshift+0x72>
 800ee42:	f109 0502 	add.w	r5, r9, #2
 800ee46:	3d01      	subs	r5, #1
 800ee48:	4638      	mov	r0, r7
 800ee4a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ee4e:	4621      	mov	r1, r4
 800ee50:	f7ff fdf5 	bl	800ea3e <_Bfree>
 800ee54:	4640      	mov	r0, r8
 800ee56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee5a:	3101      	adds	r1, #1
 800ee5c:	005b      	lsls	r3, r3, #1
 800ee5e:	e7c7      	b.n	800edf0 <__lshift+0x1c>
 800ee60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ee64:	3301      	adds	r3, #1
 800ee66:	e7cd      	b.n	800ee04 <__lshift+0x30>
 800ee68:	4651      	mov	r1, sl
 800ee6a:	e7dc      	b.n	800ee26 <__lshift+0x52>
 800ee6c:	3904      	subs	r1, #4
 800ee6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee72:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee76:	459c      	cmp	ip, r3
 800ee78:	d8f9      	bhi.n	800ee6e <__lshift+0x9a>
 800ee7a:	e7e4      	b.n	800ee46 <__lshift+0x72>

0800ee7c <__mcmp>:
 800ee7c:	6903      	ldr	r3, [r0, #16]
 800ee7e:	690a      	ldr	r2, [r1, #16]
 800ee80:	1a9b      	subs	r3, r3, r2
 800ee82:	b530      	push	{r4, r5, lr}
 800ee84:	d10c      	bne.n	800eea0 <__mcmp+0x24>
 800ee86:	0092      	lsls	r2, r2, #2
 800ee88:	3014      	adds	r0, #20
 800ee8a:	3114      	adds	r1, #20
 800ee8c:	1884      	adds	r4, r0, r2
 800ee8e:	4411      	add	r1, r2
 800ee90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ee94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ee98:	4295      	cmp	r5, r2
 800ee9a:	d003      	beq.n	800eea4 <__mcmp+0x28>
 800ee9c:	d305      	bcc.n	800eeaa <__mcmp+0x2e>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	4618      	mov	r0, r3
 800eea2:	bd30      	pop	{r4, r5, pc}
 800eea4:	42a0      	cmp	r0, r4
 800eea6:	d3f3      	bcc.n	800ee90 <__mcmp+0x14>
 800eea8:	e7fa      	b.n	800eea0 <__mcmp+0x24>
 800eeaa:	f04f 33ff 	mov.w	r3, #4294967295
 800eeae:	e7f7      	b.n	800eea0 <__mcmp+0x24>

0800eeb0 <__mdiff>:
 800eeb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb4:	460d      	mov	r5, r1
 800eeb6:	4607      	mov	r7, r0
 800eeb8:	4611      	mov	r1, r2
 800eeba:	4628      	mov	r0, r5
 800eebc:	4614      	mov	r4, r2
 800eebe:	f7ff ffdd 	bl	800ee7c <__mcmp>
 800eec2:	1e06      	subs	r6, r0, #0
 800eec4:	d108      	bne.n	800eed8 <__mdiff+0x28>
 800eec6:	4631      	mov	r1, r6
 800eec8:	4638      	mov	r0, r7
 800eeca:	f7ff fd84 	bl	800e9d6 <_Balloc>
 800eece:	2301      	movs	r3, #1
 800eed0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800eed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed8:	bfa4      	itt	ge
 800eeda:	4623      	movge	r3, r4
 800eedc:	462c      	movge	r4, r5
 800eede:	4638      	mov	r0, r7
 800eee0:	6861      	ldr	r1, [r4, #4]
 800eee2:	bfa6      	itte	ge
 800eee4:	461d      	movge	r5, r3
 800eee6:	2600      	movge	r6, #0
 800eee8:	2601      	movlt	r6, #1
 800eeea:	f7ff fd74 	bl	800e9d6 <_Balloc>
 800eeee:	692b      	ldr	r3, [r5, #16]
 800eef0:	60c6      	str	r6, [r0, #12]
 800eef2:	6926      	ldr	r6, [r4, #16]
 800eef4:	f105 0914 	add.w	r9, r5, #20
 800eef8:	f104 0214 	add.w	r2, r4, #20
 800eefc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ef00:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ef04:	f100 0514 	add.w	r5, r0, #20
 800ef08:	f04f 0e00 	mov.w	lr, #0
 800ef0c:	f852 ab04 	ldr.w	sl, [r2], #4
 800ef10:	f859 4b04 	ldr.w	r4, [r9], #4
 800ef14:	fa1e f18a 	uxtah	r1, lr, sl
 800ef18:	b2a3      	uxth	r3, r4
 800ef1a:	1ac9      	subs	r1, r1, r3
 800ef1c:	0c23      	lsrs	r3, r4, #16
 800ef1e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ef22:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ef26:	b289      	uxth	r1, r1
 800ef28:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ef2c:	45c8      	cmp	r8, r9
 800ef2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ef32:	4694      	mov	ip, r2
 800ef34:	f845 3b04 	str.w	r3, [r5], #4
 800ef38:	d8e8      	bhi.n	800ef0c <__mdiff+0x5c>
 800ef3a:	45bc      	cmp	ip, r7
 800ef3c:	d304      	bcc.n	800ef48 <__mdiff+0x98>
 800ef3e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ef42:	b183      	cbz	r3, 800ef66 <__mdiff+0xb6>
 800ef44:	6106      	str	r6, [r0, #16]
 800ef46:	e7c5      	b.n	800eed4 <__mdiff+0x24>
 800ef48:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ef4c:	fa1e f381 	uxtah	r3, lr, r1
 800ef50:	141a      	asrs	r2, r3, #16
 800ef52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef5c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ef60:	f845 3b04 	str.w	r3, [r5], #4
 800ef64:	e7e9      	b.n	800ef3a <__mdiff+0x8a>
 800ef66:	3e01      	subs	r6, #1
 800ef68:	e7e9      	b.n	800ef3e <__mdiff+0x8e>
	...

0800ef6c <__ulp>:
 800ef6c:	4b12      	ldr	r3, [pc, #72]	; (800efb8 <__ulp+0x4c>)
 800ef6e:	ee10 2a90 	vmov	r2, s1
 800ef72:	401a      	ands	r2, r3
 800ef74:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	dd04      	ble.n	800ef86 <__ulp+0x1a>
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	4619      	mov	r1, r3
 800ef80:	ec41 0b10 	vmov	d0, r0, r1
 800ef84:	4770      	bx	lr
 800ef86:	425b      	negs	r3, r3
 800ef88:	151b      	asrs	r3, r3, #20
 800ef8a:	2b13      	cmp	r3, #19
 800ef8c:	f04f 0000 	mov.w	r0, #0
 800ef90:	f04f 0100 	mov.w	r1, #0
 800ef94:	dc04      	bgt.n	800efa0 <__ulp+0x34>
 800ef96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ef9a:	fa42 f103 	asr.w	r1, r2, r3
 800ef9e:	e7ef      	b.n	800ef80 <__ulp+0x14>
 800efa0:	3b14      	subs	r3, #20
 800efa2:	2b1e      	cmp	r3, #30
 800efa4:	f04f 0201 	mov.w	r2, #1
 800efa8:	bfda      	itte	le
 800efaa:	f1c3 031f 	rsble	r3, r3, #31
 800efae:	fa02 f303 	lslle.w	r3, r2, r3
 800efb2:	4613      	movgt	r3, r2
 800efb4:	4618      	mov	r0, r3
 800efb6:	e7e3      	b.n	800ef80 <__ulp+0x14>
 800efb8:	7ff00000 	.word	0x7ff00000

0800efbc <__b2d>:
 800efbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efbe:	6905      	ldr	r5, [r0, #16]
 800efc0:	f100 0714 	add.w	r7, r0, #20
 800efc4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800efc8:	1f2e      	subs	r6, r5, #4
 800efca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800efce:	4620      	mov	r0, r4
 800efd0:	f7ff fdc5 	bl	800eb5e <__hi0bits>
 800efd4:	f1c0 0320 	rsb	r3, r0, #32
 800efd8:	280a      	cmp	r0, #10
 800efda:	600b      	str	r3, [r1, #0]
 800efdc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f054 <__b2d+0x98>
 800efe0:	dc14      	bgt.n	800f00c <__b2d+0x50>
 800efe2:	f1c0 0e0b 	rsb	lr, r0, #11
 800efe6:	fa24 f10e 	lsr.w	r1, r4, lr
 800efea:	42b7      	cmp	r7, r6
 800efec:	ea41 030c 	orr.w	r3, r1, ip
 800eff0:	bf34      	ite	cc
 800eff2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eff6:	2100      	movcs	r1, #0
 800eff8:	3015      	adds	r0, #21
 800effa:	fa04 f000 	lsl.w	r0, r4, r0
 800effe:	fa21 f10e 	lsr.w	r1, r1, lr
 800f002:	ea40 0201 	orr.w	r2, r0, r1
 800f006:	ec43 2b10 	vmov	d0, r2, r3
 800f00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f00c:	42b7      	cmp	r7, r6
 800f00e:	bf3a      	itte	cc
 800f010:	f1a5 0608 	subcc.w	r6, r5, #8
 800f014:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f018:	2100      	movcs	r1, #0
 800f01a:	380b      	subs	r0, #11
 800f01c:	d015      	beq.n	800f04a <__b2d+0x8e>
 800f01e:	4084      	lsls	r4, r0
 800f020:	f1c0 0520 	rsb	r5, r0, #32
 800f024:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f028:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f02c:	42be      	cmp	r6, r7
 800f02e:	fa21 fc05 	lsr.w	ip, r1, r5
 800f032:	ea44 030c 	orr.w	r3, r4, ip
 800f036:	bf8c      	ite	hi
 800f038:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f03c:	2400      	movls	r4, #0
 800f03e:	fa01 f000 	lsl.w	r0, r1, r0
 800f042:	40ec      	lsrs	r4, r5
 800f044:	ea40 0204 	orr.w	r2, r0, r4
 800f048:	e7dd      	b.n	800f006 <__b2d+0x4a>
 800f04a:	ea44 030c 	orr.w	r3, r4, ip
 800f04e:	460a      	mov	r2, r1
 800f050:	e7d9      	b.n	800f006 <__b2d+0x4a>
 800f052:	bf00      	nop
 800f054:	3ff00000 	.word	0x3ff00000

0800f058 <__d2b>:
 800f058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f05c:	460e      	mov	r6, r1
 800f05e:	2101      	movs	r1, #1
 800f060:	ec59 8b10 	vmov	r8, r9, d0
 800f064:	4615      	mov	r5, r2
 800f066:	f7ff fcb6 	bl	800e9d6 <_Balloc>
 800f06a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f06e:	4607      	mov	r7, r0
 800f070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f074:	bb34      	cbnz	r4, 800f0c4 <__d2b+0x6c>
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	f1b8 0300 	subs.w	r3, r8, #0
 800f07c:	d027      	beq.n	800f0ce <__d2b+0x76>
 800f07e:	a802      	add	r0, sp, #8
 800f080:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f084:	f7ff fd8a 	bl	800eb9c <__lo0bits>
 800f088:	9900      	ldr	r1, [sp, #0]
 800f08a:	b1f0      	cbz	r0, 800f0ca <__d2b+0x72>
 800f08c:	9a01      	ldr	r2, [sp, #4]
 800f08e:	f1c0 0320 	rsb	r3, r0, #32
 800f092:	fa02 f303 	lsl.w	r3, r2, r3
 800f096:	430b      	orrs	r3, r1
 800f098:	40c2      	lsrs	r2, r0
 800f09a:	617b      	str	r3, [r7, #20]
 800f09c:	9201      	str	r2, [sp, #4]
 800f09e:	9b01      	ldr	r3, [sp, #4]
 800f0a0:	61bb      	str	r3, [r7, #24]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	bf14      	ite	ne
 800f0a6:	2102      	movne	r1, #2
 800f0a8:	2101      	moveq	r1, #1
 800f0aa:	6139      	str	r1, [r7, #16]
 800f0ac:	b1c4      	cbz	r4, 800f0e0 <__d2b+0x88>
 800f0ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f0b2:	4404      	add	r4, r0
 800f0b4:	6034      	str	r4, [r6, #0]
 800f0b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f0ba:	6028      	str	r0, [r5, #0]
 800f0bc:	4638      	mov	r0, r7
 800f0be:	b003      	add	sp, #12
 800f0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f0c8:	e7d5      	b.n	800f076 <__d2b+0x1e>
 800f0ca:	6179      	str	r1, [r7, #20]
 800f0cc:	e7e7      	b.n	800f09e <__d2b+0x46>
 800f0ce:	a801      	add	r0, sp, #4
 800f0d0:	f7ff fd64 	bl	800eb9c <__lo0bits>
 800f0d4:	9b01      	ldr	r3, [sp, #4]
 800f0d6:	617b      	str	r3, [r7, #20]
 800f0d8:	2101      	movs	r1, #1
 800f0da:	6139      	str	r1, [r7, #16]
 800f0dc:	3020      	adds	r0, #32
 800f0de:	e7e5      	b.n	800f0ac <__d2b+0x54>
 800f0e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f0e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0e8:	6030      	str	r0, [r6, #0]
 800f0ea:	6918      	ldr	r0, [r3, #16]
 800f0ec:	f7ff fd37 	bl	800eb5e <__hi0bits>
 800f0f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f0f4:	e7e1      	b.n	800f0ba <__d2b+0x62>

0800f0f6 <__ratio>:
 800f0f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0fa:	4688      	mov	r8, r1
 800f0fc:	4669      	mov	r1, sp
 800f0fe:	4681      	mov	r9, r0
 800f100:	f7ff ff5c 	bl	800efbc <__b2d>
 800f104:	a901      	add	r1, sp, #4
 800f106:	4640      	mov	r0, r8
 800f108:	ec57 6b10 	vmov	r6, r7, d0
 800f10c:	f7ff ff56 	bl	800efbc <__b2d>
 800f110:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f114:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f118:	eba3 0c02 	sub.w	ip, r3, r2
 800f11c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f120:	1a9b      	subs	r3, r3, r2
 800f122:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f126:	ec5b ab10 	vmov	sl, fp, d0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	bfce      	itee	gt
 800f12e:	463a      	movgt	r2, r7
 800f130:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f134:	465a      	movle	r2, fp
 800f136:	4659      	mov	r1, fp
 800f138:	463d      	mov	r5, r7
 800f13a:	bfd4      	ite	le
 800f13c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f140:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f144:	4630      	mov	r0, r6
 800f146:	ee10 2a10 	vmov	r2, s0
 800f14a:	460b      	mov	r3, r1
 800f14c:	4629      	mov	r1, r5
 800f14e:	f7f1 fb85 	bl	800085c <__aeabi_ddiv>
 800f152:	ec41 0b10 	vmov	d0, r0, r1
 800f156:	b003      	add	sp, #12
 800f158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f15c <__copybits>:
 800f15c:	3901      	subs	r1, #1
 800f15e:	b510      	push	{r4, lr}
 800f160:	1149      	asrs	r1, r1, #5
 800f162:	6914      	ldr	r4, [r2, #16]
 800f164:	3101      	adds	r1, #1
 800f166:	f102 0314 	add.w	r3, r2, #20
 800f16a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f16e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f172:	42a3      	cmp	r3, r4
 800f174:	4602      	mov	r2, r0
 800f176:	d303      	bcc.n	800f180 <__copybits+0x24>
 800f178:	2300      	movs	r3, #0
 800f17a:	428a      	cmp	r2, r1
 800f17c:	d305      	bcc.n	800f18a <__copybits+0x2e>
 800f17e:	bd10      	pop	{r4, pc}
 800f180:	f853 2b04 	ldr.w	r2, [r3], #4
 800f184:	f840 2b04 	str.w	r2, [r0], #4
 800f188:	e7f3      	b.n	800f172 <__copybits+0x16>
 800f18a:	f842 3b04 	str.w	r3, [r2], #4
 800f18e:	e7f4      	b.n	800f17a <__copybits+0x1e>

0800f190 <__any_on>:
 800f190:	f100 0214 	add.w	r2, r0, #20
 800f194:	6900      	ldr	r0, [r0, #16]
 800f196:	114b      	asrs	r3, r1, #5
 800f198:	4298      	cmp	r0, r3
 800f19a:	b510      	push	{r4, lr}
 800f19c:	db11      	blt.n	800f1c2 <__any_on+0x32>
 800f19e:	dd0a      	ble.n	800f1b6 <__any_on+0x26>
 800f1a0:	f011 011f 	ands.w	r1, r1, #31
 800f1a4:	d007      	beq.n	800f1b6 <__any_on+0x26>
 800f1a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f1aa:	fa24 f001 	lsr.w	r0, r4, r1
 800f1ae:	fa00 f101 	lsl.w	r1, r0, r1
 800f1b2:	428c      	cmp	r4, r1
 800f1b4:	d10b      	bne.n	800f1ce <__any_on+0x3e>
 800f1b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d803      	bhi.n	800f1c6 <__any_on+0x36>
 800f1be:	2000      	movs	r0, #0
 800f1c0:	bd10      	pop	{r4, pc}
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	e7f7      	b.n	800f1b6 <__any_on+0x26>
 800f1c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f1ca:	2900      	cmp	r1, #0
 800f1cc:	d0f5      	beq.n	800f1ba <__any_on+0x2a>
 800f1ce:	2001      	movs	r0, #1
 800f1d0:	e7f6      	b.n	800f1c0 <__any_on+0x30>

0800f1d2 <_calloc_r>:
 800f1d2:	b538      	push	{r3, r4, r5, lr}
 800f1d4:	fb02 f401 	mul.w	r4, r2, r1
 800f1d8:	4621      	mov	r1, r4
 800f1da:	f7fc f901 	bl	800b3e0 <_malloc_r>
 800f1de:	4605      	mov	r5, r0
 800f1e0:	b118      	cbz	r0, 800f1ea <_calloc_r+0x18>
 800f1e2:	4622      	mov	r2, r4
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	f7fc f8a5 	bl	800b334 <memset>
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	bd38      	pop	{r3, r4, r5, pc}

0800f1ee <__ssputs_r>:
 800f1ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f2:	688e      	ldr	r6, [r1, #8]
 800f1f4:	429e      	cmp	r6, r3
 800f1f6:	4682      	mov	sl, r0
 800f1f8:	460c      	mov	r4, r1
 800f1fa:	4690      	mov	r8, r2
 800f1fc:	4699      	mov	r9, r3
 800f1fe:	d837      	bhi.n	800f270 <__ssputs_r+0x82>
 800f200:	898a      	ldrh	r2, [r1, #12]
 800f202:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f206:	d031      	beq.n	800f26c <__ssputs_r+0x7e>
 800f208:	6825      	ldr	r5, [r4, #0]
 800f20a:	6909      	ldr	r1, [r1, #16]
 800f20c:	1a6f      	subs	r7, r5, r1
 800f20e:	6965      	ldr	r5, [r4, #20]
 800f210:	2302      	movs	r3, #2
 800f212:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f216:	fb95 f5f3 	sdiv	r5, r5, r3
 800f21a:	f109 0301 	add.w	r3, r9, #1
 800f21e:	443b      	add	r3, r7
 800f220:	429d      	cmp	r5, r3
 800f222:	bf38      	it	cc
 800f224:	461d      	movcc	r5, r3
 800f226:	0553      	lsls	r3, r2, #21
 800f228:	d530      	bpl.n	800f28c <__ssputs_r+0x9e>
 800f22a:	4629      	mov	r1, r5
 800f22c:	f7fc f8d8 	bl	800b3e0 <_malloc_r>
 800f230:	4606      	mov	r6, r0
 800f232:	b950      	cbnz	r0, 800f24a <__ssputs_r+0x5c>
 800f234:	230c      	movs	r3, #12
 800f236:	f8ca 3000 	str.w	r3, [sl]
 800f23a:	89a3      	ldrh	r3, [r4, #12]
 800f23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f240:	81a3      	strh	r3, [r4, #12]
 800f242:	f04f 30ff 	mov.w	r0, #4294967295
 800f246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f24a:	463a      	mov	r2, r7
 800f24c:	6921      	ldr	r1, [r4, #16]
 800f24e:	f7ff fbb5 	bl	800e9bc <memcpy>
 800f252:	89a3      	ldrh	r3, [r4, #12]
 800f254:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f25c:	81a3      	strh	r3, [r4, #12]
 800f25e:	6126      	str	r6, [r4, #16]
 800f260:	6165      	str	r5, [r4, #20]
 800f262:	443e      	add	r6, r7
 800f264:	1bed      	subs	r5, r5, r7
 800f266:	6026      	str	r6, [r4, #0]
 800f268:	60a5      	str	r5, [r4, #8]
 800f26a:	464e      	mov	r6, r9
 800f26c:	454e      	cmp	r6, r9
 800f26e:	d900      	bls.n	800f272 <__ssputs_r+0x84>
 800f270:	464e      	mov	r6, r9
 800f272:	4632      	mov	r2, r6
 800f274:	4641      	mov	r1, r8
 800f276:	6820      	ldr	r0, [r4, #0]
 800f278:	f000 fe9a 	bl	800ffb0 <memmove>
 800f27c:	68a3      	ldr	r3, [r4, #8]
 800f27e:	1b9b      	subs	r3, r3, r6
 800f280:	60a3      	str	r3, [r4, #8]
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	441e      	add	r6, r3
 800f286:	6026      	str	r6, [r4, #0]
 800f288:	2000      	movs	r0, #0
 800f28a:	e7dc      	b.n	800f246 <__ssputs_r+0x58>
 800f28c:	462a      	mov	r2, r5
 800f28e:	f000 fea8 	bl	800ffe2 <_realloc_r>
 800f292:	4606      	mov	r6, r0
 800f294:	2800      	cmp	r0, #0
 800f296:	d1e2      	bne.n	800f25e <__ssputs_r+0x70>
 800f298:	6921      	ldr	r1, [r4, #16]
 800f29a:	4650      	mov	r0, sl
 800f29c:	f7fc f852 	bl	800b344 <_free_r>
 800f2a0:	e7c8      	b.n	800f234 <__ssputs_r+0x46>
	...

0800f2a4 <_svfiprintf_r>:
 800f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a8:	461d      	mov	r5, r3
 800f2aa:	898b      	ldrh	r3, [r1, #12]
 800f2ac:	061f      	lsls	r7, r3, #24
 800f2ae:	b09d      	sub	sp, #116	; 0x74
 800f2b0:	4680      	mov	r8, r0
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	4616      	mov	r6, r2
 800f2b6:	d50f      	bpl.n	800f2d8 <_svfiprintf_r+0x34>
 800f2b8:	690b      	ldr	r3, [r1, #16]
 800f2ba:	b96b      	cbnz	r3, 800f2d8 <_svfiprintf_r+0x34>
 800f2bc:	2140      	movs	r1, #64	; 0x40
 800f2be:	f7fc f88f 	bl	800b3e0 <_malloc_r>
 800f2c2:	6020      	str	r0, [r4, #0]
 800f2c4:	6120      	str	r0, [r4, #16]
 800f2c6:	b928      	cbnz	r0, 800f2d4 <_svfiprintf_r+0x30>
 800f2c8:	230c      	movs	r3, #12
 800f2ca:	f8c8 3000 	str.w	r3, [r8]
 800f2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f2d2:	e0c8      	b.n	800f466 <_svfiprintf_r+0x1c2>
 800f2d4:	2340      	movs	r3, #64	; 0x40
 800f2d6:	6163      	str	r3, [r4, #20]
 800f2d8:	2300      	movs	r3, #0
 800f2da:	9309      	str	r3, [sp, #36]	; 0x24
 800f2dc:	2320      	movs	r3, #32
 800f2de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2e2:	2330      	movs	r3, #48	; 0x30
 800f2e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2e8:	9503      	str	r5, [sp, #12]
 800f2ea:	f04f 0b01 	mov.w	fp, #1
 800f2ee:	4637      	mov	r7, r6
 800f2f0:	463d      	mov	r5, r7
 800f2f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f2f6:	b10b      	cbz	r3, 800f2fc <_svfiprintf_r+0x58>
 800f2f8:	2b25      	cmp	r3, #37	; 0x25
 800f2fa:	d13e      	bne.n	800f37a <_svfiprintf_r+0xd6>
 800f2fc:	ebb7 0a06 	subs.w	sl, r7, r6
 800f300:	d00b      	beq.n	800f31a <_svfiprintf_r+0x76>
 800f302:	4653      	mov	r3, sl
 800f304:	4632      	mov	r2, r6
 800f306:	4621      	mov	r1, r4
 800f308:	4640      	mov	r0, r8
 800f30a:	f7ff ff70 	bl	800f1ee <__ssputs_r>
 800f30e:	3001      	adds	r0, #1
 800f310:	f000 80a4 	beq.w	800f45c <_svfiprintf_r+0x1b8>
 800f314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f316:	4453      	add	r3, sl
 800f318:	9309      	str	r3, [sp, #36]	; 0x24
 800f31a:	783b      	ldrb	r3, [r7, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 809d 	beq.w	800f45c <_svfiprintf_r+0x1b8>
 800f322:	2300      	movs	r3, #0
 800f324:	f04f 32ff 	mov.w	r2, #4294967295
 800f328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f32c:	9304      	str	r3, [sp, #16]
 800f32e:	9307      	str	r3, [sp, #28]
 800f330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f334:	931a      	str	r3, [sp, #104]	; 0x68
 800f336:	462f      	mov	r7, r5
 800f338:	2205      	movs	r2, #5
 800f33a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f33e:	4850      	ldr	r0, [pc, #320]	; (800f480 <_svfiprintf_r+0x1dc>)
 800f340:	f7f0 ff56 	bl	80001f0 <memchr>
 800f344:	9b04      	ldr	r3, [sp, #16]
 800f346:	b9d0      	cbnz	r0, 800f37e <_svfiprintf_r+0xda>
 800f348:	06d9      	lsls	r1, r3, #27
 800f34a:	bf44      	itt	mi
 800f34c:	2220      	movmi	r2, #32
 800f34e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f352:	071a      	lsls	r2, r3, #28
 800f354:	bf44      	itt	mi
 800f356:	222b      	movmi	r2, #43	; 0x2b
 800f358:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f35c:	782a      	ldrb	r2, [r5, #0]
 800f35e:	2a2a      	cmp	r2, #42	; 0x2a
 800f360:	d015      	beq.n	800f38e <_svfiprintf_r+0xea>
 800f362:	9a07      	ldr	r2, [sp, #28]
 800f364:	462f      	mov	r7, r5
 800f366:	2000      	movs	r0, #0
 800f368:	250a      	movs	r5, #10
 800f36a:	4639      	mov	r1, r7
 800f36c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f370:	3b30      	subs	r3, #48	; 0x30
 800f372:	2b09      	cmp	r3, #9
 800f374:	d94d      	bls.n	800f412 <_svfiprintf_r+0x16e>
 800f376:	b1b8      	cbz	r0, 800f3a8 <_svfiprintf_r+0x104>
 800f378:	e00f      	b.n	800f39a <_svfiprintf_r+0xf6>
 800f37a:	462f      	mov	r7, r5
 800f37c:	e7b8      	b.n	800f2f0 <_svfiprintf_r+0x4c>
 800f37e:	4a40      	ldr	r2, [pc, #256]	; (800f480 <_svfiprintf_r+0x1dc>)
 800f380:	1a80      	subs	r0, r0, r2
 800f382:	fa0b f000 	lsl.w	r0, fp, r0
 800f386:	4318      	orrs	r0, r3
 800f388:	9004      	str	r0, [sp, #16]
 800f38a:	463d      	mov	r5, r7
 800f38c:	e7d3      	b.n	800f336 <_svfiprintf_r+0x92>
 800f38e:	9a03      	ldr	r2, [sp, #12]
 800f390:	1d11      	adds	r1, r2, #4
 800f392:	6812      	ldr	r2, [r2, #0]
 800f394:	9103      	str	r1, [sp, #12]
 800f396:	2a00      	cmp	r2, #0
 800f398:	db01      	blt.n	800f39e <_svfiprintf_r+0xfa>
 800f39a:	9207      	str	r2, [sp, #28]
 800f39c:	e004      	b.n	800f3a8 <_svfiprintf_r+0x104>
 800f39e:	4252      	negs	r2, r2
 800f3a0:	f043 0302 	orr.w	r3, r3, #2
 800f3a4:	9207      	str	r2, [sp, #28]
 800f3a6:	9304      	str	r3, [sp, #16]
 800f3a8:	783b      	ldrb	r3, [r7, #0]
 800f3aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f3ac:	d10c      	bne.n	800f3c8 <_svfiprintf_r+0x124>
 800f3ae:	787b      	ldrb	r3, [r7, #1]
 800f3b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f3b2:	d133      	bne.n	800f41c <_svfiprintf_r+0x178>
 800f3b4:	9b03      	ldr	r3, [sp, #12]
 800f3b6:	1d1a      	adds	r2, r3, #4
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	9203      	str	r2, [sp, #12]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	bfb8      	it	lt
 800f3c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3c4:	3702      	adds	r7, #2
 800f3c6:	9305      	str	r3, [sp, #20]
 800f3c8:	4d2e      	ldr	r5, [pc, #184]	; (800f484 <_svfiprintf_r+0x1e0>)
 800f3ca:	7839      	ldrb	r1, [r7, #0]
 800f3cc:	2203      	movs	r2, #3
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f7f0 ff0e 	bl	80001f0 <memchr>
 800f3d4:	b138      	cbz	r0, 800f3e6 <_svfiprintf_r+0x142>
 800f3d6:	2340      	movs	r3, #64	; 0x40
 800f3d8:	1b40      	subs	r0, r0, r5
 800f3da:	fa03 f000 	lsl.w	r0, r3, r0
 800f3de:	9b04      	ldr	r3, [sp, #16]
 800f3e0:	4303      	orrs	r3, r0
 800f3e2:	3701      	adds	r7, #1
 800f3e4:	9304      	str	r3, [sp, #16]
 800f3e6:	7839      	ldrb	r1, [r7, #0]
 800f3e8:	4827      	ldr	r0, [pc, #156]	; (800f488 <_svfiprintf_r+0x1e4>)
 800f3ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3ee:	2206      	movs	r2, #6
 800f3f0:	1c7e      	adds	r6, r7, #1
 800f3f2:	f7f0 fefd 	bl	80001f0 <memchr>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d038      	beq.n	800f46c <_svfiprintf_r+0x1c8>
 800f3fa:	4b24      	ldr	r3, [pc, #144]	; (800f48c <_svfiprintf_r+0x1e8>)
 800f3fc:	bb13      	cbnz	r3, 800f444 <_svfiprintf_r+0x1a0>
 800f3fe:	9b03      	ldr	r3, [sp, #12]
 800f400:	3307      	adds	r3, #7
 800f402:	f023 0307 	bic.w	r3, r3, #7
 800f406:	3308      	adds	r3, #8
 800f408:	9303      	str	r3, [sp, #12]
 800f40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f40c:	444b      	add	r3, r9
 800f40e:	9309      	str	r3, [sp, #36]	; 0x24
 800f410:	e76d      	b.n	800f2ee <_svfiprintf_r+0x4a>
 800f412:	fb05 3202 	mla	r2, r5, r2, r3
 800f416:	2001      	movs	r0, #1
 800f418:	460f      	mov	r7, r1
 800f41a:	e7a6      	b.n	800f36a <_svfiprintf_r+0xc6>
 800f41c:	2300      	movs	r3, #0
 800f41e:	3701      	adds	r7, #1
 800f420:	9305      	str	r3, [sp, #20]
 800f422:	4619      	mov	r1, r3
 800f424:	250a      	movs	r5, #10
 800f426:	4638      	mov	r0, r7
 800f428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f42c:	3a30      	subs	r2, #48	; 0x30
 800f42e:	2a09      	cmp	r2, #9
 800f430:	d903      	bls.n	800f43a <_svfiprintf_r+0x196>
 800f432:	2b00      	cmp	r3, #0
 800f434:	d0c8      	beq.n	800f3c8 <_svfiprintf_r+0x124>
 800f436:	9105      	str	r1, [sp, #20]
 800f438:	e7c6      	b.n	800f3c8 <_svfiprintf_r+0x124>
 800f43a:	fb05 2101 	mla	r1, r5, r1, r2
 800f43e:	2301      	movs	r3, #1
 800f440:	4607      	mov	r7, r0
 800f442:	e7f0      	b.n	800f426 <_svfiprintf_r+0x182>
 800f444:	ab03      	add	r3, sp, #12
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	4622      	mov	r2, r4
 800f44a:	4b11      	ldr	r3, [pc, #68]	; (800f490 <_svfiprintf_r+0x1ec>)
 800f44c:	a904      	add	r1, sp, #16
 800f44e:	4640      	mov	r0, r8
 800f450:	f7fc f8b4 	bl	800b5bc <_printf_float>
 800f454:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f458:	4681      	mov	r9, r0
 800f45a:	d1d6      	bne.n	800f40a <_svfiprintf_r+0x166>
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	065b      	lsls	r3, r3, #25
 800f460:	f53f af35 	bmi.w	800f2ce <_svfiprintf_r+0x2a>
 800f464:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f466:	b01d      	add	sp, #116	; 0x74
 800f468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46c:	ab03      	add	r3, sp, #12
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	4622      	mov	r2, r4
 800f472:	4b07      	ldr	r3, [pc, #28]	; (800f490 <_svfiprintf_r+0x1ec>)
 800f474:	a904      	add	r1, sp, #16
 800f476:	4640      	mov	r0, r8
 800f478:	f7fc fb56 	bl	800bb28 <_printf_i>
 800f47c:	e7ea      	b.n	800f454 <_svfiprintf_r+0x1b0>
 800f47e:	bf00      	nop
 800f480:	08012fbc 	.word	0x08012fbc
 800f484:	08012fc2 	.word	0x08012fc2
 800f488:	08012fc6 	.word	0x08012fc6
 800f48c:	0800b5bd 	.word	0x0800b5bd
 800f490:	0800f1ef 	.word	0x0800f1ef

0800f494 <_sungetc_r>:
 800f494:	b538      	push	{r3, r4, r5, lr}
 800f496:	1c4b      	adds	r3, r1, #1
 800f498:	4614      	mov	r4, r2
 800f49a:	d103      	bne.n	800f4a4 <_sungetc_r+0x10>
 800f49c:	f04f 35ff 	mov.w	r5, #4294967295
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	bd38      	pop	{r3, r4, r5, pc}
 800f4a4:	8993      	ldrh	r3, [r2, #12]
 800f4a6:	f023 0320 	bic.w	r3, r3, #32
 800f4aa:	8193      	strh	r3, [r2, #12]
 800f4ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4ae:	6852      	ldr	r2, [r2, #4]
 800f4b0:	b2cd      	uxtb	r5, r1
 800f4b2:	b18b      	cbz	r3, 800f4d8 <_sungetc_r+0x44>
 800f4b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	dd08      	ble.n	800f4cc <_sungetc_r+0x38>
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	1e5a      	subs	r2, r3, #1
 800f4be:	6022      	str	r2, [r4, #0]
 800f4c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f4c4:	6863      	ldr	r3, [r4, #4]
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	6063      	str	r3, [r4, #4]
 800f4ca:	e7e9      	b.n	800f4a0 <_sungetc_r+0xc>
 800f4cc:	4621      	mov	r1, r4
 800f4ce:	f000 fd05 	bl	800fedc <__submore>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d0f1      	beq.n	800f4ba <_sungetc_r+0x26>
 800f4d6:	e7e1      	b.n	800f49c <_sungetc_r+0x8>
 800f4d8:	6921      	ldr	r1, [r4, #16]
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	b151      	cbz	r1, 800f4f4 <_sungetc_r+0x60>
 800f4de:	4299      	cmp	r1, r3
 800f4e0:	d208      	bcs.n	800f4f4 <_sungetc_r+0x60>
 800f4e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f4e6:	42a9      	cmp	r1, r5
 800f4e8:	d104      	bne.n	800f4f4 <_sungetc_r+0x60>
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	3201      	adds	r2, #1
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	6062      	str	r2, [r4, #4]
 800f4f2:	e7d5      	b.n	800f4a0 <_sungetc_r+0xc>
 800f4f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f4f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4fc:	6363      	str	r3, [r4, #52]	; 0x34
 800f4fe:	2303      	movs	r3, #3
 800f500:	63a3      	str	r3, [r4, #56]	; 0x38
 800f502:	4623      	mov	r3, r4
 800f504:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f508:	6023      	str	r3, [r4, #0]
 800f50a:	2301      	movs	r3, #1
 800f50c:	e7dc      	b.n	800f4c8 <_sungetc_r+0x34>

0800f50e <__ssrefill_r>:
 800f50e:	b510      	push	{r4, lr}
 800f510:	460c      	mov	r4, r1
 800f512:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f514:	b169      	cbz	r1, 800f532 <__ssrefill_r+0x24>
 800f516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f51a:	4299      	cmp	r1, r3
 800f51c:	d001      	beq.n	800f522 <__ssrefill_r+0x14>
 800f51e:	f7fb ff11 	bl	800b344 <_free_r>
 800f522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f524:	6063      	str	r3, [r4, #4]
 800f526:	2000      	movs	r0, #0
 800f528:	6360      	str	r0, [r4, #52]	; 0x34
 800f52a:	b113      	cbz	r3, 800f532 <__ssrefill_r+0x24>
 800f52c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f52e:	6023      	str	r3, [r4, #0]
 800f530:	bd10      	pop	{r4, pc}
 800f532:	6923      	ldr	r3, [r4, #16]
 800f534:	6023      	str	r3, [r4, #0]
 800f536:	2300      	movs	r3, #0
 800f538:	6063      	str	r3, [r4, #4]
 800f53a:	89a3      	ldrh	r3, [r4, #12]
 800f53c:	f043 0320 	orr.w	r3, r3, #32
 800f540:	81a3      	strh	r3, [r4, #12]
 800f542:	f04f 30ff 	mov.w	r0, #4294967295
 800f546:	e7f3      	b.n	800f530 <__ssrefill_r+0x22>

0800f548 <__ssvfiscanf_r>:
 800f548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f54c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800f550:	460c      	mov	r4, r1
 800f552:	2100      	movs	r1, #0
 800f554:	9144      	str	r1, [sp, #272]	; 0x110
 800f556:	9145      	str	r1, [sp, #276]	; 0x114
 800f558:	499f      	ldr	r1, [pc, #636]	; (800f7d8 <__ssvfiscanf_r+0x290>)
 800f55a:	91a0      	str	r1, [sp, #640]	; 0x280
 800f55c:	f10d 0804 	add.w	r8, sp, #4
 800f560:	499e      	ldr	r1, [pc, #632]	; (800f7dc <__ssvfiscanf_r+0x294>)
 800f562:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800f7e0 <__ssvfiscanf_r+0x298>
 800f566:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f56a:	4606      	mov	r6, r0
 800f56c:	4692      	mov	sl, r2
 800f56e:	91a1      	str	r1, [sp, #644]	; 0x284
 800f570:	9300      	str	r3, [sp, #0]
 800f572:	270a      	movs	r7, #10
 800f574:	f89a 3000 	ldrb.w	r3, [sl]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	f000 812a 	beq.w	800f7d2 <__ssvfiscanf_r+0x28a>
 800f57e:	4655      	mov	r5, sl
 800f580:	f7ff f976 	bl	800e870 <__locale_ctype_ptr>
 800f584:	f815 bb01 	ldrb.w	fp, [r5], #1
 800f588:	4458      	add	r0, fp
 800f58a:	7843      	ldrb	r3, [r0, #1]
 800f58c:	f013 0308 	ands.w	r3, r3, #8
 800f590:	d01c      	beq.n	800f5cc <__ssvfiscanf_r+0x84>
 800f592:	6863      	ldr	r3, [r4, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	dd12      	ble.n	800f5be <__ssvfiscanf_r+0x76>
 800f598:	f7ff f96a 	bl	800e870 <__locale_ctype_ptr>
 800f59c:	6823      	ldr	r3, [r4, #0]
 800f59e:	781a      	ldrb	r2, [r3, #0]
 800f5a0:	4410      	add	r0, r2
 800f5a2:	7842      	ldrb	r2, [r0, #1]
 800f5a4:	0712      	lsls	r2, r2, #28
 800f5a6:	d401      	bmi.n	800f5ac <__ssvfiscanf_r+0x64>
 800f5a8:	46aa      	mov	sl, r5
 800f5aa:	e7e3      	b.n	800f574 <__ssvfiscanf_r+0x2c>
 800f5ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f5ae:	3201      	adds	r2, #1
 800f5b0:	9245      	str	r2, [sp, #276]	; 0x114
 800f5b2:	6862      	ldr	r2, [r4, #4]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	3a01      	subs	r2, #1
 800f5b8:	6062      	str	r2, [r4, #4]
 800f5ba:	6023      	str	r3, [r4, #0]
 800f5bc:	e7e9      	b.n	800f592 <__ssvfiscanf_r+0x4a>
 800f5be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f5c0:	4621      	mov	r1, r4
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	4798      	blx	r3
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d0e6      	beq.n	800f598 <__ssvfiscanf_r+0x50>
 800f5ca:	e7ed      	b.n	800f5a8 <__ssvfiscanf_r+0x60>
 800f5cc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800f5d0:	f040 8082 	bne.w	800f6d8 <__ssvfiscanf_r+0x190>
 800f5d4:	9343      	str	r3, [sp, #268]	; 0x10c
 800f5d6:	9341      	str	r3, [sp, #260]	; 0x104
 800f5d8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800f5dc:	2b2a      	cmp	r3, #42	; 0x2a
 800f5de:	d103      	bne.n	800f5e8 <__ssvfiscanf_r+0xa0>
 800f5e0:	2310      	movs	r3, #16
 800f5e2:	9341      	str	r3, [sp, #260]	; 0x104
 800f5e4:	f10a 0502 	add.w	r5, sl, #2
 800f5e8:	46aa      	mov	sl, r5
 800f5ea:	f815 1b01 	ldrb.w	r1, [r5], #1
 800f5ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f5f2:	2a09      	cmp	r2, #9
 800f5f4:	d922      	bls.n	800f63c <__ssvfiscanf_r+0xf4>
 800f5f6:	2203      	movs	r2, #3
 800f5f8:	4879      	ldr	r0, [pc, #484]	; (800f7e0 <__ssvfiscanf_r+0x298>)
 800f5fa:	f7f0 fdf9 	bl	80001f0 <memchr>
 800f5fe:	b138      	cbz	r0, 800f610 <__ssvfiscanf_r+0xc8>
 800f600:	eba0 0309 	sub.w	r3, r0, r9
 800f604:	2001      	movs	r0, #1
 800f606:	4098      	lsls	r0, r3
 800f608:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f60a:	4318      	orrs	r0, r3
 800f60c:	9041      	str	r0, [sp, #260]	; 0x104
 800f60e:	46aa      	mov	sl, r5
 800f610:	f89a 3000 	ldrb.w	r3, [sl]
 800f614:	2b67      	cmp	r3, #103	; 0x67
 800f616:	f10a 0501 	add.w	r5, sl, #1
 800f61a:	d82b      	bhi.n	800f674 <__ssvfiscanf_r+0x12c>
 800f61c:	2b65      	cmp	r3, #101	; 0x65
 800f61e:	f080 809f 	bcs.w	800f760 <__ssvfiscanf_r+0x218>
 800f622:	2b47      	cmp	r3, #71	; 0x47
 800f624:	d810      	bhi.n	800f648 <__ssvfiscanf_r+0x100>
 800f626:	2b45      	cmp	r3, #69	; 0x45
 800f628:	f080 809a 	bcs.w	800f760 <__ssvfiscanf_r+0x218>
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d06c      	beq.n	800f70a <__ssvfiscanf_r+0x1c2>
 800f630:	2b25      	cmp	r3, #37	; 0x25
 800f632:	d051      	beq.n	800f6d8 <__ssvfiscanf_r+0x190>
 800f634:	2303      	movs	r3, #3
 800f636:	9347      	str	r3, [sp, #284]	; 0x11c
 800f638:	9742      	str	r7, [sp, #264]	; 0x108
 800f63a:	e027      	b.n	800f68c <__ssvfiscanf_r+0x144>
 800f63c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f63e:	fb07 1303 	mla	r3, r7, r3, r1
 800f642:	3b30      	subs	r3, #48	; 0x30
 800f644:	9343      	str	r3, [sp, #268]	; 0x10c
 800f646:	e7cf      	b.n	800f5e8 <__ssvfiscanf_r+0xa0>
 800f648:	2b5b      	cmp	r3, #91	; 0x5b
 800f64a:	d06a      	beq.n	800f722 <__ssvfiscanf_r+0x1da>
 800f64c:	d80c      	bhi.n	800f668 <__ssvfiscanf_r+0x120>
 800f64e:	2b58      	cmp	r3, #88	; 0x58
 800f650:	d1f0      	bne.n	800f634 <__ssvfiscanf_r+0xec>
 800f652:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f658:	9241      	str	r2, [sp, #260]	; 0x104
 800f65a:	2210      	movs	r2, #16
 800f65c:	9242      	str	r2, [sp, #264]	; 0x108
 800f65e:	2b6e      	cmp	r3, #110	; 0x6e
 800f660:	bf8c      	ite	hi
 800f662:	2304      	movhi	r3, #4
 800f664:	2303      	movls	r3, #3
 800f666:	e010      	b.n	800f68a <__ssvfiscanf_r+0x142>
 800f668:	2b63      	cmp	r3, #99	; 0x63
 800f66a:	d065      	beq.n	800f738 <__ssvfiscanf_r+0x1f0>
 800f66c:	2b64      	cmp	r3, #100	; 0x64
 800f66e:	d1e1      	bne.n	800f634 <__ssvfiscanf_r+0xec>
 800f670:	9742      	str	r7, [sp, #264]	; 0x108
 800f672:	e7f4      	b.n	800f65e <__ssvfiscanf_r+0x116>
 800f674:	2b70      	cmp	r3, #112	; 0x70
 800f676:	d04b      	beq.n	800f710 <__ssvfiscanf_r+0x1c8>
 800f678:	d826      	bhi.n	800f6c8 <__ssvfiscanf_r+0x180>
 800f67a:	2b6e      	cmp	r3, #110	; 0x6e
 800f67c:	d062      	beq.n	800f744 <__ssvfiscanf_r+0x1fc>
 800f67e:	d84c      	bhi.n	800f71a <__ssvfiscanf_r+0x1d2>
 800f680:	2b69      	cmp	r3, #105	; 0x69
 800f682:	d1d7      	bne.n	800f634 <__ssvfiscanf_r+0xec>
 800f684:	2300      	movs	r3, #0
 800f686:	9342      	str	r3, [sp, #264]	; 0x108
 800f688:	2303      	movs	r3, #3
 800f68a:	9347      	str	r3, [sp, #284]	; 0x11c
 800f68c:	6863      	ldr	r3, [r4, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	dd68      	ble.n	800f764 <__ssvfiscanf_r+0x21c>
 800f692:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f694:	0659      	lsls	r1, r3, #25
 800f696:	d407      	bmi.n	800f6a8 <__ssvfiscanf_r+0x160>
 800f698:	f7ff f8ea 	bl	800e870 <__locale_ctype_ptr>
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	781a      	ldrb	r2, [r3, #0]
 800f6a0:	4410      	add	r0, r2
 800f6a2:	7842      	ldrb	r2, [r0, #1]
 800f6a4:	0712      	lsls	r2, r2, #28
 800f6a6:	d464      	bmi.n	800f772 <__ssvfiscanf_r+0x22a>
 800f6a8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f6aa:	2b02      	cmp	r3, #2
 800f6ac:	dc73      	bgt.n	800f796 <__ssvfiscanf_r+0x24e>
 800f6ae:	466b      	mov	r3, sp
 800f6b0:	4622      	mov	r2, r4
 800f6b2:	a941      	add	r1, sp, #260	; 0x104
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	f000 f9d7 	bl	800fa68 <_scanf_chars>
 800f6ba:	2801      	cmp	r0, #1
 800f6bc:	f000 8089 	beq.w	800f7d2 <__ssvfiscanf_r+0x28a>
 800f6c0:	2802      	cmp	r0, #2
 800f6c2:	f47f af71 	bne.w	800f5a8 <__ssvfiscanf_r+0x60>
 800f6c6:	e01d      	b.n	800f704 <__ssvfiscanf_r+0x1bc>
 800f6c8:	2b75      	cmp	r3, #117	; 0x75
 800f6ca:	d0d1      	beq.n	800f670 <__ssvfiscanf_r+0x128>
 800f6cc:	2b78      	cmp	r3, #120	; 0x78
 800f6ce:	d0c0      	beq.n	800f652 <__ssvfiscanf_r+0x10a>
 800f6d0:	2b73      	cmp	r3, #115	; 0x73
 800f6d2:	d1af      	bne.n	800f634 <__ssvfiscanf_r+0xec>
 800f6d4:	2302      	movs	r3, #2
 800f6d6:	e7d8      	b.n	800f68a <__ssvfiscanf_r+0x142>
 800f6d8:	6863      	ldr	r3, [r4, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	dd0c      	ble.n	800f6f8 <__ssvfiscanf_r+0x1b0>
 800f6de:	6823      	ldr	r3, [r4, #0]
 800f6e0:	781a      	ldrb	r2, [r3, #0]
 800f6e2:	455a      	cmp	r2, fp
 800f6e4:	d175      	bne.n	800f7d2 <__ssvfiscanf_r+0x28a>
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	6862      	ldr	r2, [r4, #4]
 800f6ea:	6023      	str	r3, [r4, #0]
 800f6ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f6ee:	3a01      	subs	r2, #1
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	6062      	str	r2, [r4, #4]
 800f6f4:	9345      	str	r3, [sp, #276]	; 0x114
 800f6f6:	e757      	b.n	800f5a8 <__ssvfiscanf_r+0x60>
 800f6f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f6fa:	4621      	mov	r1, r4
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	4798      	blx	r3
 800f700:	2800      	cmp	r0, #0
 800f702:	d0ec      	beq.n	800f6de <__ssvfiscanf_r+0x196>
 800f704:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f706:	2800      	cmp	r0, #0
 800f708:	d159      	bne.n	800f7be <__ssvfiscanf_r+0x276>
 800f70a:	f04f 30ff 	mov.w	r0, #4294967295
 800f70e:	e05c      	b.n	800f7ca <__ssvfiscanf_r+0x282>
 800f710:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f712:	f042 0220 	orr.w	r2, r2, #32
 800f716:	9241      	str	r2, [sp, #260]	; 0x104
 800f718:	e79b      	b.n	800f652 <__ssvfiscanf_r+0x10a>
 800f71a:	2308      	movs	r3, #8
 800f71c:	9342      	str	r3, [sp, #264]	; 0x108
 800f71e:	2304      	movs	r3, #4
 800f720:	e7b3      	b.n	800f68a <__ssvfiscanf_r+0x142>
 800f722:	4629      	mov	r1, r5
 800f724:	4640      	mov	r0, r8
 800f726:	f000 fb09 	bl	800fd3c <__sccl>
 800f72a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f730:	9341      	str	r3, [sp, #260]	; 0x104
 800f732:	4605      	mov	r5, r0
 800f734:	2301      	movs	r3, #1
 800f736:	e7a8      	b.n	800f68a <__ssvfiscanf_r+0x142>
 800f738:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f73a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f73e:	9341      	str	r3, [sp, #260]	; 0x104
 800f740:	2300      	movs	r3, #0
 800f742:	e7a2      	b.n	800f68a <__ssvfiscanf_r+0x142>
 800f744:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f746:	06c3      	lsls	r3, r0, #27
 800f748:	f53f af2e 	bmi.w	800f5a8 <__ssvfiscanf_r+0x60>
 800f74c:	9b00      	ldr	r3, [sp, #0]
 800f74e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f750:	1d19      	adds	r1, r3, #4
 800f752:	9100      	str	r1, [sp, #0]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	07c0      	lsls	r0, r0, #31
 800f758:	bf4c      	ite	mi
 800f75a:	801a      	strhmi	r2, [r3, #0]
 800f75c:	601a      	strpl	r2, [r3, #0]
 800f75e:	e723      	b.n	800f5a8 <__ssvfiscanf_r+0x60>
 800f760:	2305      	movs	r3, #5
 800f762:	e792      	b.n	800f68a <__ssvfiscanf_r+0x142>
 800f764:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f766:	4621      	mov	r1, r4
 800f768:	4630      	mov	r0, r6
 800f76a:	4798      	blx	r3
 800f76c:	2800      	cmp	r0, #0
 800f76e:	d090      	beq.n	800f692 <__ssvfiscanf_r+0x14a>
 800f770:	e7c8      	b.n	800f704 <__ssvfiscanf_r+0x1bc>
 800f772:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f774:	3201      	adds	r2, #1
 800f776:	9245      	str	r2, [sp, #276]	; 0x114
 800f778:	6862      	ldr	r2, [r4, #4]
 800f77a:	3a01      	subs	r2, #1
 800f77c:	2a00      	cmp	r2, #0
 800f77e:	6062      	str	r2, [r4, #4]
 800f780:	dd02      	ble.n	800f788 <__ssvfiscanf_r+0x240>
 800f782:	3301      	adds	r3, #1
 800f784:	6023      	str	r3, [r4, #0]
 800f786:	e787      	b.n	800f698 <__ssvfiscanf_r+0x150>
 800f788:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f78a:	4621      	mov	r1, r4
 800f78c:	4630      	mov	r0, r6
 800f78e:	4798      	blx	r3
 800f790:	2800      	cmp	r0, #0
 800f792:	d081      	beq.n	800f698 <__ssvfiscanf_r+0x150>
 800f794:	e7b6      	b.n	800f704 <__ssvfiscanf_r+0x1bc>
 800f796:	2b04      	cmp	r3, #4
 800f798:	dc06      	bgt.n	800f7a8 <__ssvfiscanf_r+0x260>
 800f79a:	466b      	mov	r3, sp
 800f79c:	4622      	mov	r2, r4
 800f79e:	a941      	add	r1, sp, #260	; 0x104
 800f7a0:	4630      	mov	r0, r6
 800f7a2:	f000 f9c5 	bl	800fb30 <_scanf_i>
 800f7a6:	e788      	b.n	800f6ba <__ssvfiscanf_r+0x172>
 800f7a8:	4b0e      	ldr	r3, [pc, #56]	; (800f7e4 <__ssvfiscanf_r+0x29c>)
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	f43f aefc 	beq.w	800f5a8 <__ssvfiscanf_r+0x60>
 800f7b0:	466b      	mov	r3, sp
 800f7b2:	4622      	mov	r2, r4
 800f7b4:	a941      	add	r1, sp, #260	; 0x104
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	f7fc fac8 	bl	800bd4c <_scanf_float>
 800f7bc:	e77d      	b.n	800f6ba <__ssvfiscanf_r+0x172>
 800f7be:	89a3      	ldrh	r3, [r4, #12]
 800f7c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f7c4:	bf18      	it	ne
 800f7c6:	f04f 30ff 	movne.w	r0, #4294967295
 800f7ca:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800f7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f7d4:	e7f9      	b.n	800f7ca <__ssvfiscanf_r+0x282>
 800f7d6:	bf00      	nop
 800f7d8:	0800f495 	.word	0x0800f495
 800f7dc:	0800f50f 	.word	0x0800f50f
 800f7e0:	08012fc2 	.word	0x08012fc2
 800f7e4:	0800bd4d 	.word	0x0800bd4d

0800f7e8 <__sfputc_r>:
 800f7e8:	6893      	ldr	r3, [r2, #8]
 800f7ea:	3b01      	subs	r3, #1
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	b410      	push	{r4}
 800f7f0:	6093      	str	r3, [r2, #8]
 800f7f2:	da08      	bge.n	800f806 <__sfputc_r+0x1e>
 800f7f4:	6994      	ldr	r4, [r2, #24]
 800f7f6:	42a3      	cmp	r3, r4
 800f7f8:	db01      	blt.n	800f7fe <__sfputc_r+0x16>
 800f7fa:	290a      	cmp	r1, #10
 800f7fc:	d103      	bne.n	800f806 <__sfputc_r+0x1e>
 800f7fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f802:	f7fd bc6b 	b.w	800d0dc <__swbuf_r>
 800f806:	6813      	ldr	r3, [r2, #0]
 800f808:	1c58      	adds	r0, r3, #1
 800f80a:	6010      	str	r0, [r2, #0]
 800f80c:	7019      	strb	r1, [r3, #0]
 800f80e:	4608      	mov	r0, r1
 800f810:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f814:	4770      	bx	lr

0800f816 <__sfputs_r>:
 800f816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f818:	4606      	mov	r6, r0
 800f81a:	460f      	mov	r7, r1
 800f81c:	4614      	mov	r4, r2
 800f81e:	18d5      	adds	r5, r2, r3
 800f820:	42ac      	cmp	r4, r5
 800f822:	d101      	bne.n	800f828 <__sfputs_r+0x12>
 800f824:	2000      	movs	r0, #0
 800f826:	e007      	b.n	800f838 <__sfputs_r+0x22>
 800f828:	463a      	mov	r2, r7
 800f82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f82e:	4630      	mov	r0, r6
 800f830:	f7ff ffda 	bl	800f7e8 <__sfputc_r>
 800f834:	1c43      	adds	r3, r0, #1
 800f836:	d1f3      	bne.n	800f820 <__sfputs_r+0xa>
 800f838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f83c <_vfiprintf_r>:
 800f83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f840:	460c      	mov	r4, r1
 800f842:	b09d      	sub	sp, #116	; 0x74
 800f844:	4617      	mov	r7, r2
 800f846:	461d      	mov	r5, r3
 800f848:	4606      	mov	r6, r0
 800f84a:	b118      	cbz	r0, 800f854 <_vfiprintf_r+0x18>
 800f84c:	6983      	ldr	r3, [r0, #24]
 800f84e:	b90b      	cbnz	r3, 800f854 <_vfiprintf_r+0x18>
 800f850:	f7fe fc5a 	bl	800e108 <__sinit>
 800f854:	4b7c      	ldr	r3, [pc, #496]	; (800fa48 <_vfiprintf_r+0x20c>)
 800f856:	429c      	cmp	r4, r3
 800f858:	d158      	bne.n	800f90c <_vfiprintf_r+0xd0>
 800f85a:	6874      	ldr	r4, [r6, #4]
 800f85c:	89a3      	ldrh	r3, [r4, #12]
 800f85e:	0718      	lsls	r0, r3, #28
 800f860:	d55e      	bpl.n	800f920 <_vfiprintf_r+0xe4>
 800f862:	6923      	ldr	r3, [r4, #16]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d05b      	beq.n	800f920 <_vfiprintf_r+0xe4>
 800f868:	2300      	movs	r3, #0
 800f86a:	9309      	str	r3, [sp, #36]	; 0x24
 800f86c:	2320      	movs	r3, #32
 800f86e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f872:	2330      	movs	r3, #48	; 0x30
 800f874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f878:	9503      	str	r5, [sp, #12]
 800f87a:	f04f 0b01 	mov.w	fp, #1
 800f87e:	46b8      	mov	r8, r7
 800f880:	4645      	mov	r5, r8
 800f882:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f886:	b10b      	cbz	r3, 800f88c <_vfiprintf_r+0x50>
 800f888:	2b25      	cmp	r3, #37	; 0x25
 800f88a:	d154      	bne.n	800f936 <_vfiprintf_r+0xfa>
 800f88c:	ebb8 0a07 	subs.w	sl, r8, r7
 800f890:	d00b      	beq.n	800f8aa <_vfiprintf_r+0x6e>
 800f892:	4653      	mov	r3, sl
 800f894:	463a      	mov	r2, r7
 800f896:	4621      	mov	r1, r4
 800f898:	4630      	mov	r0, r6
 800f89a:	f7ff ffbc 	bl	800f816 <__sfputs_r>
 800f89e:	3001      	adds	r0, #1
 800f8a0:	f000 80c2 	beq.w	800fa28 <_vfiprintf_r+0x1ec>
 800f8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8a6:	4453      	add	r3, sl
 800f8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f8aa:	f898 3000 	ldrb.w	r3, [r8]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f000 80ba 	beq.w	800fa28 <_vfiprintf_r+0x1ec>
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8be:	9304      	str	r3, [sp, #16]
 800f8c0:	9307      	str	r3, [sp, #28]
 800f8c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8c6:	931a      	str	r3, [sp, #104]	; 0x68
 800f8c8:	46a8      	mov	r8, r5
 800f8ca:	2205      	movs	r2, #5
 800f8cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f8d0:	485e      	ldr	r0, [pc, #376]	; (800fa4c <_vfiprintf_r+0x210>)
 800f8d2:	f7f0 fc8d 	bl	80001f0 <memchr>
 800f8d6:	9b04      	ldr	r3, [sp, #16]
 800f8d8:	bb78      	cbnz	r0, 800f93a <_vfiprintf_r+0xfe>
 800f8da:	06d9      	lsls	r1, r3, #27
 800f8dc:	bf44      	itt	mi
 800f8de:	2220      	movmi	r2, #32
 800f8e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f8e4:	071a      	lsls	r2, r3, #28
 800f8e6:	bf44      	itt	mi
 800f8e8:	222b      	movmi	r2, #43	; 0x2b
 800f8ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f8ee:	782a      	ldrb	r2, [r5, #0]
 800f8f0:	2a2a      	cmp	r2, #42	; 0x2a
 800f8f2:	d02a      	beq.n	800f94a <_vfiprintf_r+0x10e>
 800f8f4:	9a07      	ldr	r2, [sp, #28]
 800f8f6:	46a8      	mov	r8, r5
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	250a      	movs	r5, #10
 800f8fc:	4641      	mov	r1, r8
 800f8fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f902:	3b30      	subs	r3, #48	; 0x30
 800f904:	2b09      	cmp	r3, #9
 800f906:	d969      	bls.n	800f9dc <_vfiprintf_r+0x1a0>
 800f908:	b360      	cbz	r0, 800f964 <_vfiprintf_r+0x128>
 800f90a:	e024      	b.n	800f956 <_vfiprintf_r+0x11a>
 800f90c:	4b50      	ldr	r3, [pc, #320]	; (800fa50 <_vfiprintf_r+0x214>)
 800f90e:	429c      	cmp	r4, r3
 800f910:	d101      	bne.n	800f916 <_vfiprintf_r+0xda>
 800f912:	68b4      	ldr	r4, [r6, #8]
 800f914:	e7a2      	b.n	800f85c <_vfiprintf_r+0x20>
 800f916:	4b4f      	ldr	r3, [pc, #316]	; (800fa54 <_vfiprintf_r+0x218>)
 800f918:	429c      	cmp	r4, r3
 800f91a:	bf08      	it	eq
 800f91c:	68f4      	ldreq	r4, [r6, #12]
 800f91e:	e79d      	b.n	800f85c <_vfiprintf_r+0x20>
 800f920:	4621      	mov	r1, r4
 800f922:	4630      	mov	r0, r6
 800f924:	f7fd fc3e 	bl	800d1a4 <__swsetup_r>
 800f928:	2800      	cmp	r0, #0
 800f92a:	d09d      	beq.n	800f868 <_vfiprintf_r+0x2c>
 800f92c:	f04f 30ff 	mov.w	r0, #4294967295
 800f930:	b01d      	add	sp, #116	; 0x74
 800f932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f936:	46a8      	mov	r8, r5
 800f938:	e7a2      	b.n	800f880 <_vfiprintf_r+0x44>
 800f93a:	4a44      	ldr	r2, [pc, #272]	; (800fa4c <_vfiprintf_r+0x210>)
 800f93c:	1a80      	subs	r0, r0, r2
 800f93e:	fa0b f000 	lsl.w	r0, fp, r0
 800f942:	4318      	orrs	r0, r3
 800f944:	9004      	str	r0, [sp, #16]
 800f946:	4645      	mov	r5, r8
 800f948:	e7be      	b.n	800f8c8 <_vfiprintf_r+0x8c>
 800f94a:	9a03      	ldr	r2, [sp, #12]
 800f94c:	1d11      	adds	r1, r2, #4
 800f94e:	6812      	ldr	r2, [r2, #0]
 800f950:	9103      	str	r1, [sp, #12]
 800f952:	2a00      	cmp	r2, #0
 800f954:	db01      	blt.n	800f95a <_vfiprintf_r+0x11e>
 800f956:	9207      	str	r2, [sp, #28]
 800f958:	e004      	b.n	800f964 <_vfiprintf_r+0x128>
 800f95a:	4252      	negs	r2, r2
 800f95c:	f043 0302 	orr.w	r3, r3, #2
 800f960:	9207      	str	r2, [sp, #28]
 800f962:	9304      	str	r3, [sp, #16]
 800f964:	f898 3000 	ldrb.w	r3, [r8]
 800f968:	2b2e      	cmp	r3, #46	; 0x2e
 800f96a:	d10e      	bne.n	800f98a <_vfiprintf_r+0x14e>
 800f96c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f970:	2b2a      	cmp	r3, #42	; 0x2a
 800f972:	d138      	bne.n	800f9e6 <_vfiprintf_r+0x1aa>
 800f974:	9b03      	ldr	r3, [sp, #12]
 800f976:	1d1a      	adds	r2, r3, #4
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	9203      	str	r2, [sp, #12]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	bfb8      	it	lt
 800f980:	f04f 33ff 	movlt.w	r3, #4294967295
 800f984:	f108 0802 	add.w	r8, r8, #2
 800f988:	9305      	str	r3, [sp, #20]
 800f98a:	4d33      	ldr	r5, [pc, #204]	; (800fa58 <_vfiprintf_r+0x21c>)
 800f98c:	f898 1000 	ldrb.w	r1, [r8]
 800f990:	2203      	movs	r2, #3
 800f992:	4628      	mov	r0, r5
 800f994:	f7f0 fc2c 	bl	80001f0 <memchr>
 800f998:	b140      	cbz	r0, 800f9ac <_vfiprintf_r+0x170>
 800f99a:	2340      	movs	r3, #64	; 0x40
 800f99c:	1b40      	subs	r0, r0, r5
 800f99e:	fa03 f000 	lsl.w	r0, r3, r0
 800f9a2:	9b04      	ldr	r3, [sp, #16]
 800f9a4:	4303      	orrs	r3, r0
 800f9a6:	f108 0801 	add.w	r8, r8, #1
 800f9aa:	9304      	str	r3, [sp, #16]
 800f9ac:	f898 1000 	ldrb.w	r1, [r8]
 800f9b0:	482a      	ldr	r0, [pc, #168]	; (800fa5c <_vfiprintf_r+0x220>)
 800f9b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9b6:	2206      	movs	r2, #6
 800f9b8:	f108 0701 	add.w	r7, r8, #1
 800f9bc:	f7f0 fc18 	bl	80001f0 <memchr>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d037      	beq.n	800fa34 <_vfiprintf_r+0x1f8>
 800f9c4:	4b26      	ldr	r3, [pc, #152]	; (800fa60 <_vfiprintf_r+0x224>)
 800f9c6:	bb1b      	cbnz	r3, 800fa10 <_vfiprintf_r+0x1d4>
 800f9c8:	9b03      	ldr	r3, [sp, #12]
 800f9ca:	3307      	adds	r3, #7
 800f9cc:	f023 0307 	bic.w	r3, r3, #7
 800f9d0:	3308      	adds	r3, #8
 800f9d2:	9303      	str	r3, [sp, #12]
 800f9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9d6:	444b      	add	r3, r9
 800f9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f9da:	e750      	b.n	800f87e <_vfiprintf_r+0x42>
 800f9dc:	fb05 3202 	mla	r2, r5, r2, r3
 800f9e0:	2001      	movs	r0, #1
 800f9e2:	4688      	mov	r8, r1
 800f9e4:	e78a      	b.n	800f8fc <_vfiprintf_r+0xc0>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	f108 0801 	add.w	r8, r8, #1
 800f9ec:	9305      	str	r3, [sp, #20]
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	250a      	movs	r5, #10
 800f9f2:	4640      	mov	r0, r8
 800f9f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9f8:	3a30      	subs	r2, #48	; 0x30
 800f9fa:	2a09      	cmp	r2, #9
 800f9fc:	d903      	bls.n	800fa06 <_vfiprintf_r+0x1ca>
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d0c3      	beq.n	800f98a <_vfiprintf_r+0x14e>
 800fa02:	9105      	str	r1, [sp, #20]
 800fa04:	e7c1      	b.n	800f98a <_vfiprintf_r+0x14e>
 800fa06:	fb05 2101 	mla	r1, r5, r1, r2
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	4680      	mov	r8, r0
 800fa0e:	e7f0      	b.n	800f9f2 <_vfiprintf_r+0x1b6>
 800fa10:	ab03      	add	r3, sp, #12
 800fa12:	9300      	str	r3, [sp, #0]
 800fa14:	4622      	mov	r2, r4
 800fa16:	4b13      	ldr	r3, [pc, #76]	; (800fa64 <_vfiprintf_r+0x228>)
 800fa18:	a904      	add	r1, sp, #16
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f7fb fdce 	bl	800b5bc <_printf_float>
 800fa20:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fa24:	4681      	mov	r9, r0
 800fa26:	d1d5      	bne.n	800f9d4 <_vfiprintf_r+0x198>
 800fa28:	89a3      	ldrh	r3, [r4, #12]
 800fa2a:	065b      	lsls	r3, r3, #25
 800fa2c:	f53f af7e 	bmi.w	800f92c <_vfiprintf_r+0xf0>
 800fa30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa32:	e77d      	b.n	800f930 <_vfiprintf_r+0xf4>
 800fa34:	ab03      	add	r3, sp, #12
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	4622      	mov	r2, r4
 800fa3a:	4b0a      	ldr	r3, [pc, #40]	; (800fa64 <_vfiprintf_r+0x228>)
 800fa3c:	a904      	add	r1, sp, #16
 800fa3e:	4630      	mov	r0, r6
 800fa40:	f7fc f872 	bl	800bb28 <_printf_i>
 800fa44:	e7ec      	b.n	800fa20 <_vfiprintf_r+0x1e4>
 800fa46:	bf00      	nop
 800fa48:	08012e70 	.word	0x08012e70
 800fa4c:	08012fbc 	.word	0x08012fbc
 800fa50:	08012e90 	.word	0x08012e90
 800fa54:	08012e50 	.word	0x08012e50
 800fa58:	08012fc2 	.word	0x08012fc2
 800fa5c:	08012fc6 	.word	0x08012fc6
 800fa60:	0800b5bd 	.word	0x0800b5bd
 800fa64:	0800f817 	.word	0x0800f817

0800fa68 <_scanf_chars>:
 800fa68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa6c:	4615      	mov	r5, r2
 800fa6e:	688a      	ldr	r2, [r1, #8]
 800fa70:	4680      	mov	r8, r0
 800fa72:	460c      	mov	r4, r1
 800fa74:	b932      	cbnz	r2, 800fa84 <_scanf_chars+0x1c>
 800fa76:	698a      	ldr	r2, [r1, #24]
 800fa78:	2a00      	cmp	r2, #0
 800fa7a:	bf14      	ite	ne
 800fa7c:	f04f 32ff 	movne.w	r2, #4294967295
 800fa80:	2201      	moveq	r2, #1
 800fa82:	608a      	str	r2, [r1, #8]
 800fa84:	6822      	ldr	r2, [r4, #0]
 800fa86:	06d1      	lsls	r1, r2, #27
 800fa88:	bf5f      	itttt	pl
 800fa8a:	681a      	ldrpl	r2, [r3, #0]
 800fa8c:	1d11      	addpl	r1, r2, #4
 800fa8e:	6019      	strpl	r1, [r3, #0]
 800fa90:	6817      	ldrpl	r7, [r2, #0]
 800fa92:	2600      	movs	r6, #0
 800fa94:	69a3      	ldr	r3, [r4, #24]
 800fa96:	b1db      	cbz	r3, 800fad0 <_scanf_chars+0x68>
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d107      	bne.n	800faac <_scanf_chars+0x44>
 800fa9c:	682b      	ldr	r3, [r5, #0]
 800fa9e:	6962      	ldr	r2, [r4, #20]
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	5cd3      	ldrb	r3, [r2, r3]
 800faa4:	b9a3      	cbnz	r3, 800fad0 <_scanf_chars+0x68>
 800faa6:	2e00      	cmp	r6, #0
 800faa8:	d132      	bne.n	800fb10 <_scanf_chars+0xa8>
 800faaa:	e006      	b.n	800faba <_scanf_chars+0x52>
 800faac:	2b02      	cmp	r3, #2
 800faae:	d007      	beq.n	800fac0 <_scanf_chars+0x58>
 800fab0:	2e00      	cmp	r6, #0
 800fab2:	d12d      	bne.n	800fb10 <_scanf_chars+0xa8>
 800fab4:	69a3      	ldr	r3, [r4, #24]
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d12a      	bne.n	800fb10 <_scanf_chars+0xa8>
 800faba:	2001      	movs	r0, #1
 800fabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac0:	f7fe fed6 	bl	800e870 <__locale_ctype_ptr>
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	4418      	add	r0, r3
 800faca:	7843      	ldrb	r3, [r0, #1]
 800facc:	071b      	lsls	r3, r3, #28
 800face:	d4ef      	bmi.n	800fab0 <_scanf_chars+0x48>
 800fad0:	6823      	ldr	r3, [r4, #0]
 800fad2:	06da      	lsls	r2, r3, #27
 800fad4:	bf5e      	ittt	pl
 800fad6:	682b      	ldrpl	r3, [r5, #0]
 800fad8:	781b      	ldrbpl	r3, [r3, #0]
 800fada:	703b      	strbpl	r3, [r7, #0]
 800fadc:	682a      	ldr	r2, [r5, #0]
 800fade:	686b      	ldr	r3, [r5, #4]
 800fae0:	f102 0201 	add.w	r2, r2, #1
 800fae4:	602a      	str	r2, [r5, #0]
 800fae6:	68a2      	ldr	r2, [r4, #8]
 800fae8:	f103 33ff 	add.w	r3, r3, #4294967295
 800faec:	f102 32ff 	add.w	r2, r2, #4294967295
 800faf0:	606b      	str	r3, [r5, #4]
 800faf2:	f106 0601 	add.w	r6, r6, #1
 800faf6:	bf58      	it	pl
 800faf8:	3701      	addpl	r7, #1
 800fafa:	60a2      	str	r2, [r4, #8]
 800fafc:	b142      	cbz	r2, 800fb10 <_scanf_chars+0xa8>
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	dcc8      	bgt.n	800fa94 <_scanf_chars+0x2c>
 800fb02:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb06:	4629      	mov	r1, r5
 800fb08:	4640      	mov	r0, r8
 800fb0a:	4798      	blx	r3
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d0c1      	beq.n	800fa94 <_scanf_chars+0x2c>
 800fb10:	6823      	ldr	r3, [r4, #0]
 800fb12:	f013 0310 	ands.w	r3, r3, #16
 800fb16:	d105      	bne.n	800fb24 <_scanf_chars+0xbc>
 800fb18:	68e2      	ldr	r2, [r4, #12]
 800fb1a:	3201      	adds	r2, #1
 800fb1c:	60e2      	str	r2, [r4, #12]
 800fb1e:	69a2      	ldr	r2, [r4, #24]
 800fb20:	b102      	cbz	r2, 800fb24 <_scanf_chars+0xbc>
 800fb22:	703b      	strb	r3, [r7, #0]
 800fb24:	6923      	ldr	r3, [r4, #16]
 800fb26:	441e      	add	r6, r3
 800fb28:	6126      	str	r6, [r4, #16]
 800fb2a:	2000      	movs	r0, #0
 800fb2c:	e7c6      	b.n	800fabc <_scanf_chars+0x54>
	...

0800fb30 <_scanf_i>:
 800fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	469a      	mov	sl, r3
 800fb36:	4b74      	ldr	r3, [pc, #464]	; (800fd08 <_scanf_i+0x1d8>)
 800fb38:	460c      	mov	r4, r1
 800fb3a:	4683      	mov	fp, r0
 800fb3c:	4616      	mov	r6, r2
 800fb3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb42:	b087      	sub	sp, #28
 800fb44:	ab03      	add	r3, sp, #12
 800fb46:	68a7      	ldr	r7, [r4, #8]
 800fb48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb4c:	4b6f      	ldr	r3, [pc, #444]	; (800fd0c <_scanf_i+0x1dc>)
 800fb4e:	69a1      	ldr	r1, [r4, #24]
 800fb50:	4a6f      	ldr	r2, [pc, #444]	; (800fd10 <_scanf_i+0x1e0>)
 800fb52:	2903      	cmp	r1, #3
 800fb54:	bf08      	it	eq
 800fb56:	461a      	moveq	r2, r3
 800fb58:	1e7b      	subs	r3, r7, #1
 800fb5a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800fb5e:	bf84      	itt	hi
 800fb60:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fb64:	60a3      	strhi	r3, [r4, #8]
 800fb66:	6823      	ldr	r3, [r4, #0]
 800fb68:	9200      	str	r2, [sp, #0]
 800fb6a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fb6e:	bf88      	it	hi
 800fb70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fb74:	f104 091c 	add.w	r9, r4, #28
 800fb78:	6023      	str	r3, [r4, #0]
 800fb7a:	bf8c      	ite	hi
 800fb7c:	197f      	addhi	r7, r7, r5
 800fb7e:	2700      	movls	r7, #0
 800fb80:	464b      	mov	r3, r9
 800fb82:	f04f 0800 	mov.w	r8, #0
 800fb86:	9301      	str	r3, [sp, #4]
 800fb88:	6831      	ldr	r1, [r6, #0]
 800fb8a:	ab03      	add	r3, sp, #12
 800fb8c:	2202      	movs	r2, #2
 800fb8e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fb92:	7809      	ldrb	r1, [r1, #0]
 800fb94:	f7f0 fb2c 	bl	80001f0 <memchr>
 800fb98:	9b01      	ldr	r3, [sp, #4]
 800fb9a:	b330      	cbz	r0, 800fbea <_scanf_i+0xba>
 800fb9c:	f1b8 0f01 	cmp.w	r8, #1
 800fba0:	d15a      	bne.n	800fc58 <_scanf_i+0x128>
 800fba2:	6862      	ldr	r2, [r4, #4]
 800fba4:	b92a      	cbnz	r2, 800fbb2 <_scanf_i+0x82>
 800fba6:	6822      	ldr	r2, [r4, #0]
 800fba8:	2108      	movs	r1, #8
 800fbaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fbae:	6061      	str	r1, [r4, #4]
 800fbb0:	6022      	str	r2, [r4, #0]
 800fbb2:	6822      	ldr	r2, [r4, #0]
 800fbb4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fbb8:	6022      	str	r2, [r4, #0]
 800fbba:	68a2      	ldr	r2, [r4, #8]
 800fbbc:	1e51      	subs	r1, r2, #1
 800fbbe:	60a1      	str	r1, [r4, #8]
 800fbc0:	b19a      	cbz	r2, 800fbea <_scanf_i+0xba>
 800fbc2:	6832      	ldr	r2, [r6, #0]
 800fbc4:	1c51      	adds	r1, r2, #1
 800fbc6:	6031      	str	r1, [r6, #0]
 800fbc8:	7812      	ldrb	r2, [r2, #0]
 800fbca:	701a      	strb	r2, [r3, #0]
 800fbcc:	1c5d      	adds	r5, r3, #1
 800fbce:	6873      	ldr	r3, [r6, #4]
 800fbd0:	3b01      	subs	r3, #1
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	6073      	str	r3, [r6, #4]
 800fbd6:	dc07      	bgt.n	800fbe8 <_scanf_i+0xb8>
 800fbd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fbdc:	4631      	mov	r1, r6
 800fbde:	4658      	mov	r0, fp
 800fbe0:	4798      	blx	r3
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	f040 8086 	bne.w	800fcf4 <_scanf_i+0x1c4>
 800fbe8:	462b      	mov	r3, r5
 800fbea:	f108 0801 	add.w	r8, r8, #1
 800fbee:	f1b8 0f03 	cmp.w	r8, #3
 800fbf2:	d1c8      	bne.n	800fb86 <_scanf_i+0x56>
 800fbf4:	6862      	ldr	r2, [r4, #4]
 800fbf6:	b90a      	cbnz	r2, 800fbfc <_scanf_i+0xcc>
 800fbf8:	220a      	movs	r2, #10
 800fbfa:	6062      	str	r2, [r4, #4]
 800fbfc:	6862      	ldr	r2, [r4, #4]
 800fbfe:	4945      	ldr	r1, [pc, #276]	; (800fd14 <_scanf_i+0x1e4>)
 800fc00:	6960      	ldr	r0, [r4, #20]
 800fc02:	9301      	str	r3, [sp, #4]
 800fc04:	1a89      	subs	r1, r1, r2
 800fc06:	f000 f899 	bl	800fd3c <__sccl>
 800fc0a:	9b01      	ldr	r3, [sp, #4]
 800fc0c:	f04f 0800 	mov.w	r8, #0
 800fc10:	461d      	mov	r5, r3
 800fc12:	68a3      	ldr	r3, [r4, #8]
 800fc14:	6822      	ldr	r2, [r4, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d03a      	beq.n	800fc90 <_scanf_i+0x160>
 800fc1a:	6831      	ldr	r1, [r6, #0]
 800fc1c:	6960      	ldr	r0, [r4, #20]
 800fc1e:	f891 c000 	ldrb.w	ip, [r1]
 800fc22:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fc26:	2800      	cmp	r0, #0
 800fc28:	d032      	beq.n	800fc90 <_scanf_i+0x160>
 800fc2a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fc2e:	d121      	bne.n	800fc74 <_scanf_i+0x144>
 800fc30:	0510      	lsls	r0, r2, #20
 800fc32:	d51f      	bpl.n	800fc74 <_scanf_i+0x144>
 800fc34:	f108 0801 	add.w	r8, r8, #1
 800fc38:	b117      	cbz	r7, 800fc40 <_scanf_i+0x110>
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	3f01      	subs	r7, #1
 800fc3e:	60a3      	str	r3, [r4, #8]
 800fc40:	6873      	ldr	r3, [r6, #4]
 800fc42:	3b01      	subs	r3, #1
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	6073      	str	r3, [r6, #4]
 800fc48:	dd1b      	ble.n	800fc82 <_scanf_i+0x152>
 800fc4a:	6833      	ldr	r3, [r6, #0]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	6033      	str	r3, [r6, #0]
 800fc50:	68a3      	ldr	r3, [r4, #8]
 800fc52:	3b01      	subs	r3, #1
 800fc54:	60a3      	str	r3, [r4, #8]
 800fc56:	e7dc      	b.n	800fc12 <_scanf_i+0xe2>
 800fc58:	f1b8 0f02 	cmp.w	r8, #2
 800fc5c:	d1ad      	bne.n	800fbba <_scanf_i+0x8a>
 800fc5e:	6822      	ldr	r2, [r4, #0]
 800fc60:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fc64:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fc68:	d1bf      	bne.n	800fbea <_scanf_i+0xba>
 800fc6a:	2110      	movs	r1, #16
 800fc6c:	6061      	str	r1, [r4, #4]
 800fc6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fc72:	e7a1      	b.n	800fbb8 <_scanf_i+0x88>
 800fc74:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fc78:	6022      	str	r2, [r4, #0]
 800fc7a:	780b      	ldrb	r3, [r1, #0]
 800fc7c:	702b      	strb	r3, [r5, #0]
 800fc7e:	3501      	adds	r5, #1
 800fc80:	e7de      	b.n	800fc40 <_scanf_i+0x110>
 800fc82:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fc86:	4631      	mov	r1, r6
 800fc88:	4658      	mov	r0, fp
 800fc8a:	4798      	blx	r3
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	d0df      	beq.n	800fc50 <_scanf_i+0x120>
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	05d9      	lsls	r1, r3, #23
 800fc94:	d50c      	bpl.n	800fcb0 <_scanf_i+0x180>
 800fc96:	454d      	cmp	r5, r9
 800fc98:	d908      	bls.n	800fcac <_scanf_i+0x17c>
 800fc9a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fc9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fca2:	4632      	mov	r2, r6
 800fca4:	4658      	mov	r0, fp
 800fca6:	4798      	blx	r3
 800fca8:	1e6f      	subs	r7, r5, #1
 800fcaa:	463d      	mov	r5, r7
 800fcac:	454d      	cmp	r5, r9
 800fcae:	d029      	beq.n	800fd04 <_scanf_i+0x1d4>
 800fcb0:	6822      	ldr	r2, [r4, #0]
 800fcb2:	f012 0210 	ands.w	r2, r2, #16
 800fcb6:	d113      	bne.n	800fce0 <_scanf_i+0x1b0>
 800fcb8:	702a      	strb	r2, [r5, #0]
 800fcba:	6863      	ldr	r3, [r4, #4]
 800fcbc:	9e00      	ldr	r6, [sp, #0]
 800fcbe:	4649      	mov	r1, r9
 800fcc0:	4658      	mov	r0, fp
 800fcc2:	47b0      	blx	r6
 800fcc4:	f8da 3000 	ldr.w	r3, [sl]
 800fcc8:	6821      	ldr	r1, [r4, #0]
 800fcca:	1d1a      	adds	r2, r3, #4
 800fccc:	f8ca 2000 	str.w	r2, [sl]
 800fcd0:	f011 0f20 	tst.w	r1, #32
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	d010      	beq.n	800fcfa <_scanf_i+0x1ca>
 800fcd8:	6018      	str	r0, [r3, #0]
 800fcda:	68e3      	ldr	r3, [r4, #12]
 800fcdc:	3301      	adds	r3, #1
 800fcde:	60e3      	str	r3, [r4, #12]
 800fce0:	eba5 0509 	sub.w	r5, r5, r9
 800fce4:	44a8      	add	r8, r5
 800fce6:	6925      	ldr	r5, [r4, #16]
 800fce8:	4445      	add	r5, r8
 800fcea:	6125      	str	r5, [r4, #16]
 800fcec:	2000      	movs	r0, #0
 800fcee:	b007      	add	sp, #28
 800fcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf4:	f04f 0800 	mov.w	r8, #0
 800fcf8:	e7ca      	b.n	800fc90 <_scanf_i+0x160>
 800fcfa:	07ca      	lsls	r2, r1, #31
 800fcfc:	bf4c      	ite	mi
 800fcfe:	8018      	strhmi	r0, [r3, #0]
 800fd00:	6018      	strpl	r0, [r3, #0]
 800fd02:	e7ea      	b.n	800fcda <_scanf_i+0x1aa>
 800fd04:	2001      	movs	r0, #1
 800fd06:	e7f2      	b.n	800fcee <_scanf_i+0x1be>
 800fd08:	08012d88 	.word	0x08012d88
 800fd0c:	0800d0b9 	.word	0x0800d0b9
 800fd10:	0800feb9 	.word	0x0800feb9
 800fd14:	08012fdd 	.word	0x08012fdd

0800fd18 <_read_r>:
 800fd18:	b538      	push	{r3, r4, r5, lr}
 800fd1a:	4c07      	ldr	r4, [pc, #28]	; (800fd38 <_read_r+0x20>)
 800fd1c:	4605      	mov	r5, r0
 800fd1e:	4608      	mov	r0, r1
 800fd20:	4611      	mov	r1, r2
 800fd22:	2200      	movs	r2, #0
 800fd24:	6022      	str	r2, [r4, #0]
 800fd26:	461a      	mov	r2, r3
 800fd28:	f7f2 fbae 	bl	8002488 <_read>
 800fd2c:	1c43      	adds	r3, r0, #1
 800fd2e:	d102      	bne.n	800fd36 <_read_r+0x1e>
 800fd30:	6823      	ldr	r3, [r4, #0]
 800fd32:	b103      	cbz	r3, 800fd36 <_read_r+0x1e>
 800fd34:	602b      	str	r3, [r5, #0]
 800fd36:	bd38      	pop	{r3, r4, r5, pc}
 800fd38:	200013d4 	.word	0x200013d4

0800fd3c <__sccl>:
 800fd3c:	b570      	push	{r4, r5, r6, lr}
 800fd3e:	780b      	ldrb	r3, [r1, #0]
 800fd40:	2b5e      	cmp	r3, #94	; 0x5e
 800fd42:	bf13      	iteet	ne
 800fd44:	1c4a      	addne	r2, r1, #1
 800fd46:	1c8a      	addeq	r2, r1, #2
 800fd48:	784b      	ldrbeq	r3, [r1, #1]
 800fd4a:	2100      	movne	r1, #0
 800fd4c:	bf08      	it	eq
 800fd4e:	2101      	moveq	r1, #1
 800fd50:	1e44      	subs	r4, r0, #1
 800fd52:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800fd56:	f804 1f01 	strb.w	r1, [r4, #1]!
 800fd5a:	42ac      	cmp	r4, r5
 800fd5c:	d1fb      	bne.n	800fd56 <__sccl+0x1a>
 800fd5e:	b913      	cbnz	r3, 800fd66 <__sccl+0x2a>
 800fd60:	3a01      	subs	r2, #1
 800fd62:	4610      	mov	r0, r2
 800fd64:	bd70      	pop	{r4, r5, r6, pc}
 800fd66:	f081 0401 	eor.w	r4, r1, #1
 800fd6a:	54c4      	strb	r4, [r0, r3]
 800fd6c:	1c51      	adds	r1, r2, #1
 800fd6e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800fd72:	2d2d      	cmp	r5, #45	; 0x2d
 800fd74:	f101 36ff 	add.w	r6, r1, #4294967295
 800fd78:	460a      	mov	r2, r1
 800fd7a:	d006      	beq.n	800fd8a <__sccl+0x4e>
 800fd7c:	2d5d      	cmp	r5, #93	; 0x5d
 800fd7e:	d0f0      	beq.n	800fd62 <__sccl+0x26>
 800fd80:	b90d      	cbnz	r5, 800fd86 <__sccl+0x4a>
 800fd82:	4632      	mov	r2, r6
 800fd84:	e7ed      	b.n	800fd62 <__sccl+0x26>
 800fd86:	462b      	mov	r3, r5
 800fd88:	e7ef      	b.n	800fd6a <__sccl+0x2e>
 800fd8a:	780e      	ldrb	r6, [r1, #0]
 800fd8c:	2e5d      	cmp	r6, #93	; 0x5d
 800fd8e:	d0fa      	beq.n	800fd86 <__sccl+0x4a>
 800fd90:	42b3      	cmp	r3, r6
 800fd92:	dcf8      	bgt.n	800fd86 <__sccl+0x4a>
 800fd94:	3301      	adds	r3, #1
 800fd96:	429e      	cmp	r6, r3
 800fd98:	54c4      	strb	r4, [r0, r3]
 800fd9a:	dcfb      	bgt.n	800fd94 <__sccl+0x58>
 800fd9c:	3102      	adds	r1, #2
 800fd9e:	e7e6      	b.n	800fd6e <__sccl+0x32>

0800fda0 <strncmp>:
 800fda0:	b510      	push	{r4, lr}
 800fda2:	b16a      	cbz	r2, 800fdc0 <strncmp+0x20>
 800fda4:	3901      	subs	r1, #1
 800fda6:	1884      	adds	r4, r0, r2
 800fda8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fdac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d103      	bne.n	800fdbc <strncmp+0x1c>
 800fdb4:	42a0      	cmp	r0, r4
 800fdb6:	d001      	beq.n	800fdbc <strncmp+0x1c>
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1f5      	bne.n	800fda8 <strncmp+0x8>
 800fdbc:	1a98      	subs	r0, r3, r2
 800fdbe:	bd10      	pop	{r4, pc}
 800fdc0:	4610      	mov	r0, r2
 800fdc2:	e7fc      	b.n	800fdbe <strncmp+0x1e>

0800fdc4 <_strtoul_l.isra.0>:
 800fdc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdc8:	4680      	mov	r8, r0
 800fdca:	4689      	mov	r9, r1
 800fdcc:	4692      	mov	sl, r2
 800fdce:	461e      	mov	r6, r3
 800fdd0:	460f      	mov	r7, r1
 800fdd2:	463d      	mov	r5, r7
 800fdd4:	9808      	ldr	r0, [sp, #32]
 800fdd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdda:	f7fe fd45 	bl	800e868 <__locale_ctype_ptr_l>
 800fdde:	4420      	add	r0, r4
 800fde0:	7843      	ldrb	r3, [r0, #1]
 800fde2:	f013 0308 	ands.w	r3, r3, #8
 800fde6:	d130      	bne.n	800fe4a <_strtoul_l.isra.0+0x86>
 800fde8:	2c2d      	cmp	r4, #45	; 0x2d
 800fdea:	d130      	bne.n	800fe4e <_strtoul_l.isra.0+0x8a>
 800fdec:	787c      	ldrb	r4, [r7, #1]
 800fdee:	1cbd      	adds	r5, r7, #2
 800fdf0:	2101      	movs	r1, #1
 800fdf2:	2e00      	cmp	r6, #0
 800fdf4:	d05c      	beq.n	800feb0 <_strtoul_l.isra.0+0xec>
 800fdf6:	2e10      	cmp	r6, #16
 800fdf8:	d109      	bne.n	800fe0e <_strtoul_l.isra.0+0x4a>
 800fdfa:	2c30      	cmp	r4, #48	; 0x30
 800fdfc:	d107      	bne.n	800fe0e <_strtoul_l.isra.0+0x4a>
 800fdfe:	782b      	ldrb	r3, [r5, #0]
 800fe00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fe04:	2b58      	cmp	r3, #88	; 0x58
 800fe06:	d14e      	bne.n	800fea6 <_strtoul_l.isra.0+0xe2>
 800fe08:	786c      	ldrb	r4, [r5, #1]
 800fe0a:	2610      	movs	r6, #16
 800fe0c:	3502      	adds	r5, #2
 800fe0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe12:	2300      	movs	r3, #0
 800fe14:	fbb2 f2f6 	udiv	r2, r2, r6
 800fe18:	fb06 fc02 	mul.w	ip, r6, r2
 800fe1c:	ea6f 0c0c 	mvn.w	ip, ip
 800fe20:	4618      	mov	r0, r3
 800fe22:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800fe26:	2f09      	cmp	r7, #9
 800fe28:	d817      	bhi.n	800fe5a <_strtoul_l.isra.0+0x96>
 800fe2a:	463c      	mov	r4, r7
 800fe2c:	42a6      	cmp	r6, r4
 800fe2e:	dd23      	ble.n	800fe78 <_strtoul_l.isra.0+0xb4>
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	db1e      	blt.n	800fe72 <_strtoul_l.isra.0+0xae>
 800fe34:	4282      	cmp	r2, r0
 800fe36:	d31c      	bcc.n	800fe72 <_strtoul_l.isra.0+0xae>
 800fe38:	d101      	bne.n	800fe3e <_strtoul_l.isra.0+0x7a>
 800fe3a:	45a4      	cmp	ip, r4
 800fe3c:	db19      	blt.n	800fe72 <_strtoul_l.isra.0+0xae>
 800fe3e:	fb00 4006 	mla	r0, r0, r6, r4
 800fe42:	2301      	movs	r3, #1
 800fe44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe48:	e7eb      	b.n	800fe22 <_strtoul_l.isra.0+0x5e>
 800fe4a:	462f      	mov	r7, r5
 800fe4c:	e7c1      	b.n	800fdd2 <_strtoul_l.isra.0+0xe>
 800fe4e:	2c2b      	cmp	r4, #43	; 0x2b
 800fe50:	bf04      	itt	eq
 800fe52:	1cbd      	addeq	r5, r7, #2
 800fe54:	787c      	ldrbeq	r4, [r7, #1]
 800fe56:	4619      	mov	r1, r3
 800fe58:	e7cb      	b.n	800fdf2 <_strtoul_l.isra.0+0x2e>
 800fe5a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800fe5e:	2f19      	cmp	r7, #25
 800fe60:	d801      	bhi.n	800fe66 <_strtoul_l.isra.0+0xa2>
 800fe62:	3c37      	subs	r4, #55	; 0x37
 800fe64:	e7e2      	b.n	800fe2c <_strtoul_l.isra.0+0x68>
 800fe66:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800fe6a:	2f19      	cmp	r7, #25
 800fe6c:	d804      	bhi.n	800fe78 <_strtoul_l.isra.0+0xb4>
 800fe6e:	3c57      	subs	r4, #87	; 0x57
 800fe70:	e7dc      	b.n	800fe2c <_strtoul_l.isra.0+0x68>
 800fe72:	f04f 33ff 	mov.w	r3, #4294967295
 800fe76:	e7e5      	b.n	800fe44 <_strtoul_l.isra.0+0x80>
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	da09      	bge.n	800fe90 <_strtoul_l.isra.0+0xcc>
 800fe7c:	2322      	movs	r3, #34	; 0x22
 800fe7e:	f8c8 3000 	str.w	r3, [r8]
 800fe82:	f04f 30ff 	mov.w	r0, #4294967295
 800fe86:	f1ba 0f00 	cmp.w	sl, #0
 800fe8a:	d107      	bne.n	800fe9c <_strtoul_l.isra.0+0xd8>
 800fe8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe90:	b101      	cbz	r1, 800fe94 <_strtoul_l.isra.0+0xd0>
 800fe92:	4240      	negs	r0, r0
 800fe94:	f1ba 0f00 	cmp.w	sl, #0
 800fe98:	d0f8      	beq.n	800fe8c <_strtoul_l.isra.0+0xc8>
 800fe9a:	b10b      	cbz	r3, 800fea0 <_strtoul_l.isra.0+0xdc>
 800fe9c:	f105 39ff 	add.w	r9, r5, #4294967295
 800fea0:	f8ca 9000 	str.w	r9, [sl]
 800fea4:	e7f2      	b.n	800fe8c <_strtoul_l.isra.0+0xc8>
 800fea6:	2430      	movs	r4, #48	; 0x30
 800fea8:	2e00      	cmp	r6, #0
 800feaa:	d1b0      	bne.n	800fe0e <_strtoul_l.isra.0+0x4a>
 800feac:	2608      	movs	r6, #8
 800feae:	e7ae      	b.n	800fe0e <_strtoul_l.isra.0+0x4a>
 800feb0:	2c30      	cmp	r4, #48	; 0x30
 800feb2:	d0a4      	beq.n	800fdfe <_strtoul_l.isra.0+0x3a>
 800feb4:	260a      	movs	r6, #10
 800feb6:	e7aa      	b.n	800fe0e <_strtoul_l.isra.0+0x4a>

0800feb8 <_strtoul_r>:
 800feb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800feba:	4c06      	ldr	r4, [pc, #24]	; (800fed4 <_strtoul_r+0x1c>)
 800febc:	4d06      	ldr	r5, [pc, #24]	; (800fed8 <_strtoul_r+0x20>)
 800febe:	6824      	ldr	r4, [r4, #0]
 800fec0:	6a24      	ldr	r4, [r4, #32]
 800fec2:	2c00      	cmp	r4, #0
 800fec4:	bf08      	it	eq
 800fec6:	462c      	moveq	r4, r5
 800fec8:	9400      	str	r4, [sp, #0]
 800feca:	f7ff ff7b 	bl	800fdc4 <_strtoul_l.isra.0>
 800fece:	b003      	add	sp, #12
 800fed0:	bd30      	pop	{r4, r5, pc}
 800fed2:	bf00      	nop
 800fed4:	200001f4 	.word	0x200001f4
 800fed8:	20000258 	.word	0x20000258

0800fedc <__submore>:
 800fedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee0:	460c      	mov	r4, r1
 800fee2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fee8:	4299      	cmp	r1, r3
 800feea:	d11d      	bne.n	800ff28 <__submore+0x4c>
 800feec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fef0:	f7fb fa76 	bl	800b3e0 <_malloc_r>
 800fef4:	b918      	cbnz	r0, 800fefe <__submore+0x22>
 800fef6:	f04f 30ff 	mov.w	r0, #4294967295
 800fefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fefe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff02:	63a3      	str	r3, [r4, #56]	; 0x38
 800ff04:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ff08:	6360      	str	r0, [r4, #52]	; 0x34
 800ff0a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ff0e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ff12:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ff16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ff1a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ff1e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ff22:	6020      	str	r0, [r4, #0]
 800ff24:	2000      	movs	r0, #0
 800ff26:	e7e8      	b.n	800fefa <__submore+0x1e>
 800ff28:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ff2a:	0077      	lsls	r7, r6, #1
 800ff2c:	463a      	mov	r2, r7
 800ff2e:	f000 f858 	bl	800ffe2 <_realloc_r>
 800ff32:	4605      	mov	r5, r0
 800ff34:	2800      	cmp	r0, #0
 800ff36:	d0de      	beq.n	800fef6 <__submore+0x1a>
 800ff38:	eb00 0806 	add.w	r8, r0, r6
 800ff3c:	4601      	mov	r1, r0
 800ff3e:	4632      	mov	r2, r6
 800ff40:	4640      	mov	r0, r8
 800ff42:	f7fe fd3b 	bl	800e9bc <memcpy>
 800ff46:	f8c4 8000 	str.w	r8, [r4]
 800ff4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ff4e:	e7e9      	b.n	800ff24 <__submore+0x48>

0800ff50 <__ascii_wctomb>:
 800ff50:	b149      	cbz	r1, 800ff66 <__ascii_wctomb+0x16>
 800ff52:	2aff      	cmp	r2, #255	; 0xff
 800ff54:	bf85      	ittet	hi
 800ff56:	238a      	movhi	r3, #138	; 0x8a
 800ff58:	6003      	strhi	r3, [r0, #0]
 800ff5a:	700a      	strbls	r2, [r1, #0]
 800ff5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ff60:	bf98      	it	ls
 800ff62:	2001      	movls	r0, #1
 800ff64:	4770      	bx	lr
 800ff66:	4608      	mov	r0, r1
 800ff68:	4770      	bx	lr
	...

0800ff6c <_fstat_r>:
 800ff6c:	b538      	push	{r3, r4, r5, lr}
 800ff6e:	4c07      	ldr	r4, [pc, #28]	; (800ff8c <_fstat_r+0x20>)
 800ff70:	2300      	movs	r3, #0
 800ff72:	4605      	mov	r5, r0
 800ff74:	4608      	mov	r0, r1
 800ff76:	4611      	mov	r1, r2
 800ff78:	6023      	str	r3, [r4, #0]
 800ff7a:	f7f2 faae 	bl	80024da <_fstat>
 800ff7e:	1c43      	adds	r3, r0, #1
 800ff80:	d102      	bne.n	800ff88 <_fstat_r+0x1c>
 800ff82:	6823      	ldr	r3, [r4, #0]
 800ff84:	b103      	cbz	r3, 800ff88 <_fstat_r+0x1c>
 800ff86:	602b      	str	r3, [r5, #0]
 800ff88:	bd38      	pop	{r3, r4, r5, pc}
 800ff8a:	bf00      	nop
 800ff8c:	200013d4 	.word	0x200013d4

0800ff90 <_isatty_r>:
 800ff90:	b538      	push	{r3, r4, r5, lr}
 800ff92:	4c06      	ldr	r4, [pc, #24]	; (800ffac <_isatty_r+0x1c>)
 800ff94:	2300      	movs	r3, #0
 800ff96:	4605      	mov	r5, r0
 800ff98:	4608      	mov	r0, r1
 800ff9a:	6023      	str	r3, [r4, #0]
 800ff9c:	f7f2 faad 	bl	80024fa <_isatty>
 800ffa0:	1c43      	adds	r3, r0, #1
 800ffa2:	d102      	bne.n	800ffaa <_isatty_r+0x1a>
 800ffa4:	6823      	ldr	r3, [r4, #0]
 800ffa6:	b103      	cbz	r3, 800ffaa <_isatty_r+0x1a>
 800ffa8:	602b      	str	r3, [r5, #0]
 800ffaa:	bd38      	pop	{r3, r4, r5, pc}
 800ffac:	200013d4 	.word	0x200013d4

0800ffb0 <memmove>:
 800ffb0:	4288      	cmp	r0, r1
 800ffb2:	b510      	push	{r4, lr}
 800ffb4:	eb01 0302 	add.w	r3, r1, r2
 800ffb8:	d807      	bhi.n	800ffca <memmove+0x1a>
 800ffba:	1e42      	subs	r2, r0, #1
 800ffbc:	4299      	cmp	r1, r3
 800ffbe:	d00a      	beq.n	800ffd6 <memmove+0x26>
 800ffc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffc4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ffc8:	e7f8      	b.n	800ffbc <memmove+0xc>
 800ffca:	4283      	cmp	r3, r0
 800ffcc:	d9f5      	bls.n	800ffba <memmove+0xa>
 800ffce:	1881      	adds	r1, r0, r2
 800ffd0:	1ad2      	subs	r2, r2, r3
 800ffd2:	42d3      	cmn	r3, r2
 800ffd4:	d100      	bne.n	800ffd8 <memmove+0x28>
 800ffd6:	bd10      	pop	{r4, pc}
 800ffd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffdc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ffe0:	e7f7      	b.n	800ffd2 <memmove+0x22>

0800ffe2 <_realloc_r>:
 800ffe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffe4:	4607      	mov	r7, r0
 800ffe6:	4614      	mov	r4, r2
 800ffe8:	460e      	mov	r6, r1
 800ffea:	b921      	cbnz	r1, 800fff6 <_realloc_r+0x14>
 800ffec:	4611      	mov	r1, r2
 800ffee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fff2:	f7fb b9f5 	b.w	800b3e0 <_malloc_r>
 800fff6:	b922      	cbnz	r2, 8010002 <_realloc_r+0x20>
 800fff8:	f7fb f9a4 	bl	800b344 <_free_r>
 800fffc:	4625      	mov	r5, r4
 800fffe:	4628      	mov	r0, r5
 8010000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010002:	f000 f814 	bl	801002e <_malloc_usable_size_r>
 8010006:	42a0      	cmp	r0, r4
 8010008:	d20f      	bcs.n	801002a <_realloc_r+0x48>
 801000a:	4621      	mov	r1, r4
 801000c:	4638      	mov	r0, r7
 801000e:	f7fb f9e7 	bl	800b3e0 <_malloc_r>
 8010012:	4605      	mov	r5, r0
 8010014:	2800      	cmp	r0, #0
 8010016:	d0f2      	beq.n	800fffe <_realloc_r+0x1c>
 8010018:	4631      	mov	r1, r6
 801001a:	4622      	mov	r2, r4
 801001c:	f7fe fcce 	bl	800e9bc <memcpy>
 8010020:	4631      	mov	r1, r6
 8010022:	4638      	mov	r0, r7
 8010024:	f7fb f98e 	bl	800b344 <_free_r>
 8010028:	e7e9      	b.n	800fffe <_realloc_r+0x1c>
 801002a:	4635      	mov	r5, r6
 801002c:	e7e7      	b.n	800fffe <_realloc_r+0x1c>

0801002e <_malloc_usable_size_r>:
 801002e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010032:	1f18      	subs	r0, r3, #4
 8010034:	2b00      	cmp	r3, #0
 8010036:	bfbc      	itt	lt
 8010038:	580b      	ldrlt	r3, [r1, r0]
 801003a:	18c0      	addlt	r0, r0, r3
 801003c:	4770      	bx	lr
	...

08010040 <cos>:
 8010040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010042:	ec51 0b10 	vmov	r0, r1, d0
 8010046:	4a1e      	ldr	r2, [pc, #120]	; (80100c0 <cos+0x80>)
 8010048:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801004c:	4293      	cmp	r3, r2
 801004e:	dc06      	bgt.n	801005e <cos+0x1e>
 8010050:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80100b8 <cos+0x78>
 8010054:	f001 fd94 	bl	8011b80 <__kernel_cos>
 8010058:	ec51 0b10 	vmov	r0, r1, d0
 801005c:	e007      	b.n	801006e <cos+0x2e>
 801005e:	4a19      	ldr	r2, [pc, #100]	; (80100c4 <cos+0x84>)
 8010060:	4293      	cmp	r3, r2
 8010062:	dd09      	ble.n	8010078 <cos+0x38>
 8010064:	ee10 2a10 	vmov	r2, s0
 8010068:	460b      	mov	r3, r1
 801006a:	f7f0 f915 	bl	8000298 <__aeabi_dsub>
 801006e:	ec41 0b10 	vmov	d0, r0, r1
 8010072:	b005      	add	sp, #20
 8010074:	f85d fb04 	ldr.w	pc, [sp], #4
 8010078:	4668      	mov	r0, sp
 801007a:	f001 fadd 	bl	8011638 <__ieee754_rem_pio2>
 801007e:	f000 0003 	and.w	r0, r0, #3
 8010082:	2801      	cmp	r0, #1
 8010084:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010088:	ed9d 0b00 	vldr	d0, [sp]
 801008c:	d007      	beq.n	801009e <cos+0x5e>
 801008e:	2802      	cmp	r0, #2
 8010090:	d00e      	beq.n	80100b0 <cos+0x70>
 8010092:	2800      	cmp	r0, #0
 8010094:	d0de      	beq.n	8010054 <cos+0x14>
 8010096:	2001      	movs	r0, #1
 8010098:	f002 f97a 	bl	8012390 <__kernel_sin>
 801009c:	e7dc      	b.n	8010058 <cos+0x18>
 801009e:	f002 f977 	bl	8012390 <__kernel_sin>
 80100a2:	ec53 2b10 	vmov	r2, r3, d0
 80100a6:	ee10 0a10 	vmov	r0, s0
 80100aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80100ae:	e7de      	b.n	801006e <cos+0x2e>
 80100b0:	f001 fd66 	bl	8011b80 <__kernel_cos>
 80100b4:	e7f5      	b.n	80100a2 <cos+0x62>
 80100b6:	bf00      	nop
	...
 80100c0:	3fe921fb 	.word	0x3fe921fb
 80100c4:	7fefffff 	.word	0x7fefffff

080100c8 <sin>:
 80100c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80100ca:	ec51 0b10 	vmov	r0, r1, d0
 80100ce:	4a20      	ldr	r2, [pc, #128]	; (8010150 <sin+0x88>)
 80100d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80100d4:	4293      	cmp	r3, r2
 80100d6:	dc07      	bgt.n	80100e8 <sin+0x20>
 80100d8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8010148 <sin+0x80>
 80100dc:	2000      	movs	r0, #0
 80100de:	f002 f957 	bl	8012390 <__kernel_sin>
 80100e2:	ec51 0b10 	vmov	r0, r1, d0
 80100e6:	e007      	b.n	80100f8 <sin+0x30>
 80100e8:	4a1a      	ldr	r2, [pc, #104]	; (8010154 <sin+0x8c>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	dd09      	ble.n	8010102 <sin+0x3a>
 80100ee:	ee10 2a10 	vmov	r2, s0
 80100f2:	460b      	mov	r3, r1
 80100f4:	f7f0 f8d0 	bl	8000298 <__aeabi_dsub>
 80100f8:	ec41 0b10 	vmov	d0, r0, r1
 80100fc:	b005      	add	sp, #20
 80100fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8010102:	4668      	mov	r0, sp
 8010104:	f001 fa98 	bl	8011638 <__ieee754_rem_pio2>
 8010108:	f000 0003 	and.w	r0, r0, #3
 801010c:	2801      	cmp	r0, #1
 801010e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010112:	ed9d 0b00 	vldr	d0, [sp]
 8010116:	d004      	beq.n	8010122 <sin+0x5a>
 8010118:	2802      	cmp	r0, #2
 801011a:	d005      	beq.n	8010128 <sin+0x60>
 801011c:	b970      	cbnz	r0, 801013c <sin+0x74>
 801011e:	2001      	movs	r0, #1
 8010120:	e7dd      	b.n	80100de <sin+0x16>
 8010122:	f001 fd2d 	bl	8011b80 <__kernel_cos>
 8010126:	e7dc      	b.n	80100e2 <sin+0x1a>
 8010128:	2001      	movs	r0, #1
 801012a:	f002 f931 	bl	8012390 <__kernel_sin>
 801012e:	ec53 2b10 	vmov	r2, r3, d0
 8010132:	ee10 0a10 	vmov	r0, s0
 8010136:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801013a:	e7dd      	b.n	80100f8 <sin+0x30>
 801013c:	f001 fd20 	bl	8011b80 <__kernel_cos>
 8010140:	e7f5      	b.n	801012e <sin+0x66>
 8010142:	bf00      	nop
 8010144:	f3af 8000 	nop.w
	...
 8010150:	3fe921fb 	.word	0x3fe921fb
 8010154:	7fefffff 	.word	0x7fefffff

08010158 <acos>:
 8010158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801015a:	ed2d 8b02 	vpush	{d8}
 801015e:	4e26      	ldr	r6, [pc, #152]	; (80101f8 <acos+0xa0>)
 8010160:	b08b      	sub	sp, #44	; 0x2c
 8010162:	ec55 4b10 	vmov	r4, r5, d0
 8010166:	f000 fa1b 	bl	80105a0 <__ieee754_acos>
 801016a:	f996 3000 	ldrsb.w	r3, [r6]
 801016e:	eeb0 8a40 	vmov.f32	s16, s0
 8010172:	eef0 8a60 	vmov.f32	s17, s1
 8010176:	3301      	adds	r3, #1
 8010178:	d036      	beq.n	80101e8 <acos+0x90>
 801017a:	4622      	mov	r2, r4
 801017c:	462b      	mov	r3, r5
 801017e:	4620      	mov	r0, r4
 8010180:	4629      	mov	r1, r5
 8010182:	f7f0 fcdb 	bl	8000b3c <__aeabi_dcmpun>
 8010186:	4607      	mov	r7, r0
 8010188:	bb70      	cbnz	r0, 80101e8 <acos+0x90>
 801018a:	ec45 4b10 	vmov	d0, r4, r5
 801018e:	f002 fb5b 	bl	8012848 <fabs>
 8010192:	2200      	movs	r2, #0
 8010194:	4b19      	ldr	r3, [pc, #100]	; (80101fc <acos+0xa4>)
 8010196:	ec51 0b10 	vmov	r0, r1, d0
 801019a:	f7f0 fcc5 	bl	8000b28 <__aeabi_dcmpgt>
 801019e:	b318      	cbz	r0, 80101e8 <acos+0x90>
 80101a0:	2301      	movs	r3, #1
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	4816      	ldr	r0, [pc, #88]	; (8010200 <acos+0xa8>)
 80101a6:	4b17      	ldr	r3, [pc, #92]	; (8010204 <acos+0xac>)
 80101a8:	9301      	str	r3, [sp, #4]
 80101aa:	9708      	str	r7, [sp, #32]
 80101ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80101b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80101b4:	f002 fbe4 	bl	8012980 <nan>
 80101b8:	f996 3000 	ldrsb.w	r3, [r6]
 80101bc:	2b02      	cmp	r3, #2
 80101be:	ed8d 0b06 	vstr	d0, [sp, #24]
 80101c2:	d104      	bne.n	80101ce <acos+0x76>
 80101c4:	f7fb f87c 	bl	800b2c0 <__errno>
 80101c8:	2321      	movs	r3, #33	; 0x21
 80101ca:	6003      	str	r3, [r0, #0]
 80101cc:	e004      	b.n	80101d8 <acos+0x80>
 80101ce:	4668      	mov	r0, sp
 80101d0:	f002 fbd2 	bl	8012978 <matherr>
 80101d4:	2800      	cmp	r0, #0
 80101d6:	d0f5      	beq.n	80101c4 <acos+0x6c>
 80101d8:	9b08      	ldr	r3, [sp, #32]
 80101da:	b11b      	cbz	r3, 80101e4 <acos+0x8c>
 80101dc:	f7fb f870 	bl	800b2c0 <__errno>
 80101e0:	9b08      	ldr	r3, [sp, #32]
 80101e2:	6003      	str	r3, [r0, #0]
 80101e4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80101e8:	eeb0 0a48 	vmov.f32	s0, s16
 80101ec:	eef0 0a68 	vmov.f32	s1, s17
 80101f0:	b00b      	add	sp, #44	; 0x2c
 80101f2:	ecbd 8b02 	vpop	{d8}
 80101f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101f8:	200003c4 	.word	0x200003c4
 80101fc:	3ff00000 	.word	0x3ff00000
 8010200:	08012fc1 	.word	0x08012fc1
 8010204:	080130e9 	.word	0x080130e9

08010208 <atan2>:
 8010208:	f000 bc26 	b.w	8010a58 <__ieee754_atan2>

0801020c <pow>:
 801020c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010210:	ed2d 8b04 	vpush	{d8-d9}
 8010214:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80104e8 <pow+0x2dc>
 8010218:	b08d      	sub	sp, #52	; 0x34
 801021a:	ec57 6b10 	vmov	r6, r7, d0
 801021e:	ec55 4b11 	vmov	r4, r5, d1
 8010222:	f000 fcf9 	bl	8010c18 <__ieee754_pow>
 8010226:	f999 3000 	ldrsb.w	r3, [r9]
 801022a:	9300      	str	r3, [sp, #0]
 801022c:	3301      	adds	r3, #1
 801022e:	eeb0 8a40 	vmov.f32	s16, s0
 8010232:	eef0 8a60 	vmov.f32	s17, s1
 8010236:	46c8      	mov	r8, r9
 8010238:	d05f      	beq.n	80102fa <pow+0xee>
 801023a:	4622      	mov	r2, r4
 801023c:	462b      	mov	r3, r5
 801023e:	4620      	mov	r0, r4
 8010240:	4629      	mov	r1, r5
 8010242:	f7f0 fc7b 	bl	8000b3c <__aeabi_dcmpun>
 8010246:	4683      	mov	fp, r0
 8010248:	2800      	cmp	r0, #0
 801024a:	d156      	bne.n	80102fa <pow+0xee>
 801024c:	4632      	mov	r2, r6
 801024e:	463b      	mov	r3, r7
 8010250:	4630      	mov	r0, r6
 8010252:	4639      	mov	r1, r7
 8010254:	f7f0 fc72 	bl	8000b3c <__aeabi_dcmpun>
 8010258:	9001      	str	r0, [sp, #4]
 801025a:	b1e8      	cbz	r0, 8010298 <pow+0x8c>
 801025c:	2200      	movs	r2, #0
 801025e:	2300      	movs	r3, #0
 8010260:	4620      	mov	r0, r4
 8010262:	4629      	mov	r1, r5
 8010264:	f7f0 fc38 	bl	8000ad8 <__aeabi_dcmpeq>
 8010268:	2800      	cmp	r0, #0
 801026a:	d046      	beq.n	80102fa <pow+0xee>
 801026c:	2301      	movs	r3, #1
 801026e:	9302      	str	r3, [sp, #8]
 8010270:	4b96      	ldr	r3, [pc, #600]	; (80104cc <pow+0x2c0>)
 8010272:	9303      	str	r3, [sp, #12]
 8010274:	4b96      	ldr	r3, [pc, #600]	; (80104d0 <pow+0x2c4>)
 8010276:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801027a:	2200      	movs	r2, #0
 801027c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010280:	9b00      	ldr	r3, [sp, #0]
 8010282:	2b02      	cmp	r3, #2
 8010284:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010288:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801028c:	d033      	beq.n	80102f6 <pow+0xea>
 801028e:	a802      	add	r0, sp, #8
 8010290:	f002 fb72 	bl	8012978 <matherr>
 8010294:	bb48      	cbnz	r0, 80102ea <pow+0xde>
 8010296:	e05d      	b.n	8010354 <pow+0x148>
 8010298:	f04f 0a00 	mov.w	sl, #0
 801029c:	f04f 0b00 	mov.w	fp, #0
 80102a0:	4652      	mov	r2, sl
 80102a2:	465b      	mov	r3, fp
 80102a4:	4630      	mov	r0, r6
 80102a6:	4639      	mov	r1, r7
 80102a8:	f7f0 fc16 	bl	8000ad8 <__aeabi_dcmpeq>
 80102ac:	ec4b ab19 	vmov	d9, sl, fp
 80102b0:	2800      	cmp	r0, #0
 80102b2:	d054      	beq.n	801035e <pow+0x152>
 80102b4:	4652      	mov	r2, sl
 80102b6:	465b      	mov	r3, fp
 80102b8:	4620      	mov	r0, r4
 80102ba:	4629      	mov	r1, r5
 80102bc:	f7f0 fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80102c0:	4680      	mov	r8, r0
 80102c2:	b318      	cbz	r0, 801030c <pow+0x100>
 80102c4:	2301      	movs	r3, #1
 80102c6:	9302      	str	r3, [sp, #8]
 80102c8:	4b80      	ldr	r3, [pc, #512]	; (80104cc <pow+0x2c0>)
 80102ca:	9303      	str	r3, [sp, #12]
 80102cc:	9b01      	ldr	r3, [sp, #4]
 80102ce:	930a      	str	r3, [sp, #40]	; 0x28
 80102d0:	9b00      	ldr	r3, [sp, #0]
 80102d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80102d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80102da:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d0d5      	beq.n	801028e <pow+0x82>
 80102e2:	4b7b      	ldr	r3, [pc, #492]	; (80104d0 <pow+0x2c4>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80102ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102ec:	b11b      	cbz	r3, 80102f6 <pow+0xea>
 80102ee:	f7fa ffe7 	bl	800b2c0 <__errno>
 80102f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102f4:	6003      	str	r3, [r0, #0]
 80102f6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80102fa:	eeb0 0a48 	vmov.f32	s0, s16
 80102fe:	eef0 0a68 	vmov.f32	s1, s17
 8010302:	b00d      	add	sp, #52	; 0x34
 8010304:	ecbd 8b04 	vpop	{d8-d9}
 8010308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801030c:	ec45 4b10 	vmov	d0, r4, r5
 8010310:	f002 faa3 	bl	801285a <finite>
 8010314:	2800      	cmp	r0, #0
 8010316:	d0f0      	beq.n	80102fa <pow+0xee>
 8010318:	4652      	mov	r2, sl
 801031a:	465b      	mov	r3, fp
 801031c:	4620      	mov	r0, r4
 801031e:	4629      	mov	r1, r5
 8010320:	f7f0 fbe4 	bl	8000aec <__aeabi_dcmplt>
 8010324:	2800      	cmp	r0, #0
 8010326:	d0e8      	beq.n	80102fa <pow+0xee>
 8010328:	2301      	movs	r3, #1
 801032a:	9302      	str	r3, [sp, #8]
 801032c:	4b67      	ldr	r3, [pc, #412]	; (80104cc <pow+0x2c0>)
 801032e:	9303      	str	r3, [sp, #12]
 8010330:	f999 3000 	ldrsb.w	r3, [r9]
 8010334:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010338:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801033c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010340:	b913      	cbnz	r3, 8010348 <pow+0x13c>
 8010342:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010346:	e7a2      	b.n	801028e <pow+0x82>
 8010348:	4962      	ldr	r1, [pc, #392]	; (80104d4 <pow+0x2c8>)
 801034a:	2000      	movs	r0, #0
 801034c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010350:	2b02      	cmp	r3, #2
 8010352:	d19c      	bne.n	801028e <pow+0x82>
 8010354:	f7fa ffb4 	bl	800b2c0 <__errno>
 8010358:	2321      	movs	r3, #33	; 0x21
 801035a:	6003      	str	r3, [r0, #0]
 801035c:	e7c5      	b.n	80102ea <pow+0xde>
 801035e:	eeb0 0a48 	vmov.f32	s0, s16
 8010362:	eef0 0a68 	vmov.f32	s1, s17
 8010366:	f002 fa78 	bl	801285a <finite>
 801036a:	9000      	str	r0, [sp, #0]
 801036c:	2800      	cmp	r0, #0
 801036e:	f040 8081 	bne.w	8010474 <pow+0x268>
 8010372:	ec47 6b10 	vmov	d0, r6, r7
 8010376:	f002 fa70 	bl	801285a <finite>
 801037a:	2800      	cmp	r0, #0
 801037c:	d07a      	beq.n	8010474 <pow+0x268>
 801037e:	ec45 4b10 	vmov	d0, r4, r5
 8010382:	f002 fa6a 	bl	801285a <finite>
 8010386:	2800      	cmp	r0, #0
 8010388:	d074      	beq.n	8010474 <pow+0x268>
 801038a:	ec53 2b18 	vmov	r2, r3, d8
 801038e:	ee18 0a10 	vmov	r0, s16
 8010392:	4619      	mov	r1, r3
 8010394:	f7f0 fbd2 	bl	8000b3c <__aeabi_dcmpun>
 8010398:	f999 9000 	ldrsb.w	r9, [r9]
 801039c:	4b4b      	ldr	r3, [pc, #300]	; (80104cc <pow+0x2c0>)
 801039e:	b1b0      	cbz	r0, 80103ce <pow+0x1c2>
 80103a0:	2201      	movs	r2, #1
 80103a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80103a6:	9b00      	ldr	r3, [sp, #0]
 80103a8:	930a      	str	r3, [sp, #40]	; 0x28
 80103aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80103ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80103b2:	f1b9 0f00 	cmp.w	r9, #0
 80103b6:	d0c4      	beq.n	8010342 <pow+0x136>
 80103b8:	4652      	mov	r2, sl
 80103ba:	465b      	mov	r3, fp
 80103bc:	4650      	mov	r0, sl
 80103be:	4659      	mov	r1, fp
 80103c0:	f7f0 fa4c 	bl	800085c <__aeabi_ddiv>
 80103c4:	f1b9 0f02 	cmp.w	r9, #2
 80103c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80103cc:	e7c1      	b.n	8010352 <pow+0x146>
 80103ce:	2203      	movs	r2, #3
 80103d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80103d4:	900a      	str	r0, [sp, #40]	; 0x28
 80103d6:	4629      	mov	r1, r5
 80103d8:	4620      	mov	r0, r4
 80103da:	2200      	movs	r2, #0
 80103dc:	4b3e      	ldr	r3, [pc, #248]	; (80104d8 <pow+0x2cc>)
 80103de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80103e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80103e6:	f7f0 f90f 	bl	8000608 <__aeabi_dmul>
 80103ea:	4604      	mov	r4, r0
 80103ec:	460d      	mov	r5, r1
 80103ee:	f1b9 0f00 	cmp.w	r9, #0
 80103f2:	d124      	bne.n	801043e <pow+0x232>
 80103f4:	4b39      	ldr	r3, [pc, #228]	; (80104dc <pow+0x2d0>)
 80103f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80103fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80103fe:	4630      	mov	r0, r6
 8010400:	4652      	mov	r2, sl
 8010402:	465b      	mov	r3, fp
 8010404:	4639      	mov	r1, r7
 8010406:	f7f0 fb71 	bl	8000aec <__aeabi_dcmplt>
 801040a:	2800      	cmp	r0, #0
 801040c:	d056      	beq.n	80104bc <pow+0x2b0>
 801040e:	ec45 4b10 	vmov	d0, r4, r5
 8010412:	f002 fabd 	bl	8012990 <rint>
 8010416:	4622      	mov	r2, r4
 8010418:	462b      	mov	r3, r5
 801041a:	ec51 0b10 	vmov	r0, r1, d0
 801041e:	f7f0 fb5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8010422:	b920      	cbnz	r0, 801042e <pow+0x222>
 8010424:	4b2e      	ldr	r3, [pc, #184]	; (80104e0 <pow+0x2d4>)
 8010426:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801042a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801042e:	f998 3000 	ldrsb.w	r3, [r8]
 8010432:	2b02      	cmp	r3, #2
 8010434:	d142      	bne.n	80104bc <pow+0x2b0>
 8010436:	f7fa ff43 	bl	800b2c0 <__errno>
 801043a:	2322      	movs	r3, #34	; 0x22
 801043c:	e78d      	b.n	801035a <pow+0x14e>
 801043e:	4b29      	ldr	r3, [pc, #164]	; (80104e4 <pow+0x2d8>)
 8010440:	2200      	movs	r2, #0
 8010442:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010446:	4630      	mov	r0, r6
 8010448:	4652      	mov	r2, sl
 801044a:	465b      	mov	r3, fp
 801044c:	4639      	mov	r1, r7
 801044e:	f7f0 fb4d 	bl	8000aec <__aeabi_dcmplt>
 8010452:	2800      	cmp	r0, #0
 8010454:	d0eb      	beq.n	801042e <pow+0x222>
 8010456:	ec45 4b10 	vmov	d0, r4, r5
 801045a:	f002 fa99 	bl	8012990 <rint>
 801045e:	4622      	mov	r2, r4
 8010460:	462b      	mov	r3, r5
 8010462:	ec51 0b10 	vmov	r0, r1, d0
 8010466:	f7f0 fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 801046a:	2800      	cmp	r0, #0
 801046c:	d1df      	bne.n	801042e <pow+0x222>
 801046e:	2200      	movs	r2, #0
 8010470:	4b18      	ldr	r3, [pc, #96]	; (80104d4 <pow+0x2c8>)
 8010472:	e7da      	b.n	801042a <pow+0x21e>
 8010474:	2200      	movs	r2, #0
 8010476:	2300      	movs	r3, #0
 8010478:	ec51 0b18 	vmov	r0, r1, d8
 801047c:	f7f0 fb2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010480:	2800      	cmp	r0, #0
 8010482:	f43f af3a 	beq.w	80102fa <pow+0xee>
 8010486:	ec47 6b10 	vmov	d0, r6, r7
 801048a:	f002 f9e6 	bl	801285a <finite>
 801048e:	2800      	cmp	r0, #0
 8010490:	f43f af33 	beq.w	80102fa <pow+0xee>
 8010494:	ec45 4b10 	vmov	d0, r4, r5
 8010498:	f002 f9df 	bl	801285a <finite>
 801049c:	2800      	cmp	r0, #0
 801049e:	f43f af2c 	beq.w	80102fa <pow+0xee>
 80104a2:	2304      	movs	r3, #4
 80104a4:	9302      	str	r3, [sp, #8]
 80104a6:	4b09      	ldr	r3, [pc, #36]	; (80104cc <pow+0x2c0>)
 80104a8:	9303      	str	r3, [sp, #12]
 80104aa:	2300      	movs	r3, #0
 80104ac:	930a      	str	r3, [sp, #40]	; 0x28
 80104ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80104b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80104b6:	ed8d 9b08 	vstr	d9, [sp, #32]
 80104ba:	e7b8      	b.n	801042e <pow+0x222>
 80104bc:	a802      	add	r0, sp, #8
 80104be:	f002 fa5b 	bl	8012978 <matherr>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	f47f af11 	bne.w	80102ea <pow+0xde>
 80104c8:	e7b5      	b.n	8010436 <pow+0x22a>
 80104ca:	bf00      	nop
 80104cc:	080130ee 	.word	0x080130ee
 80104d0:	3ff00000 	.word	0x3ff00000
 80104d4:	fff00000 	.word	0xfff00000
 80104d8:	3fe00000 	.word	0x3fe00000
 80104dc:	47efffff 	.word	0x47efffff
 80104e0:	c7efffff 	.word	0xc7efffff
 80104e4:	7ff00000 	.word	0x7ff00000
 80104e8:	200003c4 	.word	0x200003c4

080104ec <sqrt>:
 80104ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104f0:	ed2d 8b02 	vpush	{d8}
 80104f4:	b08b      	sub	sp, #44	; 0x2c
 80104f6:	ec55 4b10 	vmov	r4, r5, d0
 80104fa:	f001 fa8f 	bl	8011a1c <__ieee754_sqrt>
 80104fe:	4b26      	ldr	r3, [pc, #152]	; (8010598 <sqrt+0xac>)
 8010500:	eeb0 8a40 	vmov.f32	s16, s0
 8010504:	eef0 8a60 	vmov.f32	s17, s1
 8010508:	f993 6000 	ldrsb.w	r6, [r3]
 801050c:	1c73      	adds	r3, r6, #1
 801050e:	d02a      	beq.n	8010566 <sqrt+0x7a>
 8010510:	4622      	mov	r2, r4
 8010512:	462b      	mov	r3, r5
 8010514:	4620      	mov	r0, r4
 8010516:	4629      	mov	r1, r5
 8010518:	f7f0 fb10 	bl	8000b3c <__aeabi_dcmpun>
 801051c:	4607      	mov	r7, r0
 801051e:	bb10      	cbnz	r0, 8010566 <sqrt+0x7a>
 8010520:	f04f 0800 	mov.w	r8, #0
 8010524:	f04f 0900 	mov.w	r9, #0
 8010528:	4642      	mov	r2, r8
 801052a:	464b      	mov	r3, r9
 801052c:	4620      	mov	r0, r4
 801052e:	4629      	mov	r1, r5
 8010530:	f7f0 fadc 	bl	8000aec <__aeabi_dcmplt>
 8010534:	b1b8      	cbz	r0, 8010566 <sqrt+0x7a>
 8010536:	2301      	movs	r3, #1
 8010538:	9300      	str	r3, [sp, #0]
 801053a:	4b18      	ldr	r3, [pc, #96]	; (801059c <sqrt+0xb0>)
 801053c:	9301      	str	r3, [sp, #4]
 801053e:	9708      	str	r7, [sp, #32]
 8010540:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010544:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010548:	b9b6      	cbnz	r6, 8010578 <sqrt+0x8c>
 801054a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801054e:	4668      	mov	r0, sp
 8010550:	f002 fa12 	bl	8012978 <matherr>
 8010554:	b1d0      	cbz	r0, 801058c <sqrt+0xa0>
 8010556:	9b08      	ldr	r3, [sp, #32]
 8010558:	b11b      	cbz	r3, 8010562 <sqrt+0x76>
 801055a:	f7fa feb1 	bl	800b2c0 <__errno>
 801055e:	9b08      	ldr	r3, [sp, #32]
 8010560:	6003      	str	r3, [r0, #0]
 8010562:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010566:	eeb0 0a48 	vmov.f32	s0, s16
 801056a:	eef0 0a68 	vmov.f32	s1, s17
 801056e:	b00b      	add	sp, #44	; 0x2c
 8010570:	ecbd 8b02 	vpop	{d8}
 8010574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010578:	4642      	mov	r2, r8
 801057a:	464b      	mov	r3, r9
 801057c:	4640      	mov	r0, r8
 801057e:	4649      	mov	r1, r9
 8010580:	f7f0 f96c 	bl	800085c <__aeabi_ddiv>
 8010584:	2e02      	cmp	r6, #2
 8010586:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801058a:	d1e0      	bne.n	801054e <sqrt+0x62>
 801058c:	f7fa fe98 	bl	800b2c0 <__errno>
 8010590:	2321      	movs	r3, #33	; 0x21
 8010592:	6003      	str	r3, [r0, #0]
 8010594:	e7df      	b.n	8010556 <sqrt+0x6a>
 8010596:	bf00      	nop
 8010598:	200003c4 	.word	0x200003c4
 801059c:	080130f2 	.word	0x080130f2

080105a0 <__ieee754_acos>:
 80105a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a4:	ec55 4b10 	vmov	r4, r5, d0
 80105a8:	49b7      	ldr	r1, [pc, #732]	; (8010888 <__ieee754_acos+0x2e8>)
 80105aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80105ae:	428b      	cmp	r3, r1
 80105b0:	dd1b      	ble.n	80105ea <__ieee754_acos+0x4a>
 80105b2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80105b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80105ba:	4323      	orrs	r3, r4
 80105bc:	d109      	bne.n	80105d2 <__ieee754_acos+0x32>
 80105be:	2d00      	cmp	r5, #0
 80105c0:	f300 8211 	bgt.w	80109e6 <__ieee754_acos+0x446>
 80105c4:	a196      	add	r1, pc, #600	; (adr r1, 8010820 <__ieee754_acos+0x280>)
 80105c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105ca:	ec41 0b10 	vmov	d0, r0, r1
 80105ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d2:	ee10 2a10 	vmov	r2, s0
 80105d6:	462b      	mov	r3, r5
 80105d8:	4620      	mov	r0, r4
 80105da:	4629      	mov	r1, r5
 80105dc:	f7ef fe5c 	bl	8000298 <__aeabi_dsub>
 80105e0:	4602      	mov	r2, r0
 80105e2:	460b      	mov	r3, r1
 80105e4:	f7f0 f93a 	bl	800085c <__aeabi_ddiv>
 80105e8:	e7ef      	b.n	80105ca <__ieee754_acos+0x2a>
 80105ea:	49a8      	ldr	r1, [pc, #672]	; (801088c <__ieee754_acos+0x2ec>)
 80105ec:	428b      	cmp	r3, r1
 80105ee:	f300 8087 	bgt.w	8010700 <__ieee754_acos+0x160>
 80105f2:	4aa7      	ldr	r2, [pc, #668]	; (8010890 <__ieee754_acos+0x2f0>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	f340 81f9 	ble.w	80109ec <__ieee754_acos+0x44c>
 80105fa:	ee10 2a10 	vmov	r2, s0
 80105fe:	ee10 0a10 	vmov	r0, s0
 8010602:	462b      	mov	r3, r5
 8010604:	4629      	mov	r1, r5
 8010606:	f7ef ffff 	bl	8000608 <__aeabi_dmul>
 801060a:	a387      	add	r3, pc, #540	; (adr r3, 8010828 <__ieee754_acos+0x288>)
 801060c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010610:	4606      	mov	r6, r0
 8010612:	460f      	mov	r7, r1
 8010614:	f7ef fff8 	bl	8000608 <__aeabi_dmul>
 8010618:	a385      	add	r3, pc, #532	; (adr r3, 8010830 <__ieee754_acos+0x290>)
 801061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061e:	f7ef fe3d 	bl	800029c <__adddf3>
 8010622:	4632      	mov	r2, r6
 8010624:	463b      	mov	r3, r7
 8010626:	f7ef ffef 	bl	8000608 <__aeabi_dmul>
 801062a:	a383      	add	r3, pc, #524	; (adr r3, 8010838 <__ieee754_acos+0x298>)
 801062c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010630:	f7ef fe32 	bl	8000298 <__aeabi_dsub>
 8010634:	4632      	mov	r2, r6
 8010636:	463b      	mov	r3, r7
 8010638:	f7ef ffe6 	bl	8000608 <__aeabi_dmul>
 801063c:	a380      	add	r3, pc, #512	; (adr r3, 8010840 <__ieee754_acos+0x2a0>)
 801063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010642:	f7ef fe2b 	bl	800029c <__adddf3>
 8010646:	4632      	mov	r2, r6
 8010648:	463b      	mov	r3, r7
 801064a:	f7ef ffdd 	bl	8000608 <__aeabi_dmul>
 801064e:	a37e      	add	r3, pc, #504	; (adr r3, 8010848 <__ieee754_acos+0x2a8>)
 8010650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010654:	f7ef fe20 	bl	8000298 <__aeabi_dsub>
 8010658:	4632      	mov	r2, r6
 801065a:	463b      	mov	r3, r7
 801065c:	f7ef ffd4 	bl	8000608 <__aeabi_dmul>
 8010660:	a37b      	add	r3, pc, #492	; (adr r3, 8010850 <__ieee754_acos+0x2b0>)
 8010662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010666:	f7ef fe19 	bl	800029c <__adddf3>
 801066a:	4632      	mov	r2, r6
 801066c:	463b      	mov	r3, r7
 801066e:	f7ef ffcb 	bl	8000608 <__aeabi_dmul>
 8010672:	a379      	add	r3, pc, #484	; (adr r3, 8010858 <__ieee754_acos+0x2b8>)
 8010674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010678:	4680      	mov	r8, r0
 801067a:	4689      	mov	r9, r1
 801067c:	4630      	mov	r0, r6
 801067e:	4639      	mov	r1, r7
 8010680:	f7ef ffc2 	bl	8000608 <__aeabi_dmul>
 8010684:	a376      	add	r3, pc, #472	; (adr r3, 8010860 <__ieee754_acos+0x2c0>)
 8010686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068a:	f7ef fe05 	bl	8000298 <__aeabi_dsub>
 801068e:	4632      	mov	r2, r6
 8010690:	463b      	mov	r3, r7
 8010692:	f7ef ffb9 	bl	8000608 <__aeabi_dmul>
 8010696:	a374      	add	r3, pc, #464	; (adr r3, 8010868 <__ieee754_acos+0x2c8>)
 8010698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069c:	f7ef fdfe 	bl	800029c <__adddf3>
 80106a0:	4632      	mov	r2, r6
 80106a2:	463b      	mov	r3, r7
 80106a4:	f7ef ffb0 	bl	8000608 <__aeabi_dmul>
 80106a8:	a371      	add	r3, pc, #452	; (adr r3, 8010870 <__ieee754_acos+0x2d0>)
 80106aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ae:	f7ef fdf3 	bl	8000298 <__aeabi_dsub>
 80106b2:	4632      	mov	r2, r6
 80106b4:	463b      	mov	r3, r7
 80106b6:	f7ef ffa7 	bl	8000608 <__aeabi_dmul>
 80106ba:	2200      	movs	r2, #0
 80106bc:	4b75      	ldr	r3, [pc, #468]	; (8010894 <__ieee754_acos+0x2f4>)
 80106be:	f7ef fded 	bl	800029c <__adddf3>
 80106c2:	4602      	mov	r2, r0
 80106c4:	460b      	mov	r3, r1
 80106c6:	4640      	mov	r0, r8
 80106c8:	4649      	mov	r1, r9
 80106ca:	f7f0 f8c7 	bl	800085c <__aeabi_ddiv>
 80106ce:	4622      	mov	r2, r4
 80106d0:	462b      	mov	r3, r5
 80106d2:	f7ef ff99 	bl	8000608 <__aeabi_dmul>
 80106d6:	4602      	mov	r2, r0
 80106d8:	460b      	mov	r3, r1
 80106da:	a167      	add	r1, pc, #412	; (adr r1, 8010878 <__ieee754_acos+0x2d8>)
 80106dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106e0:	f7ef fdda 	bl	8000298 <__aeabi_dsub>
 80106e4:	4602      	mov	r2, r0
 80106e6:	460b      	mov	r3, r1
 80106e8:	4620      	mov	r0, r4
 80106ea:	4629      	mov	r1, r5
 80106ec:	f7ef fdd4 	bl	8000298 <__aeabi_dsub>
 80106f0:	4602      	mov	r2, r0
 80106f2:	460b      	mov	r3, r1
 80106f4:	a162      	add	r1, pc, #392	; (adr r1, 8010880 <__ieee754_acos+0x2e0>)
 80106f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106fa:	f7ef fdcd 	bl	8000298 <__aeabi_dsub>
 80106fe:	e764      	b.n	80105ca <__ieee754_acos+0x2a>
 8010700:	2d00      	cmp	r5, #0
 8010702:	f280 80cb 	bge.w	801089c <__ieee754_acos+0x2fc>
 8010706:	ee10 0a10 	vmov	r0, s0
 801070a:	2200      	movs	r2, #0
 801070c:	4b61      	ldr	r3, [pc, #388]	; (8010894 <__ieee754_acos+0x2f4>)
 801070e:	4629      	mov	r1, r5
 8010710:	f7ef fdc4 	bl	800029c <__adddf3>
 8010714:	2200      	movs	r2, #0
 8010716:	4b60      	ldr	r3, [pc, #384]	; (8010898 <__ieee754_acos+0x2f8>)
 8010718:	f7ef ff76 	bl	8000608 <__aeabi_dmul>
 801071c:	a342      	add	r3, pc, #264	; (adr r3, 8010828 <__ieee754_acos+0x288>)
 801071e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010722:	4604      	mov	r4, r0
 8010724:	460d      	mov	r5, r1
 8010726:	f7ef ff6f 	bl	8000608 <__aeabi_dmul>
 801072a:	a341      	add	r3, pc, #260	; (adr r3, 8010830 <__ieee754_acos+0x290>)
 801072c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010730:	f7ef fdb4 	bl	800029c <__adddf3>
 8010734:	4622      	mov	r2, r4
 8010736:	462b      	mov	r3, r5
 8010738:	f7ef ff66 	bl	8000608 <__aeabi_dmul>
 801073c:	a33e      	add	r3, pc, #248	; (adr r3, 8010838 <__ieee754_acos+0x298>)
 801073e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010742:	f7ef fda9 	bl	8000298 <__aeabi_dsub>
 8010746:	4622      	mov	r2, r4
 8010748:	462b      	mov	r3, r5
 801074a:	f7ef ff5d 	bl	8000608 <__aeabi_dmul>
 801074e:	a33c      	add	r3, pc, #240	; (adr r3, 8010840 <__ieee754_acos+0x2a0>)
 8010750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010754:	f7ef fda2 	bl	800029c <__adddf3>
 8010758:	4622      	mov	r2, r4
 801075a:	462b      	mov	r3, r5
 801075c:	f7ef ff54 	bl	8000608 <__aeabi_dmul>
 8010760:	a339      	add	r3, pc, #228	; (adr r3, 8010848 <__ieee754_acos+0x2a8>)
 8010762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010766:	f7ef fd97 	bl	8000298 <__aeabi_dsub>
 801076a:	4622      	mov	r2, r4
 801076c:	462b      	mov	r3, r5
 801076e:	f7ef ff4b 	bl	8000608 <__aeabi_dmul>
 8010772:	a337      	add	r3, pc, #220	; (adr r3, 8010850 <__ieee754_acos+0x2b0>)
 8010774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010778:	f7ef fd90 	bl	800029c <__adddf3>
 801077c:	4622      	mov	r2, r4
 801077e:	462b      	mov	r3, r5
 8010780:	f7ef ff42 	bl	8000608 <__aeabi_dmul>
 8010784:	ec45 4b10 	vmov	d0, r4, r5
 8010788:	4680      	mov	r8, r0
 801078a:	4689      	mov	r9, r1
 801078c:	f001 f946 	bl	8011a1c <__ieee754_sqrt>
 8010790:	a331      	add	r3, pc, #196	; (adr r3, 8010858 <__ieee754_acos+0x2b8>)
 8010792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010796:	4620      	mov	r0, r4
 8010798:	4629      	mov	r1, r5
 801079a:	ec57 6b10 	vmov	r6, r7, d0
 801079e:	f7ef ff33 	bl	8000608 <__aeabi_dmul>
 80107a2:	a32f      	add	r3, pc, #188	; (adr r3, 8010860 <__ieee754_acos+0x2c0>)
 80107a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a8:	f7ef fd76 	bl	8000298 <__aeabi_dsub>
 80107ac:	4622      	mov	r2, r4
 80107ae:	462b      	mov	r3, r5
 80107b0:	f7ef ff2a 	bl	8000608 <__aeabi_dmul>
 80107b4:	a32c      	add	r3, pc, #176	; (adr r3, 8010868 <__ieee754_acos+0x2c8>)
 80107b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ba:	f7ef fd6f 	bl	800029c <__adddf3>
 80107be:	4622      	mov	r2, r4
 80107c0:	462b      	mov	r3, r5
 80107c2:	f7ef ff21 	bl	8000608 <__aeabi_dmul>
 80107c6:	a32a      	add	r3, pc, #168	; (adr r3, 8010870 <__ieee754_acos+0x2d0>)
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	f7ef fd64 	bl	8000298 <__aeabi_dsub>
 80107d0:	4622      	mov	r2, r4
 80107d2:	462b      	mov	r3, r5
 80107d4:	f7ef ff18 	bl	8000608 <__aeabi_dmul>
 80107d8:	2200      	movs	r2, #0
 80107da:	4b2e      	ldr	r3, [pc, #184]	; (8010894 <__ieee754_acos+0x2f4>)
 80107dc:	f7ef fd5e 	bl	800029c <__adddf3>
 80107e0:	4602      	mov	r2, r0
 80107e2:	460b      	mov	r3, r1
 80107e4:	4640      	mov	r0, r8
 80107e6:	4649      	mov	r1, r9
 80107e8:	f7f0 f838 	bl	800085c <__aeabi_ddiv>
 80107ec:	4632      	mov	r2, r6
 80107ee:	463b      	mov	r3, r7
 80107f0:	f7ef ff0a 	bl	8000608 <__aeabi_dmul>
 80107f4:	a320      	add	r3, pc, #128	; (adr r3, 8010878 <__ieee754_acos+0x2d8>)
 80107f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fa:	f7ef fd4d 	bl	8000298 <__aeabi_dsub>
 80107fe:	4632      	mov	r2, r6
 8010800:	463b      	mov	r3, r7
 8010802:	f7ef fd4b 	bl	800029c <__adddf3>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	f7ef fd47 	bl	800029c <__adddf3>
 801080e:	4602      	mov	r2, r0
 8010810:	460b      	mov	r3, r1
 8010812:	a103      	add	r1, pc, #12	; (adr r1, 8010820 <__ieee754_acos+0x280>)
 8010814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010818:	e76f      	b.n	80106fa <__ieee754_acos+0x15a>
 801081a:	bf00      	nop
 801081c:	f3af 8000 	nop.w
 8010820:	54442d18 	.word	0x54442d18
 8010824:	400921fb 	.word	0x400921fb
 8010828:	0dfdf709 	.word	0x0dfdf709
 801082c:	3f023de1 	.word	0x3f023de1
 8010830:	7501b288 	.word	0x7501b288
 8010834:	3f49efe0 	.word	0x3f49efe0
 8010838:	b5688f3b 	.word	0xb5688f3b
 801083c:	3fa48228 	.word	0x3fa48228
 8010840:	0e884455 	.word	0x0e884455
 8010844:	3fc9c155 	.word	0x3fc9c155
 8010848:	03eb6f7d 	.word	0x03eb6f7d
 801084c:	3fd4d612 	.word	0x3fd4d612
 8010850:	55555555 	.word	0x55555555
 8010854:	3fc55555 	.word	0x3fc55555
 8010858:	b12e9282 	.word	0xb12e9282
 801085c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010860:	1b8d0159 	.word	0x1b8d0159
 8010864:	3fe6066c 	.word	0x3fe6066c
 8010868:	9c598ac8 	.word	0x9c598ac8
 801086c:	40002ae5 	.word	0x40002ae5
 8010870:	1c8a2d4b 	.word	0x1c8a2d4b
 8010874:	40033a27 	.word	0x40033a27
 8010878:	33145c07 	.word	0x33145c07
 801087c:	3c91a626 	.word	0x3c91a626
 8010880:	54442d18 	.word	0x54442d18
 8010884:	3ff921fb 	.word	0x3ff921fb
 8010888:	3fefffff 	.word	0x3fefffff
 801088c:	3fdfffff 	.word	0x3fdfffff
 8010890:	3c600000 	.word	0x3c600000
 8010894:	3ff00000 	.word	0x3ff00000
 8010898:	3fe00000 	.word	0x3fe00000
 801089c:	ee10 2a10 	vmov	r2, s0
 80108a0:	462b      	mov	r3, r5
 80108a2:	2000      	movs	r0, #0
 80108a4:	496a      	ldr	r1, [pc, #424]	; (8010a50 <__ieee754_acos+0x4b0>)
 80108a6:	f7ef fcf7 	bl	8000298 <__aeabi_dsub>
 80108aa:	2200      	movs	r2, #0
 80108ac:	4b69      	ldr	r3, [pc, #420]	; (8010a54 <__ieee754_acos+0x4b4>)
 80108ae:	f7ef feab 	bl	8000608 <__aeabi_dmul>
 80108b2:	4604      	mov	r4, r0
 80108b4:	460d      	mov	r5, r1
 80108b6:	ec45 4b10 	vmov	d0, r4, r5
 80108ba:	f001 f8af 	bl	8011a1c <__ieee754_sqrt>
 80108be:	a34e      	add	r3, pc, #312	; (adr r3, 80109f8 <__ieee754_acos+0x458>)
 80108c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c4:	4620      	mov	r0, r4
 80108c6:	4629      	mov	r1, r5
 80108c8:	ec59 8b10 	vmov	r8, r9, d0
 80108cc:	f7ef fe9c 	bl	8000608 <__aeabi_dmul>
 80108d0:	a34b      	add	r3, pc, #300	; (adr r3, 8010a00 <__ieee754_acos+0x460>)
 80108d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d6:	f7ef fce1 	bl	800029c <__adddf3>
 80108da:	4622      	mov	r2, r4
 80108dc:	462b      	mov	r3, r5
 80108de:	f7ef fe93 	bl	8000608 <__aeabi_dmul>
 80108e2:	a349      	add	r3, pc, #292	; (adr r3, 8010a08 <__ieee754_acos+0x468>)
 80108e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e8:	f7ef fcd6 	bl	8000298 <__aeabi_dsub>
 80108ec:	4622      	mov	r2, r4
 80108ee:	462b      	mov	r3, r5
 80108f0:	f7ef fe8a 	bl	8000608 <__aeabi_dmul>
 80108f4:	a346      	add	r3, pc, #280	; (adr r3, 8010a10 <__ieee754_acos+0x470>)
 80108f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fa:	f7ef fccf 	bl	800029c <__adddf3>
 80108fe:	4622      	mov	r2, r4
 8010900:	462b      	mov	r3, r5
 8010902:	f7ef fe81 	bl	8000608 <__aeabi_dmul>
 8010906:	a344      	add	r3, pc, #272	; (adr r3, 8010a18 <__ieee754_acos+0x478>)
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	f7ef fcc4 	bl	8000298 <__aeabi_dsub>
 8010910:	4622      	mov	r2, r4
 8010912:	462b      	mov	r3, r5
 8010914:	f7ef fe78 	bl	8000608 <__aeabi_dmul>
 8010918:	a341      	add	r3, pc, #260	; (adr r3, 8010a20 <__ieee754_acos+0x480>)
 801091a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091e:	f7ef fcbd 	bl	800029c <__adddf3>
 8010922:	4622      	mov	r2, r4
 8010924:	462b      	mov	r3, r5
 8010926:	f7ef fe6f 	bl	8000608 <__aeabi_dmul>
 801092a:	a33f      	add	r3, pc, #252	; (adr r3, 8010a28 <__ieee754_acos+0x488>)
 801092c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010930:	4682      	mov	sl, r0
 8010932:	468b      	mov	fp, r1
 8010934:	4620      	mov	r0, r4
 8010936:	4629      	mov	r1, r5
 8010938:	f7ef fe66 	bl	8000608 <__aeabi_dmul>
 801093c:	a33c      	add	r3, pc, #240	; (adr r3, 8010a30 <__ieee754_acos+0x490>)
 801093e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010942:	f7ef fca9 	bl	8000298 <__aeabi_dsub>
 8010946:	4622      	mov	r2, r4
 8010948:	462b      	mov	r3, r5
 801094a:	f7ef fe5d 	bl	8000608 <__aeabi_dmul>
 801094e:	a33a      	add	r3, pc, #232	; (adr r3, 8010a38 <__ieee754_acos+0x498>)
 8010950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010954:	f7ef fca2 	bl	800029c <__adddf3>
 8010958:	4622      	mov	r2, r4
 801095a:	462b      	mov	r3, r5
 801095c:	f7ef fe54 	bl	8000608 <__aeabi_dmul>
 8010960:	a337      	add	r3, pc, #220	; (adr r3, 8010a40 <__ieee754_acos+0x4a0>)
 8010962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010966:	f7ef fc97 	bl	8000298 <__aeabi_dsub>
 801096a:	4622      	mov	r2, r4
 801096c:	462b      	mov	r3, r5
 801096e:	f7ef fe4b 	bl	8000608 <__aeabi_dmul>
 8010972:	2200      	movs	r2, #0
 8010974:	4b36      	ldr	r3, [pc, #216]	; (8010a50 <__ieee754_acos+0x4b0>)
 8010976:	f7ef fc91 	bl	800029c <__adddf3>
 801097a:	4602      	mov	r2, r0
 801097c:	460b      	mov	r3, r1
 801097e:	4650      	mov	r0, sl
 8010980:	4659      	mov	r1, fp
 8010982:	f7ef ff6b 	bl	800085c <__aeabi_ddiv>
 8010986:	4642      	mov	r2, r8
 8010988:	464b      	mov	r3, r9
 801098a:	f7ef fe3d 	bl	8000608 <__aeabi_dmul>
 801098e:	2600      	movs	r6, #0
 8010990:	4682      	mov	sl, r0
 8010992:	468b      	mov	fp, r1
 8010994:	4632      	mov	r2, r6
 8010996:	464b      	mov	r3, r9
 8010998:	4630      	mov	r0, r6
 801099a:	4649      	mov	r1, r9
 801099c:	f7ef fe34 	bl	8000608 <__aeabi_dmul>
 80109a0:	4602      	mov	r2, r0
 80109a2:	460b      	mov	r3, r1
 80109a4:	4620      	mov	r0, r4
 80109a6:	4629      	mov	r1, r5
 80109a8:	f7ef fc76 	bl	8000298 <__aeabi_dsub>
 80109ac:	4632      	mov	r2, r6
 80109ae:	4604      	mov	r4, r0
 80109b0:	460d      	mov	r5, r1
 80109b2:	464b      	mov	r3, r9
 80109b4:	4640      	mov	r0, r8
 80109b6:	4649      	mov	r1, r9
 80109b8:	f7ef fc70 	bl	800029c <__adddf3>
 80109bc:	4602      	mov	r2, r0
 80109be:	460b      	mov	r3, r1
 80109c0:	4620      	mov	r0, r4
 80109c2:	4629      	mov	r1, r5
 80109c4:	f7ef ff4a 	bl	800085c <__aeabi_ddiv>
 80109c8:	4602      	mov	r2, r0
 80109ca:	460b      	mov	r3, r1
 80109cc:	4650      	mov	r0, sl
 80109ce:	4659      	mov	r1, fp
 80109d0:	f7ef fc64 	bl	800029c <__adddf3>
 80109d4:	4632      	mov	r2, r6
 80109d6:	464b      	mov	r3, r9
 80109d8:	f7ef fc60 	bl	800029c <__adddf3>
 80109dc:	4602      	mov	r2, r0
 80109de:	460b      	mov	r3, r1
 80109e0:	f7ef fc5c 	bl	800029c <__adddf3>
 80109e4:	e5f1      	b.n	80105ca <__ieee754_acos+0x2a>
 80109e6:	2000      	movs	r0, #0
 80109e8:	2100      	movs	r1, #0
 80109ea:	e5ee      	b.n	80105ca <__ieee754_acos+0x2a>
 80109ec:	a116      	add	r1, pc, #88	; (adr r1, 8010a48 <__ieee754_acos+0x4a8>)
 80109ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109f2:	e5ea      	b.n	80105ca <__ieee754_acos+0x2a>
 80109f4:	f3af 8000 	nop.w
 80109f8:	0dfdf709 	.word	0x0dfdf709
 80109fc:	3f023de1 	.word	0x3f023de1
 8010a00:	7501b288 	.word	0x7501b288
 8010a04:	3f49efe0 	.word	0x3f49efe0
 8010a08:	b5688f3b 	.word	0xb5688f3b
 8010a0c:	3fa48228 	.word	0x3fa48228
 8010a10:	0e884455 	.word	0x0e884455
 8010a14:	3fc9c155 	.word	0x3fc9c155
 8010a18:	03eb6f7d 	.word	0x03eb6f7d
 8010a1c:	3fd4d612 	.word	0x3fd4d612
 8010a20:	55555555 	.word	0x55555555
 8010a24:	3fc55555 	.word	0x3fc55555
 8010a28:	b12e9282 	.word	0xb12e9282
 8010a2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010a30:	1b8d0159 	.word	0x1b8d0159
 8010a34:	3fe6066c 	.word	0x3fe6066c
 8010a38:	9c598ac8 	.word	0x9c598ac8
 8010a3c:	40002ae5 	.word	0x40002ae5
 8010a40:	1c8a2d4b 	.word	0x1c8a2d4b
 8010a44:	40033a27 	.word	0x40033a27
 8010a48:	54442d18 	.word	0x54442d18
 8010a4c:	3ff921fb 	.word	0x3ff921fb
 8010a50:	3ff00000 	.word	0x3ff00000
 8010a54:	3fe00000 	.word	0x3fe00000

08010a58 <__ieee754_atan2>:
 8010a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a5c:	ec57 6b11 	vmov	r6, r7, d1
 8010a60:	4273      	negs	r3, r6
 8010a62:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010a66:	4333      	orrs	r3, r6
 8010a68:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8010c10 <__ieee754_atan2+0x1b8>
 8010a6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010a70:	4573      	cmp	r3, lr
 8010a72:	ec51 0b10 	vmov	r0, r1, d0
 8010a76:	ee11 8a10 	vmov	r8, s2
 8010a7a:	d80a      	bhi.n	8010a92 <__ieee754_atan2+0x3a>
 8010a7c:	4244      	negs	r4, r0
 8010a7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010a82:	4304      	orrs	r4, r0
 8010a84:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010a88:	4574      	cmp	r4, lr
 8010a8a:	468c      	mov	ip, r1
 8010a8c:	ee10 9a10 	vmov	r9, s0
 8010a90:	d907      	bls.n	8010aa2 <__ieee754_atan2+0x4a>
 8010a92:	4632      	mov	r2, r6
 8010a94:	463b      	mov	r3, r7
 8010a96:	f7ef fc01 	bl	800029c <__adddf3>
 8010a9a:	ec41 0b10 	vmov	d0, r0, r1
 8010a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aa2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010aa6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010aaa:	4334      	orrs	r4, r6
 8010aac:	d103      	bne.n	8010ab6 <__ieee754_atan2+0x5e>
 8010aae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ab2:	f001 bd29 	b.w	8012508 <atan>
 8010ab6:	17bc      	asrs	r4, r7, #30
 8010ab8:	f004 0402 	and.w	r4, r4, #2
 8010abc:	ea53 0909 	orrs.w	r9, r3, r9
 8010ac0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010ac4:	d107      	bne.n	8010ad6 <__ieee754_atan2+0x7e>
 8010ac6:	2c02      	cmp	r4, #2
 8010ac8:	d073      	beq.n	8010bb2 <__ieee754_atan2+0x15a>
 8010aca:	2c03      	cmp	r4, #3
 8010acc:	d1e5      	bne.n	8010a9a <__ieee754_atan2+0x42>
 8010ace:	a13e      	add	r1, pc, #248	; (adr r1, 8010bc8 <__ieee754_atan2+0x170>)
 8010ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ad4:	e7e1      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010ad6:	ea52 0808 	orrs.w	r8, r2, r8
 8010ada:	d106      	bne.n	8010aea <__ieee754_atan2+0x92>
 8010adc:	f1bc 0f00 	cmp.w	ip, #0
 8010ae0:	da6b      	bge.n	8010bba <__ieee754_atan2+0x162>
 8010ae2:	a13b      	add	r1, pc, #236	; (adr r1, 8010bd0 <__ieee754_atan2+0x178>)
 8010ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ae8:	e7d7      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010aea:	4572      	cmp	r2, lr
 8010aec:	d120      	bne.n	8010b30 <__ieee754_atan2+0xd8>
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d111      	bne.n	8010b16 <__ieee754_atan2+0xbe>
 8010af2:	2c02      	cmp	r4, #2
 8010af4:	d007      	beq.n	8010b06 <__ieee754_atan2+0xae>
 8010af6:	2c03      	cmp	r4, #3
 8010af8:	d009      	beq.n	8010b0e <__ieee754_atan2+0xb6>
 8010afa:	2c01      	cmp	r4, #1
 8010afc:	d155      	bne.n	8010baa <__ieee754_atan2+0x152>
 8010afe:	a136      	add	r1, pc, #216	; (adr r1, 8010bd8 <__ieee754_atan2+0x180>)
 8010b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b04:	e7c9      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010b06:	a136      	add	r1, pc, #216	; (adr r1, 8010be0 <__ieee754_atan2+0x188>)
 8010b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b0c:	e7c5      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010b0e:	a136      	add	r1, pc, #216	; (adr r1, 8010be8 <__ieee754_atan2+0x190>)
 8010b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b14:	e7c1      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010b16:	2c02      	cmp	r4, #2
 8010b18:	d04b      	beq.n	8010bb2 <__ieee754_atan2+0x15a>
 8010b1a:	2c03      	cmp	r4, #3
 8010b1c:	d0d7      	beq.n	8010ace <__ieee754_atan2+0x76>
 8010b1e:	2c01      	cmp	r4, #1
 8010b20:	f04f 0000 	mov.w	r0, #0
 8010b24:	d102      	bne.n	8010b2c <__ieee754_atan2+0xd4>
 8010b26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010b2a:	e7b6      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	e7b4      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010b30:	4573      	cmp	r3, lr
 8010b32:	d0d3      	beq.n	8010adc <__ieee754_atan2+0x84>
 8010b34:	1a9b      	subs	r3, r3, r2
 8010b36:	151b      	asrs	r3, r3, #20
 8010b38:	2b3c      	cmp	r3, #60	; 0x3c
 8010b3a:	dc1e      	bgt.n	8010b7a <__ieee754_atan2+0x122>
 8010b3c:	2f00      	cmp	r7, #0
 8010b3e:	da01      	bge.n	8010b44 <__ieee754_atan2+0xec>
 8010b40:	333c      	adds	r3, #60	; 0x3c
 8010b42:	db1e      	blt.n	8010b82 <__ieee754_atan2+0x12a>
 8010b44:	4632      	mov	r2, r6
 8010b46:	463b      	mov	r3, r7
 8010b48:	f7ef fe88 	bl	800085c <__aeabi_ddiv>
 8010b4c:	ec41 0b10 	vmov	d0, r0, r1
 8010b50:	f001 fe7a 	bl	8012848 <fabs>
 8010b54:	f001 fcd8 	bl	8012508 <atan>
 8010b58:	ec51 0b10 	vmov	r0, r1, d0
 8010b5c:	2c01      	cmp	r4, #1
 8010b5e:	d013      	beq.n	8010b88 <__ieee754_atan2+0x130>
 8010b60:	2c02      	cmp	r4, #2
 8010b62:	d015      	beq.n	8010b90 <__ieee754_atan2+0x138>
 8010b64:	2c00      	cmp	r4, #0
 8010b66:	d098      	beq.n	8010a9a <__ieee754_atan2+0x42>
 8010b68:	a321      	add	r3, pc, #132	; (adr r3, 8010bf0 <__ieee754_atan2+0x198>)
 8010b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6e:	f7ef fb93 	bl	8000298 <__aeabi_dsub>
 8010b72:	a321      	add	r3, pc, #132	; (adr r3, 8010bf8 <__ieee754_atan2+0x1a0>)
 8010b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b78:	e014      	b.n	8010ba4 <__ieee754_atan2+0x14c>
 8010b7a:	a121      	add	r1, pc, #132	; (adr r1, 8010c00 <__ieee754_atan2+0x1a8>)
 8010b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b80:	e7ec      	b.n	8010b5c <__ieee754_atan2+0x104>
 8010b82:	2000      	movs	r0, #0
 8010b84:	2100      	movs	r1, #0
 8010b86:	e7e9      	b.n	8010b5c <__ieee754_atan2+0x104>
 8010b88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	e784      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010b90:	a317      	add	r3, pc, #92	; (adr r3, 8010bf0 <__ieee754_atan2+0x198>)
 8010b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b96:	f7ef fb7f 	bl	8000298 <__aeabi_dsub>
 8010b9a:	4602      	mov	r2, r0
 8010b9c:	460b      	mov	r3, r1
 8010b9e:	a116      	add	r1, pc, #88	; (adr r1, 8010bf8 <__ieee754_atan2+0x1a0>)
 8010ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ba4:	f7ef fb78 	bl	8000298 <__aeabi_dsub>
 8010ba8:	e777      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010baa:	a117      	add	r1, pc, #92	; (adr r1, 8010c08 <__ieee754_atan2+0x1b0>)
 8010bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bb0:	e773      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010bb2:	a111      	add	r1, pc, #68	; (adr r1, 8010bf8 <__ieee754_atan2+0x1a0>)
 8010bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bb8:	e76f      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010bba:	a111      	add	r1, pc, #68	; (adr r1, 8010c00 <__ieee754_atan2+0x1a8>)
 8010bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bc0:	e76b      	b.n	8010a9a <__ieee754_atan2+0x42>
 8010bc2:	bf00      	nop
 8010bc4:	f3af 8000 	nop.w
 8010bc8:	54442d18 	.word	0x54442d18
 8010bcc:	c00921fb 	.word	0xc00921fb
 8010bd0:	54442d18 	.word	0x54442d18
 8010bd4:	bff921fb 	.word	0xbff921fb
 8010bd8:	54442d18 	.word	0x54442d18
 8010bdc:	bfe921fb 	.word	0xbfe921fb
 8010be0:	7f3321d2 	.word	0x7f3321d2
 8010be4:	4002d97c 	.word	0x4002d97c
 8010be8:	7f3321d2 	.word	0x7f3321d2
 8010bec:	c002d97c 	.word	0xc002d97c
 8010bf0:	33145c07 	.word	0x33145c07
 8010bf4:	3ca1a626 	.word	0x3ca1a626
 8010bf8:	54442d18 	.word	0x54442d18
 8010bfc:	400921fb 	.word	0x400921fb
 8010c00:	54442d18 	.word	0x54442d18
 8010c04:	3ff921fb 	.word	0x3ff921fb
 8010c08:	54442d18 	.word	0x54442d18
 8010c0c:	3fe921fb 	.word	0x3fe921fb
 8010c10:	7ff00000 	.word	0x7ff00000
 8010c14:	00000000 	.word	0x00000000

08010c18 <__ieee754_pow>:
 8010c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	b091      	sub	sp, #68	; 0x44
 8010c1e:	ed8d 1b00 	vstr	d1, [sp]
 8010c22:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010c26:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010c2a:	ea58 0302 	orrs.w	r3, r8, r2
 8010c2e:	ec57 6b10 	vmov	r6, r7, d0
 8010c32:	f000 84be 	beq.w	80115b2 <__ieee754_pow+0x99a>
 8010c36:	4b7a      	ldr	r3, [pc, #488]	; (8010e20 <__ieee754_pow+0x208>)
 8010c38:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010c3c:	429c      	cmp	r4, r3
 8010c3e:	463d      	mov	r5, r7
 8010c40:	ee10 aa10 	vmov	sl, s0
 8010c44:	dc09      	bgt.n	8010c5a <__ieee754_pow+0x42>
 8010c46:	d103      	bne.n	8010c50 <__ieee754_pow+0x38>
 8010c48:	b93e      	cbnz	r6, 8010c5a <__ieee754_pow+0x42>
 8010c4a:	45a0      	cmp	r8, r4
 8010c4c:	dc0d      	bgt.n	8010c6a <__ieee754_pow+0x52>
 8010c4e:	e001      	b.n	8010c54 <__ieee754_pow+0x3c>
 8010c50:	4598      	cmp	r8, r3
 8010c52:	dc02      	bgt.n	8010c5a <__ieee754_pow+0x42>
 8010c54:	4598      	cmp	r8, r3
 8010c56:	d10e      	bne.n	8010c76 <__ieee754_pow+0x5e>
 8010c58:	b16a      	cbz	r2, 8010c76 <__ieee754_pow+0x5e>
 8010c5a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010c5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010c62:	ea54 030a 	orrs.w	r3, r4, sl
 8010c66:	f000 84a4 	beq.w	80115b2 <__ieee754_pow+0x99a>
 8010c6a:	486e      	ldr	r0, [pc, #440]	; (8010e24 <__ieee754_pow+0x20c>)
 8010c6c:	b011      	add	sp, #68	; 0x44
 8010c6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c72:	f001 be85 	b.w	8012980 <nan>
 8010c76:	2d00      	cmp	r5, #0
 8010c78:	da53      	bge.n	8010d22 <__ieee754_pow+0x10a>
 8010c7a:	4b6b      	ldr	r3, [pc, #428]	; (8010e28 <__ieee754_pow+0x210>)
 8010c7c:	4598      	cmp	r8, r3
 8010c7e:	dc4d      	bgt.n	8010d1c <__ieee754_pow+0x104>
 8010c80:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010c84:	4598      	cmp	r8, r3
 8010c86:	dd4c      	ble.n	8010d22 <__ieee754_pow+0x10a>
 8010c88:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010c8c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010c90:	2b14      	cmp	r3, #20
 8010c92:	dd26      	ble.n	8010ce2 <__ieee754_pow+0xca>
 8010c94:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010c98:	fa22 f103 	lsr.w	r1, r2, r3
 8010c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d13e      	bne.n	8010d22 <__ieee754_pow+0x10a>
 8010ca4:	f001 0101 	and.w	r1, r1, #1
 8010ca8:	f1c1 0b02 	rsb	fp, r1, #2
 8010cac:	2a00      	cmp	r2, #0
 8010cae:	d15b      	bne.n	8010d68 <__ieee754_pow+0x150>
 8010cb0:	4b5b      	ldr	r3, [pc, #364]	; (8010e20 <__ieee754_pow+0x208>)
 8010cb2:	4598      	cmp	r8, r3
 8010cb4:	d124      	bne.n	8010d00 <__ieee754_pow+0xe8>
 8010cb6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010cba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010cbe:	ea53 030a 	orrs.w	r3, r3, sl
 8010cc2:	f000 8476 	beq.w	80115b2 <__ieee754_pow+0x99a>
 8010cc6:	4b59      	ldr	r3, [pc, #356]	; (8010e2c <__ieee754_pow+0x214>)
 8010cc8:	429c      	cmp	r4, r3
 8010cca:	dd2d      	ble.n	8010d28 <__ieee754_pow+0x110>
 8010ccc:	f1b9 0f00 	cmp.w	r9, #0
 8010cd0:	f280 8473 	bge.w	80115ba <__ieee754_pow+0x9a2>
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	2100      	movs	r1, #0
 8010cd8:	ec41 0b10 	vmov	d0, r0, r1
 8010cdc:	b011      	add	sp, #68	; 0x44
 8010cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce2:	2a00      	cmp	r2, #0
 8010ce4:	d13e      	bne.n	8010d64 <__ieee754_pow+0x14c>
 8010ce6:	f1c3 0314 	rsb	r3, r3, #20
 8010cea:	fa48 f103 	asr.w	r1, r8, r3
 8010cee:	fa01 f303 	lsl.w	r3, r1, r3
 8010cf2:	4543      	cmp	r3, r8
 8010cf4:	f040 8469 	bne.w	80115ca <__ieee754_pow+0x9b2>
 8010cf8:	f001 0101 	and.w	r1, r1, #1
 8010cfc:	f1c1 0b02 	rsb	fp, r1, #2
 8010d00:	4b4b      	ldr	r3, [pc, #300]	; (8010e30 <__ieee754_pow+0x218>)
 8010d02:	4598      	cmp	r8, r3
 8010d04:	d118      	bne.n	8010d38 <__ieee754_pow+0x120>
 8010d06:	f1b9 0f00 	cmp.w	r9, #0
 8010d0a:	f280 845a 	bge.w	80115c2 <__ieee754_pow+0x9aa>
 8010d0e:	4948      	ldr	r1, [pc, #288]	; (8010e30 <__ieee754_pow+0x218>)
 8010d10:	4632      	mov	r2, r6
 8010d12:	463b      	mov	r3, r7
 8010d14:	2000      	movs	r0, #0
 8010d16:	f7ef fda1 	bl	800085c <__aeabi_ddiv>
 8010d1a:	e7dd      	b.n	8010cd8 <__ieee754_pow+0xc0>
 8010d1c:	f04f 0b02 	mov.w	fp, #2
 8010d20:	e7c4      	b.n	8010cac <__ieee754_pow+0x94>
 8010d22:	f04f 0b00 	mov.w	fp, #0
 8010d26:	e7c1      	b.n	8010cac <__ieee754_pow+0x94>
 8010d28:	f1b9 0f00 	cmp.w	r9, #0
 8010d2c:	dad2      	bge.n	8010cd4 <__ieee754_pow+0xbc>
 8010d2e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010d32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010d36:	e7cf      	b.n	8010cd8 <__ieee754_pow+0xc0>
 8010d38:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010d3c:	d106      	bne.n	8010d4c <__ieee754_pow+0x134>
 8010d3e:	4632      	mov	r2, r6
 8010d40:	463b      	mov	r3, r7
 8010d42:	4610      	mov	r0, r2
 8010d44:	4619      	mov	r1, r3
 8010d46:	f7ef fc5f 	bl	8000608 <__aeabi_dmul>
 8010d4a:	e7c5      	b.n	8010cd8 <__ieee754_pow+0xc0>
 8010d4c:	4b39      	ldr	r3, [pc, #228]	; (8010e34 <__ieee754_pow+0x21c>)
 8010d4e:	4599      	cmp	r9, r3
 8010d50:	d10a      	bne.n	8010d68 <__ieee754_pow+0x150>
 8010d52:	2d00      	cmp	r5, #0
 8010d54:	db08      	blt.n	8010d68 <__ieee754_pow+0x150>
 8010d56:	ec47 6b10 	vmov	d0, r6, r7
 8010d5a:	b011      	add	sp, #68	; 0x44
 8010d5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d60:	f000 be5c 	b.w	8011a1c <__ieee754_sqrt>
 8010d64:	f04f 0b00 	mov.w	fp, #0
 8010d68:	ec47 6b10 	vmov	d0, r6, r7
 8010d6c:	f001 fd6c 	bl	8012848 <fabs>
 8010d70:	ec51 0b10 	vmov	r0, r1, d0
 8010d74:	f1ba 0f00 	cmp.w	sl, #0
 8010d78:	d127      	bne.n	8010dca <__ieee754_pow+0x1b2>
 8010d7a:	b124      	cbz	r4, 8010d86 <__ieee754_pow+0x16e>
 8010d7c:	4b2c      	ldr	r3, [pc, #176]	; (8010e30 <__ieee754_pow+0x218>)
 8010d7e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d121      	bne.n	8010dca <__ieee754_pow+0x1b2>
 8010d86:	f1b9 0f00 	cmp.w	r9, #0
 8010d8a:	da05      	bge.n	8010d98 <__ieee754_pow+0x180>
 8010d8c:	4602      	mov	r2, r0
 8010d8e:	460b      	mov	r3, r1
 8010d90:	2000      	movs	r0, #0
 8010d92:	4927      	ldr	r1, [pc, #156]	; (8010e30 <__ieee754_pow+0x218>)
 8010d94:	f7ef fd62 	bl	800085c <__aeabi_ddiv>
 8010d98:	2d00      	cmp	r5, #0
 8010d9a:	da9d      	bge.n	8010cd8 <__ieee754_pow+0xc0>
 8010d9c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010da0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010da4:	ea54 030b 	orrs.w	r3, r4, fp
 8010da8:	d108      	bne.n	8010dbc <__ieee754_pow+0x1a4>
 8010daa:	4602      	mov	r2, r0
 8010dac:	460b      	mov	r3, r1
 8010dae:	4610      	mov	r0, r2
 8010db0:	4619      	mov	r1, r3
 8010db2:	f7ef fa71 	bl	8000298 <__aeabi_dsub>
 8010db6:	4602      	mov	r2, r0
 8010db8:	460b      	mov	r3, r1
 8010dba:	e7ac      	b.n	8010d16 <__ieee754_pow+0xfe>
 8010dbc:	f1bb 0f01 	cmp.w	fp, #1
 8010dc0:	d18a      	bne.n	8010cd8 <__ieee754_pow+0xc0>
 8010dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	e786      	b.n	8010cd8 <__ieee754_pow+0xc0>
 8010dca:	0fed      	lsrs	r5, r5, #31
 8010dcc:	1e6b      	subs	r3, r5, #1
 8010dce:	930d      	str	r3, [sp, #52]	; 0x34
 8010dd0:	ea5b 0303 	orrs.w	r3, fp, r3
 8010dd4:	d102      	bne.n	8010ddc <__ieee754_pow+0x1c4>
 8010dd6:	4632      	mov	r2, r6
 8010dd8:	463b      	mov	r3, r7
 8010dda:	e7e8      	b.n	8010dae <__ieee754_pow+0x196>
 8010ddc:	4b16      	ldr	r3, [pc, #88]	; (8010e38 <__ieee754_pow+0x220>)
 8010dde:	4598      	cmp	r8, r3
 8010de0:	f340 80fe 	ble.w	8010fe0 <__ieee754_pow+0x3c8>
 8010de4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010de8:	4598      	cmp	r8, r3
 8010dea:	dd0a      	ble.n	8010e02 <__ieee754_pow+0x1ea>
 8010dec:	4b0f      	ldr	r3, [pc, #60]	; (8010e2c <__ieee754_pow+0x214>)
 8010dee:	429c      	cmp	r4, r3
 8010df0:	dc0d      	bgt.n	8010e0e <__ieee754_pow+0x1f6>
 8010df2:	f1b9 0f00 	cmp.w	r9, #0
 8010df6:	f6bf af6d 	bge.w	8010cd4 <__ieee754_pow+0xbc>
 8010dfa:	a307      	add	r3, pc, #28	; (adr r3, 8010e18 <__ieee754_pow+0x200>)
 8010dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e00:	e79f      	b.n	8010d42 <__ieee754_pow+0x12a>
 8010e02:	4b0e      	ldr	r3, [pc, #56]	; (8010e3c <__ieee754_pow+0x224>)
 8010e04:	429c      	cmp	r4, r3
 8010e06:	ddf4      	ble.n	8010df2 <__ieee754_pow+0x1da>
 8010e08:	4b09      	ldr	r3, [pc, #36]	; (8010e30 <__ieee754_pow+0x218>)
 8010e0a:	429c      	cmp	r4, r3
 8010e0c:	dd18      	ble.n	8010e40 <__ieee754_pow+0x228>
 8010e0e:	f1b9 0f00 	cmp.w	r9, #0
 8010e12:	dcf2      	bgt.n	8010dfa <__ieee754_pow+0x1e2>
 8010e14:	e75e      	b.n	8010cd4 <__ieee754_pow+0xbc>
 8010e16:	bf00      	nop
 8010e18:	8800759c 	.word	0x8800759c
 8010e1c:	7e37e43c 	.word	0x7e37e43c
 8010e20:	7ff00000 	.word	0x7ff00000
 8010e24:	08012fc1 	.word	0x08012fc1
 8010e28:	433fffff 	.word	0x433fffff
 8010e2c:	3fefffff 	.word	0x3fefffff
 8010e30:	3ff00000 	.word	0x3ff00000
 8010e34:	3fe00000 	.word	0x3fe00000
 8010e38:	41e00000 	.word	0x41e00000
 8010e3c:	3feffffe 	.word	0x3feffffe
 8010e40:	2200      	movs	r2, #0
 8010e42:	4b63      	ldr	r3, [pc, #396]	; (8010fd0 <__ieee754_pow+0x3b8>)
 8010e44:	f7ef fa28 	bl	8000298 <__aeabi_dsub>
 8010e48:	a355      	add	r3, pc, #340	; (adr r3, 8010fa0 <__ieee754_pow+0x388>)
 8010e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4e:	4604      	mov	r4, r0
 8010e50:	460d      	mov	r5, r1
 8010e52:	f7ef fbd9 	bl	8000608 <__aeabi_dmul>
 8010e56:	a354      	add	r3, pc, #336	; (adr r3, 8010fa8 <__ieee754_pow+0x390>)
 8010e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5c:	4606      	mov	r6, r0
 8010e5e:	460f      	mov	r7, r1
 8010e60:	4620      	mov	r0, r4
 8010e62:	4629      	mov	r1, r5
 8010e64:	f7ef fbd0 	bl	8000608 <__aeabi_dmul>
 8010e68:	2200      	movs	r2, #0
 8010e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e6e:	4b59      	ldr	r3, [pc, #356]	; (8010fd4 <__ieee754_pow+0x3bc>)
 8010e70:	4620      	mov	r0, r4
 8010e72:	4629      	mov	r1, r5
 8010e74:	f7ef fbc8 	bl	8000608 <__aeabi_dmul>
 8010e78:	4602      	mov	r2, r0
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	a14c      	add	r1, pc, #304	; (adr r1, 8010fb0 <__ieee754_pow+0x398>)
 8010e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e82:	f7ef fa09 	bl	8000298 <__aeabi_dsub>
 8010e86:	4622      	mov	r2, r4
 8010e88:	462b      	mov	r3, r5
 8010e8a:	f7ef fbbd 	bl	8000608 <__aeabi_dmul>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	460b      	mov	r3, r1
 8010e92:	2000      	movs	r0, #0
 8010e94:	4950      	ldr	r1, [pc, #320]	; (8010fd8 <__ieee754_pow+0x3c0>)
 8010e96:	f7ef f9ff 	bl	8000298 <__aeabi_dsub>
 8010e9a:	4622      	mov	r2, r4
 8010e9c:	462b      	mov	r3, r5
 8010e9e:	4680      	mov	r8, r0
 8010ea0:	4689      	mov	r9, r1
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	4629      	mov	r1, r5
 8010ea6:	f7ef fbaf 	bl	8000608 <__aeabi_dmul>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	460b      	mov	r3, r1
 8010eae:	4640      	mov	r0, r8
 8010eb0:	4649      	mov	r1, r9
 8010eb2:	f7ef fba9 	bl	8000608 <__aeabi_dmul>
 8010eb6:	a340      	add	r3, pc, #256	; (adr r3, 8010fb8 <__ieee754_pow+0x3a0>)
 8010eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebc:	f7ef fba4 	bl	8000608 <__aeabi_dmul>
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ec8:	f7ef f9e6 	bl	8000298 <__aeabi_dsub>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	460b      	mov	r3, r1
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	460d      	mov	r5, r1
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	4639      	mov	r1, r7
 8010ed8:	f7ef f9e0 	bl	800029c <__adddf3>
 8010edc:	2000      	movs	r0, #0
 8010ede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ee2:	4632      	mov	r2, r6
 8010ee4:	463b      	mov	r3, r7
 8010ee6:	f7ef f9d7 	bl	8000298 <__aeabi_dsub>
 8010eea:	4602      	mov	r2, r0
 8010eec:	460b      	mov	r3, r1
 8010eee:	4620      	mov	r0, r4
 8010ef0:	4629      	mov	r1, r5
 8010ef2:	f7ef f9d1 	bl	8000298 <__aeabi_dsub>
 8010ef6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ef8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010efc:	4313      	orrs	r3, r2
 8010efe:	4606      	mov	r6, r0
 8010f00:	460f      	mov	r7, r1
 8010f02:	f040 81eb 	bne.w	80112dc <__ieee754_pow+0x6c4>
 8010f06:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010fc0 <__ieee754_pow+0x3a8>
 8010f0a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010f0e:	2400      	movs	r4, #0
 8010f10:	4622      	mov	r2, r4
 8010f12:	462b      	mov	r3, r5
 8010f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010f1c:	f7ef f9bc 	bl	8000298 <__aeabi_dsub>
 8010f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f24:	f7ef fb70 	bl	8000608 <__aeabi_dmul>
 8010f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f2c:	4680      	mov	r8, r0
 8010f2e:	4689      	mov	r9, r1
 8010f30:	4630      	mov	r0, r6
 8010f32:	4639      	mov	r1, r7
 8010f34:	f7ef fb68 	bl	8000608 <__aeabi_dmul>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	4640      	mov	r0, r8
 8010f3e:	4649      	mov	r1, r9
 8010f40:	f7ef f9ac 	bl	800029c <__adddf3>
 8010f44:	4622      	mov	r2, r4
 8010f46:	462b      	mov	r3, r5
 8010f48:	4680      	mov	r8, r0
 8010f4a:	4689      	mov	r9, r1
 8010f4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f50:	f7ef fb5a 	bl	8000608 <__aeabi_dmul>
 8010f54:	460b      	mov	r3, r1
 8010f56:	4604      	mov	r4, r0
 8010f58:	460d      	mov	r5, r1
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	4649      	mov	r1, r9
 8010f5e:	4640      	mov	r0, r8
 8010f60:	e9cd 4500 	strd	r4, r5, [sp]
 8010f64:	f7ef f99a 	bl	800029c <__adddf3>
 8010f68:	4b1c      	ldr	r3, [pc, #112]	; (8010fdc <__ieee754_pow+0x3c4>)
 8010f6a:	4299      	cmp	r1, r3
 8010f6c:	4606      	mov	r6, r0
 8010f6e:	460f      	mov	r7, r1
 8010f70:	468b      	mov	fp, r1
 8010f72:	f340 82f7 	ble.w	8011564 <__ieee754_pow+0x94c>
 8010f76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010f7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010f7e:	4303      	orrs	r3, r0
 8010f80:	f000 81ea 	beq.w	8011358 <__ieee754_pow+0x740>
 8010f84:	a310      	add	r3, pc, #64	; (adr r3, 8010fc8 <__ieee754_pow+0x3b0>)
 8010f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f8e:	f7ef fb3b 	bl	8000608 <__aeabi_dmul>
 8010f92:	a30d      	add	r3, pc, #52	; (adr r3, 8010fc8 <__ieee754_pow+0x3b0>)
 8010f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f98:	e6d5      	b.n	8010d46 <__ieee754_pow+0x12e>
 8010f9a:	bf00      	nop
 8010f9c:	f3af 8000 	nop.w
 8010fa0:	60000000 	.word	0x60000000
 8010fa4:	3ff71547 	.word	0x3ff71547
 8010fa8:	f85ddf44 	.word	0xf85ddf44
 8010fac:	3e54ae0b 	.word	0x3e54ae0b
 8010fb0:	55555555 	.word	0x55555555
 8010fb4:	3fd55555 	.word	0x3fd55555
 8010fb8:	652b82fe 	.word	0x652b82fe
 8010fbc:	3ff71547 	.word	0x3ff71547
 8010fc0:	00000000 	.word	0x00000000
 8010fc4:	bff00000 	.word	0xbff00000
 8010fc8:	8800759c 	.word	0x8800759c
 8010fcc:	7e37e43c 	.word	0x7e37e43c
 8010fd0:	3ff00000 	.word	0x3ff00000
 8010fd4:	3fd00000 	.word	0x3fd00000
 8010fd8:	3fe00000 	.word	0x3fe00000
 8010fdc:	408fffff 	.word	0x408fffff
 8010fe0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010fe4:	f04f 0200 	mov.w	r2, #0
 8010fe8:	da05      	bge.n	8010ff6 <__ieee754_pow+0x3de>
 8010fea:	4bd3      	ldr	r3, [pc, #844]	; (8011338 <__ieee754_pow+0x720>)
 8010fec:	f7ef fb0c 	bl	8000608 <__aeabi_dmul>
 8010ff0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010ff4:	460c      	mov	r4, r1
 8010ff6:	1523      	asrs	r3, r4, #20
 8010ff8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010ffc:	4413      	add	r3, r2
 8010ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8011000:	4bce      	ldr	r3, [pc, #824]	; (801133c <__ieee754_pow+0x724>)
 8011002:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011006:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801100a:	429c      	cmp	r4, r3
 801100c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011010:	dd08      	ble.n	8011024 <__ieee754_pow+0x40c>
 8011012:	4bcb      	ldr	r3, [pc, #812]	; (8011340 <__ieee754_pow+0x728>)
 8011014:	429c      	cmp	r4, r3
 8011016:	f340 815e 	ble.w	80112d6 <__ieee754_pow+0x6be>
 801101a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801101c:	3301      	adds	r3, #1
 801101e:	9309      	str	r3, [sp, #36]	; 0x24
 8011020:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011024:	f04f 0a00 	mov.w	sl, #0
 8011028:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801102c:	930c      	str	r3, [sp, #48]	; 0x30
 801102e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011030:	4bc4      	ldr	r3, [pc, #784]	; (8011344 <__ieee754_pow+0x72c>)
 8011032:	4413      	add	r3, r2
 8011034:	ed93 7b00 	vldr	d7, [r3]
 8011038:	4629      	mov	r1, r5
 801103a:	ec53 2b17 	vmov	r2, r3, d7
 801103e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011042:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011046:	f7ef f927 	bl	8000298 <__aeabi_dsub>
 801104a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801104e:	4606      	mov	r6, r0
 8011050:	460f      	mov	r7, r1
 8011052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011056:	f7ef f921 	bl	800029c <__adddf3>
 801105a:	4602      	mov	r2, r0
 801105c:	460b      	mov	r3, r1
 801105e:	2000      	movs	r0, #0
 8011060:	49b9      	ldr	r1, [pc, #740]	; (8011348 <__ieee754_pow+0x730>)
 8011062:	f7ef fbfb 	bl	800085c <__aeabi_ddiv>
 8011066:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801106a:	4602      	mov	r2, r0
 801106c:	460b      	mov	r3, r1
 801106e:	4630      	mov	r0, r6
 8011070:	4639      	mov	r1, r7
 8011072:	f7ef fac9 	bl	8000608 <__aeabi_dmul>
 8011076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801107a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801107e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011082:	2300      	movs	r3, #0
 8011084:	9302      	str	r3, [sp, #8]
 8011086:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801108a:	106d      	asrs	r5, r5, #1
 801108c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011090:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011094:	2200      	movs	r2, #0
 8011096:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801109a:	4640      	mov	r0, r8
 801109c:	4649      	mov	r1, r9
 801109e:	4614      	mov	r4, r2
 80110a0:	461d      	mov	r5, r3
 80110a2:	f7ef fab1 	bl	8000608 <__aeabi_dmul>
 80110a6:	4602      	mov	r2, r0
 80110a8:	460b      	mov	r3, r1
 80110aa:	4630      	mov	r0, r6
 80110ac:	4639      	mov	r1, r7
 80110ae:	f7ef f8f3 	bl	8000298 <__aeabi_dsub>
 80110b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110b6:	4606      	mov	r6, r0
 80110b8:	460f      	mov	r7, r1
 80110ba:	4620      	mov	r0, r4
 80110bc:	4629      	mov	r1, r5
 80110be:	f7ef f8eb 	bl	8000298 <__aeabi_dsub>
 80110c2:	4602      	mov	r2, r0
 80110c4:	460b      	mov	r3, r1
 80110c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80110ca:	f7ef f8e5 	bl	8000298 <__aeabi_dsub>
 80110ce:	4642      	mov	r2, r8
 80110d0:	464b      	mov	r3, r9
 80110d2:	f7ef fa99 	bl	8000608 <__aeabi_dmul>
 80110d6:	4602      	mov	r2, r0
 80110d8:	460b      	mov	r3, r1
 80110da:	4630      	mov	r0, r6
 80110dc:	4639      	mov	r1, r7
 80110de:	f7ef f8db 	bl	8000298 <__aeabi_dsub>
 80110e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80110e6:	f7ef fa8f 	bl	8000608 <__aeabi_dmul>
 80110ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80110f2:	4610      	mov	r0, r2
 80110f4:	4619      	mov	r1, r3
 80110f6:	f7ef fa87 	bl	8000608 <__aeabi_dmul>
 80110fa:	a37b      	add	r3, pc, #492	; (adr r3, 80112e8 <__ieee754_pow+0x6d0>)
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	4604      	mov	r4, r0
 8011102:	460d      	mov	r5, r1
 8011104:	f7ef fa80 	bl	8000608 <__aeabi_dmul>
 8011108:	a379      	add	r3, pc, #484	; (adr r3, 80112f0 <__ieee754_pow+0x6d8>)
 801110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110e:	f7ef f8c5 	bl	800029c <__adddf3>
 8011112:	4622      	mov	r2, r4
 8011114:	462b      	mov	r3, r5
 8011116:	f7ef fa77 	bl	8000608 <__aeabi_dmul>
 801111a:	a377      	add	r3, pc, #476	; (adr r3, 80112f8 <__ieee754_pow+0x6e0>)
 801111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011120:	f7ef f8bc 	bl	800029c <__adddf3>
 8011124:	4622      	mov	r2, r4
 8011126:	462b      	mov	r3, r5
 8011128:	f7ef fa6e 	bl	8000608 <__aeabi_dmul>
 801112c:	a374      	add	r3, pc, #464	; (adr r3, 8011300 <__ieee754_pow+0x6e8>)
 801112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011132:	f7ef f8b3 	bl	800029c <__adddf3>
 8011136:	4622      	mov	r2, r4
 8011138:	462b      	mov	r3, r5
 801113a:	f7ef fa65 	bl	8000608 <__aeabi_dmul>
 801113e:	a372      	add	r3, pc, #456	; (adr r3, 8011308 <__ieee754_pow+0x6f0>)
 8011140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011144:	f7ef f8aa 	bl	800029c <__adddf3>
 8011148:	4622      	mov	r2, r4
 801114a:	462b      	mov	r3, r5
 801114c:	f7ef fa5c 	bl	8000608 <__aeabi_dmul>
 8011150:	a36f      	add	r3, pc, #444	; (adr r3, 8011310 <__ieee754_pow+0x6f8>)
 8011152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011156:	f7ef f8a1 	bl	800029c <__adddf3>
 801115a:	4622      	mov	r2, r4
 801115c:	4606      	mov	r6, r0
 801115e:	460f      	mov	r7, r1
 8011160:	462b      	mov	r3, r5
 8011162:	4620      	mov	r0, r4
 8011164:	4629      	mov	r1, r5
 8011166:	f7ef fa4f 	bl	8000608 <__aeabi_dmul>
 801116a:	4602      	mov	r2, r0
 801116c:	460b      	mov	r3, r1
 801116e:	4630      	mov	r0, r6
 8011170:	4639      	mov	r1, r7
 8011172:	f7ef fa49 	bl	8000608 <__aeabi_dmul>
 8011176:	4642      	mov	r2, r8
 8011178:	4604      	mov	r4, r0
 801117a:	460d      	mov	r5, r1
 801117c:	464b      	mov	r3, r9
 801117e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011182:	f7ef f88b 	bl	800029c <__adddf3>
 8011186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801118a:	f7ef fa3d 	bl	8000608 <__aeabi_dmul>
 801118e:	4622      	mov	r2, r4
 8011190:	462b      	mov	r3, r5
 8011192:	f7ef f883 	bl	800029c <__adddf3>
 8011196:	4642      	mov	r2, r8
 8011198:	4606      	mov	r6, r0
 801119a:	460f      	mov	r7, r1
 801119c:	464b      	mov	r3, r9
 801119e:	4640      	mov	r0, r8
 80111a0:	4649      	mov	r1, r9
 80111a2:	f7ef fa31 	bl	8000608 <__aeabi_dmul>
 80111a6:	2200      	movs	r2, #0
 80111a8:	4b68      	ldr	r3, [pc, #416]	; (801134c <__ieee754_pow+0x734>)
 80111aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80111ae:	f7ef f875 	bl	800029c <__adddf3>
 80111b2:	4632      	mov	r2, r6
 80111b4:	463b      	mov	r3, r7
 80111b6:	f7ef f871 	bl	800029c <__adddf3>
 80111ba:	9802      	ldr	r0, [sp, #8]
 80111bc:	460d      	mov	r5, r1
 80111be:	4604      	mov	r4, r0
 80111c0:	4602      	mov	r2, r0
 80111c2:	460b      	mov	r3, r1
 80111c4:	4640      	mov	r0, r8
 80111c6:	4649      	mov	r1, r9
 80111c8:	f7ef fa1e 	bl	8000608 <__aeabi_dmul>
 80111cc:	2200      	movs	r2, #0
 80111ce:	4680      	mov	r8, r0
 80111d0:	4689      	mov	r9, r1
 80111d2:	4b5e      	ldr	r3, [pc, #376]	; (801134c <__ieee754_pow+0x734>)
 80111d4:	4620      	mov	r0, r4
 80111d6:	4629      	mov	r1, r5
 80111d8:	f7ef f85e 	bl	8000298 <__aeabi_dsub>
 80111dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80111e0:	f7ef f85a 	bl	8000298 <__aeabi_dsub>
 80111e4:	4602      	mov	r2, r0
 80111e6:	460b      	mov	r3, r1
 80111e8:	4630      	mov	r0, r6
 80111ea:	4639      	mov	r1, r7
 80111ec:	f7ef f854 	bl	8000298 <__aeabi_dsub>
 80111f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111f4:	f7ef fa08 	bl	8000608 <__aeabi_dmul>
 80111f8:	4622      	mov	r2, r4
 80111fa:	4606      	mov	r6, r0
 80111fc:	460f      	mov	r7, r1
 80111fe:	462b      	mov	r3, r5
 8011200:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011204:	f7ef fa00 	bl	8000608 <__aeabi_dmul>
 8011208:	4602      	mov	r2, r0
 801120a:	460b      	mov	r3, r1
 801120c:	4630      	mov	r0, r6
 801120e:	4639      	mov	r1, r7
 8011210:	f7ef f844 	bl	800029c <__adddf3>
 8011214:	4606      	mov	r6, r0
 8011216:	460f      	mov	r7, r1
 8011218:	4602      	mov	r2, r0
 801121a:	460b      	mov	r3, r1
 801121c:	4640      	mov	r0, r8
 801121e:	4649      	mov	r1, r9
 8011220:	f7ef f83c 	bl	800029c <__adddf3>
 8011224:	9802      	ldr	r0, [sp, #8]
 8011226:	a33c      	add	r3, pc, #240	; (adr r3, 8011318 <__ieee754_pow+0x700>)
 8011228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122c:	4604      	mov	r4, r0
 801122e:	460d      	mov	r5, r1
 8011230:	f7ef f9ea 	bl	8000608 <__aeabi_dmul>
 8011234:	4642      	mov	r2, r8
 8011236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801123a:	464b      	mov	r3, r9
 801123c:	4620      	mov	r0, r4
 801123e:	4629      	mov	r1, r5
 8011240:	f7ef f82a 	bl	8000298 <__aeabi_dsub>
 8011244:	4602      	mov	r2, r0
 8011246:	460b      	mov	r3, r1
 8011248:	4630      	mov	r0, r6
 801124a:	4639      	mov	r1, r7
 801124c:	f7ef f824 	bl	8000298 <__aeabi_dsub>
 8011250:	a333      	add	r3, pc, #204	; (adr r3, 8011320 <__ieee754_pow+0x708>)
 8011252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011256:	f7ef f9d7 	bl	8000608 <__aeabi_dmul>
 801125a:	a333      	add	r3, pc, #204	; (adr r3, 8011328 <__ieee754_pow+0x710>)
 801125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011260:	4606      	mov	r6, r0
 8011262:	460f      	mov	r7, r1
 8011264:	4620      	mov	r0, r4
 8011266:	4629      	mov	r1, r5
 8011268:	f7ef f9ce 	bl	8000608 <__aeabi_dmul>
 801126c:	4602      	mov	r2, r0
 801126e:	460b      	mov	r3, r1
 8011270:	4630      	mov	r0, r6
 8011272:	4639      	mov	r1, r7
 8011274:	f7ef f812 	bl	800029c <__adddf3>
 8011278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801127a:	4b35      	ldr	r3, [pc, #212]	; (8011350 <__ieee754_pow+0x738>)
 801127c:	4413      	add	r3, r2
 801127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011282:	f7ef f80b 	bl	800029c <__adddf3>
 8011286:	4604      	mov	r4, r0
 8011288:	9809      	ldr	r0, [sp, #36]	; 0x24
 801128a:	460d      	mov	r5, r1
 801128c:	f7ef f952 	bl	8000534 <__aeabi_i2d>
 8011290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011292:	4b30      	ldr	r3, [pc, #192]	; (8011354 <__ieee754_pow+0x73c>)
 8011294:	4413      	add	r3, r2
 8011296:	e9d3 8900 	ldrd	r8, r9, [r3]
 801129a:	4606      	mov	r6, r0
 801129c:	460f      	mov	r7, r1
 801129e:	4622      	mov	r2, r4
 80112a0:	462b      	mov	r3, r5
 80112a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112a6:	f7ee fff9 	bl	800029c <__adddf3>
 80112aa:	4642      	mov	r2, r8
 80112ac:	464b      	mov	r3, r9
 80112ae:	f7ee fff5 	bl	800029c <__adddf3>
 80112b2:	4632      	mov	r2, r6
 80112b4:	463b      	mov	r3, r7
 80112b6:	f7ee fff1 	bl	800029c <__adddf3>
 80112ba:	9802      	ldr	r0, [sp, #8]
 80112bc:	4632      	mov	r2, r6
 80112be:	463b      	mov	r3, r7
 80112c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112c4:	f7ee ffe8 	bl	8000298 <__aeabi_dsub>
 80112c8:	4642      	mov	r2, r8
 80112ca:	464b      	mov	r3, r9
 80112cc:	f7ee ffe4 	bl	8000298 <__aeabi_dsub>
 80112d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80112d4:	e607      	b.n	8010ee6 <__ieee754_pow+0x2ce>
 80112d6:	f04f 0a01 	mov.w	sl, #1
 80112da:	e6a5      	b.n	8011028 <__ieee754_pow+0x410>
 80112dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011330 <__ieee754_pow+0x718>
 80112e0:	e613      	b.n	8010f0a <__ieee754_pow+0x2f2>
 80112e2:	bf00      	nop
 80112e4:	f3af 8000 	nop.w
 80112e8:	4a454eef 	.word	0x4a454eef
 80112ec:	3fca7e28 	.word	0x3fca7e28
 80112f0:	93c9db65 	.word	0x93c9db65
 80112f4:	3fcd864a 	.word	0x3fcd864a
 80112f8:	a91d4101 	.word	0xa91d4101
 80112fc:	3fd17460 	.word	0x3fd17460
 8011300:	518f264d 	.word	0x518f264d
 8011304:	3fd55555 	.word	0x3fd55555
 8011308:	db6fabff 	.word	0xdb6fabff
 801130c:	3fdb6db6 	.word	0x3fdb6db6
 8011310:	33333303 	.word	0x33333303
 8011314:	3fe33333 	.word	0x3fe33333
 8011318:	e0000000 	.word	0xe0000000
 801131c:	3feec709 	.word	0x3feec709
 8011320:	dc3a03fd 	.word	0xdc3a03fd
 8011324:	3feec709 	.word	0x3feec709
 8011328:	145b01f5 	.word	0x145b01f5
 801132c:	be3e2fe0 	.word	0xbe3e2fe0
 8011330:	00000000 	.word	0x00000000
 8011334:	3ff00000 	.word	0x3ff00000
 8011338:	43400000 	.word	0x43400000
 801133c:	0003988e 	.word	0x0003988e
 8011340:	000bb679 	.word	0x000bb679
 8011344:	080130f8 	.word	0x080130f8
 8011348:	3ff00000 	.word	0x3ff00000
 801134c:	40080000 	.word	0x40080000
 8011350:	08013118 	.word	0x08013118
 8011354:	08013108 	.word	0x08013108
 8011358:	a3b4      	add	r3, pc, #720	; (adr r3, 801162c <__ieee754_pow+0xa14>)
 801135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801135e:	4640      	mov	r0, r8
 8011360:	4649      	mov	r1, r9
 8011362:	f7ee ff9b 	bl	800029c <__adddf3>
 8011366:	4622      	mov	r2, r4
 8011368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801136c:	462b      	mov	r3, r5
 801136e:	4630      	mov	r0, r6
 8011370:	4639      	mov	r1, r7
 8011372:	f7ee ff91 	bl	8000298 <__aeabi_dsub>
 8011376:	4602      	mov	r2, r0
 8011378:	460b      	mov	r3, r1
 801137a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801137e:	f7ef fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 8011382:	2800      	cmp	r0, #0
 8011384:	f47f adfe 	bne.w	8010f84 <__ieee754_pow+0x36c>
 8011388:	4aa3      	ldr	r2, [pc, #652]	; (8011618 <__ieee754_pow+0xa00>)
 801138a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801138e:	4293      	cmp	r3, r2
 8011390:	f340 810a 	ble.w	80115a8 <__ieee754_pow+0x990>
 8011394:	151b      	asrs	r3, r3, #20
 8011396:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801139a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801139e:	fa4a f303 	asr.w	r3, sl, r3
 80113a2:	445b      	add	r3, fp
 80113a4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80113a8:	4e9c      	ldr	r6, [pc, #624]	; (801161c <__ieee754_pow+0xa04>)
 80113aa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80113ae:	4116      	asrs	r6, r2
 80113b0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80113b4:	2000      	movs	r0, #0
 80113b6:	ea23 0106 	bic.w	r1, r3, r6
 80113ba:	f1c2 0214 	rsb	r2, r2, #20
 80113be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80113c2:	fa4a fa02 	asr.w	sl, sl, r2
 80113c6:	f1bb 0f00 	cmp.w	fp, #0
 80113ca:	4602      	mov	r2, r0
 80113cc:	460b      	mov	r3, r1
 80113ce:	4620      	mov	r0, r4
 80113d0:	4629      	mov	r1, r5
 80113d2:	bfb8      	it	lt
 80113d4:	f1ca 0a00 	rsblt	sl, sl, #0
 80113d8:	f7ee ff5e 	bl	8000298 <__aeabi_dsub>
 80113dc:	e9cd 0100 	strd	r0, r1, [sp]
 80113e0:	4642      	mov	r2, r8
 80113e2:	464b      	mov	r3, r9
 80113e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113e8:	f7ee ff58 	bl	800029c <__adddf3>
 80113ec:	2000      	movs	r0, #0
 80113ee:	a378      	add	r3, pc, #480	; (adr r3, 80115d0 <__ieee754_pow+0x9b8>)
 80113f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f4:	4604      	mov	r4, r0
 80113f6:	460d      	mov	r5, r1
 80113f8:	f7ef f906 	bl	8000608 <__aeabi_dmul>
 80113fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011400:	4606      	mov	r6, r0
 8011402:	460f      	mov	r7, r1
 8011404:	4620      	mov	r0, r4
 8011406:	4629      	mov	r1, r5
 8011408:	f7ee ff46 	bl	8000298 <__aeabi_dsub>
 801140c:	4602      	mov	r2, r0
 801140e:	460b      	mov	r3, r1
 8011410:	4640      	mov	r0, r8
 8011412:	4649      	mov	r1, r9
 8011414:	f7ee ff40 	bl	8000298 <__aeabi_dsub>
 8011418:	a36f      	add	r3, pc, #444	; (adr r3, 80115d8 <__ieee754_pow+0x9c0>)
 801141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141e:	f7ef f8f3 	bl	8000608 <__aeabi_dmul>
 8011422:	a36f      	add	r3, pc, #444	; (adr r3, 80115e0 <__ieee754_pow+0x9c8>)
 8011424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011428:	4680      	mov	r8, r0
 801142a:	4689      	mov	r9, r1
 801142c:	4620      	mov	r0, r4
 801142e:	4629      	mov	r1, r5
 8011430:	f7ef f8ea 	bl	8000608 <__aeabi_dmul>
 8011434:	4602      	mov	r2, r0
 8011436:	460b      	mov	r3, r1
 8011438:	4640      	mov	r0, r8
 801143a:	4649      	mov	r1, r9
 801143c:	f7ee ff2e 	bl	800029c <__adddf3>
 8011440:	4604      	mov	r4, r0
 8011442:	460d      	mov	r5, r1
 8011444:	4602      	mov	r2, r0
 8011446:	460b      	mov	r3, r1
 8011448:	4630      	mov	r0, r6
 801144a:	4639      	mov	r1, r7
 801144c:	f7ee ff26 	bl	800029c <__adddf3>
 8011450:	4632      	mov	r2, r6
 8011452:	463b      	mov	r3, r7
 8011454:	4680      	mov	r8, r0
 8011456:	4689      	mov	r9, r1
 8011458:	f7ee ff1e 	bl	8000298 <__aeabi_dsub>
 801145c:	4602      	mov	r2, r0
 801145e:	460b      	mov	r3, r1
 8011460:	4620      	mov	r0, r4
 8011462:	4629      	mov	r1, r5
 8011464:	f7ee ff18 	bl	8000298 <__aeabi_dsub>
 8011468:	4642      	mov	r2, r8
 801146a:	4606      	mov	r6, r0
 801146c:	460f      	mov	r7, r1
 801146e:	464b      	mov	r3, r9
 8011470:	4640      	mov	r0, r8
 8011472:	4649      	mov	r1, r9
 8011474:	f7ef f8c8 	bl	8000608 <__aeabi_dmul>
 8011478:	a35b      	add	r3, pc, #364	; (adr r3, 80115e8 <__ieee754_pow+0x9d0>)
 801147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147e:	4604      	mov	r4, r0
 8011480:	460d      	mov	r5, r1
 8011482:	f7ef f8c1 	bl	8000608 <__aeabi_dmul>
 8011486:	a35a      	add	r3, pc, #360	; (adr r3, 80115f0 <__ieee754_pow+0x9d8>)
 8011488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148c:	f7ee ff04 	bl	8000298 <__aeabi_dsub>
 8011490:	4622      	mov	r2, r4
 8011492:	462b      	mov	r3, r5
 8011494:	f7ef f8b8 	bl	8000608 <__aeabi_dmul>
 8011498:	a357      	add	r3, pc, #348	; (adr r3, 80115f8 <__ieee754_pow+0x9e0>)
 801149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149e:	f7ee fefd 	bl	800029c <__adddf3>
 80114a2:	4622      	mov	r2, r4
 80114a4:	462b      	mov	r3, r5
 80114a6:	f7ef f8af 	bl	8000608 <__aeabi_dmul>
 80114aa:	a355      	add	r3, pc, #340	; (adr r3, 8011600 <__ieee754_pow+0x9e8>)
 80114ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b0:	f7ee fef2 	bl	8000298 <__aeabi_dsub>
 80114b4:	4622      	mov	r2, r4
 80114b6:	462b      	mov	r3, r5
 80114b8:	f7ef f8a6 	bl	8000608 <__aeabi_dmul>
 80114bc:	a352      	add	r3, pc, #328	; (adr r3, 8011608 <__ieee754_pow+0x9f0>)
 80114be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c2:	f7ee feeb 	bl	800029c <__adddf3>
 80114c6:	4622      	mov	r2, r4
 80114c8:	462b      	mov	r3, r5
 80114ca:	f7ef f89d 	bl	8000608 <__aeabi_dmul>
 80114ce:	4602      	mov	r2, r0
 80114d0:	460b      	mov	r3, r1
 80114d2:	4640      	mov	r0, r8
 80114d4:	4649      	mov	r1, r9
 80114d6:	f7ee fedf 	bl	8000298 <__aeabi_dsub>
 80114da:	4604      	mov	r4, r0
 80114dc:	460d      	mov	r5, r1
 80114de:	4602      	mov	r2, r0
 80114e0:	460b      	mov	r3, r1
 80114e2:	4640      	mov	r0, r8
 80114e4:	4649      	mov	r1, r9
 80114e6:	f7ef f88f 	bl	8000608 <__aeabi_dmul>
 80114ea:	2200      	movs	r2, #0
 80114ec:	e9cd 0100 	strd	r0, r1, [sp]
 80114f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80114f4:	4620      	mov	r0, r4
 80114f6:	4629      	mov	r1, r5
 80114f8:	f7ee fece 	bl	8000298 <__aeabi_dsub>
 80114fc:	4602      	mov	r2, r0
 80114fe:	460b      	mov	r3, r1
 8011500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011504:	f7ef f9aa 	bl	800085c <__aeabi_ddiv>
 8011508:	4632      	mov	r2, r6
 801150a:	4604      	mov	r4, r0
 801150c:	460d      	mov	r5, r1
 801150e:	463b      	mov	r3, r7
 8011510:	4640      	mov	r0, r8
 8011512:	4649      	mov	r1, r9
 8011514:	f7ef f878 	bl	8000608 <__aeabi_dmul>
 8011518:	4632      	mov	r2, r6
 801151a:	463b      	mov	r3, r7
 801151c:	f7ee febe 	bl	800029c <__adddf3>
 8011520:	4602      	mov	r2, r0
 8011522:	460b      	mov	r3, r1
 8011524:	4620      	mov	r0, r4
 8011526:	4629      	mov	r1, r5
 8011528:	f7ee feb6 	bl	8000298 <__aeabi_dsub>
 801152c:	4642      	mov	r2, r8
 801152e:	464b      	mov	r3, r9
 8011530:	f7ee feb2 	bl	8000298 <__aeabi_dsub>
 8011534:	4602      	mov	r2, r0
 8011536:	460b      	mov	r3, r1
 8011538:	2000      	movs	r0, #0
 801153a:	4939      	ldr	r1, [pc, #228]	; (8011620 <__ieee754_pow+0xa08>)
 801153c:	f7ee feac 	bl	8000298 <__aeabi_dsub>
 8011540:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011544:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011548:	4602      	mov	r2, r0
 801154a:	460b      	mov	r3, r1
 801154c:	da2f      	bge.n	80115ae <__ieee754_pow+0x996>
 801154e:	4650      	mov	r0, sl
 8011550:	ec43 2b10 	vmov	d0, r2, r3
 8011554:	f001 faa0 	bl	8012a98 <scalbn>
 8011558:	ec51 0b10 	vmov	r0, r1, d0
 801155c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011560:	f7ff bbf1 	b.w	8010d46 <__ieee754_pow+0x12e>
 8011564:	4b2f      	ldr	r3, [pc, #188]	; (8011624 <__ieee754_pow+0xa0c>)
 8011566:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801156a:	429e      	cmp	r6, r3
 801156c:	f77f af0c 	ble.w	8011388 <__ieee754_pow+0x770>
 8011570:	4b2d      	ldr	r3, [pc, #180]	; (8011628 <__ieee754_pow+0xa10>)
 8011572:	440b      	add	r3, r1
 8011574:	4303      	orrs	r3, r0
 8011576:	d00b      	beq.n	8011590 <__ieee754_pow+0x978>
 8011578:	a325      	add	r3, pc, #148	; (adr r3, 8011610 <__ieee754_pow+0x9f8>)
 801157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801157e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011582:	f7ef f841 	bl	8000608 <__aeabi_dmul>
 8011586:	a322      	add	r3, pc, #136	; (adr r3, 8011610 <__ieee754_pow+0x9f8>)
 8011588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158c:	f7ff bbdb 	b.w	8010d46 <__ieee754_pow+0x12e>
 8011590:	4622      	mov	r2, r4
 8011592:	462b      	mov	r3, r5
 8011594:	f7ee fe80 	bl	8000298 <__aeabi_dsub>
 8011598:	4642      	mov	r2, r8
 801159a:	464b      	mov	r3, r9
 801159c:	f7ef faba 	bl	8000b14 <__aeabi_dcmpge>
 80115a0:	2800      	cmp	r0, #0
 80115a2:	f43f aef1 	beq.w	8011388 <__ieee754_pow+0x770>
 80115a6:	e7e7      	b.n	8011578 <__ieee754_pow+0x960>
 80115a8:	f04f 0a00 	mov.w	sl, #0
 80115ac:	e718      	b.n	80113e0 <__ieee754_pow+0x7c8>
 80115ae:	4621      	mov	r1, r4
 80115b0:	e7d4      	b.n	801155c <__ieee754_pow+0x944>
 80115b2:	2000      	movs	r0, #0
 80115b4:	491a      	ldr	r1, [pc, #104]	; (8011620 <__ieee754_pow+0xa08>)
 80115b6:	f7ff bb8f 	b.w	8010cd8 <__ieee754_pow+0xc0>
 80115ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115be:	f7ff bb8b 	b.w	8010cd8 <__ieee754_pow+0xc0>
 80115c2:	4630      	mov	r0, r6
 80115c4:	4639      	mov	r1, r7
 80115c6:	f7ff bb87 	b.w	8010cd8 <__ieee754_pow+0xc0>
 80115ca:	4693      	mov	fp, r2
 80115cc:	f7ff bb98 	b.w	8010d00 <__ieee754_pow+0xe8>
 80115d0:	00000000 	.word	0x00000000
 80115d4:	3fe62e43 	.word	0x3fe62e43
 80115d8:	fefa39ef 	.word	0xfefa39ef
 80115dc:	3fe62e42 	.word	0x3fe62e42
 80115e0:	0ca86c39 	.word	0x0ca86c39
 80115e4:	be205c61 	.word	0xbe205c61
 80115e8:	72bea4d0 	.word	0x72bea4d0
 80115ec:	3e663769 	.word	0x3e663769
 80115f0:	c5d26bf1 	.word	0xc5d26bf1
 80115f4:	3ebbbd41 	.word	0x3ebbbd41
 80115f8:	af25de2c 	.word	0xaf25de2c
 80115fc:	3f11566a 	.word	0x3f11566a
 8011600:	16bebd93 	.word	0x16bebd93
 8011604:	3f66c16c 	.word	0x3f66c16c
 8011608:	5555553e 	.word	0x5555553e
 801160c:	3fc55555 	.word	0x3fc55555
 8011610:	c2f8f359 	.word	0xc2f8f359
 8011614:	01a56e1f 	.word	0x01a56e1f
 8011618:	3fe00000 	.word	0x3fe00000
 801161c:	000fffff 	.word	0x000fffff
 8011620:	3ff00000 	.word	0x3ff00000
 8011624:	4090cbff 	.word	0x4090cbff
 8011628:	3f6f3400 	.word	0x3f6f3400
 801162c:	652b82fe 	.word	0x652b82fe
 8011630:	3c971547 	.word	0x3c971547
 8011634:	00000000 	.word	0x00000000

08011638 <__ieee754_rem_pio2>:
 8011638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801163c:	ec57 6b10 	vmov	r6, r7, d0
 8011640:	4bc3      	ldr	r3, [pc, #780]	; (8011950 <__ieee754_rem_pio2+0x318>)
 8011642:	b08d      	sub	sp, #52	; 0x34
 8011644:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011648:	4598      	cmp	r8, r3
 801164a:	4604      	mov	r4, r0
 801164c:	9704      	str	r7, [sp, #16]
 801164e:	dc07      	bgt.n	8011660 <__ieee754_rem_pio2+0x28>
 8011650:	2200      	movs	r2, #0
 8011652:	2300      	movs	r3, #0
 8011654:	ed84 0b00 	vstr	d0, [r4]
 8011658:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801165c:	2500      	movs	r5, #0
 801165e:	e027      	b.n	80116b0 <__ieee754_rem_pio2+0x78>
 8011660:	4bbc      	ldr	r3, [pc, #752]	; (8011954 <__ieee754_rem_pio2+0x31c>)
 8011662:	4598      	cmp	r8, r3
 8011664:	dc75      	bgt.n	8011752 <__ieee754_rem_pio2+0x11a>
 8011666:	9b04      	ldr	r3, [sp, #16]
 8011668:	4dbb      	ldr	r5, [pc, #748]	; (8011958 <__ieee754_rem_pio2+0x320>)
 801166a:	2b00      	cmp	r3, #0
 801166c:	ee10 0a10 	vmov	r0, s0
 8011670:	a3a9      	add	r3, pc, #676	; (adr r3, 8011918 <__ieee754_rem_pio2+0x2e0>)
 8011672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011676:	4639      	mov	r1, r7
 8011678:	dd36      	ble.n	80116e8 <__ieee754_rem_pio2+0xb0>
 801167a:	f7ee fe0d 	bl	8000298 <__aeabi_dsub>
 801167e:	45a8      	cmp	r8, r5
 8011680:	4606      	mov	r6, r0
 8011682:	460f      	mov	r7, r1
 8011684:	d018      	beq.n	80116b8 <__ieee754_rem_pio2+0x80>
 8011686:	a3a6      	add	r3, pc, #664	; (adr r3, 8011920 <__ieee754_rem_pio2+0x2e8>)
 8011688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168c:	f7ee fe04 	bl	8000298 <__aeabi_dsub>
 8011690:	4602      	mov	r2, r0
 8011692:	460b      	mov	r3, r1
 8011694:	e9c4 2300 	strd	r2, r3, [r4]
 8011698:	4630      	mov	r0, r6
 801169a:	4639      	mov	r1, r7
 801169c:	f7ee fdfc 	bl	8000298 <__aeabi_dsub>
 80116a0:	a39f      	add	r3, pc, #636	; (adr r3, 8011920 <__ieee754_rem_pio2+0x2e8>)
 80116a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a6:	f7ee fdf7 	bl	8000298 <__aeabi_dsub>
 80116aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80116ae:	2501      	movs	r5, #1
 80116b0:	4628      	mov	r0, r5
 80116b2:	b00d      	add	sp, #52	; 0x34
 80116b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b8:	a39b      	add	r3, pc, #620	; (adr r3, 8011928 <__ieee754_rem_pio2+0x2f0>)
 80116ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116be:	f7ee fdeb 	bl	8000298 <__aeabi_dsub>
 80116c2:	a39b      	add	r3, pc, #620	; (adr r3, 8011930 <__ieee754_rem_pio2+0x2f8>)
 80116c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c8:	4606      	mov	r6, r0
 80116ca:	460f      	mov	r7, r1
 80116cc:	f7ee fde4 	bl	8000298 <__aeabi_dsub>
 80116d0:	4602      	mov	r2, r0
 80116d2:	460b      	mov	r3, r1
 80116d4:	e9c4 2300 	strd	r2, r3, [r4]
 80116d8:	4630      	mov	r0, r6
 80116da:	4639      	mov	r1, r7
 80116dc:	f7ee fddc 	bl	8000298 <__aeabi_dsub>
 80116e0:	a393      	add	r3, pc, #588	; (adr r3, 8011930 <__ieee754_rem_pio2+0x2f8>)
 80116e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e6:	e7de      	b.n	80116a6 <__ieee754_rem_pio2+0x6e>
 80116e8:	f7ee fdd8 	bl	800029c <__adddf3>
 80116ec:	45a8      	cmp	r8, r5
 80116ee:	4606      	mov	r6, r0
 80116f0:	460f      	mov	r7, r1
 80116f2:	d016      	beq.n	8011722 <__ieee754_rem_pio2+0xea>
 80116f4:	a38a      	add	r3, pc, #552	; (adr r3, 8011920 <__ieee754_rem_pio2+0x2e8>)
 80116f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116fa:	f7ee fdcf 	bl	800029c <__adddf3>
 80116fe:	4602      	mov	r2, r0
 8011700:	460b      	mov	r3, r1
 8011702:	e9c4 2300 	strd	r2, r3, [r4]
 8011706:	4630      	mov	r0, r6
 8011708:	4639      	mov	r1, r7
 801170a:	f7ee fdc5 	bl	8000298 <__aeabi_dsub>
 801170e:	a384      	add	r3, pc, #528	; (adr r3, 8011920 <__ieee754_rem_pio2+0x2e8>)
 8011710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011714:	f7ee fdc2 	bl	800029c <__adddf3>
 8011718:	f04f 35ff 	mov.w	r5, #4294967295
 801171c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011720:	e7c6      	b.n	80116b0 <__ieee754_rem_pio2+0x78>
 8011722:	a381      	add	r3, pc, #516	; (adr r3, 8011928 <__ieee754_rem_pio2+0x2f0>)
 8011724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011728:	f7ee fdb8 	bl	800029c <__adddf3>
 801172c:	a380      	add	r3, pc, #512	; (adr r3, 8011930 <__ieee754_rem_pio2+0x2f8>)
 801172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011732:	4606      	mov	r6, r0
 8011734:	460f      	mov	r7, r1
 8011736:	f7ee fdb1 	bl	800029c <__adddf3>
 801173a:	4602      	mov	r2, r0
 801173c:	460b      	mov	r3, r1
 801173e:	e9c4 2300 	strd	r2, r3, [r4]
 8011742:	4630      	mov	r0, r6
 8011744:	4639      	mov	r1, r7
 8011746:	f7ee fda7 	bl	8000298 <__aeabi_dsub>
 801174a:	a379      	add	r3, pc, #484	; (adr r3, 8011930 <__ieee754_rem_pio2+0x2f8>)
 801174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011750:	e7e0      	b.n	8011714 <__ieee754_rem_pio2+0xdc>
 8011752:	4b82      	ldr	r3, [pc, #520]	; (801195c <__ieee754_rem_pio2+0x324>)
 8011754:	4598      	cmp	r8, r3
 8011756:	f300 80d0 	bgt.w	80118fa <__ieee754_rem_pio2+0x2c2>
 801175a:	f001 f875 	bl	8012848 <fabs>
 801175e:	ec57 6b10 	vmov	r6, r7, d0
 8011762:	ee10 0a10 	vmov	r0, s0
 8011766:	a374      	add	r3, pc, #464	; (adr r3, 8011938 <__ieee754_rem_pio2+0x300>)
 8011768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176c:	4639      	mov	r1, r7
 801176e:	f7ee ff4b 	bl	8000608 <__aeabi_dmul>
 8011772:	2200      	movs	r2, #0
 8011774:	4b7a      	ldr	r3, [pc, #488]	; (8011960 <__ieee754_rem_pio2+0x328>)
 8011776:	f7ee fd91 	bl	800029c <__adddf3>
 801177a:	f7ef f9f5 	bl	8000b68 <__aeabi_d2iz>
 801177e:	4605      	mov	r5, r0
 8011780:	f7ee fed8 	bl	8000534 <__aeabi_i2d>
 8011784:	a364      	add	r3, pc, #400	; (adr r3, 8011918 <__ieee754_rem_pio2+0x2e0>)
 8011786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801178e:	f7ee ff3b 	bl	8000608 <__aeabi_dmul>
 8011792:	4602      	mov	r2, r0
 8011794:	460b      	mov	r3, r1
 8011796:	4630      	mov	r0, r6
 8011798:	4639      	mov	r1, r7
 801179a:	f7ee fd7d 	bl	8000298 <__aeabi_dsub>
 801179e:	a360      	add	r3, pc, #384	; (adr r3, 8011920 <__ieee754_rem_pio2+0x2e8>)
 80117a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a4:	4682      	mov	sl, r0
 80117a6:	468b      	mov	fp, r1
 80117a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117ac:	f7ee ff2c 	bl	8000608 <__aeabi_dmul>
 80117b0:	2d1f      	cmp	r5, #31
 80117b2:	4606      	mov	r6, r0
 80117b4:	460f      	mov	r7, r1
 80117b6:	dc0c      	bgt.n	80117d2 <__ieee754_rem_pio2+0x19a>
 80117b8:	1e6a      	subs	r2, r5, #1
 80117ba:	4b6a      	ldr	r3, [pc, #424]	; (8011964 <__ieee754_rem_pio2+0x32c>)
 80117bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117c0:	4543      	cmp	r3, r8
 80117c2:	d006      	beq.n	80117d2 <__ieee754_rem_pio2+0x19a>
 80117c4:	4632      	mov	r2, r6
 80117c6:	463b      	mov	r3, r7
 80117c8:	4650      	mov	r0, sl
 80117ca:	4659      	mov	r1, fp
 80117cc:	f7ee fd64 	bl	8000298 <__aeabi_dsub>
 80117d0:	e00e      	b.n	80117f0 <__ieee754_rem_pio2+0x1b8>
 80117d2:	4632      	mov	r2, r6
 80117d4:	463b      	mov	r3, r7
 80117d6:	4650      	mov	r0, sl
 80117d8:	4659      	mov	r1, fp
 80117da:	f7ee fd5d 	bl	8000298 <__aeabi_dsub>
 80117de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80117e2:	9305      	str	r3, [sp, #20]
 80117e4:	9a05      	ldr	r2, [sp, #20]
 80117e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80117ea:	1ad3      	subs	r3, r2, r3
 80117ec:	2b10      	cmp	r3, #16
 80117ee:	dc02      	bgt.n	80117f6 <__ieee754_rem_pio2+0x1be>
 80117f0:	e9c4 0100 	strd	r0, r1, [r4]
 80117f4:	e039      	b.n	801186a <__ieee754_rem_pio2+0x232>
 80117f6:	a34c      	add	r3, pc, #304	; (adr r3, 8011928 <__ieee754_rem_pio2+0x2f0>)
 80117f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011800:	f7ee ff02 	bl	8000608 <__aeabi_dmul>
 8011804:	4606      	mov	r6, r0
 8011806:	460f      	mov	r7, r1
 8011808:	4602      	mov	r2, r0
 801180a:	460b      	mov	r3, r1
 801180c:	4650      	mov	r0, sl
 801180e:	4659      	mov	r1, fp
 8011810:	f7ee fd42 	bl	8000298 <__aeabi_dsub>
 8011814:	4602      	mov	r2, r0
 8011816:	460b      	mov	r3, r1
 8011818:	4680      	mov	r8, r0
 801181a:	4689      	mov	r9, r1
 801181c:	4650      	mov	r0, sl
 801181e:	4659      	mov	r1, fp
 8011820:	f7ee fd3a 	bl	8000298 <__aeabi_dsub>
 8011824:	4632      	mov	r2, r6
 8011826:	463b      	mov	r3, r7
 8011828:	f7ee fd36 	bl	8000298 <__aeabi_dsub>
 801182c:	a340      	add	r3, pc, #256	; (adr r3, 8011930 <__ieee754_rem_pio2+0x2f8>)
 801182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011832:	4606      	mov	r6, r0
 8011834:	460f      	mov	r7, r1
 8011836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801183a:	f7ee fee5 	bl	8000608 <__aeabi_dmul>
 801183e:	4632      	mov	r2, r6
 8011840:	463b      	mov	r3, r7
 8011842:	f7ee fd29 	bl	8000298 <__aeabi_dsub>
 8011846:	4602      	mov	r2, r0
 8011848:	460b      	mov	r3, r1
 801184a:	4606      	mov	r6, r0
 801184c:	460f      	mov	r7, r1
 801184e:	4640      	mov	r0, r8
 8011850:	4649      	mov	r1, r9
 8011852:	f7ee fd21 	bl	8000298 <__aeabi_dsub>
 8011856:	9a05      	ldr	r2, [sp, #20]
 8011858:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801185c:	1ad3      	subs	r3, r2, r3
 801185e:	2b31      	cmp	r3, #49	; 0x31
 8011860:	dc20      	bgt.n	80118a4 <__ieee754_rem_pio2+0x26c>
 8011862:	e9c4 0100 	strd	r0, r1, [r4]
 8011866:	46c2      	mov	sl, r8
 8011868:	46cb      	mov	fp, r9
 801186a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801186e:	4650      	mov	r0, sl
 8011870:	4642      	mov	r2, r8
 8011872:	464b      	mov	r3, r9
 8011874:	4659      	mov	r1, fp
 8011876:	f7ee fd0f 	bl	8000298 <__aeabi_dsub>
 801187a:	463b      	mov	r3, r7
 801187c:	4632      	mov	r2, r6
 801187e:	f7ee fd0b 	bl	8000298 <__aeabi_dsub>
 8011882:	9b04      	ldr	r3, [sp, #16]
 8011884:	2b00      	cmp	r3, #0
 8011886:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801188a:	f6bf af11 	bge.w	80116b0 <__ieee754_rem_pio2+0x78>
 801188e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011892:	6063      	str	r3, [r4, #4]
 8011894:	f8c4 8000 	str.w	r8, [r4]
 8011898:	60a0      	str	r0, [r4, #8]
 801189a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801189e:	60e3      	str	r3, [r4, #12]
 80118a0:	426d      	negs	r5, r5
 80118a2:	e705      	b.n	80116b0 <__ieee754_rem_pio2+0x78>
 80118a4:	a326      	add	r3, pc, #152	; (adr r3, 8011940 <__ieee754_rem_pio2+0x308>)
 80118a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118ae:	f7ee feab 	bl	8000608 <__aeabi_dmul>
 80118b2:	4606      	mov	r6, r0
 80118b4:	460f      	mov	r7, r1
 80118b6:	4602      	mov	r2, r0
 80118b8:	460b      	mov	r3, r1
 80118ba:	4640      	mov	r0, r8
 80118bc:	4649      	mov	r1, r9
 80118be:	f7ee fceb 	bl	8000298 <__aeabi_dsub>
 80118c2:	4602      	mov	r2, r0
 80118c4:	460b      	mov	r3, r1
 80118c6:	4682      	mov	sl, r0
 80118c8:	468b      	mov	fp, r1
 80118ca:	4640      	mov	r0, r8
 80118cc:	4649      	mov	r1, r9
 80118ce:	f7ee fce3 	bl	8000298 <__aeabi_dsub>
 80118d2:	4632      	mov	r2, r6
 80118d4:	463b      	mov	r3, r7
 80118d6:	f7ee fcdf 	bl	8000298 <__aeabi_dsub>
 80118da:	a31b      	add	r3, pc, #108	; (adr r3, 8011948 <__ieee754_rem_pio2+0x310>)
 80118dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e0:	4606      	mov	r6, r0
 80118e2:	460f      	mov	r7, r1
 80118e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118e8:	f7ee fe8e 	bl	8000608 <__aeabi_dmul>
 80118ec:	4632      	mov	r2, r6
 80118ee:	463b      	mov	r3, r7
 80118f0:	f7ee fcd2 	bl	8000298 <__aeabi_dsub>
 80118f4:	4606      	mov	r6, r0
 80118f6:	460f      	mov	r7, r1
 80118f8:	e764      	b.n	80117c4 <__ieee754_rem_pio2+0x18c>
 80118fa:	4b1b      	ldr	r3, [pc, #108]	; (8011968 <__ieee754_rem_pio2+0x330>)
 80118fc:	4598      	cmp	r8, r3
 80118fe:	dd35      	ble.n	801196c <__ieee754_rem_pio2+0x334>
 8011900:	ee10 2a10 	vmov	r2, s0
 8011904:	463b      	mov	r3, r7
 8011906:	4630      	mov	r0, r6
 8011908:	4639      	mov	r1, r7
 801190a:	f7ee fcc5 	bl	8000298 <__aeabi_dsub>
 801190e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011912:	e9c4 0100 	strd	r0, r1, [r4]
 8011916:	e6a1      	b.n	801165c <__ieee754_rem_pio2+0x24>
 8011918:	54400000 	.word	0x54400000
 801191c:	3ff921fb 	.word	0x3ff921fb
 8011920:	1a626331 	.word	0x1a626331
 8011924:	3dd0b461 	.word	0x3dd0b461
 8011928:	1a600000 	.word	0x1a600000
 801192c:	3dd0b461 	.word	0x3dd0b461
 8011930:	2e037073 	.word	0x2e037073
 8011934:	3ba3198a 	.word	0x3ba3198a
 8011938:	6dc9c883 	.word	0x6dc9c883
 801193c:	3fe45f30 	.word	0x3fe45f30
 8011940:	2e000000 	.word	0x2e000000
 8011944:	3ba3198a 	.word	0x3ba3198a
 8011948:	252049c1 	.word	0x252049c1
 801194c:	397b839a 	.word	0x397b839a
 8011950:	3fe921fb 	.word	0x3fe921fb
 8011954:	4002d97b 	.word	0x4002d97b
 8011958:	3ff921fb 	.word	0x3ff921fb
 801195c:	413921fb 	.word	0x413921fb
 8011960:	3fe00000 	.word	0x3fe00000
 8011964:	08013128 	.word	0x08013128
 8011968:	7fefffff 	.word	0x7fefffff
 801196c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011970:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011974:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011978:	4630      	mov	r0, r6
 801197a:	460f      	mov	r7, r1
 801197c:	f7ef f8f4 	bl	8000b68 <__aeabi_d2iz>
 8011980:	f7ee fdd8 	bl	8000534 <__aeabi_i2d>
 8011984:	4602      	mov	r2, r0
 8011986:	460b      	mov	r3, r1
 8011988:	4630      	mov	r0, r6
 801198a:	4639      	mov	r1, r7
 801198c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011990:	f7ee fc82 	bl	8000298 <__aeabi_dsub>
 8011994:	2200      	movs	r2, #0
 8011996:	4b1f      	ldr	r3, [pc, #124]	; (8011a14 <__ieee754_rem_pio2+0x3dc>)
 8011998:	f7ee fe36 	bl	8000608 <__aeabi_dmul>
 801199c:	460f      	mov	r7, r1
 801199e:	4606      	mov	r6, r0
 80119a0:	f7ef f8e2 	bl	8000b68 <__aeabi_d2iz>
 80119a4:	f7ee fdc6 	bl	8000534 <__aeabi_i2d>
 80119a8:	4602      	mov	r2, r0
 80119aa:	460b      	mov	r3, r1
 80119ac:	4630      	mov	r0, r6
 80119ae:	4639      	mov	r1, r7
 80119b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80119b4:	f7ee fc70 	bl	8000298 <__aeabi_dsub>
 80119b8:	2200      	movs	r2, #0
 80119ba:	4b16      	ldr	r3, [pc, #88]	; (8011a14 <__ieee754_rem_pio2+0x3dc>)
 80119bc:	f7ee fe24 	bl	8000608 <__aeabi_dmul>
 80119c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80119c4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80119c8:	f04f 0803 	mov.w	r8, #3
 80119cc:	2600      	movs	r6, #0
 80119ce:	2700      	movs	r7, #0
 80119d0:	4632      	mov	r2, r6
 80119d2:	463b      	mov	r3, r7
 80119d4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80119d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80119dc:	f7ef f87c 	bl	8000ad8 <__aeabi_dcmpeq>
 80119e0:	b9b0      	cbnz	r0, 8011a10 <__ieee754_rem_pio2+0x3d8>
 80119e2:	4b0d      	ldr	r3, [pc, #52]	; (8011a18 <__ieee754_rem_pio2+0x3e0>)
 80119e4:	9301      	str	r3, [sp, #4]
 80119e6:	2302      	movs	r3, #2
 80119e8:	9300      	str	r3, [sp, #0]
 80119ea:	462a      	mov	r2, r5
 80119ec:	4643      	mov	r3, r8
 80119ee:	4621      	mov	r1, r4
 80119f0:	a806      	add	r0, sp, #24
 80119f2:	f000 f98d 	bl	8011d10 <__kernel_rem_pio2>
 80119f6:	9b04      	ldr	r3, [sp, #16]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	4605      	mov	r5, r0
 80119fc:	f6bf ae58 	bge.w	80116b0 <__ieee754_rem_pio2+0x78>
 8011a00:	6863      	ldr	r3, [r4, #4]
 8011a02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a06:	6063      	str	r3, [r4, #4]
 8011a08:	68e3      	ldr	r3, [r4, #12]
 8011a0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a0e:	e746      	b.n	801189e <__ieee754_rem_pio2+0x266>
 8011a10:	46d0      	mov	r8, sl
 8011a12:	e7dd      	b.n	80119d0 <__ieee754_rem_pio2+0x398>
 8011a14:	41700000 	.word	0x41700000
 8011a18:	080131a8 	.word	0x080131a8

08011a1c <__ieee754_sqrt>:
 8011a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a20:	4955      	ldr	r1, [pc, #340]	; (8011b78 <__ieee754_sqrt+0x15c>)
 8011a22:	ec55 4b10 	vmov	r4, r5, d0
 8011a26:	43a9      	bics	r1, r5
 8011a28:	462b      	mov	r3, r5
 8011a2a:	462a      	mov	r2, r5
 8011a2c:	d112      	bne.n	8011a54 <__ieee754_sqrt+0x38>
 8011a2e:	ee10 2a10 	vmov	r2, s0
 8011a32:	ee10 0a10 	vmov	r0, s0
 8011a36:	4629      	mov	r1, r5
 8011a38:	f7ee fde6 	bl	8000608 <__aeabi_dmul>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	460b      	mov	r3, r1
 8011a40:	4620      	mov	r0, r4
 8011a42:	4629      	mov	r1, r5
 8011a44:	f7ee fc2a 	bl	800029c <__adddf3>
 8011a48:	4604      	mov	r4, r0
 8011a4a:	460d      	mov	r5, r1
 8011a4c:	ec45 4b10 	vmov	d0, r4, r5
 8011a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a54:	2d00      	cmp	r5, #0
 8011a56:	ee10 0a10 	vmov	r0, s0
 8011a5a:	4621      	mov	r1, r4
 8011a5c:	dc0f      	bgt.n	8011a7e <__ieee754_sqrt+0x62>
 8011a5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011a62:	4330      	orrs	r0, r6
 8011a64:	d0f2      	beq.n	8011a4c <__ieee754_sqrt+0x30>
 8011a66:	b155      	cbz	r5, 8011a7e <__ieee754_sqrt+0x62>
 8011a68:	ee10 2a10 	vmov	r2, s0
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	4629      	mov	r1, r5
 8011a70:	f7ee fc12 	bl	8000298 <__aeabi_dsub>
 8011a74:	4602      	mov	r2, r0
 8011a76:	460b      	mov	r3, r1
 8011a78:	f7ee fef0 	bl	800085c <__aeabi_ddiv>
 8011a7c:	e7e4      	b.n	8011a48 <__ieee754_sqrt+0x2c>
 8011a7e:	151b      	asrs	r3, r3, #20
 8011a80:	d073      	beq.n	8011b6a <__ieee754_sqrt+0x14e>
 8011a82:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011a86:	07dd      	lsls	r5, r3, #31
 8011a88:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011a8c:	bf48      	it	mi
 8011a8e:	0fc8      	lsrmi	r0, r1, #31
 8011a90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011a94:	bf44      	itt	mi
 8011a96:	0049      	lslmi	r1, r1, #1
 8011a98:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011a9c:	2500      	movs	r5, #0
 8011a9e:	1058      	asrs	r0, r3, #1
 8011aa0:	0fcb      	lsrs	r3, r1, #31
 8011aa2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011aa6:	0049      	lsls	r1, r1, #1
 8011aa8:	2316      	movs	r3, #22
 8011aaa:	462c      	mov	r4, r5
 8011aac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011ab0:	19a7      	adds	r7, r4, r6
 8011ab2:	4297      	cmp	r7, r2
 8011ab4:	bfde      	ittt	le
 8011ab6:	19bc      	addle	r4, r7, r6
 8011ab8:	1bd2      	suble	r2, r2, r7
 8011aba:	19ad      	addle	r5, r5, r6
 8011abc:	0fcf      	lsrs	r7, r1, #31
 8011abe:	3b01      	subs	r3, #1
 8011ac0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011ac4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011ac8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011acc:	d1f0      	bne.n	8011ab0 <__ieee754_sqrt+0x94>
 8011ace:	f04f 0c20 	mov.w	ip, #32
 8011ad2:	469e      	mov	lr, r3
 8011ad4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011ad8:	42a2      	cmp	r2, r4
 8011ada:	eb06 070e 	add.w	r7, r6, lr
 8011ade:	dc02      	bgt.n	8011ae6 <__ieee754_sqrt+0xca>
 8011ae0:	d112      	bne.n	8011b08 <__ieee754_sqrt+0xec>
 8011ae2:	428f      	cmp	r7, r1
 8011ae4:	d810      	bhi.n	8011b08 <__ieee754_sqrt+0xec>
 8011ae6:	2f00      	cmp	r7, #0
 8011ae8:	eb07 0e06 	add.w	lr, r7, r6
 8011aec:	da42      	bge.n	8011b74 <__ieee754_sqrt+0x158>
 8011aee:	f1be 0f00 	cmp.w	lr, #0
 8011af2:	db3f      	blt.n	8011b74 <__ieee754_sqrt+0x158>
 8011af4:	f104 0801 	add.w	r8, r4, #1
 8011af8:	1b12      	subs	r2, r2, r4
 8011afa:	428f      	cmp	r7, r1
 8011afc:	bf88      	it	hi
 8011afe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011b02:	1bc9      	subs	r1, r1, r7
 8011b04:	4433      	add	r3, r6
 8011b06:	4644      	mov	r4, r8
 8011b08:	0052      	lsls	r2, r2, #1
 8011b0a:	f1bc 0c01 	subs.w	ip, ip, #1
 8011b0e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011b12:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011b16:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011b1a:	d1dd      	bne.n	8011ad8 <__ieee754_sqrt+0xbc>
 8011b1c:	430a      	orrs	r2, r1
 8011b1e:	d006      	beq.n	8011b2e <__ieee754_sqrt+0x112>
 8011b20:	1c5c      	adds	r4, r3, #1
 8011b22:	bf13      	iteet	ne
 8011b24:	3301      	addne	r3, #1
 8011b26:	3501      	addeq	r5, #1
 8011b28:	4663      	moveq	r3, ip
 8011b2a:	f023 0301 	bicne.w	r3, r3, #1
 8011b2e:	106a      	asrs	r2, r5, #1
 8011b30:	085b      	lsrs	r3, r3, #1
 8011b32:	07e9      	lsls	r1, r5, #31
 8011b34:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011b38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011b3c:	bf48      	it	mi
 8011b3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011b42:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011b46:	461c      	mov	r4, r3
 8011b48:	e780      	b.n	8011a4c <__ieee754_sqrt+0x30>
 8011b4a:	0aca      	lsrs	r2, r1, #11
 8011b4c:	3815      	subs	r0, #21
 8011b4e:	0549      	lsls	r1, r1, #21
 8011b50:	2a00      	cmp	r2, #0
 8011b52:	d0fa      	beq.n	8011b4a <__ieee754_sqrt+0x12e>
 8011b54:	02d6      	lsls	r6, r2, #11
 8011b56:	d50a      	bpl.n	8011b6e <__ieee754_sqrt+0x152>
 8011b58:	f1c3 0420 	rsb	r4, r3, #32
 8011b5c:	fa21 f404 	lsr.w	r4, r1, r4
 8011b60:	1e5d      	subs	r5, r3, #1
 8011b62:	4099      	lsls	r1, r3
 8011b64:	4322      	orrs	r2, r4
 8011b66:	1b43      	subs	r3, r0, r5
 8011b68:	e78b      	b.n	8011a82 <__ieee754_sqrt+0x66>
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	e7f0      	b.n	8011b50 <__ieee754_sqrt+0x134>
 8011b6e:	0052      	lsls	r2, r2, #1
 8011b70:	3301      	adds	r3, #1
 8011b72:	e7ef      	b.n	8011b54 <__ieee754_sqrt+0x138>
 8011b74:	46a0      	mov	r8, r4
 8011b76:	e7bf      	b.n	8011af8 <__ieee754_sqrt+0xdc>
 8011b78:	7ff00000 	.word	0x7ff00000
 8011b7c:	00000000 	.word	0x00000000

08011b80 <__kernel_cos>:
 8011b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b84:	ec59 8b10 	vmov	r8, r9, d0
 8011b88:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011b8c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011b90:	ed2d 8b02 	vpush	{d8}
 8011b94:	eeb0 8a41 	vmov.f32	s16, s2
 8011b98:	eef0 8a61 	vmov.f32	s17, s3
 8011b9c:	da07      	bge.n	8011bae <__kernel_cos+0x2e>
 8011b9e:	ee10 0a10 	vmov	r0, s0
 8011ba2:	4649      	mov	r1, r9
 8011ba4:	f7ee ffe0 	bl	8000b68 <__aeabi_d2iz>
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	f000 8089 	beq.w	8011cc0 <__kernel_cos+0x140>
 8011bae:	4642      	mov	r2, r8
 8011bb0:	464b      	mov	r3, r9
 8011bb2:	4640      	mov	r0, r8
 8011bb4:	4649      	mov	r1, r9
 8011bb6:	f7ee fd27 	bl	8000608 <__aeabi_dmul>
 8011bba:	2200      	movs	r2, #0
 8011bbc:	4b4e      	ldr	r3, [pc, #312]	; (8011cf8 <__kernel_cos+0x178>)
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	460d      	mov	r5, r1
 8011bc2:	f7ee fd21 	bl	8000608 <__aeabi_dmul>
 8011bc6:	a340      	add	r3, pc, #256	; (adr r3, 8011cc8 <__kernel_cos+0x148>)
 8011bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bcc:	4682      	mov	sl, r0
 8011bce:	468b      	mov	fp, r1
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	4629      	mov	r1, r5
 8011bd4:	f7ee fd18 	bl	8000608 <__aeabi_dmul>
 8011bd8:	a33d      	add	r3, pc, #244	; (adr r3, 8011cd0 <__kernel_cos+0x150>)
 8011bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bde:	f7ee fb5d 	bl	800029c <__adddf3>
 8011be2:	4622      	mov	r2, r4
 8011be4:	462b      	mov	r3, r5
 8011be6:	f7ee fd0f 	bl	8000608 <__aeabi_dmul>
 8011bea:	a33b      	add	r3, pc, #236	; (adr r3, 8011cd8 <__kernel_cos+0x158>)
 8011bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf0:	f7ee fb52 	bl	8000298 <__aeabi_dsub>
 8011bf4:	4622      	mov	r2, r4
 8011bf6:	462b      	mov	r3, r5
 8011bf8:	f7ee fd06 	bl	8000608 <__aeabi_dmul>
 8011bfc:	a338      	add	r3, pc, #224	; (adr r3, 8011ce0 <__kernel_cos+0x160>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	f7ee fb4b 	bl	800029c <__adddf3>
 8011c06:	4622      	mov	r2, r4
 8011c08:	462b      	mov	r3, r5
 8011c0a:	f7ee fcfd 	bl	8000608 <__aeabi_dmul>
 8011c0e:	a336      	add	r3, pc, #216	; (adr r3, 8011ce8 <__kernel_cos+0x168>)
 8011c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c14:	f7ee fb40 	bl	8000298 <__aeabi_dsub>
 8011c18:	4622      	mov	r2, r4
 8011c1a:	462b      	mov	r3, r5
 8011c1c:	f7ee fcf4 	bl	8000608 <__aeabi_dmul>
 8011c20:	a333      	add	r3, pc, #204	; (adr r3, 8011cf0 <__kernel_cos+0x170>)
 8011c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c26:	f7ee fb39 	bl	800029c <__adddf3>
 8011c2a:	4622      	mov	r2, r4
 8011c2c:	462b      	mov	r3, r5
 8011c2e:	f7ee fceb 	bl	8000608 <__aeabi_dmul>
 8011c32:	4622      	mov	r2, r4
 8011c34:	462b      	mov	r3, r5
 8011c36:	f7ee fce7 	bl	8000608 <__aeabi_dmul>
 8011c3a:	ec53 2b18 	vmov	r2, r3, d8
 8011c3e:	4604      	mov	r4, r0
 8011c40:	460d      	mov	r5, r1
 8011c42:	4640      	mov	r0, r8
 8011c44:	4649      	mov	r1, r9
 8011c46:	f7ee fcdf 	bl	8000608 <__aeabi_dmul>
 8011c4a:	460b      	mov	r3, r1
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	4629      	mov	r1, r5
 8011c50:	4620      	mov	r0, r4
 8011c52:	f7ee fb21 	bl	8000298 <__aeabi_dsub>
 8011c56:	4b29      	ldr	r3, [pc, #164]	; (8011cfc <__kernel_cos+0x17c>)
 8011c58:	429e      	cmp	r6, r3
 8011c5a:	4680      	mov	r8, r0
 8011c5c:	4689      	mov	r9, r1
 8011c5e:	dc11      	bgt.n	8011c84 <__kernel_cos+0x104>
 8011c60:	4602      	mov	r2, r0
 8011c62:	460b      	mov	r3, r1
 8011c64:	4650      	mov	r0, sl
 8011c66:	4659      	mov	r1, fp
 8011c68:	f7ee fb16 	bl	8000298 <__aeabi_dsub>
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	4924      	ldr	r1, [pc, #144]	; (8011d00 <__kernel_cos+0x180>)
 8011c70:	4602      	mov	r2, r0
 8011c72:	2000      	movs	r0, #0
 8011c74:	f7ee fb10 	bl	8000298 <__aeabi_dsub>
 8011c78:	ecbd 8b02 	vpop	{d8}
 8011c7c:	ec41 0b10 	vmov	d0, r0, r1
 8011c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c84:	4b1f      	ldr	r3, [pc, #124]	; (8011d04 <__kernel_cos+0x184>)
 8011c86:	491e      	ldr	r1, [pc, #120]	; (8011d00 <__kernel_cos+0x180>)
 8011c88:	429e      	cmp	r6, r3
 8011c8a:	bfcc      	ite	gt
 8011c8c:	4d1e      	ldrgt	r5, [pc, #120]	; (8011d08 <__kernel_cos+0x188>)
 8011c8e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011c92:	2400      	movs	r4, #0
 8011c94:	4622      	mov	r2, r4
 8011c96:	462b      	mov	r3, r5
 8011c98:	2000      	movs	r0, #0
 8011c9a:	f7ee fafd 	bl	8000298 <__aeabi_dsub>
 8011c9e:	4622      	mov	r2, r4
 8011ca0:	4606      	mov	r6, r0
 8011ca2:	460f      	mov	r7, r1
 8011ca4:	462b      	mov	r3, r5
 8011ca6:	4650      	mov	r0, sl
 8011ca8:	4659      	mov	r1, fp
 8011caa:	f7ee faf5 	bl	8000298 <__aeabi_dsub>
 8011cae:	4642      	mov	r2, r8
 8011cb0:	464b      	mov	r3, r9
 8011cb2:	f7ee faf1 	bl	8000298 <__aeabi_dsub>
 8011cb6:	4602      	mov	r2, r0
 8011cb8:	460b      	mov	r3, r1
 8011cba:	4630      	mov	r0, r6
 8011cbc:	4639      	mov	r1, r7
 8011cbe:	e7d9      	b.n	8011c74 <__kernel_cos+0xf4>
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	490f      	ldr	r1, [pc, #60]	; (8011d00 <__kernel_cos+0x180>)
 8011cc4:	e7d8      	b.n	8011c78 <__kernel_cos+0xf8>
 8011cc6:	bf00      	nop
 8011cc8:	be8838d4 	.word	0xbe8838d4
 8011ccc:	bda8fae9 	.word	0xbda8fae9
 8011cd0:	bdb4b1c4 	.word	0xbdb4b1c4
 8011cd4:	3e21ee9e 	.word	0x3e21ee9e
 8011cd8:	809c52ad 	.word	0x809c52ad
 8011cdc:	3e927e4f 	.word	0x3e927e4f
 8011ce0:	19cb1590 	.word	0x19cb1590
 8011ce4:	3efa01a0 	.word	0x3efa01a0
 8011ce8:	16c15177 	.word	0x16c15177
 8011cec:	3f56c16c 	.word	0x3f56c16c
 8011cf0:	5555554c 	.word	0x5555554c
 8011cf4:	3fa55555 	.word	0x3fa55555
 8011cf8:	3fe00000 	.word	0x3fe00000
 8011cfc:	3fd33332 	.word	0x3fd33332
 8011d00:	3ff00000 	.word	0x3ff00000
 8011d04:	3fe90000 	.word	0x3fe90000
 8011d08:	3fd20000 	.word	0x3fd20000
 8011d0c:	00000000 	.word	0x00000000

08011d10 <__kernel_rem_pio2>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	ed2d 8b02 	vpush	{d8}
 8011d18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011d1c:	1ed4      	subs	r4, r2, #3
 8011d1e:	9308      	str	r3, [sp, #32]
 8011d20:	9101      	str	r1, [sp, #4]
 8011d22:	4bc5      	ldr	r3, [pc, #788]	; (8012038 <__kernel_rem_pio2+0x328>)
 8011d24:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011d26:	9009      	str	r0, [sp, #36]	; 0x24
 8011d28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d2c:	9304      	str	r3, [sp, #16]
 8011d2e:	9b08      	ldr	r3, [sp, #32]
 8011d30:	3b01      	subs	r3, #1
 8011d32:	9307      	str	r3, [sp, #28]
 8011d34:	2318      	movs	r3, #24
 8011d36:	fb94 f4f3 	sdiv	r4, r4, r3
 8011d3a:	f06f 0317 	mvn.w	r3, #23
 8011d3e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011d42:	fb04 3303 	mla	r3, r4, r3, r3
 8011d46:	eb03 0a02 	add.w	sl, r3, r2
 8011d4a:	9b04      	ldr	r3, [sp, #16]
 8011d4c:	9a07      	ldr	r2, [sp, #28]
 8011d4e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012028 <__kernel_rem_pio2+0x318>
 8011d52:	eb03 0802 	add.w	r8, r3, r2
 8011d56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011d58:	1aa7      	subs	r7, r4, r2
 8011d5a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011d5e:	ae22      	add	r6, sp, #136	; 0x88
 8011d60:	2500      	movs	r5, #0
 8011d62:	4545      	cmp	r5, r8
 8011d64:	dd13      	ble.n	8011d8e <__kernel_rem_pio2+0x7e>
 8011d66:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012028 <__kernel_rem_pio2+0x318>
 8011d6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011d6e:	2600      	movs	r6, #0
 8011d70:	9b04      	ldr	r3, [sp, #16]
 8011d72:	429e      	cmp	r6, r3
 8011d74:	dc32      	bgt.n	8011ddc <__kernel_rem_pio2+0xcc>
 8011d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d78:	9302      	str	r3, [sp, #8]
 8011d7a:	9b08      	ldr	r3, [sp, #32]
 8011d7c:	199d      	adds	r5, r3, r6
 8011d7e:	ab22      	add	r3, sp, #136	; 0x88
 8011d80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011d84:	9306      	str	r3, [sp, #24]
 8011d86:	ec59 8b18 	vmov	r8, r9, d8
 8011d8a:	2700      	movs	r7, #0
 8011d8c:	e01f      	b.n	8011dce <__kernel_rem_pio2+0xbe>
 8011d8e:	42ef      	cmn	r7, r5
 8011d90:	d407      	bmi.n	8011da2 <__kernel_rem_pio2+0x92>
 8011d92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011d96:	f7ee fbcd 	bl	8000534 <__aeabi_i2d>
 8011d9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011d9e:	3501      	adds	r5, #1
 8011da0:	e7df      	b.n	8011d62 <__kernel_rem_pio2+0x52>
 8011da2:	ec51 0b18 	vmov	r0, r1, d8
 8011da6:	e7f8      	b.n	8011d9a <__kernel_rem_pio2+0x8a>
 8011da8:	9906      	ldr	r1, [sp, #24]
 8011daa:	9d02      	ldr	r5, [sp, #8]
 8011dac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011db0:	9106      	str	r1, [sp, #24]
 8011db2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011db6:	9502      	str	r5, [sp, #8]
 8011db8:	f7ee fc26 	bl	8000608 <__aeabi_dmul>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	4640      	mov	r0, r8
 8011dc2:	4649      	mov	r1, r9
 8011dc4:	f7ee fa6a 	bl	800029c <__adddf3>
 8011dc8:	3701      	adds	r7, #1
 8011dca:	4680      	mov	r8, r0
 8011dcc:	4689      	mov	r9, r1
 8011dce:	9b07      	ldr	r3, [sp, #28]
 8011dd0:	429f      	cmp	r7, r3
 8011dd2:	dde9      	ble.n	8011da8 <__kernel_rem_pio2+0x98>
 8011dd4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011dd8:	3601      	adds	r6, #1
 8011dda:	e7c9      	b.n	8011d70 <__kernel_rem_pio2+0x60>
 8011ddc:	9b04      	ldr	r3, [sp, #16]
 8011dde:	aa0e      	add	r2, sp, #56	; 0x38
 8011de0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011de4:	930c      	str	r3, [sp, #48]	; 0x30
 8011de6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011de8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011dec:	9c04      	ldr	r4, [sp, #16]
 8011dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8011df0:	ab9a      	add	r3, sp, #616	; 0x268
 8011df2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011df6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011dfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011dfe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011e02:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011e06:	ab9a      	add	r3, sp, #616	; 0x268
 8011e08:	445b      	add	r3, fp
 8011e0a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011e0e:	2500      	movs	r5, #0
 8011e10:	1b63      	subs	r3, r4, r5
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	dc78      	bgt.n	8011f08 <__kernel_rem_pio2+0x1f8>
 8011e16:	4650      	mov	r0, sl
 8011e18:	ec49 8b10 	vmov	d0, r8, r9
 8011e1c:	f000 fe3c 	bl	8012a98 <scalbn>
 8011e20:	ec57 6b10 	vmov	r6, r7, d0
 8011e24:	2200      	movs	r2, #0
 8011e26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011e2a:	ee10 0a10 	vmov	r0, s0
 8011e2e:	4639      	mov	r1, r7
 8011e30:	f7ee fbea 	bl	8000608 <__aeabi_dmul>
 8011e34:	ec41 0b10 	vmov	d0, r0, r1
 8011e38:	f000 fd1a 	bl	8012870 <floor>
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	ec51 0b10 	vmov	r0, r1, d0
 8011e42:	4b7e      	ldr	r3, [pc, #504]	; (801203c <__kernel_rem_pio2+0x32c>)
 8011e44:	f7ee fbe0 	bl	8000608 <__aeabi_dmul>
 8011e48:	4602      	mov	r2, r0
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	4639      	mov	r1, r7
 8011e50:	f7ee fa22 	bl	8000298 <__aeabi_dsub>
 8011e54:	460f      	mov	r7, r1
 8011e56:	4606      	mov	r6, r0
 8011e58:	f7ee fe86 	bl	8000b68 <__aeabi_d2iz>
 8011e5c:	9006      	str	r0, [sp, #24]
 8011e5e:	f7ee fb69 	bl	8000534 <__aeabi_i2d>
 8011e62:	4602      	mov	r2, r0
 8011e64:	460b      	mov	r3, r1
 8011e66:	4630      	mov	r0, r6
 8011e68:	4639      	mov	r1, r7
 8011e6a:	f7ee fa15 	bl	8000298 <__aeabi_dsub>
 8011e6e:	f1ba 0f00 	cmp.w	sl, #0
 8011e72:	4606      	mov	r6, r0
 8011e74:	460f      	mov	r7, r1
 8011e76:	dd6c      	ble.n	8011f52 <__kernel_rem_pio2+0x242>
 8011e78:	1e62      	subs	r2, r4, #1
 8011e7a:	ab0e      	add	r3, sp, #56	; 0x38
 8011e7c:	f1ca 0118 	rsb	r1, sl, #24
 8011e80:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011e84:	9d06      	ldr	r5, [sp, #24]
 8011e86:	fa40 f301 	asr.w	r3, r0, r1
 8011e8a:	441d      	add	r5, r3
 8011e8c:	408b      	lsls	r3, r1
 8011e8e:	1ac0      	subs	r0, r0, r3
 8011e90:	ab0e      	add	r3, sp, #56	; 0x38
 8011e92:	9506      	str	r5, [sp, #24]
 8011e94:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011e98:	f1ca 0317 	rsb	r3, sl, #23
 8011e9c:	fa40 f303 	asr.w	r3, r0, r3
 8011ea0:	9302      	str	r3, [sp, #8]
 8011ea2:	9b02      	ldr	r3, [sp, #8]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	dd62      	ble.n	8011f6e <__kernel_rem_pio2+0x25e>
 8011ea8:	9b06      	ldr	r3, [sp, #24]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	3301      	adds	r3, #1
 8011eae:	9306      	str	r3, [sp, #24]
 8011eb0:	4615      	mov	r5, r2
 8011eb2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011eb6:	4294      	cmp	r4, r2
 8011eb8:	f300 8095 	bgt.w	8011fe6 <__kernel_rem_pio2+0x2d6>
 8011ebc:	f1ba 0f00 	cmp.w	sl, #0
 8011ec0:	dd07      	ble.n	8011ed2 <__kernel_rem_pio2+0x1c2>
 8011ec2:	f1ba 0f01 	cmp.w	sl, #1
 8011ec6:	f000 80a2 	beq.w	801200e <__kernel_rem_pio2+0x2fe>
 8011eca:	f1ba 0f02 	cmp.w	sl, #2
 8011ece:	f000 80c1 	beq.w	8012054 <__kernel_rem_pio2+0x344>
 8011ed2:	9b02      	ldr	r3, [sp, #8]
 8011ed4:	2b02      	cmp	r3, #2
 8011ed6:	d14a      	bne.n	8011f6e <__kernel_rem_pio2+0x25e>
 8011ed8:	4632      	mov	r2, r6
 8011eda:	463b      	mov	r3, r7
 8011edc:	2000      	movs	r0, #0
 8011ede:	4958      	ldr	r1, [pc, #352]	; (8012040 <__kernel_rem_pio2+0x330>)
 8011ee0:	f7ee f9da 	bl	8000298 <__aeabi_dsub>
 8011ee4:	4606      	mov	r6, r0
 8011ee6:	460f      	mov	r7, r1
 8011ee8:	2d00      	cmp	r5, #0
 8011eea:	d040      	beq.n	8011f6e <__kernel_rem_pio2+0x25e>
 8011eec:	4650      	mov	r0, sl
 8011eee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012030 <__kernel_rem_pio2+0x320>
 8011ef2:	f000 fdd1 	bl	8012a98 <scalbn>
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	4639      	mov	r1, r7
 8011efa:	ec53 2b10 	vmov	r2, r3, d0
 8011efe:	f7ee f9cb 	bl	8000298 <__aeabi_dsub>
 8011f02:	4606      	mov	r6, r0
 8011f04:	460f      	mov	r7, r1
 8011f06:	e032      	b.n	8011f6e <__kernel_rem_pio2+0x25e>
 8011f08:	2200      	movs	r2, #0
 8011f0a:	4b4e      	ldr	r3, [pc, #312]	; (8012044 <__kernel_rem_pio2+0x334>)
 8011f0c:	4640      	mov	r0, r8
 8011f0e:	4649      	mov	r1, r9
 8011f10:	f7ee fb7a 	bl	8000608 <__aeabi_dmul>
 8011f14:	f7ee fe28 	bl	8000b68 <__aeabi_d2iz>
 8011f18:	f7ee fb0c 	bl	8000534 <__aeabi_i2d>
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	4b4a      	ldr	r3, [pc, #296]	; (8012048 <__kernel_rem_pio2+0x338>)
 8011f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f24:	f7ee fb70 	bl	8000608 <__aeabi_dmul>
 8011f28:	4602      	mov	r2, r0
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	4640      	mov	r0, r8
 8011f2e:	4649      	mov	r1, r9
 8011f30:	f7ee f9b2 	bl	8000298 <__aeabi_dsub>
 8011f34:	f7ee fe18 	bl	8000b68 <__aeabi_d2iz>
 8011f38:	ab0e      	add	r3, sp, #56	; 0x38
 8011f3a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011f3e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f46:	f7ee f9a9 	bl	800029c <__adddf3>
 8011f4a:	3501      	adds	r5, #1
 8011f4c:	4680      	mov	r8, r0
 8011f4e:	4689      	mov	r9, r1
 8011f50:	e75e      	b.n	8011e10 <__kernel_rem_pio2+0x100>
 8011f52:	d105      	bne.n	8011f60 <__kernel_rem_pio2+0x250>
 8011f54:	1e63      	subs	r3, r4, #1
 8011f56:	aa0e      	add	r2, sp, #56	; 0x38
 8011f58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011f5c:	15c3      	asrs	r3, r0, #23
 8011f5e:	e79f      	b.n	8011ea0 <__kernel_rem_pio2+0x190>
 8011f60:	2200      	movs	r2, #0
 8011f62:	4b3a      	ldr	r3, [pc, #232]	; (801204c <__kernel_rem_pio2+0x33c>)
 8011f64:	f7ee fdd6 	bl	8000b14 <__aeabi_dcmpge>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d139      	bne.n	8011fe0 <__kernel_rem_pio2+0x2d0>
 8011f6c:	9002      	str	r0, [sp, #8]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	2300      	movs	r3, #0
 8011f72:	4630      	mov	r0, r6
 8011f74:	4639      	mov	r1, r7
 8011f76:	f7ee fdaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	f000 80c7 	beq.w	801210e <__kernel_rem_pio2+0x3fe>
 8011f80:	1e65      	subs	r5, r4, #1
 8011f82:	462b      	mov	r3, r5
 8011f84:	2200      	movs	r2, #0
 8011f86:	9904      	ldr	r1, [sp, #16]
 8011f88:	428b      	cmp	r3, r1
 8011f8a:	da6a      	bge.n	8012062 <__kernel_rem_pio2+0x352>
 8011f8c:	2a00      	cmp	r2, #0
 8011f8e:	f000 8088 	beq.w	80120a2 <__kernel_rem_pio2+0x392>
 8011f92:	ab0e      	add	r3, sp, #56	; 0x38
 8011f94:	f1aa 0a18 	sub.w	sl, sl, #24
 8011f98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f000 80b4 	beq.w	801210a <__kernel_rem_pio2+0x3fa>
 8011fa2:	4650      	mov	r0, sl
 8011fa4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012030 <__kernel_rem_pio2+0x320>
 8011fa8:	f000 fd76 	bl	8012a98 <scalbn>
 8011fac:	00ec      	lsls	r4, r5, #3
 8011fae:	ab72      	add	r3, sp, #456	; 0x1c8
 8011fb0:	191e      	adds	r6, r3, r4
 8011fb2:	ec59 8b10 	vmov	r8, r9, d0
 8011fb6:	f106 0a08 	add.w	sl, r6, #8
 8011fba:	462f      	mov	r7, r5
 8011fbc:	2f00      	cmp	r7, #0
 8011fbe:	f280 80df 	bge.w	8012180 <__kernel_rem_pio2+0x470>
 8011fc2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012028 <__kernel_rem_pio2+0x318>
 8011fc6:	f04f 0a00 	mov.w	sl, #0
 8011fca:	eba5 030a 	sub.w	r3, r5, sl
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	f2c0 810a 	blt.w	80121e8 <__kernel_rem_pio2+0x4d8>
 8011fd4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012050 <__kernel_rem_pio2+0x340>
 8011fd8:	ec59 8b18 	vmov	r8, r9, d8
 8011fdc:	2700      	movs	r7, #0
 8011fde:	e0f5      	b.n	80121cc <__kernel_rem_pio2+0x4bc>
 8011fe0:	2302      	movs	r3, #2
 8011fe2:	9302      	str	r3, [sp, #8]
 8011fe4:	e760      	b.n	8011ea8 <__kernel_rem_pio2+0x198>
 8011fe6:	ab0e      	add	r3, sp, #56	; 0x38
 8011fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fec:	b94d      	cbnz	r5, 8012002 <__kernel_rem_pio2+0x2f2>
 8011fee:	b12b      	cbz	r3, 8011ffc <__kernel_rem_pio2+0x2ec>
 8011ff0:	a80e      	add	r0, sp, #56	; 0x38
 8011ff2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011ff6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	3201      	adds	r2, #1
 8011ffe:	461d      	mov	r5, r3
 8012000:	e759      	b.n	8011eb6 <__kernel_rem_pio2+0x1a6>
 8012002:	a80e      	add	r0, sp, #56	; 0x38
 8012004:	1acb      	subs	r3, r1, r3
 8012006:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801200a:	462b      	mov	r3, r5
 801200c:	e7f6      	b.n	8011ffc <__kernel_rem_pio2+0x2ec>
 801200e:	1e62      	subs	r2, r4, #1
 8012010:	ab0e      	add	r3, sp, #56	; 0x38
 8012012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012016:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801201a:	a90e      	add	r1, sp, #56	; 0x38
 801201c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012020:	e757      	b.n	8011ed2 <__kernel_rem_pio2+0x1c2>
 8012022:	bf00      	nop
 8012024:	f3af 8000 	nop.w
	...
 8012034:	3ff00000 	.word	0x3ff00000
 8012038:	080132f0 	.word	0x080132f0
 801203c:	40200000 	.word	0x40200000
 8012040:	3ff00000 	.word	0x3ff00000
 8012044:	3e700000 	.word	0x3e700000
 8012048:	41700000 	.word	0x41700000
 801204c:	3fe00000 	.word	0x3fe00000
 8012050:	080132b0 	.word	0x080132b0
 8012054:	1e62      	subs	r2, r4, #1
 8012056:	ab0e      	add	r3, sp, #56	; 0x38
 8012058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801205c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012060:	e7db      	b.n	801201a <__kernel_rem_pio2+0x30a>
 8012062:	a90e      	add	r1, sp, #56	; 0x38
 8012064:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012068:	3b01      	subs	r3, #1
 801206a:	430a      	orrs	r2, r1
 801206c:	e78b      	b.n	8011f86 <__kernel_rem_pio2+0x276>
 801206e:	3301      	adds	r3, #1
 8012070:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012074:	2900      	cmp	r1, #0
 8012076:	d0fa      	beq.n	801206e <__kernel_rem_pio2+0x35e>
 8012078:	9a08      	ldr	r2, [sp, #32]
 801207a:	4422      	add	r2, r4
 801207c:	00d2      	lsls	r2, r2, #3
 801207e:	a922      	add	r1, sp, #136	; 0x88
 8012080:	18e3      	adds	r3, r4, r3
 8012082:	9206      	str	r2, [sp, #24]
 8012084:	440a      	add	r2, r1
 8012086:	9302      	str	r3, [sp, #8]
 8012088:	f10b 0108 	add.w	r1, fp, #8
 801208c:	f102 0308 	add.w	r3, r2, #8
 8012090:	1c66      	adds	r6, r4, #1
 8012092:	910a      	str	r1, [sp, #40]	; 0x28
 8012094:	2500      	movs	r5, #0
 8012096:	930d      	str	r3, [sp, #52]	; 0x34
 8012098:	9b02      	ldr	r3, [sp, #8]
 801209a:	42b3      	cmp	r3, r6
 801209c:	da04      	bge.n	80120a8 <__kernel_rem_pio2+0x398>
 801209e:	461c      	mov	r4, r3
 80120a0:	e6a6      	b.n	8011df0 <__kernel_rem_pio2+0xe0>
 80120a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120a4:	2301      	movs	r3, #1
 80120a6:	e7e3      	b.n	8012070 <__kernel_rem_pio2+0x360>
 80120a8:	9b06      	ldr	r3, [sp, #24]
 80120aa:	18ef      	adds	r7, r5, r3
 80120ac:	ab22      	add	r3, sp, #136	; 0x88
 80120ae:	441f      	add	r7, r3
 80120b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80120b6:	f7ee fa3d 	bl	8000534 <__aeabi_i2d>
 80120ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120bc:	461c      	mov	r4, r3
 80120be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120c0:	e9c7 0100 	strd	r0, r1, [r7]
 80120c4:	eb03 0b05 	add.w	fp, r3, r5
 80120c8:	2700      	movs	r7, #0
 80120ca:	f04f 0800 	mov.w	r8, #0
 80120ce:	f04f 0900 	mov.w	r9, #0
 80120d2:	9b07      	ldr	r3, [sp, #28]
 80120d4:	429f      	cmp	r7, r3
 80120d6:	dd08      	ble.n	80120ea <__kernel_rem_pio2+0x3da>
 80120d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120da:	aa72      	add	r2, sp, #456	; 0x1c8
 80120dc:	18eb      	adds	r3, r5, r3
 80120de:	4413      	add	r3, r2
 80120e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80120e4:	3601      	adds	r6, #1
 80120e6:	3508      	adds	r5, #8
 80120e8:	e7d6      	b.n	8012098 <__kernel_rem_pio2+0x388>
 80120ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80120ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80120f2:	f7ee fa89 	bl	8000608 <__aeabi_dmul>
 80120f6:	4602      	mov	r2, r0
 80120f8:	460b      	mov	r3, r1
 80120fa:	4640      	mov	r0, r8
 80120fc:	4649      	mov	r1, r9
 80120fe:	f7ee f8cd 	bl	800029c <__adddf3>
 8012102:	3701      	adds	r7, #1
 8012104:	4680      	mov	r8, r0
 8012106:	4689      	mov	r9, r1
 8012108:	e7e3      	b.n	80120d2 <__kernel_rem_pio2+0x3c2>
 801210a:	3d01      	subs	r5, #1
 801210c:	e741      	b.n	8011f92 <__kernel_rem_pio2+0x282>
 801210e:	f1ca 0000 	rsb	r0, sl, #0
 8012112:	ec47 6b10 	vmov	d0, r6, r7
 8012116:	f000 fcbf 	bl	8012a98 <scalbn>
 801211a:	ec57 6b10 	vmov	r6, r7, d0
 801211e:	2200      	movs	r2, #0
 8012120:	4b99      	ldr	r3, [pc, #612]	; (8012388 <__kernel_rem_pio2+0x678>)
 8012122:	ee10 0a10 	vmov	r0, s0
 8012126:	4639      	mov	r1, r7
 8012128:	f7ee fcf4 	bl	8000b14 <__aeabi_dcmpge>
 801212c:	b1f8      	cbz	r0, 801216e <__kernel_rem_pio2+0x45e>
 801212e:	2200      	movs	r2, #0
 8012130:	4b96      	ldr	r3, [pc, #600]	; (801238c <__kernel_rem_pio2+0x67c>)
 8012132:	4630      	mov	r0, r6
 8012134:	4639      	mov	r1, r7
 8012136:	f7ee fa67 	bl	8000608 <__aeabi_dmul>
 801213a:	f7ee fd15 	bl	8000b68 <__aeabi_d2iz>
 801213e:	4680      	mov	r8, r0
 8012140:	f7ee f9f8 	bl	8000534 <__aeabi_i2d>
 8012144:	2200      	movs	r2, #0
 8012146:	4b90      	ldr	r3, [pc, #576]	; (8012388 <__kernel_rem_pio2+0x678>)
 8012148:	f7ee fa5e 	bl	8000608 <__aeabi_dmul>
 801214c:	460b      	mov	r3, r1
 801214e:	4602      	mov	r2, r0
 8012150:	4639      	mov	r1, r7
 8012152:	4630      	mov	r0, r6
 8012154:	f7ee f8a0 	bl	8000298 <__aeabi_dsub>
 8012158:	f7ee fd06 	bl	8000b68 <__aeabi_d2iz>
 801215c:	1c65      	adds	r5, r4, #1
 801215e:	ab0e      	add	r3, sp, #56	; 0x38
 8012160:	f10a 0a18 	add.w	sl, sl, #24
 8012164:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012168:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801216c:	e719      	b.n	8011fa2 <__kernel_rem_pio2+0x292>
 801216e:	4630      	mov	r0, r6
 8012170:	4639      	mov	r1, r7
 8012172:	f7ee fcf9 	bl	8000b68 <__aeabi_d2iz>
 8012176:	ab0e      	add	r3, sp, #56	; 0x38
 8012178:	4625      	mov	r5, r4
 801217a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801217e:	e710      	b.n	8011fa2 <__kernel_rem_pio2+0x292>
 8012180:	ab0e      	add	r3, sp, #56	; 0x38
 8012182:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012186:	f7ee f9d5 	bl	8000534 <__aeabi_i2d>
 801218a:	4642      	mov	r2, r8
 801218c:	464b      	mov	r3, r9
 801218e:	f7ee fa3b 	bl	8000608 <__aeabi_dmul>
 8012192:	2200      	movs	r2, #0
 8012194:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012198:	4b7c      	ldr	r3, [pc, #496]	; (801238c <__kernel_rem_pio2+0x67c>)
 801219a:	4640      	mov	r0, r8
 801219c:	4649      	mov	r1, r9
 801219e:	f7ee fa33 	bl	8000608 <__aeabi_dmul>
 80121a2:	3f01      	subs	r7, #1
 80121a4:	4680      	mov	r8, r0
 80121a6:	4689      	mov	r9, r1
 80121a8:	e708      	b.n	8011fbc <__kernel_rem_pio2+0x2ac>
 80121aa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80121ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80121b6:	f7ee fa27 	bl	8000608 <__aeabi_dmul>
 80121ba:	4602      	mov	r2, r0
 80121bc:	460b      	mov	r3, r1
 80121be:	4640      	mov	r0, r8
 80121c0:	4649      	mov	r1, r9
 80121c2:	f7ee f86b 	bl	800029c <__adddf3>
 80121c6:	3701      	adds	r7, #1
 80121c8:	4680      	mov	r8, r0
 80121ca:	4689      	mov	r9, r1
 80121cc:	9b04      	ldr	r3, [sp, #16]
 80121ce:	429f      	cmp	r7, r3
 80121d0:	dc01      	bgt.n	80121d6 <__kernel_rem_pio2+0x4c6>
 80121d2:	45ba      	cmp	sl, r7
 80121d4:	dae9      	bge.n	80121aa <__kernel_rem_pio2+0x49a>
 80121d6:	ab4a      	add	r3, sp, #296	; 0x128
 80121d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80121dc:	e9c3 8900 	strd	r8, r9, [r3]
 80121e0:	f10a 0a01 	add.w	sl, sl, #1
 80121e4:	3e08      	subs	r6, #8
 80121e6:	e6f0      	b.n	8011fca <__kernel_rem_pio2+0x2ba>
 80121e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80121ea:	2b03      	cmp	r3, #3
 80121ec:	d85b      	bhi.n	80122a6 <__kernel_rem_pio2+0x596>
 80121ee:	e8df f003 	tbb	[pc, r3]
 80121f2:	264a      	.short	0x264a
 80121f4:	0226      	.short	0x0226
 80121f6:	ab9a      	add	r3, sp, #616	; 0x268
 80121f8:	441c      	add	r4, r3
 80121fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80121fe:	46a2      	mov	sl, r4
 8012200:	46ab      	mov	fp, r5
 8012202:	f1bb 0f00 	cmp.w	fp, #0
 8012206:	dc6c      	bgt.n	80122e2 <__kernel_rem_pio2+0x5d2>
 8012208:	46a2      	mov	sl, r4
 801220a:	46ab      	mov	fp, r5
 801220c:	f1bb 0f01 	cmp.w	fp, #1
 8012210:	f300 8086 	bgt.w	8012320 <__kernel_rem_pio2+0x610>
 8012214:	2000      	movs	r0, #0
 8012216:	2100      	movs	r1, #0
 8012218:	2d01      	cmp	r5, #1
 801221a:	f300 80a0 	bgt.w	801235e <__kernel_rem_pio2+0x64e>
 801221e:	9b02      	ldr	r3, [sp, #8]
 8012220:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012224:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012228:	2b00      	cmp	r3, #0
 801222a:	f040 809e 	bne.w	801236a <__kernel_rem_pio2+0x65a>
 801222e:	9b01      	ldr	r3, [sp, #4]
 8012230:	e9c3 7800 	strd	r7, r8, [r3]
 8012234:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012238:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801223c:	e033      	b.n	80122a6 <__kernel_rem_pio2+0x596>
 801223e:	3408      	adds	r4, #8
 8012240:	ab4a      	add	r3, sp, #296	; 0x128
 8012242:	441c      	add	r4, r3
 8012244:	462e      	mov	r6, r5
 8012246:	2000      	movs	r0, #0
 8012248:	2100      	movs	r1, #0
 801224a:	2e00      	cmp	r6, #0
 801224c:	da3a      	bge.n	80122c4 <__kernel_rem_pio2+0x5b4>
 801224e:	9b02      	ldr	r3, [sp, #8]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d03d      	beq.n	80122d0 <__kernel_rem_pio2+0x5c0>
 8012254:	4602      	mov	r2, r0
 8012256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801225a:	9c01      	ldr	r4, [sp, #4]
 801225c:	e9c4 2300 	strd	r2, r3, [r4]
 8012260:	4602      	mov	r2, r0
 8012262:	460b      	mov	r3, r1
 8012264:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012268:	f7ee f816 	bl	8000298 <__aeabi_dsub>
 801226c:	ae4c      	add	r6, sp, #304	; 0x130
 801226e:	2401      	movs	r4, #1
 8012270:	42a5      	cmp	r5, r4
 8012272:	da30      	bge.n	80122d6 <__kernel_rem_pio2+0x5c6>
 8012274:	9b02      	ldr	r3, [sp, #8]
 8012276:	b113      	cbz	r3, 801227e <__kernel_rem_pio2+0x56e>
 8012278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801227c:	4619      	mov	r1, r3
 801227e:	9b01      	ldr	r3, [sp, #4]
 8012280:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012284:	e00f      	b.n	80122a6 <__kernel_rem_pio2+0x596>
 8012286:	ab9a      	add	r3, sp, #616	; 0x268
 8012288:	441c      	add	r4, r3
 801228a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801228e:	2000      	movs	r0, #0
 8012290:	2100      	movs	r1, #0
 8012292:	2d00      	cmp	r5, #0
 8012294:	da10      	bge.n	80122b8 <__kernel_rem_pio2+0x5a8>
 8012296:	9b02      	ldr	r3, [sp, #8]
 8012298:	b113      	cbz	r3, 80122a0 <__kernel_rem_pio2+0x590>
 801229a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801229e:	4619      	mov	r1, r3
 80122a0:	9b01      	ldr	r3, [sp, #4]
 80122a2:	e9c3 0100 	strd	r0, r1, [r3]
 80122a6:	9b06      	ldr	r3, [sp, #24]
 80122a8:	f003 0007 	and.w	r0, r3, #7
 80122ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80122b0:	ecbd 8b02 	vpop	{d8}
 80122b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80122bc:	f7ed ffee 	bl	800029c <__adddf3>
 80122c0:	3d01      	subs	r5, #1
 80122c2:	e7e6      	b.n	8012292 <__kernel_rem_pio2+0x582>
 80122c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80122c8:	f7ed ffe8 	bl	800029c <__adddf3>
 80122cc:	3e01      	subs	r6, #1
 80122ce:	e7bc      	b.n	801224a <__kernel_rem_pio2+0x53a>
 80122d0:	4602      	mov	r2, r0
 80122d2:	460b      	mov	r3, r1
 80122d4:	e7c1      	b.n	801225a <__kernel_rem_pio2+0x54a>
 80122d6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80122da:	f7ed ffdf 	bl	800029c <__adddf3>
 80122de:	3401      	adds	r4, #1
 80122e0:	e7c6      	b.n	8012270 <__kernel_rem_pio2+0x560>
 80122e2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80122e6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80122ea:	4640      	mov	r0, r8
 80122ec:	ec53 2b17 	vmov	r2, r3, d7
 80122f0:	4649      	mov	r1, r9
 80122f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80122f6:	f7ed ffd1 	bl	800029c <__adddf3>
 80122fa:	4602      	mov	r2, r0
 80122fc:	460b      	mov	r3, r1
 80122fe:	4606      	mov	r6, r0
 8012300:	460f      	mov	r7, r1
 8012302:	4640      	mov	r0, r8
 8012304:	4649      	mov	r1, r9
 8012306:	f7ed ffc7 	bl	8000298 <__aeabi_dsub>
 801230a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801230e:	f7ed ffc5 	bl	800029c <__adddf3>
 8012312:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012316:	e9ca 0100 	strd	r0, r1, [sl]
 801231a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801231e:	e770      	b.n	8012202 <__kernel_rem_pio2+0x4f2>
 8012320:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012324:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012328:	4630      	mov	r0, r6
 801232a:	ec53 2b17 	vmov	r2, r3, d7
 801232e:	4639      	mov	r1, r7
 8012330:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012334:	f7ed ffb2 	bl	800029c <__adddf3>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	4680      	mov	r8, r0
 801233e:	4689      	mov	r9, r1
 8012340:	4630      	mov	r0, r6
 8012342:	4639      	mov	r1, r7
 8012344:	f7ed ffa8 	bl	8000298 <__aeabi_dsub>
 8012348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801234c:	f7ed ffa6 	bl	800029c <__adddf3>
 8012350:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012354:	e9ca 0100 	strd	r0, r1, [sl]
 8012358:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801235c:	e756      	b.n	801220c <__kernel_rem_pio2+0x4fc>
 801235e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012362:	f7ed ff9b 	bl	800029c <__adddf3>
 8012366:	3d01      	subs	r5, #1
 8012368:	e756      	b.n	8012218 <__kernel_rem_pio2+0x508>
 801236a:	9b01      	ldr	r3, [sp, #4]
 801236c:	9a01      	ldr	r2, [sp, #4]
 801236e:	601f      	str	r7, [r3, #0]
 8012370:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012374:	605c      	str	r4, [r3, #4]
 8012376:	609d      	str	r5, [r3, #8]
 8012378:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801237c:	60d3      	str	r3, [r2, #12]
 801237e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012382:	6110      	str	r0, [r2, #16]
 8012384:	6153      	str	r3, [r2, #20]
 8012386:	e78e      	b.n	80122a6 <__kernel_rem_pio2+0x596>
 8012388:	41700000 	.word	0x41700000
 801238c:	3e700000 	.word	0x3e700000

08012390 <__kernel_sin>:
 8012390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012394:	ec55 4b10 	vmov	r4, r5, d0
 8012398:	b085      	sub	sp, #20
 801239a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801239e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80123a2:	ed8d 1b00 	vstr	d1, [sp]
 80123a6:	9002      	str	r0, [sp, #8]
 80123a8:	da06      	bge.n	80123b8 <__kernel_sin+0x28>
 80123aa:	ee10 0a10 	vmov	r0, s0
 80123ae:	4629      	mov	r1, r5
 80123b0:	f7ee fbda 	bl	8000b68 <__aeabi_d2iz>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d051      	beq.n	801245c <__kernel_sin+0xcc>
 80123b8:	4622      	mov	r2, r4
 80123ba:	462b      	mov	r3, r5
 80123bc:	4620      	mov	r0, r4
 80123be:	4629      	mov	r1, r5
 80123c0:	f7ee f922 	bl	8000608 <__aeabi_dmul>
 80123c4:	4682      	mov	sl, r0
 80123c6:	468b      	mov	fp, r1
 80123c8:	4602      	mov	r2, r0
 80123ca:	460b      	mov	r3, r1
 80123cc:	4620      	mov	r0, r4
 80123ce:	4629      	mov	r1, r5
 80123d0:	f7ee f91a 	bl	8000608 <__aeabi_dmul>
 80123d4:	a341      	add	r3, pc, #260	; (adr r3, 80124dc <__kernel_sin+0x14c>)
 80123d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123da:	4680      	mov	r8, r0
 80123dc:	4689      	mov	r9, r1
 80123de:	4650      	mov	r0, sl
 80123e0:	4659      	mov	r1, fp
 80123e2:	f7ee f911 	bl	8000608 <__aeabi_dmul>
 80123e6:	a33f      	add	r3, pc, #252	; (adr r3, 80124e4 <__kernel_sin+0x154>)
 80123e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ec:	f7ed ff54 	bl	8000298 <__aeabi_dsub>
 80123f0:	4652      	mov	r2, sl
 80123f2:	465b      	mov	r3, fp
 80123f4:	f7ee f908 	bl	8000608 <__aeabi_dmul>
 80123f8:	a33c      	add	r3, pc, #240	; (adr r3, 80124ec <__kernel_sin+0x15c>)
 80123fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fe:	f7ed ff4d 	bl	800029c <__adddf3>
 8012402:	4652      	mov	r2, sl
 8012404:	465b      	mov	r3, fp
 8012406:	f7ee f8ff 	bl	8000608 <__aeabi_dmul>
 801240a:	a33a      	add	r3, pc, #232	; (adr r3, 80124f4 <__kernel_sin+0x164>)
 801240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012410:	f7ed ff42 	bl	8000298 <__aeabi_dsub>
 8012414:	4652      	mov	r2, sl
 8012416:	465b      	mov	r3, fp
 8012418:	f7ee f8f6 	bl	8000608 <__aeabi_dmul>
 801241c:	a337      	add	r3, pc, #220	; (adr r3, 80124fc <__kernel_sin+0x16c>)
 801241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012422:	f7ed ff3b 	bl	800029c <__adddf3>
 8012426:	9b02      	ldr	r3, [sp, #8]
 8012428:	4606      	mov	r6, r0
 801242a:	460f      	mov	r7, r1
 801242c:	b9db      	cbnz	r3, 8012466 <__kernel_sin+0xd6>
 801242e:	4602      	mov	r2, r0
 8012430:	460b      	mov	r3, r1
 8012432:	4650      	mov	r0, sl
 8012434:	4659      	mov	r1, fp
 8012436:	f7ee f8e7 	bl	8000608 <__aeabi_dmul>
 801243a:	a325      	add	r3, pc, #148	; (adr r3, 80124d0 <__kernel_sin+0x140>)
 801243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012440:	f7ed ff2a 	bl	8000298 <__aeabi_dsub>
 8012444:	4642      	mov	r2, r8
 8012446:	464b      	mov	r3, r9
 8012448:	f7ee f8de 	bl	8000608 <__aeabi_dmul>
 801244c:	4602      	mov	r2, r0
 801244e:	460b      	mov	r3, r1
 8012450:	4620      	mov	r0, r4
 8012452:	4629      	mov	r1, r5
 8012454:	f7ed ff22 	bl	800029c <__adddf3>
 8012458:	4604      	mov	r4, r0
 801245a:	460d      	mov	r5, r1
 801245c:	ec45 4b10 	vmov	d0, r4, r5
 8012460:	b005      	add	sp, #20
 8012462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012466:	2200      	movs	r2, #0
 8012468:	4b1b      	ldr	r3, [pc, #108]	; (80124d8 <__kernel_sin+0x148>)
 801246a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801246e:	f7ee f8cb 	bl	8000608 <__aeabi_dmul>
 8012472:	4632      	mov	r2, r6
 8012474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012478:	463b      	mov	r3, r7
 801247a:	4640      	mov	r0, r8
 801247c:	4649      	mov	r1, r9
 801247e:	f7ee f8c3 	bl	8000608 <__aeabi_dmul>
 8012482:	4602      	mov	r2, r0
 8012484:	460b      	mov	r3, r1
 8012486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801248a:	f7ed ff05 	bl	8000298 <__aeabi_dsub>
 801248e:	4652      	mov	r2, sl
 8012490:	465b      	mov	r3, fp
 8012492:	f7ee f8b9 	bl	8000608 <__aeabi_dmul>
 8012496:	e9dd 2300 	ldrd	r2, r3, [sp]
 801249a:	f7ed fefd 	bl	8000298 <__aeabi_dsub>
 801249e:	a30c      	add	r3, pc, #48	; (adr r3, 80124d0 <__kernel_sin+0x140>)
 80124a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a4:	4606      	mov	r6, r0
 80124a6:	460f      	mov	r7, r1
 80124a8:	4640      	mov	r0, r8
 80124aa:	4649      	mov	r1, r9
 80124ac:	f7ee f8ac 	bl	8000608 <__aeabi_dmul>
 80124b0:	4602      	mov	r2, r0
 80124b2:	460b      	mov	r3, r1
 80124b4:	4630      	mov	r0, r6
 80124b6:	4639      	mov	r1, r7
 80124b8:	f7ed fef0 	bl	800029c <__adddf3>
 80124bc:	4602      	mov	r2, r0
 80124be:	460b      	mov	r3, r1
 80124c0:	4620      	mov	r0, r4
 80124c2:	4629      	mov	r1, r5
 80124c4:	f7ed fee8 	bl	8000298 <__aeabi_dsub>
 80124c8:	e7c6      	b.n	8012458 <__kernel_sin+0xc8>
 80124ca:	bf00      	nop
 80124cc:	f3af 8000 	nop.w
 80124d0:	55555549 	.word	0x55555549
 80124d4:	3fc55555 	.word	0x3fc55555
 80124d8:	3fe00000 	.word	0x3fe00000
 80124dc:	5acfd57c 	.word	0x5acfd57c
 80124e0:	3de5d93a 	.word	0x3de5d93a
 80124e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80124e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80124ec:	57b1fe7d 	.word	0x57b1fe7d
 80124f0:	3ec71de3 	.word	0x3ec71de3
 80124f4:	19c161d5 	.word	0x19c161d5
 80124f8:	3f2a01a0 	.word	0x3f2a01a0
 80124fc:	1110f8a6 	.word	0x1110f8a6
 8012500:	3f811111 	.word	0x3f811111
 8012504:	00000000 	.word	0x00000000

08012508 <atan>:
 8012508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801250c:	ec55 4b10 	vmov	r4, r5, d0
 8012510:	4bc3      	ldr	r3, [pc, #780]	; (8012820 <atan+0x318>)
 8012512:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012516:	429e      	cmp	r6, r3
 8012518:	46ab      	mov	fp, r5
 801251a:	dd18      	ble.n	801254e <atan+0x46>
 801251c:	4bc1      	ldr	r3, [pc, #772]	; (8012824 <atan+0x31c>)
 801251e:	429e      	cmp	r6, r3
 8012520:	dc01      	bgt.n	8012526 <atan+0x1e>
 8012522:	d109      	bne.n	8012538 <atan+0x30>
 8012524:	b144      	cbz	r4, 8012538 <atan+0x30>
 8012526:	4622      	mov	r2, r4
 8012528:	462b      	mov	r3, r5
 801252a:	4620      	mov	r0, r4
 801252c:	4629      	mov	r1, r5
 801252e:	f7ed feb5 	bl	800029c <__adddf3>
 8012532:	4604      	mov	r4, r0
 8012534:	460d      	mov	r5, r1
 8012536:	e006      	b.n	8012546 <atan+0x3e>
 8012538:	f1bb 0f00 	cmp.w	fp, #0
 801253c:	f340 8131 	ble.w	80127a2 <atan+0x29a>
 8012540:	a59b      	add	r5, pc, #620	; (adr r5, 80127b0 <atan+0x2a8>)
 8012542:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012546:	ec45 4b10 	vmov	d0, r4, r5
 801254a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801254e:	4bb6      	ldr	r3, [pc, #728]	; (8012828 <atan+0x320>)
 8012550:	429e      	cmp	r6, r3
 8012552:	dc14      	bgt.n	801257e <atan+0x76>
 8012554:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012558:	429e      	cmp	r6, r3
 801255a:	dc0d      	bgt.n	8012578 <atan+0x70>
 801255c:	a396      	add	r3, pc, #600	; (adr r3, 80127b8 <atan+0x2b0>)
 801255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012562:	ee10 0a10 	vmov	r0, s0
 8012566:	4629      	mov	r1, r5
 8012568:	f7ed fe98 	bl	800029c <__adddf3>
 801256c:	2200      	movs	r2, #0
 801256e:	4baf      	ldr	r3, [pc, #700]	; (801282c <atan+0x324>)
 8012570:	f7ee fada 	bl	8000b28 <__aeabi_dcmpgt>
 8012574:	2800      	cmp	r0, #0
 8012576:	d1e6      	bne.n	8012546 <atan+0x3e>
 8012578:	f04f 3aff 	mov.w	sl, #4294967295
 801257c:	e02b      	b.n	80125d6 <atan+0xce>
 801257e:	f000 f963 	bl	8012848 <fabs>
 8012582:	4bab      	ldr	r3, [pc, #684]	; (8012830 <atan+0x328>)
 8012584:	429e      	cmp	r6, r3
 8012586:	ec55 4b10 	vmov	r4, r5, d0
 801258a:	f300 80bf 	bgt.w	801270c <atan+0x204>
 801258e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012592:	429e      	cmp	r6, r3
 8012594:	f300 80a0 	bgt.w	80126d8 <atan+0x1d0>
 8012598:	ee10 2a10 	vmov	r2, s0
 801259c:	ee10 0a10 	vmov	r0, s0
 80125a0:	462b      	mov	r3, r5
 80125a2:	4629      	mov	r1, r5
 80125a4:	f7ed fe7a 	bl	800029c <__adddf3>
 80125a8:	2200      	movs	r2, #0
 80125aa:	4ba0      	ldr	r3, [pc, #640]	; (801282c <atan+0x324>)
 80125ac:	f7ed fe74 	bl	8000298 <__aeabi_dsub>
 80125b0:	2200      	movs	r2, #0
 80125b2:	4606      	mov	r6, r0
 80125b4:	460f      	mov	r7, r1
 80125b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125ba:	4620      	mov	r0, r4
 80125bc:	4629      	mov	r1, r5
 80125be:	f7ed fe6d 	bl	800029c <__adddf3>
 80125c2:	4602      	mov	r2, r0
 80125c4:	460b      	mov	r3, r1
 80125c6:	4630      	mov	r0, r6
 80125c8:	4639      	mov	r1, r7
 80125ca:	f7ee f947 	bl	800085c <__aeabi_ddiv>
 80125ce:	f04f 0a00 	mov.w	sl, #0
 80125d2:	4604      	mov	r4, r0
 80125d4:	460d      	mov	r5, r1
 80125d6:	4622      	mov	r2, r4
 80125d8:	462b      	mov	r3, r5
 80125da:	4620      	mov	r0, r4
 80125dc:	4629      	mov	r1, r5
 80125de:	f7ee f813 	bl	8000608 <__aeabi_dmul>
 80125e2:	4602      	mov	r2, r0
 80125e4:	460b      	mov	r3, r1
 80125e6:	4680      	mov	r8, r0
 80125e8:	4689      	mov	r9, r1
 80125ea:	f7ee f80d 	bl	8000608 <__aeabi_dmul>
 80125ee:	a374      	add	r3, pc, #464	; (adr r3, 80127c0 <atan+0x2b8>)
 80125f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f4:	4606      	mov	r6, r0
 80125f6:	460f      	mov	r7, r1
 80125f8:	f7ee f806 	bl	8000608 <__aeabi_dmul>
 80125fc:	a372      	add	r3, pc, #456	; (adr r3, 80127c8 <atan+0x2c0>)
 80125fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012602:	f7ed fe4b 	bl	800029c <__adddf3>
 8012606:	4632      	mov	r2, r6
 8012608:	463b      	mov	r3, r7
 801260a:	f7ed fffd 	bl	8000608 <__aeabi_dmul>
 801260e:	a370      	add	r3, pc, #448	; (adr r3, 80127d0 <atan+0x2c8>)
 8012610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012614:	f7ed fe42 	bl	800029c <__adddf3>
 8012618:	4632      	mov	r2, r6
 801261a:	463b      	mov	r3, r7
 801261c:	f7ed fff4 	bl	8000608 <__aeabi_dmul>
 8012620:	a36d      	add	r3, pc, #436	; (adr r3, 80127d8 <atan+0x2d0>)
 8012622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012626:	f7ed fe39 	bl	800029c <__adddf3>
 801262a:	4632      	mov	r2, r6
 801262c:	463b      	mov	r3, r7
 801262e:	f7ed ffeb 	bl	8000608 <__aeabi_dmul>
 8012632:	a36b      	add	r3, pc, #428	; (adr r3, 80127e0 <atan+0x2d8>)
 8012634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012638:	f7ed fe30 	bl	800029c <__adddf3>
 801263c:	4632      	mov	r2, r6
 801263e:	463b      	mov	r3, r7
 8012640:	f7ed ffe2 	bl	8000608 <__aeabi_dmul>
 8012644:	a368      	add	r3, pc, #416	; (adr r3, 80127e8 <atan+0x2e0>)
 8012646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264a:	f7ed fe27 	bl	800029c <__adddf3>
 801264e:	4642      	mov	r2, r8
 8012650:	464b      	mov	r3, r9
 8012652:	f7ed ffd9 	bl	8000608 <__aeabi_dmul>
 8012656:	a366      	add	r3, pc, #408	; (adr r3, 80127f0 <atan+0x2e8>)
 8012658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265c:	4680      	mov	r8, r0
 801265e:	4689      	mov	r9, r1
 8012660:	4630      	mov	r0, r6
 8012662:	4639      	mov	r1, r7
 8012664:	f7ed ffd0 	bl	8000608 <__aeabi_dmul>
 8012668:	a363      	add	r3, pc, #396	; (adr r3, 80127f8 <atan+0x2f0>)
 801266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266e:	f7ed fe13 	bl	8000298 <__aeabi_dsub>
 8012672:	4632      	mov	r2, r6
 8012674:	463b      	mov	r3, r7
 8012676:	f7ed ffc7 	bl	8000608 <__aeabi_dmul>
 801267a:	a361      	add	r3, pc, #388	; (adr r3, 8012800 <atan+0x2f8>)
 801267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012680:	f7ed fe0a 	bl	8000298 <__aeabi_dsub>
 8012684:	4632      	mov	r2, r6
 8012686:	463b      	mov	r3, r7
 8012688:	f7ed ffbe 	bl	8000608 <__aeabi_dmul>
 801268c:	a35e      	add	r3, pc, #376	; (adr r3, 8012808 <atan+0x300>)
 801268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012692:	f7ed fe01 	bl	8000298 <__aeabi_dsub>
 8012696:	4632      	mov	r2, r6
 8012698:	463b      	mov	r3, r7
 801269a:	f7ed ffb5 	bl	8000608 <__aeabi_dmul>
 801269e:	a35c      	add	r3, pc, #368	; (adr r3, 8012810 <atan+0x308>)
 80126a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a4:	f7ed fdf8 	bl	8000298 <__aeabi_dsub>
 80126a8:	4632      	mov	r2, r6
 80126aa:	463b      	mov	r3, r7
 80126ac:	f7ed ffac 	bl	8000608 <__aeabi_dmul>
 80126b0:	4602      	mov	r2, r0
 80126b2:	460b      	mov	r3, r1
 80126b4:	4640      	mov	r0, r8
 80126b6:	4649      	mov	r1, r9
 80126b8:	f7ed fdf0 	bl	800029c <__adddf3>
 80126bc:	4622      	mov	r2, r4
 80126be:	462b      	mov	r3, r5
 80126c0:	f7ed ffa2 	bl	8000608 <__aeabi_dmul>
 80126c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80126c8:	4602      	mov	r2, r0
 80126ca:	460b      	mov	r3, r1
 80126cc:	d14b      	bne.n	8012766 <atan+0x25e>
 80126ce:	4620      	mov	r0, r4
 80126d0:	4629      	mov	r1, r5
 80126d2:	f7ed fde1 	bl	8000298 <__aeabi_dsub>
 80126d6:	e72c      	b.n	8012532 <atan+0x2a>
 80126d8:	ee10 0a10 	vmov	r0, s0
 80126dc:	2200      	movs	r2, #0
 80126de:	4b53      	ldr	r3, [pc, #332]	; (801282c <atan+0x324>)
 80126e0:	4629      	mov	r1, r5
 80126e2:	f7ed fdd9 	bl	8000298 <__aeabi_dsub>
 80126e6:	2200      	movs	r2, #0
 80126e8:	4606      	mov	r6, r0
 80126ea:	460f      	mov	r7, r1
 80126ec:	4b4f      	ldr	r3, [pc, #316]	; (801282c <atan+0x324>)
 80126ee:	4620      	mov	r0, r4
 80126f0:	4629      	mov	r1, r5
 80126f2:	f7ed fdd3 	bl	800029c <__adddf3>
 80126f6:	4602      	mov	r2, r0
 80126f8:	460b      	mov	r3, r1
 80126fa:	4630      	mov	r0, r6
 80126fc:	4639      	mov	r1, r7
 80126fe:	f7ee f8ad 	bl	800085c <__aeabi_ddiv>
 8012702:	f04f 0a01 	mov.w	sl, #1
 8012706:	4604      	mov	r4, r0
 8012708:	460d      	mov	r5, r1
 801270a:	e764      	b.n	80125d6 <atan+0xce>
 801270c:	4b49      	ldr	r3, [pc, #292]	; (8012834 <atan+0x32c>)
 801270e:	429e      	cmp	r6, r3
 8012710:	dc1d      	bgt.n	801274e <atan+0x246>
 8012712:	ee10 0a10 	vmov	r0, s0
 8012716:	2200      	movs	r2, #0
 8012718:	4b47      	ldr	r3, [pc, #284]	; (8012838 <atan+0x330>)
 801271a:	4629      	mov	r1, r5
 801271c:	f7ed fdbc 	bl	8000298 <__aeabi_dsub>
 8012720:	2200      	movs	r2, #0
 8012722:	4606      	mov	r6, r0
 8012724:	460f      	mov	r7, r1
 8012726:	4b44      	ldr	r3, [pc, #272]	; (8012838 <atan+0x330>)
 8012728:	4620      	mov	r0, r4
 801272a:	4629      	mov	r1, r5
 801272c:	f7ed ff6c 	bl	8000608 <__aeabi_dmul>
 8012730:	2200      	movs	r2, #0
 8012732:	4b3e      	ldr	r3, [pc, #248]	; (801282c <atan+0x324>)
 8012734:	f7ed fdb2 	bl	800029c <__adddf3>
 8012738:	4602      	mov	r2, r0
 801273a:	460b      	mov	r3, r1
 801273c:	4630      	mov	r0, r6
 801273e:	4639      	mov	r1, r7
 8012740:	f7ee f88c 	bl	800085c <__aeabi_ddiv>
 8012744:	f04f 0a02 	mov.w	sl, #2
 8012748:	4604      	mov	r4, r0
 801274a:	460d      	mov	r5, r1
 801274c:	e743      	b.n	80125d6 <atan+0xce>
 801274e:	462b      	mov	r3, r5
 8012750:	ee10 2a10 	vmov	r2, s0
 8012754:	2000      	movs	r0, #0
 8012756:	4939      	ldr	r1, [pc, #228]	; (801283c <atan+0x334>)
 8012758:	f7ee f880 	bl	800085c <__aeabi_ddiv>
 801275c:	f04f 0a03 	mov.w	sl, #3
 8012760:	4604      	mov	r4, r0
 8012762:	460d      	mov	r5, r1
 8012764:	e737      	b.n	80125d6 <atan+0xce>
 8012766:	4b36      	ldr	r3, [pc, #216]	; (8012840 <atan+0x338>)
 8012768:	4e36      	ldr	r6, [pc, #216]	; (8012844 <atan+0x33c>)
 801276a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801276e:	4456      	add	r6, sl
 8012770:	449a      	add	sl, r3
 8012772:	e9da 2300 	ldrd	r2, r3, [sl]
 8012776:	f7ed fd8f 	bl	8000298 <__aeabi_dsub>
 801277a:	4622      	mov	r2, r4
 801277c:	462b      	mov	r3, r5
 801277e:	f7ed fd8b 	bl	8000298 <__aeabi_dsub>
 8012782:	4602      	mov	r2, r0
 8012784:	460b      	mov	r3, r1
 8012786:	e9d6 0100 	ldrd	r0, r1, [r6]
 801278a:	f7ed fd85 	bl	8000298 <__aeabi_dsub>
 801278e:	f1bb 0f00 	cmp.w	fp, #0
 8012792:	4604      	mov	r4, r0
 8012794:	460d      	mov	r5, r1
 8012796:	f6bf aed6 	bge.w	8012546 <atan+0x3e>
 801279a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801279e:	461d      	mov	r5, r3
 80127a0:	e6d1      	b.n	8012546 <atan+0x3e>
 80127a2:	a51d      	add	r5, pc, #116	; (adr r5, 8012818 <atan+0x310>)
 80127a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80127a8:	e6cd      	b.n	8012546 <atan+0x3e>
 80127aa:	bf00      	nop
 80127ac:	f3af 8000 	nop.w
 80127b0:	54442d18 	.word	0x54442d18
 80127b4:	3ff921fb 	.word	0x3ff921fb
 80127b8:	8800759c 	.word	0x8800759c
 80127bc:	7e37e43c 	.word	0x7e37e43c
 80127c0:	e322da11 	.word	0xe322da11
 80127c4:	3f90ad3a 	.word	0x3f90ad3a
 80127c8:	24760deb 	.word	0x24760deb
 80127cc:	3fa97b4b 	.word	0x3fa97b4b
 80127d0:	a0d03d51 	.word	0xa0d03d51
 80127d4:	3fb10d66 	.word	0x3fb10d66
 80127d8:	c54c206e 	.word	0xc54c206e
 80127dc:	3fb745cd 	.word	0x3fb745cd
 80127e0:	920083ff 	.word	0x920083ff
 80127e4:	3fc24924 	.word	0x3fc24924
 80127e8:	5555550d 	.word	0x5555550d
 80127ec:	3fd55555 	.word	0x3fd55555
 80127f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80127f4:	bfa2b444 	.word	0xbfa2b444
 80127f8:	52defd9a 	.word	0x52defd9a
 80127fc:	3fadde2d 	.word	0x3fadde2d
 8012800:	af749a6d 	.word	0xaf749a6d
 8012804:	3fb3b0f2 	.word	0x3fb3b0f2
 8012808:	fe231671 	.word	0xfe231671
 801280c:	3fbc71c6 	.word	0x3fbc71c6
 8012810:	9998ebc4 	.word	0x9998ebc4
 8012814:	3fc99999 	.word	0x3fc99999
 8012818:	54442d18 	.word	0x54442d18
 801281c:	bff921fb 	.word	0xbff921fb
 8012820:	440fffff 	.word	0x440fffff
 8012824:	7ff00000 	.word	0x7ff00000
 8012828:	3fdbffff 	.word	0x3fdbffff
 801282c:	3ff00000 	.word	0x3ff00000
 8012830:	3ff2ffff 	.word	0x3ff2ffff
 8012834:	40037fff 	.word	0x40037fff
 8012838:	3ff80000 	.word	0x3ff80000
 801283c:	bff00000 	.word	0xbff00000
 8012840:	08013320 	.word	0x08013320
 8012844:	08013300 	.word	0x08013300

08012848 <fabs>:
 8012848:	ec51 0b10 	vmov	r0, r1, d0
 801284c:	ee10 2a10 	vmov	r2, s0
 8012850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012854:	ec43 2b10 	vmov	d0, r2, r3
 8012858:	4770      	bx	lr

0801285a <finite>:
 801285a:	ee10 3a90 	vmov	r3, s1
 801285e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012862:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012866:	0fc0      	lsrs	r0, r0, #31
 8012868:	4770      	bx	lr
 801286a:	0000      	movs	r0, r0
 801286c:	0000      	movs	r0, r0
	...

08012870 <floor>:
 8012870:	ec51 0b10 	vmov	r0, r1, d0
 8012874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012878:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801287c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012880:	2e13      	cmp	r6, #19
 8012882:	460c      	mov	r4, r1
 8012884:	ee10 5a10 	vmov	r5, s0
 8012888:	4680      	mov	r8, r0
 801288a:	dc34      	bgt.n	80128f6 <floor+0x86>
 801288c:	2e00      	cmp	r6, #0
 801288e:	da16      	bge.n	80128be <floor+0x4e>
 8012890:	a335      	add	r3, pc, #212	; (adr r3, 8012968 <floor+0xf8>)
 8012892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012896:	f7ed fd01 	bl	800029c <__adddf3>
 801289a:	2200      	movs	r2, #0
 801289c:	2300      	movs	r3, #0
 801289e:	f7ee f943 	bl	8000b28 <__aeabi_dcmpgt>
 80128a2:	b148      	cbz	r0, 80128b8 <floor+0x48>
 80128a4:	2c00      	cmp	r4, #0
 80128a6:	da59      	bge.n	801295c <floor+0xec>
 80128a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80128ac:	4a30      	ldr	r2, [pc, #192]	; (8012970 <floor+0x100>)
 80128ae:	432b      	orrs	r3, r5
 80128b0:	2500      	movs	r5, #0
 80128b2:	42ab      	cmp	r3, r5
 80128b4:	bf18      	it	ne
 80128b6:	4614      	movne	r4, r2
 80128b8:	4621      	mov	r1, r4
 80128ba:	4628      	mov	r0, r5
 80128bc:	e025      	b.n	801290a <floor+0x9a>
 80128be:	4f2d      	ldr	r7, [pc, #180]	; (8012974 <floor+0x104>)
 80128c0:	4137      	asrs	r7, r6
 80128c2:	ea01 0307 	and.w	r3, r1, r7
 80128c6:	4303      	orrs	r3, r0
 80128c8:	d01f      	beq.n	801290a <floor+0x9a>
 80128ca:	a327      	add	r3, pc, #156	; (adr r3, 8012968 <floor+0xf8>)
 80128cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d0:	f7ed fce4 	bl	800029c <__adddf3>
 80128d4:	2200      	movs	r2, #0
 80128d6:	2300      	movs	r3, #0
 80128d8:	f7ee f926 	bl	8000b28 <__aeabi_dcmpgt>
 80128dc:	2800      	cmp	r0, #0
 80128de:	d0eb      	beq.n	80128b8 <floor+0x48>
 80128e0:	2c00      	cmp	r4, #0
 80128e2:	bfbe      	ittt	lt
 80128e4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80128e8:	fa43 f606 	asrlt.w	r6, r3, r6
 80128ec:	19a4      	addlt	r4, r4, r6
 80128ee:	ea24 0407 	bic.w	r4, r4, r7
 80128f2:	2500      	movs	r5, #0
 80128f4:	e7e0      	b.n	80128b8 <floor+0x48>
 80128f6:	2e33      	cmp	r6, #51	; 0x33
 80128f8:	dd0b      	ble.n	8012912 <floor+0xa2>
 80128fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80128fe:	d104      	bne.n	801290a <floor+0x9a>
 8012900:	ee10 2a10 	vmov	r2, s0
 8012904:	460b      	mov	r3, r1
 8012906:	f7ed fcc9 	bl	800029c <__adddf3>
 801290a:	ec41 0b10 	vmov	d0, r0, r1
 801290e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012912:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012916:	f04f 33ff 	mov.w	r3, #4294967295
 801291a:	fa23 f707 	lsr.w	r7, r3, r7
 801291e:	4207      	tst	r7, r0
 8012920:	d0f3      	beq.n	801290a <floor+0x9a>
 8012922:	a311      	add	r3, pc, #68	; (adr r3, 8012968 <floor+0xf8>)
 8012924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012928:	f7ed fcb8 	bl	800029c <__adddf3>
 801292c:	2200      	movs	r2, #0
 801292e:	2300      	movs	r3, #0
 8012930:	f7ee f8fa 	bl	8000b28 <__aeabi_dcmpgt>
 8012934:	2800      	cmp	r0, #0
 8012936:	d0bf      	beq.n	80128b8 <floor+0x48>
 8012938:	2c00      	cmp	r4, #0
 801293a:	da02      	bge.n	8012942 <floor+0xd2>
 801293c:	2e14      	cmp	r6, #20
 801293e:	d103      	bne.n	8012948 <floor+0xd8>
 8012940:	3401      	adds	r4, #1
 8012942:	ea25 0507 	bic.w	r5, r5, r7
 8012946:	e7b7      	b.n	80128b8 <floor+0x48>
 8012948:	2301      	movs	r3, #1
 801294a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801294e:	fa03 f606 	lsl.w	r6, r3, r6
 8012952:	4435      	add	r5, r6
 8012954:	4545      	cmp	r5, r8
 8012956:	bf38      	it	cc
 8012958:	18e4      	addcc	r4, r4, r3
 801295a:	e7f2      	b.n	8012942 <floor+0xd2>
 801295c:	2500      	movs	r5, #0
 801295e:	462c      	mov	r4, r5
 8012960:	e7aa      	b.n	80128b8 <floor+0x48>
 8012962:	bf00      	nop
 8012964:	f3af 8000 	nop.w
 8012968:	8800759c 	.word	0x8800759c
 801296c:	7e37e43c 	.word	0x7e37e43c
 8012970:	bff00000 	.word	0xbff00000
 8012974:	000fffff 	.word	0x000fffff

08012978 <matherr>:
 8012978:	2000      	movs	r0, #0
 801297a:	4770      	bx	lr
 801297c:	0000      	movs	r0, r0
	...

08012980 <nan>:
 8012980:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012988 <nan+0x8>
 8012984:	4770      	bx	lr
 8012986:	bf00      	nop
 8012988:	00000000 	.word	0x00000000
 801298c:	7ff80000 	.word	0x7ff80000

08012990 <rint>:
 8012990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012992:	ec51 0b10 	vmov	r0, r1, d0
 8012996:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801299a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801299e:	2e13      	cmp	r6, #19
 80129a0:	460b      	mov	r3, r1
 80129a2:	ee10 4a10 	vmov	r4, s0
 80129a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80129aa:	dc56      	bgt.n	8012a5a <rint+0xca>
 80129ac:	2e00      	cmp	r6, #0
 80129ae:	da2b      	bge.n	8012a08 <rint+0x78>
 80129b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80129b4:	4302      	orrs	r2, r0
 80129b6:	d023      	beq.n	8012a00 <rint+0x70>
 80129b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80129bc:	4302      	orrs	r2, r0
 80129be:	4254      	negs	r4, r2
 80129c0:	4314      	orrs	r4, r2
 80129c2:	0c4b      	lsrs	r3, r1, #17
 80129c4:	0b24      	lsrs	r4, r4, #12
 80129c6:	045b      	lsls	r3, r3, #17
 80129c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80129cc:	ea44 0103 	orr.w	r1, r4, r3
 80129d0:	460b      	mov	r3, r1
 80129d2:	492f      	ldr	r1, [pc, #188]	; (8012a90 <rint+0x100>)
 80129d4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80129d8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80129dc:	4602      	mov	r2, r0
 80129de:	4639      	mov	r1, r7
 80129e0:	4630      	mov	r0, r6
 80129e2:	f7ed fc5b 	bl	800029c <__adddf3>
 80129e6:	e9cd 0100 	strd	r0, r1, [sp]
 80129ea:	463b      	mov	r3, r7
 80129ec:	4632      	mov	r2, r6
 80129ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129f2:	f7ed fc51 	bl	8000298 <__aeabi_dsub>
 80129f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80129fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80129fe:	4639      	mov	r1, r7
 8012a00:	ec41 0b10 	vmov	d0, r0, r1
 8012a04:	b003      	add	sp, #12
 8012a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a08:	4a22      	ldr	r2, [pc, #136]	; (8012a94 <rint+0x104>)
 8012a0a:	4132      	asrs	r2, r6
 8012a0c:	ea01 0702 	and.w	r7, r1, r2
 8012a10:	4307      	orrs	r7, r0
 8012a12:	d0f5      	beq.n	8012a00 <rint+0x70>
 8012a14:	0852      	lsrs	r2, r2, #1
 8012a16:	4011      	ands	r1, r2
 8012a18:	430c      	orrs	r4, r1
 8012a1a:	d00b      	beq.n	8012a34 <rint+0xa4>
 8012a1c:	ea23 0202 	bic.w	r2, r3, r2
 8012a20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012a24:	2e13      	cmp	r6, #19
 8012a26:	fa43 f306 	asr.w	r3, r3, r6
 8012a2a:	bf0c      	ite	eq
 8012a2c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012a30:	2400      	movne	r4, #0
 8012a32:	4313      	orrs	r3, r2
 8012a34:	4916      	ldr	r1, [pc, #88]	; (8012a90 <rint+0x100>)
 8012a36:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012a3a:	4622      	mov	r2, r4
 8012a3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012a40:	4620      	mov	r0, r4
 8012a42:	4629      	mov	r1, r5
 8012a44:	f7ed fc2a 	bl	800029c <__adddf3>
 8012a48:	e9cd 0100 	strd	r0, r1, [sp]
 8012a4c:	4622      	mov	r2, r4
 8012a4e:	462b      	mov	r3, r5
 8012a50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a54:	f7ed fc20 	bl	8000298 <__aeabi_dsub>
 8012a58:	e7d2      	b.n	8012a00 <rint+0x70>
 8012a5a:	2e33      	cmp	r6, #51	; 0x33
 8012a5c:	dd07      	ble.n	8012a6e <rint+0xde>
 8012a5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012a62:	d1cd      	bne.n	8012a00 <rint+0x70>
 8012a64:	ee10 2a10 	vmov	r2, s0
 8012a68:	f7ed fc18 	bl	800029c <__adddf3>
 8012a6c:	e7c8      	b.n	8012a00 <rint+0x70>
 8012a6e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8012a72:	f04f 32ff 	mov.w	r2, #4294967295
 8012a76:	40f2      	lsrs	r2, r6
 8012a78:	4210      	tst	r0, r2
 8012a7a:	d0c1      	beq.n	8012a00 <rint+0x70>
 8012a7c:	0852      	lsrs	r2, r2, #1
 8012a7e:	4210      	tst	r0, r2
 8012a80:	bf1f      	itttt	ne
 8012a82:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012a86:	ea20 0202 	bicne.w	r2, r0, r2
 8012a8a:	4134      	asrne	r4, r6
 8012a8c:	4314      	orrne	r4, r2
 8012a8e:	e7d1      	b.n	8012a34 <rint+0xa4>
 8012a90:	08013340 	.word	0x08013340
 8012a94:	000fffff 	.word	0x000fffff

08012a98 <scalbn>:
 8012a98:	b570      	push	{r4, r5, r6, lr}
 8012a9a:	ec55 4b10 	vmov	r4, r5, d0
 8012a9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012aa2:	4606      	mov	r6, r0
 8012aa4:	462b      	mov	r3, r5
 8012aa6:	b9aa      	cbnz	r2, 8012ad4 <scalbn+0x3c>
 8012aa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012aac:	4323      	orrs	r3, r4
 8012aae:	d03b      	beq.n	8012b28 <scalbn+0x90>
 8012ab0:	4b31      	ldr	r3, [pc, #196]	; (8012b78 <scalbn+0xe0>)
 8012ab2:	4629      	mov	r1, r5
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	ee10 0a10 	vmov	r0, s0
 8012aba:	f7ed fda5 	bl	8000608 <__aeabi_dmul>
 8012abe:	4b2f      	ldr	r3, [pc, #188]	; (8012b7c <scalbn+0xe4>)
 8012ac0:	429e      	cmp	r6, r3
 8012ac2:	4604      	mov	r4, r0
 8012ac4:	460d      	mov	r5, r1
 8012ac6:	da12      	bge.n	8012aee <scalbn+0x56>
 8012ac8:	a327      	add	r3, pc, #156	; (adr r3, 8012b68 <scalbn+0xd0>)
 8012aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ace:	f7ed fd9b 	bl	8000608 <__aeabi_dmul>
 8012ad2:	e009      	b.n	8012ae8 <scalbn+0x50>
 8012ad4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012ad8:	428a      	cmp	r2, r1
 8012ada:	d10c      	bne.n	8012af6 <scalbn+0x5e>
 8012adc:	ee10 2a10 	vmov	r2, s0
 8012ae0:	4620      	mov	r0, r4
 8012ae2:	4629      	mov	r1, r5
 8012ae4:	f7ed fbda 	bl	800029c <__adddf3>
 8012ae8:	4604      	mov	r4, r0
 8012aea:	460d      	mov	r5, r1
 8012aec:	e01c      	b.n	8012b28 <scalbn+0x90>
 8012aee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012af2:	460b      	mov	r3, r1
 8012af4:	3a36      	subs	r2, #54	; 0x36
 8012af6:	4432      	add	r2, r6
 8012af8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012afc:	428a      	cmp	r2, r1
 8012afe:	dd0b      	ble.n	8012b18 <scalbn+0x80>
 8012b00:	ec45 4b11 	vmov	d1, r4, r5
 8012b04:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012b70 <scalbn+0xd8>
 8012b08:	f000 f83c 	bl	8012b84 <copysign>
 8012b0c:	a318      	add	r3, pc, #96	; (adr r3, 8012b70 <scalbn+0xd8>)
 8012b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b12:	ec51 0b10 	vmov	r0, r1, d0
 8012b16:	e7da      	b.n	8012ace <scalbn+0x36>
 8012b18:	2a00      	cmp	r2, #0
 8012b1a:	dd08      	ble.n	8012b2e <scalbn+0x96>
 8012b1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b28:	ec45 4b10 	vmov	d0, r4, r5
 8012b2c:	bd70      	pop	{r4, r5, r6, pc}
 8012b2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012b32:	da0d      	bge.n	8012b50 <scalbn+0xb8>
 8012b34:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012b38:	429e      	cmp	r6, r3
 8012b3a:	ec45 4b11 	vmov	d1, r4, r5
 8012b3e:	dce1      	bgt.n	8012b04 <scalbn+0x6c>
 8012b40:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012b68 <scalbn+0xd0>
 8012b44:	f000 f81e 	bl	8012b84 <copysign>
 8012b48:	a307      	add	r3, pc, #28	; (adr r3, 8012b68 <scalbn+0xd0>)
 8012b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b4e:	e7e0      	b.n	8012b12 <scalbn+0x7a>
 8012b50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012b54:	3236      	adds	r2, #54	; 0x36
 8012b56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012b5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b5e:	4620      	mov	r0, r4
 8012b60:	4629      	mov	r1, r5
 8012b62:	2200      	movs	r2, #0
 8012b64:	4b06      	ldr	r3, [pc, #24]	; (8012b80 <scalbn+0xe8>)
 8012b66:	e7b2      	b.n	8012ace <scalbn+0x36>
 8012b68:	c2f8f359 	.word	0xc2f8f359
 8012b6c:	01a56e1f 	.word	0x01a56e1f
 8012b70:	8800759c 	.word	0x8800759c
 8012b74:	7e37e43c 	.word	0x7e37e43c
 8012b78:	43500000 	.word	0x43500000
 8012b7c:	ffff3cb0 	.word	0xffff3cb0
 8012b80:	3c900000 	.word	0x3c900000

08012b84 <copysign>:
 8012b84:	ec51 0b10 	vmov	r0, r1, d0
 8012b88:	ee11 0a90 	vmov	r0, s3
 8012b8c:	ee10 2a10 	vmov	r2, s0
 8012b90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012b94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012b98:	ea41 0300 	orr.w	r3, r1, r0
 8012b9c:	ec43 2b10 	vmov	d0, r2, r3
 8012ba0:	4770      	bx	lr
	...

08012ba4 <_init>:
 8012ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ba6:	bf00      	nop
 8012ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012baa:	bc08      	pop	{r3}
 8012bac:	469e      	mov	lr, r3
 8012bae:	4770      	bx	lr

08012bb0 <_fini>:
 8012bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bb2:	bf00      	nop
 8012bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bb6:	bc08      	pop	{r3}
 8012bb8:	469e      	mov	lr, r3
 8012bba:	4770      	bx	lr
