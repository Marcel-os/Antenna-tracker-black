
Antenna tracker black.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08012860  08012860  00022860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fb0  08012fb0  000303bc  2**0
                  CONTENTS
  4 .ARM          00000008  08012fb0  08012fb0  00022fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fb8  08012fb8  000303bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fb8  08012fb8  00022fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fbc  08012fbc  00022fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003bc  20000000  08012fc0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f7c  200003c0  0801337c  000303c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000133c  0801337c  0003133c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eccc  00000000  00000000  000303ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045be  00000000  00000000  0004f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001660  00000000  00000000  00053678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  00054cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c33d  00000000  00000000  00056110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001653a  00000000  00000000  0007244d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097206  00000000  00000000  00088987  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fb8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007650  00000000  00000000  0011fc08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003c0 	.word	0x200003c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012844 	.word	0x08012844

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003c4 	.word	0x200003c4
 80001dc:	08012844 	.word	0x08012844

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <GPS_CallBack>:
	GPS.rxIndex=0;
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
}
//##################################################################################################################
void	GPS_CallBack(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8000f9c:	f001 fc86 	bl	80028ac <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fa4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000faa:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fae:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000fb2:	d210      	bcs.n	8000fd6 <GPS_CallBack+0x3e>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fb6:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fbe:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fc4:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fc8:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <GPS_CallBack+0x4c>)
 8000fd2:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}	
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4903      	ldr	r1, [pc, #12]	; (8000fe8 <GPS_CallBack+0x50>)
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <GPS_CallBack+0x54>)
 8000fdc:	f005 fd62 	bl	8006aa4 <HAL_UART_Receive_IT>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200003f0 	.word	0x200003f0
 8000fe8:	200005f2 	.word	0x200005f2
 8000fec:	20000954 	.word	0x20000954

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <MX_ADC1_Init+0xb8>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800100a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800100e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001018:	2201      	movs	r2, #1
 800101a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800101e:	2201      	movs	r2, #1
 8001020:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001032:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <MX_ADC1_Init+0xbc>)
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800103e:	2202      	movs	r2, #2
 8001040:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800104c:	2201      	movs	r2, #1
 800104e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001050:	4814      	ldr	r0, [pc, #80]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001052:	f001 fc59 	bl	8002908 <HAL_ADC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800105c:	f000 ff2a 	bl	8001eb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001060:	2304      	movs	r3, #4
 8001062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001068:	2307      	movs	r3, #7
 800106a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_ADC1_Init+0xb4>)
 8001072:	f001 fec9 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800107c:	f000 ff1a 	bl	8001eb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001080:	2305      	movs	r3, #5
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_ADC1_Init+0xb4>)
 800108e:	f001 febb 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001098:	f000 ff0c 	bl	8001eb4 <Error_Handler>
  }

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000640 	.word	0x20000640
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a33      	ldr	r2, [pc, #204]	; (800119c <HAL_ADC_MspInit+0xec>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d15f      	bne.n	8001192 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_ADC_MspInit+0xf0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800110a:	2330      	movs	r3, #48	; 0x30
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4821      	ldr	r0, [pc, #132]	; (80011a4 <HAL_ADC_MspInit+0xf4>)
 800111e:	f002 fdcf 	bl	8003cc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_ADC_MspInit+0xfc>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800113c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800114c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001166:	4810      	ldr	r0, [pc, #64]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001168:	f002 fa1a 	bl	80035a0 <HAL_DMA_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001172:	f000 fe9f 	bl	8001eb4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_ADC_MspInit+0xf8>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2012      	movs	r0, #18
 8001188:	f002 f9d3 	bl	8003532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800118c:	2012      	movs	r0, #18
 800118e:	f002 f9ec 	bl	800356a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40012000 	.word	0x40012000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	20000688 	.word	0x20000688
 80011ac:	40026410 	.word	0x40026410

080011b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_DMA_Init+0x3c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2038      	movs	r0, #56	; 0x38
 80011d8:	f002 f9ab 	bl	8003532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011dc:	2038      	movs	r0, #56	; 0x38
 80011de:	f002 f9c4 	bl	800356a <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <MX_GPIO_Init+0xbc>)
 800127e:	f002 fea1 	bl	8003fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin;
 8001282:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_GPIO_Init+0xbc>)
 800129c:	f002 fd10 	bl	8003cc0 <HAL_GPIO_Init>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400

080012b0 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 GPS_CallBack();
 80012b8:	f7ff fe6e 	bl	8000f98 <GPS_CallBack>
 //HAL_UART_Transmit_IT(&huart1, "RAMKA", sizeof("RAMKA"));
// HAL_UART_Transmit_IT(&huart1, &Received, 1); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
// HAL_UART_Receive_IT(&huart3, &Received, 1); // Ponowne włączenie nasłuchiwania

 //		GPS.GPGGA.LatitudeDecimal, GPS.GPGGA.LongitudeDecimal, GPS.GPGGA.MSL_Altitude
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_write>:

int _write(int file, char *ptr, int len){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
    CDC_Transmit_FS((uint8_t*)ptr, len);
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	68b8      	ldr	r0, [r7, #8]
 80012d4:	f009 fa0e 	bl	800a6f4 <CDC_Transmit_FS>
    return len;
 80012d8:	687b      	ldr	r3, [r7, #4]

}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <parse>:

void parse(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af04      	add	r7, sp, #16
  	char header[1];
  	int32_t PWM1, PWM2, DIR1, DIR2;

  	sscanf(ReceivedData, "%s %d %d %d %d", &header, &PWM1, &PWM2, &DIR1, &DIR2);
 80012ea:	f107 0110 	add.w	r1, r7, #16
 80012ee:	f107 0214 	add.w	r2, r7, #20
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	460b      	mov	r3, r1
 8001304:	494d      	ldr	r1, [pc, #308]	; (800143c <parse+0x158>)
 8001306:	484e      	ldr	r0, [pc, #312]	; (8001440 <parse+0x15c>)
 8001308:	f00a fe06 	bl	800bf18 <siscanf>
  	if( header[0] == 'S' && PWM1 >= 0 && PWM1 < 65535 && PWM2 >= 0 && PWM2 < 65535 && (DIR1 == 1 || DIR1 == 0) && (DIR2 == 1 || DIR2 == 0) )
 800130c:	7d3b      	ldrb	r3, [r7, #20]
 800130e:	2b53      	cmp	r3, #83	; 0x53
 8001310:	f040 808d 	bne.w	800142e <parse+0x14a>
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f2c0 8089 	blt.w	800142e <parse+0x14a>
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001322:	4293      	cmp	r3, r2
 8001324:	f300 8083 	bgt.w	800142e <parse+0x14a>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db7f      	blt.n	800142e <parse+0x14a>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001334:	4293      	cmp	r3, r2
 8001336:	dc7a      	bgt.n	800142e <parse+0x14a>
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d002      	beq.n	8001344 <parse+0x60>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d174      	bne.n	800142e <parse+0x14a>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d002      	beq.n	8001350 <parse+0x6c>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d16e      	bne.n	800142e <parse+0x14a>
  	{
  		send_json(PWM1, PWM2);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f87a 	bl	8001450 <send_json>
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM1 );
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4b39      	ldr	r3, [pc, #228]	; (8001444 <parse+0x160>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	635a      	str	r2, [r3, #52]	; 0x34
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2 );
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <parse+0x160>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	639a      	str	r2, [r3, #56]	; 0x38

  		if(DIR1 == 1){
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d10b      	bne.n	800138a <parse+0xa6>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001378:	4833      	ldr	r0, [pc, #204]	; (8001448 <parse+0x164>)
 800137a:	f002 fe23 	bl	8003fc4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001384:	4830      	ldr	r0, [pc, #192]	; (8001448 <parse+0x164>)
 8001386:	f002 fe1d 	bl	8003fc4 <HAL_GPIO_WritePin>
  		}

  		if(DIR1 == 0){
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10b      	bne.n	80013a8 <parse+0xc4>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001396:	482c      	ldr	r0, [pc, #176]	; (8001448 <parse+0x164>)
 8001398:	f002 fe14 	bl	8003fc4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a2:	4829      	ldr	r0, [pc, #164]	; (8001448 <parse+0x164>)
 80013a4:	f002 fe0e 	bl	8003fc4 <HAL_GPIO_WritePin>
  		}

  		if(DIR2 == 1){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d10b      	bne.n	80013c6 <parse+0xe2>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b4:	4824      	ldr	r0, [pc, #144]	; (8001448 <parse+0x164>)
 80013b6:	f002 fe05 	bl	8003fc4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c0:	4821      	ldr	r0, [pc, #132]	; (8001448 <parse+0x164>)
 80013c2:	f002 fdff 	bl	8003fc4 <HAL_GPIO_WritePin>
  		}

  		if(DIR2 == 0){
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10b      	bne.n	80013e4 <parse+0x100>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d2:	481d      	ldr	r0, [pc, #116]	; (8001448 <parse+0x164>)
 80013d4:	f002 fdf6 	bl	8003fc4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013de:	481a      	ldr	r0, [pc, #104]	; (8001448 <parse+0x164>)
 80013e0:	f002 fdf0 	bl	8003fc4 <HAL_GPIO_WritePin>
  		}

  		if( PWM1 == 0 && PWM2 ==0 ){
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d11a      	bne.n	8001420 <parse+0x13c>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d117      	bne.n	8001420 <parse+0x13c>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <parse+0x164>)
 80013f8:	f002 fde4 	bl	8003fc4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001402:	4811      	ldr	r0, [pc, #68]	; (8001448 <parse+0x164>)
 8001404:	f002 fdde 	bl	8003fc4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140e:	480e      	ldr	r0, [pc, #56]	; (8001448 <parse+0x164>)
 8001410:	f002 fdd8 	bl	8003fc4 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141a:	480b      	ldr	r0, [pc, #44]	; (8001448 <parse+0x164>)
 800141c:	f002 fdd2 	bl	8003fc4 <HAL_GPIO_WritePin>
  		}
  		send_json(PWM1, PWM2);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f812 	bl	8001450 <send_json>
  	{
 800142c:	e002      	b.n	8001434 <parse+0x150>

//	  	sprintf(DataToSend, "%d %d %d %d \r\n", PWM1, PWM2, DIR1, DIR2);
//	  	printf(DataToSend);
  	}else printf("error - zle dane \r\n");
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <parse+0x168>)
 8001430:	f00a fd34 	bl	800be9c <puts>
}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	08012860 	.word	0x08012860
 8001440:	200007c8 	.word	0x200007c8
 8001444:	200008d4 	.word	0x200008d4
 8001448:	40020400 	.word	0x40020400
 800144c:	08012870 	.word	0x08012870

08001450 <send_json>:

void send_json(int32_t Encoder1, int32_t Encoder2){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	printf("{\"enkoder1\":%d,\"enkoder2\":%d}\r\n", Encoder1, Encoder2);
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <send_json+0x1c>)
 8001460:	f00a fca8 	bl	800bdb4 <iprintf>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	08012884 	.word	0x08012884

08001470 <send_json_ada>:

void send_json_ada(double azimuth, double altitude, double distance){
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b08b      	sub	sp, #44	; 0x2c
 8001474:	af04      	add	r7, sp, #16
 8001476:	ed87 0b04 	vstr	d0, [r7, #16]
 800147a:	ed87 1b02 	vstr	d1, [r7, #8]
 800147e:	ed87 2b00 	vstr	d2, [r7]
	printf("{\"azimuth\":%f,\"altitude\":%f,\"distance\":%f}\r\n", azimuth, altitude, distance);
 8001482:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001486:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800148a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800148e:	e9cd 3400 	strd	r3, r4, [sp]
 8001492:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <send_json_ada+0x54>)
 8001498:	f00a fc8c 	bl	800bdb4 <iprintf>
	g_azimuth = azimuth;
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <send_json_ada+0x58>)
 800149e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80014a2:	e9c2 3400 	strd	r3, r4, [r2]
	g_altitude = altitude;
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <send_json_ada+0x5c>)
 80014a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014ac:	e9c2 3400 	strd	r3, r4, [r2]
	g_distance = distance;
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <send_json_ada+0x60>)
 80014b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014b6:	e9c2 3400 	strd	r3, r4, [r2]
}
 80014ba:	bf00      	nop
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	080128a4 	.word	0x080128a4
 80014c8:	20000748 	.word	0x20000748
 80014cc:	200007c0 	.word	0x200007c0
 80014d0:	20000830 	.word	0x20000830

080014d4 <send_json_error>:

void send_json_error( char *error){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	printf("{\"error\":\"%s\"}\r\n", error);
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <send_json_error+0x18>)
 80014e0:	f00a fc68 	bl	800bdb4 <iprintf>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	080128d4 	.word	0x080128d4

080014f0 <send_json_position>:

void send_json_position(position actual, position predicted){
 80014f0:	b084      	sub	sp, #16
 80014f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014f6:	b08d      	sub	sp, #52	; 0x34
 80014f8:	af0a      	add	r7, sp, #40	; 0x28
 80014fa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80014fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printf("{\"PositionActual\":{\"Lat\":%f,\"Lon\":%f,\"Height\":%f},\"PositionPredicted\":{\"Lat\":%f,\"Lon\":%f,\"Height\":%f}}\r\n", actual.Latitude, actual.Longitude, actual.Height, predicted.Latitude, predicted.Longitude, predicted.Height );
 8001502:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001506:	ed87 7b00 	vstr	d7, [r7]
 800150a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800150e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001512:	e9d7 5614 	ldrd	r5, r6, [r7, #80]	; 0x50
 8001516:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800151a:	e9d7 ab18 	ldrd	sl, fp, [r7, #96]	; 0x60
 800151e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001522:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001526:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800152a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800152e:	e9cd 3400 	strd	r3, r4, [sp]
 8001532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <send_json_position+0x5c>)
 8001538:	f00a fc3c 	bl	800bdb4 <iprintf>
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001546:	b004      	add	sp, #16
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	080128e8 	.word	0x080128e8

08001550 <calc_azimuth>:

void calc_azimuth(double Latitude1, double Longitude1, double Height1, double Latitude2, double Longitude2, double Height2, double *azimuth, double *distance, double *altitude){ //Latitude = φ Longitude = λ
 8001550:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001554:	ed2d 8b02 	vpush	{d8}
 8001558:	b09c      	sub	sp, #112	; 0x70
 800155a:	af00      	add	r7, sp, #0
 800155c:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001560:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001564:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8001568:	ed87 3b08 	vstr	d3, [r7, #32]
 800156c:	ed87 4b06 	vstr	d4, [r7, #24]
 8001570:	ed87 5b04 	vstr	d5, [r7, #16]
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]

	Latitude1 *= (M_PI/180);
 800157a:	a3e1      	add	r3, pc, #900	; (adr r3, 8001900 <calc_azimuth+0x3b0>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001584:	f7ff f840 	bl	8000608 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	Longitude1 *= (M_PI/180);
 8001590:	a3db      	add	r3, pc, #876	; (adr r3, 8001900 <calc_azimuth+0x3b0>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800159a:	f7ff f835 	bl	8000608 <__aeabi_dmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	460c      	mov	r4, r1
 80015a2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	Latitude2 *= (M_PI/180);
 80015a6:	a3d6      	add	r3, pc, #856	; (adr r3, 8001900 <calc_azimuth+0x3b0>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015b0:	f7ff f82a 	bl	8000608 <__aeabi_dmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	Longitude2 *= (M_PI/180);
 80015bc:	a3d0      	add	r3, pc, #832	; (adr r3, 8001900 <calc_azimuth+0x3b0>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015c6:	f7ff f81f 	bl	8000608 <__aeabi_dmul>
 80015ca:	4603      	mov	r3, r0
 80015cc:	460c      	mov	r4, r1
 80015ce:	e9c7 3406 	strd	r3, r4, [r7, #24]
	Height1 /= 1000;
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4bc8      	ldr	r3, [pc, #800]	; (80018f8 <calc_azimuth+0x3a8>)
 80015d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015dc:	f7ff f93e 	bl	800085c <__aeabi_ddiv>
 80015e0:	4603      	mov	r3, r0
 80015e2:	460c      	mov	r4, r1
 80015e4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	Height2 /= 1000;
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4bc2      	ldr	r3, [pc, #776]	; (80018f8 <calc_azimuth+0x3a8>)
 80015ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015f2:	f7ff f933 	bl	800085c <__aeabi_ddiv>
 80015f6:	4603      	mov	r3, r0
 80015f8:	460c      	mov	r4, r1
 80015fa:	e9c7 3404 	strd	r3, r4, [r7, #16]

	double delta_Latitude = (Latitude2 - Latitude1);
 80015fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001602:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001606:	f7fe fe47 	bl	8000298 <__aeabi_dsub>
 800160a:	4603      	mov	r3, r0
 800160c:	460c      	mov	r4, r1
 800160e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	double delta_Longitude = (Longitude2 - Longitude1);
 8001612:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001616:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800161a:	f7fe fe3d 	bl	8000298 <__aeabi_dsub>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	double delta_Height = Height2 - Height1;
 8001626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800162a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800162e:	f7fe fe33 	bl	8000298 <__aeabi_dsub>
 8001632:	4603      	mov	r3, r0
 8001634:	460c      	mov	r4, r1
 8001636:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58



	//θ = atan2 [(sin Δλ * cos φ₂), (cos φ�? * sin φ₂ �?� sin φ�? * cos φ₂ *  cos Δλ)]
	*azimuth = atan2( ( sin(delta_Longitude) * cos(Latitude2) ) , ( (cos(Latitude1) * sin(Latitude2)) - (sin(Latitude1) * cos(Latitude2) * cos(delta_Longitude)) ) ) * (180/ M_PI );
 800163a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800163e:	f00e fb93 	bl	800fd68 <sin>
 8001642:	ec55 4b10 	vmov	r4, r5, d0
 8001646:	ed97 0b08 	vldr	d0, [r7, #32]
 800164a:	f00e fb49 	bl	800fce0 <cos>
 800164e:	ec53 2b10 	vmov	r2, r3, d0
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7fe ffd7 	bl	8000608 <__aeabi_dmul>
 800165a:	4603      	mov	r3, r0
 800165c:	460c      	mov	r4, r1
 800165e:	ec44 3b18 	vmov	d8, r3, r4
 8001662:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001666:	f00e fb3b 	bl	800fce0 <cos>
 800166a:	ec55 4b10 	vmov	r4, r5, d0
 800166e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001672:	f00e fb79 	bl	800fd68 <sin>
 8001676:	ec53 2b10 	vmov	r2, r3, d0
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe ffc3 	bl	8000608 <__aeabi_dmul>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	4625      	mov	r5, r4
 8001688:	461c      	mov	r4, r3
 800168a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800168e:	f00e fb6b 	bl	800fd68 <sin>
 8001692:	ec59 8b10 	vmov	r8, r9, d0
 8001696:	ed97 0b08 	vldr	d0, [r7, #32]
 800169a:	f00e fb21 	bl	800fce0 <cos>
 800169e:	ec53 2b10 	vmov	r2, r3, d0
 80016a2:	4640      	mov	r0, r8
 80016a4:	4649      	mov	r1, r9
 80016a6:	f7fe ffaf 	bl	8000608 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4690      	mov	r8, r2
 80016b0:	4699      	mov	r9, r3
 80016b2:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80016b6:	f00e fb13 	bl	800fce0 <cos>
 80016ba:	ec53 2b10 	vmov	r2, r3, d0
 80016be:	4640      	mov	r0, r8
 80016c0:	4649      	mov	r1, r9
 80016c2:	f7fe ffa1 	bl	8000608 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe fde3 	bl	8000298 <__aeabi_dsub>
 80016d2:	4603      	mov	r3, r0
 80016d4:	460c      	mov	r4, r1
 80016d6:	ec44 3b17 	vmov	d7, r3, r4
 80016da:	eeb0 1a47 	vmov.f32	s2, s14
 80016de:	eef0 1a67 	vmov.f32	s3, s15
 80016e2:	eeb0 0a48 	vmov.f32	s0, s16
 80016e6:	eef0 0a68 	vmov.f32	s1, s17
 80016ea:	f00e fbdd 	bl	800fea8 <atan2>
 80016ee:	ec51 0b10 	vmov	r0, r1, d0
 80016f2:	a37b      	add	r3, pc, #492	; (adr r3, 80018e0 <calc_azimuth+0x390>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ff86 	bl	8000608 <__aeabi_dmul>
 80016fc:	4603      	mov	r3, r0
 80016fe:	460c      	mov	r4, r1
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	e9c2 3400 	strd	r3, r4, [r2]
	//Haversine formula:
	//a = sin²(Δφ/2) + cos φ�? * cos φ₂ * sin²(Δλ/2)
	double a = pow( sin(delta_Latitude/2), 2.0 ) + (cos(Latitude1) * cos(Latitude2) * pow(sin(delta_Longitude/2), 2.0));
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001712:	f7ff f8a3 	bl	800085c <__aeabi_ddiv>
 8001716:	4603      	mov	r3, r0
 8001718:	460c      	mov	r4, r1
 800171a:	ec44 3b17 	vmov	d7, r3, r4
 800171e:	eeb0 0a47 	vmov.f32	s0, s14
 8001722:	eef0 0a67 	vmov.f32	s1, s15
 8001726:	f00e fb1f 	bl	800fd68 <sin>
 800172a:	eeb0 7a40 	vmov.f32	s14, s0
 800172e:	eef0 7a60 	vmov.f32	s15, s1
 8001732:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 80018e8 <calc_azimuth+0x398>
 8001736:	eeb0 0a47 	vmov.f32	s0, s14
 800173a:	eef0 0a67 	vmov.f32	s1, s15
 800173e:	f00e fbb5 	bl	800feac <pow>
 8001742:	ec59 8b10 	vmov	r8, r9, d0
 8001746:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800174a:	f00e fac9 	bl	800fce0 <cos>
 800174e:	ec55 4b10 	vmov	r4, r5, d0
 8001752:	ed97 0b08 	vldr	d0, [r7, #32]
 8001756:	f00e fac3 	bl	800fce0 <cos>
 800175a:	ec53 2b10 	vmov	r2, r3, d0
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe ff51 	bl	8000608 <__aeabi_dmul>
 8001766:	4603      	mov	r3, r0
 8001768:	460c      	mov	r4, r1
 800176a:	4625      	mov	r5, r4
 800176c:	461c      	mov	r4, r3
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001776:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800177a:	f7ff f86f 	bl	800085c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	ec43 2b17 	vmov	d7, r2, r3
 8001786:	eeb0 0a47 	vmov.f32	s0, s14
 800178a:	eef0 0a67 	vmov.f32	s1, s15
 800178e:	f00e faeb 	bl	800fd68 <sin>
 8001792:	eeb0 7a40 	vmov.f32	s14, s0
 8001796:	eef0 7a60 	vmov.f32	s15, s1
 800179a:	ed9f 1b53 	vldr	d1, [pc, #332]	; 80018e8 <calc_azimuth+0x398>
 800179e:	eeb0 0a47 	vmov.f32	s0, s14
 80017a2:	eef0 0a67 	vmov.f32	s1, s15
 80017a6:	f00e fb81 	bl	800feac <pow>
 80017aa:	ec53 2b10 	vmov	r2, r3, d0
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	f7fe ff29 	bl	8000608 <__aeabi_dmul>
 80017b6:	4603      	mov	r3, r0
 80017b8:	460c      	mov	r4, r1
 80017ba:	461a      	mov	r2, r3
 80017bc:	4623      	mov	r3, r4
 80017be:	4640      	mov	r0, r8
 80017c0:	4649      	mov	r1, r9
 80017c2:	f7fe fd6b 	bl	800029c <__adddf3>
 80017c6:	4603      	mov	r3, r0
 80017c8:	460c      	mov	r4, r1
 80017ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	//c = 2 * atan2 [�?�a, �?�(1�?�a)]
	double c = 2.0 * atan2( sqrt(a), sqrt(1.0-a));
 80017ce:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80017d2:	f00e fcdb 	bl	801018c <sqrt>
 80017d6:	eeb0 8a40 	vmov.f32	s16, s0
 80017da:	eef0 8a60 	vmov.f32	s17, s1
 80017de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80017e2:	f04f 0000 	mov.w	r0, #0
 80017e6:	4945      	ldr	r1, [pc, #276]	; (80018fc <calc_azimuth+0x3ac>)
 80017e8:	f7fe fd56 	bl	8000298 <__aeabi_dsub>
 80017ec:	4603      	mov	r3, r0
 80017ee:	460c      	mov	r4, r1
 80017f0:	ec44 3b17 	vmov	d7, r3, r4
 80017f4:	eeb0 0a47 	vmov.f32	s0, s14
 80017f8:	eef0 0a67 	vmov.f32	s1, s15
 80017fc:	f00e fcc6 	bl	801018c <sqrt>
 8001800:	eeb0 7a40 	vmov.f32	s14, s0
 8001804:	eef0 7a60 	vmov.f32	s15, s1
 8001808:	eeb0 1a47 	vmov.f32	s2, s14
 800180c:	eef0 1a67 	vmov.f32	s3, s15
 8001810:	eeb0 0a48 	vmov.f32	s0, s16
 8001814:	eef0 0a68 	vmov.f32	s1, s17
 8001818:	f00e fb46 	bl	800fea8 <atan2>
 800181c:	ec51 0b10 	vmov	r0, r1, d0
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	f7fe fd3a 	bl	800029c <__adddf3>
 8001828:	4603      	mov	r3, r0
 800182a:	460c      	mov	r4, r1
 800182c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	//d = R * c, R = 6371 km - radius of the Earth
	double sphere_distance = 6371.0 * c; // in km
 8001830:	a32f      	add	r3, pc, #188	; (adr r3, 80018f0 <calc_azimuth+0x3a0>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800183a:	f7fe fee5 	bl	8000608 <__aeabi_dmul>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	*distance = sqrt( pow(sphere_distance, 2.0) + pow(delta_Height, 2.0));// in km
 8001846:	ed9f 1b28 	vldr	d1, [pc, #160]	; 80018e8 <calc_azimuth+0x398>
 800184a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800184e:	f00e fb2d 	bl	800feac <pow>
 8001852:	ec55 4b10 	vmov	r4, r5, d0
 8001856:	ed9f 1b24 	vldr	d1, [pc, #144]	; 80018e8 <calc_azimuth+0x398>
 800185a:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 800185e:	f00e fb25 	bl	800feac <pow>
 8001862:	ec53 2b10 	vmov	r2, r3, d0
 8001866:	4620      	mov	r0, r4
 8001868:	4629      	mov	r1, r5
 800186a:	f7fe fd17 	bl	800029c <__adddf3>
 800186e:	4603      	mov	r3, r0
 8001870:	460c      	mov	r4, r1
 8001872:	ec44 3b17 	vmov	d7, r3, r4
 8001876:	eeb0 0a47 	vmov.f32	s0, s14
 800187a:	eef0 0a67 	vmov.f32	s1, s15
 800187e:	f00e fc85 	bl	801018c <sqrt>
 8001882:	eeb0 7a40 	vmov.f32	s14, s0
 8001886:	eef0 7a60 	vmov.f32	s15, s1
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	ed83 7b00 	vstr	d7, [r3]
	*altitude = acos(sphere_distance/ *distance)  * (180/M_PI);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001896:	461a      	mov	r2, r3
 8001898:	4623      	mov	r3, r4
 800189a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800189e:	f7fe ffdd 	bl	800085c <__aeabi_ddiv>
 80018a2:	4603      	mov	r3, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	ec44 3b17 	vmov	d7, r3, r4
 80018aa:	eeb0 0a47 	vmov.f32	s0, s14
 80018ae:	eef0 0a67 	vmov.f32	s1, s15
 80018b2:	f00e faa1 	bl	800fdf8 <acos>
 80018b6:	ec51 0b10 	vmov	r0, r1, d0
 80018ba:	a309      	add	r3, pc, #36	; (adr r3, 80018e0 <calc_azimuth+0x390>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe fea2 	bl	8000608 <__aeabi_dmul>
 80018c4:	4603      	mov	r3, r0
 80018c6:	460c      	mov	r4, r1
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	e9c2 3400 	strd	r3, r4, [r2]
}
 80018ce:	bf00      	nop
 80018d0:	3770      	adds	r7, #112	; 0x70
 80018d2:	46bd      	mov	sp, r7
 80018d4:	ecbd 8b02 	vpop	{d8}
 80018d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018dc:	f3af 8000 	nop.w
 80018e0:	1a63c1f8 	.word	0x1a63c1f8
 80018e4:	404ca5dc 	.word	0x404ca5dc
 80018e8:	00000000 	.word	0x00000000
 80018ec:	40000000 	.word	0x40000000
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40b8e300 	.word	0x40b8e300
 80018f8:	408f4000 	.word	0x408f4000
 80018fc:	3ff00000 	.word	0x3ff00000
 8001900:	a2529d39 	.word	0xa2529d39
 8001904:	3f91df46 	.word	0x3f91df46

08001908 <parse_loc>:

	*distance = sqrt( pow(sphere_distance, 2.0) + pow(delta_Height, 2.0));// in km
	*altitude = acos(sphere_distance/ *distance)  * (180/M_PI);
}

void parse_loc(){
 8001908:	b580      	push	{r7, lr}
 800190a:	b09a      	sub	sp, #104	; 0x68
 800190c:	af06      	add	r7, sp, #24
  	char header[1];
  	double Latitude1, Longitude1, Height1, Latitude2, Longitude2, Height2, azimuth, distance, altitude;

  	sscanf(ReceivedData, "%s %lf %lf %lf %lf %lf %lf", &header, &Latitude1, &Longitude1, &Height1, &Latitude2, &Longitude2, &Height2);
 800190e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001912:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001916:	f107 0318 	add.w	r3, r7, #24
 800191a:	9304      	str	r3, [sp, #16]
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	460b      	mov	r3, r1
 8001936:	4920      	ldr	r1, [pc, #128]	; (80019b8 <parse_loc+0xb0>)
 8001938:	4820      	ldr	r0, [pc, #128]	; (80019bc <parse_loc+0xb4>)
 800193a:	f00a faed 	bl	800bf18 <siscanf>
  	if( header[0] == 'G' )
 800193e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001942:	2b47      	cmp	r3, #71	; 0x47
 8001944:	d130      	bne.n	80019a8 <parse_loc+0xa0>
  	{
  		calc_azimuth( Latitude1,  Longitude1,  Height1,  Latitude2,  Longitude2,  Height2,  &azimuth,  &distance,  &altitude);
 8001946:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800194a:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800194e:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 8001952:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8001956:	ed97 4b08 	vldr	d4, [r7, #32]
 800195a:	ed97 5b06 	vldr	d5, [r7, #24]
 800195e:	463a      	mov	r2, r7
 8001960:	f107 0108 	add.w	r1, r7, #8
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4618      	mov	r0, r3
 800196a:	eeb0 1a46 	vmov.f32	s2, s12
 800196e:	eef0 1a66 	vmov.f32	s3, s13
 8001972:	eeb0 0a47 	vmov.f32	s0, s14
 8001976:	eef0 0a67 	vmov.f32	s1, s15
 800197a:	f7ff fde9 	bl	8001550 <calc_azimuth>
  		send_json_ada( azimuth, altitude, distance);
 800197e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001982:	ed97 6b00 	vldr	d6, [r7]
 8001986:	ed97 5b02 	vldr	d5, [r7, #8]
 800198a:	eeb0 2a45 	vmov.f32	s4, s10
 800198e:	eef0 2a65 	vmov.f32	s5, s11
 8001992:	eeb0 1a46 	vmov.f32	s2, s12
 8001996:	eef0 1a66 	vmov.f32	s3, s13
 800199a:	eeb0 0a47 	vmov.f32	s0, s14
 800199e:	eef0 0a67 	vmov.f32	s1, s15
 80019a2:	f7ff fd65 	bl	8001470 <send_json_ada>
  	}else printf("error - zle dane \r\n");
}
 80019a6:	e002      	b.n	80019ae <parse_loc+0xa6>
  	}else printf("error - zle dane \r\n");
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <parse_loc+0xb8>)
 80019aa:	f00a fa77 	bl	800be9c <puts>
}
 80019ae:	bf00      	nop
 80019b0:	3750      	adds	r7, #80	; 0x50
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	08012954 	.word	0x08012954
 80019bc:	200007c8 	.word	0x200007c8
 80019c0:	08012870 	.word	0x08012870

080019c4 <parse_home_pos>:

void parse_home_pos(){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af02      	add	r7, sp, #8
  	char header[1];
  	sscanf(ReceivedData, "%s %lf %lf %lf", &header, &home_position.Latitude, &home_position.Longitude, &home_position.Height);
 80019ca:	1d3a      	adds	r2, r7, #4
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <parse_home_pos+0x24>)
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <parse_home_pos+0x28>)
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <parse_home_pos+0x2c>)
 80019d6:	4907      	ldr	r1, [pc, #28]	; (80019f4 <parse_home_pos+0x30>)
 80019d8:	4807      	ldr	r0, [pc, #28]	; (80019f8 <parse_home_pos+0x34>)
 80019da:	f00a fa9d 	bl	800bf18 <siscanf>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000010 	.word	0x20000010
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000000 	.word	0x20000000
 80019f4:	08012970 	.word	0x08012970
 80019f8:	200007c8 	.word	0x200007c8

080019fc <parse_actual_pos>:

void parse_actual_pos(){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af02      	add	r7, sp, #8
  	char header[1];
  	double lat, lon,height;
  	sscanf(ReceivedData, "%s %lf %lf %lf", &header, &actual_position.Latitude, &actual_position.Longitude, &actual_position.Height);
 8001a02:	1d3a      	adds	r2, r7, #4
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <parse_actual_pos+0x24>)
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <parse_actual_pos+0x28>)
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <parse_actual_pos+0x2c>)
 8001a0e:	4907      	ldr	r1, [pc, #28]	; (8001a2c <parse_actual_pos+0x30>)
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <parse_actual_pos+0x34>)
 8001a12:	f00a fa81 	bl	800bf18 <siscanf>
//  	actual_position.Latitude = lat;
//	actual_position.Longitude = lon;
//	actual_position.Height = height;
//	printf("data: %lf,%lf,%lf", lat, lon, height);
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000030 	.word	0x20000030
 8001a24:	20000028 	.word	0x20000028
 8001a28:	20000020 	.word	0x20000020
 8001a2c:	08012970 	.word	0x08012970
 8001a30:	200007c8 	.word	0x200007c8

08001a34 <simple_predict>:

//very simple prediction by linear approximation
position simple_predict(position actual, position old){
 8001a34:	b082      	sub	sp, #8
 8001a36:	b5b0      	push	{r4, r5, r7, lr}
 8001a38:	b08a      	sub	sp, #40	; 0x28
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001a42:	e881 000c 	stmia.w	r1, {r2, r3}
	position predicted;
	predicted.Latitude = 2.0 * actual.Latitude - old.Latitude;
 8001a46:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	f7fe fc25 	bl	800029c <__adddf3>
 8001a52:	4603      	mov	r3, r0
 8001a54:	460c      	mov	r4, r1
 8001a56:	4618      	mov	r0, r3
 8001a58:	4621      	mov	r1, r4
 8001a5a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4623      	mov	r3, r4
 8001a62:	f7fe fc19 	bl	8000298 <__aeabi_dsub>
 8001a66:	4603      	mov	r3, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	predicted.Longitude = 2.0 * actual.Longitude - old.Longitude;
 8001a6e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	f7fe fc11 	bl	800029c <__adddf3>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	4618      	mov	r0, r3
 8001a80:	4621      	mov	r1, r4
 8001a82:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001a86:	461a      	mov	r2, r3
 8001a88:	4623      	mov	r3, r4
 8001a8a:	f7fe fc05 	bl	8000298 <__aeabi_dsub>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460c      	mov	r4, r1
 8001a92:	e9c7 3404 	strd	r3, r4, [r7, #16]
	predicted.Height = 2.0 * actual.Height - old.Height;
 8001a96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	f7fe fbfd 	bl	800029c <__adddf3>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	f7fe fbf1 	bl	8000298 <__aeabi_dsub>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460c      	mov	r4, r1
 8001aba:	e9c7 3406 	strd	r3, r4, [r7, #24]
	return predicted;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	461d      	mov	r5, r3
 8001ac2:	f107 0408 	add.w	r4, r7, #8
 8001ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ace:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001adc:	b002      	add	sp, #8
 8001ade:	4770      	bx	lr

08001ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	b097      	sub	sp, #92	; 0x5c
 8001ae4:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ae6:	f000 fe7b 	bl	80027e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aea:	f000 f97b 	bl	8001de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aee:	f7ff fb7f 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001af2:	f7ff fb5d 	bl	80011b0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001af6:	f008 fd0f 	bl	800a518 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001afa:	f000 fb99 	bl	8002230 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001afe:	f000 fc4d 	bl	800239c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b02:	f000 fc9f 	bl	8002444 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001b06:	f7ff fa73 	bl	8000ff0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001b0a:	f000 fdc5 	bl	8002698 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001b0e:	2100      	movs	r1, #0
 8001b10:	48a1      	ldr	r0, [pc, #644]	; (8001d98 <main+0x2b8>)
 8001b12:	f004 fe6a 	bl	80067ea <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001b16:	2104      	movs	r1, #4
 8001b18:	489f      	ldr	r0, [pc, #636]	; (8001d98 <main+0x2b8>)
 8001b1a:	f004 fe66 	bl	80067ea <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b1e:	213c      	movs	r1, #60	; 0x3c
 8001b20:	489e      	ldr	r0, [pc, #632]	; (8001d9c <main+0x2bc>)
 8001b22:	f004 f981 	bl	8005e28 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b26:	213c      	movs	r1, #60	; 0x3c
 8001b28:	489d      	ldr	r0, [pc, #628]	; (8001da0 <main+0x2c0>)
 8001b2a:	f004 f97d 	bl	8005e28 <HAL_TIM_Encoder_Start>

  HAL_ADC_Start_DMA(&hadc1, feedback, 2);
 8001b2e:	2202      	movs	r2, #2
 8001b30:	499c      	ldr	r1, [pc, #624]	; (8001da4 <main+0x2c4>)
 8001b32:	489d      	ldr	r0, [pc, #628]	; (8001da8 <main+0x2c8>)
 8001b34:	f001 f86c 	bl	8002c10 <HAL_ADC_Start_DMA>

  pid_init(&pid_azimuth, 150.0f, 50.0f, 0.005f, 10, 1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	210a      	movs	r1, #10
 8001b3c:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8001dac <main+0x2cc>
 8001b40:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8001db0 <main+0x2d0>
 8001b44:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8001db4 <main+0x2d4>
 8001b48:	489b      	ldr	r0, [pc, #620]	; (8001db8 <main+0x2d8>)
 8001b4a:	f000 f9ba 	bl	8001ec2 <pid_init>
  pid_azimuth.p_max = pid_scale(&pid_azimuth, 4095);
 8001b4e:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8001dbc <main+0x2dc>
 8001b52:	4899      	ldr	r0, [pc, #612]	; (8001db8 <main+0x2d8>)
 8001b54:	f000 fa40 	bl	8001fd8 <pid_scale>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b97      	ldr	r3, [pc, #604]	; (8001db8 <main+0x2d8>)
 8001b5c:	619a      	str	r2, [r3, #24]
  pid_azimuth.p_min = pid_scale(&pid_azimuth, -4095);
 8001b5e:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8001dc0 <main+0x2e0>
 8001b62:	4895      	ldr	r0, [pc, #596]	; (8001db8 <main+0x2d8>)
 8001b64:	f000 fa38 	bl	8001fd8 <pid_scale>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b93      	ldr	r3, [pc, #588]	; (8001db8 <main+0x2d8>)
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
  pid_azimuth.i_max = pid_scale(&pid_azimuth, 4095);
 8001b6e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8001dbc <main+0x2dc>
 8001b72:	4891      	ldr	r0, [pc, #580]	; (8001db8 <main+0x2d8>)
 8001b74:	f000 fa30 	bl	8001fd8 <pid_scale>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b8f      	ldr	r3, [pc, #572]	; (8001db8 <main+0x2d8>)
 8001b7c:	61da      	str	r2, [r3, #28]
  pid_azimuth.i_min = pid_scale(&pid_azimuth, -4095);
 8001b7e:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8001dc0 <main+0x2e0>
 8001b82:	488d      	ldr	r0, [pc, #564]	; (8001db8 <main+0x2d8>)
 8001b84:	f000 fa28 	bl	8001fd8 <pid_scale>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <main+0x2d8>)
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
  pid_azimuth.d_max = pid_scale(&pid_azimuth, 4095);
 8001b8e:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8001dbc <main+0x2dc>
 8001b92:	4889      	ldr	r0, [pc, #548]	; (8001db8 <main+0x2d8>)
 8001b94:	f000 fa20 	bl	8001fd8 <pid_scale>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b87      	ldr	r3, [pc, #540]	; (8001db8 <main+0x2d8>)
 8001b9c:	621a      	str	r2, [r3, #32]
  pid_azimuth.d_min = pid_scale(&pid_azimuth, -4095);
 8001b9e:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8001dc0 <main+0x2e0>
 8001ba2:	4885      	ldr	r0, [pc, #532]	; (8001db8 <main+0x2d8>)
 8001ba4:	f000 fa18 	bl	8001fd8 <pid_scale>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b83      	ldr	r3, [pc, #524]	; (8001db8 <main+0x2d8>)
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_azimuth.total_max = pid_scale(&pid_azimuth, 4095);
 8001bae:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8001dbc <main+0x2dc>
 8001bb2:	4881      	ldr	r0, [pc, #516]	; (8001db8 <main+0x2d8>)
 8001bb4:	f000 fa10 	bl	8001fd8 <pid_scale>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b7f      	ldr	r3, [pc, #508]	; (8001db8 <main+0x2d8>)
 8001bbc:	649a      	str	r2, [r3, #72]	; 0x48
  pid_azimuth.total_min = pid_scale(&pid_azimuth, 0);
 8001bbe:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8001dc4 <main+0x2e4>
 8001bc2:	487d      	ldr	r0, [pc, #500]	; (8001db8 <main+0x2d8>)
 8001bc4:	f000 fa08 	bl	8001fd8 <pid_scale>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <main+0x2d8>)
 8001bcc:	64da      	str	r2, [r3, #76]	; 0x4c

  pid_init(&pid_height, 150.0f, 50.0f, 0.005f, 10, 1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	210a      	movs	r1, #10
 8001bd2:	ed9f 1a76 	vldr	s2, [pc, #472]	; 8001dac <main+0x2cc>
 8001bd6:	eddf 0a76 	vldr	s1, [pc, #472]	; 8001db0 <main+0x2d0>
 8001bda:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8001db4 <main+0x2d4>
 8001bde:	487a      	ldr	r0, [pc, #488]	; (8001dc8 <main+0x2e8>)
 8001be0:	f000 f96f 	bl	8001ec2 <pid_init>
  pid_height.p_max = pid_scale(&pid_height, 4095);
 8001be4:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8001dbc <main+0x2dc>
 8001be8:	4877      	ldr	r0, [pc, #476]	; (8001dc8 <main+0x2e8>)
 8001bea:	f000 f9f5 	bl	8001fd8 <pid_scale>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b75      	ldr	r3, [pc, #468]	; (8001dc8 <main+0x2e8>)
 8001bf2:	619a      	str	r2, [r3, #24]
  pid_height.p_min = pid_scale(&pid_height, -4095);
 8001bf4:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8001dc0 <main+0x2e0>
 8001bf8:	4873      	ldr	r0, [pc, #460]	; (8001dc8 <main+0x2e8>)
 8001bfa:	f000 f9ed 	bl	8001fd8 <pid_scale>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b71      	ldr	r3, [pc, #452]	; (8001dc8 <main+0x2e8>)
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
  pid_height.i_max = pid_scale(&pid_height, 4095);
 8001c04:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8001dbc <main+0x2dc>
 8001c08:	486f      	ldr	r0, [pc, #444]	; (8001dc8 <main+0x2e8>)
 8001c0a:	f000 f9e5 	bl	8001fd8 <pid_scale>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <main+0x2e8>)
 8001c12:	61da      	str	r2, [r3, #28]
  pid_height.i_min = pid_scale(&pid_height, -4095);
 8001c14:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8001dc0 <main+0x2e0>
 8001c18:	486b      	ldr	r0, [pc, #428]	; (8001dc8 <main+0x2e8>)
 8001c1a:	f000 f9dd 	bl	8001fd8 <pid_scale>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b69      	ldr	r3, [pc, #420]	; (8001dc8 <main+0x2e8>)
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
  pid_height.d_max = pid_scale(&pid_height, 4095);
 8001c24:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8001dbc <main+0x2dc>
 8001c28:	4867      	ldr	r0, [pc, #412]	; (8001dc8 <main+0x2e8>)
 8001c2a:	f000 f9d5 	bl	8001fd8 <pid_scale>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <main+0x2e8>)
 8001c32:	621a      	str	r2, [r3, #32]
  pid_height.d_min = pid_scale(&pid_height, -4095);
 8001c34:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8001dc0 <main+0x2e0>
 8001c38:	4863      	ldr	r0, [pc, #396]	; (8001dc8 <main+0x2e8>)
 8001c3a:	f000 f9cd 	bl	8001fd8 <pid_scale>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <main+0x2e8>)
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_height.total_max = pid_scale(&pid_height, 4095);
 8001c44:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8001dbc <main+0x2dc>
 8001c48:	485f      	ldr	r0, [pc, #380]	; (8001dc8 <main+0x2e8>)
 8001c4a:	f000 f9c5 	bl	8001fd8 <pid_scale>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <main+0x2e8>)
 8001c52:	649a      	str	r2, [r3, #72]	; 0x48
  pid_height.total_min = pid_scale(&pid_height, 0);
 8001c54:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001dc4 <main+0x2e4>
 8001c58:	485b      	ldr	r0, [pc, #364]	; (8001dc8 <main+0x2e8>)
 8001c5a:	f000 f9bd 	bl	8001fd8 <pid_scale>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <main+0x2e8>)
 8001c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001c64:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <main+0x2b8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	484a      	ldr	r0, [pc, #296]	; (8001d98 <main+0x2b8>)
 8001c70:	f004 f816 	bl	8005ca0 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001c74:	4b48      	ldr	r3, [pc, #288]	; (8001d98 <main+0x2b8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	4846      	ldr	r0, [pc, #280]	; (8001d98 <main+0x2b8>)
 8001c80:	f004 f80e 	bl	8005ca0 <HAL_TIM_PWM_Start>

		HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c8a:	4850      	ldr	r0, [pc, #320]	; (8001dcc <main+0x2ec>)
 8001c8c:	f002 f99a 	bl	8003fc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c96:	484d      	ldr	r0, [pc, #308]	; (8001dcc <main+0x2ec>)
 8001c98:	f002 f994 	bl	8003fc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca2:	484a      	ldr	r0, [pc, #296]	; (8001dcc <main+0x2ec>)
 8001ca4:	f002 f98e 	bl	8003fc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cae:	4847      	ldr	r0, [pc, #284]	; (8001dcc <main+0x2ec>)
 8001cb0:	f002 f988 	bl	8003fc4 <HAL_GPIO_WritePin>
  while (1)
  {

	  send_json((int)feedback[0], (int)feedback[1] );
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <main+0x2c4>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <main+0x2c4>)
 8001cbc:	885b      	ldrh	r3, [r3, #2]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f7ff fbc5 	bl	8001450 <send_json>

	  if(ReceivedDataFlag == 1){
 8001cc6:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <main+0x2f0>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d15f      	bne.n	8001d8e <main+0x2ae>
	  	ReceivedDataFlag = 0;
 8001cce:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <main+0x2f0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
	  	//parse();
	  	if(ReceivedData[0] == 'S') parse();
 8001cd4:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <main+0x2f4>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b53      	cmp	r3, #83	; 0x53
 8001cda:	d102      	bne.n	8001ce2 <main+0x202>
 8001cdc:	f7ff fb02 	bl	80012e4 <parse>
 8001ce0:	e055      	b.n	8001d8e <main+0x2ae>
	  	else if (ReceivedData[0] == 'G') parse_loc();
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <main+0x2f4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b47      	cmp	r3, #71	; 0x47
 8001ce8:	d102      	bne.n	8001cf0 <main+0x210>
 8001cea:	f7ff fe0d 	bl	8001908 <parse_loc>
 8001cee:	e04e      	b.n	8001d8e <main+0x2ae>
	  	else if (ReceivedData[0] == 'H') parse_home_pos();
 8001cf0:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <main+0x2f4>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b48      	cmp	r3, #72	; 0x48
 8001cf6:	d102      	bne.n	8001cfe <main+0x21e>
 8001cf8:	f7ff fe64 	bl	80019c4 <parse_home_pos>
 8001cfc:	e047      	b.n	8001d8e <main+0x2ae>
	  	else if (ReceivedData[0] == 'A'){
 8001cfe:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <main+0x2f4>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b41      	cmp	r3, #65	; 0x41
 8001d04:	d140      	bne.n	8001d88 <main+0x2a8>
	  		parse_actual_pos();
 8001d06:	f7ff fe79 	bl	80019fc <parse_actual_pos>
		  	send_json_position( actual_position , simple_predict( actual_position, old_position ) );
 8001d0a:	46bc      	mov	ip, r7
 8001d0c:	4e32      	ldr	r6, [pc, #200]	; (8001dd8 <main+0x2f8>)
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <main+0x2fc>)
 8001d10:	ac06      	add	r4, sp, #24
 8001d12:	461d      	mov	r5, r3
 8001d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d20:	466d      	mov	r5, sp
 8001d22:	f106 0408 	add.w	r4, r6, #8
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d32:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001d36:	4660      	mov	r0, ip
 8001d38:	f7ff fe7c 	bl	8001a34 <simple_predict>
 8001d3c:	4e26      	ldr	r6, [pc, #152]	; (8001dd8 <main+0x2f8>)
 8001d3e:	ad04      	add	r5, sp, #16
 8001d40:	463c      	mov	r4, r7
 8001d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d4e:	466c      	mov	r4, sp
 8001d50:	f106 0310 	add.w	r3, r6, #16
 8001d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d5a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d5e:	f7ff fbc7 	bl	80014f0 <send_json_position>
		  	//HAL_Delay(5000);
		  	old_position.Latitude = actual_position.Latitude;
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <main+0x2f8>)
 8001d64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d68:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <main+0x2fc>)
 8001d6a:	e9c2 3400 	strd	r3, r4, [r2]
		  	old_position.Longitude = actual_position.Longitude;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <main+0x2f8>)
 8001d70:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <main+0x2fc>)
 8001d76:	e9c2 3402 	strd	r3, r4, [r2, #8]
		  	old_position.Height = actual_position.Height;
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <main+0x2f8>)
 8001d7c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001d80:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <main+0x2fc>)
 8001d82:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001d86:	e002      	b.n	8001d8e <main+0x2ae>
	  	}
	  	else send_json_error( "Bad data frame construction!");
 8001d88:	4815      	ldr	r0, [pc, #84]	; (8001de0 <main+0x300>)
 8001d8a:	f7ff fba3 	bl	80014d4 <send_json_error>
	  }
	  HAL_Delay(100);
 8001d8e:	2064      	movs	r0, #100	; 0x64
 8001d90:	f000 fd98 	bl	80028c4 <HAL_Delay>
	  send_json((int)feedback[0], (int)feedback[1] );
 8001d94:	e78e      	b.n	8001cb4 <main+0x1d4>
 8001d96:	bf00      	nop
 8001d98:	200008d4 	.word	0x200008d4
 8001d9c:	20000914 	.word	0x20000914
 8001da0:	20000894 	.word	0x20000894
 8001da4:	200007b8 	.word	0x200007b8
 8001da8:	20000640 	.word	0x20000640
 8001dac:	3ba3d70a 	.word	0x3ba3d70a
 8001db0:	42480000 	.word	0x42480000
 8001db4:	43160000 	.word	0x43160000
 8001db8:	200006e8 	.word	0x200006e8
 8001dbc:	457ff000 	.word	0x457ff000
 8001dc0:	c57ff000 	.word	0xc57ff000
 8001dc4:	00000000 	.word	0x00000000
 8001dc8:	20000838 	.word	0x20000838
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	200003dc 	.word	0x200003dc
 8001dd4:	200007c8 	.word	0x200007c8
 8001dd8:	20000020 	.word	0x20000020
 8001ddc:	20000040 	.word	0x20000040
 8001de0:	08012980 	.word	0x08012980

08001de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b094      	sub	sp, #80	; 0x50
 8001de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dea:	f107 0320 	add.w	r3, r7, #32
 8001dee:	2230      	movs	r2, #48	; 0x30
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f009 f8f0 	bl	800afd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <SystemClock_Config+0xc8>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <SystemClock_Config+0xc8>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <SystemClock_Config+0xc8>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <SystemClock_Config+0xcc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a20      	ldr	r2, [pc, #128]	; (8001eb0 <SystemClock_Config+0xcc>)
 8001e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <SystemClock_Config+0xcc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e40:	2301      	movs	r3, #1
 8001e42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e54:	2319      	movs	r3, #25
 8001e56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001e58:	23c0      	movs	r3, #192	; 0xc0
 8001e5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e60:	2304      	movs	r3, #4
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 fa47 	bl	80052fc <HAL_RCC_OscConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e74:	f000 f81e 	bl	8001eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e78:	230f      	movs	r3, #15
 8001e7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	2103      	movs	r1, #3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 fca1 	bl	80057dc <HAL_RCC_ClockConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ea0:	f000 f808 	bl	8001eb4 <Error_Handler>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3750      	adds	r7, #80	; 0x50
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <pid_init>:
 *
 * Created on: 09.03.2018
 * Author: Wojciech Domski
 */
#include "pid.h"
void pid_init(cpid_t *pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 8001ec2:	b480      	push	{r7}
 8001ec4:	b089      	sub	sp, #36	; 0x24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6178      	str	r0, [r7, #20]
 8001eca:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ece:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ed2:	ed87 1a02 	vstr	s2, [r7, #8]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	603a      	str	r2, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
	uint32_t k;
	pid->power = 1;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e007      	b.n	8001ef8 <pid_init+0x36>
		pid->power = pid->power * 2;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eec:	005a      	lsls	r2, r3, #1
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d3f3      	bcc.n	8001ee8 <pid_init+0x26>
	}
	pid->f = f;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	79fa      	ldrb	r2, [r7, #7]
 8001f04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pid->p = (int32_t) (p * pid->power);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f14:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f20:	ee17 2a90 	vmov	r2, s15
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]
	pid->i = (int32_t) (i * pid->power);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f40:	ee17 2a90 	vmov	r2, s15
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	605a      	str	r2, [r3, #4]
	pid->d = (int32_t) (d * pid->power);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f60:	ee17 2a90 	vmov	r2, s15
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	609a      	str	r2, [r3, #8]
	pid->p_val = 0;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
	pid->i_val = 0;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
	pid->d_val = 0;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
	pid->p_max = INT32_MAX;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001f80:	619a      	str	r2, [r3, #24]
	pid->p_min = INT32_MIN;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
	pid->i_max = INT32_MAX;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001f90:	61da      	str	r2, [r3, #28]
	pid->i_min = INT32_MIN;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
	pid->d_max = INT32_MAX;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001fa0:	621a      	str	r2, [r3, #32]
	pid->d_min = INT32_MIN;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_last = 0;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2200      	movs	r2, #0
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
	pid->sum = 0;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
	pid->total_max = INT32_MAX;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001fbc:	649a      	str	r2, [r3, #72]	; 0x48
	pid->total_min = INT32_MIN;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001fc4:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->dt_ms = dt_ms;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001fcc:	bf00      	nop
 8001fce:	3724      	adds	r7, #36	; 0x24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <pid_scale>:
		total = pid->total_min;
	pid->control = total >> pid->f;
	pid->e_last = e;
	return pid->control;
}
int32_t pid_scale(cpid_t *pid, float v) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	ed87 0a00 	vstr	s0, [r7]
	return v * pid->power;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ff0:	edd7 7a00 	vldr	s15, [r7]
 8001ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ffc:	ee17 3a90 	vmov	r3, s15
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_MspInit+0x4c>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_MspInit+0x4c>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <MemManage_Handler+0x4>

08002076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <UsageFault_Handler+0x4>

08002082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b0:	f000 fbe8 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <ADC_IRQHandler+0x10>)
 80020be:	f000 fc66 	bl	800298e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000640 	.word	0x20000640

080020cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <USART1_IRQHandler+0x10>)
 80020d2:	f004 fd3d 	bl	8006b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000954 	.word	0x20000954

080020e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <DMA2_Stream0_IRQHandler+0x10>)
 80020e6:	f001 fb83 	bl	80037f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000688 	.word	0x20000688

080020f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <OTG_FS_IRQHandler+0x10>)
 80020fa:	f002 f8cc 	bl	8004296 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000f30 	.word	0x20000f30

08002108 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	e00a      	b.n	8002130 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800211a:	f3af 8000 	nop.w
 800211e:	4601      	mov	r1, r0
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	b2ca      	uxtb	r2, r1
 8002128:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf0      	blt.n	800211a <_read+0x12>
	}

return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
	return -1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216a:	605a      	str	r2, [r3, #4]
	return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_isatty>:

int _isatty(int file)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
	return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
	return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <_sbrk+0x50>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <_sbrk+0x16>
		heap_end = &end;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <_sbrk+0x50>)
 80021be:	4a10      	ldr	r2, [pc, #64]	; (8002200 <_sbrk+0x54>)
 80021c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <_sbrk+0x50>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <_sbrk+0x50>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	466a      	mov	r2, sp
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d907      	bls.n	80021e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80021d6:	f008 fec5 	bl	800af64 <__errno>
 80021da:	4602      	mov	r2, r0
 80021dc:	230c      	movs	r3, #12
 80021de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	e006      	b.n	80021f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <_sbrk+0x50>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a03      	ldr	r2, [pc, #12]	; (80021fc <_sbrk+0x50>)
 80021f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200003e0 	.word	0x200003e0
 8002200:	20001340 	.word	0x20001340

08002204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <SystemInit+0x28>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <SystemInit+0x28>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <SystemInit+0x28>)
 800221a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800221e:	609a      	str	r2, [r3, #8]
#endif
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b096      	sub	sp, #88	; 0x58
 8002234:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002236:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002244:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800224e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	611a      	str	r2, [r3, #16]
 800225e:	615a      	str	r2, [r3, #20]
 8002260:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2220      	movs	r2, #32
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f008 feb5 	bl	800afd8 <memset>

  htim1.Instance = TIM1;
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <MX_TIM1_Init+0x164>)
 8002270:	4a49      	ldr	r2, [pc, #292]	; (8002398 <MX_TIM1_Init+0x168>)
 8002272:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96;
 8002274:	4b47      	ldr	r3, [pc, #284]	; (8002394 <MX_TIM1_Init+0x164>)
 8002276:	2260      	movs	r2, #96	; 0x60
 8002278:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <MX_TIM1_Init+0x164>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002280:	4b44      	ldr	r3, [pc, #272]	; (8002394 <MX_TIM1_Init+0x164>)
 8002282:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002286:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002288:	4b42      	ldr	r3, [pc, #264]	; (8002394 <MX_TIM1_Init+0x164>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <MX_TIM1_Init+0x164>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002294:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <MX_TIM1_Init+0x164>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800229a:	483e      	ldr	r0, [pc, #248]	; (8002394 <MX_TIM1_Init+0x164>)
 800229c:	f003 fc6a 	bl	8005b74 <HAL_TIM_Base_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022a6:	f7ff fe05 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022b4:	4619      	mov	r1, r3
 80022b6:	4837      	ldr	r0, [pc, #220]	; (8002394 <MX_TIM1_Init+0x164>)
 80022b8:	f003 ff14 	bl	80060e4 <HAL_TIM_ConfigClockSource>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022c2:	f7ff fdf7 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022c6:	4833      	ldr	r0, [pc, #204]	; (8002394 <MX_TIM1_Init+0x164>)
 80022c8:	f003 fcb4 	bl	8005c34 <HAL_TIM_PWM_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80022d2:	f7ff fdef 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80022d6:	482f      	ldr	r0, [pc, #188]	; (8002394 <MX_TIM1_Init+0x164>)
 80022d8:	f003 fc77 	bl	8005bca <HAL_TIM_OC_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80022e2:	f7ff fde7 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022f2:	4619      	mov	r1, r3
 80022f4:	4827      	ldr	r0, [pc, #156]	; (8002394 <MX_TIM1_Init+0x164>)
 80022f6:	f004 faa3 	bl	8006840 <HAL_TIMEx_MasterConfigSynchronization>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8002300:	f7ff fdd8 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002304:	2360      	movs	r3, #96	; 0x60
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002318:	2300      	movs	r3, #0
 800231a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002324:	2200      	movs	r2, #0
 8002326:	4619      	mov	r1, r3
 8002328:	481a      	ldr	r0, [pc, #104]	; (8002394 <MX_TIM1_Init+0x164>)
 800232a:	f003 fe15 	bl	8005f58 <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002334:	f7ff fdbe 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800233c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002340:	2204      	movs	r2, #4
 8002342:	4619      	mov	r1, r3
 8002344:	4813      	ldr	r0, [pc, #76]	; (8002394 <MX_TIM1_Init+0x164>)
 8002346:	f003 fda7 	bl	8005e98 <HAL_TIM_OC_ConfigChannel>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002350:	f7ff fdb0 	bl	8001eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800236c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4807      	ldr	r0, [pc, #28]	; (8002394 <MX_TIM1_Init+0x164>)
 8002378:	f004 fad0 	bl	800691c <HAL_TIMEx_ConfigBreakDeadTime>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8002382:	f7ff fd97 	bl	8001eb4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002386:	4803      	ldr	r0, [pc, #12]	; (8002394 <MX_TIM1_Init+0x164>)
 8002388:	f000 f94c 	bl	8002624 <HAL_TIM_MspPostInit>

}
 800238c:	bf00      	nop
 800238e:	3758      	adds	r7, #88	; 0x58
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200008d4 	.word	0x200008d4
 8002398:	40010000 	.word	0x40010000

0800239c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2224      	movs	r2, #36	; 0x24
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f008 fe14 	bl	800afd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80023b8:	4b21      	ldr	r3, [pc, #132]	; (8002440 <MX_TIM2_Init+0xa4>)
 80023ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <MX_TIM2_Init+0xa4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <MX_TIM2_Init+0xa4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <MX_TIM2_Init+0xa4>)
 80023ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <MX_TIM2_Init+0xa4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <MX_TIM2_Init+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023e8:	2301      	movs	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4619      	mov	r1, r3
 800240a:	480d      	ldr	r0, [pc, #52]	; (8002440 <MX_TIM2_Init+0xa4>)
 800240c:	f003 fc7a 	bl	8005d04 <HAL_TIM_Encoder_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002416:	f7ff fd4d 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	4619      	mov	r1, r3
 8002426:	4806      	ldr	r0, [pc, #24]	; (8002440 <MX_TIM2_Init+0xa4>)
 8002428:	f004 fa0a 	bl	8006840 <HAL_TIMEx_MasterConfigSynchronization>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002432:	f7ff fd3f 	bl	8001eb4 <Error_Handler>
  }

}
 8002436:	bf00      	nop
 8002438:	3730      	adds	r7, #48	; 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000914 	.word	0x20000914

08002444 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	2224      	movs	r2, #36	; 0x24
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f008 fdc0 	bl	800afd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <MX_TIM3_Init+0xa0>)
 8002462:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <MX_TIM3_Init+0xa4>)
 8002464:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <MX_TIM3_Init+0xa0>)
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <MX_TIM3_Init+0xa0>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <MX_TIM3_Init+0xa0>)
 8002474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002478:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <MX_TIM3_Init+0xa0>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002480:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <MX_TIM3_Init+0xa0>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002486:	2301      	movs	r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800248e:	2301      	movs	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800249e:	2301      	movs	r3, #1
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	4619      	mov	r1, r3
 80024b0:	480c      	ldr	r0, [pc, #48]	; (80024e4 <MX_TIM3_Init+0xa0>)
 80024b2:	f003 fc27 	bl	8005d04 <HAL_TIM_Encoder_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80024bc:	f7ff fcfa 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_TIM3_Init+0xa0>)
 80024ce:	f004 f9b7 	bl	8006840 <HAL_TIMEx_MasterConfigSynchronization>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80024d8:	f7ff fcec 	bl	8001eb4 <Error_Handler>
  }

}
 80024dc:	bf00      	nop
 80024de:	3730      	adds	r7, #48	; 0x30
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000894 	.word	0x20000894
 80024e8:	40000400 	.word	0x40000400

080024ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <HAL_TIM_Base_MspInit+0x3c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d10d      	bne.n	800251a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_TIM_Base_MspInit+0x40>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_TIM_Base_MspInit+0x40>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6453      	str	r3, [r2, #68]	; 0x44
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <HAL_TIM_Base_MspInit+0x40>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40010000 	.word	0x40010000
 800252c:	40023800 	.word	0x40023800

08002530 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002550:	d12c      	bne.n	80025ac <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a2f      	ldr	r2, [pc, #188]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a28      	ldr	r2, [pc, #160]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800258a:	2303      	movs	r3, #3
 800258c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800259a:	2301      	movs	r3, #1
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	481d      	ldr	r0, [pc, #116]	; (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 80025a6:	f001 fb8b 	bl	8003cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025aa:	e030      	b.n	800260e <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <HAL_TIM_Encoder_MspInit+0xf0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d12b      	bne.n	800260e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <HAL_TIM_Encoder_MspInit+0xe8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025ee:	23c0      	movs	r3, #192	; 0xc0
 80025f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025fe:	2302      	movs	r3, #2
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 031c 	add.w	r3, r7, #28
 8002606:	4619      	mov	r1, r3
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <HAL_TIM_Encoder_MspInit+0xec>)
 800260a:	f001 fb59 	bl	8003cc0 <HAL_GPIO_Init>
}
 800260e:	bf00      	nop
 8002610:	3730      	adds	r7, #48	; 0x30
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	40020000 	.word	0x40020000
 8002620:	40000400 	.word	0x40000400

08002624 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_TIM_MspPostInit+0x68>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d11e      	bne.n	8002684 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_TIM_MspPostInit+0x6c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a10      	ldr	r2, [pc, #64]	; (8002690 <HAL_TIM_MspPostInit+0x6c>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_TIM_MspPostInit+0x6c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8002662:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002674:	2301      	movs	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	4619      	mov	r1, r3
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <HAL_TIM_MspPostInit+0x70>)
 8002680:	f001 fb1e 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002684:	bf00      	nop
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40010000 	.word	0x40010000
 8002690:	40023800 	.word	0x40023800
 8002694:	40020000 	.word	0x40020000

08002698 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <MX_USART1_UART_Init+0x50>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_USART1_UART_Init+0x4c>)
 80026d0:	f004 f99b 	bl	8006a0a <HAL_UART_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026da:	f7ff fbeb 	bl	8001eb4 <Error_Handler>
  }

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000954 	.word	0x20000954
 80026e8:	40011000 	.word	0x40011000

080026ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_UART_MspInit+0x94>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d134      	bne.n	8002778 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_UART_MspInit+0x98>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <HAL_UART_MspInit+0x98>)
 8002718:	f043 0310 	orr.w	r3, r3, #16
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_UART_MspInit+0x98>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_UART_MspInit+0x98>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a14      	ldr	r2, [pc, #80]	; (8002784 <HAL_UART_MspInit+0x98>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_UART_MspInit+0x98>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002746:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800274a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002754:	2303      	movs	r3, #3
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002758:	2307      	movs	r3, #7
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	4809      	ldr	r0, [pc, #36]	; (8002788 <HAL_UART_MspInit+0x9c>)
 8002764:	f001 faac 	bl	8003cc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002768:	2200      	movs	r2, #0
 800276a:	2100      	movs	r1, #0
 800276c:	2025      	movs	r0, #37	; 0x25
 800276e:	f000 fee0 	bl	8003532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002772:	2025      	movs	r0, #37	; 0x25
 8002774:	f000 fef9 	bl	800356a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002778:	bf00      	nop
 800277a:	3728      	adds	r7, #40	; 0x28
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40011000 	.word	0x40011000
 8002784:	40023800 	.word	0x40023800
 8002788:	40020000 	.word	0x40020000

0800278c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002790:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002792:	e003      	b.n	800279c <LoopCopyDataInit>

08002794 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002796:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002798:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800279a:	3104      	adds	r1, #4

0800279c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800279c:	480b      	ldr	r0, [pc, #44]	; (80027cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027a4:	d3f6      	bcc.n	8002794 <CopyDataInit>
  ldr  r2, =_sbss
 80027a6:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027a8:	e002      	b.n	80027b0 <LoopFillZerobss>

080027aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027ac:	f842 3b04 	str.w	r3, [r2], #4

080027b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027b4:	d3f9      	bcc.n	80027aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027b6:	f7ff fd25 	bl	8002204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ba:	f008 fbd9 	bl	800af70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027be:	f7ff f98f 	bl	8001ae0 <main>
  bx  lr    
 80027c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027c8:	08012fc0 	.word	0x08012fc0
  ldr  r0, =_sdata
 80027cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027d0:	200003bc 	.word	0x200003bc
  ldr  r2, =_sbss
 80027d4:	200003c0 	.word	0x200003c0
  ldr  r3, = _ebss
 80027d8:	2000133c 	.word	0x2000133c

080027dc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <DMA1_Stream0_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <HAL_Init+0x40>)
 80027ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <HAL_Init+0x40>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_Init+0x40>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 fe87 	bl	800351c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	2000      	movs	r0, #0
 8002810:	f000 f808 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fbfa 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_InitTick+0x54>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_InitTick+0x58>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800283a:	fbb3 f3f1 	udiv	r3, r3, r1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fe9f 	bl	8003586 <HAL_SYSTICK_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00e      	b.n	8002870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d80a      	bhi.n	800286e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f000 fe67 	bl	8003532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002864:	4a06      	ldr	r2, [pc, #24]	; (8002880 <HAL_InitTick+0x5c>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000060 	.word	0x20000060
 800287c:	20000068 	.word	0x20000068
 8002880:	20000064 	.word	0x20000064

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000068 	.word	0x20000068
 80028a8:	20000994 	.word	0x20000994

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000994 	.word	0x20000994

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff ffee 	bl	80028ac <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_Delay+0x40>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ea:	bf00      	nop
 80028ec:	f7ff ffde 	bl	80028ac <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000068 	.word	0x20000068

08002908 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e033      	b.n	8002986 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fbc2 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800294e:	f023 0302 	bic.w	r3, r3, #2
 8002952:	f043 0202 	orr.w	r2, r3, #2
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fb86 	bl	800306c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
 8002976:	e001      	b.n	800297c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b20      	cmp	r3, #32
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d049      	beq.n	8002a64 <HAL_ADC_IRQHandler+0xd6>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d046      	beq.n	8002a64 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d105      	bne.n	80029ee <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d12b      	bne.n	8002a54 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d127      	bne.n	8002a54 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d006      	beq.n	8002a20 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d119      	bne.n	8002a54 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0220 	bic.w	r2, r2, #32
 8002a2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f043 0201 	orr.w	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f9af 	bl	8002db8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f06f 0212 	mvn.w	r2, #18
 8002a62:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a84:	2b80      	cmp	r3, #128	; 0x80
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d057      	beq.n	8002b46 <HAL_ADC_IRQHandler+0x1b8>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d054      	beq.n	8002b46 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d139      	bne.n	8002b36 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d12b      	bne.n	8002b36 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d124      	bne.n	8002b36 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11d      	bne.n	8002b36 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d119      	bne.n	8002b36 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b10:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d105      	bne.n	8002b36 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fc16 	bl	8003368 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 020c 	mvn.w	r2, #12
 8002b44:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d017      	beq.n	8002ba8 <HAL_ADC_IRQHandler+0x21a>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d014      	beq.n	8002ba8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10d      	bne.n	8002ba8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f921 	bl	8002de0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f06f 0201 	mvn.w	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d015      	beq.n	8002c08 <HAL_ADC_IRQHandler+0x27a>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d012      	beq.n	8002c08 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f043 0202 	orr.w	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0220 	mvn.w	r2, #32
 8002bf6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8fb 	bl	8002df4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f06f 0220 	mvn.w	r2, #32
 8002c06:	601a      	str	r2, [r3, #0]
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_Start_DMA+0x1e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0b1      	b.n	8002d92 <HAL_ADC_Start_DMA+0x182>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d018      	beq.n	8002c76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c54:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <HAL_ADC_Start_DMA+0x18c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a51      	ldr	r2, [pc, #324]	; (8002da0 <HAL_ADC_Start_DMA+0x190>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0c9a      	lsrs	r2, r3, #18
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c68:	e002      	b.n	8002c70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f9      	bne.n	8002c6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	f040 8085 	bne.w	8002d90 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f023 0206 	bic.w	r2, r3, #6
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
 8002cd2:	e002      	b.n	8002cda <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce2:	4b30      	ldr	r3, [pc, #192]	; (8002da4 <HAL_ADC_Start_DMA+0x194>)
 8002ce4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <HAL_ADC_Start_DMA+0x198>)
 8002cec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <HAL_ADC_Start_DMA+0x19c>)
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	4a2d      	ldr	r2, [pc, #180]	; (8002db0 <HAL_ADC_Start_DMA+0x1a0>)
 8002cfc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d06:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d16:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d26:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	334c      	adds	r3, #76	; 0x4c
 8002d32:	4619      	mov	r1, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f000 fce0 	bl	80036fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10f      	bne.n	8002d68 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11c      	bne.n	8002d90 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	e013      	b.n	8002d90 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <HAL_ADC_Start_DMA+0x1a4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d10e      	bne.n	8002d90 <HAL_ADC_Start_DMA+0x180>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d8e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000060 	.word	0x20000060
 8002da0:	431bde83 	.word	0x431bde83
 8002da4:	40012300 	.word	0x40012300
 8002da8:	08003265 	.word	0x08003265
 8002dac:	0800331f 	.word	0x0800331f
 8002db0:	0800333b 	.word	0x0800333b
 8002db4:	40012000 	.word	0x40012000

08002db8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x1c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e113      	b.n	800304c <HAL_ADC_ConfigChannel+0x244>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	d925      	bls.n	8002e80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68d9      	ldr	r1, [r3, #12]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	3b1e      	subs	r3, #30
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43da      	mvns	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	400a      	ands	r2, r1
 8002e58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68d9      	ldr	r1, [r3, #12]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4403      	add	r3, r0
 8002e72:	3b1e      	subs	r3, #30
 8002e74:	409a      	lsls	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	e022      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6919      	ldr	r1, [r3, #16]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	2207      	movs	r2, #7
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6919      	ldr	r1, [r3, #16]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4403      	add	r3, r0
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d824      	bhi.n	8002f18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	3b05      	subs	r3, #5
 8002ee0:	221f      	movs	r2, #31
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	400a      	ands	r2, r1
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	4618      	mov	r0, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	3b05      	subs	r3, #5
 8002f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
 8002f16:	e04c      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d824      	bhi.n	8002f6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	3b23      	subs	r3, #35	; 0x23
 8002f32:	221f      	movs	r2, #31
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	400a      	ands	r2, r1
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b23      	subs	r3, #35	; 0x23
 8002f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
 8002f68:	e023      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b41      	subs	r3, #65	; 0x41
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	400a      	ands	r2, r1
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b41      	subs	r3, #65	; 0x41
 8002fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_ADC_ConfigChannel+0x250>)
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a28      	ldr	r2, [pc, #160]	; (800305c <HAL_ADC_ConfigChannel+0x254>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d8>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b12      	cmp	r3, #18
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_ADC_ConfigChannel+0x254>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d12b      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x23a>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_ADC_ConfigChannel+0x258>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <HAL_ADC_ConfigChannel+0x1f4>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b11      	cmp	r3, #17
 8002ffa:	d122      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a11      	ldr	r2, [pc, #68]	; (8003060 <HAL_ADC_ConfigChannel+0x258>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d111      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_ADC_ConfigChannel+0x25c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a11      	ldr	r2, [pc, #68]	; (8003068 <HAL_ADC_ConfigChannel+0x260>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	0c9a      	lsrs	r2, r3, #18
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003034:	e002      	b.n	800303c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3b01      	subs	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f9      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40012300 	.word	0x40012300
 800305c:	40012000 	.word	0x40012000
 8003060:	10000012 	.word	0x10000012
 8003064:	20000060 	.word	0x20000060
 8003068:	431bde83 	.word	0x431bde83

0800306c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003074:	4b79      	ldr	r3, [pc, #484]	; (800325c <ADC_Init+0x1f0>)
 8003076:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	021a      	lsls	r2, r3, #8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	4a58      	ldr	r2, [pc, #352]	; (8003260 <ADC_Init+0x1f4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e00f      	b.n	800316a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0202 	bic.w	r2, r2, #2
 8003178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7e1b      	ldrb	r3, [r3, #24]
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01b      	beq.n	80031d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	3b01      	subs	r3, #1
 80031c4:	035a      	lsls	r2, r3, #13
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	e007      	b.n	80031e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	051a      	lsls	r2, r3, #20
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003222:	025a      	lsls	r2, r3, #9
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	029a      	lsls	r2, r3, #10
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40012300 	.word	0x40012300
 8003260:	0f000001 	.word	0x0f000001

08003264 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800327a:	2b00      	cmp	r3, #0
 800327c:	d13c      	bne.n	80032f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d12b      	bne.n	80032f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800329c:	2b00      	cmp	r3, #0
 800329e:	d127      	bne.n	80032f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d119      	bne.n	80032f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0220 	bic.w	r2, r2, #32
 80032ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 0201 	orr.w	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff fd61 	bl	8002db8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032f6:	e00e      	b.n	8003316 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7ff fd75 	bl	8002df4 <HAL_ADC_ErrorCallback>
}
 800330a:	e004      	b.n	8003316 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
}
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fd4d 	bl	8002dcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2240      	movs	r2, #64	; 0x40
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f043 0204 	orr.w	r2, r3, #4
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff fd4a 	bl	8002df4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003398:	4013      	ands	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ae:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <__NVIC_SetPriorityGrouping+0x44>)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	60d3      	str	r3, [r2, #12]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <__NVIC_GetPriorityGrouping+0x18>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	0a1b      	lsrs	r3, r3, #8
 80033ce:	f003 0307 	and.w	r3, r3, #7
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	db0b      	blt.n	800340a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	f003 021f 	and.w	r2, r3, #31
 80033f8:	4907      	ldr	r1, [pc, #28]	; (8003418 <__NVIC_EnableIRQ+0x38>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	2001      	movs	r0, #1
 8003402:	fa00 f202 	lsl.w	r2, r0, r2
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000e100 	.word	0xe000e100

0800341c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	6039      	str	r1, [r7, #0]
 8003426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342c:	2b00      	cmp	r3, #0
 800342e:	db0a      	blt.n	8003446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	490c      	ldr	r1, [pc, #48]	; (8003468 <__NVIC_SetPriority+0x4c>)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	0112      	lsls	r2, r2, #4
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	440b      	add	r3, r1
 8003440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003444:	e00a      	b.n	800345c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	4908      	ldr	r1, [pc, #32]	; (800346c <__NVIC_SetPriority+0x50>)
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	3b04      	subs	r3, #4
 8003454:	0112      	lsls	r2, r2, #4
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	440b      	add	r3, r1
 800345a:	761a      	strb	r2, [r3, #24]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000e100 	.word	0xe000e100
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	; 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f1c3 0307 	rsb	r3, r3, #7
 800348a:	2b04      	cmp	r3, #4
 800348c:	bf28      	it	cs
 800348e:	2304      	movcs	r3, #4
 8003490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3304      	adds	r3, #4
 8003496:	2b06      	cmp	r3, #6
 8003498:	d902      	bls.n	80034a0 <NVIC_EncodePriority+0x30>
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3b03      	subs	r3, #3
 800349e:	e000      	b.n	80034a2 <NVIC_EncodePriority+0x32>
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a4:	f04f 32ff 	mov.w	r2, #4294967295
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43da      	mvns	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	401a      	ands	r2, r3
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b8:	f04f 31ff 	mov.w	r1, #4294967295
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	43d9      	mvns	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	4313      	orrs	r3, r2
         );
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3724      	adds	r7, #36	; 0x24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e8:	d301      	bcc.n	80034ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ea:	2301      	movs	r3, #1
 80034ec:	e00f      	b.n	800350e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ee:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <SysTick_Config+0x40>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f6:	210f      	movs	r1, #15
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295
 80034fc:	f7ff ff8e 	bl	800341c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <SysTick_Config+0x40>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003506:	4b04      	ldr	r3, [pc, #16]	; (8003518 <SysTick_Config+0x40>)
 8003508:	2207      	movs	r2, #7
 800350a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	e000e010 	.word	0xe000e010

0800351c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ff29 	bl	800337c <__NVIC_SetPriorityGrouping>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003544:	f7ff ff3e 	bl	80033c4 <__NVIC_GetPriorityGrouping>
 8003548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	6978      	ldr	r0, [r7, #20]
 8003550:	f7ff ff8e 	bl	8003470 <NVIC_EncodePriority>
 8003554:	4602      	mov	r2, r0
 8003556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ff5d 	bl	800341c <__NVIC_SetPriority>
}
 8003562:	bf00      	nop
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff31 	bl	80033e0 <__NVIC_EnableIRQ>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ffa2 	bl	80034d8 <SysTick_Config>
 8003594:	4603      	mov	r3, r0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035ac:	f7ff f97e 	bl	80028ac <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e099      	b.n	80036f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035dc:	e00f      	b.n	80035fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035de:	f7ff f965 	bl	80028ac <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d908      	bls.n	80035fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2203      	movs	r2, #3
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e078      	b.n	80036f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e8      	bne.n	80035de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4b38      	ldr	r3, [pc, #224]	; (80036f8 <HAL_DMA_Init+0x158>)
 8003618:	4013      	ands	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800362a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	2b04      	cmp	r3, #4
 8003656:	d107      	bne.n	8003668 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	4313      	orrs	r3, r2
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	2b04      	cmp	r3, #4
 8003690:	d117      	bne.n	80036c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fa91 	bl	8003bcc <DMA_CheckFifoParam>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036be:	2301      	movs	r3, #1
 80036c0:	e016      	b.n	80036f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fa48 	bl	8003b60 <DMA_CalcBaseAndBitshift>
 80036d0:	4603      	mov	r3, r0
 80036d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	223f      	movs	r2, #63	; 0x3f
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	f010803f 	.word	0xf010803f

080036fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_DMA_Start_IT+0x26>
 800371e:	2302      	movs	r3, #2
 8003720:	e040      	b.n	80037a4 <HAL_DMA_Start_IT+0xa8>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d12f      	bne.n	8003796 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f9da 	bl	8003b04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	223f      	movs	r2, #63	; 0x3f
 8003756:	409a      	lsls	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0216 	orr.w	r2, r2, #22
 800376a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0208 	orr.w	r2, r2, #8
 8003782:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e005      	b.n	80037a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d004      	beq.n	80037ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2280      	movs	r2, #128	; 0x80
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00c      	b.n	80037e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2205      	movs	r2, #5
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037fc:	4b92      	ldr	r3, [pc, #584]	; (8003a48 <HAL_DMA_IRQHandler+0x258>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a92      	ldr	r2, [pc, #584]	; (8003a4c <HAL_DMA_IRQHandler+0x25c>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0a9b      	lsrs	r3, r3, #10
 8003808:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	2208      	movs	r2, #8
 800381c:	409a      	lsls	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01a      	beq.n	800385c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0204 	bic.w	r2, r2, #4
 8003842:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003848:	2208      	movs	r2, #8
 800384a:	409a      	lsls	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	2201      	movs	r2, #1
 8003862:	409a      	lsls	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d012      	beq.n	8003892 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	2201      	movs	r2, #1
 8003880:	409a      	lsls	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f043 0202 	orr.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	2204      	movs	r2, #4
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d012      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00b      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	2204      	movs	r2, #4
 80038b6:	409a      	lsls	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f043 0204 	orr.w	r2, r3, #4
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	2210      	movs	r2, #16
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d043      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d03c      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	2210      	movs	r2, #16
 80038ec:	409a      	lsls	r2, r3
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d018      	beq.n	8003932 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d024      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
 800391e:	e01f      	b.n	8003960 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01b      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
 8003930:	e016      	b.n	8003960 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d107      	bne.n	8003950 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0208 	bic.w	r2, r2, #8
 800394e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	2220      	movs	r2, #32
 8003966:	409a      	lsls	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 808e 	beq.w	8003a8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8086 	beq.w	8003a8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003986:	2220      	movs	r2, #32
 8003988:	409a      	lsls	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b05      	cmp	r3, #5
 8003998:	d136      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0216 	bic.w	r2, r2, #22
 80039a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_DMA_IRQHandler+0x1da>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0208 	bic.w	r2, r2, #8
 80039d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	223f      	movs	r2, #63	; 0x3f
 80039e0:	409a      	lsls	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d07d      	beq.n	8003afa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
        }
        return;
 8003a06:	e078      	b.n	8003afa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01c      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d108      	bne.n	8003a36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d030      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
 8003a34:	e02b      	b.n	8003a8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d027      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
 8003a46:	e022      	b.n	8003a8e <HAL_DMA_IRQHandler+0x29e>
 8003a48:	20000060 	.word	0x20000060
 8003a4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10f      	bne.n	8003a7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0210 	bic.w	r2, r2, #16
 8003a6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d032      	beq.n	8003afc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d022      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d307      	bcc.n	8003ad6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f2      	bne.n	8003aba <HAL_DMA_IRQHandler+0x2ca>
 8003ad4:	e000      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ad6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
 8003af8:	e000      	b.n	8003afc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003afa:	bf00      	nop
    }
  }
}
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop

08003b04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d108      	bne.n	8003b44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b42:	e007      	b.n	8003b54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	60da      	str	r2, [r3, #12]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	3b10      	subs	r3, #16
 8003b70:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <DMA_CalcBaseAndBitshift+0x64>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b7a:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <DMA_CalcBaseAndBitshift+0x68>)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d909      	bls.n	8003ba2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	1d1a      	adds	r2, r3, #4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	659a      	str	r2, [r3, #88]	; 0x58
 8003ba0:	e007      	b.n	8003bb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	aaaaaaab 	.word	0xaaaaaaab
 8003bc8:	08012a0c 	.word	0x08012a0c

08003bcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11f      	bne.n	8003c26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d855      	bhi.n	8003c98 <DMA_CheckFifoParam+0xcc>
 8003bec:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <DMA_CheckFifoParam+0x28>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c17 	.word	0x08003c17
 8003bfc:	08003c05 	.word	0x08003c05
 8003c00:	08003c99 	.word	0x08003c99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d045      	beq.n	8003c9c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c14:	e042      	b.n	8003c9c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c1e:	d13f      	bne.n	8003ca0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c24:	e03c      	b.n	8003ca0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2e:	d121      	bne.n	8003c74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d836      	bhi.n	8003ca4 <DMA_CheckFifoParam+0xd8>
 8003c36:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <DMA_CheckFifoParam+0x70>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	08003c4d 	.word	0x08003c4d
 8003c40:	08003c53 	.word	0x08003c53
 8003c44:	08003c4d 	.word	0x08003c4d
 8003c48:	08003c65 	.word	0x08003c65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c50:	e02f      	b.n	8003cb2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d024      	beq.n	8003ca8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c62:	e021      	b.n	8003ca8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c6c:	d11e      	bne.n	8003cac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c72:	e01b      	b.n	8003cac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d902      	bls.n	8003c80 <DMA_CheckFifoParam+0xb4>
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d003      	beq.n	8003c86 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c7e:	e018      	b.n	8003cb2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      break;
 8003c84:	e015      	b.n	8003cb2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00e      	beq.n	8003cb0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
      break;
 8003c96:	e00b      	b.n	8003cb0 <DMA_CheckFifoParam+0xe4>
      break;
 8003c98:	bf00      	nop
 8003c9a:	e00a      	b.n	8003cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8003c9c:	bf00      	nop
 8003c9e:	e008      	b.n	8003cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8003ca0:	bf00      	nop
 8003ca2:	e006      	b.n	8003cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8003ca4:	bf00      	nop
 8003ca6:	e004      	b.n	8003cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8003ca8:	bf00      	nop
 8003caa:	e002      	b.n	8003cb2 <DMA_CheckFifoParam+0xe6>
      break;   
 8003cac:	bf00      	nop
 8003cae:	e000      	b.n	8003cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8003cb0:	bf00      	nop
    }
  } 
  
  return status; 
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	; 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	e159      	b.n	8003f90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cdc:	2201      	movs	r2, #1
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	f040 8148 	bne.w	8003f8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d00b      	beq.n	8003d1a <HAL_GPIO_Init+0x5a>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d007      	beq.n	8003d1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d0e:	2b11      	cmp	r3, #17
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b12      	cmp	r3, #18
 8003d18:	d130      	bne.n	8003d7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	2203      	movs	r2, #3
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d50:	2201      	movs	r2, #1
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 0201 	and.w	r2, r3, #1
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	2203      	movs	r2, #3
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0xfc>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b12      	cmp	r3, #18
 8003dba:	d123      	bne.n	8003e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	08da      	lsrs	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3208      	adds	r2, #8
 8003dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	220f      	movs	r2, #15
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	08da      	lsrs	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3208      	adds	r2, #8
 8003dfe:	69b9      	ldr	r1, [r7, #24]
 8003e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	2203      	movs	r2, #3
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0203 	and.w	r2, r3, #3
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80a2 	beq.w	8003f8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	4b56      	ldr	r3, [pc, #344]	; (8003fa4 <HAL_GPIO_Init+0x2e4>)
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	4a55      	ldr	r2, [pc, #340]	; (8003fa4 <HAL_GPIO_Init+0x2e4>)
 8003e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e54:	6453      	str	r3, [r2, #68]	; 0x44
 8003e56:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_GPIO_Init+0x2e4>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e62:	4a51      	ldr	r2, [pc, #324]	; (8003fa8 <HAL_GPIO_Init+0x2e8>)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	3302      	adds	r3, #2
 8003e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	220f      	movs	r2, #15
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a48      	ldr	r2, [pc, #288]	; (8003fac <HAL_GPIO_Init+0x2ec>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d019      	beq.n	8003ec2 <HAL_GPIO_Init+0x202>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a47      	ldr	r2, [pc, #284]	; (8003fb0 <HAL_GPIO_Init+0x2f0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_GPIO_Init+0x1fe>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a46      	ldr	r2, [pc, #280]	; (8003fb4 <HAL_GPIO_Init+0x2f4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00d      	beq.n	8003eba <HAL_GPIO_Init+0x1fa>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a45      	ldr	r2, [pc, #276]	; (8003fb8 <HAL_GPIO_Init+0x2f8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <HAL_GPIO_Init+0x1f6>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a44      	ldr	r2, [pc, #272]	; (8003fbc <HAL_GPIO_Init+0x2fc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <HAL_GPIO_Init+0x1f2>
 8003eae:	2304      	movs	r3, #4
 8003eb0:	e008      	b.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003eb2:	2307      	movs	r3, #7
 8003eb4:	e006      	b.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e004      	b.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e002      	b.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_GPIO_Init+0x204>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	f002 0203 	and.w	r2, r2, #3
 8003eca:	0092      	lsls	r2, r2, #2
 8003ecc:	4093      	lsls	r3, r2
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed4:	4934      	ldr	r1, [pc, #208]	; (8003fa8 <HAL_GPIO_Init+0x2e8>)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	3302      	adds	r3, #2
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_GPIO_Init+0x300>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	43db      	mvns	r3, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f06:	4a2e      	ldr	r2, [pc, #184]	; (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f0c:	4b2c      	ldr	r3, [pc, #176]	; (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f30:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f36:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f5a:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f84:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <HAL_GPIO_Init+0x300>)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	f67f aea2 	bls.w	8003cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3724      	adds	r7, #36	; 0x24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40013800 	.word	0x40013800
 8003fac:	40020000 	.word	0x40020000
 8003fb0:	40020400 	.word	0x40020400
 8003fb4:	40020800 	.word	0x40020800
 8003fb8:	40020c00 	.word	0x40020c00
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40013c00 	.word	0x40013c00

08003fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd4:	787b      	ldrb	r3, [r7, #1]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fe0:	e003      	b.n	8003fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	041a      	lsls	r2, r3, #16
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	619a      	str	r2, [r3, #24]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff8:	b08f      	sub	sp, #60	; 0x3c
 8003ffa:	af0a      	add	r7, sp, #40	; 0x28
 8003ffc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e10f      	b.n	8004228 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f006 fcac 	bl	800a980 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2203      	movs	r2, #3
 800402c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f003 fc49 	bl	80078de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	687e      	ldr	r6, [r7, #4]
 8004054:	466d      	mov	r5, sp
 8004056:	f106 0410 	add.w	r4, r6, #16
 800405a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800405c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800405e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004062:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004066:	e885 0003 	stmia.w	r5, {r0, r1}
 800406a:	1d33      	adds	r3, r6, #4
 800406c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800406e:	6838      	ldr	r0, [r7, #0]
 8004070:	f003 fb20 	bl	80076b4 <USB_CoreInit>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e0d0      	b.n	8004228 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2100      	movs	r1, #0
 800408c:	4618      	mov	r0, r3
 800408e:	f003 fc37 	bl	8007900 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
 8004096:	e04a      	b.n	800412e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	333d      	adds	r3, #61	; 0x3d
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040ac:	7bfa      	ldrb	r2, [r7, #15]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	333c      	adds	r3, #60	; 0x3c
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040c0:	7bfa      	ldrb	r2, [r7, #15]
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	b298      	uxth	r0, r3
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	3342      	adds	r3, #66	; 0x42
 80040d4:	4602      	mov	r2, r0
 80040d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	333f      	adds	r3, #63	; 0x3f
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	3344      	adds	r3, #68	; 0x44
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	3348      	adds	r3, #72	; 0x48
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	3350      	adds	r3, #80	; 0x50
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	3301      	adds	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
 800412e:	7bfa      	ldrb	r2, [r7, #15]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	429a      	cmp	r2, r3
 8004136:	d3af      	bcc.n	8004098 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	e044      	b.n	80041c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004196:	7bfa      	ldrb	r2, [r7, #15]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041ac:	7bfa      	ldrb	r2, [r7, #15]
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	3301      	adds	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
 80041c8:	7bfa      	ldrb	r2, [r7, #15]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d3b5      	bcc.n	800413e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	687e      	ldr	r6, [r7, #4]
 80041da:	466d      	mov	r5, sp
 80041dc:	f106 0410 	add.w	r4, r6, #16
 80041e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80041f0:	1d33      	adds	r3, r6, #4
 80041f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041f4:	6838      	ldr	r0, [r7, #0]
 80041f6:	f003 fbad 	bl	8007954 <USB_DevInit>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e00d      	b.n	8004228 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f004 fbf5 	bl	8008a10 <USB_DevDisconnect>

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004230 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_PCD_Start+0x1c>
 8004248:	2302      	movs	r3, #2
 800424a:	e020      	b.n	800428e <HAL_PCD_Start+0x5e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	2b01      	cmp	r3, #1
 800425a:	d109      	bne.n	8004270 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004260:	2b01      	cmp	r3, #1
 8004262:	d005      	beq.n	8004270 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f003 fb21 	bl	80078bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f004 fba5 	bl	80089ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004296:	b590      	push	{r4, r7, lr}
 8004298:	b08d      	sub	sp, #52	; 0x34
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f004 fc63 	bl	8008b78 <USB_GetMode>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f040 839d 	bne.w	80049f4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f004 fbc7 	bl	8008a52 <USB_ReadInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8393 	beq.w	80049f2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 fbbe 	bl	8008a52 <USB_ReadInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d107      	bne.n	80042f0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f002 0202 	and.w	r2, r2, #2
 80042ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f004 fbac 	bl	8008a52 <USB_ReadInterrupts>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b10      	cmp	r3, #16
 8004302:	d161      	bne.n	80043c8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0210 	bic.w	r2, r2, #16
 8004312:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	0c5b      	lsrs	r3, r3, #17
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	2b02      	cmp	r3, #2
 800433e:	d124      	bne.n	800438a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d035      	beq.n	80043b8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800435a:	b29b      	uxth	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	6a38      	ldr	r0, [r7, #32]
 8004360:	f004 fa12 	bl	8008788 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004370:	441a      	add	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004382:	441a      	add	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	619a      	str	r2, [r3, #24]
 8004388:	e016      	b.n	80043b8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	0c5b      	lsrs	r3, r3, #17
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	2b06      	cmp	r3, #6
 8004394:	d110      	bne.n	80043b8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800439c:	2208      	movs	r2, #8
 800439e:	4619      	mov	r1, r3
 80043a0:	6a38      	ldr	r0, [r7, #32]
 80043a2:	f004 f9f1 	bl	8008788 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043b2:	441a      	add	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0210 	orr.w	r2, r2, #16
 80043c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f004 fb40 	bl	8008a52 <USB_ReadInterrupts>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043dc:	d16e      	bne.n	80044bc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f004 fb46 	bl	8008a78 <USB_ReadDevAllOutEpInterrupt>
 80043ec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80043ee:	e062      	b.n	80044b6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d057      	beq.n	80044aa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	f004 fb6b 	bl	8008ae0 <USB_ReadDevOutEPInterrupt>
 800440a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00c      	beq.n	8004430 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	461a      	mov	r2, r3
 8004424:	2301      	movs	r3, #1
 8004426:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fdb0 	bl	8004f90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	461a      	mov	r2, r3
 8004448:	2308      	movs	r3, #8
 800444a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800444c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 feaa 	bl	80051a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	d008      	beq.n	8004470 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446a:	461a      	mov	r2, r3
 800446c:	2310      	movs	r3, #16
 800446e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	461a      	mov	r2, r3
 8004488:	2320      	movs	r3, #32
 800448a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a2:	461a      	mov	r2, r3
 80044a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	3301      	adds	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d199      	bne.n	80043f0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f004 fac6 	bl	8008a52 <USB_ReadInterrupts>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044d0:	f040 80c0 	bne.w	8004654 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f004 fae7 	bl	8008aac <USB_ReadDevAllInEpInterrupt>
 80044de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80044e4:	e0b2      	b.n	800464c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80a7 	beq.w	8004640 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	4611      	mov	r1, r2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f004 fb0d 	bl	8008b1c <USB_ReadDevInEPInterrupt>
 8004502:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d057      	beq.n	80045be <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	2201      	movs	r2, #1
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	43db      	mvns	r3, r3
 8004528:	69f9      	ldr	r1, [r7, #28]
 800452a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800452e:	4013      	ands	r3, r2
 8004530:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	461a      	mov	r2, r3
 8004540:	2301      	movs	r3, #1
 8004542:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d132      	bne.n	80045b2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	3348      	adds	r3, #72	; 0x48
 800455c:	6819      	ldr	r1, [r3, #0]
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4403      	add	r3, r0
 800456c:	3344      	adds	r3, #68	; 0x44
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4419      	add	r1, r3
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4403      	add	r3, r0
 8004580:	3348      	adds	r3, #72	; 0x48
 8004582:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <HAL_PCD_IRQHandler+0x31c>
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458e:	4613      	mov	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	3350      	adds	r3, #80	; 0x50
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d108      	bne.n	80045b2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045aa:	461a      	mov	r2, r3
 80045ac:	2101      	movs	r1, #1
 80045ae:	f004 fb15 	bl	8008bdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	4619      	mov	r1, r3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f006 fa62 	bl	800aa82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	2308      	movs	r3, #8
 80045d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	461a      	mov	r2, r3
 80045f2:	2310      	movs	r3, #16
 80045f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	461a      	mov	r2, r3
 800460e:	2340      	movs	r3, #64	; 0x40
 8004610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	461a      	mov	r2, r3
 800462a:	2302      	movs	r3, #2
 800462c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fc1b 	bl	8004e76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	3301      	adds	r3, #1
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	2b00      	cmp	r3, #0
 8004650:	f47f af49 	bne.w	80044e6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f004 f9fa 	bl	8008a52 <USB_ReadInterrupts>
 800465e:	4603      	mov	r3, r0
 8004660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004668:	d122      	bne.n	80046b0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004684:	2b01      	cmp	r3, #1
 8004686:	d108      	bne.n	800469a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004690:	2100      	movs	r1, #0
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fe26 	bl	80052e4 <HAL_PCDEx_LPM_Callback>
 8004698:	e002      	b.n	80046a0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f006 fa5e 	bl	800ab5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80046ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f004 f9cc 	bl	8008a52 <USB_ReadInterrupts>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c4:	d112      	bne.n	80046ec <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d102      	bne.n	80046dc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f006 fa1a 	bl	800ab10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80046ea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f004 f9ae 	bl	8008a52 <USB_ReadInterrupts>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004700:	f040 80c7 	bne.w	8004892 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2110      	movs	r1, #16
 800471e:	4618      	mov	r0, r3
 8004720:	f003 fa7c 	bl	8007c1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004724:	2300      	movs	r3, #0
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004728:	e056      	b.n	80047d8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	461a      	mov	r2, r3
 8004738:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800473c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004758:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800475c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004778:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800477c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	461a      	mov	r2, r3
 800478c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004790:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c2:	0151      	lsls	r1, r2, #5
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	440a      	add	r2, r1
 80047c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	3301      	adds	r3, #1
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047de:	429a      	cmp	r2, r3
 80047e0:	d3a3      	bcc.n	800472a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80047f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480e:	f043 030b 	orr.w	r3, r3, #11
 8004812:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004824:	f043 030b 	orr.w	r3, r3, #11
 8004828:	6453      	str	r3, [r2, #68]	; 0x44
 800482a:	e015      	b.n	8004858 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800483a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800483e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004842:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004852:	f043 030b 	orr.w	r3, r3, #11
 8004856:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004866:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800486a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800487c:	461a      	mov	r2, r3
 800487e:	f004 f9ad 	bl	8008bdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f004 f8db 	bl	8008a52 <USB_ReadInterrupts>
 800489c:	4603      	mov	r3, r0
 800489e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a6:	d124      	bne.n	80048f2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f004 f971 	bl	8008b94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f003 fa11 	bl	8007cde <USB_GetDevSpeed>
 80048bc:	4603      	mov	r3, r0
 80048be:	461a      	mov	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681c      	ldr	r4, [r3, #0]
 80048c8:	f001 f920 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 80048cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	4620      	mov	r0, r4
 80048d8:	f002 ff4e 	bl	8007778 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f006 f8f8 	bl	800aad2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f004 f8ab 	bl	8008a52 <USB_ReadInterrupts>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d10a      	bne.n	800491c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f006 f8d5 	bl	800aab6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f002 0208 	and.w	r2, r2, #8
 800491a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f004 f896 	bl	8008a52 <USB_ReadInterrupts>
 8004926:	4603      	mov	r3, r0
 8004928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800492c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004930:	d10f      	bne.n	8004952 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	b2db      	uxtb	r3, r3
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f006 f92d 	bl	800ab9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f004 f87b 	bl	8008a52 <USB_ReadInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004966:	d10f      	bne.n	8004988 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	b2db      	uxtb	r3, r3
 8004970:	4619      	mov	r1, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f006 f900 	bl	800ab78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f004 f860 	bl	8008a52 <USB_ReadInterrupts>
 8004992:	4603      	mov	r3, r0
 8004994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499c:	d10a      	bne.n	80049b4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f006 f90e 	bl	800abc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80049b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f004 f84a 	bl	8008a52 <USB_ReadInterrupts>
 80049be:	4603      	mov	r3, r0
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d115      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f006 f8fe 	bl	800abdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
 80049f0:	e000      	b.n	80049f4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80049f2:	bf00      	nop
    }
  }
}
 80049f4:	3734      	adds	r7, #52	; 0x34
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd90      	pop	{r4, r7, pc}

080049fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_PCD_SetAddress+0x1a>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e013      	b.n	8004a3c <HAL_PCD_SetAddress+0x42>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f003 ffa8 	bl	8008982 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	461a      	mov	r2, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	70fb      	strb	r3, [r7, #3]
 8004a56:	460b      	mov	r3, r1
 8004a58:	803b      	strh	r3, [r7, #0]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	da0f      	bge.n	8004a8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	f003 020f 	and.w	r2, r3, #15
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	3338      	adds	r3, #56	; 0x38
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3304      	adds	r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	705a      	strb	r2, [r3, #1]
 8004a88:	e00f      	b.n	8004aaa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	f003 020f 	and.w	r2, r3, #15
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ab6:	883a      	ldrh	r2, [r7, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	78ba      	ldrb	r2, [r7, #2]
 8004ac0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d004      	beq.n	8004ad4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ad4:	78bb      	ldrb	r3, [r7, #2]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d102      	bne.n	8004ae0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_PCD_EP_Open+0xaa>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e00e      	b.n	8004b0c <HAL_PCD_EP_Open+0xc8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68f9      	ldr	r1, [r7, #12]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f003 f913 	bl	8007d28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	da0f      	bge.n	8004b48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	f003 020f 	and.w	r2, r3, #15
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	3338      	adds	r3, #56	; 0x38
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	705a      	strb	r2, [r3, #1]
 8004b46:	e00f      	b.n	8004b68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3304      	adds	r3, #4
 8004b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_PCD_EP_Close+0x6e>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e00e      	b.n	8004ba0 <HAL_PCD_EP_Close+0x8c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f003 f951 	bl	8007e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bb8:	7afb      	ldrb	r3, [r7, #11]
 8004bba:	f003 020f 	and.w	r2, r3, #15
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	3304      	adds	r3, #4
 8004bd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2200      	movs	r2, #0
 8004be8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bea:	7afb      	ldrb	r3, [r7, #11]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d102      	bne.n	8004c04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c04:	7afb      	ldrb	r3, [r7, #11]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6979      	ldr	r1, [r7, #20]
 8004c1c:	f003 fc2c 	bl	8008478 <USB_EP0StartXfer>
 8004c20:	e008      	b.n	8004c34 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6979      	ldr	r1, [r7, #20]
 8004c30:	f003 f9de 	bl	8007ff0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	f003 020f 	and.w	r2, r3, #15
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004c60:	681b      	ldr	r3, [r3, #0]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b086      	sub	sp, #24
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c7e:	7afb      	ldrb	r3, [r7, #11]
 8004c80:	f003 020f 	and.w	r2, r3, #15
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	3338      	adds	r3, #56	; 0x38
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	3304      	adds	r3, #4
 8004c94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2201      	movs	r2, #1
 8004cac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cae:	7afb      	ldrb	r3, [r7, #11]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d102      	bne.n	8004cc8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cc8:	7afb      	ldrb	r3, [r7, #11]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6979      	ldr	r1, [r7, #20]
 8004ce0:	f003 fbca 	bl	8008478 <USB_EP0StartXfer>
 8004ce4:	e008      	b.n	8004cf8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6979      	ldr	r1, [r7, #20]
 8004cf4:	f003 f97c 	bl	8007ff0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	f003 020f 	and.w	r2, r3, #15
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d901      	bls.n	8004d20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e050      	b.n	8004dc2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da0f      	bge.n	8004d48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	f003 020f 	and.w	r2, r3, #15
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	3338      	adds	r3, #56	; 0x38
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	705a      	strb	r2, [r3, #1]
 8004d46:	e00d      	b.n	8004d64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_PCD_EP_SetStall+0x82>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e01e      	b.n	8004dc2 <HAL_PCD_EP_SetStall+0xc0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68f9      	ldr	r1, [r7, #12]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f003 fd21 	bl	80087da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	b2d9      	uxtb	r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004db2:	461a      	mov	r2, r3
 8004db4:	f003 ff12 	bl	8008bdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	f003 020f 	and.w	r2, r3, #15
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d901      	bls.n	8004de8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e042      	b.n	8004e6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	da0f      	bge.n	8004e10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	f003 020f 	and.w	r2, r3, #15
 8004df6:	4613      	mov	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	3338      	adds	r3, #56	; 0x38
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4413      	add	r3, r2
 8004e04:	3304      	adds	r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	705a      	strb	r2, [r3, #1]
 8004e0e:	e00f      	b.n	8004e30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	f003 020f 	and.w	r2, r3, #15
 8004e16:	4613      	mov	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	4413      	add	r3, r2
 8004e26:	3304      	adds	r3, #4
 8004e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_PCD_EP_ClrStall+0x86>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e00e      	b.n	8004e6e <HAL_PCD_EP_ClrStall+0xa4>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f003 fd29 	bl	80088b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b08a      	sub	sp, #40	; 0x28
 8004e7a:	af02      	add	r7, sp, #8
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	3338      	adds	r3, #56	; 0x38
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d901      	bls.n	8004eae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e06c      	b.n	8004f88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d902      	bls.n	8004eca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3303      	adds	r3, #3
 8004ece:	089b      	lsrs	r3, r3, #2
 8004ed0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ed2:	e02b      	b.n	8004f2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d902      	bls.n	8004ef0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3303      	adds	r3, #3
 8004ef4:	089b      	lsrs	r3, r3, #2
 8004ef6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68d9      	ldr	r1, [r3, #12]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	6978      	ldr	r0, [r7, #20]
 8004f10:	f003 fc05 	bl	800871e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	441a      	add	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d809      	bhi.n	8004f56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d203      	bcs.n	8004f56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1be      	bne.n	8004ed4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d811      	bhi.n	8004f86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	2201      	movs	r2, #1
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	6939      	ldr	r1, [r7, #16]
 8004f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f82:	4013      	ands	r3, r2
 8004f84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	333c      	adds	r3, #60	; 0x3c
 8004fa8:	3304      	adds	r3, #4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	f040 80a0 	bne.w	8005108 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d015      	beq.n	8004ffe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a72      	ldr	r2, [pc, #456]	; (80051a0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	f240 80dd 	bls.w	8005196 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80d7 	beq.w	8005196 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffa:	6093      	str	r3, [r2, #8]
 8004ffc:	e0cb      	b.n	8005196 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d009      	beq.n	800501c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	461a      	mov	r2, r3
 8005016:	2320      	movs	r3, #32
 8005018:	6093      	str	r3, [r2, #8]
 800501a:	e0bc      	b.n	8005196 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	f040 80b7 	bne.w	8005196 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a5d      	ldr	r2, [pc, #372]	; (80051a0 <PCD_EP_OutXfrComplete_int+0x210>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d90f      	bls.n	8005050 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	461a      	mov	r2, r3
 8005048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504c:	6093      	str	r3, [r2, #8]
 800504e:	e0a2      	b.n	8005196 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005062:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	0159      	lsls	r1, r3, #5
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	440b      	add	r3, r1
 800506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005076:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4403      	add	r3, r0
 8005086:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800508a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800509e:	6819      	ldr	r1, [r3, #0]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4403      	add	r3, r0
 80050ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4419      	add	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4403      	add	r3, r0
 80050c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d114      	bne.n	80050fa <PCD_EP_OutXfrComplete_int+0x16a>
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d108      	bne.n	80050fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050f2:	461a      	mov	r2, r3
 80050f4:	2101      	movs	r1, #1
 80050f6:	f003 fd71 	bl	8008bdc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f005 fca3 	bl	800aa4c <HAL_PCD_DataOutStageCallback>
 8005106:	e046      	b.n	8005196 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a26      	ldr	r2, [pc, #152]	; (80051a4 <PCD_EP_OutXfrComplete_int+0x214>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d124      	bne.n	800515a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005126:	461a      	mov	r2, r3
 8005128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512c:	6093      	str	r3, [r2, #8]
 800512e:	e032      	b.n	8005196 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	d008      	beq.n	800514c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	461a      	mov	r2, r3
 8005148:	2320      	movs	r3, #32
 800514a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f005 fc7a 	bl	800aa4c <HAL_PCD_DataOutStageCallback>
 8005158:	e01d      	b.n	8005196 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d114      	bne.n	800518a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d108      	bne.n	800518a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005182:	461a      	mov	r2, r3
 8005184:	2100      	movs	r1, #0
 8005186:	f003 fd29 	bl	8008bdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f005 fc5b 	bl	800aa4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	4f54300a 	.word	0x4f54300a
 80051a4:	4f54310a 	.word	0x4f54310a

080051a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	333c      	adds	r3, #60	; 0x3c
 80051c0:	3304      	adds	r3, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a15      	ldr	r2, [pc, #84]	; (8005230 <PCD_EP_OutSetupPacket_int+0x88>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d90e      	bls.n	80051fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	461a      	mov	r2, r3
 80051f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f005 fc13 	bl	800aa28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4a0a      	ldr	r2, [pc, #40]	; (8005230 <PCD_EP_OutSetupPacket_int+0x88>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d90c      	bls.n	8005224 <PCD_EP_OutSetupPacket_int+0x7c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d108      	bne.n	8005224 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800521c:	461a      	mov	r2, r3
 800521e:	2101      	movs	r1, #1
 8005220:	f003 fcdc 	bl	8008bdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	4f54300a 	.word	0x4f54300a

08005234 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
 8005240:	4613      	mov	r3, r2
 8005242:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d107      	bne.n	8005262 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005252:	883b      	ldrh	r3, [r7, #0]
 8005254:	0419      	lsls	r1, r3, #16
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	430a      	orrs	r2, r1
 800525e:	629a      	str	r2, [r3, #40]	; 0x28
 8005260:	e028      	b.n	80052b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	4413      	add	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005270:	2300      	movs	r3, #0
 8005272:	73fb      	strb	r3, [r7, #15]
 8005274:	e00d      	b.n	8005292 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	3340      	adds	r3, #64	; 0x40
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	0c1b      	lsrs	r3, r3, #16
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4413      	add	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	3301      	adds	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	7bfa      	ldrb	r2, [r7, #15]
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	3b01      	subs	r3, #1
 8005298:	429a      	cmp	r2, r3
 800529a:	d3ec      	bcc.n	8005276 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800529c:	883b      	ldrh	r3, [r7, #0]
 800529e:	0418      	lsls	r0, r3, #16
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	4302      	orrs	r2, r0
 80052ac:	3340      	adds	r3, #64	; 0x40
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e25b      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d075      	beq.n	8005406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800531a:	4ba3      	ldr	r3, [pc, #652]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b04      	cmp	r3, #4
 8005324:	d00c      	beq.n	8005340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005326:	4ba0      	ldr	r3, [pc, #640]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800532e:	2b08      	cmp	r3, #8
 8005330:	d112      	bne.n	8005358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005332:	4b9d      	ldr	r3, [pc, #628]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800533e:	d10b      	bne.n	8005358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005340:	4b99      	ldr	r3, [pc, #612]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d05b      	beq.n	8005404 <HAL_RCC_OscConfig+0x108>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d157      	bne.n	8005404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e236      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005360:	d106      	bne.n	8005370 <HAL_RCC_OscConfig+0x74>
 8005362:	4b91      	ldr	r3, [pc, #580]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a90      	ldr	r2, [pc, #576]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e01d      	b.n	80053ac <HAL_RCC_OscConfig+0xb0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005378:	d10c      	bne.n	8005394 <HAL_RCC_OscConfig+0x98>
 800537a:	4b8b      	ldr	r3, [pc, #556]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a8a      	ldr	r2, [pc, #552]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	4b88      	ldr	r3, [pc, #544]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a87      	ldr	r2, [pc, #540]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e00b      	b.n	80053ac <HAL_RCC_OscConfig+0xb0>
 8005394:	4b84      	ldr	r3, [pc, #528]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a83      	ldr	r2, [pc, #524]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800539a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	4b81      	ldr	r3, [pc, #516]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a80      	ldr	r2, [pc, #512]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 80053a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d013      	beq.n	80053dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fd fa7a 	bl	80028ac <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053bc:	f7fd fa76 	bl	80028ac <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e1fb      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ce:	4b76      	ldr	r3, [pc, #472]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCC_OscConfig+0xc0>
 80053da:	e014      	b.n	8005406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fd fa66 	bl	80028ac <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e4:	f7fd fa62 	bl	80028ac <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	; 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e1e7      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053f6:	4b6c      	ldr	r3, [pc, #432]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0xe8>
 8005402:	e000      	b.n	8005406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d063      	beq.n	80054da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005412:	4b65      	ldr	r3, [pc, #404]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800541e:	4b62      	ldr	r3, [pc, #392]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005426:	2b08      	cmp	r3, #8
 8005428:	d11c      	bne.n	8005464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800542a:	4b5f      	ldr	r3, [pc, #380]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d116      	bne.n	8005464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005436:	4b5c      	ldr	r3, [pc, #368]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_RCC_OscConfig+0x152>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d001      	beq.n	800544e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e1bb      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544e:	4b56      	ldr	r3, [pc, #344]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4952      	ldr	r1, [pc, #328]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005462:	e03a      	b.n	80054da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d020      	beq.n	80054ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800546c:	4b4f      	ldr	r3, [pc, #316]	; (80055ac <HAL_RCC_OscConfig+0x2b0>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005472:	f7fd fa1b 	bl	80028ac <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800547a:	f7fd fa17 	bl	80028ac <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e19c      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548c:	4b46      	ldr	r3, [pc, #280]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005498:	4b43      	ldr	r3, [pc, #268]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4940      	ldr	r1, [pc, #256]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	600b      	str	r3, [r1, #0]
 80054ac:	e015      	b.n	80054da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ae:	4b3f      	ldr	r3, [pc, #252]	; (80055ac <HAL_RCC_OscConfig+0x2b0>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fd f9fa 	bl	80028ac <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054bc:	f7fd f9f6 	bl	80028ac <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e17b      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ce:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d030      	beq.n	8005548 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ee:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <HAL_RCC_OscConfig+0x2b4>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f4:	f7fd f9da 	bl	80028ac <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054fc:	f7fd f9d6 	bl	80028ac <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e15b      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800550e:	4b26      	ldr	r3, [pc, #152]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0x200>
 800551a:	e015      	b.n	8005548 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800551c:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <HAL_RCC_OscConfig+0x2b4>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005522:	f7fd f9c3 	bl	80028ac <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800552a:	f7fd f9bf 	bl	80028ac <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e144      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800553c:	4b1a      	ldr	r3, [pc, #104]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800553e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f0      	bne.n	800552a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80a0 	beq.w	8005696 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005556:	2300      	movs	r3, #0
 8005558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800555a:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10f      	bne.n	8005586 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005566:	2300      	movs	r3, #0
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005574:	6413      	str	r3, [r2, #64]	; 0x40
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_RCC_OscConfig+0x2ac>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557e:	60bb      	str	r3, [r7, #8]
 8005580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005586:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <HAL_RCC_OscConfig+0x2b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d121      	bne.n	80055d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005592:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <HAL_RCC_OscConfig+0x2b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a07      	ldr	r2, [pc, #28]	; (80055b4 <HAL_RCC_OscConfig+0x2b8>)
 8005598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800559e:	f7fd f985 	bl	80028ac <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a4:	e011      	b.n	80055ca <HAL_RCC_OscConfig+0x2ce>
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800
 80055ac:	42470000 	.word	0x42470000
 80055b0:	42470e80 	.word	0x42470e80
 80055b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b8:	f7fd f978 	bl	80028ac <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e0fd      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ca:	4b81      	ldr	r3, [pc, #516]	; (80057d0 <HAL_RCC_OscConfig+0x4d4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d106      	bne.n	80055ec <HAL_RCC_OscConfig+0x2f0>
 80055de:	4b7d      	ldr	r3, [pc, #500]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	4a7c      	ldr	r2, [pc, #496]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ea:	e01c      	b.n	8005626 <HAL_RCC_OscConfig+0x32a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b05      	cmp	r3, #5
 80055f2:	d10c      	bne.n	800560e <HAL_RCC_OscConfig+0x312>
 80055f4:	4b77      	ldr	r3, [pc, #476]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	4a76      	ldr	r2, [pc, #472]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 80055fa:	f043 0304 	orr.w	r3, r3, #4
 80055fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005600:	4b74      	ldr	r3, [pc, #464]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005604:	4a73      	ldr	r2, [pc, #460]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	6713      	str	r3, [r2, #112]	; 0x70
 800560c:	e00b      	b.n	8005626 <HAL_RCC_OscConfig+0x32a>
 800560e:	4b71      	ldr	r3, [pc, #452]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4a70      	ldr	r2, [pc, #448]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	6713      	str	r3, [r2, #112]	; 0x70
 800561a:	4b6e      	ldr	r3, [pc, #440]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	4a6d      	ldr	r2, [pc, #436]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 8005620:	f023 0304 	bic.w	r3, r3, #4
 8005624:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d015      	beq.n	800565a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562e:	f7fd f93d 	bl	80028ac <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	e00a      	b.n	800564c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005636:	f7fd f939 	bl	80028ac <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	4293      	cmp	r3, r2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e0bc      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564c:	4b61      	ldr	r3, [pc, #388]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ee      	beq.n	8005636 <HAL_RCC_OscConfig+0x33a>
 8005658:	e014      	b.n	8005684 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800565a:	f7fd f927 	bl	80028ac <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005660:	e00a      	b.n	8005678 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005662:	f7fd f923 	bl	80028ac <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005670:	4293      	cmp	r3, r2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e0a6      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005678:	4b56      	ldr	r3, [pc, #344]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1ee      	bne.n	8005662 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d105      	bne.n	8005696 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568a:	4b52      	ldr	r3, [pc, #328]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	4a51      	ldr	r2, [pc, #324]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 8005690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005694:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8092 	beq.w	80057c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056a0:	4b4c      	ldr	r3, [pc, #304]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d05c      	beq.n	8005766 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d141      	bne.n	8005738 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b4:	4b48      	ldr	r3, [pc, #288]	; (80057d8 <HAL_RCC_OscConfig+0x4dc>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fd f8f7 	bl	80028ac <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c2:	f7fd f8f3 	bl	80028ac <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e078      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d4:	4b3f      	ldr	r3, [pc, #252]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f0      	bne.n	80056c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	019b      	lsls	r3, r3, #6
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	3b01      	subs	r3, #1
 80056fa:	041b      	lsls	r3, r3, #16
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	061b      	lsls	r3, r3, #24
 8005704:	4933      	ldr	r1, [pc, #204]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800570a:	4b33      	ldr	r3, [pc, #204]	; (80057d8 <HAL_RCC_OscConfig+0x4dc>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005710:	f7fd f8cc 	bl	80028ac <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005718:	f7fd f8c8 	bl	80028ac <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e04d      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800572a:	4b2a      	ldr	r3, [pc, #168]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x41c>
 8005736:	e045      	b.n	80057c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005738:	4b27      	ldr	r3, [pc, #156]	; (80057d8 <HAL_RCC_OscConfig+0x4dc>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573e:	f7fd f8b5 	bl	80028ac <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005746:	f7fd f8b1 	bl	80028ac <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e036      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005758:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f0      	bne.n	8005746 <HAL_RCC_OscConfig+0x44a>
 8005764:	e02e      	b.n	80057c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e029      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005772:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <HAL_RCC_OscConfig+0x4d8>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	429a      	cmp	r2, r3
 8005784:	d11c      	bne.n	80057c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d115      	bne.n	80057c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800579a:	4013      	ands	r3, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d10d      	bne.n	80057c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d106      	bne.n	80057c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d001      	beq.n	80057c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40007000 	.word	0x40007000
 80057d4:	40023800 	.word	0x40023800
 80057d8:	42470060 	.word	0x42470060

080057dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0cc      	b.n	800598a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057f0:	4b68      	ldr	r3, [pc, #416]	; (8005994 <HAL_RCC_ClockConfig+0x1b8>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d90c      	bls.n	8005818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fe:	4b65      	ldr	r3, [pc, #404]	; (8005994 <HAL_RCC_ClockConfig+0x1b8>)
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005806:	4b63      	ldr	r3, [pc, #396]	; (8005994 <HAL_RCC_ClockConfig+0x1b8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d001      	beq.n	8005818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0b8      	b.n	800598a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d020      	beq.n	8005866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005830:	4b59      	ldr	r3, [pc, #356]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4a58      	ldr	r2, [pc, #352]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800583a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005848:	4b53      	ldr	r3, [pc, #332]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4a52      	ldr	r2, [pc, #328]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005854:	4b50      	ldr	r3, [pc, #320]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	494d      	ldr	r1, [pc, #308]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d044      	beq.n	80058fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d107      	bne.n	800588a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587a:	4b47      	ldr	r3, [pc, #284]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d119      	bne.n	80058ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e07f      	b.n	800598a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d003      	beq.n	800589a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005896:	2b03      	cmp	r3, #3
 8005898:	d107      	bne.n	80058aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800589a:	4b3f      	ldr	r3, [pc, #252]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e06f      	b.n	800598a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058aa:	4b3b      	ldr	r3, [pc, #236]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e067      	b.n	800598a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ba:	4b37      	ldr	r3, [pc, #220]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f023 0203 	bic.w	r2, r3, #3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	4934      	ldr	r1, [pc, #208]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058cc:	f7fc ffee 	bl	80028ac <HAL_GetTick>
 80058d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d2:	e00a      	b.n	80058ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d4:	f7fc ffea 	bl	80028ac <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e04f      	b.n	800598a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ea:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 020c 	and.w	r2, r3, #12
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d1eb      	bne.n	80058d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <HAL_RCC_ClockConfig+0x1b8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d20c      	bcs.n	8005924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590a:	4b22      	ldr	r3, [pc, #136]	; (8005994 <HAL_RCC_ClockConfig+0x1b8>)
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005912:	4b20      	ldr	r3, [pc, #128]	; (8005994 <HAL_RCC_ClockConfig+0x1b8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d001      	beq.n	8005924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e032      	b.n	800598a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005930:	4b19      	ldr	r3, [pc, #100]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4916      	ldr	r1, [pc, #88]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	490e      	ldr	r1, [pc, #56]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	4313      	orrs	r3, r2
 8005960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005962:	f000 f821 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8005966:	4601      	mov	r1, r0
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	4a0a      	ldr	r2, [pc, #40]	; (800599c <HAL_RCC_ClockConfig+0x1c0>)
 8005974:	5cd3      	ldrb	r3, [r2, r3]
 8005976:	fa21 f303 	lsr.w	r3, r1, r3
 800597a:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 800597c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800597e:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f7fc ff4e 	bl	8002824 <HAL_InitTick>

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40023c00 	.word	0x40023c00
 8005998:	40023800 	.word	0x40023800
 800599c:	080129f4 	.word	0x080129f4
 80059a0:	20000060 	.word	0x20000060
 80059a4:	20000064 	.word	0x20000064

080059a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	607b      	str	r3, [r7, #4]
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	2300      	movs	r3, #0
 80059b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059be:	4b50      	ldr	r3, [pc, #320]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x158>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d007      	beq.n	80059da <HAL_RCC_GetSysClockFreq+0x32>
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d008      	beq.n	80059e0 <HAL_RCC_GetSysClockFreq+0x38>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 808d 	bne.w	8005aee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059d4:	4b4b      	ldr	r3, [pc, #300]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x15c>)
 80059d6:	60bb      	str	r3, [r7, #8]
       break;
 80059d8:	e08c      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059da:	4b4b      	ldr	r3, [pc, #300]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x160>)
 80059dc:	60bb      	str	r3, [r7, #8]
      break;
 80059de:	e089      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059e0:	4b47      	ldr	r3, [pc, #284]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x158>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ea:	4b45      	ldr	r3, [pc, #276]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x158>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d023      	beq.n	8005a3e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f6:	4b42      	ldr	r3, [pc, #264]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x158>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	099b      	lsrs	r3, r3, #6
 80059fc:	f04f 0400 	mov.w	r4, #0
 8005a00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	ea03 0501 	and.w	r5, r3, r1
 8005a0c:	ea04 0602 	and.w	r6, r4, r2
 8005a10:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a12:	fb02 f106 	mul.w	r1, r2, r6
 8005a16:	2200      	movs	r2, #0
 8005a18:	fb02 f205 	mul.w	r2, r2, r5
 8005a1c:	440a      	add	r2, r1
 8005a1e:	493a      	ldr	r1, [pc, #232]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a20:	fba5 0101 	umull	r0, r1, r5, r1
 8005a24:	1853      	adds	r3, r2, r1
 8005a26:	4619      	mov	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f04f 0400 	mov.w	r4, #0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4623      	mov	r3, r4
 8005a32:	f7fb f931 	bl	8000c98 <__aeabi_uldivmod>
 8005a36:	4603      	mov	r3, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e049      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a3e:	4b30      	ldr	r3, [pc, #192]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	099b      	lsrs	r3, r3, #6
 8005a44:	f04f 0400 	mov.w	r4, #0
 8005a48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	ea03 0501 	and.w	r5, r3, r1
 8005a54:	ea04 0602 	and.w	r6, r4, r2
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4632      	mov	r2, r6
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	f04f 0400 	mov.w	r4, #0
 8005a64:	0154      	lsls	r4, r2, #5
 8005a66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a6a:	014b      	lsls	r3, r1, #5
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4622      	mov	r2, r4
 8005a70:	1b49      	subs	r1, r1, r5
 8005a72:	eb62 0206 	sbc.w	r2, r2, r6
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	f04f 0400 	mov.w	r4, #0
 8005a7e:	0194      	lsls	r4, r2, #6
 8005a80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a84:	018b      	lsls	r3, r1, #6
 8005a86:	1a5b      	subs	r3, r3, r1
 8005a88:	eb64 0402 	sbc.w	r4, r4, r2
 8005a8c:	f04f 0100 	mov.w	r1, #0
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	00e2      	lsls	r2, r4, #3
 8005a96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a9a:	00d9      	lsls	r1, r3, #3
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4614      	mov	r4, r2
 8005aa0:	195b      	adds	r3, r3, r5
 8005aa2:	eb44 0406 	adc.w	r4, r4, r6
 8005aa6:	f04f 0100 	mov.w	r1, #0
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	02a2      	lsls	r2, r4, #10
 8005ab0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005ab4:	0299      	lsls	r1, r3, #10
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	4621      	mov	r1, r4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f04f 0400 	mov.w	r4, #0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	f7fb f8e6 	bl	8000c98 <__aeabi_uldivmod>
 8005acc:	4603      	mov	r3, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	0c1b      	lsrs	r3, r3, #16
 8005ad8:	f003 0303 	and.w	r3, r3, #3
 8005adc:	3301      	adds	r3, #1
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	60bb      	str	r3, [r7, #8]
      break;
 8005aec:	e002      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aee:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005af0:	60bb      	str	r3, [r7, #8]
      break;
 8005af2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005af4:	68bb      	ldr	r3, [r7, #8]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800
 8005b04:	00f42400 	.word	0x00f42400
 8005b08:	017d7840 	.word	0x017d7840

08005b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b10:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000060 	.word	0x20000060

08005b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b28:	f7ff fff0 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b2c:	4601      	mov	r1, r0
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	0a9b      	lsrs	r3, r3, #10
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b3a:	5cd3      	ldrb	r3, [r2, r3]
 8005b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40023800 	.word	0x40023800
 8005b48:	08012a04 	.word	0x08012a04

08005b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b50:	f7ff ffdc 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b54:	4601      	mov	r1, r0
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	0b5b      	lsrs	r3, r3, #13
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4a03      	ldr	r2, [pc, #12]	; (8005b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b62:	5cd3      	ldrb	r3, [r2, r3]
 8005b64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	08012a04 	.word	0x08012a04

08005b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e01d      	b.n	8005bc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fc fca6 	bl	80024ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f000 fb4e 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e01d      	b.n	8005c18 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d106      	bne.n	8005bf6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f815 	bl	8005c20 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f000 fb23 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e01d      	b.n	8005c82 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f815 	bl	8005c8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f000 faee 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fd74 	bl	80067a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <HAL_TIM_PWM_Start+0x60>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d107      	bne.n	8005cd2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b06      	cmp	r3, #6
 8005ce2:	d007      	beq.n	8005cf4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000

08005d04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e083      	b.n	8005e20 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7fc fbff 	bl	8002530 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2202      	movs	r2, #2
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d48:	f023 0307 	bic.w	r3, r3, #7
 8005d4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f000 fa7b 	bl	8006254 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	4313      	orrs	r3, r2
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005da4:	f023 030c 	bic.w	r3, r3, #12
 8005da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	011a      	lsls	r2, r3, #4
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	031b      	lsls	r3, r3, #12
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005dea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	4313      	orrs	r3, r2
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <HAL_TIM_Encoder_Start+0x16>
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d008      	beq.n	8005e4e <HAL_TIM_Encoder_Start+0x26>
 8005e3c:	e00f      	b.n	8005e5e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2201      	movs	r2, #1
 8005e44:	2100      	movs	r1, #0
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fcaa 	bl	80067a0 <TIM_CCxChannelCmd>
      break;
 8005e4c:	e016      	b.n	8005e7c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2201      	movs	r2, #1
 8005e54:	2104      	movs	r1, #4
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fca2 	bl	80067a0 <TIM_CCxChannelCmd>
      break;
 8005e5c:	e00e      	b.n	8005e7c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2201      	movs	r2, #1
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fc9a 	bl	80067a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2201      	movs	r2, #1
 8005e72:	2104      	movs	r1, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fc93 	bl	80067a0 <TIM_CCxChannelCmd>
      break;
 8005e7a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e04e      	b.n	8005f50 <HAL_TIM_OC_ConfigChannel+0xb8>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b0c      	cmp	r3, #12
 8005ec6:	d839      	bhi.n	8005f3c <HAL_TIM_OC_ConfigChannel+0xa4>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <HAL_TIM_OC_ConfigChannel+0x38>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005f05 	.word	0x08005f05
 8005ed4:	08005f3d 	.word	0x08005f3d
 8005ed8:	08005f3d 	.word	0x08005f3d
 8005edc:	08005f3d 	.word	0x08005f3d
 8005ee0:	08005f13 	.word	0x08005f13
 8005ee4:	08005f3d 	.word	0x08005f3d
 8005ee8:	08005f3d 	.word	0x08005f3d
 8005eec:	08005f3d 	.word	0x08005f3d
 8005ef0:	08005f21 	.word	0x08005f21
 8005ef4:	08005f3d 	.word	0x08005f3d
 8005ef8:	08005f3d 	.word	0x08005f3d
 8005efc:	08005f3d 	.word	0x08005f3d
 8005f00:	08005f2f 	.word	0x08005f2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fa22 	bl	8006354 <TIM_OC1_SetConfig>
      break;
 8005f10:	e015      	b.n	8005f3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fa81 	bl	8006420 <TIM_OC2_SetConfig>
      break;
 8005f1e:	e00e      	b.n	8005f3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fae6 	bl	80064f8 <TIM_OC3_SetConfig>
      break;
 8005f2c:	e007      	b.n	8005f3e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fb49 	bl	80065cc <TIM_OC4_SetConfig>
      break;
 8005f3a:	e000      	b.n	8005f3e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005f3c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e0b4      	b.n	80060dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b0c      	cmp	r3, #12
 8005f86:	f200 809f 	bhi.w	80060c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fc5 	.word	0x08005fc5
 8005f94:	080060c9 	.word	0x080060c9
 8005f98:	080060c9 	.word	0x080060c9
 8005f9c:	080060c9 	.word	0x080060c9
 8005fa0:	08006005 	.word	0x08006005
 8005fa4:	080060c9 	.word	0x080060c9
 8005fa8:	080060c9 	.word	0x080060c9
 8005fac:	080060c9 	.word	0x080060c9
 8005fb0:	08006047 	.word	0x08006047
 8005fb4:	080060c9 	.word	0x080060c9
 8005fb8:	080060c9 	.word	0x080060c9
 8005fbc:	080060c9 	.word	0x080060c9
 8005fc0:	08006087 	.word	0x08006087
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f9c2 	bl	8006354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0208 	orr.w	r2, r2, #8
 8005fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0204 	bic.w	r2, r2, #4
 8005fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6999      	ldr	r1, [r3, #24]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	619a      	str	r2, [r3, #24]
      break;
 8006002:	e062      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fa08 	bl	8006420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800601e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6999      	ldr	r1, [r3, #24]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	021a      	lsls	r2, r3, #8
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	619a      	str	r2, [r3, #24]
      break;
 8006044:	e041      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fa53 	bl	80064f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0208 	orr.w	r2, r2, #8
 8006060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0204 	bic.w	r2, r2, #4
 8006070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69d9      	ldr	r1, [r3, #28]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	61da      	str	r2, [r3, #28]
      break;
 8006084:	e021      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fa9d 	bl	80065cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69d9      	ldr	r1, [r3, #28]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	021a      	lsls	r2, r3, #8
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	61da      	str	r2, [r3, #28]
      break;
 80060c6:	e000      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80060c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_TIM_ConfigClockSource+0x18>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0a6      	b.n	800624a <HAL_TIM_ConfigClockSource+0x166>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800611a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006122:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d067      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x120>
 8006134:	2b40      	cmp	r3, #64	; 0x40
 8006136:	d80b      	bhi.n	8006150 <HAL_TIM_ConfigClockSource+0x6c>
 8006138:	2b10      	cmp	r3, #16
 800613a:	d073      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x140>
 800613c:	2b10      	cmp	r3, #16
 800613e:	d802      	bhi.n	8006146 <HAL_TIM_ConfigClockSource+0x62>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d06f      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006144:	e078      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006146:	2b20      	cmp	r3, #32
 8006148:	d06c      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x140>
 800614a:	2b30      	cmp	r3, #48	; 0x30
 800614c:	d06a      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800614e:	e073      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006150:	2b70      	cmp	r3, #112	; 0x70
 8006152:	d00d      	beq.n	8006170 <HAL_TIM_ConfigClockSource+0x8c>
 8006154:	2b70      	cmp	r3, #112	; 0x70
 8006156:	d804      	bhi.n	8006162 <HAL_TIM_ConfigClockSource+0x7e>
 8006158:	2b50      	cmp	r3, #80	; 0x50
 800615a:	d033      	beq.n	80061c4 <HAL_TIM_ConfigClockSource+0xe0>
 800615c:	2b60      	cmp	r3, #96	; 0x60
 800615e:	d041      	beq.n	80061e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006160:	e06a      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006166:	d066      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x152>
 8006168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800616c:	d017      	beq.n	800619e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800616e:	e063      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6899      	ldr	r1, [r3, #8]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f000 faee 	bl	8006760 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006192:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	609a      	str	r2, [r3, #8]
      break;
 800619c:	e04c      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6899      	ldr	r1, [r3, #8]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f000 fad7 	bl	8006760 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061c0:	609a      	str	r2, [r3, #8]
      break;
 80061c2:	e039      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	6859      	ldr	r1, [r3, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	461a      	mov	r2, r3
 80061d2:	f000 fa4b 	bl	800666c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2150      	movs	r1, #80	; 0x50
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 faa4 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 80061e2:	e029      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6859      	ldr	r1, [r3, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	461a      	mov	r2, r3
 80061f2:	f000 fa6a 	bl	80066ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2160      	movs	r1, #96	; 0x60
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fa94 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 8006202:	e019      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6859      	ldr	r1, [r3, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	461a      	mov	r2, r3
 8006212:	f000 fa2b 	bl	800666c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2140      	movs	r1, #64	; 0x40
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fa84 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 8006222:	e009      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f000 fa7b 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 8006234:	e000      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a34      	ldr	r2, [pc, #208]	; (8006338 <TIM_Base_SetConfig+0xe4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00f      	beq.n	800628c <TIM_Base_SetConfig+0x38>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006272:	d00b      	beq.n	800628c <TIM_Base_SetConfig+0x38>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a31      	ldr	r2, [pc, #196]	; (800633c <TIM_Base_SetConfig+0xe8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d007      	beq.n	800628c <TIM_Base_SetConfig+0x38>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a30      	ldr	r2, [pc, #192]	; (8006340 <TIM_Base_SetConfig+0xec>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <TIM_Base_SetConfig+0x38>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a2f      	ldr	r2, [pc, #188]	; (8006344 <TIM_Base_SetConfig+0xf0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d108      	bne.n	800629e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a25      	ldr	r2, [pc, #148]	; (8006338 <TIM_Base_SetConfig+0xe4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01b      	beq.n	80062de <TIM_Base_SetConfig+0x8a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ac:	d017      	beq.n	80062de <TIM_Base_SetConfig+0x8a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a22      	ldr	r2, [pc, #136]	; (800633c <TIM_Base_SetConfig+0xe8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <TIM_Base_SetConfig+0x8a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a21      	ldr	r2, [pc, #132]	; (8006340 <TIM_Base_SetConfig+0xec>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00f      	beq.n	80062de <TIM_Base_SetConfig+0x8a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a20      	ldr	r2, [pc, #128]	; (8006344 <TIM_Base_SetConfig+0xf0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d00b      	beq.n	80062de <TIM_Base_SetConfig+0x8a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <TIM_Base_SetConfig+0xf4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d007      	beq.n	80062de <TIM_Base_SetConfig+0x8a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1e      	ldr	r2, [pc, #120]	; (800634c <TIM_Base_SetConfig+0xf8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d003      	beq.n	80062de <TIM_Base_SetConfig+0x8a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a1d      	ldr	r2, [pc, #116]	; (8006350 <TIM_Base_SetConfig+0xfc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d108      	bne.n	80062f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a08      	ldr	r2, [pc, #32]	; (8006338 <TIM_Base_SetConfig+0xe4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d103      	bne.n	8006324 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	615a      	str	r2, [r3, #20]
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40010000 	.word	0x40010000
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	40000c00 	.word	0x40000c00
 8006348:	40014000 	.word	0x40014000
 800634c:	40014400 	.word	0x40014400
 8006350:	40014800 	.word	0x40014800

08006354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f023 0201 	bic.w	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0303 	bic.w	r3, r3, #3
 800638a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f023 0302 	bic.w	r3, r3, #2
 800639c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a1c      	ldr	r2, [pc, #112]	; (800641c <TIM_OC1_SetConfig+0xc8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d10c      	bne.n	80063ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f023 0308 	bic.w	r3, r3, #8
 80063b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f023 0304 	bic.w	r3, r3, #4
 80063c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a13      	ldr	r2, [pc, #76]	; (800641c <TIM_OC1_SetConfig+0xc8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d111      	bne.n	80063f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	621a      	str	r2, [r3, #32]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40010000 	.word	0x40010000

08006420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f023 0210 	bic.w	r2, r3, #16
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 0320 	bic.w	r3, r3, #32
 800646a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <TIM_OC2_SetConfig+0xd4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10d      	bne.n	800649c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800649a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a15      	ldr	r2, [pc, #84]	; (80064f4 <TIM_OC2_SetConfig+0xd4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d113      	bne.n	80064cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40010000 	.word	0x40010000

080064f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0303 	bic.w	r3, r3, #3
 800652e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <TIM_OC3_SetConfig+0xd0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d10d      	bne.n	8006572 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800655c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	021b      	lsls	r3, r3, #8
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a14      	ldr	r2, [pc, #80]	; (80065c8 <TIM_OC3_SetConfig+0xd0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d113      	bne.n	80065a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	621a      	str	r2, [r3, #32]
}
 80065bc:	bf00      	nop
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	40010000 	.word	0x40010000

080065cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	031b      	lsls	r3, r3, #12
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a10      	ldr	r2, [pc, #64]	; (8006668 <TIM_OC4_SetConfig+0x9c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d109      	bne.n	8006640 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	019b      	lsls	r3, r3, #6
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000

0800666c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f023 030a 	bic.w	r3, r3, #10
 80066a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f023 0210 	bic.w	r2, r3, #16
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	031b      	lsls	r3, r3, #12
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006706:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	f043 0307 	orr.w	r3, r3, #7
 800674c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	609a      	str	r2, [r3, #8]
}
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800677a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	021a      	lsls	r2, r3, #8
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	431a      	orrs	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4313      	orrs	r3, r2
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	609a      	str	r2, [r3, #8]
}
 8006794:	bf00      	nop
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2201      	movs	r2, #1
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1a      	ldr	r2, [r3, #32]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	401a      	ands	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a1a      	ldr	r2, [r3, #32]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	fa01 f303 	lsl.w	r3, r1, r3
 80067d8:	431a      	orrs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2204      	movs	r2, #4
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 f8df 	bl	80069c0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006810:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b06      	cmp	r3, #6
 8006822:	d007      	beq.n	8006834 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006854:	2302      	movs	r3, #2
 8006856:	e050      	b.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1c      	ldr	r2, [pc, #112]	; (8006908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d018      	beq.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a4:	d013      	beq.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a18      	ldr	r2, [pc, #96]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00e      	beq.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a16      	ldr	r2, [pc, #88]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d009      	beq.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a15      	ldr	r2, [pc, #84]	; (8006914 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d004      	beq.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a13      	ldr	r2, [pc, #76]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d10c      	bne.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40010000 	.word	0x40010000
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800
 8006914:	40000c00 	.word	0x40000c00
 8006918:	40014000 	.word	0x40014000

0800691c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006934:	2302      	movs	r3, #2
 8006936:	e03d      	b.n	80069b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2204      	movs	r2, #4
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	401a      	ands	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1a      	ldr	r2, [r3, #32]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	fa01 f303 	lsl.w	r3, r1, r3
 80069f8:	431a      	orrs	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e03f      	b.n	8006a9c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d106      	bne.n	8006a36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fb fe5b 	bl	80026ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2224      	movs	r2, #36	; 0x24
 8006a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fab4 	bl	8006fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d140      	bne.n	8006b40 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_UART_Receive_IT+0x26>
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e039      	b.n	8006b42 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_UART_Receive_IT+0x38>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e032      	b.n	8006b42 <HAL_UART_Receive_IT+0x9e>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	88fa      	ldrh	r2, [r7, #6]
 8006aee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	88fa      	ldrh	r2, [r7, #6]
 8006af4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2222      	movs	r2, #34	; 0x22
 8006b00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b1a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0220 	orr.w	r2, r2, #32
 8006b3a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e000      	b.n	8006b42 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
  }
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10d      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d008      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x52>
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f98c 	bl	8006eb8 <UART_Receive_IT>
      return;
 8006ba0:	e0d1      	b.n	8006d46 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80b0 	beq.w	8006d0a <HAL_UART_IRQHandler+0x1ba>
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x70>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80a5 	beq.w	8006d0a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <HAL_UART_IRQHandler+0x90>
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd8:	f043 0201 	orr.w	r2, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <HAL_UART_IRQHandler+0xb0>
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf8:	f043 0202 	orr.w	r2, r3, #2
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <HAL_UART_IRQHandler+0xd0>
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	f043 0204 	orr.w	r2, r3, #4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00f      	beq.n	8006c4a <HAL_UART_IRQHandler+0xfa>
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <HAL_UART_IRQHandler+0xee>
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d005      	beq.n	8006c4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c42:	f043 0208 	orr.w	r2, r3, #8
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d078      	beq.n	8006d44 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d007      	beq.n	8006c6c <HAL_UART_IRQHandler+0x11c>
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f926 	bl	8006eb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	bf0c      	ite	eq
 8006c7a:	2301      	moveq	r3, #1
 8006c7c:	2300      	movne	r3, #0
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <HAL_UART_IRQHandler+0x144>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d031      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f86f 	bl	8006d78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b40      	cmp	r3, #64	; 0x40
 8006ca6:	d123      	bne.n	8006cf0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	695a      	ldr	r2, [r3, #20]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d013      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc4:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <HAL_UART_IRQHandler+0x1fc>)
 8006cc6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fc fd6d 	bl	80037ac <HAL_DMA_Abort_IT>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d016      	beq.n	8006d06 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce6:	e00e      	b.n	8006d06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f83b 	bl	8006d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cee:	e00a      	b.n	8006d06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f837 	bl	8006d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf6:	e006      	b.n	8006d06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f833 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006d04:	e01e      	b.n	8006d44 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d06:	bf00      	nop
    return;
 8006d08:	e01c      	b.n	8006d44 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d008      	beq.n	8006d26 <HAL_UART_IRQHandler+0x1d6>
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f85c 	bl	8006ddc <UART_Transmit_IT>
    return;
 8006d24:	e00f      	b.n	8006d46 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <HAL_UART_IRQHandler+0x1f6>
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d005      	beq.n	8006d46 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f8a4 	bl	8006e88 <UART_EndTransmit_IT>
    return;
 8006d40:	bf00      	nop
 8006d42:	e000      	b.n	8006d46 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006d44:	bf00      	nop
  }
}
 8006d46:	3720      	adds	r7, #32
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	08006db5 	.word	0x08006db5

08006d50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	695a      	ldr	r2, [r3, #20]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7ff ffc8 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b21      	cmp	r3, #33	; 0x21
 8006dee:	d144      	bne.n	8006e7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df8:	d11a      	bne.n	8006e30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d105      	bne.n	8006e24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	1c9a      	adds	r2, r3, #2
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	621a      	str	r2, [r3, #32]
 8006e22:	e00e      	b.n	8006e42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	621a      	str	r2, [r3, #32]
 8006e2e:	e008      	b.n	8006e42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	1c59      	adds	r1, r3, #1
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6211      	str	r1, [r2, #32]
 8006e3a:	781a      	ldrb	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10f      	bne.n	8006e76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e000      	b.n	8006e7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e7a:	2302      	movs	r3, #2
  }
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff ff51 	bl	8006d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b22      	cmp	r3, #34	; 0x22
 8006eca:	d171      	bne.n	8006fb0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed4:	d123      	bne.n	8006f1e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10e      	bne.n	8006f02 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	1c9a      	adds	r2, r3, #2
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	629a      	str	r2, [r3, #40]	; 0x28
 8006f00:	e029      	b.n	8006f56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f1c:	e01b      	b.n	8006f56 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6858      	ldr	r0, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	1c59      	adds	r1, r3, #1
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6291      	str	r1, [r2, #40]	; 0x28
 8006f36:	b2c2      	uxtb	r2, r0
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	e00c      	b.n	8006f56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f48:	1c58      	adds	r0, r3, #1
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	6288      	str	r0, [r1, #40]	; 0x28
 8006f4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4619      	mov	r1, r3
 8006f64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d120      	bne.n	8006fac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0220 	bic.w	r2, r2, #32
 8006f78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695a      	ldr	r2, [r3, #20]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0201 	bic.w	r2, r2, #1
 8006f98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fa f984 	bl	80012b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e002      	b.n	8006fb2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e000      	b.n	8006fb2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006ffe:	f023 030c 	bic.w	r3, r3, #12
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	430b      	orrs	r3, r1
 800700a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800702a:	f040 818b 	bne.w	8007344 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4ac1      	ldr	r2, [pc, #772]	; (8007338 <UART_SetConfig+0x37c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d005      	beq.n	8007044 <UART_SetConfig+0x88>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4abf      	ldr	r2, [pc, #764]	; (800733c <UART_SetConfig+0x380>)
 800703e:	4293      	cmp	r3, r2
 8007040:	f040 80bd 	bne.w	80071be <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007044:	f7fe fd82 	bl	8005b4c <HAL_RCC_GetPCLK2Freq>
 8007048:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	461d      	mov	r5, r3
 800704e:	f04f 0600 	mov.w	r6, #0
 8007052:	46a8      	mov	r8, r5
 8007054:	46b1      	mov	r9, r6
 8007056:	eb18 0308 	adds.w	r3, r8, r8
 800705a:	eb49 0409 	adc.w	r4, r9, r9
 800705e:	4698      	mov	r8, r3
 8007060:	46a1      	mov	r9, r4
 8007062:	eb18 0805 	adds.w	r8, r8, r5
 8007066:	eb49 0906 	adc.w	r9, r9, r6
 800706a:	f04f 0100 	mov.w	r1, #0
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007076:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800707a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800707e:	4688      	mov	r8, r1
 8007080:	4691      	mov	r9, r2
 8007082:	eb18 0005 	adds.w	r0, r8, r5
 8007086:	eb49 0106 	adc.w	r1, r9, r6
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	461d      	mov	r5, r3
 8007090:	f04f 0600 	mov.w	r6, #0
 8007094:	196b      	adds	r3, r5, r5
 8007096:	eb46 0406 	adc.w	r4, r6, r6
 800709a:	461a      	mov	r2, r3
 800709c:	4623      	mov	r3, r4
 800709e:	f7f9 fdfb 	bl	8000c98 <__aeabi_uldivmod>
 80070a2:	4603      	mov	r3, r0
 80070a4:	460c      	mov	r4, r1
 80070a6:	461a      	mov	r2, r3
 80070a8:	4ba5      	ldr	r3, [pc, #660]	; (8007340 <UART_SetConfig+0x384>)
 80070aa:	fba3 2302 	umull	r2, r3, r3, r2
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	461d      	mov	r5, r3
 80070b8:	f04f 0600 	mov.w	r6, #0
 80070bc:	46a9      	mov	r9, r5
 80070be:	46b2      	mov	sl, r6
 80070c0:	eb19 0309 	adds.w	r3, r9, r9
 80070c4:	eb4a 040a 	adc.w	r4, sl, sl
 80070c8:	4699      	mov	r9, r3
 80070ca:	46a2      	mov	sl, r4
 80070cc:	eb19 0905 	adds.w	r9, r9, r5
 80070d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80070d4:	f04f 0100 	mov.w	r1, #0
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070e8:	4689      	mov	r9, r1
 80070ea:	4692      	mov	sl, r2
 80070ec:	eb19 0005 	adds.w	r0, r9, r5
 80070f0:	eb4a 0106 	adc.w	r1, sl, r6
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	461d      	mov	r5, r3
 80070fa:	f04f 0600 	mov.w	r6, #0
 80070fe:	196b      	adds	r3, r5, r5
 8007100:	eb46 0406 	adc.w	r4, r6, r6
 8007104:	461a      	mov	r2, r3
 8007106:	4623      	mov	r3, r4
 8007108:	f7f9 fdc6 	bl	8000c98 <__aeabi_uldivmod>
 800710c:	4603      	mov	r3, r0
 800710e:	460c      	mov	r4, r1
 8007110:	461a      	mov	r2, r3
 8007112:	4b8b      	ldr	r3, [pc, #556]	; (8007340 <UART_SetConfig+0x384>)
 8007114:	fba3 1302 	umull	r1, r3, r3, r2
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	2164      	movs	r1, #100	; 0x64
 800711c:	fb01 f303 	mul.w	r3, r1, r3
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	3332      	adds	r3, #50	; 0x32
 8007126:	4a86      	ldr	r2, [pc, #536]	; (8007340 <UART_SetConfig+0x384>)
 8007128:	fba2 2303 	umull	r2, r3, r2, r3
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007134:	4498      	add	r8, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	461d      	mov	r5, r3
 800713a:	f04f 0600 	mov.w	r6, #0
 800713e:	46a9      	mov	r9, r5
 8007140:	46b2      	mov	sl, r6
 8007142:	eb19 0309 	adds.w	r3, r9, r9
 8007146:	eb4a 040a 	adc.w	r4, sl, sl
 800714a:	4699      	mov	r9, r3
 800714c:	46a2      	mov	sl, r4
 800714e:	eb19 0905 	adds.w	r9, r9, r5
 8007152:	eb4a 0a06 	adc.w	sl, sl, r6
 8007156:	f04f 0100 	mov.w	r1, #0
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007162:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007166:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800716a:	4689      	mov	r9, r1
 800716c:	4692      	mov	sl, r2
 800716e:	eb19 0005 	adds.w	r0, r9, r5
 8007172:	eb4a 0106 	adc.w	r1, sl, r6
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	461d      	mov	r5, r3
 800717c:	f04f 0600 	mov.w	r6, #0
 8007180:	196b      	adds	r3, r5, r5
 8007182:	eb46 0406 	adc.w	r4, r6, r6
 8007186:	461a      	mov	r2, r3
 8007188:	4623      	mov	r3, r4
 800718a:	f7f9 fd85 	bl	8000c98 <__aeabi_uldivmod>
 800718e:	4603      	mov	r3, r0
 8007190:	460c      	mov	r4, r1
 8007192:	461a      	mov	r2, r3
 8007194:	4b6a      	ldr	r3, [pc, #424]	; (8007340 <UART_SetConfig+0x384>)
 8007196:	fba3 1302 	umull	r1, r3, r3, r2
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	2164      	movs	r1, #100	; 0x64
 800719e:	fb01 f303 	mul.w	r3, r1, r3
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	3332      	adds	r3, #50	; 0x32
 80071a8:	4a65      	ldr	r2, [pc, #404]	; (8007340 <UART_SetConfig+0x384>)
 80071aa:	fba2 2303 	umull	r2, r3, r2, r3
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	f003 0207 	and.w	r2, r3, #7
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4442      	add	r2, r8
 80071ba:	609a      	str	r2, [r3, #8]
 80071bc:	e26f      	b.n	800769e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071be:	f7fe fcb1 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 80071c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	461d      	mov	r5, r3
 80071c8:	f04f 0600 	mov.w	r6, #0
 80071cc:	46a8      	mov	r8, r5
 80071ce:	46b1      	mov	r9, r6
 80071d0:	eb18 0308 	adds.w	r3, r8, r8
 80071d4:	eb49 0409 	adc.w	r4, r9, r9
 80071d8:	4698      	mov	r8, r3
 80071da:	46a1      	mov	r9, r4
 80071dc:	eb18 0805 	adds.w	r8, r8, r5
 80071e0:	eb49 0906 	adc.w	r9, r9, r6
 80071e4:	f04f 0100 	mov.w	r1, #0
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071f8:	4688      	mov	r8, r1
 80071fa:	4691      	mov	r9, r2
 80071fc:	eb18 0005 	adds.w	r0, r8, r5
 8007200:	eb49 0106 	adc.w	r1, r9, r6
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	461d      	mov	r5, r3
 800720a:	f04f 0600 	mov.w	r6, #0
 800720e:	196b      	adds	r3, r5, r5
 8007210:	eb46 0406 	adc.w	r4, r6, r6
 8007214:	461a      	mov	r2, r3
 8007216:	4623      	mov	r3, r4
 8007218:	f7f9 fd3e 	bl	8000c98 <__aeabi_uldivmod>
 800721c:	4603      	mov	r3, r0
 800721e:	460c      	mov	r4, r1
 8007220:	461a      	mov	r2, r3
 8007222:	4b47      	ldr	r3, [pc, #284]	; (8007340 <UART_SetConfig+0x384>)
 8007224:	fba3 2302 	umull	r2, r3, r3, r2
 8007228:	095b      	lsrs	r3, r3, #5
 800722a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	461d      	mov	r5, r3
 8007232:	f04f 0600 	mov.w	r6, #0
 8007236:	46a9      	mov	r9, r5
 8007238:	46b2      	mov	sl, r6
 800723a:	eb19 0309 	adds.w	r3, r9, r9
 800723e:	eb4a 040a 	adc.w	r4, sl, sl
 8007242:	4699      	mov	r9, r3
 8007244:	46a2      	mov	sl, r4
 8007246:	eb19 0905 	adds.w	r9, r9, r5
 800724a:	eb4a 0a06 	adc.w	sl, sl, r6
 800724e:	f04f 0100 	mov.w	r1, #0
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800725a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800725e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007262:	4689      	mov	r9, r1
 8007264:	4692      	mov	sl, r2
 8007266:	eb19 0005 	adds.w	r0, r9, r5
 800726a:	eb4a 0106 	adc.w	r1, sl, r6
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	461d      	mov	r5, r3
 8007274:	f04f 0600 	mov.w	r6, #0
 8007278:	196b      	adds	r3, r5, r5
 800727a:	eb46 0406 	adc.w	r4, r6, r6
 800727e:	461a      	mov	r2, r3
 8007280:	4623      	mov	r3, r4
 8007282:	f7f9 fd09 	bl	8000c98 <__aeabi_uldivmod>
 8007286:	4603      	mov	r3, r0
 8007288:	460c      	mov	r4, r1
 800728a:	461a      	mov	r2, r3
 800728c:	4b2c      	ldr	r3, [pc, #176]	; (8007340 <UART_SetConfig+0x384>)
 800728e:	fba3 1302 	umull	r1, r3, r3, r2
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	2164      	movs	r1, #100	; 0x64
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	3332      	adds	r3, #50	; 0x32
 80072a0:	4a27      	ldr	r2, [pc, #156]	; (8007340 <UART_SetConfig+0x384>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072ae:	4498      	add	r8, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	461d      	mov	r5, r3
 80072b4:	f04f 0600 	mov.w	r6, #0
 80072b8:	46a9      	mov	r9, r5
 80072ba:	46b2      	mov	sl, r6
 80072bc:	eb19 0309 	adds.w	r3, r9, r9
 80072c0:	eb4a 040a 	adc.w	r4, sl, sl
 80072c4:	4699      	mov	r9, r3
 80072c6:	46a2      	mov	sl, r4
 80072c8:	eb19 0905 	adds.w	r9, r9, r5
 80072cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80072d0:	f04f 0100 	mov.w	r1, #0
 80072d4:	f04f 0200 	mov.w	r2, #0
 80072d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072e4:	4689      	mov	r9, r1
 80072e6:	4692      	mov	sl, r2
 80072e8:	eb19 0005 	adds.w	r0, r9, r5
 80072ec:	eb4a 0106 	adc.w	r1, sl, r6
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	461d      	mov	r5, r3
 80072f6:	f04f 0600 	mov.w	r6, #0
 80072fa:	196b      	adds	r3, r5, r5
 80072fc:	eb46 0406 	adc.w	r4, r6, r6
 8007300:	461a      	mov	r2, r3
 8007302:	4623      	mov	r3, r4
 8007304:	f7f9 fcc8 	bl	8000c98 <__aeabi_uldivmod>
 8007308:	4603      	mov	r3, r0
 800730a:	460c      	mov	r4, r1
 800730c:	461a      	mov	r2, r3
 800730e:	4b0c      	ldr	r3, [pc, #48]	; (8007340 <UART_SetConfig+0x384>)
 8007310:	fba3 1302 	umull	r1, r3, r3, r2
 8007314:	095b      	lsrs	r3, r3, #5
 8007316:	2164      	movs	r1, #100	; 0x64
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	3332      	adds	r3, #50	; 0x32
 8007322:	4a07      	ldr	r2, [pc, #28]	; (8007340 <UART_SetConfig+0x384>)
 8007324:	fba2 2303 	umull	r2, r3, r2, r3
 8007328:	095b      	lsrs	r3, r3, #5
 800732a:	f003 0207 	and.w	r2, r3, #7
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4442      	add	r2, r8
 8007334:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007336:	e1b2      	b.n	800769e <UART_SetConfig+0x6e2>
 8007338:	40011000 	.word	0x40011000
 800733c:	40011400 	.word	0x40011400
 8007340:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4ad7      	ldr	r2, [pc, #860]	; (80076a8 <UART_SetConfig+0x6ec>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d005      	beq.n	800735a <UART_SetConfig+0x39e>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4ad6      	ldr	r2, [pc, #856]	; (80076ac <UART_SetConfig+0x6f0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	f040 80d1 	bne.w	80074fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800735a:	f7fe fbf7 	bl	8005b4c <HAL_RCC_GetPCLK2Freq>
 800735e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	469a      	mov	sl, r3
 8007364:	f04f 0b00 	mov.w	fp, #0
 8007368:	46d0      	mov	r8, sl
 800736a:	46d9      	mov	r9, fp
 800736c:	eb18 0308 	adds.w	r3, r8, r8
 8007370:	eb49 0409 	adc.w	r4, r9, r9
 8007374:	4698      	mov	r8, r3
 8007376:	46a1      	mov	r9, r4
 8007378:	eb18 080a 	adds.w	r8, r8, sl
 800737c:	eb49 090b 	adc.w	r9, r9, fp
 8007380:	f04f 0100 	mov.w	r1, #0
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800738c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007390:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007394:	4688      	mov	r8, r1
 8007396:	4691      	mov	r9, r2
 8007398:	eb1a 0508 	adds.w	r5, sl, r8
 800739c:	eb4b 0609 	adc.w	r6, fp, r9
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	4619      	mov	r1, r3
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	f04f 0400 	mov.w	r4, #0
 80073b2:	0094      	lsls	r4, r2, #2
 80073b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073b8:	008b      	lsls	r3, r1, #2
 80073ba:	461a      	mov	r2, r3
 80073bc:	4623      	mov	r3, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	4631      	mov	r1, r6
 80073c2:	f7f9 fc69 	bl	8000c98 <__aeabi_uldivmod>
 80073c6:	4603      	mov	r3, r0
 80073c8:	460c      	mov	r4, r1
 80073ca:	461a      	mov	r2, r3
 80073cc:	4bb8      	ldr	r3, [pc, #736]	; (80076b0 <UART_SetConfig+0x6f4>)
 80073ce:	fba3 2302 	umull	r2, r3, r3, r2
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	469b      	mov	fp, r3
 80073dc:	f04f 0c00 	mov.w	ip, #0
 80073e0:	46d9      	mov	r9, fp
 80073e2:	46e2      	mov	sl, ip
 80073e4:	eb19 0309 	adds.w	r3, r9, r9
 80073e8:	eb4a 040a 	adc.w	r4, sl, sl
 80073ec:	4699      	mov	r9, r3
 80073ee:	46a2      	mov	sl, r4
 80073f0:	eb19 090b 	adds.w	r9, r9, fp
 80073f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80073f8:	f04f 0100 	mov.w	r1, #0
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007404:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007408:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800740c:	4689      	mov	r9, r1
 800740e:	4692      	mov	sl, r2
 8007410:	eb1b 0509 	adds.w	r5, fp, r9
 8007414:	eb4c 060a 	adc.w	r6, ip, sl
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	4619      	mov	r1, r3
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	f04f 0400 	mov.w	r4, #0
 800742a:	0094      	lsls	r4, r2, #2
 800742c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007430:	008b      	lsls	r3, r1, #2
 8007432:	461a      	mov	r2, r3
 8007434:	4623      	mov	r3, r4
 8007436:	4628      	mov	r0, r5
 8007438:	4631      	mov	r1, r6
 800743a:	f7f9 fc2d 	bl	8000c98 <__aeabi_uldivmod>
 800743e:	4603      	mov	r3, r0
 8007440:	460c      	mov	r4, r1
 8007442:	461a      	mov	r2, r3
 8007444:	4b9a      	ldr	r3, [pc, #616]	; (80076b0 <UART_SetConfig+0x6f4>)
 8007446:	fba3 1302 	umull	r1, r3, r3, r2
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	2164      	movs	r1, #100	; 0x64
 800744e:	fb01 f303 	mul.w	r3, r1, r3
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	3332      	adds	r3, #50	; 0x32
 8007458:	4a95      	ldr	r2, [pc, #596]	; (80076b0 <UART_SetConfig+0x6f4>)
 800745a:	fba2 2303 	umull	r2, r3, r2, r3
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007464:	4498      	add	r8, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	469b      	mov	fp, r3
 800746a:	f04f 0c00 	mov.w	ip, #0
 800746e:	46d9      	mov	r9, fp
 8007470:	46e2      	mov	sl, ip
 8007472:	eb19 0309 	adds.w	r3, r9, r9
 8007476:	eb4a 040a 	adc.w	r4, sl, sl
 800747a:	4699      	mov	r9, r3
 800747c:	46a2      	mov	sl, r4
 800747e:	eb19 090b 	adds.w	r9, r9, fp
 8007482:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007486:	f04f 0100 	mov.w	r1, #0
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007492:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007496:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800749a:	4689      	mov	r9, r1
 800749c:	4692      	mov	sl, r2
 800749e:	eb1b 0509 	adds.w	r5, fp, r9
 80074a2:	eb4c 060a 	adc.w	r6, ip, sl
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	4619      	mov	r1, r3
 80074ac:	f04f 0200 	mov.w	r2, #0
 80074b0:	f04f 0300 	mov.w	r3, #0
 80074b4:	f04f 0400 	mov.w	r4, #0
 80074b8:	0094      	lsls	r4, r2, #2
 80074ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074be:	008b      	lsls	r3, r1, #2
 80074c0:	461a      	mov	r2, r3
 80074c2:	4623      	mov	r3, r4
 80074c4:	4628      	mov	r0, r5
 80074c6:	4631      	mov	r1, r6
 80074c8:	f7f9 fbe6 	bl	8000c98 <__aeabi_uldivmod>
 80074cc:	4603      	mov	r3, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	461a      	mov	r2, r3
 80074d2:	4b77      	ldr	r3, [pc, #476]	; (80076b0 <UART_SetConfig+0x6f4>)
 80074d4:	fba3 1302 	umull	r1, r3, r3, r2
 80074d8:	095b      	lsrs	r3, r3, #5
 80074da:	2164      	movs	r1, #100	; 0x64
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	3332      	adds	r3, #50	; 0x32
 80074e6:	4a72      	ldr	r2, [pc, #456]	; (80076b0 <UART_SetConfig+0x6f4>)
 80074e8:	fba2 2303 	umull	r2, r3, r2, r3
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	f003 020f 	and.w	r2, r3, #15
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4442      	add	r2, r8
 80074f8:	609a      	str	r2, [r3, #8]
 80074fa:	e0d0      	b.n	800769e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80074fc:	f7fe fb12 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 8007500:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	469a      	mov	sl, r3
 8007506:	f04f 0b00 	mov.w	fp, #0
 800750a:	46d0      	mov	r8, sl
 800750c:	46d9      	mov	r9, fp
 800750e:	eb18 0308 	adds.w	r3, r8, r8
 8007512:	eb49 0409 	adc.w	r4, r9, r9
 8007516:	4698      	mov	r8, r3
 8007518:	46a1      	mov	r9, r4
 800751a:	eb18 080a 	adds.w	r8, r8, sl
 800751e:	eb49 090b 	adc.w	r9, r9, fp
 8007522:	f04f 0100 	mov.w	r1, #0
 8007526:	f04f 0200 	mov.w	r2, #0
 800752a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800752e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007532:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007536:	4688      	mov	r8, r1
 8007538:	4691      	mov	r9, r2
 800753a:	eb1a 0508 	adds.w	r5, sl, r8
 800753e:	eb4b 0609 	adc.w	r6, fp, r9
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	4619      	mov	r1, r3
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	f04f 0400 	mov.w	r4, #0
 8007554:	0094      	lsls	r4, r2, #2
 8007556:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800755a:	008b      	lsls	r3, r1, #2
 800755c:	461a      	mov	r2, r3
 800755e:	4623      	mov	r3, r4
 8007560:	4628      	mov	r0, r5
 8007562:	4631      	mov	r1, r6
 8007564:	f7f9 fb98 	bl	8000c98 <__aeabi_uldivmod>
 8007568:	4603      	mov	r3, r0
 800756a:	460c      	mov	r4, r1
 800756c:	461a      	mov	r2, r3
 800756e:	4b50      	ldr	r3, [pc, #320]	; (80076b0 <UART_SetConfig+0x6f4>)
 8007570:	fba3 2302 	umull	r2, r3, r3, r2
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	469b      	mov	fp, r3
 800757e:	f04f 0c00 	mov.w	ip, #0
 8007582:	46d9      	mov	r9, fp
 8007584:	46e2      	mov	sl, ip
 8007586:	eb19 0309 	adds.w	r3, r9, r9
 800758a:	eb4a 040a 	adc.w	r4, sl, sl
 800758e:	4699      	mov	r9, r3
 8007590:	46a2      	mov	sl, r4
 8007592:	eb19 090b 	adds.w	r9, r9, fp
 8007596:	eb4a 0a0c 	adc.w	sl, sl, ip
 800759a:	f04f 0100 	mov.w	r1, #0
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075ae:	4689      	mov	r9, r1
 80075b0:	4692      	mov	sl, r2
 80075b2:	eb1b 0509 	adds.w	r5, fp, r9
 80075b6:	eb4c 060a 	adc.w	r6, ip, sl
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	4619      	mov	r1, r3
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	f04f 0400 	mov.w	r4, #0
 80075cc:	0094      	lsls	r4, r2, #2
 80075ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075d2:	008b      	lsls	r3, r1, #2
 80075d4:	461a      	mov	r2, r3
 80075d6:	4623      	mov	r3, r4
 80075d8:	4628      	mov	r0, r5
 80075da:	4631      	mov	r1, r6
 80075dc:	f7f9 fb5c 	bl	8000c98 <__aeabi_uldivmod>
 80075e0:	4603      	mov	r3, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	461a      	mov	r2, r3
 80075e6:	4b32      	ldr	r3, [pc, #200]	; (80076b0 <UART_SetConfig+0x6f4>)
 80075e8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	2164      	movs	r1, #100	; 0x64
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	3332      	adds	r3, #50	; 0x32
 80075fa:	4a2d      	ldr	r2, [pc, #180]	; (80076b0 <UART_SetConfig+0x6f4>)
 80075fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007606:	4498      	add	r8, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	469b      	mov	fp, r3
 800760c:	f04f 0c00 	mov.w	ip, #0
 8007610:	46d9      	mov	r9, fp
 8007612:	46e2      	mov	sl, ip
 8007614:	eb19 0309 	adds.w	r3, r9, r9
 8007618:	eb4a 040a 	adc.w	r4, sl, sl
 800761c:	4699      	mov	r9, r3
 800761e:	46a2      	mov	sl, r4
 8007620:	eb19 090b 	adds.w	r9, r9, fp
 8007624:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007628:	f04f 0100 	mov.w	r1, #0
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007634:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007638:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800763c:	4689      	mov	r9, r1
 800763e:	4692      	mov	sl, r2
 8007640:	eb1b 0509 	adds.w	r5, fp, r9
 8007644:	eb4c 060a 	adc.w	r6, ip, sl
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	4619      	mov	r1, r3
 800764e:	f04f 0200 	mov.w	r2, #0
 8007652:	f04f 0300 	mov.w	r3, #0
 8007656:	f04f 0400 	mov.w	r4, #0
 800765a:	0094      	lsls	r4, r2, #2
 800765c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007660:	008b      	lsls	r3, r1, #2
 8007662:	461a      	mov	r2, r3
 8007664:	4623      	mov	r3, r4
 8007666:	4628      	mov	r0, r5
 8007668:	4631      	mov	r1, r6
 800766a:	f7f9 fb15 	bl	8000c98 <__aeabi_uldivmod>
 800766e:	4603      	mov	r3, r0
 8007670:	460c      	mov	r4, r1
 8007672:	461a      	mov	r2, r3
 8007674:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <UART_SetConfig+0x6f4>)
 8007676:	fba3 1302 	umull	r1, r3, r3, r2
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	2164      	movs	r1, #100	; 0x64
 800767e:	fb01 f303 	mul.w	r3, r1, r3
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	3332      	adds	r3, #50	; 0x32
 8007688:	4a09      	ldr	r2, [pc, #36]	; (80076b0 <UART_SetConfig+0x6f4>)
 800768a:	fba2 2303 	umull	r2, r3, r2, r3
 800768e:	095b      	lsrs	r3, r3, #5
 8007690:	f003 020f 	and.w	r2, r3, #15
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4442      	add	r2, r8
 800769a:	609a      	str	r2, [r3, #8]
}
 800769c:	e7ff      	b.n	800769e <UART_SetConfig+0x6e2>
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a8:	40011000 	.word	0x40011000
 80076ac:	40011400 	.word	0x40011400
 80076b0:	51eb851f 	.word	0x51eb851f

080076b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076b4:	b084      	sub	sp, #16
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	f107 001c 	add.w	r0, r7, #28
 80076c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d122      	bne.n	8007712 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80076e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d105      	bne.n	8007706 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 fac6 	bl	8008c98 <USB_CoreReset>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	e01a      	b.n	8007748 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 faba 	bl	8008c98 <USB_CoreReset>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	639a      	str	r2, [r3, #56]	; 0x38
 800773a:	e005      	b.n	8007748 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	2b01      	cmp	r3, #1
 800774c:	d10b      	bne.n	8007766 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f043 0206 	orr.w	r2, r3, #6
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f043 0220 	orr.w	r2, r3, #32
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007772:	b004      	add	sp, #16
 8007774:	4770      	bx	lr
	...

08007778 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d165      	bne.n	8007858 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4a41      	ldr	r2, [pc, #260]	; (8007894 <USB_SetTurnaroundTime+0x11c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d906      	bls.n	80077a2 <USB_SetTurnaroundTime+0x2a>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4a40      	ldr	r2, [pc, #256]	; (8007898 <USB_SetTurnaroundTime+0x120>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d802      	bhi.n	80077a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800779c:	230f      	movs	r3, #15
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	e062      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4a3c      	ldr	r2, [pc, #240]	; (8007898 <USB_SetTurnaroundTime+0x120>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d906      	bls.n	80077b8 <USB_SetTurnaroundTime+0x40>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4a3b      	ldr	r2, [pc, #236]	; (800789c <USB_SetTurnaroundTime+0x124>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d802      	bhi.n	80077b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80077b2:	230e      	movs	r3, #14
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e057      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4a38      	ldr	r2, [pc, #224]	; (800789c <USB_SetTurnaroundTime+0x124>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d906      	bls.n	80077ce <USB_SetTurnaroundTime+0x56>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4a37      	ldr	r2, [pc, #220]	; (80078a0 <USB_SetTurnaroundTime+0x128>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d802      	bhi.n	80077ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80077c8:	230d      	movs	r3, #13
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e04c      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	4a33      	ldr	r2, [pc, #204]	; (80078a0 <USB_SetTurnaroundTime+0x128>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d906      	bls.n	80077e4 <USB_SetTurnaroundTime+0x6c>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	4a32      	ldr	r2, [pc, #200]	; (80078a4 <USB_SetTurnaroundTime+0x12c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d802      	bhi.n	80077e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80077de:	230c      	movs	r3, #12
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	e041      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4a2f      	ldr	r2, [pc, #188]	; (80078a4 <USB_SetTurnaroundTime+0x12c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d906      	bls.n	80077fa <USB_SetTurnaroundTime+0x82>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4a2e      	ldr	r2, [pc, #184]	; (80078a8 <USB_SetTurnaroundTime+0x130>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d802      	bhi.n	80077fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80077f4:	230b      	movs	r3, #11
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e036      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	4a2a      	ldr	r2, [pc, #168]	; (80078a8 <USB_SetTurnaroundTime+0x130>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d906      	bls.n	8007810 <USB_SetTurnaroundTime+0x98>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	4a29      	ldr	r2, [pc, #164]	; (80078ac <USB_SetTurnaroundTime+0x134>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d802      	bhi.n	8007810 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800780a:	230a      	movs	r3, #10
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	e02b      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4a26      	ldr	r2, [pc, #152]	; (80078ac <USB_SetTurnaroundTime+0x134>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d906      	bls.n	8007826 <USB_SetTurnaroundTime+0xae>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <USB_SetTurnaroundTime+0x138>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d802      	bhi.n	8007826 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007820:	2309      	movs	r3, #9
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e020      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	4a21      	ldr	r2, [pc, #132]	; (80078b0 <USB_SetTurnaroundTime+0x138>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d906      	bls.n	800783c <USB_SetTurnaroundTime+0xc4>
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4a20      	ldr	r2, [pc, #128]	; (80078b4 <USB_SetTurnaroundTime+0x13c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d802      	bhi.n	800783c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007836:	2308      	movs	r3, #8
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	e015      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <USB_SetTurnaroundTime+0x13c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d906      	bls.n	8007852 <USB_SetTurnaroundTime+0xda>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <USB_SetTurnaroundTime+0x140>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d802      	bhi.n	8007852 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800784c:	2307      	movs	r3, #7
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e00a      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007852:	2306      	movs	r3, #6
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	e007      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d102      	bne.n	8007864 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800785e:	2309      	movs	r3, #9
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	e001      	b.n	8007868 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007864:	2309      	movs	r3, #9
 8007866:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	029b      	lsls	r3, r3, #10
 800787c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007880:	431a      	orrs	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	371c      	adds	r7, #28
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	00d8acbf 	.word	0x00d8acbf
 8007898:	00e4e1bf 	.word	0x00e4e1bf
 800789c:	00f423ff 	.word	0x00f423ff
 80078a0:	0106737f 	.word	0x0106737f
 80078a4:	011a499f 	.word	0x011a499f
 80078a8:	01312cff 	.word	0x01312cff
 80078ac:	014ca43f 	.word	0x014ca43f
 80078b0:	016e35ff 	.word	0x016e35ff
 80078b4:	01a6ab1f 	.word	0x01a6ab1f
 80078b8:	01e847ff 	.word	0x01e847ff

080078bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f043 0201 	orr.w	r2, r3, #1
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f023 0201 	bic.w	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d106      	bne.n	800792c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	e00b      	b.n	8007944 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	60da      	str	r2, [r3, #12]
 800793e:	e001      	b.n	8007944 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e003      	b.n	800794c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007944:	2032      	movs	r0, #50	; 0x32
 8007946:	f7fa ffbd 	bl	80028c4 <HAL_Delay>

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007954:	b084      	sub	sp, #16
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800796e:	2300      	movs	r3, #0
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	e009      	b.n	8007988 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	3340      	adds	r3, #64	; 0x40
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	2200      	movs	r2, #0
 8007980:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	3301      	adds	r3, #1
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2b0e      	cmp	r3, #14
 800798c:	d9f2      	bls.n	8007974 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800798e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d11c      	bne.n	80079ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079a2:	f043 0302 	orr.w	r3, r3, #2
 80079a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38
 80079cc:	e00b      	b.n	80079e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079ec:	461a      	mov	r2, r3
 80079ee:	2300      	movs	r3, #0
 80079f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f8:	4619      	mov	r1, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a00:	461a      	mov	r2, r3
 8007a02:	680b      	ldr	r3, [r1, #0]
 8007a04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d10c      	bne.n	8007a26 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d104      	bne.n	8007a1c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a12:	2100      	movs	r1, #0
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f949 	bl	8007cac <USB_SetDevSpeed>
 8007a1a:	e008      	b.n	8007a2e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f944 	bl	8007cac <USB_SetDevSpeed>
 8007a24:	e003      	b.n	8007a2e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a26:	2103      	movs	r1, #3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f93f 	bl	8007cac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a2e:	2110      	movs	r1, #16
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f8f3 	bl	8007c1c <USB_FlushTxFifo>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f911 	bl	8007c68 <USB_FlushRxFifo>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a56:	461a      	mov	r2, r3
 8007a58:	2300      	movs	r3, #0
 8007a5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a62:	461a      	mov	r2, r3
 8007a64:	2300      	movs	r3, #0
 8007a66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6e:	461a      	mov	r2, r3
 8007a70:	2300      	movs	r3, #0
 8007a72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a74:	2300      	movs	r3, #0
 8007a76:	613b      	str	r3, [r7, #16]
 8007a78:	e043      	b.n	8007b02 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a90:	d118      	bne.n	8007ac4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	e013      	b.n	8007ad6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aba:	461a      	mov	r2, r3
 8007abc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	e008      	b.n	8007ad6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af4:	461a      	mov	r2, r3
 8007af6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007afa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	3301      	adds	r3, #1
 8007b00:	613b      	str	r3, [r7, #16]
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d3b7      	bcc.n	8007a7a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	e043      	b.n	8007b98 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b26:	d118      	bne.n	8007b5a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b40:	6013      	str	r3, [r2, #0]
 8007b42:	e013      	b.n	8007b6c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b50:	461a      	mov	r2, r3
 8007b52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	e008      	b.n	8007b6c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b66:	461a      	mov	r2, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	3301      	adds	r3, #1
 8007b96:	613b      	str	r3, [r7, #16]
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d3b7      	bcc.n	8007b10 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bb2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007bc0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d105      	bne.n	8007bd4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	f043 0210 	orr.w	r2, r3, #16
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	699a      	ldr	r2, [r3, #24]
 8007bd8:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <USB_DevInit+0x2c4>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f043 0208 	orr.w	r2, r3, #8
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d107      	bne.n	8007c08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c00:	f043 0304 	orr.w	r3, r3, #4
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c14:	b004      	add	sp, #16
 8007c16:	4770      	bx	lr
 8007c18:	803c3800 	.word	0x803c3800

08007c1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	019b      	lsls	r3, r3, #6
 8007c2e:	f043 0220 	orr.w	r2, r3, #32
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4a09      	ldr	r2, [pc, #36]	; (8007c64 <USB_FlushTxFifo+0x48>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d901      	bls.n	8007c48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e006      	b.n	8007c56 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d0f0      	beq.n	8007c36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	00030d40 	.word	0x00030d40

08007c68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2210      	movs	r2, #16
 8007c78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4a09      	ldr	r2, [pc, #36]	; (8007ca8 <USB_FlushRxFifo+0x40>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d901      	bls.n	8007c8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e006      	b.n	8007c9a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	f003 0310 	and.w	r3, r3, #16
 8007c94:	2b10      	cmp	r3, #16
 8007c96:	d0f0      	beq.n	8007c7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	00030d40 	.word	0x00030d40

08007cac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	68f9      	ldr	r1, [r7, #12]
 8007cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f003 0306 	and.w	r3, r3, #6
 8007cf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d102      	bne.n	8007d04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	75fb      	strb	r3, [r7, #23]
 8007d02:	e00a      	b.n	8007d1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d002      	beq.n	8007d10 <USB_GetDevSpeed+0x32>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b06      	cmp	r3, #6
 8007d0e:	d102      	bne.n	8007d16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d10:	2302      	movs	r3, #2
 8007d12:	75fb      	strb	r3, [r7, #23]
 8007d14:	e001      	b.n	8007d1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d16:	230f      	movs	r3, #15
 8007d18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	371c      	adds	r7, #28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d13a      	bne.n	8007dba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4a:	69da      	ldr	r2, [r3, #28]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	2101      	movs	r1, #1
 8007d56:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	68f9      	ldr	r1, [r7, #12]
 8007d5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d62:	4313      	orrs	r3, r2
 8007d64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d155      	bne.n	8007e28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	78db      	ldrb	r3, [r3, #3]
 8007d96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	059b      	lsls	r3, r3, #22
 8007d9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007da0:	4313      	orrs	r3, r2
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	0151      	lsls	r1, r2, #5
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	440a      	add	r2, r1
 8007daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	e036      	b.n	8007e28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc0:	69da      	ldr	r2, [r3, #28]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	2101      	movs	r1, #1
 8007dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd0:	041b      	lsls	r3, r3, #16
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d11a      	bne.n	8007e28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	78db      	ldrb	r3, [r3, #3]
 8007e0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	4313      	orrs	r3, r2
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
	...

08007e38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d161      	bne.n	8007f18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e6a:	d11f      	bne.n	8007eac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	0151      	lsls	r1, r2, #5
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	440a      	add	r2, r1
 8007e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	0151      	lsls	r1, r2, #5
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	440a      	add	r2, r1
 8007ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	68f9      	ldr	r1, [r7, #12]
 8007ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ecc:	4013      	ands	r3, r2
 8007ece:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	f003 030f 	and.w	r3, r3, #15
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	43db      	mvns	r3, r3
 8007eea:	68f9      	ldr	r1, [r7, #12]
 8007eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	0159      	lsls	r1, r3, #5
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	440b      	add	r3, r1
 8007f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4b35      	ldr	r3, [pc, #212]	; (8007fe8 <USB_DeactivateEndpoint+0x1b0>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	600b      	str	r3, [r1, #0]
 8007f16:	e060      	b.n	8007fda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f2e:	d11f      	bne.n	8007f70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	0151      	lsls	r1, r2, #5
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	440a      	add	r2, r1
 8007f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	0151      	lsls	r1, r2, #5
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	440a      	add	r2, r1
 8007f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	f003 030f 	and.w	r3, r3, #15
 8007f80:	2101      	movs	r1, #1
 8007f82:	fa01 f303 	lsl.w	r3, r1, r3
 8007f86:	041b      	lsls	r3, r3, #16
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	68f9      	ldr	r1, [r7, #12]
 8007f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f90:	4013      	ands	r3, r2
 8007f92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9a:	69da      	ldr	r2, [r3, #28]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f003 030f 	and.w	r3, r3, #15
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	43db      	mvns	r3, r3
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	0159      	lsls	r1, r3, #5
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	440b      	add	r3, r1
 8007fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <USB_DeactivateEndpoint+0x1b4>)
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	ec337800 	.word	0xec337800
 8007fec:	eff37800 	.word	0xeff37800

08007ff0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08a      	sub	sp, #40	; 0x28
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b01      	cmp	r3, #1
 800800e:	f040 815c 	bne.w	80082ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d132      	bne.n	8008080 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	69fa      	ldr	r2, [r7, #28]
 800802e:	440a      	add	r2, r1
 8008030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008034:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008038:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800803c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	0151      	lsls	r1, r2, #5
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	440a      	add	r2, r1
 8008054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800805c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008078:	0cdb      	lsrs	r3, r3, #19
 800807a:	04db      	lsls	r3, r3, #19
 800807c:	6113      	str	r3, [r2, #16]
 800807e:	e074      	b.n	800816a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	440a      	add	r2, r1
 8008096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809a:	0cdb      	lsrs	r3, r3, #19
 800809c:	04db      	lsls	r3, r3, #19
 800809e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d0:	691a      	ldr	r2, [r3, #16]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6959      	ldr	r1, [r3, #20]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	440b      	add	r3, r1
 80080dc:	1e59      	subs	r1, r3, #1
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80080e6:	04d9      	lsls	r1, r3, #19
 80080e8:	4b9d      	ldr	r3, [pc, #628]	; (8008360 <USB_EPStartXfer+0x370>)
 80080ea:	400b      	ands	r3, r1
 80080ec:	69b9      	ldr	r1, [r7, #24]
 80080ee:	0148      	lsls	r0, r1, #5
 80080f0:	69f9      	ldr	r1, [r7, #28]
 80080f2:	4401      	add	r1, r0
 80080f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080f8:	4313      	orrs	r3, r2
 80080fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008108:	691a      	ldr	r2, [r3, #16]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008112:	69b9      	ldr	r1, [r7, #24]
 8008114:	0148      	lsls	r0, r1, #5
 8008116:	69f9      	ldr	r1, [r7, #28]
 8008118:	4401      	add	r1, r0
 800811a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800811e:	4313      	orrs	r3, r2
 8008120:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d11f      	bne.n	800816a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008144:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008148:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008168:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d14b      	bne.n	8008208 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d009      	beq.n	800818c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008184:	461a      	mov	r2, r3
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	78db      	ldrb	r3, [r3, #3]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d128      	bne.n	80081e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d110      	bne.n	80081c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	e00f      	b.n	80081e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	0151      	lsls	r1, r2, #5
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	440a      	add	r2, r1
 80081dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	0151      	lsls	r1, r2, #5
 80081f8:	69fa      	ldr	r2, [r7, #28]
 80081fa:	440a      	add	r2, r1
 80081fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008200:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	e12f      	b.n	8008468 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	440a      	add	r2, r1
 800821e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008226:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	78db      	ldrb	r3, [r3, #3]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d015      	beq.n	800825c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 8117 	beq.w	8008468 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	2101      	movs	r1, #1
 800824c:	fa01 f303 	lsl.w	r3, r1, r3
 8008250:	69f9      	ldr	r1, [r7, #28]
 8008252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008256:	4313      	orrs	r3, r2
 8008258:	634b      	str	r3, [r1, #52]	; 0x34
 800825a:	e105      	b.n	8008468 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008268:	2b00      	cmp	r3, #0
 800826a:	d110      	bne.n	800828e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e00f      	b.n	80082ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	68d9      	ldr	r1, [r3, #12]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	781a      	ldrb	r2, [r3, #0]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	b298      	uxth	r0, r3
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	4603      	mov	r3, r0
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fa2b 	bl	800871e <USB_WritePacket>
 80082c8:	e0ce      	b.n	8008468 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	0151      	lsls	r1, r2, #5
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	440a      	add	r2, r1
 80082e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082e4:	0cdb      	lsrs	r3, r3, #19
 80082e6:	04db      	lsls	r3, r3, #19
 80082e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008304:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008308:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800830c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d126      	bne.n	8008364 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800832c:	69b9      	ldr	r1, [r7, #24]
 800832e:	0148      	lsls	r0, r1, #5
 8008330:	69f9      	ldr	r1, [r7, #28]
 8008332:	4401      	add	r1, r0
 8008334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008338:	4313      	orrs	r3, r2
 800833a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800835a:	6113      	str	r3, [r2, #16]
 800835c:	e036      	b.n	80083cc <USB_EPStartXfer+0x3dc>
 800835e:	bf00      	nop
 8008360:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	695a      	ldr	r2, [r3, #20]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	4413      	add	r3, r2
 800836e:	1e5a      	subs	r2, r3, #1
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	fbb2 f3f3 	udiv	r3, r2, r3
 8008378:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	8afb      	ldrh	r3, [r7, #22]
 800838a:	04d9      	lsls	r1, r3, #19
 800838c:	4b39      	ldr	r3, [pc, #228]	; (8008474 <USB_EPStartXfer+0x484>)
 800838e:	400b      	ands	r3, r1
 8008390:	69b9      	ldr	r1, [r7, #24]
 8008392:	0148      	lsls	r0, r1, #5
 8008394:	69f9      	ldr	r1, [r7, #28]
 8008396:	4401      	add	r1, r0
 8008398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800839c:	4313      	orrs	r3, r2
 800839e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	691a      	ldr	r2, [r3, #16]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	8af9      	ldrh	r1, [r7, #22]
 80083b4:	fb01 f303 	mul.w	r3, r1, r3
 80083b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083bc:	69b9      	ldr	r1, [r7, #24]
 80083be:	0148      	lsls	r0, r1, #5
 80083c0:	69f9      	ldr	r1, [r7, #28]
 80083c2:	4401      	add	r1, r0
 80083c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083c8:	4313      	orrs	r3, r2
 80083ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d10d      	bne.n	80083ee <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d009      	beq.n	80083ee <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	68d9      	ldr	r1, [r3, #12]
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ea:	460a      	mov	r2, r1
 80083ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	78db      	ldrb	r3, [r3, #3]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d128      	bne.n	8008448 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008402:	2b00      	cmp	r3, #0
 8008404:	d110      	bne.n	8008428 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	0151      	lsls	r1, r2, #5
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	440a      	add	r2, r1
 800841c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	e00f      	b.n	8008448 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	440a      	add	r2, r1
 800843e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008446:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	440a      	add	r2, r1
 800845e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	1ff80000 	.word	0x1ff80000

08008478 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	785b      	ldrb	r3, [r3, #1]
 8008494:	2b01      	cmp	r3, #1
 8008496:	f040 80cd 	bne.w	8008634 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d132      	bne.n	8008508 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	0151      	lsls	r1, r2, #5
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	440a      	add	r2, r1
 80084b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008500:	0cdb      	lsrs	r3, r3, #19
 8008502:	04db      	lsls	r3, r3, #19
 8008504:	6113      	str	r3, [r2, #16]
 8008506:	e04e      	b.n	80085a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	0151      	lsls	r1, r2, #5
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	440a      	add	r2, r1
 800851e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008522:	0cdb      	lsrs	r3, r3, #19
 8008524:	04db      	lsls	r3, r3, #19
 8008526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	440a      	add	r2, r1
 800853e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008542:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008546:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800854a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	695a      	ldr	r2, [r3, #20]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	429a      	cmp	r2, r3
 8008556:	d903      	bls.n	8008560 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	440a      	add	r2, r1
 8008576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800857a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800857e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	691a      	ldr	r2, [r3, #16]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008596:	6939      	ldr	r1, [r7, #16]
 8008598:	0148      	lsls	r0, r1, #5
 800859a:	6979      	ldr	r1, [r7, #20]
 800859c:	4401      	add	r1, r0
 800859e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085a2:	4313      	orrs	r3, r2
 80085a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d11e      	bne.n	80085ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	461a      	mov	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	e092      	b.n	8008710 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008608:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d07e      	beq.n	8008710 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	2101      	movs	r1, #1
 8008624:	fa01 f303 	lsl.w	r3, r1, r3
 8008628:	6979      	ldr	r1, [r7, #20]
 800862a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800862e:	4313      	orrs	r3, r2
 8008630:	634b      	str	r3, [r1, #52]	; 0x34
 8008632:	e06d      	b.n	8008710 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	440a      	add	r2, r1
 800864a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800864e:	0cdb      	lsrs	r3, r3, #19
 8008650:	04db      	lsls	r3, r3, #19
 8008652:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	440a      	add	r2, r1
 800866a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800866e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008672:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008676:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d003      	beq.n	8008688 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	0151      	lsls	r1, r2, #5
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	440a      	add	r2, r1
 800869e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b4:	691a      	ldr	r2, [r3, #16]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086be:	6939      	ldr	r1, [r7, #16]
 80086c0:	0148      	lsls	r0, r1, #5
 80086c2:	6979      	ldr	r1, [r7, #20]
 80086c4:	4401      	add	r1, r0
 80086c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086ca:	4313      	orrs	r3, r2
 80086cc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d10d      	bne.n	80086f0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d009      	beq.n	80086f0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	68d9      	ldr	r1, [r3, #12]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ec:	460a      	mov	r2, r1
 80086ee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	440a      	add	r2, r1
 8008706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800870a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800870e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800871e:	b480      	push	{r7}
 8008720:	b089      	sub	sp, #36	; 0x24
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	4611      	mov	r1, r2
 800872a:	461a      	mov	r2, r3
 800872c:	460b      	mov	r3, r1
 800872e:	71fb      	strb	r3, [r7, #7]
 8008730:	4613      	mov	r3, r2
 8008732:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800873c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11a      	bne.n	800877a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008744:	88bb      	ldrh	r3, [r7, #4]
 8008746:	3303      	adds	r3, #3
 8008748:	089b      	lsrs	r3, r3, #2
 800874a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800874c:	2300      	movs	r3, #0
 800874e:	61bb      	str	r3, [r7, #24]
 8008750:	e00f      	b.n	8008772 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008752:	79fb      	ldrb	r3, [r7, #7]
 8008754:	031a      	lsls	r2, r3, #12
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	4413      	add	r3, r2
 800875a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800875e:	461a      	mov	r2, r3
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	3304      	adds	r3, #4
 800876a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	3301      	adds	r3, #1
 8008770:	61bb      	str	r3, [r7, #24]
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	429a      	cmp	r2, r3
 8008778:	d3eb      	bcc.n	8008752 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3724      	adds	r7, #36	; 0x24
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008788:	b480      	push	{r7}
 800878a:	b089      	sub	sp, #36	; 0x24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	4613      	mov	r3, r2
 8008794:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800879e:	88fb      	ldrh	r3, [r7, #6]
 80087a0:	3303      	adds	r3, #3
 80087a2:	089b      	lsrs	r3, r3, #2
 80087a4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80087a6:	2300      	movs	r3, #0
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	e00b      	b.n	80087c4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	3304      	adds	r3, #4
 80087bc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	3301      	adds	r3, #1
 80087c2:	61bb      	str	r3, [r7, #24]
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d3ef      	bcc.n	80087ac <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80087cc:	69fb      	ldr	r3, [r7, #28]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3724      	adds	r7, #36	; 0x24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087da:	b480      	push	{r7}
 80087dc:	b085      	sub	sp, #20
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d12c      	bne.n	8008850 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	db12      	blt.n	800882e <USB_EPSetStall+0x54>
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00f      	beq.n	800882e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	0151      	lsls	r1, r2, #5
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	440a      	add	r2, r1
 8008824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008828:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800882c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	0151      	lsls	r1, r2, #5
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	440a      	add	r2, r1
 8008844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	e02b      	b.n	80088a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	db12      	blt.n	8008888 <USB_EPSetStall+0xae>
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00f      	beq.n	8008888 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	440a      	add	r2, r1
 800887e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008882:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008886:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b085      	sub	sp, #20
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d128      	bne.n	8008924 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	0151      	lsls	r1, r2, #5
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	440a      	add	r2, r1
 80088e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	78db      	ldrb	r3, [r3, #3]
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d003      	beq.n	8008902 <USB_EPClearStall+0x4c>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	78db      	ldrb	r3, [r3, #3]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d138      	bne.n	8008974 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	0151      	lsls	r1, r2, #5
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	440a      	add	r2, r1
 8008918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800891c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	e027      	b.n	8008974 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	0151      	lsls	r1, r2, #5
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	440a      	add	r2, r1
 800893a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800893e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008942:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	78db      	ldrb	r3, [r3, #3]
 8008948:	2b03      	cmp	r3, #3
 800894a:	d003      	beq.n	8008954 <USB_EPClearStall+0x9e>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	78db      	ldrb	r3, [r3, #3]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d10f      	bne.n	8008974 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4413      	add	r3, r2
 800895c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	0151      	lsls	r1, r2, #5
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	440a      	add	r2, r1
 800896a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800896e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008972:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008982:	b480      	push	{r7}
 8008984:	b085      	sub	sp, #20
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089a4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80089b6:	68f9      	ldr	r1, [r7, #12]
 80089b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089bc:	4313      	orrs	r3, r2
 80089be:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089e8:	f023 0303 	bic.w	r3, r3, #3
 80089ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089fc:	f023 0302 	bic.w	r3, r3, #2
 8008a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a3e:	f043 0302 	orr.w	r3, r3, #2
 8008a42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b085      	sub	sp, #20
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	4013      	ands	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	0c1b      	lsrs	r3, r3, #16
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	4013      	ands	r3, r2
 8008ace:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	b29b      	uxth	r3, r3
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b40:	78fb      	ldrb	r3, [r7, #3]
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	fa22 f303 	lsr.w	r3, r2, r3
 8008b4c:	01db      	lsls	r3, r3, #7
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	4013      	ands	r3, r2
 8008b68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	371c      	adds	r7, #28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	f003 0301 	and.w	r3, r3, #1
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008bb2:	f023 0307 	bic.w	r3, r3, #7
 8008bb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
	...

08008bdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	460b      	mov	r3, r1
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	333c      	adds	r3, #60	; 0x3c
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	4a26      	ldr	r2, [pc, #152]	; (8008c94 <USB_EP0_OutStart+0xb8>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d90a      	bls.n	8008c16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c10:	d101      	bne.n	8008c16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	e037      	b.n	8008c86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	2300      	movs	r3, #0
 8008c20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c44:	f043 0318 	orr.w	r3, r3, #24
 8008c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c5e:	7afb      	ldrb	r3, [r7, #11]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d10f      	bne.n	8008c84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008c82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	4f54300a 	.word	0x4f54300a

08008c98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4a13      	ldr	r2, [pc, #76]	; (8008cfc <USB_CoreReset+0x64>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d901      	bls.n	8008cb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e01b      	b.n	8008cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	daf2      	bge.n	8008ca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f043 0201 	orr.w	r2, r3, #1
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4a09      	ldr	r2, [pc, #36]	; (8008cfc <USB_CoreReset+0x64>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d901      	bls.n	8008ce0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e006      	b.n	8008cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d0f0      	beq.n	8008cce <USB_CoreReset+0x36>

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	00030d40 	.word	0x00030d40

08008d00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d10:	f002 f952 	bl	800afb8 <malloc>
 8008d14:	4603      	mov	r3, r0
 8008d16:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d105      	bne.n	8008d2a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008d26:	2302      	movs	r3, #2
 8008d28:	e066      	b.n	8008df8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	7c1b      	ldrb	r3, [r3, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d119      	bne.n	8008d6e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d3e:	2202      	movs	r2, #2
 8008d40:	2181      	movs	r1, #129	; 0x81
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 ffbf 	bl	800acc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d52:	2202      	movs	r2, #2
 8008d54:	2101      	movs	r1, #1
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f001 ffb5 	bl	800acc6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2210      	movs	r2, #16
 8008d68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008d6c:	e016      	b.n	8008d9c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d6e:	2340      	movs	r3, #64	; 0x40
 8008d70:	2202      	movs	r2, #2
 8008d72:	2181      	movs	r1, #129	; 0x81
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 ffa6 	bl	800acc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d80:	2340      	movs	r3, #64	; 0x40
 8008d82:	2202      	movs	r2, #2
 8008d84:	2101      	movs	r1, #1
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 ff9d 	bl	800acc6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2210      	movs	r2, #16
 8008d98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d9c:	2308      	movs	r3, #8
 8008d9e:	2203      	movs	r2, #3
 8008da0:	2182      	movs	r1, #130	; 0x82
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 ff8f 	bl	800acc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	7c1b      	ldrb	r3, [r3, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d109      	bne.n	8008de6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ddc:	2101      	movs	r1, #1
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f002 f860 	bl	800aea4 <USBD_LL_PrepareReceive>
 8008de4:	e007      	b.n	8008df6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dec:	2340      	movs	r3, #64	; 0x40
 8008dee:	2101      	movs	r1, #1
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f002 f857 	bl	800aea4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008e10:	2181      	movs	r1, #129	; 0x81
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 ff7d 	bl	800ad12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008e1e:	2101      	movs	r1, #1
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 ff76 	bl	800ad12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008e2e:	2182      	movs	r1, #130	; 0x82
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 ff6e 	bl	800ad12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00e      	beq.n	8008e6e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e60:	4618      	mov	r0, r3
 8008e62:	f002 f8b1 	bl	800afc8 <free>
    pdev->pClassData = NULL;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e88:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d03a      	beq.n	8008f18 <USBD_CDC_Setup+0xa0>
 8008ea2:	2b20      	cmp	r3, #32
 8008ea4:	f040 8097 	bne.w	8008fd6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	88db      	ldrh	r3, [r3, #6]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d029      	beq.n	8008f04 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	b25b      	sxtb	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da11      	bge.n	8008ede <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008ec6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	88d2      	ldrh	r2, [r2, #6]
 8008ecc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008ece:	6939      	ldr	r1, [r7, #16]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	88db      	ldrh	r3, [r3, #6]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 fa9d 	bl	800a416 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008edc:	e082      	b.n	8008fe4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	785a      	ldrb	r2, [r3, #1]
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	88db      	ldrh	r3, [r3, #6]
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008ef4:	6939      	ldr	r1, [r7, #16]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	88db      	ldrh	r3, [r3, #6]
 8008efa:	461a      	mov	r2, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 fab6 	bl	800a46e <USBD_CtlPrepareRx>
    break;
 8008f02:	e06f      	b.n	8008fe4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	7850      	ldrb	r0, [r2, #1]
 8008f10:	2200      	movs	r2, #0
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	4798      	blx	r3
    break;
 8008f16:	e065      	b.n	8008fe4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	2b0b      	cmp	r3, #11
 8008f1e:	d84f      	bhi.n	8008fc0 <USBD_CDC_Setup+0x148>
 8008f20:	a201      	add	r2, pc, #4	; (adr r2, 8008f28 <USBD_CDC_Setup+0xb0>)
 8008f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f26:	bf00      	nop
 8008f28:	08008f59 	.word	0x08008f59
 8008f2c:	08008fcf 	.word	0x08008fcf
 8008f30:	08008fc1 	.word	0x08008fc1
 8008f34:	08008fc1 	.word	0x08008fc1
 8008f38:	08008fc1 	.word	0x08008fc1
 8008f3c:	08008fc1 	.word	0x08008fc1
 8008f40:	08008fc1 	.word	0x08008fc1
 8008f44:	08008fc1 	.word	0x08008fc1
 8008f48:	08008fc1 	.word	0x08008fc1
 8008f4c:	08008fc1 	.word	0x08008fc1
 8008f50:	08008f81 	.word	0x08008f81
 8008f54:	08008fa9 	.word	0x08008fa9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d107      	bne.n	8008f72 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f62:	f107 030c 	add.w	r3, r7, #12
 8008f66:	2202      	movs	r2, #2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f001 fa53 	bl	800a416 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008f70:	e030      	b.n	8008fd4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 f9dd 	bl	800a334 <USBD_CtlError>
        ret = USBD_FAIL;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f7e:	e029      	b.n	8008fd4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d107      	bne.n	8008f9a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f8a:	f107 030f 	add.w	r3, r7, #15
 8008f8e:	2201      	movs	r2, #1
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f001 fa3f 	bl	800a416 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008f98:	e01c      	b.n	8008fd4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 f9c9 	bl	800a334 <USBD_CtlError>
        ret = USBD_FAIL;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8008fa6:	e015      	b.n	8008fd4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d00f      	beq.n	8008fd2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 f9bd 	bl	800a334 <USBD_CtlError>
        ret = USBD_FAIL;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008fbe:	e008      	b.n	8008fd2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f001 f9b6 	bl	800a334 <USBD_CtlError>
      ret = USBD_FAIL;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	75fb      	strb	r3, [r7, #23]
      break;
 8008fcc:	e002      	b.n	8008fd4 <USBD_CDC_Setup+0x15c>
      break;
 8008fce:	bf00      	nop
 8008fd0:	e008      	b.n	8008fe4 <USBD_CDC_Setup+0x16c>
      break;
 8008fd2:	bf00      	nop
    }
    break;
 8008fd4:	e006      	b.n	8008fe4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 f9ab 	bl	800a334 <USBD_CtlError>
    ret = USBD_FAIL;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	75fb      	strb	r3, [r7, #23]
    break;
 8008fe2:	bf00      	nop
  }

  return (uint8_t)ret;
 8008fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop

08008ff0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009002:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800900e:	2303      	movs	r3, #3
 8009010:	e049      	b.n	80090a6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009018:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800901a:	78fa      	ldrb	r2, [r7, #3]
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	440b      	add	r3, r1
 8009028:	3318      	adds	r3, #24
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d029      	beq.n	8009084 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009030:	78fa      	ldrb	r2, [r7, #3]
 8009032:	6879      	ldr	r1, [r7, #4]
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	3318      	adds	r3, #24
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	78f9      	ldrb	r1, [r7, #3]
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	460b      	mov	r3, r1
 8009048:	00db      	lsls	r3, r3, #3
 800904a:	1a5b      	subs	r3, r3, r1
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4403      	add	r3, r0
 8009050:	3344      	adds	r3, #68	; 0x44
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	fbb2 f1f3 	udiv	r1, r2, r3
 8009058:	fb03 f301 	mul.w	r3, r3, r1
 800905c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800905e:	2b00      	cmp	r3, #0
 8009060:	d110      	bne.n	8009084 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009062:	78fa      	ldrb	r2, [r7, #3]
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	440b      	add	r3, r1
 8009070:	3318      	adds	r3, #24
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009076:	78f9      	ldrb	r1, [r7, #3]
 8009078:	2300      	movs	r3, #0
 800907a:	2200      	movs	r2, #0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 fef0 	bl	800ae62 <USBD_LL_Transmit>
 8009082:	e00f      	b.n	80090a4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e015      	b.n	80090fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 ff06 	bl	800aee6 <USBD_LL_GetRxDataSize>
 80090da:	4602      	mov	r2, r0
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80090f6:	4611      	mov	r1, r2
 80090f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009112:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d015      	beq.n	800914a <USBD_CDC_EP0_RxReady+0x46>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009124:	2bff      	cmp	r3, #255	; 0xff
 8009126:	d010      	beq.n	800914a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009136:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800913e:	b292      	uxth	r2, r2
 8009140:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	22ff      	movs	r2, #255	; 0xff
 8009146:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2243      	movs	r2, #67	; 0x43
 8009160:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009162:	4b03      	ldr	r3, [pc, #12]	; (8009170 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	200000f4 	.word	0x200000f4

08009174 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2243      	movs	r2, #67	; 0x43
 8009180:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009182:	4b03      	ldr	r3, [pc, #12]	; (8009190 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009184:	4618      	mov	r0, r3
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	200000b0 	.word	0x200000b0

08009194 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2243      	movs	r2, #67	; 0x43
 80091a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80091a2:	4b03      	ldr	r3, [pc, #12]	; (80091b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	20000138 	.word	0x20000138

080091b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	220a      	movs	r2, #10
 80091c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80091c2:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	2000006c 	.word	0x2000006c

080091d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e004      	b.n	80091f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80091fe:	b480      	push	{r7}
 8009200:	b087      	sub	sp, #28
 8009202:	af00      	add	r7, sp, #0
 8009204:	60f8      	str	r0, [r7, #12]
 8009206:	60b9      	str	r1, [r7, #8]
 8009208:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009210:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	371c      	adds	r7, #28
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009240:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009266:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009268:	2301      	movs	r3, #1
 800926a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009276:	2303      	movs	r3, #3
 8009278:	e01a      	b.n	80092b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009280:	2b00      	cmp	r3, #0
 8009282:	d114      	bne.n	80092ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2201      	movs	r2, #1
 8009288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80092a2:	2181      	movs	r1, #129	; 0x81
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 fddc 	bl	800ae62 <USBD_LL_Transmit>

    ret = USBD_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e016      	b.n	8009304 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	7c1b      	ldrb	r3, [r3, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092e8:	2101      	movs	r1, #1
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f001 fdda 	bl	800aea4 <USBD_LL_PrepareReceive>
 80092f0:	e007      	b.n	8009302 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092f8:	2340      	movs	r3, #64	; 0x40
 80092fa:	2101      	movs	r1, #1
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 fdd1 	bl	800aea4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	4613      	mov	r3, r2
 8009318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009320:	2303      	movs	r3, #3
 8009322:	e025      	b.n	8009370 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932a:	2b00      	cmp	r3, #0
 800932c:	d003      	beq.n	8009336 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	79fa      	ldrb	r2, [r7, #7]
 8009362:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f001 fc47 	bl	800abf8 <USBD_LL_Init>
 800936a:	4603      	mov	r3, r0
 800936c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800936e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800938c:	2303      	movs	r3, #3
 800938e:	e010      	b.n	80093b2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a0:	f107 020e 	add.w	r2, r7, #14
 80093a4:	4610      	mov	r0, r2
 80093a6:	4798      	blx	r3
 80093a8:	4602      	mov	r2, r0
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f001 fc64 	bl	800ac90 <USBD_LL_Start>
 80093c8:	4603      	mov	r3, r0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80093f4:	2303      	movs	r3, #3
 80093f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d009      	beq.n	8009416 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	78fa      	ldrb	r2, [r7, #3]
 800940c:	4611      	mov	r1, r2
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	4798      	blx	r3
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009432:	2b00      	cmp	r3, #0
 8009434:	d007      	beq.n	8009446 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	78fa      	ldrb	r2, [r7, #3]
 8009440:	4611      	mov	r1, r2
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	4798      	blx	r3
  }

  return USBD_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	4618      	mov	r0, r3
 8009464:	f000 ff2c 	bl	800a2c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009476:	461a      	mov	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009484:	f003 031f 	and.w	r3, r3, #31
 8009488:	2b01      	cmp	r3, #1
 800948a:	d00e      	beq.n	80094aa <USBD_LL_SetupStage+0x5a>
 800948c:	2b01      	cmp	r3, #1
 800948e:	d302      	bcc.n	8009496 <USBD_LL_SetupStage+0x46>
 8009490:	2b02      	cmp	r3, #2
 8009492:	d014      	beq.n	80094be <USBD_LL_SetupStage+0x6e>
 8009494:	e01d      	b.n	80094d2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fa18 	bl	80098d4 <USBD_StdDevReq>
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]
      break;
 80094a8:	e020      	b.n	80094ec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa7c 	bl	80099b0 <USBD_StdItfReq>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]
      break;
 80094bc:	e016      	b.n	80094ec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fab8 	bl	8009a3c <USBD_StdEPReq>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]
      break;
 80094d0:	e00c      	b.n	80094ec <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 fc35 	bl	800ad50 <USBD_LL_StallEP>
 80094e6:	4603      	mov	r3, r0
 80094e8:	73fb      	strb	r3, [r7, #15]
      break;
 80094ea:	bf00      	nop
  }

  return ret;
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b086      	sub	sp, #24
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	460b      	mov	r3, r1
 8009500:	607a      	str	r2, [r7, #4]
 8009502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009504:	7afb      	ldrb	r3, [r7, #11]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d137      	bne.n	800957a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009510:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009518:	2b03      	cmp	r3, #3
 800951a:	d14a      	bne.n	80095b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	429a      	cmp	r2, r3
 8009526:	d913      	bls.n	8009550 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	1ad2      	subs	r2, r2, r3
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	4293      	cmp	r3, r2
 8009540:	bf28      	it	cs
 8009542:	4613      	movcs	r3, r2
 8009544:	461a      	mov	r2, r3
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 ffad 	bl	800a4a8 <USBD_CtlContinueRx>
 800954e:	e030      	b.n	80095b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009562:	2b03      	cmp	r3, #3
 8009564:	d105      	bne.n	8009572 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 ffa9 	bl	800a4ca <USBD_CtlSendStatus>
 8009578:	e01b      	b.n	80095b2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d013      	beq.n	80095ae <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800958c:	2b03      	cmp	r3, #3
 800958e:	d10e      	bne.n	80095ae <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	7afa      	ldrb	r2, [r7, #11]
 800959a:	4611      	mov	r1, r2
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	4798      	blx	r3
 80095a0:	4603      	mov	r3, r0
 80095a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	e002      	b.n	80095b4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e000      	b.n	80095b4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	460b      	mov	r3, r1
 80095c6:	607a      	str	r2, [r7, #4]
 80095c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80095ca:	7afb      	ldrb	r3, [r7, #11]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d16a      	bne.n	80096a6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	3314      	adds	r3, #20
 80095d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d155      	bne.n	800968c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d914      	bls.n	8009616 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	1ad2      	subs	r2, r2, r3
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	461a      	mov	r2, r3
 8009600:	6879      	ldr	r1, [r7, #4]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 ff22 	bl	800a44c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009608:	2300      	movs	r3, #0
 800960a:	2200      	movs	r2, #0
 800960c:	2100      	movs	r1, #0
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f001 fc48 	bl	800aea4 <USBD_LL_PrepareReceive>
 8009614:	e03a      	b.n	800968c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	429a      	cmp	r2, r3
 8009620:	d11c      	bne.n	800965c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800962a:	429a      	cmp	r2, r3
 800962c:	d316      	bcc.n	800965c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009638:	429a      	cmp	r2, r3
 800963a:	d20f      	bcs.n	800965c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800963c:	2200      	movs	r2, #0
 800963e:	2100      	movs	r1, #0
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 ff03 	bl	800a44c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800964e:	2300      	movs	r3, #0
 8009650:	2200      	movs	r2, #0
 8009652:	2100      	movs	r1, #0
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f001 fc25 	bl	800aea4 <USBD_LL_PrepareReceive>
 800965a:	e017      	b.n	800968c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00a      	beq.n	800967e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800966e:	2b03      	cmp	r3, #3
 8009670:	d105      	bne.n	800967e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800967e:	2180      	movs	r1, #128	; 0x80
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f001 fb65 	bl	800ad50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 ff32 	bl	800a4f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009692:	2b01      	cmp	r3, #1
 8009694:	d123      	bne.n	80096de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff fe9b 	bl	80093d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80096a4:	e01b      	b.n	80096de <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d013      	beq.n	80096da <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d10e      	bne.n	80096da <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	7afa      	ldrb	r2, [r7, #11]
 80096c6:	4611      	mov	r1, r2
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	4798      	blx	r3
 80096cc:	4603      	mov	r3, r0
 80096ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	e002      	b.n	80096e0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80096da:	2303      	movs	r3, #3
 80096dc:	e000      	b.n	80096e0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009714:	2b00      	cmp	r3, #0
 8009716:	d009      	beq.n	800972c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6852      	ldr	r2, [r2, #4]
 8009724:	b2d2      	uxtb	r2, r2
 8009726:	4611      	mov	r1, r2
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800972c:	2340      	movs	r3, #64	; 0x40
 800972e:	2200      	movs	r2, #0
 8009730:	2100      	movs	r1, #0
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f001 fac7 	bl	800acc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2240      	movs	r2, #64	; 0x40
 8009744:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009748:	2340      	movs	r3, #64	; 0x40
 800974a:	2200      	movs	r2, #0
 800974c:	2180      	movs	r1, #128	; 0x80
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 fab9 	bl	800acc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2240      	movs	r2, #64	; 0x40
 800975e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	78fa      	ldrb	r2, [r7, #3]
 800977a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800978a:	b480      	push	{r7}
 800978c:	b083      	sub	sp, #12
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2204      	movs	r2, #4
 80097a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c2:	2b04      	cmp	r3, #4
 80097c4:	d105      	bne.n	80097d2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d10b      	bne.n	800980a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d005      	beq.n	800980a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800982e:	b480      	push	{r7}
 8009830:	b083      	sub	sp, #12
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	460b      	mov	r3, r1
 8009838:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b082      	sub	sp, #8
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009874:	2b00      	cmp	r3, #0
 8009876:	d009      	beq.n	800988c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	6852      	ldr	r2, [r2, #4]
 8009884:	b2d2      	uxtb	r2, r2
 8009886:	4611      	mov	r1, r2
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	4798      	blx	r3
  }

  return USBD_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009896:	b480      	push	{r7}
 8009898:	b087      	sub	sp, #28
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	3301      	adds	r3, #1
 80098ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098b4:	8a3b      	ldrh	r3, [r7, #16]
 80098b6:	021b      	lsls	r3, r3, #8
 80098b8:	b21a      	sxth	r2, r3
 80098ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098be:	4313      	orrs	r3, r2
 80098c0:	b21b      	sxth	r3, r3
 80098c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098c4:	89fb      	ldrh	r3, [r7, #14]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	371c      	adds	r7, #28
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
	...

080098d4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	d004      	beq.n	80098f8 <USBD_StdDevReq+0x24>
 80098ee:	2b40      	cmp	r3, #64	; 0x40
 80098f0:	d002      	beq.n	80098f8 <USBD_StdDevReq+0x24>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <USBD_StdDevReq+0x38>
 80098f6:	e050      	b.n	800999a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
 8009906:	4603      	mov	r3, r0
 8009908:	73fb      	strb	r3, [r7, #15]
    break;
 800990a:	e04b      	b.n	80099a4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	785b      	ldrb	r3, [r3, #1]
 8009910:	2b09      	cmp	r3, #9
 8009912:	d83c      	bhi.n	800998e <USBD_StdDevReq+0xba>
 8009914:	a201      	add	r2, pc, #4	; (adr r2, 800991c <USBD_StdDevReq+0x48>)
 8009916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991a:	bf00      	nop
 800991c:	08009971 	.word	0x08009971
 8009920:	08009985 	.word	0x08009985
 8009924:	0800998f 	.word	0x0800998f
 8009928:	0800997b 	.word	0x0800997b
 800992c:	0800998f 	.word	0x0800998f
 8009930:	0800994f 	.word	0x0800994f
 8009934:	08009945 	.word	0x08009945
 8009938:	0800998f 	.word	0x0800998f
 800993c:	08009967 	.word	0x08009967
 8009940:	08009959 	.word	0x08009959
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009944:	6839      	ldr	r1, [r7, #0]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f9ce 	bl	8009ce8 <USBD_GetDescriptor>
      break;
 800994c:	e024      	b.n	8009998 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fb33 	bl	8009fbc <USBD_SetAddress>
      break;
 8009956:	e01f      	b.n	8009998 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fb70 	bl	800a040 <USBD_SetConfig>
 8009960:	4603      	mov	r3, r0
 8009962:	73fb      	strb	r3, [r7, #15]
      break;
 8009964:	e018      	b.n	8009998 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fc0d 	bl	800a188 <USBD_GetConfig>
      break;
 800996e:	e013      	b.n	8009998 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fc3c 	bl	800a1f0 <USBD_GetStatus>
      break;
 8009978:	e00e      	b.n	8009998 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fc6a 	bl	800a256 <USBD_SetFeature>
      break;
 8009982:	e009      	b.n	8009998 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fc79 	bl	800a27e <USBD_ClrFeature>
      break;
 800998c:	e004      	b.n	8009998 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fccf 	bl	800a334 <USBD_CtlError>
      break;
 8009996:	bf00      	nop
    }
    break;
 8009998:	e004      	b.n	80099a4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fcc9 	bl	800a334 <USBD_CtlError>
    break;
 80099a2:	bf00      	nop
  }

  return ret;
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop

080099b0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099c6:	2b20      	cmp	r3, #32
 80099c8:	d003      	beq.n	80099d2 <USBD_StdItfReq+0x22>
 80099ca:	2b40      	cmp	r3, #64	; 0x40
 80099cc:	d001      	beq.n	80099d2 <USBD_StdItfReq+0x22>
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d12a      	bne.n	8009a28 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d8:	3b01      	subs	r3, #1
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d81d      	bhi.n	8009a1a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	889b      	ldrh	r3, [r3, #4]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d813      	bhi.n	8009a10 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	4798      	blx	r3
 80099f6:	4603      	mov	r3, r0
 80099f8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	88db      	ldrh	r3, [r3, #6]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d110      	bne.n	8009a24 <USBD_StdItfReq+0x74>
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10d      	bne.n	8009a24 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fd5e 	bl	800a4ca <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009a0e:	e009      	b.n	8009a24 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fc8e 	bl	800a334 <USBD_CtlError>
      break;
 8009a18:	e004      	b.n	8009a24 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fc89 	bl	800a334 <USBD_CtlError>
      break;
 8009a22:	e000      	b.n	8009a26 <USBD_StdItfReq+0x76>
      break;
 8009a24:	bf00      	nop
    }
    break;
 8009a26:	e004      	b.n	8009a32 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fc82 	bl	800a334 <USBD_CtlError>
    break;
 8009a30:	bf00      	nop
  }

  return ret;
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	889b      	ldrh	r3, [r3, #4]
 8009a4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d004      	beq.n	8009a66 <USBD_StdEPReq+0x2a>
 8009a5c:	2b40      	cmp	r3, #64	; 0x40
 8009a5e:	d002      	beq.n	8009a66 <USBD_StdEPReq+0x2a>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <USBD_StdEPReq+0x3e>
 8009a64:	e135      	b.n	8009cd2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	4798      	blx	r3
 8009a74:	4603      	mov	r3, r0
 8009a76:	73fb      	strb	r3, [r7, #15]
    break;
 8009a78:	e130      	b.n	8009cdc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	785b      	ldrb	r3, [r3, #1]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d03e      	beq.n	8009b00 <USBD_StdEPReq+0xc4>
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d002      	beq.n	8009a8c <USBD_StdEPReq+0x50>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d077      	beq.n	8009b7a <USBD_StdEPReq+0x13e>
 8009a8a:	e11c      	b.n	8009cc6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d002      	beq.n	8009a9c <USBD_StdEPReq+0x60>
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d015      	beq.n	8009ac6 <USBD_StdEPReq+0x8a>
 8009a9a:	e02b      	b.n	8009af4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00c      	beq.n	8009abc <USBD_StdEPReq+0x80>
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	2b80      	cmp	r3, #128	; 0x80
 8009aa6:	d009      	beq.n	8009abc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f001 f94f 	bl	800ad50 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ab2:	2180      	movs	r1, #128	; 0x80
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 f94b 	bl	800ad50 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009aba:	e020      	b.n	8009afe <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fc38 	bl	800a334 <USBD_CtlError>
        break;
 8009ac4:	e01b      	b.n	8009afe <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	885b      	ldrh	r3, [r3, #2]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10e      	bne.n	8009aec <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <USBD_StdEPReq+0xb0>
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	2b80      	cmp	r3, #128	; 0x80
 8009ad8:	d008      	beq.n	8009aec <USBD_StdEPReq+0xb0>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	88db      	ldrh	r3, [r3, #6]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d104      	bne.n	8009aec <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f001 f932 	bl	800ad50 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fcec 	bl	800a4ca <USBD_CtlSendStatus>

        break;
 8009af2:	e004      	b.n	8009afe <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fc1c 	bl	800a334 <USBD_CtlError>
        break;
 8009afc:	bf00      	nop
      }
      break;
 8009afe:	e0e7      	b.n	8009cd0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d002      	beq.n	8009b10 <USBD_StdEPReq+0xd4>
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d015      	beq.n	8009b3a <USBD_StdEPReq+0xfe>
 8009b0e:	e02d      	b.n	8009b6c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00c      	beq.n	8009b30 <USBD_StdEPReq+0xf4>
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
 8009b18:	2b80      	cmp	r3, #128	; 0x80
 8009b1a:	d009      	beq.n	8009b30 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f001 f915 	bl	800ad50 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b26:	2180      	movs	r1, #128	; 0x80
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f001 f911 	bl	800ad50 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009b2e:	e023      	b.n	8009b78 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fbfe 	bl	800a334 <USBD_CtlError>
        break;
 8009b38:	e01e      	b.n	8009b78 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	885b      	ldrh	r3, [r3, #2]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d119      	bne.n	8009b76 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d004      	beq.n	8009b56 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 f91c 	bl	800ad8e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fcb7 	bl	800a4ca <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	4798      	blx	r3
        }
        break;
 8009b6a:	e004      	b.n	8009b76 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fbe0 	bl	800a334 <USBD_CtlError>
        break;
 8009b74:	e000      	b.n	8009b78 <USBD_StdEPReq+0x13c>
        break;
 8009b76:	bf00      	nop
      }
      break;
 8009b78:	e0aa      	b.n	8009cd0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d002      	beq.n	8009b8a <USBD_StdEPReq+0x14e>
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d032      	beq.n	8009bee <USBD_StdEPReq+0x1b2>
 8009b88:	e097      	b.n	8009cba <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d007      	beq.n	8009ba0 <USBD_StdEPReq+0x164>
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	2b80      	cmp	r3, #128	; 0x80
 8009b94:	d004      	beq.n	8009ba0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fbcb 	bl	800a334 <USBD_CtlError>
          break;
 8009b9e:	e091      	b.n	8009cc4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	da0b      	bge.n	8009bc0 <USBD_StdEPReq+0x184>
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bae:	4613      	mov	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	3310      	adds	r3, #16
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	4413      	add	r3, r2
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	e00b      	b.n	8009bd8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2202      	movs	r2, #2
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fc15 	bl	800a416 <USBD_CtlSendData>
        break;
 8009bec:	e06a      	b.n	8009cc4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	da11      	bge.n	8009c1a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	f003 020f 	and.w	r2, r3, #15
 8009bfc:	6879      	ldr	r1, [r7, #4]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	440b      	add	r3, r1
 8009c08:	3324      	adds	r3, #36	; 0x24
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d117      	bne.n	8009c40 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fb8e 	bl	800a334 <USBD_CtlError>
            break;
 8009c18:	e054      	b.n	8009cc4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	f003 020f 	and.w	r2, r3, #15
 8009c20:	6879      	ldr	r1, [r7, #4]
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	440b      	add	r3, r1
 8009c2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d104      	bne.n	8009c40 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fb7b 	bl	800a334 <USBD_CtlError>
            break;
 8009c3e:	e041      	b.n	8009cc4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da0b      	bge.n	8009c60 <USBD_StdEPReq+0x224>
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	3310      	adds	r3, #16
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	e00b      	b.n	8009c78 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	4413      	add	r3, r2
 8009c76:	3304      	adds	r3, #4
 8009c78:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <USBD_StdEPReq+0x24a>
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	2b80      	cmp	r3, #128	; 0x80
 8009c84:	d103      	bne.n	8009c8e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	e00e      	b.n	8009cac <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c8e:	7bbb      	ldrb	r3, [r7, #14]
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f001 f89a 	bl	800adcc <USBD_LL_IsStallEP>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	e002      	b.n	8009cac <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fbaf 	bl	800a416 <USBD_CtlSendData>
          break;
 8009cb8:	e004      	b.n	8009cc4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fb39 	bl	800a334 <USBD_CtlError>
        break;
 8009cc2:	bf00      	nop
      }
      break;
 8009cc4:	e004      	b.n	8009cd0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fb33 	bl	800a334 <USBD_CtlError>
      break;
 8009cce:	bf00      	nop
    }
    break;
 8009cd0:	e004      	b.n	8009cdc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fb2d 	bl	800a334 <USBD_CtlError>
    break;
 8009cda:	bf00      	nop
  }

  return ret;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	885b      	ldrh	r3, [r3, #2]
 8009d02:	0a1b      	lsrs	r3, r3, #8
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	3b01      	subs	r3, #1
 8009d08:	2b06      	cmp	r3, #6
 8009d0a:	f200 8128 	bhi.w	8009f5e <USBD_GetDescriptor+0x276>
 8009d0e:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <USBD_GetDescriptor+0x2c>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d31 	.word	0x08009d31
 8009d18:	08009d49 	.word	0x08009d49
 8009d1c:	08009d89 	.word	0x08009d89
 8009d20:	08009f5f 	.word	0x08009f5f
 8009d24:	08009f5f 	.word	0x08009f5f
 8009d28:	08009eff 	.word	0x08009eff
 8009d2c:	08009f2b 	.word	0x08009f2b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	7c12      	ldrb	r2, [r2, #16]
 8009d3c:	f107 0108 	add.w	r1, r7, #8
 8009d40:	4610      	mov	r0, r2
 8009d42:	4798      	blx	r3
 8009d44:	60f8      	str	r0, [r7, #12]
    break;
 8009d46:	e112      	b.n	8009f6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	7c1b      	ldrb	r3, [r3, #16]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10d      	bne.n	8009d6c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d58:	f107 0208 	add.w	r2, r7, #8
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	4798      	blx	r3
 8009d60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3301      	adds	r3, #1
 8009d66:	2202      	movs	r2, #2
 8009d68:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009d6a:	e100      	b.n	8009f6e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	f107 0208 	add.w	r2, r7, #8
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4798      	blx	r3
 8009d7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3301      	adds	r3, #1
 8009d82:	2202      	movs	r2, #2
 8009d84:	701a      	strb	r2, [r3, #0]
    break;
 8009d86:	e0f2      	b.n	8009f6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	885b      	ldrh	r3, [r3, #2]
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b05      	cmp	r3, #5
 8009d90:	f200 80ac 	bhi.w	8009eec <USBD_GetDescriptor+0x204>
 8009d94:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <USBD_GetDescriptor+0xb4>)
 8009d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9a:	bf00      	nop
 8009d9c:	08009db5 	.word	0x08009db5
 8009da0:	08009de9 	.word	0x08009de9
 8009da4:	08009e1d 	.word	0x08009e1d
 8009da8:	08009e51 	.word	0x08009e51
 8009dac:	08009e85 	.word	0x08009e85
 8009db0:	08009eb9 	.word	0x08009eb9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00b      	beq.n	8009dd8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	7c12      	ldrb	r2, [r2, #16]
 8009dcc:	f107 0108 	add.w	r1, r7, #8
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
 8009dd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dd6:	e091      	b.n	8009efc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 faaa 	bl	800a334 <USBD_CtlError>
        err++;
 8009de0:	7afb      	ldrb	r3, [r7, #11]
 8009de2:	3301      	adds	r3, #1
 8009de4:	72fb      	strb	r3, [r7, #11]
      break;
 8009de6:	e089      	b.n	8009efc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00b      	beq.n	8009e0c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	7c12      	ldrb	r2, [r2, #16]
 8009e00:	f107 0108 	add.w	r1, r7, #8
 8009e04:	4610      	mov	r0, r2
 8009e06:	4798      	blx	r3
 8009e08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e0a:	e077      	b.n	8009efc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa90 	bl	800a334 <USBD_CtlError>
        err++;
 8009e14:	7afb      	ldrb	r3, [r7, #11]
 8009e16:	3301      	adds	r3, #1
 8009e18:	72fb      	strb	r3, [r7, #11]
      break;
 8009e1a:	e06f      	b.n	8009efc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00b      	beq.n	8009e40 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7c12      	ldrb	r2, [r2, #16]
 8009e34:	f107 0108 	add.w	r1, r7, #8
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e3e:	e05d      	b.n	8009efc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa76 	bl	800a334 <USBD_CtlError>
        err++;
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	72fb      	strb	r3, [r7, #11]
      break;
 8009e4e:	e055      	b.n	8009efc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	7c12      	ldrb	r2, [r2, #16]
 8009e68:	f107 0108 	add.w	r1, r7, #8
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
 8009e70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e72:	e043      	b.n	8009efc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa5c 	bl	800a334 <USBD_CtlError>
        err++;
 8009e7c:	7afb      	ldrb	r3, [r7, #11]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	72fb      	strb	r3, [r7, #11]
      break;
 8009e82:	e03b      	b.n	8009efc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8a:	695b      	ldr	r3, [r3, #20]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	7c12      	ldrb	r2, [r2, #16]
 8009e9c:	f107 0108 	add.w	r1, r7, #8
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	4798      	blx	r3
 8009ea4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ea6:	e029      	b.n	8009efc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa42 	bl	800a334 <USBD_CtlError>
        err++;
 8009eb0:	7afb      	ldrb	r3, [r7, #11]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	72fb      	strb	r3, [r7, #11]
      break;
 8009eb6:	e021      	b.n	8009efc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00b      	beq.n	8009edc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	7c12      	ldrb	r2, [r2, #16]
 8009ed0:	f107 0108 	add.w	r1, r7, #8
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4798      	blx	r3
 8009ed8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009eda:	e00f      	b.n	8009efc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fa28 	bl	800a334 <USBD_CtlError>
        err++;
 8009ee4:	7afb      	ldrb	r3, [r7, #11]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	72fb      	strb	r3, [r7, #11]
      break;
 8009eea:	e007      	b.n	8009efc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa20 	bl	800a334 <USBD_CtlError>
      err++;
 8009ef4:	7afb      	ldrb	r3, [r7, #11]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009efa:	bf00      	nop
    }
    break;
 8009efc:	e037      	b.n	8009f6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	7c1b      	ldrb	r3, [r3, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d109      	bne.n	8009f1a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0e:	f107 0208 	add.w	r2, r7, #8
 8009f12:	4610      	mov	r0, r2
 8009f14:	4798      	blx	r3
 8009f16:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009f18:	e029      	b.n	8009f6e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fa09 	bl	800a334 <USBD_CtlError>
      err++;
 8009f22:	7afb      	ldrb	r3, [r7, #11]
 8009f24:	3301      	adds	r3, #1
 8009f26:	72fb      	strb	r3, [r7, #11]
    break;
 8009f28:	e021      	b.n	8009f6e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	7c1b      	ldrb	r3, [r3, #16]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10d      	bne.n	8009f4e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3a:	f107 0208 	add.w	r2, r7, #8
 8009f3e:	4610      	mov	r0, r2
 8009f40:	4798      	blx	r3
 8009f42:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	3301      	adds	r3, #1
 8009f48:	2207      	movs	r2, #7
 8009f4a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009f4c:	e00f      	b.n	8009f6e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f9ef 	bl	800a334 <USBD_CtlError>
      err++;
 8009f56:	7afb      	ldrb	r3, [r7, #11]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	72fb      	strb	r3, [r7, #11]
    break;
 8009f5c:	e007      	b.n	8009f6e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f9e7 	bl	800a334 <USBD_CtlError>
    err++;
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	72fb      	strb	r3, [r7, #11]
    break;
 8009f6c:	bf00      	nop
  }

  if (err != 0U)
 8009f6e:	7afb      	ldrb	r3, [r7, #11]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d11e      	bne.n	8009fb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	88db      	ldrh	r3, [r3, #6]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d016      	beq.n	8009faa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009f7c:	893b      	ldrh	r3, [r7, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00e      	beq.n	8009fa0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	88da      	ldrh	r2, [r3, #6]
 8009f86:	893b      	ldrh	r3, [r7, #8]
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	bf28      	it	cs
 8009f8c:	4613      	movcs	r3, r2
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f92:	893b      	ldrh	r3, [r7, #8]
 8009f94:	461a      	mov	r2, r3
 8009f96:	68f9      	ldr	r1, [r7, #12]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fa3c 	bl	800a416 <USBD_CtlSendData>
 8009f9e:	e009      	b.n	8009fb4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f9c6 	bl	800a334 <USBD_CtlError>
 8009fa8:	e004      	b.n	8009fb4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fa8d 	bl	800a4ca <USBD_CtlSendStatus>
 8009fb0:	e000      	b.n	8009fb4 <USBD_GetDescriptor+0x2cc>
    return;
 8009fb2:	bf00      	nop
    }
  }
}
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop

08009fbc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	889b      	ldrh	r3, [r3, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d130      	bne.n	800a030 <USBD_SetAddress+0x74>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	88db      	ldrh	r3, [r3, #6]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d12c      	bne.n	800a030 <USBD_SetAddress+0x74>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	885b      	ldrh	r3, [r3, #2]
 8009fda:	2b7f      	cmp	r3, #127	; 0x7f
 8009fdc:	d828      	bhi.n	800a030 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	885b      	ldrh	r3, [r3, #2]
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d104      	bne.n	8009ffe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f99c 	bl	800a334 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffc:	e01c      	b.n	800a038 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	7bfa      	ldrb	r2, [r7, #15]
 800a002:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 ff0a 	bl	800ae24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fa5a 	bl	800a4ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d004      	beq.n	800a026 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2202      	movs	r2, #2
 800a020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a024:	e008      	b.n	800a038 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a02e:	e003      	b.n	800a038 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f97e 	bl	800a334 <USBD_CtlError>
  }
}
 800a038:	bf00      	nop
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	885b      	ldrh	r3, [r3, #2]
 800a052:	b2da      	uxtb	r2, r3
 800a054:	4b4b      	ldr	r3, [pc, #300]	; (800a184 <USBD_SetConfig+0x144>)
 800a056:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a058:	4b4a      	ldr	r3, [pc, #296]	; (800a184 <USBD_SetConfig+0x144>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d905      	bls.n	800a06c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f966 	bl	800a334 <USBD_CtlError>
    return USBD_FAIL;
 800a068:	2303      	movs	r3, #3
 800a06a:	e087      	b.n	800a17c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a072:	2b02      	cmp	r3, #2
 800a074:	d002      	beq.n	800a07c <USBD_SetConfig+0x3c>
 800a076:	2b03      	cmp	r3, #3
 800a078:	d025      	beq.n	800a0c6 <USBD_SetConfig+0x86>
 800a07a:	e071      	b.n	800a160 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a07c:	4b41      	ldr	r3, [pc, #260]	; (800a184 <USBD_SetConfig+0x144>)
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d01c      	beq.n	800a0be <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a084:	4b3f      	ldr	r3, [pc, #252]	; (800a184 <USBD_SetConfig+0x144>)
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a08e:	4b3d      	ldr	r3, [pc, #244]	; (800a184 <USBD_SetConfig+0x144>)
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff f9a7 	bl	80093e8 <USBD_SetClassConfig>
 800a09a:	4603      	mov	r3, r0
 800a09c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f944 	bl	800a334 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a0ac:	e065      	b.n	800a17a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fa0b 	bl	800a4ca <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2203      	movs	r2, #3
 800a0b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a0bc:	e05d      	b.n	800a17a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa03 	bl	800a4ca <USBD_CtlSendStatus>
    break;
 800a0c4:	e059      	b.n	800a17a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a0c6:	4b2f      	ldr	r3, [pc, #188]	; (800a184 <USBD_SetConfig+0x144>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d112      	bne.n	800a0f4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a0d6:	4b2b      	ldr	r3, [pc, #172]	; (800a184 <USBD_SetConfig+0x144>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0e0:	4b28      	ldr	r3, [pc, #160]	; (800a184 <USBD_SetConfig+0x144>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff f99a 	bl	8009420 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f9ec 	bl	800a4ca <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a0f2:	e042      	b.n	800a17a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a0f4:	4b23      	ldr	r3, [pc, #140]	; (800a184 <USBD_SetConfig+0x144>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d02a      	beq.n	800a158 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	b2db      	uxtb	r3, r3
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7ff f988 	bl	8009420 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a110:	4b1c      	ldr	r3, [pc, #112]	; (800a184 <USBD_SetConfig+0x144>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	461a      	mov	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a11a:	4b1a      	ldr	r3, [pc, #104]	; (800a184 <USBD_SetConfig+0x144>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff f961 	bl	80093e8 <USBD_SetClassConfig>
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00f      	beq.n	800a150 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f8fe 	bl	800a334 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff f96d 	bl	8009420 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2202      	movs	r2, #2
 800a14a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a14e:	e014      	b.n	800a17a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f9ba 	bl	800a4ca <USBD_CtlSendStatus>
    break;
 800a156:	e010      	b.n	800a17a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f9b6 	bl	800a4ca <USBD_CtlSendStatus>
    break;
 800a15e:	e00c      	b.n	800a17a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f8e6 	bl	800a334 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a168:	4b06      	ldr	r3, [pc, #24]	; (800a184 <USBD_SetConfig+0x144>)
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff f956 	bl	8009420 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a174:	2303      	movs	r3, #3
 800a176:	73fb      	strb	r3, [r7, #15]
    break;
 800a178:	bf00      	nop
  }

  return ret;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	200003e4 	.word	0x200003e4

0800a188 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	88db      	ldrh	r3, [r3, #6]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d004      	beq.n	800a1a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f8c9 	bl	800a334 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a1a2:	e021      	b.n	800a1e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	db17      	blt.n	800a1de <USBD_GetConfig+0x56>
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	dd02      	ble.n	800a1b8 <USBD_GetConfig+0x30>
 800a1b2:	2b03      	cmp	r3, #3
 800a1b4:	d00b      	beq.n	800a1ce <USBD_GetConfig+0x46>
 800a1b6:	e012      	b.n	800a1de <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f925 	bl	800a416 <USBD_CtlSendData>
      break;
 800a1cc:	e00c      	b.n	800a1e8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f91d 	bl	800a416 <USBD_CtlSendData>
      break;
 800a1dc:	e004      	b.n	800a1e8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f8a7 	bl	800a334 <USBD_CtlError>
      break;
 800a1e6:	bf00      	nop
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a200:	3b01      	subs	r3, #1
 800a202:	2b02      	cmp	r3, #2
 800a204:	d81e      	bhi.n	800a244 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	88db      	ldrh	r3, [r3, #6]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d004      	beq.n	800a218 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f88f 	bl	800a334 <USBD_CtlError>
      break;
 800a216:	e01a      	b.n	800a24e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a224:	2b00      	cmp	r3, #0
 800a226:	d005      	beq.n	800a234 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	f043 0202 	orr.w	r2, r3, #2
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	330c      	adds	r3, #12
 800a238:	2202      	movs	r2, #2
 800a23a:	4619      	mov	r1, r3
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f8ea 	bl	800a416 <USBD_CtlSendData>
    break;
 800a242:	e004      	b.n	800a24e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f874 	bl	800a334 <USBD_CtlError>
    break;
 800a24c:	bf00      	nop
  }
}
 800a24e:	bf00      	nop
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	885b      	ldrh	r3, [r3, #2]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d106      	bne.n	800a276 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f92a 	bl	800a4ca <USBD_CtlSendStatus>
  }
}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28e:	3b01      	subs	r3, #1
 800a290:	2b02      	cmp	r3, #2
 800a292:	d80b      	bhi.n	800a2ac <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	885b      	ldrh	r3, [r3, #2]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d10c      	bne.n	800a2b6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f910 	bl	800a4ca <USBD_CtlSendStatus>
      }
      break;
 800a2aa:	e004      	b.n	800a2b6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f840 	bl	800a334 <USBD_CtlError>
      break;
 800a2b4:	e000      	b.n	800a2b8 <USBD_ClrFeature+0x3a>
      break;
 800a2b6:	bf00      	nop
  }
}
 800a2b8:	bf00      	nop
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	781a      	ldrb	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	781a      	ldrb	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff fad3 	bl	8009896 <SWAPBYTE>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3301      	adds	r3, #1
 800a302:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f7ff fac6 	bl	8009896 <SWAPBYTE>
 800a30a:	4603      	mov	r3, r0
 800a30c:	461a      	mov	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3301      	adds	r3, #1
 800a316:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3301      	adds	r3, #1
 800a31c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f7ff fab9 	bl	8009896 <SWAPBYTE>
 800a324:	4603      	mov	r3, r0
 800a326:	461a      	mov	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	80da      	strh	r2, [r3, #6]
}
 800a32c:	bf00      	nop
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a33e:	2180      	movs	r1, #128	; 0x80
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fd05 	bl	800ad50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a346:	2100      	movs	r1, #0
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 fd01 	bl	800ad50 <USBD_LL_StallEP>
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b086      	sub	sp, #24
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
 800a35e:	60b9      	str	r1, [r7, #8]
 800a360:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d036      	beq.n	800a3da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a370:	6938      	ldr	r0, [r7, #16]
 800a372:	f000 f836 	bl	800a3e2 <USBD_GetLen>
 800a376:	4603      	mov	r3, r0
 800a378:	3301      	adds	r3, #1
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a384:	7dfb      	ldrb	r3, [r7, #23]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	4413      	add	r3, r2
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	7812      	ldrb	r2, [r2, #0]
 800a38e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	3301      	adds	r3, #1
 800a394:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a396:	7dfb      	ldrb	r3, [r7, #23]
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	4413      	add	r3, r2
 800a39c:	2203      	movs	r2, #3
 800a39e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3a0:	7dfb      	ldrb	r3, [r7, #23]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a3a6:	e013      	b.n	800a3d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	7812      	ldrb	r2, [r2, #0]
 800a3b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	613b      	str	r3, [r7, #16]
    idx++;
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a3c0:	7dfb      	ldrb	r3, [r7, #23]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	701a      	strb	r2, [r3, #0]
    idx++;
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e7      	bne.n	800a3a8 <USBD_GetString+0x52>
 800a3d8:	e000      	b.n	800a3dc <USBD_GetString+0x86>
    return;
 800a3da:	bf00      	nop
  }
}
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b085      	sub	sp, #20
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a3f2:	e005      	b.n	800a400 <USBD_GetLen+0x1e>
  {
    len++;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1f5      	bne.n	800a3f4 <USBD_GetLen+0x12>
  }

  return len;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b084      	sub	sp, #16
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	60f8      	str	r0, [r7, #12]
 800a41e:	60b9      	str	r1, [r7, #8]
 800a420:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2202      	movs	r2, #2
 800a426:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	2100      	movs	r1, #0
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 fd10 	bl	800ae62 <USBD_LL_Transmit>

  return USBD_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	2100      	movs	r1, #0
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f000 fcff 	bl	800ae62 <USBD_LL_Transmit>

  return USBD_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2203      	movs	r2, #3
 800a47e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	2100      	movs	r1, #0
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 fd03 	bl	800aea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 fcf2 	bl	800aea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b082      	sub	sp, #8
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2204      	movs	r2, #4
 800a4d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4da:	2300      	movs	r3, #0
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2100      	movs	r1, #0
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fcbe 	bl	800ae62 <USBD_LL_Transmit>

  return USBD_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2205      	movs	r2, #5
 800a4fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a500:	2300      	movs	r3, #0
 800a502:	2200      	movs	r2, #0
 800a504:	2100      	movs	r1, #0
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fccc 	bl	800aea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a51c:	2200      	movs	r2, #0
 800a51e:	4912      	ldr	r1, [pc, #72]	; (800a568 <MX_USB_DEVICE_Init+0x50>)
 800a520:	4812      	ldr	r0, [pc, #72]	; (800a56c <MX_USB_DEVICE_Init+0x54>)
 800a522:	f7fe fef3 	bl	800930c <USBD_Init>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d001      	beq.n	800a530 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a52c:	f7f7 fcc2 	bl	8001eb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a530:	490f      	ldr	r1, [pc, #60]	; (800a570 <MX_USB_DEVICE_Init+0x58>)
 800a532:	480e      	ldr	r0, [pc, #56]	; (800a56c <MX_USB_DEVICE_Init+0x54>)
 800a534:	f7fe ff20 	bl	8009378 <USBD_RegisterClass>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a53e:	f7f7 fcb9 	bl	8001eb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a542:	490c      	ldr	r1, [pc, #48]	; (800a574 <MX_USB_DEVICE_Init+0x5c>)
 800a544:	4809      	ldr	r0, [pc, #36]	; (800a56c <MX_USB_DEVICE_Init+0x54>)
 800a546:	f7fe fe45 	bl	80091d4 <USBD_CDC_RegisterInterface>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d001      	beq.n	800a554 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a550:	f7f7 fcb0 	bl	8001eb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a554:	4805      	ldr	r0, [pc, #20]	; (800a56c <MX_USB_DEVICE_Init+0x54>)
 800a556:	f7fe ff30 	bl	80093ba <USBD_Start>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a560:	f7f7 fca8 	bl	8001eb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a564:	bf00      	nop
 800a566:	bd80      	pop	{r7, pc}
 800a568:	20000198 	.word	0x20000198
 800a56c:	20000998 	.word	0x20000998
 800a570:	20000078 	.word	0x20000078
 800a574:	2000017c 	.word	0x2000017c

0800a578 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a57c:	2200      	movs	r2, #0
 800a57e:	4905      	ldr	r1, [pc, #20]	; (800a594 <CDC_Init_FS+0x1c>)
 800a580:	4805      	ldr	r0, [pc, #20]	; (800a598 <CDC_Init_FS+0x20>)
 800a582:	f7fe fe3c 	bl	80091fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a586:	4905      	ldr	r1, [pc, #20]	; (800a59c <CDC_Init_FS+0x24>)
 800a588:	4803      	ldr	r0, [pc, #12]	; (800a598 <CDC_Init_FS+0x20>)
 800a58a:	f7fe fe51 	bl	8009230 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a58e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a590:	4618      	mov	r0, r3
 800a592:	bd80      	pop	{r7, pc}
 800a594:	20000ccc 	.word	0x20000ccc
 800a598:	20000998 	.word	0x20000998
 800a59c:	20000c68 	.word	0x20000c68

0800a5a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	6039      	str	r1, [r7, #0]
 800a5ba:	71fb      	strb	r3, [r7, #7]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint8_t lineCoding[7] = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 }; // 115200bps, 1stop, no parity, 8bit

  switch(cmd)
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	2b23      	cmp	r3, #35	; 0x23
 800a5c4:	d85c      	bhi.n	800a680 <CDC_Control_FS+0xd0>
 800a5c6:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <CDC_Control_FS+0x1c>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a681 	.word	0x0800a681
 800a5d0:	0800a681 	.word	0x0800a681
 800a5d4:	0800a681 	.word	0x0800a681
 800a5d8:	0800a681 	.word	0x0800a681
 800a5dc:	0800a681 	.word	0x0800a681
 800a5e0:	0800a681 	.word	0x0800a681
 800a5e4:	0800a681 	.word	0x0800a681
 800a5e8:	0800a681 	.word	0x0800a681
 800a5ec:	0800a681 	.word	0x0800a681
 800a5f0:	0800a681 	.word	0x0800a681
 800a5f4:	0800a681 	.word	0x0800a681
 800a5f8:	0800a681 	.word	0x0800a681
 800a5fc:	0800a681 	.word	0x0800a681
 800a600:	0800a681 	.word	0x0800a681
 800a604:	0800a681 	.word	0x0800a681
 800a608:	0800a681 	.word	0x0800a681
 800a60c:	0800a681 	.word	0x0800a681
 800a610:	0800a681 	.word	0x0800a681
 800a614:	0800a681 	.word	0x0800a681
 800a618:	0800a681 	.word	0x0800a681
 800a61c:	0800a681 	.word	0x0800a681
 800a620:	0800a681 	.word	0x0800a681
 800a624:	0800a681 	.word	0x0800a681
 800a628:	0800a681 	.word	0x0800a681
 800a62c:	0800a681 	.word	0x0800a681
 800a630:	0800a681 	.word	0x0800a681
 800a634:	0800a681 	.word	0x0800a681
 800a638:	0800a681 	.word	0x0800a681
 800a63c:	0800a681 	.word	0x0800a681
 800a640:	0800a681 	.word	0x0800a681
 800a644:	0800a681 	.word	0x0800a681
 800a648:	0800a681 	.word	0x0800a681
 800a64c:	0800a65d 	.word	0x0800a65d
 800a650:	0800a66f 	.word	0x0800a66f
 800a654:	0800a681 	.word	0x0800a681
 800a658:	0800a681 	.word	0x0800a681
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800a65c:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <CDC_Control_FS+0xe0>)
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	6810      	ldr	r0, [r2, #0]
 800a662:	6018      	str	r0, [r3, #0]
 800a664:	8891      	ldrh	r1, [r2, #4]
 800a666:	7992      	ldrb	r2, [r2, #6]
 800a668:	8099      	strh	r1, [r3, #4]
 800a66a:	719a      	strb	r2, [r3, #6]
    break;
 800a66c:	e009      	b.n	800a682 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	4a07      	ldr	r2, [pc, #28]	; (800a690 <CDC_Control_FS+0xe0>)
 800a672:	6810      	ldr	r0, [r2, #0]
 800a674:	6018      	str	r0, [r3, #0]
 800a676:	8891      	ldrh	r1, [r2, #4]
 800a678:	7992      	ldrb	r2, [r2, #6]
 800a67a:	8099      	strh	r1, [r3, #4]
 800a67c:	719a      	strb	r2, [r3, #6]
    break;
 800a67e:	e000      	b.n	800a682 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a680:	bf00      	nop
  }

  return (USBD_OK);
 800a682:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a684:	4618      	mov	r0, r3
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	20000190 	.word	0x20000190

0800a694 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	4811      	ldr	r0, [pc, #68]	; (800a6e8 <CDC_Receive_FS+0x54>)
 800a6a2:	f7fe fdc5 	bl	8009230 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6a6:	4810      	ldr	r0, [pc, #64]	; (800a6e8 <CDC_Receive_FS+0x54>)
 800a6a8:	f7fe fe06 	bl	80092b8 <USBD_CDC_ReceivePacket>
	  extern uint8_t ReceivedData[100]; // Tablica przechowujaca odebrane dane
	  extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

	  // Wyczyszczenie tablicy odebranych danych
	  uint8_t iter;
	  for(iter = 0; iter<100; ++iter){
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	73fb      	strb	r3, [r7, #15]
 800a6b0:	e006      	b.n	800a6c0 <CDC_Receive_FS+0x2c>
		  ReceivedData[iter] = 0;
 800a6b2:	7bfb      	ldrb	r3, [r7, #15]
 800a6b4:	4a0d      	ldr	r2, [pc, #52]	; (800a6ec <CDC_Receive_FS+0x58>)
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	54d1      	strb	r1, [r2, r3]
	  for(iter = 0; iter<100; ++iter){
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	73fb      	strb	r3, [r7, #15]
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
 800a6c2:	2b63      	cmp	r3, #99	; 0x63
 800a6c4:	d9f5      	bls.n	800a6b2 <CDC_Receive_FS+0x1e>
	  }

	  strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	4806      	ldr	r0, [pc, #24]	; (800a6ec <CDC_Receive_FS+0x58>)
 800a6d2:	f001 fc90 	bl	800bff6 <strlcpy>
	  ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 800a6d6:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <CDC_Receive_FS+0x5c>)
 800a6d8:	2201      	movs	r2, #1
 800a6da:	701a      	strb	r2, [r3, #0]

	  return (USBD_OK);
 800a6dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20000998 	.word	0x20000998
 800a6ec:	200007c8 	.word	0x200007c8
 800a6f0:	200003dc 	.word	0x200003dc

0800a6f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a704:	4b0d      	ldr	r3, [pc, #52]	; (800a73c <CDC_Transmit_FS+0x48>)
 800a706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a70a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a716:	2301      	movs	r3, #1
 800a718:	e00b      	b.n	800a732 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a71a:	887b      	ldrh	r3, [r7, #2]
 800a71c:	461a      	mov	r2, r3
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	4806      	ldr	r0, [pc, #24]	; (800a73c <CDC_Transmit_FS+0x48>)
 800a722:	f7fe fd6c 	bl	80091fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a726:	4805      	ldr	r0, [pc, #20]	; (800a73c <CDC_Transmit_FS+0x48>)
 800a728:	f7fe fd96 	bl	8009258 <USBD_CDC_TransmitPacket>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a730:	7bfb      	ldrb	r3, [r7, #15]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000998 	.word	0x20000998

0800a740 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a740:	b480      	push	{r7}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	4613      	mov	r3, r2
 800a74c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a756:	4618      	mov	r0, r3
 800a758:	371c      	adds	r7, #28
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
	...

0800a764 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	4603      	mov	r3, r0
 800a76c:	6039      	str	r1, [r7, #0]
 800a76e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	2212      	movs	r2, #18
 800a774:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a776:	4b03      	ldr	r3, [pc, #12]	; (800a784 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a778:	4618      	mov	r0, r3
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	200001b4 	.word	0x200001b4

0800a788 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	4603      	mov	r3, r0
 800a790:	6039      	str	r1, [r7, #0]
 800a792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2204      	movs	r2, #4
 800a798:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a79a:	4b03      	ldr	r3, [pc, #12]	; (800a7a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	200001c8 	.word	0x200001c8

0800a7ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	6039      	str	r1, [r7, #0]
 800a7b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7b8:	79fb      	ldrb	r3, [r7, #7]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d105      	bne.n	800a7ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	4907      	ldr	r1, [pc, #28]	; (800a7e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7c2:	4808      	ldr	r0, [pc, #32]	; (800a7e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7c4:	f7ff fdc7 	bl	800a356 <USBD_GetString>
 800a7c8:	e004      	b.n	800a7d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	4904      	ldr	r1, [pc, #16]	; (800a7e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7ce:	4805      	ldr	r0, [pc, #20]	; (800a7e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7d0:	f7ff fdc1 	bl	800a356 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7d4:	4b02      	ldr	r3, [pc, #8]	; (800a7e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	20000d30 	.word	0x20000d30
 800a7e4:	080129a0 	.word	0x080129a0

0800a7e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	6039      	str	r1, [r7, #0]
 800a7f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	4904      	ldr	r1, [pc, #16]	; (800a808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a7f8:	4804      	ldr	r0, [pc, #16]	; (800a80c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7fa:	f7ff fdac 	bl	800a356 <USBD_GetString>
  return USBD_StrDesc;
 800a7fe:	4b02      	ldr	r3, [pc, #8]	; (800a808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	20000d30 	.word	0x20000d30
 800a80c:	080129b8 	.word	0x080129b8

0800a810 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	6039      	str	r1, [r7, #0]
 800a81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	221a      	movs	r2, #26
 800a820:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a822:	f000 f843 	bl	800a8ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a826:	4b02      	ldr	r3, [pc, #8]	; (800a830 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	200001cc 	.word	0x200001cc

0800a834 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	6039      	str	r1, [r7, #0]
 800a83e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a840:	79fb      	ldrb	r3, [r7, #7]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d105      	bne.n	800a852 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	4907      	ldr	r1, [pc, #28]	; (800a868 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a84a:	4808      	ldr	r0, [pc, #32]	; (800a86c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a84c:	f7ff fd83 	bl	800a356 <USBD_GetString>
 800a850:	e004      	b.n	800a85c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	4904      	ldr	r1, [pc, #16]	; (800a868 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a856:	4805      	ldr	r0, [pc, #20]	; (800a86c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a858:	f7ff fd7d 	bl	800a356 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	20000d30 	.word	0x20000d30
 800a86c:	080129cc 	.word	0x080129cc

0800a870 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	6039      	str	r1, [r7, #0]
 800a87a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a87c:	79fb      	ldrb	r3, [r7, #7]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d105      	bne.n	800a88e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	4907      	ldr	r1, [pc, #28]	; (800a8a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a886:	4808      	ldr	r0, [pc, #32]	; (800a8a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a888:	f7ff fd65 	bl	800a356 <USBD_GetString>
 800a88c:	e004      	b.n	800a898 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	4904      	ldr	r1, [pc, #16]	; (800a8a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a892:	4805      	ldr	r0, [pc, #20]	; (800a8a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a894:	f7ff fd5f 	bl	800a356 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a898:	4b02      	ldr	r3, [pc, #8]	; (800a8a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000d30 	.word	0x20000d30
 800a8a8:	080129d8 	.word	0x080129d8

0800a8ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8b2:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <Get_SerialNum+0x44>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8b8:	4b0e      	ldr	r3, [pc, #56]	; (800a8f4 <Get_SerialNum+0x48>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8be:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <Get_SerialNum+0x4c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d009      	beq.n	800a8e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8d2:	2208      	movs	r2, #8
 800a8d4:	4909      	ldr	r1, [pc, #36]	; (800a8fc <Get_SerialNum+0x50>)
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 f814 	bl	800a904 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8dc:	2204      	movs	r2, #4
 800a8de:	4908      	ldr	r1, [pc, #32]	; (800a900 <Get_SerialNum+0x54>)
 800a8e0:	68b8      	ldr	r0, [r7, #8]
 800a8e2:	f000 f80f 	bl	800a904 <IntToUnicode>
  }
}
 800a8e6:	bf00      	nop
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	1fff7a10 	.word	0x1fff7a10
 800a8f4:	1fff7a14 	.word	0x1fff7a14
 800a8f8:	1fff7a18 	.word	0x1fff7a18
 800a8fc:	200001ce 	.word	0x200001ce
 800a900:	200001de 	.word	0x200001de

0800a904 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a904:	b480      	push	{r7}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4613      	mov	r3, r2
 800a910:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a916:	2300      	movs	r3, #0
 800a918:	75fb      	strb	r3, [r7, #23]
 800a91a:	e027      	b.n	800a96c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	0f1b      	lsrs	r3, r3, #28
 800a920:	2b09      	cmp	r3, #9
 800a922:	d80b      	bhi.n	800a93c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	0f1b      	lsrs	r3, r3, #28
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	4619      	mov	r1, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	440b      	add	r3, r1
 800a934:	3230      	adds	r2, #48	; 0x30
 800a936:	b2d2      	uxtb	r2, r2
 800a938:	701a      	strb	r2, [r3, #0]
 800a93a:	e00a      	b.n	800a952 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	0f1b      	lsrs	r3, r3, #28
 800a940:	b2da      	uxtb	r2, r3
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	4619      	mov	r1, r3
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	440b      	add	r3, r1
 800a94c:	3237      	adds	r2, #55	; 0x37
 800a94e:	b2d2      	uxtb	r2, r2
 800a950:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	011b      	lsls	r3, r3, #4
 800a956:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a958:	7dfb      	ldrb	r3, [r7, #23]
 800a95a:	005b      	lsls	r3, r3, #1
 800a95c:	3301      	adds	r3, #1
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	4413      	add	r3, r2
 800a962:	2200      	movs	r2, #0
 800a964:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a966:	7dfb      	ldrb	r3, [r7, #23]
 800a968:	3301      	adds	r3, #1
 800a96a:	75fb      	strb	r3, [r7, #23]
 800a96c:	7dfa      	ldrb	r2, [r7, #23]
 800a96e:	79fb      	ldrb	r3, [r7, #7]
 800a970:	429a      	cmp	r2, r3
 800a972:	d3d3      	bcc.n	800a91c <IntToUnicode+0x18>
  }
}
 800a974:	bf00      	nop
 800a976:	371c      	adds	r7, #28
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b08a      	sub	sp, #40	; 0x28
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a988:	f107 0314 	add.w	r3, r7, #20
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	605a      	str	r2, [r3, #4]
 800a992:	609a      	str	r2, [r3, #8]
 800a994:	60da      	str	r2, [r3, #12]
 800a996:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9a0:	d13a      	bne.n	800aa18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	613b      	str	r3, [r7, #16]
 800a9a6:	4b1e      	ldr	r3, [pc, #120]	; (800aa20 <HAL_PCD_MspInit+0xa0>)
 800a9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9aa:	4a1d      	ldr	r2, [pc, #116]	; (800aa20 <HAL_PCD_MspInit+0xa0>)
 800a9ac:	f043 0301 	orr.w	r3, r3, #1
 800a9b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a9b2:	4b1b      	ldr	r3, [pc, #108]	; (800aa20 <HAL_PCD_MspInit+0xa0>)
 800a9b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	613b      	str	r3, [r7, #16]
 800a9bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a9be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a9c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9d0:	230a      	movs	r3, #10
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9d4:	f107 0314 	add.w	r3, r7, #20
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4812      	ldr	r0, [pc, #72]	; (800aa24 <HAL_PCD_MspInit+0xa4>)
 800a9dc:	f7f9 f970 	bl	8003cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9e0:	4b0f      	ldr	r3, [pc, #60]	; (800aa20 <HAL_PCD_MspInit+0xa0>)
 800a9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e4:	4a0e      	ldr	r2, [pc, #56]	; (800aa20 <HAL_PCD_MspInit+0xa0>)
 800a9e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ea:	6353      	str	r3, [r2, #52]	; 0x34
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	4b0b      	ldr	r3, [pc, #44]	; (800aa20 <HAL_PCD_MspInit+0xa0>)
 800a9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f4:	4a0a      	ldr	r2, [pc, #40]	; (800aa20 <HAL_PCD_MspInit+0xa0>)
 800a9f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9fa:	6453      	str	r3, [r2, #68]	; 0x44
 800a9fc:	4b08      	ldr	r3, [pc, #32]	; (800aa20 <HAL_PCD_MspInit+0xa0>)
 800a9fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa04:	60fb      	str	r3, [r7, #12]
 800aa06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	2043      	movs	r0, #67	; 0x43
 800aa0e:	f7f8 fd90 	bl	8003532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa12:	2043      	movs	r0, #67	; 0x43
 800aa14:	f7f8 fda9 	bl	800356a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa18:	bf00      	nop
 800aa1a:	3728      	adds	r7, #40	; 0x28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	40023800 	.word	0x40023800
 800aa24:	40020000 	.word	0x40020000

0800aa28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f7fe fd06 	bl	8009450 <USBD_LL_SetupStage>
}
 800aa44:	bf00      	nop
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aa5e:	78fa      	ldrb	r2, [r7, #3]
 800aa60:	6879      	ldr	r1, [r7, #4]
 800aa62:	4613      	mov	r3, r2
 800aa64:	00db      	lsls	r3, r3, #3
 800aa66:	1a9b      	subs	r3, r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	440b      	add	r3, r1
 800aa6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	4619      	mov	r1, r3
 800aa76:	f7fe fd3e 	bl	80094f6 <USBD_LL_DataOutStage>
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aa94:	78fa      	ldrb	r2, [r7, #3]
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	1a9b      	subs	r3, r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	3348      	adds	r3, #72	; 0x48
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	78fb      	ldrb	r3, [r7, #3]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	f7fe fd87 	bl	80095bc <USBD_LL_DataInStage>
}
 800aaae:	bf00      	nop
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b082      	sub	sp, #8
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fe fe8b 	bl	80097e0 <USBD_LL_SOF>
}
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b084      	sub	sp, #16
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aada:	2301      	movs	r3, #1
 800aadc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d001      	beq.n	800aaea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aae6:	f7f7 f9e5 	bl	8001eb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aaf0:	7bfa      	ldrb	r2, [r7, #15]
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe fe38 	bl	800976a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fe fdf1 	bl	80096e8 <USBD_LL_Reset>
}
 800ab06:	bf00      	nop
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
	...

0800ab10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fe33 	bl	800978a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6812      	ldr	r2, [r2, #0]
 800ab32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab36:	f043 0301 	orr.w	r3, r3, #1
 800ab3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d005      	beq.n	800ab50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab44:	4b04      	ldr	r3, [pc, #16]	; (800ab58 <HAL_PCD_SuspendCallback+0x48>)
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	4a03      	ldr	r2, [pc, #12]	; (800ab58 <HAL_PCD_SuspendCallback+0x48>)
 800ab4a:	f043 0306 	orr.w	r3, r3, #6
 800ab4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	e000ed00 	.word	0xe000ed00

0800ab5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe fe22 	bl	80097b4 <USBD_LL_Resume>
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab8a:	78fa      	ldrb	r2, [r7, #3]
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fe4d 	bl	800982e <USBD_LL_IsoOUTIncomplete>
}
 800ab94:	bf00      	nop
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abae:	78fa      	ldrb	r2, [r7, #3]
 800abb0:	4611      	mov	r1, r2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe fe2e 	bl	8009814 <USBD_LL_IsoINIncomplete>
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fe fe3a 	bl	8009848 <USBD_LL_DevConnected>
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fe37 	bl	800985e <USBD_LL_DevDisconnected>
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d13c      	bne.n	800ac82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac08:	4a20      	ldr	r2, [pc, #128]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a1e      	ldr	r2, [pc, #120]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac18:	4b1c      	ldr	r3, [pc, #112]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac20:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac22:	2204      	movs	r2, #4
 800ac24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac26:	4b19      	ldr	r3, [pc, #100]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac28:	2202      	movs	r2, #2
 800ac2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac2c:	4b17      	ldr	r3, [pc, #92]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac32:	4b16      	ldr	r3, [pc, #88]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac34:	2202      	movs	r2, #2
 800ac36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac38:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac3e:	4b13      	ldr	r3, [pc, #76]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac44:	4b11      	ldr	r3, [pc, #68]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac4a:	4b10      	ldr	r3, [pc, #64]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac50:	4b0e      	ldr	r3, [pc, #56]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac56:	480d      	ldr	r0, [pc, #52]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac58:	f7f9 f9cd 	bl	8003ff6 <HAL_PCD_Init>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ac62:	f7f7 f927 	bl	8001eb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac66:	2180      	movs	r1, #128	; 0x80
 800ac68:	4808      	ldr	r0, [pc, #32]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac6a:	f7fa fb2a 	bl	80052c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac6e:	2240      	movs	r2, #64	; 0x40
 800ac70:	2100      	movs	r1, #0
 800ac72:	4806      	ldr	r0, [pc, #24]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac74:	f7fa fade 	bl	8005234 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac78:	2280      	movs	r2, #128	; 0x80
 800ac7a:	2101      	movs	r1, #1
 800ac7c:	4803      	ldr	r0, [pc, #12]	; (800ac8c <USBD_LL_Init+0x94>)
 800ac7e:	f7fa fad9 	bl	8005234 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	20000f30 	.word	0x20000f30

0800ac90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7f9 fac2 	bl	8004230 <HAL_PCD_Start>
 800acac:	4603      	mov	r3, r0
 800acae:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 f92a 	bl	800af0c <USBD_Get_USB_Status>
 800acb8:	4603      	mov	r3, r0
 800acba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	4608      	mov	r0, r1
 800acd0:	4611      	mov	r1, r2
 800acd2:	461a      	mov	r2, r3
 800acd4:	4603      	mov	r3, r0
 800acd6:	70fb      	strb	r3, [r7, #3]
 800acd8:	460b      	mov	r3, r1
 800acda:	70bb      	strb	r3, [r7, #2]
 800acdc:	4613      	mov	r3, r2
 800acde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800acee:	78bb      	ldrb	r3, [r7, #2]
 800acf0:	883a      	ldrh	r2, [r7, #0]
 800acf2:	78f9      	ldrb	r1, [r7, #3]
 800acf4:	f7f9 fea6 	bl	8004a44 <HAL_PCD_EP_Open>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 f904 	bl	800af0c <USBD_Get_USB_Status>
 800ad04:	4603      	mov	r3, r0
 800ad06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ad08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad2c:	78fa      	ldrb	r2, [r7, #3]
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7f9 feef 	bl	8004b14 <HAL_PCD_EP_Close>
 800ad36:	4603      	mov	r3, r0
 800ad38:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800ad3a:	7bfb      	ldrb	r3, [r7, #15]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 f8e5 	bl	800af0c <USBD_Get_USB_Status>
 800ad42:	4603      	mov	r3, r0
 800ad44:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad6a:	78fa      	ldrb	r2, [r7, #3]
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7f9 ffc7 	bl	8004d02 <HAL_PCD_EP_SetStall>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 f8c6 	bl	800af0c <USBD_Get_USB_Status>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	460b      	mov	r3, r1
 800ad98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ada8:	78fa      	ldrb	r2, [r7, #3]
 800adaa:	4611      	mov	r1, r2
 800adac:	4618      	mov	r0, r3
 800adae:	f7fa f80c 	bl	8004dca <HAL_PCD_EP_ClrStall>
 800adb2:	4603      	mov	r3, r0
 800adb4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 f8a7 	bl	800af0c <USBD_Get_USB_Status>
 800adbe:	4603      	mov	r3, r0
 800adc0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adde:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800ade0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	da0b      	bge.n	800ae00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800ade8:	78fb      	ldrb	r3, [r7, #3]
 800adea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adee:	68f9      	ldr	r1, [r7, #12]
 800adf0:	4613      	mov	r3, r2
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	1a9b      	subs	r3, r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	440b      	add	r3, r1
 800adfa:	333e      	adds	r3, #62	; 0x3e
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	e00b      	b.n	800ae18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800ae00:	78fb      	ldrb	r3, [r7, #3]
 800ae02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae06:	68f9      	ldr	r1, [r7, #12]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	00db      	lsls	r3, r3, #3
 800ae0c:	1a9b      	subs	r3, r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	440b      	add	r3, r1
 800ae12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae3e:	78fa      	ldrb	r2, [r7, #3]
 800ae40:	4611      	mov	r1, r2
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7f9 fdd9 	bl	80049fa <HAL_PCD_SetAddress>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 f85c 	bl	800af0c <USBD_Get_USB_Status>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800ae58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b086      	sub	sp, #24
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	60f8      	str	r0, [r7, #12]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae80:	7af9      	ldrb	r1, [r7, #11]
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	f7f9 fef2 	bl	8004c6e <HAL_PCD_EP_Transmit>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f83b 	bl	800af0c <USBD_Get_USB_Status>
 800ae96:	4603      	mov	r3, r0
 800ae98:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800ae9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	607a      	str	r2, [r7, #4]
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aec2:	7af9      	ldrb	r1, [r7, #11]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	f7f9 fe6e 	bl	8004ba8 <HAL_PCD_EP_Receive>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f81a 	bl	800af0c <USBD_Get_USB_Status>
 800aed8:	4603      	mov	r3, r0
 800aeda:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800aedc:	7dbb      	ldrb	r3, [r7, #22]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	460b      	mov	r3, r1
 800aef0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aef8:	78fa      	ldrb	r2, [r7, #3]
 800aefa:	4611      	mov	r1, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7f9 fe9e 	bl	8004c3e <HAL_PCD_EP_GetRxCount>
 800af02:	4603      	mov	r3, r0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	4603      	mov	r3, r0
 800af14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af1a:	79fb      	ldrb	r3, [r7, #7]
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	d817      	bhi.n	800af50 <USBD_Get_USB_Status+0x44>
 800af20:	a201      	add	r2, pc, #4	; (adr r2, 800af28 <USBD_Get_USB_Status+0x1c>)
 800af22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af26:	bf00      	nop
 800af28:	0800af39 	.word	0x0800af39
 800af2c:	0800af3f 	.word	0x0800af3f
 800af30:	0800af45 	.word	0x0800af45
 800af34:	0800af4b 	.word	0x0800af4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	73fb      	strb	r3, [r7, #15]
    break;
 800af3c:	e00b      	b.n	800af56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af3e:	2303      	movs	r3, #3
 800af40:	73fb      	strb	r3, [r7, #15]
    break;
 800af42:	e008      	b.n	800af56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af44:	2301      	movs	r3, #1
 800af46:	73fb      	strb	r3, [r7, #15]
    break;
 800af48:	e005      	b.n	800af56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af4a:	2303      	movs	r3, #3
 800af4c:	73fb      	strb	r3, [r7, #15]
    break;
 800af4e:	e002      	b.n	800af56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af50:	2303      	movs	r3, #3
 800af52:	73fb      	strb	r3, [r7, #15]
    break;
 800af54:	bf00      	nop
  }
  return usb_status;
 800af56:	7bfb      	ldrb	r3, [r7, #15]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <__errno>:
 800af64:	4b01      	ldr	r3, [pc, #4]	; (800af6c <__errno+0x8>)
 800af66:	6818      	ldr	r0, [r3, #0]
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	200001e8 	.word	0x200001e8

0800af70 <__libc_init_array>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	4e0d      	ldr	r6, [pc, #52]	; (800afa8 <__libc_init_array+0x38>)
 800af74:	4c0d      	ldr	r4, [pc, #52]	; (800afac <__libc_init_array+0x3c>)
 800af76:	1ba4      	subs	r4, r4, r6
 800af78:	10a4      	asrs	r4, r4, #2
 800af7a:	2500      	movs	r5, #0
 800af7c:	42a5      	cmp	r5, r4
 800af7e:	d109      	bne.n	800af94 <__libc_init_array+0x24>
 800af80:	4e0b      	ldr	r6, [pc, #44]	; (800afb0 <__libc_init_array+0x40>)
 800af82:	4c0c      	ldr	r4, [pc, #48]	; (800afb4 <__libc_init_array+0x44>)
 800af84:	f007 fc5e 	bl	8012844 <_init>
 800af88:	1ba4      	subs	r4, r4, r6
 800af8a:	10a4      	asrs	r4, r4, #2
 800af8c:	2500      	movs	r5, #0
 800af8e:	42a5      	cmp	r5, r4
 800af90:	d105      	bne.n	800af9e <__libc_init_array+0x2e>
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af98:	4798      	blx	r3
 800af9a:	3501      	adds	r5, #1
 800af9c:	e7ee      	b.n	800af7c <__libc_init_array+0xc>
 800af9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afa2:	4798      	blx	r3
 800afa4:	3501      	adds	r5, #1
 800afa6:	e7f2      	b.n	800af8e <__libc_init_array+0x1e>
 800afa8:	08012fb8 	.word	0x08012fb8
 800afac:	08012fb8 	.word	0x08012fb8
 800afb0:	08012fb8 	.word	0x08012fb8
 800afb4:	08012fbc 	.word	0x08012fbc

0800afb8 <malloc>:
 800afb8:	4b02      	ldr	r3, [pc, #8]	; (800afc4 <malloc+0xc>)
 800afba:	4601      	mov	r1, r0
 800afbc:	6818      	ldr	r0, [r3, #0]
 800afbe:	f000 b861 	b.w	800b084 <_malloc_r>
 800afc2:	bf00      	nop
 800afc4:	200001e8 	.word	0x200001e8

0800afc8 <free>:
 800afc8:	4b02      	ldr	r3, [pc, #8]	; (800afd4 <free+0xc>)
 800afca:	4601      	mov	r1, r0
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	f000 b80b 	b.w	800afe8 <_free_r>
 800afd2:	bf00      	nop
 800afd4:	200001e8 	.word	0x200001e8

0800afd8 <memset>:
 800afd8:	4402      	add	r2, r0
 800afda:	4603      	mov	r3, r0
 800afdc:	4293      	cmp	r3, r2
 800afde:	d100      	bne.n	800afe2 <memset+0xa>
 800afe0:	4770      	bx	lr
 800afe2:	f803 1b01 	strb.w	r1, [r3], #1
 800afe6:	e7f9      	b.n	800afdc <memset+0x4>

0800afe8 <_free_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4605      	mov	r5, r0
 800afec:	2900      	cmp	r1, #0
 800afee:	d045      	beq.n	800b07c <_free_r+0x94>
 800aff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aff4:	1f0c      	subs	r4, r1, #4
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	bfb8      	it	lt
 800affa:	18e4      	addlt	r4, r4, r3
 800affc:	f003 fb39 	bl	800e672 <__malloc_lock>
 800b000:	4a1f      	ldr	r2, [pc, #124]	; (800b080 <_free_r+0x98>)
 800b002:	6813      	ldr	r3, [r2, #0]
 800b004:	4610      	mov	r0, r2
 800b006:	b933      	cbnz	r3, 800b016 <_free_r+0x2e>
 800b008:	6063      	str	r3, [r4, #4]
 800b00a:	6014      	str	r4, [r2, #0]
 800b00c:	4628      	mov	r0, r5
 800b00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b012:	f003 bb2f 	b.w	800e674 <__malloc_unlock>
 800b016:	42a3      	cmp	r3, r4
 800b018:	d90c      	bls.n	800b034 <_free_r+0x4c>
 800b01a:	6821      	ldr	r1, [r4, #0]
 800b01c:	1862      	adds	r2, r4, r1
 800b01e:	4293      	cmp	r3, r2
 800b020:	bf04      	itt	eq
 800b022:	681a      	ldreq	r2, [r3, #0]
 800b024:	685b      	ldreq	r3, [r3, #4]
 800b026:	6063      	str	r3, [r4, #4]
 800b028:	bf04      	itt	eq
 800b02a:	1852      	addeq	r2, r2, r1
 800b02c:	6022      	streq	r2, [r4, #0]
 800b02e:	6004      	str	r4, [r0, #0]
 800b030:	e7ec      	b.n	800b00c <_free_r+0x24>
 800b032:	4613      	mov	r3, r2
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	b10a      	cbz	r2, 800b03c <_free_r+0x54>
 800b038:	42a2      	cmp	r2, r4
 800b03a:	d9fa      	bls.n	800b032 <_free_r+0x4a>
 800b03c:	6819      	ldr	r1, [r3, #0]
 800b03e:	1858      	adds	r0, r3, r1
 800b040:	42a0      	cmp	r0, r4
 800b042:	d10b      	bne.n	800b05c <_free_r+0x74>
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	4401      	add	r1, r0
 800b048:	1858      	adds	r0, r3, r1
 800b04a:	4282      	cmp	r2, r0
 800b04c:	6019      	str	r1, [r3, #0]
 800b04e:	d1dd      	bne.n	800b00c <_free_r+0x24>
 800b050:	6810      	ldr	r0, [r2, #0]
 800b052:	6852      	ldr	r2, [r2, #4]
 800b054:	605a      	str	r2, [r3, #4]
 800b056:	4401      	add	r1, r0
 800b058:	6019      	str	r1, [r3, #0]
 800b05a:	e7d7      	b.n	800b00c <_free_r+0x24>
 800b05c:	d902      	bls.n	800b064 <_free_r+0x7c>
 800b05e:	230c      	movs	r3, #12
 800b060:	602b      	str	r3, [r5, #0]
 800b062:	e7d3      	b.n	800b00c <_free_r+0x24>
 800b064:	6820      	ldr	r0, [r4, #0]
 800b066:	1821      	adds	r1, r4, r0
 800b068:	428a      	cmp	r2, r1
 800b06a:	bf04      	itt	eq
 800b06c:	6811      	ldreq	r1, [r2, #0]
 800b06e:	6852      	ldreq	r2, [r2, #4]
 800b070:	6062      	str	r2, [r4, #4]
 800b072:	bf04      	itt	eq
 800b074:	1809      	addeq	r1, r1, r0
 800b076:	6021      	streq	r1, [r4, #0]
 800b078:	605c      	str	r4, [r3, #4]
 800b07a:	e7c7      	b.n	800b00c <_free_r+0x24>
 800b07c:	bd38      	pop	{r3, r4, r5, pc}
 800b07e:	bf00      	nop
 800b080:	200003e8 	.word	0x200003e8

0800b084 <_malloc_r>:
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	1ccd      	adds	r5, r1, #3
 800b088:	f025 0503 	bic.w	r5, r5, #3
 800b08c:	3508      	adds	r5, #8
 800b08e:	2d0c      	cmp	r5, #12
 800b090:	bf38      	it	cc
 800b092:	250c      	movcc	r5, #12
 800b094:	2d00      	cmp	r5, #0
 800b096:	4606      	mov	r6, r0
 800b098:	db01      	blt.n	800b09e <_malloc_r+0x1a>
 800b09a:	42a9      	cmp	r1, r5
 800b09c:	d903      	bls.n	800b0a6 <_malloc_r+0x22>
 800b09e:	230c      	movs	r3, #12
 800b0a0:	6033      	str	r3, [r6, #0]
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	bd70      	pop	{r4, r5, r6, pc}
 800b0a6:	f003 fae4 	bl	800e672 <__malloc_lock>
 800b0aa:	4a21      	ldr	r2, [pc, #132]	; (800b130 <_malloc_r+0xac>)
 800b0ac:	6814      	ldr	r4, [r2, #0]
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	b991      	cbnz	r1, 800b0d8 <_malloc_r+0x54>
 800b0b2:	4c20      	ldr	r4, [pc, #128]	; (800b134 <_malloc_r+0xb0>)
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	b91b      	cbnz	r3, 800b0c0 <_malloc_r+0x3c>
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f000 fef7 	bl	800beac <_sbrk_r>
 800b0be:	6020      	str	r0, [r4, #0]
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f000 fef2 	bl	800beac <_sbrk_r>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d124      	bne.n	800b116 <_malloc_r+0x92>
 800b0cc:	230c      	movs	r3, #12
 800b0ce:	6033      	str	r3, [r6, #0]
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f003 facf 	bl	800e674 <__malloc_unlock>
 800b0d6:	e7e4      	b.n	800b0a2 <_malloc_r+0x1e>
 800b0d8:	680b      	ldr	r3, [r1, #0]
 800b0da:	1b5b      	subs	r3, r3, r5
 800b0dc:	d418      	bmi.n	800b110 <_malloc_r+0x8c>
 800b0de:	2b0b      	cmp	r3, #11
 800b0e0:	d90f      	bls.n	800b102 <_malloc_r+0x7e>
 800b0e2:	600b      	str	r3, [r1, #0]
 800b0e4:	50cd      	str	r5, [r1, r3]
 800b0e6:	18cc      	adds	r4, r1, r3
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f003 fac3 	bl	800e674 <__malloc_unlock>
 800b0ee:	f104 000b 	add.w	r0, r4, #11
 800b0f2:	1d23      	adds	r3, r4, #4
 800b0f4:	f020 0007 	bic.w	r0, r0, #7
 800b0f8:	1ac3      	subs	r3, r0, r3
 800b0fa:	d0d3      	beq.n	800b0a4 <_malloc_r+0x20>
 800b0fc:	425a      	negs	r2, r3
 800b0fe:	50e2      	str	r2, [r4, r3]
 800b100:	e7d0      	b.n	800b0a4 <_malloc_r+0x20>
 800b102:	428c      	cmp	r4, r1
 800b104:	684b      	ldr	r3, [r1, #4]
 800b106:	bf16      	itet	ne
 800b108:	6063      	strne	r3, [r4, #4]
 800b10a:	6013      	streq	r3, [r2, #0]
 800b10c:	460c      	movne	r4, r1
 800b10e:	e7eb      	b.n	800b0e8 <_malloc_r+0x64>
 800b110:	460c      	mov	r4, r1
 800b112:	6849      	ldr	r1, [r1, #4]
 800b114:	e7cc      	b.n	800b0b0 <_malloc_r+0x2c>
 800b116:	1cc4      	adds	r4, r0, #3
 800b118:	f024 0403 	bic.w	r4, r4, #3
 800b11c:	42a0      	cmp	r0, r4
 800b11e:	d005      	beq.n	800b12c <_malloc_r+0xa8>
 800b120:	1a21      	subs	r1, r4, r0
 800b122:	4630      	mov	r0, r6
 800b124:	f000 fec2 	bl	800beac <_sbrk_r>
 800b128:	3001      	adds	r0, #1
 800b12a:	d0cf      	beq.n	800b0cc <_malloc_r+0x48>
 800b12c:	6025      	str	r5, [r4, #0]
 800b12e:	e7db      	b.n	800b0e8 <_malloc_r+0x64>
 800b130:	200003e8 	.word	0x200003e8
 800b134:	200003ec 	.word	0x200003ec

0800b138 <__cvt>:
 800b138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b13c:	ec55 4b10 	vmov	r4, r5, d0
 800b140:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b142:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b146:	2d00      	cmp	r5, #0
 800b148:	460e      	mov	r6, r1
 800b14a:	4691      	mov	r9, r2
 800b14c:	4619      	mov	r1, r3
 800b14e:	bfb8      	it	lt
 800b150:	4622      	movlt	r2, r4
 800b152:	462b      	mov	r3, r5
 800b154:	f027 0720 	bic.w	r7, r7, #32
 800b158:	bfbb      	ittet	lt
 800b15a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b15e:	461d      	movlt	r5, r3
 800b160:	2300      	movge	r3, #0
 800b162:	232d      	movlt	r3, #45	; 0x2d
 800b164:	bfb8      	it	lt
 800b166:	4614      	movlt	r4, r2
 800b168:	2f46      	cmp	r7, #70	; 0x46
 800b16a:	700b      	strb	r3, [r1, #0]
 800b16c:	d004      	beq.n	800b178 <__cvt+0x40>
 800b16e:	2f45      	cmp	r7, #69	; 0x45
 800b170:	d100      	bne.n	800b174 <__cvt+0x3c>
 800b172:	3601      	adds	r6, #1
 800b174:	2102      	movs	r1, #2
 800b176:	e000      	b.n	800b17a <__cvt+0x42>
 800b178:	2103      	movs	r1, #3
 800b17a:	ab03      	add	r3, sp, #12
 800b17c:	9301      	str	r3, [sp, #4]
 800b17e:	ab02      	add	r3, sp, #8
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	4632      	mov	r2, r6
 800b184:	4653      	mov	r3, sl
 800b186:	ec45 4b10 	vmov	d0, r4, r5
 800b18a:	f001 ff65 	bl	800d058 <_dtoa_r>
 800b18e:	2f47      	cmp	r7, #71	; 0x47
 800b190:	4680      	mov	r8, r0
 800b192:	d102      	bne.n	800b19a <__cvt+0x62>
 800b194:	f019 0f01 	tst.w	r9, #1
 800b198:	d026      	beq.n	800b1e8 <__cvt+0xb0>
 800b19a:	2f46      	cmp	r7, #70	; 0x46
 800b19c:	eb08 0906 	add.w	r9, r8, r6
 800b1a0:	d111      	bne.n	800b1c6 <__cvt+0x8e>
 800b1a2:	f898 3000 	ldrb.w	r3, [r8]
 800b1a6:	2b30      	cmp	r3, #48	; 0x30
 800b1a8:	d10a      	bne.n	800b1c0 <__cvt+0x88>
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	f7f5 fc91 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1b6:	b918      	cbnz	r0, 800b1c0 <__cvt+0x88>
 800b1b8:	f1c6 0601 	rsb	r6, r6, #1
 800b1bc:	f8ca 6000 	str.w	r6, [sl]
 800b1c0:	f8da 3000 	ldr.w	r3, [sl]
 800b1c4:	4499      	add	r9, r3
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	f7f5 fc83 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1d2:	b938      	cbnz	r0, 800b1e4 <__cvt+0xac>
 800b1d4:	2230      	movs	r2, #48	; 0x30
 800b1d6:	9b03      	ldr	r3, [sp, #12]
 800b1d8:	454b      	cmp	r3, r9
 800b1da:	d205      	bcs.n	800b1e8 <__cvt+0xb0>
 800b1dc:	1c59      	adds	r1, r3, #1
 800b1de:	9103      	str	r1, [sp, #12]
 800b1e0:	701a      	strb	r2, [r3, #0]
 800b1e2:	e7f8      	b.n	800b1d6 <__cvt+0x9e>
 800b1e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1ec:	eba3 0308 	sub.w	r3, r3, r8
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	b004      	add	sp, #16
 800b1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b1fa <__exponent>:
 800b1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	4604      	mov	r4, r0
 800b200:	bfba      	itte	lt
 800b202:	4249      	neglt	r1, r1
 800b204:	232d      	movlt	r3, #45	; 0x2d
 800b206:	232b      	movge	r3, #43	; 0x2b
 800b208:	2909      	cmp	r1, #9
 800b20a:	f804 2b02 	strb.w	r2, [r4], #2
 800b20e:	7043      	strb	r3, [r0, #1]
 800b210:	dd20      	ble.n	800b254 <__exponent+0x5a>
 800b212:	f10d 0307 	add.w	r3, sp, #7
 800b216:	461f      	mov	r7, r3
 800b218:	260a      	movs	r6, #10
 800b21a:	fb91 f5f6 	sdiv	r5, r1, r6
 800b21e:	fb06 1115 	mls	r1, r6, r5, r1
 800b222:	3130      	adds	r1, #48	; 0x30
 800b224:	2d09      	cmp	r5, #9
 800b226:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b22a:	f103 32ff 	add.w	r2, r3, #4294967295
 800b22e:	4629      	mov	r1, r5
 800b230:	dc09      	bgt.n	800b246 <__exponent+0x4c>
 800b232:	3130      	adds	r1, #48	; 0x30
 800b234:	3b02      	subs	r3, #2
 800b236:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b23a:	42bb      	cmp	r3, r7
 800b23c:	4622      	mov	r2, r4
 800b23e:	d304      	bcc.n	800b24a <__exponent+0x50>
 800b240:	1a10      	subs	r0, r2, r0
 800b242:	b003      	add	sp, #12
 800b244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b246:	4613      	mov	r3, r2
 800b248:	e7e7      	b.n	800b21a <__exponent+0x20>
 800b24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b24e:	f804 2b01 	strb.w	r2, [r4], #1
 800b252:	e7f2      	b.n	800b23a <__exponent+0x40>
 800b254:	2330      	movs	r3, #48	; 0x30
 800b256:	4419      	add	r1, r3
 800b258:	7083      	strb	r3, [r0, #2]
 800b25a:	1d02      	adds	r2, r0, #4
 800b25c:	70c1      	strb	r1, [r0, #3]
 800b25e:	e7ef      	b.n	800b240 <__exponent+0x46>

0800b260 <_printf_float>:
 800b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	b08d      	sub	sp, #52	; 0x34
 800b266:	460c      	mov	r4, r1
 800b268:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b26c:	4616      	mov	r6, r2
 800b26e:	461f      	mov	r7, r3
 800b270:	4605      	mov	r5, r0
 800b272:	f003 f95d 	bl	800e530 <_localeconv_r>
 800b276:	6803      	ldr	r3, [r0, #0]
 800b278:	9304      	str	r3, [sp, #16]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7f4 ffb0 	bl	80001e0 <strlen>
 800b280:	2300      	movs	r3, #0
 800b282:	930a      	str	r3, [sp, #40]	; 0x28
 800b284:	f8d8 3000 	ldr.w	r3, [r8]
 800b288:	9005      	str	r0, [sp, #20]
 800b28a:	3307      	adds	r3, #7
 800b28c:	f023 0307 	bic.w	r3, r3, #7
 800b290:	f103 0208 	add.w	r2, r3, #8
 800b294:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b298:	f8d4 b000 	ldr.w	fp, [r4]
 800b29c:	f8c8 2000 	str.w	r2, [r8]
 800b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b2a8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b2ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2b0:	9307      	str	r3, [sp, #28]
 800b2b2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ba:	4ba7      	ldr	r3, [pc, #668]	; (800b558 <_printf_float+0x2f8>)
 800b2bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2c0:	f7f5 fc3c 	bl	8000b3c <__aeabi_dcmpun>
 800b2c4:	bb70      	cbnz	r0, 800b324 <_printf_float+0xc4>
 800b2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ca:	4ba3      	ldr	r3, [pc, #652]	; (800b558 <_printf_float+0x2f8>)
 800b2cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2d0:	f7f5 fc16 	bl	8000b00 <__aeabi_dcmple>
 800b2d4:	bb30      	cbnz	r0, 800b324 <_printf_float+0xc4>
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4640      	mov	r0, r8
 800b2dc:	4649      	mov	r1, r9
 800b2de:	f7f5 fc05 	bl	8000aec <__aeabi_dcmplt>
 800b2e2:	b110      	cbz	r0, 800b2ea <_printf_float+0x8a>
 800b2e4:	232d      	movs	r3, #45	; 0x2d
 800b2e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2ea:	4a9c      	ldr	r2, [pc, #624]	; (800b55c <_printf_float+0x2fc>)
 800b2ec:	4b9c      	ldr	r3, [pc, #624]	; (800b560 <_printf_float+0x300>)
 800b2ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b2f2:	bf8c      	ite	hi
 800b2f4:	4690      	movhi	r8, r2
 800b2f6:	4698      	movls	r8, r3
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	f02b 0204 	bic.w	r2, fp, #4
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	6022      	str	r2, [r4, #0]
 800b302:	f04f 0900 	mov.w	r9, #0
 800b306:	9700      	str	r7, [sp, #0]
 800b308:	4633      	mov	r3, r6
 800b30a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b30c:	4621      	mov	r1, r4
 800b30e:	4628      	mov	r0, r5
 800b310:	f000 f9e6 	bl	800b6e0 <_printf_common>
 800b314:	3001      	adds	r0, #1
 800b316:	f040 808d 	bne.w	800b434 <_printf_float+0x1d4>
 800b31a:	f04f 30ff 	mov.w	r0, #4294967295
 800b31e:	b00d      	add	sp, #52	; 0x34
 800b320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b324:	4642      	mov	r2, r8
 800b326:	464b      	mov	r3, r9
 800b328:	4640      	mov	r0, r8
 800b32a:	4649      	mov	r1, r9
 800b32c:	f7f5 fc06 	bl	8000b3c <__aeabi_dcmpun>
 800b330:	b110      	cbz	r0, 800b338 <_printf_float+0xd8>
 800b332:	4a8c      	ldr	r2, [pc, #560]	; (800b564 <_printf_float+0x304>)
 800b334:	4b8c      	ldr	r3, [pc, #560]	; (800b568 <_printf_float+0x308>)
 800b336:	e7da      	b.n	800b2ee <_printf_float+0x8e>
 800b338:	6861      	ldr	r1, [r4, #4]
 800b33a:	1c4b      	adds	r3, r1, #1
 800b33c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b340:	a80a      	add	r0, sp, #40	; 0x28
 800b342:	d13e      	bne.n	800b3c2 <_printf_float+0x162>
 800b344:	2306      	movs	r3, #6
 800b346:	6063      	str	r3, [r4, #4]
 800b348:	2300      	movs	r3, #0
 800b34a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b34e:	ab09      	add	r3, sp, #36	; 0x24
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	ec49 8b10 	vmov	d0, r8, r9
 800b356:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b35a:	6022      	str	r2, [r4, #0]
 800b35c:	f8cd a004 	str.w	sl, [sp, #4]
 800b360:	6861      	ldr	r1, [r4, #4]
 800b362:	4628      	mov	r0, r5
 800b364:	f7ff fee8 	bl	800b138 <__cvt>
 800b368:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b36c:	2b47      	cmp	r3, #71	; 0x47
 800b36e:	4680      	mov	r8, r0
 800b370:	d109      	bne.n	800b386 <_printf_float+0x126>
 800b372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b374:	1cd8      	adds	r0, r3, #3
 800b376:	db02      	blt.n	800b37e <_printf_float+0x11e>
 800b378:	6862      	ldr	r2, [r4, #4]
 800b37a:	4293      	cmp	r3, r2
 800b37c:	dd47      	ble.n	800b40e <_printf_float+0x1ae>
 800b37e:	f1aa 0a02 	sub.w	sl, sl, #2
 800b382:	fa5f fa8a 	uxtb.w	sl, sl
 800b386:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b38a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b38c:	d824      	bhi.n	800b3d8 <_printf_float+0x178>
 800b38e:	3901      	subs	r1, #1
 800b390:	4652      	mov	r2, sl
 800b392:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b396:	9109      	str	r1, [sp, #36]	; 0x24
 800b398:	f7ff ff2f 	bl	800b1fa <__exponent>
 800b39c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b39e:	1813      	adds	r3, r2, r0
 800b3a0:	2a01      	cmp	r2, #1
 800b3a2:	4681      	mov	r9, r0
 800b3a4:	6123      	str	r3, [r4, #16]
 800b3a6:	dc02      	bgt.n	800b3ae <_printf_float+0x14e>
 800b3a8:	6822      	ldr	r2, [r4, #0]
 800b3aa:	07d1      	lsls	r1, r2, #31
 800b3ac:	d501      	bpl.n	800b3b2 <_printf_float+0x152>
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0a5      	beq.n	800b306 <_printf_float+0xa6>
 800b3ba:	232d      	movs	r3, #45	; 0x2d
 800b3bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3c0:	e7a1      	b.n	800b306 <_printf_float+0xa6>
 800b3c2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b3c6:	f000 8177 	beq.w	800b6b8 <_printf_float+0x458>
 800b3ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b3ce:	d1bb      	bne.n	800b348 <_printf_float+0xe8>
 800b3d0:	2900      	cmp	r1, #0
 800b3d2:	d1b9      	bne.n	800b348 <_printf_float+0xe8>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e7b6      	b.n	800b346 <_printf_float+0xe6>
 800b3d8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b3dc:	d119      	bne.n	800b412 <_printf_float+0x1b2>
 800b3de:	2900      	cmp	r1, #0
 800b3e0:	6863      	ldr	r3, [r4, #4]
 800b3e2:	dd0c      	ble.n	800b3fe <_printf_float+0x19e>
 800b3e4:	6121      	str	r1, [r4, #16]
 800b3e6:	b913      	cbnz	r3, 800b3ee <_printf_float+0x18e>
 800b3e8:	6822      	ldr	r2, [r4, #0]
 800b3ea:	07d2      	lsls	r2, r2, #31
 800b3ec:	d502      	bpl.n	800b3f4 <_printf_float+0x194>
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	440b      	add	r3, r1
 800b3f2:	6123      	str	r3, [r4, #16]
 800b3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f6:	65a3      	str	r3, [r4, #88]	; 0x58
 800b3f8:	f04f 0900 	mov.w	r9, #0
 800b3fc:	e7d9      	b.n	800b3b2 <_printf_float+0x152>
 800b3fe:	b913      	cbnz	r3, 800b406 <_printf_float+0x1a6>
 800b400:	6822      	ldr	r2, [r4, #0]
 800b402:	07d0      	lsls	r0, r2, #31
 800b404:	d501      	bpl.n	800b40a <_printf_float+0x1aa>
 800b406:	3302      	adds	r3, #2
 800b408:	e7f3      	b.n	800b3f2 <_printf_float+0x192>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e7f1      	b.n	800b3f2 <_printf_float+0x192>
 800b40e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b412:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b416:	4293      	cmp	r3, r2
 800b418:	db05      	blt.n	800b426 <_printf_float+0x1c6>
 800b41a:	6822      	ldr	r2, [r4, #0]
 800b41c:	6123      	str	r3, [r4, #16]
 800b41e:	07d1      	lsls	r1, r2, #31
 800b420:	d5e8      	bpl.n	800b3f4 <_printf_float+0x194>
 800b422:	3301      	adds	r3, #1
 800b424:	e7e5      	b.n	800b3f2 <_printf_float+0x192>
 800b426:	2b00      	cmp	r3, #0
 800b428:	bfd4      	ite	le
 800b42a:	f1c3 0302 	rsble	r3, r3, #2
 800b42e:	2301      	movgt	r3, #1
 800b430:	4413      	add	r3, r2
 800b432:	e7de      	b.n	800b3f2 <_printf_float+0x192>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	055a      	lsls	r2, r3, #21
 800b438:	d407      	bmi.n	800b44a <_printf_float+0x1ea>
 800b43a:	6923      	ldr	r3, [r4, #16]
 800b43c:	4642      	mov	r2, r8
 800b43e:	4631      	mov	r1, r6
 800b440:	4628      	mov	r0, r5
 800b442:	47b8      	blx	r7
 800b444:	3001      	adds	r0, #1
 800b446:	d12b      	bne.n	800b4a0 <_printf_float+0x240>
 800b448:	e767      	b.n	800b31a <_printf_float+0xba>
 800b44a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b44e:	f240 80dc 	bls.w	800b60a <_printf_float+0x3aa>
 800b452:	2200      	movs	r2, #0
 800b454:	2300      	movs	r3, #0
 800b456:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b45a:	f7f5 fb3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b45e:	2800      	cmp	r0, #0
 800b460:	d033      	beq.n	800b4ca <_printf_float+0x26a>
 800b462:	2301      	movs	r3, #1
 800b464:	4a41      	ldr	r2, [pc, #260]	; (800b56c <_printf_float+0x30c>)
 800b466:	4631      	mov	r1, r6
 800b468:	4628      	mov	r0, r5
 800b46a:	47b8      	blx	r7
 800b46c:	3001      	adds	r0, #1
 800b46e:	f43f af54 	beq.w	800b31a <_printf_float+0xba>
 800b472:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b476:	429a      	cmp	r2, r3
 800b478:	db02      	blt.n	800b480 <_printf_float+0x220>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	07d8      	lsls	r0, r3, #31
 800b47e:	d50f      	bpl.n	800b4a0 <_printf_float+0x240>
 800b480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b484:	4631      	mov	r1, r6
 800b486:	4628      	mov	r0, r5
 800b488:	47b8      	blx	r7
 800b48a:	3001      	adds	r0, #1
 800b48c:	f43f af45 	beq.w	800b31a <_printf_float+0xba>
 800b490:	f04f 0800 	mov.w	r8, #0
 800b494:	f104 091a 	add.w	r9, r4, #26
 800b498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b49a:	3b01      	subs	r3, #1
 800b49c:	4543      	cmp	r3, r8
 800b49e:	dc09      	bgt.n	800b4b4 <_printf_float+0x254>
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	079b      	lsls	r3, r3, #30
 800b4a4:	f100 8103 	bmi.w	800b6ae <_printf_float+0x44e>
 800b4a8:	68e0      	ldr	r0, [r4, #12]
 800b4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ac:	4298      	cmp	r0, r3
 800b4ae:	bfb8      	it	lt
 800b4b0:	4618      	movlt	r0, r3
 800b4b2:	e734      	b.n	800b31e <_printf_float+0xbe>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	464a      	mov	r2, r9
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	47b8      	blx	r7
 800b4be:	3001      	adds	r0, #1
 800b4c0:	f43f af2b 	beq.w	800b31a <_printf_float+0xba>
 800b4c4:	f108 0801 	add.w	r8, r8, #1
 800b4c8:	e7e6      	b.n	800b498 <_printf_float+0x238>
 800b4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	dc2b      	bgt.n	800b528 <_printf_float+0x2c8>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	4a26      	ldr	r2, [pc, #152]	; (800b56c <_printf_float+0x30c>)
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	47b8      	blx	r7
 800b4da:	3001      	adds	r0, #1
 800b4dc:	f43f af1d 	beq.w	800b31a <_printf_float+0xba>
 800b4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e2:	b923      	cbnz	r3, 800b4ee <_printf_float+0x28e>
 800b4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4e6:	b913      	cbnz	r3, 800b4ee <_printf_float+0x28e>
 800b4e8:	6823      	ldr	r3, [r4, #0]
 800b4ea:	07d9      	lsls	r1, r3, #31
 800b4ec:	d5d8      	bpl.n	800b4a0 <_printf_float+0x240>
 800b4ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b8      	blx	r7
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	f43f af0e 	beq.w	800b31a <_printf_float+0xba>
 800b4fe:	f04f 0900 	mov.w	r9, #0
 800b502:	f104 0a1a 	add.w	sl, r4, #26
 800b506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b508:	425b      	negs	r3, r3
 800b50a:	454b      	cmp	r3, r9
 800b50c:	dc01      	bgt.n	800b512 <_printf_float+0x2b2>
 800b50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b510:	e794      	b.n	800b43c <_printf_float+0x1dc>
 800b512:	2301      	movs	r3, #1
 800b514:	4652      	mov	r2, sl
 800b516:	4631      	mov	r1, r6
 800b518:	4628      	mov	r0, r5
 800b51a:	47b8      	blx	r7
 800b51c:	3001      	adds	r0, #1
 800b51e:	f43f aefc 	beq.w	800b31a <_printf_float+0xba>
 800b522:	f109 0901 	add.w	r9, r9, #1
 800b526:	e7ee      	b.n	800b506 <_printf_float+0x2a6>
 800b528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b52a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b52c:	429a      	cmp	r2, r3
 800b52e:	bfa8      	it	ge
 800b530:	461a      	movge	r2, r3
 800b532:	2a00      	cmp	r2, #0
 800b534:	4691      	mov	r9, r2
 800b536:	dd07      	ble.n	800b548 <_printf_float+0x2e8>
 800b538:	4613      	mov	r3, r2
 800b53a:	4631      	mov	r1, r6
 800b53c:	4642      	mov	r2, r8
 800b53e:	4628      	mov	r0, r5
 800b540:	47b8      	blx	r7
 800b542:	3001      	adds	r0, #1
 800b544:	f43f aee9 	beq.w	800b31a <_printf_float+0xba>
 800b548:	f104 031a 	add.w	r3, r4, #26
 800b54c:	f04f 0b00 	mov.w	fp, #0
 800b550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b554:	9306      	str	r3, [sp, #24]
 800b556:	e015      	b.n	800b584 <_printf_float+0x324>
 800b558:	7fefffff 	.word	0x7fefffff
 800b55c:	08012a1c 	.word	0x08012a1c
 800b560:	08012a18 	.word	0x08012a18
 800b564:	08012a24 	.word	0x08012a24
 800b568:	08012a20 	.word	0x08012a20
 800b56c:	08012c43 	.word	0x08012c43
 800b570:	2301      	movs	r3, #1
 800b572:	9a06      	ldr	r2, [sp, #24]
 800b574:	4631      	mov	r1, r6
 800b576:	4628      	mov	r0, r5
 800b578:	47b8      	blx	r7
 800b57a:	3001      	adds	r0, #1
 800b57c:	f43f aecd 	beq.w	800b31a <_printf_float+0xba>
 800b580:	f10b 0b01 	add.w	fp, fp, #1
 800b584:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b588:	ebaa 0309 	sub.w	r3, sl, r9
 800b58c:	455b      	cmp	r3, fp
 800b58e:	dcef      	bgt.n	800b570 <_printf_float+0x310>
 800b590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b594:	429a      	cmp	r2, r3
 800b596:	44d0      	add	r8, sl
 800b598:	db15      	blt.n	800b5c6 <_printf_float+0x366>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	07da      	lsls	r2, r3, #31
 800b59e:	d412      	bmi.n	800b5c6 <_printf_float+0x366>
 800b5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5a4:	eba3 020a 	sub.w	r2, r3, sl
 800b5a8:	eba3 0a01 	sub.w	sl, r3, r1
 800b5ac:	4592      	cmp	sl, r2
 800b5ae:	bfa8      	it	ge
 800b5b0:	4692      	movge	sl, r2
 800b5b2:	f1ba 0f00 	cmp.w	sl, #0
 800b5b6:	dc0e      	bgt.n	800b5d6 <_printf_float+0x376>
 800b5b8:	f04f 0800 	mov.w	r8, #0
 800b5bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5c0:	f104 091a 	add.w	r9, r4, #26
 800b5c4:	e019      	b.n	800b5fa <_printf_float+0x39a>
 800b5c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b8      	blx	r7
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	d1e5      	bne.n	800b5a0 <_printf_float+0x340>
 800b5d4:	e6a1      	b.n	800b31a <_printf_float+0xba>
 800b5d6:	4653      	mov	r3, sl
 800b5d8:	4642      	mov	r2, r8
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4628      	mov	r0, r5
 800b5de:	47b8      	blx	r7
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d1e9      	bne.n	800b5b8 <_printf_float+0x358>
 800b5e4:	e699      	b.n	800b31a <_printf_float+0xba>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	464a      	mov	r2, r9
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	47b8      	blx	r7
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	f43f ae92 	beq.w	800b31a <_printf_float+0xba>
 800b5f6:	f108 0801 	add.w	r8, r8, #1
 800b5fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5fe:	1a9b      	subs	r3, r3, r2
 800b600:	eba3 030a 	sub.w	r3, r3, sl
 800b604:	4543      	cmp	r3, r8
 800b606:	dcee      	bgt.n	800b5e6 <_printf_float+0x386>
 800b608:	e74a      	b.n	800b4a0 <_printf_float+0x240>
 800b60a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b60c:	2a01      	cmp	r2, #1
 800b60e:	dc01      	bgt.n	800b614 <_printf_float+0x3b4>
 800b610:	07db      	lsls	r3, r3, #31
 800b612:	d53a      	bpl.n	800b68a <_printf_float+0x42a>
 800b614:	2301      	movs	r3, #1
 800b616:	4642      	mov	r2, r8
 800b618:	4631      	mov	r1, r6
 800b61a:	4628      	mov	r0, r5
 800b61c:	47b8      	blx	r7
 800b61e:	3001      	adds	r0, #1
 800b620:	f43f ae7b 	beq.w	800b31a <_printf_float+0xba>
 800b624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b628:	4631      	mov	r1, r6
 800b62a:	4628      	mov	r0, r5
 800b62c:	47b8      	blx	r7
 800b62e:	3001      	adds	r0, #1
 800b630:	f108 0801 	add.w	r8, r8, #1
 800b634:	f43f ae71 	beq.w	800b31a <_printf_float+0xba>
 800b638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b63a:	2200      	movs	r2, #0
 800b63c:	f103 3aff 	add.w	sl, r3, #4294967295
 800b640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b644:	2300      	movs	r3, #0
 800b646:	f7f5 fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800b64a:	b9c8      	cbnz	r0, 800b680 <_printf_float+0x420>
 800b64c:	4653      	mov	r3, sl
 800b64e:	4642      	mov	r2, r8
 800b650:	4631      	mov	r1, r6
 800b652:	4628      	mov	r0, r5
 800b654:	47b8      	blx	r7
 800b656:	3001      	adds	r0, #1
 800b658:	d10e      	bne.n	800b678 <_printf_float+0x418>
 800b65a:	e65e      	b.n	800b31a <_printf_float+0xba>
 800b65c:	2301      	movs	r3, #1
 800b65e:	4652      	mov	r2, sl
 800b660:	4631      	mov	r1, r6
 800b662:	4628      	mov	r0, r5
 800b664:	47b8      	blx	r7
 800b666:	3001      	adds	r0, #1
 800b668:	f43f ae57 	beq.w	800b31a <_printf_float+0xba>
 800b66c:	f108 0801 	add.w	r8, r8, #1
 800b670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b672:	3b01      	subs	r3, #1
 800b674:	4543      	cmp	r3, r8
 800b676:	dcf1      	bgt.n	800b65c <_printf_float+0x3fc>
 800b678:	464b      	mov	r3, r9
 800b67a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b67e:	e6de      	b.n	800b43e <_printf_float+0x1de>
 800b680:	f04f 0800 	mov.w	r8, #0
 800b684:	f104 0a1a 	add.w	sl, r4, #26
 800b688:	e7f2      	b.n	800b670 <_printf_float+0x410>
 800b68a:	2301      	movs	r3, #1
 800b68c:	e7df      	b.n	800b64e <_printf_float+0x3ee>
 800b68e:	2301      	movs	r3, #1
 800b690:	464a      	mov	r2, r9
 800b692:	4631      	mov	r1, r6
 800b694:	4628      	mov	r0, r5
 800b696:	47b8      	blx	r7
 800b698:	3001      	adds	r0, #1
 800b69a:	f43f ae3e 	beq.w	800b31a <_printf_float+0xba>
 800b69e:	f108 0801 	add.w	r8, r8, #1
 800b6a2:	68e3      	ldr	r3, [r4, #12]
 800b6a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6a6:	1a9b      	subs	r3, r3, r2
 800b6a8:	4543      	cmp	r3, r8
 800b6aa:	dcf0      	bgt.n	800b68e <_printf_float+0x42e>
 800b6ac:	e6fc      	b.n	800b4a8 <_printf_float+0x248>
 800b6ae:	f04f 0800 	mov.w	r8, #0
 800b6b2:	f104 0919 	add.w	r9, r4, #25
 800b6b6:	e7f4      	b.n	800b6a2 <_printf_float+0x442>
 800b6b8:	2900      	cmp	r1, #0
 800b6ba:	f43f ae8b 	beq.w	800b3d4 <_printf_float+0x174>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b6c4:	ab09      	add	r3, sp, #36	; 0x24
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	ec49 8b10 	vmov	d0, r8, r9
 800b6cc:	6022      	str	r2, [r4, #0]
 800b6ce:	f8cd a004 	str.w	sl, [sp, #4]
 800b6d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f7ff fd2e 	bl	800b138 <__cvt>
 800b6dc:	4680      	mov	r8, r0
 800b6de:	e648      	b.n	800b372 <_printf_float+0x112>

0800b6e0 <_printf_common>:
 800b6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e4:	4691      	mov	r9, r2
 800b6e6:	461f      	mov	r7, r3
 800b6e8:	688a      	ldr	r2, [r1, #8]
 800b6ea:	690b      	ldr	r3, [r1, #16]
 800b6ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	bfb8      	it	lt
 800b6f4:	4613      	movlt	r3, r2
 800b6f6:	f8c9 3000 	str.w	r3, [r9]
 800b6fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6fe:	4606      	mov	r6, r0
 800b700:	460c      	mov	r4, r1
 800b702:	b112      	cbz	r2, 800b70a <_printf_common+0x2a>
 800b704:	3301      	adds	r3, #1
 800b706:	f8c9 3000 	str.w	r3, [r9]
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	0699      	lsls	r1, r3, #26
 800b70e:	bf42      	ittt	mi
 800b710:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b714:	3302      	addmi	r3, #2
 800b716:	f8c9 3000 	strmi.w	r3, [r9]
 800b71a:	6825      	ldr	r5, [r4, #0]
 800b71c:	f015 0506 	ands.w	r5, r5, #6
 800b720:	d107      	bne.n	800b732 <_printf_common+0x52>
 800b722:	f104 0a19 	add.w	sl, r4, #25
 800b726:	68e3      	ldr	r3, [r4, #12]
 800b728:	f8d9 2000 	ldr.w	r2, [r9]
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	42ab      	cmp	r3, r5
 800b730:	dc28      	bgt.n	800b784 <_printf_common+0xa4>
 800b732:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b736:	6822      	ldr	r2, [r4, #0]
 800b738:	3300      	adds	r3, #0
 800b73a:	bf18      	it	ne
 800b73c:	2301      	movne	r3, #1
 800b73e:	0692      	lsls	r2, r2, #26
 800b740:	d42d      	bmi.n	800b79e <_printf_common+0xbe>
 800b742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b746:	4639      	mov	r1, r7
 800b748:	4630      	mov	r0, r6
 800b74a:	47c0      	blx	r8
 800b74c:	3001      	adds	r0, #1
 800b74e:	d020      	beq.n	800b792 <_printf_common+0xb2>
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	68e5      	ldr	r5, [r4, #12]
 800b754:	f8d9 2000 	ldr.w	r2, [r9]
 800b758:	f003 0306 	and.w	r3, r3, #6
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	bf08      	it	eq
 800b760:	1aad      	subeq	r5, r5, r2
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	6922      	ldr	r2, [r4, #16]
 800b766:	bf0c      	ite	eq
 800b768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b76c:	2500      	movne	r5, #0
 800b76e:	4293      	cmp	r3, r2
 800b770:	bfc4      	itt	gt
 800b772:	1a9b      	subgt	r3, r3, r2
 800b774:	18ed      	addgt	r5, r5, r3
 800b776:	f04f 0900 	mov.w	r9, #0
 800b77a:	341a      	adds	r4, #26
 800b77c:	454d      	cmp	r5, r9
 800b77e:	d11a      	bne.n	800b7b6 <_printf_common+0xd6>
 800b780:	2000      	movs	r0, #0
 800b782:	e008      	b.n	800b796 <_printf_common+0xb6>
 800b784:	2301      	movs	r3, #1
 800b786:	4652      	mov	r2, sl
 800b788:	4639      	mov	r1, r7
 800b78a:	4630      	mov	r0, r6
 800b78c:	47c0      	blx	r8
 800b78e:	3001      	adds	r0, #1
 800b790:	d103      	bne.n	800b79a <_printf_common+0xba>
 800b792:	f04f 30ff 	mov.w	r0, #4294967295
 800b796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b79a:	3501      	adds	r5, #1
 800b79c:	e7c3      	b.n	800b726 <_printf_common+0x46>
 800b79e:	18e1      	adds	r1, r4, r3
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	2030      	movs	r0, #48	; 0x30
 800b7a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7a8:	4422      	add	r2, r4
 800b7aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7b2:	3302      	adds	r3, #2
 800b7b4:	e7c5      	b.n	800b742 <_printf_common+0x62>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	4622      	mov	r2, r4
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	4630      	mov	r0, r6
 800b7be:	47c0      	blx	r8
 800b7c0:	3001      	adds	r0, #1
 800b7c2:	d0e6      	beq.n	800b792 <_printf_common+0xb2>
 800b7c4:	f109 0901 	add.w	r9, r9, #1
 800b7c8:	e7d8      	b.n	800b77c <_printf_common+0x9c>
	...

0800b7cc <_printf_i>:
 800b7cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	7e09      	ldrb	r1, [r1, #24]
 800b7d8:	b085      	sub	sp, #20
 800b7da:	296e      	cmp	r1, #110	; 0x6e
 800b7dc:	4617      	mov	r7, r2
 800b7de:	4606      	mov	r6, r0
 800b7e0:	4698      	mov	r8, r3
 800b7e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7e4:	f000 80b3 	beq.w	800b94e <_printf_i+0x182>
 800b7e8:	d822      	bhi.n	800b830 <_printf_i+0x64>
 800b7ea:	2963      	cmp	r1, #99	; 0x63
 800b7ec:	d036      	beq.n	800b85c <_printf_i+0x90>
 800b7ee:	d80a      	bhi.n	800b806 <_printf_i+0x3a>
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	f000 80b9 	beq.w	800b968 <_printf_i+0x19c>
 800b7f6:	2958      	cmp	r1, #88	; 0x58
 800b7f8:	f000 8083 	beq.w	800b902 <_printf_i+0x136>
 800b7fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b800:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b804:	e032      	b.n	800b86c <_printf_i+0xa0>
 800b806:	2964      	cmp	r1, #100	; 0x64
 800b808:	d001      	beq.n	800b80e <_printf_i+0x42>
 800b80a:	2969      	cmp	r1, #105	; 0x69
 800b80c:	d1f6      	bne.n	800b7fc <_printf_i+0x30>
 800b80e:	6820      	ldr	r0, [r4, #0]
 800b810:	6813      	ldr	r3, [r2, #0]
 800b812:	0605      	lsls	r5, r0, #24
 800b814:	f103 0104 	add.w	r1, r3, #4
 800b818:	d52a      	bpl.n	800b870 <_printf_i+0xa4>
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6011      	str	r1, [r2, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	da03      	bge.n	800b82a <_printf_i+0x5e>
 800b822:	222d      	movs	r2, #45	; 0x2d
 800b824:	425b      	negs	r3, r3
 800b826:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b82a:	486f      	ldr	r0, [pc, #444]	; (800b9e8 <_printf_i+0x21c>)
 800b82c:	220a      	movs	r2, #10
 800b82e:	e039      	b.n	800b8a4 <_printf_i+0xd8>
 800b830:	2973      	cmp	r1, #115	; 0x73
 800b832:	f000 809d 	beq.w	800b970 <_printf_i+0x1a4>
 800b836:	d808      	bhi.n	800b84a <_printf_i+0x7e>
 800b838:	296f      	cmp	r1, #111	; 0x6f
 800b83a:	d020      	beq.n	800b87e <_printf_i+0xb2>
 800b83c:	2970      	cmp	r1, #112	; 0x70
 800b83e:	d1dd      	bne.n	800b7fc <_printf_i+0x30>
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	f043 0320 	orr.w	r3, r3, #32
 800b846:	6023      	str	r3, [r4, #0]
 800b848:	e003      	b.n	800b852 <_printf_i+0x86>
 800b84a:	2975      	cmp	r1, #117	; 0x75
 800b84c:	d017      	beq.n	800b87e <_printf_i+0xb2>
 800b84e:	2978      	cmp	r1, #120	; 0x78
 800b850:	d1d4      	bne.n	800b7fc <_printf_i+0x30>
 800b852:	2378      	movs	r3, #120	; 0x78
 800b854:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b858:	4864      	ldr	r0, [pc, #400]	; (800b9ec <_printf_i+0x220>)
 800b85a:	e055      	b.n	800b908 <_printf_i+0x13c>
 800b85c:	6813      	ldr	r3, [r2, #0]
 800b85e:	1d19      	adds	r1, r3, #4
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6011      	str	r1, [r2, #0]
 800b864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b86c:	2301      	movs	r3, #1
 800b86e:	e08c      	b.n	800b98a <_printf_i+0x1be>
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	6011      	str	r1, [r2, #0]
 800b874:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b878:	bf18      	it	ne
 800b87a:	b21b      	sxthne	r3, r3
 800b87c:	e7cf      	b.n	800b81e <_printf_i+0x52>
 800b87e:	6813      	ldr	r3, [r2, #0]
 800b880:	6825      	ldr	r5, [r4, #0]
 800b882:	1d18      	adds	r0, r3, #4
 800b884:	6010      	str	r0, [r2, #0]
 800b886:	0628      	lsls	r0, r5, #24
 800b888:	d501      	bpl.n	800b88e <_printf_i+0xc2>
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	e002      	b.n	800b894 <_printf_i+0xc8>
 800b88e:	0668      	lsls	r0, r5, #25
 800b890:	d5fb      	bpl.n	800b88a <_printf_i+0xbe>
 800b892:	881b      	ldrh	r3, [r3, #0]
 800b894:	4854      	ldr	r0, [pc, #336]	; (800b9e8 <_printf_i+0x21c>)
 800b896:	296f      	cmp	r1, #111	; 0x6f
 800b898:	bf14      	ite	ne
 800b89a:	220a      	movne	r2, #10
 800b89c:	2208      	moveq	r2, #8
 800b89e:	2100      	movs	r1, #0
 800b8a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8a4:	6865      	ldr	r5, [r4, #4]
 800b8a6:	60a5      	str	r5, [r4, #8]
 800b8a8:	2d00      	cmp	r5, #0
 800b8aa:	f2c0 8095 	blt.w	800b9d8 <_printf_i+0x20c>
 800b8ae:	6821      	ldr	r1, [r4, #0]
 800b8b0:	f021 0104 	bic.w	r1, r1, #4
 800b8b4:	6021      	str	r1, [r4, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d13d      	bne.n	800b936 <_printf_i+0x16a>
 800b8ba:	2d00      	cmp	r5, #0
 800b8bc:	f040 808e 	bne.w	800b9dc <_printf_i+0x210>
 800b8c0:	4665      	mov	r5, ip
 800b8c2:	2a08      	cmp	r2, #8
 800b8c4:	d10b      	bne.n	800b8de <_printf_i+0x112>
 800b8c6:	6823      	ldr	r3, [r4, #0]
 800b8c8:	07db      	lsls	r3, r3, #31
 800b8ca:	d508      	bpl.n	800b8de <_printf_i+0x112>
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	6862      	ldr	r2, [r4, #4]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	bfde      	ittt	le
 800b8d4:	2330      	movle	r3, #48	; 0x30
 800b8d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8da:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8de:	ebac 0305 	sub.w	r3, ip, r5
 800b8e2:	6123      	str	r3, [r4, #16]
 800b8e4:	f8cd 8000 	str.w	r8, [sp]
 800b8e8:	463b      	mov	r3, r7
 800b8ea:	aa03      	add	r2, sp, #12
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f7ff fef6 	bl	800b6e0 <_printf_common>
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d14d      	bne.n	800b994 <_printf_i+0x1c8>
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	b005      	add	sp, #20
 800b8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b902:	4839      	ldr	r0, [pc, #228]	; (800b9e8 <_printf_i+0x21c>)
 800b904:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b908:	6813      	ldr	r3, [r2, #0]
 800b90a:	6821      	ldr	r1, [r4, #0]
 800b90c:	1d1d      	adds	r5, r3, #4
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6015      	str	r5, [r2, #0]
 800b912:	060a      	lsls	r2, r1, #24
 800b914:	d50b      	bpl.n	800b92e <_printf_i+0x162>
 800b916:	07ca      	lsls	r2, r1, #31
 800b918:	bf44      	itt	mi
 800b91a:	f041 0120 	orrmi.w	r1, r1, #32
 800b91e:	6021      	strmi	r1, [r4, #0]
 800b920:	b91b      	cbnz	r3, 800b92a <_printf_i+0x15e>
 800b922:	6822      	ldr	r2, [r4, #0]
 800b924:	f022 0220 	bic.w	r2, r2, #32
 800b928:	6022      	str	r2, [r4, #0]
 800b92a:	2210      	movs	r2, #16
 800b92c:	e7b7      	b.n	800b89e <_printf_i+0xd2>
 800b92e:	064d      	lsls	r5, r1, #25
 800b930:	bf48      	it	mi
 800b932:	b29b      	uxthmi	r3, r3
 800b934:	e7ef      	b.n	800b916 <_printf_i+0x14a>
 800b936:	4665      	mov	r5, ip
 800b938:	fbb3 f1f2 	udiv	r1, r3, r2
 800b93c:	fb02 3311 	mls	r3, r2, r1, r3
 800b940:	5cc3      	ldrb	r3, [r0, r3]
 800b942:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b946:	460b      	mov	r3, r1
 800b948:	2900      	cmp	r1, #0
 800b94a:	d1f5      	bne.n	800b938 <_printf_i+0x16c>
 800b94c:	e7b9      	b.n	800b8c2 <_printf_i+0xf6>
 800b94e:	6813      	ldr	r3, [r2, #0]
 800b950:	6825      	ldr	r5, [r4, #0]
 800b952:	6961      	ldr	r1, [r4, #20]
 800b954:	1d18      	adds	r0, r3, #4
 800b956:	6010      	str	r0, [r2, #0]
 800b958:	0628      	lsls	r0, r5, #24
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	d501      	bpl.n	800b962 <_printf_i+0x196>
 800b95e:	6019      	str	r1, [r3, #0]
 800b960:	e002      	b.n	800b968 <_printf_i+0x19c>
 800b962:	066a      	lsls	r2, r5, #25
 800b964:	d5fb      	bpl.n	800b95e <_printf_i+0x192>
 800b966:	8019      	strh	r1, [r3, #0]
 800b968:	2300      	movs	r3, #0
 800b96a:	6123      	str	r3, [r4, #16]
 800b96c:	4665      	mov	r5, ip
 800b96e:	e7b9      	b.n	800b8e4 <_printf_i+0x118>
 800b970:	6813      	ldr	r3, [r2, #0]
 800b972:	1d19      	adds	r1, r3, #4
 800b974:	6011      	str	r1, [r2, #0]
 800b976:	681d      	ldr	r5, [r3, #0]
 800b978:	6862      	ldr	r2, [r4, #4]
 800b97a:	2100      	movs	r1, #0
 800b97c:	4628      	mov	r0, r5
 800b97e:	f7f4 fc37 	bl	80001f0 <memchr>
 800b982:	b108      	cbz	r0, 800b988 <_printf_i+0x1bc>
 800b984:	1b40      	subs	r0, r0, r5
 800b986:	6060      	str	r0, [r4, #4]
 800b988:	6863      	ldr	r3, [r4, #4]
 800b98a:	6123      	str	r3, [r4, #16]
 800b98c:	2300      	movs	r3, #0
 800b98e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b992:	e7a7      	b.n	800b8e4 <_printf_i+0x118>
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	462a      	mov	r2, r5
 800b998:	4639      	mov	r1, r7
 800b99a:	4630      	mov	r0, r6
 800b99c:	47c0      	blx	r8
 800b99e:	3001      	adds	r0, #1
 800b9a0:	d0aa      	beq.n	800b8f8 <_printf_i+0x12c>
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	079b      	lsls	r3, r3, #30
 800b9a6:	d413      	bmi.n	800b9d0 <_printf_i+0x204>
 800b9a8:	68e0      	ldr	r0, [r4, #12]
 800b9aa:	9b03      	ldr	r3, [sp, #12]
 800b9ac:	4298      	cmp	r0, r3
 800b9ae:	bfb8      	it	lt
 800b9b0:	4618      	movlt	r0, r3
 800b9b2:	e7a3      	b.n	800b8fc <_printf_i+0x130>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	464a      	mov	r2, r9
 800b9b8:	4639      	mov	r1, r7
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	47c0      	blx	r8
 800b9be:	3001      	adds	r0, #1
 800b9c0:	d09a      	beq.n	800b8f8 <_printf_i+0x12c>
 800b9c2:	3501      	adds	r5, #1
 800b9c4:	68e3      	ldr	r3, [r4, #12]
 800b9c6:	9a03      	ldr	r2, [sp, #12]
 800b9c8:	1a9b      	subs	r3, r3, r2
 800b9ca:	42ab      	cmp	r3, r5
 800b9cc:	dcf2      	bgt.n	800b9b4 <_printf_i+0x1e8>
 800b9ce:	e7eb      	b.n	800b9a8 <_printf_i+0x1dc>
 800b9d0:	2500      	movs	r5, #0
 800b9d2:	f104 0919 	add.w	r9, r4, #25
 800b9d6:	e7f5      	b.n	800b9c4 <_printf_i+0x1f8>
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1ac      	bne.n	800b936 <_printf_i+0x16a>
 800b9dc:	7803      	ldrb	r3, [r0, #0]
 800b9de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9e6:	e76c      	b.n	800b8c2 <_printf_i+0xf6>
 800b9e8:	08012a28 	.word	0x08012a28
 800b9ec:	08012a39 	.word	0x08012a39

0800b9f0 <_scanf_float>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	469a      	mov	sl, r3
 800b9f6:	688b      	ldr	r3, [r1, #8]
 800b9f8:	4616      	mov	r6, r2
 800b9fa:	1e5a      	subs	r2, r3, #1
 800b9fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ba00:	b087      	sub	sp, #28
 800ba02:	bf83      	ittte	hi
 800ba04:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800ba08:	189b      	addhi	r3, r3, r2
 800ba0a:	9301      	strhi	r3, [sp, #4]
 800ba0c:	2300      	movls	r3, #0
 800ba0e:	bf86      	itte	hi
 800ba10:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ba14:	608b      	strhi	r3, [r1, #8]
 800ba16:	9301      	strls	r3, [sp, #4]
 800ba18:	680b      	ldr	r3, [r1, #0]
 800ba1a:	4688      	mov	r8, r1
 800ba1c:	f04f 0b00 	mov.w	fp, #0
 800ba20:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ba24:	f848 3b1c 	str.w	r3, [r8], #28
 800ba28:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	460c      	mov	r4, r1
 800ba30:	4645      	mov	r5, r8
 800ba32:	465a      	mov	r2, fp
 800ba34:	46d9      	mov	r9, fp
 800ba36:	f8cd b008 	str.w	fp, [sp, #8]
 800ba3a:	68a1      	ldr	r1, [r4, #8]
 800ba3c:	b181      	cbz	r1, 800ba60 <_scanf_float+0x70>
 800ba3e:	6833      	ldr	r3, [r6, #0]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	2b49      	cmp	r3, #73	; 0x49
 800ba44:	d071      	beq.n	800bb2a <_scanf_float+0x13a>
 800ba46:	d84d      	bhi.n	800bae4 <_scanf_float+0xf4>
 800ba48:	2b39      	cmp	r3, #57	; 0x39
 800ba4a:	d840      	bhi.n	800bace <_scanf_float+0xde>
 800ba4c:	2b31      	cmp	r3, #49	; 0x31
 800ba4e:	f080 8088 	bcs.w	800bb62 <_scanf_float+0x172>
 800ba52:	2b2d      	cmp	r3, #45	; 0x2d
 800ba54:	f000 8090 	beq.w	800bb78 <_scanf_float+0x188>
 800ba58:	d815      	bhi.n	800ba86 <_scanf_float+0x96>
 800ba5a:	2b2b      	cmp	r3, #43	; 0x2b
 800ba5c:	f000 808c 	beq.w	800bb78 <_scanf_float+0x188>
 800ba60:	f1b9 0f00 	cmp.w	r9, #0
 800ba64:	d003      	beq.n	800ba6e <_scanf_float+0x7e>
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	3a01      	subs	r2, #1
 800ba70:	2a01      	cmp	r2, #1
 800ba72:	f200 80ea 	bhi.w	800bc4a <_scanf_float+0x25a>
 800ba76:	4545      	cmp	r5, r8
 800ba78:	f200 80dc 	bhi.w	800bc34 <_scanf_float+0x244>
 800ba7c:	2601      	movs	r6, #1
 800ba7e:	4630      	mov	r0, r6
 800ba80:	b007      	add	sp, #28
 800ba82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba86:	2b2e      	cmp	r3, #46	; 0x2e
 800ba88:	f000 809f 	beq.w	800bbca <_scanf_float+0x1da>
 800ba8c:	2b30      	cmp	r3, #48	; 0x30
 800ba8e:	d1e7      	bne.n	800ba60 <_scanf_float+0x70>
 800ba90:	6820      	ldr	r0, [r4, #0]
 800ba92:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ba96:	d064      	beq.n	800bb62 <_scanf_float+0x172>
 800ba98:	9b01      	ldr	r3, [sp, #4]
 800ba9a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ba9e:	6020      	str	r0, [r4, #0]
 800baa0:	f109 0901 	add.w	r9, r9, #1
 800baa4:	b11b      	cbz	r3, 800baae <_scanf_float+0xbe>
 800baa6:	3b01      	subs	r3, #1
 800baa8:	3101      	adds	r1, #1
 800baaa:	9301      	str	r3, [sp, #4]
 800baac:	60a1      	str	r1, [r4, #8]
 800baae:	68a3      	ldr	r3, [r4, #8]
 800bab0:	3b01      	subs	r3, #1
 800bab2:	60a3      	str	r3, [r4, #8]
 800bab4:	6923      	ldr	r3, [r4, #16]
 800bab6:	3301      	adds	r3, #1
 800bab8:	6123      	str	r3, [r4, #16]
 800baba:	6873      	ldr	r3, [r6, #4]
 800babc:	3b01      	subs	r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	6073      	str	r3, [r6, #4]
 800bac2:	f340 80ac 	ble.w	800bc1e <_scanf_float+0x22e>
 800bac6:	6833      	ldr	r3, [r6, #0]
 800bac8:	3301      	adds	r3, #1
 800baca:	6033      	str	r3, [r6, #0]
 800bacc:	e7b5      	b.n	800ba3a <_scanf_float+0x4a>
 800bace:	2b45      	cmp	r3, #69	; 0x45
 800bad0:	f000 8085 	beq.w	800bbde <_scanf_float+0x1ee>
 800bad4:	2b46      	cmp	r3, #70	; 0x46
 800bad6:	d06a      	beq.n	800bbae <_scanf_float+0x1be>
 800bad8:	2b41      	cmp	r3, #65	; 0x41
 800bada:	d1c1      	bne.n	800ba60 <_scanf_float+0x70>
 800badc:	2a01      	cmp	r2, #1
 800bade:	d1bf      	bne.n	800ba60 <_scanf_float+0x70>
 800bae0:	2202      	movs	r2, #2
 800bae2:	e046      	b.n	800bb72 <_scanf_float+0x182>
 800bae4:	2b65      	cmp	r3, #101	; 0x65
 800bae6:	d07a      	beq.n	800bbde <_scanf_float+0x1ee>
 800bae8:	d818      	bhi.n	800bb1c <_scanf_float+0x12c>
 800baea:	2b54      	cmp	r3, #84	; 0x54
 800baec:	d066      	beq.n	800bbbc <_scanf_float+0x1cc>
 800baee:	d811      	bhi.n	800bb14 <_scanf_float+0x124>
 800baf0:	2b4e      	cmp	r3, #78	; 0x4e
 800baf2:	d1b5      	bne.n	800ba60 <_scanf_float+0x70>
 800baf4:	2a00      	cmp	r2, #0
 800baf6:	d146      	bne.n	800bb86 <_scanf_float+0x196>
 800baf8:	f1b9 0f00 	cmp.w	r9, #0
 800bafc:	d145      	bne.n	800bb8a <_scanf_float+0x19a>
 800bafe:	6821      	ldr	r1, [r4, #0]
 800bb00:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800bb04:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bb08:	d13f      	bne.n	800bb8a <_scanf_float+0x19a>
 800bb0a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bb0e:	6021      	str	r1, [r4, #0]
 800bb10:	2201      	movs	r2, #1
 800bb12:	e02e      	b.n	800bb72 <_scanf_float+0x182>
 800bb14:	2b59      	cmp	r3, #89	; 0x59
 800bb16:	d01e      	beq.n	800bb56 <_scanf_float+0x166>
 800bb18:	2b61      	cmp	r3, #97	; 0x61
 800bb1a:	e7de      	b.n	800bada <_scanf_float+0xea>
 800bb1c:	2b6e      	cmp	r3, #110	; 0x6e
 800bb1e:	d0e9      	beq.n	800baf4 <_scanf_float+0x104>
 800bb20:	d815      	bhi.n	800bb4e <_scanf_float+0x15e>
 800bb22:	2b66      	cmp	r3, #102	; 0x66
 800bb24:	d043      	beq.n	800bbae <_scanf_float+0x1be>
 800bb26:	2b69      	cmp	r3, #105	; 0x69
 800bb28:	d19a      	bne.n	800ba60 <_scanf_float+0x70>
 800bb2a:	f1bb 0f00 	cmp.w	fp, #0
 800bb2e:	d138      	bne.n	800bba2 <_scanf_float+0x1b2>
 800bb30:	f1b9 0f00 	cmp.w	r9, #0
 800bb34:	d197      	bne.n	800ba66 <_scanf_float+0x76>
 800bb36:	6821      	ldr	r1, [r4, #0]
 800bb38:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800bb3c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bb40:	d195      	bne.n	800ba6e <_scanf_float+0x7e>
 800bb42:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bb46:	6021      	str	r1, [r4, #0]
 800bb48:	f04f 0b01 	mov.w	fp, #1
 800bb4c:	e011      	b.n	800bb72 <_scanf_float+0x182>
 800bb4e:	2b74      	cmp	r3, #116	; 0x74
 800bb50:	d034      	beq.n	800bbbc <_scanf_float+0x1cc>
 800bb52:	2b79      	cmp	r3, #121	; 0x79
 800bb54:	d184      	bne.n	800ba60 <_scanf_float+0x70>
 800bb56:	f1bb 0f07 	cmp.w	fp, #7
 800bb5a:	d181      	bne.n	800ba60 <_scanf_float+0x70>
 800bb5c:	f04f 0b08 	mov.w	fp, #8
 800bb60:	e007      	b.n	800bb72 <_scanf_float+0x182>
 800bb62:	eb12 0f0b 	cmn.w	r2, fp
 800bb66:	f47f af7b 	bne.w	800ba60 <_scanf_float+0x70>
 800bb6a:	6821      	ldr	r1, [r4, #0]
 800bb6c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800bb70:	6021      	str	r1, [r4, #0]
 800bb72:	702b      	strb	r3, [r5, #0]
 800bb74:	3501      	adds	r5, #1
 800bb76:	e79a      	b.n	800baae <_scanf_float+0xbe>
 800bb78:	6821      	ldr	r1, [r4, #0]
 800bb7a:	0608      	lsls	r0, r1, #24
 800bb7c:	f57f af70 	bpl.w	800ba60 <_scanf_float+0x70>
 800bb80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bb84:	e7f4      	b.n	800bb70 <_scanf_float+0x180>
 800bb86:	2a02      	cmp	r2, #2
 800bb88:	d047      	beq.n	800bc1a <_scanf_float+0x22a>
 800bb8a:	f1bb 0f01 	cmp.w	fp, #1
 800bb8e:	d003      	beq.n	800bb98 <_scanf_float+0x1a8>
 800bb90:	f1bb 0f04 	cmp.w	fp, #4
 800bb94:	f47f af64 	bne.w	800ba60 <_scanf_float+0x70>
 800bb98:	f10b 0b01 	add.w	fp, fp, #1
 800bb9c:	fa5f fb8b 	uxtb.w	fp, fp
 800bba0:	e7e7      	b.n	800bb72 <_scanf_float+0x182>
 800bba2:	f1bb 0f03 	cmp.w	fp, #3
 800bba6:	d0f7      	beq.n	800bb98 <_scanf_float+0x1a8>
 800bba8:	f1bb 0f05 	cmp.w	fp, #5
 800bbac:	e7f2      	b.n	800bb94 <_scanf_float+0x1a4>
 800bbae:	f1bb 0f02 	cmp.w	fp, #2
 800bbb2:	f47f af55 	bne.w	800ba60 <_scanf_float+0x70>
 800bbb6:	f04f 0b03 	mov.w	fp, #3
 800bbba:	e7da      	b.n	800bb72 <_scanf_float+0x182>
 800bbbc:	f1bb 0f06 	cmp.w	fp, #6
 800bbc0:	f47f af4e 	bne.w	800ba60 <_scanf_float+0x70>
 800bbc4:	f04f 0b07 	mov.w	fp, #7
 800bbc8:	e7d3      	b.n	800bb72 <_scanf_float+0x182>
 800bbca:	6821      	ldr	r1, [r4, #0]
 800bbcc:	0588      	lsls	r0, r1, #22
 800bbce:	f57f af47 	bpl.w	800ba60 <_scanf_float+0x70>
 800bbd2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800bbd6:	6021      	str	r1, [r4, #0]
 800bbd8:	f8cd 9008 	str.w	r9, [sp, #8]
 800bbdc:	e7c9      	b.n	800bb72 <_scanf_float+0x182>
 800bbde:	6821      	ldr	r1, [r4, #0]
 800bbe0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800bbe4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bbe8:	d006      	beq.n	800bbf8 <_scanf_float+0x208>
 800bbea:	0548      	lsls	r0, r1, #21
 800bbec:	f57f af38 	bpl.w	800ba60 <_scanf_float+0x70>
 800bbf0:	f1b9 0f00 	cmp.w	r9, #0
 800bbf4:	f43f af3b 	beq.w	800ba6e <_scanf_float+0x7e>
 800bbf8:	0588      	lsls	r0, r1, #22
 800bbfa:	bf58      	it	pl
 800bbfc:	9802      	ldrpl	r0, [sp, #8]
 800bbfe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bc02:	bf58      	it	pl
 800bc04:	eba9 0000 	subpl.w	r0, r9, r0
 800bc08:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800bc0c:	bf58      	it	pl
 800bc0e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800bc12:	6021      	str	r1, [r4, #0]
 800bc14:	f04f 0900 	mov.w	r9, #0
 800bc18:	e7ab      	b.n	800bb72 <_scanf_float+0x182>
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	e7a9      	b.n	800bb72 <_scanf_float+0x182>
 800bc1e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc22:	9205      	str	r2, [sp, #20]
 800bc24:	4631      	mov	r1, r6
 800bc26:	4638      	mov	r0, r7
 800bc28:	4798      	blx	r3
 800bc2a:	9a05      	ldr	r2, [sp, #20]
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	f43f af04 	beq.w	800ba3a <_scanf_float+0x4a>
 800bc32:	e715      	b.n	800ba60 <_scanf_float+0x70>
 800bc34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc38:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bc3c:	4632      	mov	r2, r6
 800bc3e:	4638      	mov	r0, r7
 800bc40:	4798      	blx	r3
 800bc42:	6923      	ldr	r3, [r4, #16]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	6123      	str	r3, [r4, #16]
 800bc48:	e715      	b.n	800ba76 <_scanf_float+0x86>
 800bc4a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bc4e:	2b06      	cmp	r3, #6
 800bc50:	d80a      	bhi.n	800bc68 <_scanf_float+0x278>
 800bc52:	f1bb 0f02 	cmp.w	fp, #2
 800bc56:	d968      	bls.n	800bd2a <_scanf_float+0x33a>
 800bc58:	f1ab 0b03 	sub.w	fp, fp, #3
 800bc5c:	fa5f fb8b 	uxtb.w	fp, fp
 800bc60:	eba5 0b0b 	sub.w	fp, r5, fp
 800bc64:	455d      	cmp	r5, fp
 800bc66:	d14b      	bne.n	800bd00 <_scanf_float+0x310>
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	05da      	lsls	r2, r3, #23
 800bc6c:	d51f      	bpl.n	800bcae <_scanf_float+0x2be>
 800bc6e:	055b      	lsls	r3, r3, #21
 800bc70:	d468      	bmi.n	800bd44 <_scanf_float+0x354>
 800bc72:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bc76:	6923      	ldr	r3, [r4, #16]
 800bc78:	2965      	cmp	r1, #101	; 0x65
 800bc7a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc7e:	f105 3bff 	add.w	fp, r5, #4294967295
 800bc82:	6123      	str	r3, [r4, #16]
 800bc84:	d00d      	beq.n	800bca2 <_scanf_float+0x2b2>
 800bc86:	2945      	cmp	r1, #69	; 0x45
 800bc88:	d00b      	beq.n	800bca2 <_scanf_float+0x2b2>
 800bc8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc8e:	4632      	mov	r2, r6
 800bc90:	4638      	mov	r0, r7
 800bc92:	4798      	blx	r3
 800bc94:	6923      	ldr	r3, [r4, #16]
 800bc96:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	f1a5 0b02 	sub.w	fp, r5, #2
 800bca0:	6123      	str	r3, [r4, #16]
 800bca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bca6:	4632      	mov	r2, r6
 800bca8:	4638      	mov	r0, r7
 800bcaa:	4798      	blx	r3
 800bcac:	465d      	mov	r5, fp
 800bcae:	6826      	ldr	r6, [r4, #0]
 800bcb0:	f016 0610 	ands.w	r6, r6, #16
 800bcb4:	d17a      	bne.n	800bdac <_scanf_float+0x3bc>
 800bcb6:	702e      	strb	r6, [r5, #0]
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bcbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcc2:	d142      	bne.n	800bd4a <_scanf_float+0x35a>
 800bcc4:	9b02      	ldr	r3, [sp, #8]
 800bcc6:	eba9 0303 	sub.w	r3, r9, r3
 800bcca:	425a      	negs	r2, r3
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d149      	bne.n	800bd64 <_scanf_float+0x374>
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4641      	mov	r1, r8
 800bcd4:	4638      	mov	r0, r7
 800bcd6:	f000 ffb3 	bl	800cc40 <_strtod_r>
 800bcda:	6825      	ldr	r5, [r4, #0]
 800bcdc:	f8da 3000 	ldr.w	r3, [sl]
 800bce0:	f015 0f02 	tst.w	r5, #2
 800bce4:	f103 0204 	add.w	r2, r3, #4
 800bce8:	ec59 8b10 	vmov	r8, r9, d0
 800bcec:	f8ca 2000 	str.w	r2, [sl]
 800bcf0:	d043      	beq.n	800bd7a <_scanf_float+0x38a>
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	e9c3 8900 	strd	r8, r9, [r3]
 800bcf8:	68e3      	ldr	r3, [r4, #12]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	60e3      	str	r3, [r4, #12]
 800bcfe:	e6be      	b.n	800ba7e <_scanf_float+0x8e>
 800bd00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bd08:	4632      	mov	r2, r6
 800bd0a:	4638      	mov	r0, r7
 800bd0c:	4798      	blx	r3
 800bd0e:	6923      	ldr	r3, [r4, #16]
 800bd10:	3b01      	subs	r3, #1
 800bd12:	6123      	str	r3, [r4, #16]
 800bd14:	e7a6      	b.n	800bc64 <_scanf_float+0x274>
 800bd16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd1a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bd1e:	4632      	mov	r2, r6
 800bd20:	4638      	mov	r0, r7
 800bd22:	4798      	blx	r3
 800bd24:	6923      	ldr	r3, [r4, #16]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	6123      	str	r3, [r4, #16]
 800bd2a:	4545      	cmp	r5, r8
 800bd2c:	d8f3      	bhi.n	800bd16 <_scanf_float+0x326>
 800bd2e:	e6a5      	b.n	800ba7c <_scanf_float+0x8c>
 800bd30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd34:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bd38:	4632      	mov	r2, r6
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	4798      	blx	r3
 800bd3e:	6923      	ldr	r3, [r4, #16]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	6123      	str	r3, [r4, #16]
 800bd44:	4545      	cmp	r5, r8
 800bd46:	d8f3      	bhi.n	800bd30 <_scanf_float+0x340>
 800bd48:	e698      	b.n	800ba7c <_scanf_float+0x8c>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0bf      	beq.n	800bcd0 <_scanf_float+0x2e0>
 800bd50:	9904      	ldr	r1, [sp, #16]
 800bd52:	230a      	movs	r3, #10
 800bd54:	4632      	mov	r2, r6
 800bd56:	3101      	adds	r1, #1
 800bd58:	4638      	mov	r0, r7
 800bd5a:	f000 fffd 	bl	800cd58 <_strtol_r>
 800bd5e:	9b03      	ldr	r3, [sp, #12]
 800bd60:	9d04      	ldr	r5, [sp, #16]
 800bd62:	1ac2      	subs	r2, r0, r3
 800bd64:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bd68:	429d      	cmp	r5, r3
 800bd6a:	bf28      	it	cs
 800bd6c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800bd70:	490f      	ldr	r1, [pc, #60]	; (800bdb0 <_scanf_float+0x3c0>)
 800bd72:	4628      	mov	r0, r5
 800bd74:	f000 f8b0 	bl	800bed8 <siprintf>
 800bd78:	e7aa      	b.n	800bcd0 <_scanf_float+0x2e0>
 800bd7a:	f015 0504 	ands.w	r5, r5, #4
 800bd7e:	d1b8      	bne.n	800bcf2 <_scanf_float+0x302>
 800bd80:	681f      	ldr	r7, [r3, #0]
 800bd82:	ee10 2a10 	vmov	r2, s0
 800bd86:	464b      	mov	r3, r9
 800bd88:	ee10 0a10 	vmov	r0, s0
 800bd8c:	4649      	mov	r1, r9
 800bd8e:	f7f4 fed5 	bl	8000b3c <__aeabi_dcmpun>
 800bd92:	b128      	cbz	r0, 800bda0 <_scanf_float+0x3b0>
 800bd94:	4628      	mov	r0, r5
 800bd96:	f000 f899 	bl	800becc <nanf>
 800bd9a:	ed87 0a00 	vstr	s0, [r7]
 800bd9e:	e7ab      	b.n	800bcf8 <_scanf_float+0x308>
 800bda0:	4640      	mov	r0, r8
 800bda2:	4649      	mov	r1, r9
 800bda4:	f7f4 ff28 	bl	8000bf8 <__aeabi_d2f>
 800bda8:	6038      	str	r0, [r7, #0]
 800bdaa:	e7a5      	b.n	800bcf8 <_scanf_float+0x308>
 800bdac:	2600      	movs	r6, #0
 800bdae:	e666      	b.n	800ba7e <_scanf_float+0x8e>
 800bdb0:	08012a4a 	.word	0x08012a4a

0800bdb4 <iprintf>:
 800bdb4:	b40f      	push	{r0, r1, r2, r3}
 800bdb6:	4b0a      	ldr	r3, [pc, #40]	; (800bde0 <iprintf+0x2c>)
 800bdb8:	b513      	push	{r0, r1, r4, lr}
 800bdba:	681c      	ldr	r4, [r3, #0]
 800bdbc:	b124      	cbz	r4, 800bdc8 <iprintf+0x14>
 800bdbe:	69a3      	ldr	r3, [r4, #24]
 800bdc0:	b913      	cbnz	r3, 800bdc8 <iprintf+0x14>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f001 fff0 	bl	800dda8 <__sinit>
 800bdc8:	ab05      	add	r3, sp, #20
 800bdca:	9a04      	ldr	r2, [sp, #16]
 800bdcc:	68a1      	ldr	r1, [r4, #8]
 800bdce:	9301      	str	r3, [sp, #4]
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f003 fb83 	bl	800f4dc <_vfiprintf_r>
 800bdd6:	b002      	add	sp, #8
 800bdd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bddc:	b004      	add	sp, #16
 800bdde:	4770      	bx	lr
 800bde0:	200001e8 	.word	0x200001e8

0800bde4 <_puts_r>:
 800bde4:	b570      	push	{r4, r5, r6, lr}
 800bde6:	460e      	mov	r6, r1
 800bde8:	4605      	mov	r5, r0
 800bdea:	b118      	cbz	r0, 800bdf4 <_puts_r+0x10>
 800bdec:	6983      	ldr	r3, [r0, #24]
 800bdee:	b90b      	cbnz	r3, 800bdf4 <_puts_r+0x10>
 800bdf0:	f001 ffda 	bl	800dda8 <__sinit>
 800bdf4:	69ab      	ldr	r3, [r5, #24]
 800bdf6:	68ac      	ldr	r4, [r5, #8]
 800bdf8:	b913      	cbnz	r3, 800be00 <_puts_r+0x1c>
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f001 ffd4 	bl	800dda8 <__sinit>
 800be00:	4b23      	ldr	r3, [pc, #140]	; (800be90 <_puts_r+0xac>)
 800be02:	429c      	cmp	r4, r3
 800be04:	d117      	bne.n	800be36 <_puts_r+0x52>
 800be06:	686c      	ldr	r4, [r5, #4]
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	071b      	lsls	r3, r3, #28
 800be0c:	d51d      	bpl.n	800be4a <_puts_r+0x66>
 800be0e:	6923      	ldr	r3, [r4, #16]
 800be10:	b1db      	cbz	r3, 800be4a <_puts_r+0x66>
 800be12:	3e01      	subs	r6, #1
 800be14:	68a3      	ldr	r3, [r4, #8]
 800be16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be1a:	3b01      	subs	r3, #1
 800be1c:	60a3      	str	r3, [r4, #8]
 800be1e:	b9e9      	cbnz	r1, 800be5c <_puts_r+0x78>
 800be20:	2b00      	cmp	r3, #0
 800be22:	da2e      	bge.n	800be82 <_puts_r+0x9e>
 800be24:	4622      	mov	r2, r4
 800be26:	210a      	movs	r1, #10
 800be28:	4628      	mov	r0, r5
 800be2a:	f000 ffa7 	bl	800cd7c <__swbuf_r>
 800be2e:	3001      	adds	r0, #1
 800be30:	d011      	beq.n	800be56 <_puts_r+0x72>
 800be32:	200a      	movs	r0, #10
 800be34:	e011      	b.n	800be5a <_puts_r+0x76>
 800be36:	4b17      	ldr	r3, [pc, #92]	; (800be94 <_puts_r+0xb0>)
 800be38:	429c      	cmp	r4, r3
 800be3a:	d101      	bne.n	800be40 <_puts_r+0x5c>
 800be3c:	68ac      	ldr	r4, [r5, #8]
 800be3e:	e7e3      	b.n	800be08 <_puts_r+0x24>
 800be40:	4b15      	ldr	r3, [pc, #84]	; (800be98 <_puts_r+0xb4>)
 800be42:	429c      	cmp	r4, r3
 800be44:	bf08      	it	eq
 800be46:	68ec      	ldreq	r4, [r5, #12]
 800be48:	e7de      	b.n	800be08 <_puts_r+0x24>
 800be4a:	4621      	mov	r1, r4
 800be4c:	4628      	mov	r0, r5
 800be4e:	f000 fff9 	bl	800ce44 <__swsetup_r>
 800be52:	2800      	cmp	r0, #0
 800be54:	d0dd      	beq.n	800be12 <_puts_r+0x2e>
 800be56:	f04f 30ff 	mov.w	r0, #4294967295
 800be5a:	bd70      	pop	{r4, r5, r6, pc}
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	da04      	bge.n	800be6a <_puts_r+0x86>
 800be60:	69a2      	ldr	r2, [r4, #24]
 800be62:	429a      	cmp	r2, r3
 800be64:	dc06      	bgt.n	800be74 <_puts_r+0x90>
 800be66:	290a      	cmp	r1, #10
 800be68:	d004      	beq.n	800be74 <_puts_r+0x90>
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	1c5a      	adds	r2, r3, #1
 800be6e:	6022      	str	r2, [r4, #0]
 800be70:	7019      	strb	r1, [r3, #0]
 800be72:	e7cf      	b.n	800be14 <_puts_r+0x30>
 800be74:	4622      	mov	r2, r4
 800be76:	4628      	mov	r0, r5
 800be78:	f000 ff80 	bl	800cd7c <__swbuf_r>
 800be7c:	3001      	adds	r0, #1
 800be7e:	d1c9      	bne.n	800be14 <_puts_r+0x30>
 800be80:	e7e9      	b.n	800be56 <_puts_r+0x72>
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	200a      	movs	r0, #10
 800be86:	1c5a      	adds	r2, r3, #1
 800be88:	6022      	str	r2, [r4, #0]
 800be8a:	7018      	strb	r0, [r3, #0]
 800be8c:	e7e5      	b.n	800be5a <_puts_r+0x76>
 800be8e:	bf00      	nop
 800be90:	08012ad0 	.word	0x08012ad0
 800be94:	08012af0 	.word	0x08012af0
 800be98:	08012ab0 	.word	0x08012ab0

0800be9c <puts>:
 800be9c:	4b02      	ldr	r3, [pc, #8]	; (800bea8 <puts+0xc>)
 800be9e:	4601      	mov	r1, r0
 800bea0:	6818      	ldr	r0, [r3, #0]
 800bea2:	f7ff bf9f 	b.w	800bde4 <_puts_r>
 800bea6:	bf00      	nop
 800bea8:	200001e8 	.word	0x200001e8

0800beac <_sbrk_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4c06      	ldr	r4, [pc, #24]	; (800bec8 <_sbrk_r+0x1c>)
 800beb0:	2300      	movs	r3, #0
 800beb2:	4605      	mov	r5, r0
 800beb4:	4608      	mov	r0, r1
 800beb6:	6023      	str	r3, [r4, #0]
 800beb8:	f7f6 f978 	bl	80021ac <_sbrk>
 800bebc:	1c43      	adds	r3, r0, #1
 800bebe:	d102      	bne.n	800bec6 <_sbrk_r+0x1a>
 800bec0:	6823      	ldr	r3, [r4, #0]
 800bec2:	b103      	cbz	r3, 800bec6 <_sbrk_r+0x1a>
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	bd38      	pop	{r3, r4, r5, pc}
 800bec8:	20001338 	.word	0x20001338

0800becc <nanf>:
 800becc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bed4 <nanf+0x8>
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	7fc00000 	.word	0x7fc00000

0800bed8 <siprintf>:
 800bed8:	b40e      	push	{r1, r2, r3}
 800beda:	b500      	push	{lr}
 800bedc:	b09c      	sub	sp, #112	; 0x70
 800bede:	ab1d      	add	r3, sp, #116	; 0x74
 800bee0:	9002      	str	r0, [sp, #8]
 800bee2:	9006      	str	r0, [sp, #24]
 800bee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bee8:	4809      	ldr	r0, [pc, #36]	; (800bf10 <siprintf+0x38>)
 800beea:	9107      	str	r1, [sp, #28]
 800beec:	9104      	str	r1, [sp, #16]
 800beee:	4909      	ldr	r1, [pc, #36]	; (800bf14 <siprintf+0x3c>)
 800bef0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bef4:	9105      	str	r1, [sp, #20]
 800bef6:	6800      	ldr	r0, [r0, #0]
 800bef8:	9301      	str	r3, [sp, #4]
 800befa:	a902      	add	r1, sp, #8
 800befc:	f003 f822 	bl	800ef44 <_svfiprintf_r>
 800bf00:	9b02      	ldr	r3, [sp, #8]
 800bf02:	2200      	movs	r2, #0
 800bf04:	701a      	strb	r2, [r3, #0]
 800bf06:	b01c      	add	sp, #112	; 0x70
 800bf08:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf0c:	b003      	add	sp, #12
 800bf0e:	4770      	bx	lr
 800bf10:	200001e8 	.word	0x200001e8
 800bf14:	ffff0208 	.word	0xffff0208

0800bf18 <siscanf>:
 800bf18:	b40e      	push	{r1, r2, r3}
 800bf1a:	b530      	push	{r4, r5, lr}
 800bf1c:	b09c      	sub	sp, #112	; 0x70
 800bf1e:	ac1f      	add	r4, sp, #124	; 0x7c
 800bf20:	f44f 7201 	mov.w	r2, #516	; 0x204
 800bf24:	f854 5b04 	ldr.w	r5, [r4], #4
 800bf28:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bf2c:	9002      	str	r0, [sp, #8]
 800bf2e:	9006      	str	r0, [sp, #24]
 800bf30:	f7f4 f956 	bl	80001e0 <strlen>
 800bf34:	4b0b      	ldr	r3, [pc, #44]	; (800bf64 <siscanf+0x4c>)
 800bf36:	9003      	str	r0, [sp, #12]
 800bf38:	9007      	str	r0, [sp, #28]
 800bf3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf3c:	480a      	ldr	r0, [pc, #40]	; (800bf68 <siscanf+0x50>)
 800bf3e:	9401      	str	r4, [sp, #4]
 800bf40:	2300      	movs	r3, #0
 800bf42:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf44:	9314      	str	r3, [sp, #80]	; 0x50
 800bf46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bf4e:	462a      	mov	r2, r5
 800bf50:	4623      	mov	r3, r4
 800bf52:	a902      	add	r1, sp, #8
 800bf54:	6800      	ldr	r0, [r0, #0]
 800bf56:	f003 f947 	bl	800f1e8 <__ssvfiscanf_r>
 800bf5a:	b01c      	add	sp, #112	; 0x70
 800bf5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf60:	b003      	add	sp, #12
 800bf62:	4770      	bx	lr
 800bf64:	0800bf8f 	.word	0x0800bf8f
 800bf68:	200001e8 	.word	0x200001e8

0800bf6c <__sread>:
 800bf6c:	b510      	push	{r4, lr}
 800bf6e:	460c      	mov	r4, r1
 800bf70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf74:	f003 fd20 	bl	800f9b8 <_read_r>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	bfab      	itete	ge
 800bf7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf7e:	89a3      	ldrhlt	r3, [r4, #12]
 800bf80:	181b      	addge	r3, r3, r0
 800bf82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf86:	bfac      	ite	ge
 800bf88:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf8a:	81a3      	strhlt	r3, [r4, #12]
 800bf8c:	bd10      	pop	{r4, pc}

0800bf8e <__seofread>:
 800bf8e:	2000      	movs	r0, #0
 800bf90:	4770      	bx	lr

0800bf92 <__swrite>:
 800bf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf96:	461f      	mov	r7, r3
 800bf98:	898b      	ldrh	r3, [r1, #12]
 800bf9a:	05db      	lsls	r3, r3, #23
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	4616      	mov	r6, r2
 800bfa2:	d505      	bpl.n	800bfb0 <__swrite+0x1e>
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfac:	f002 face 	bl	800e54c <_lseek_r>
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfba:	81a3      	strh	r3, [r4, #12]
 800bfbc:	4632      	mov	r2, r6
 800bfbe:	463b      	mov	r3, r7
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc6:	f000 bf2b 	b.w	800ce20 <_write_r>

0800bfca <__sseek>:
 800bfca:	b510      	push	{r4, lr}
 800bfcc:	460c      	mov	r4, r1
 800bfce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd2:	f002 fabb 	bl	800e54c <_lseek_r>
 800bfd6:	1c43      	adds	r3, r0, #1
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	bf15      	itete	ne
 800bfdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfe6:	81a3      	strheq	r3, [r4, #12]
 800bfe8:	bf18      	it	ne
 800bfea:	81a3      	strhne	r3, [r4, #12]
 800bfec:	bd10      	pop	{r4, pc}

0800bfee <__sclose>:
 800bfee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff2:	f000 bf95 	b.w	800cf20 <_close_r>

0800bff6 <strlcpy>:
 800bff6:	b510      	push	{r4, lr}
 800bff8:	460b      	mov	r3, r1
 800bffa:	b162      	cbz	r2, 800c016 <strlcpy+0x20>
 800bffc:	3a01      	subs	r2, #1
 800bffe:	d008      	beq.n	800c012 <strlcpy+0x1c>
 800c000:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c004:	f800 4b01 	strb.w	r4, [r0], #1
 800c008:	2c00      	cmp	r4, #0
 800c00a:	d1f7      	bne.n	800bffc <strlcpy+0x6>
 800c00c:	1a58      	subs	r0, r3, r1
 800c00e:	3801      	subs	r0, #1
 800c010:	bd10      	pop	{r4, pc}
 800c012:	2200      	movs	r2, #0
 800c014:	7002      	strb	r2, [r0, #0]
 800c016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c01a:	2a00      	cmp	r2, #0
 800c01c:	d1fb      	bne.n	800c016 <strlcpy+0x20>
 800c01e:	e7f5      	b.n	800c00c <strlcpy+0x16>

0800c020 <sulp>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	4604      	mov	r4, r0
 800c024:	460d      	mov	r5, r1
 800c026:	ec45 4b10 	vmov	d0, r4, r5
 800c02a:	4616      	mov	r6, r2
 800c02c:	f002 fdee 	bl	800ec0c <__ulp>
 800c030:	ec51 0b10 	vmov	r0, r1, d0
 800c034:	b17e      	cbz	r6, 800c056 <sulp+0x36>
 800c036:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c03a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c03e:	2b00      	cmp	r3, #0
 800c040:	dd09      	ble.n	800c056 <sulp+0x36>
 800c042:	051b      	lsls	r3, r3, #20
 800c044:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c048:	2400      	movs	r4, #0
 800c04a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c04e:	4622      	mov	r2, r4
 800c050:	462b      	mov	r3, r5
 800c052:	f7f4 fad9 	bl	8000608 <__aeabi_dmul>
 800c056:	bd70      	pop	{r4, r5, r6, pc}

0800c058 <_strtod_l>:
 800c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05c:	461f      	mov	r7, r3
 800c05e:	b0a1      	sub	sp, #132	; 0x84
 800c060:	2300      	movs	r3, #0
 800c062:	4681      	mov	r9, r0
 800c064:	4638      	mov	r0, r7
 800c066:	460e      	mov	r6, r1
 800c068:	9217      	str	r2, [sp, #92]	; 0x5c
 800c06a:	931c      	str	r3, [sp, #112]	; 0x70
 800c06c:	f002 fa5e 	bl	800e52c <__localeconv_l>
 800c070:	4680      	mov	r8, r0
 800c072:	6800      	ldr	r0, [r0, #0]
 800c074:	f7f4 f8b4 	bl	80001e0 <strlen>
 800c078:	f04f 0a00 	mov.w	sl, #0
 800c07c:	4604      	mov	r4, r0
 800c07e:	f04f 0b00 	mov.w	fp, #0
 800c082:	961b      	str	r6, [sp, #108]	; 0x6c
 800c084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	2a0d      	cmp	r2, #13
 800c08a:	d832      	bhi.n	800c0f2 <_strtod_l+0x9a>
 800c08c:	2a09      	cmp	r2, #9
 800c08e:	d236      	bcs.n	800c0fe <_strtod_l+0xa6>
 800c090:	2a00      	cmp	r2, #0
 800c092:	d03e      	beq.n	800c112 <_strtod_l+0xba>
 800c094:	2300      	movs	r3, #0
 800c096:	930d      	str	r3, [sp, #52]	; 0x34
 800c098:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c09a:	782b      	ldrb	r3, [r5, #0]
 800c09c:	2b30      	cmp	r3, #48	; 0x30
 800c09e:	f040 80ac 	bne.w	800c1fa <_strtod_l+0x1a2>
 800c0a2:	786b      	ldrb	r3, [r5, #1]
 800c0a4:	2b58      	cmp	r3, #88	; 0x58
 800c0a6:	d001      	beq.n	800c0ac <_strtod_l+0x54>
 800c0a8:	2b78      	cmp	r3, #120	; 0x78
 800c0aa:	d167      	bne.n	800c17c <_strtod_l+0x124>
 800c0ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	ab1c      	add	r3, sp, #112	; 0x70
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	9702      	str	r7, [sp, #8]
 800c0b6:	ab1d      	add	r3, sp, #116	; 0x74
 800c0b8:	4a88      	ldr	r2, [pc, #544]	; (800c2dc <_strtod_l+0x284>)
 800c0ba:	a91b      	add	r1, sp, #108	; 0x6c
 800c0bc:	4648      	mov	r0, r9
 800c0be:	f001 ff4c 	bl	800df5a <__gethex>
 800c0c2:	f010 0407 	ands.w	r4, r0, #7
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	d005      	beq.n	800c0d6 <_strtod_l+0x7e>
 800c0ca:	2c06      	cmp	r4, #6
 800c0cc:	d12b      	bne.n	800c126 <_strtod_l+0xce>
 800c0ce:	3501      	adds	r5, #1
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	951b      	str	r5, [sp, #108]	; 0x6c
 800c0d4:	930d      	str	r3, [sp, #52]	; 0x34
 800c0d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f040 859a 	bne.w	800cc12 <_strtod_l+0xbba>
 800c0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0e0:	b1e3      	cbz	r3, 800c11c <_strtod_l+0xc4>
 800c0e2:	4652      	mov	r2, sl
 800c0e4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c0e8:	ec43 2b10 	vmov	d0, r2, r3
 800c0ec:	b021      	add	sp, #132	; 0x84
 800c0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f2:	2a2b      	cmp	r2, #43	; 0x2b
 800c0f4:	d015      	beq.n	800c122 <_strtod_l+0xca>
 800c0f6:	2a2d      	cmp	r2, #45	; 0x2d
 800c0f8:	d004      	beq.n	800c104 <_strtod_l+0xac>
 800c0fa:	2a20      	cmp	r2, #32
 800c0fc:	d1ca      	bne.n	800c094 <_strtod_l+0x3c>
 800c0fe:	3301      	adds	r3, #1
 800c100:	931b      	str	r3, [sp, #108]	; 0x6c
 800c102:	e7bf      	b.n	800c084 <_strtod_l+0x2c>
 800c104:	2201      	movs	r2, #1
 800c106:	920d      	str	r2, [sp, #52]	; 0x34
 800c108:	1c5a      	adds	r2, r3, #1
 800c10a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c10c:	785b      	ldrb	r3, [r3, #1]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1c2      	bne.n	800c098 <_strtod_l+0x40>
 800c112:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c114:	961b      	str	r6, [sp, #108]	; 0x6c
 800c116:	2b00      	cmp	r3, #0
 800c118:	f040 8579 	bne.w	800cc0e <_strtod_l+0xbb6>
 800c11c:	4652      	mov	r2, sl
 800c11e:	465b      	mov	r3, fp
 800c120:	e7e2      	b.n	800c0e8 <_strtod_l+0x90>
 800c122:	2200      	movs	r2, #0
 800c124:	e7ef      	b.n	800c106 <_strtod_l+0xae>
 800c126:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c128:	b13a      	cbz	r2, 800c13a <_strtod_l+0xe2>
 800c12a:	2135      	movs	r1, #53	; 0x35
 800c12c:	a81e      	add	r0, sp, #120	; 0x78
 800c12e:	f002 fe65 	bl	800edfc <__copybits>
 800c132:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c134:	4648      	mov	r0, r9
 800c136:	f002 fad2 	bl	800e6de <_Bfree>
 800c13a:	3c01      	subs	r4, #1
 800c13c:	2c04      	cmp	r4, #4
 800c13e:	d806      	bhi.n	800c14e <_strtod_l+0xf6>
 800c140:	e8df f004 	tbb	[pc, r4]
 800c144:	1714030a 	.word	0x1714030a
 800c148:	0a          	.byte	0x0a
 800c149:	00          	.byte	0x00
 800c14a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800c14e:	0730      	lsls	r0, r6, #28
 800c150:	d5c1      	bpl.n	800c0d6 <_strtod_l+0x7e>
 800c152:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c156:	e7be      	b.n	800c0d6 <_strtod_l+0x7e>
 800c158:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800c15c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c15e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c162:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c166:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c16a:	e7f0      	b.n	800c14e <_strtod_l+0xf6>
 800c16c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800c2e0 <_strtod_l+0x288>
 800c170:	e7ed      	b.n	800c14e <_strtod_l+0xf6>
 800c172:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c176:	f04f 3aff 	mov.w	sl, #4294967295
 800c17a:	e7e8      	b.n	800c14e <_strtod_l+0xf6>
 800c17c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	921b      	str	r2, [sp, #108]	; 0x6c
 800c182:	785b      	ldrb	r3, [r3, #1]
 800c184:	2b30      	cmp	r3, #48	; 0x30
 800c186:	d0f9      	beq.n	800c17c <_strtod_l+0x124>
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d0a4      	beq.n	800c0d6 <_strtod_l+0x7e>
 800c18c:	2301      	movs	r3, #1
 800c18e:	2500      	movs	r5, #0
 800c190:	9306      	str	r3, [sp, #24]
 800c192:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c194:	9308      	str	r3, [sp, #32]
 800c196:	9507      	str	r5, [sp, #28]
 800c198:	9505      	str	r5, [sp, #20]
 800c19a:	220a      	movs	r2, #10
 800c19c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c19e:	7807      	ldrb	r7, [r0, #0]
 800c1a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c1a4:	b2d9      	uxtb	r1, r3
 800c1a6:	2909      	cmp	r1, #9
 800c1a8:	d929      	bls.n	800c1fe <_strtod_l+0x1a6>
 800c1aa:	4622      	mov	r2, r4
 800c1ac:	f8d8 1000 	ldr.w	r1, [r8]
 800c1b0:	f003 fc46 	bl	800fa40 <strncmp>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d031      	beq.n	800c21c <_strtod_l+0x1c4>
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	9c05      	ldr	r4, [sp, #20]
 800c1bc:	9004      	str	r0, [sp, #16]
 800c1be:	463b      	mov	r3, r7
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	2b65      	cmp	r3, #101	; 0x65
 800c1c4:	d001      	beq.n	800c1ca <_strtod_l+0x172>
 800c1c6:	2b45      	cmp	r3, #69	; 0x45
 800c1c8:	d114      	bne.n	800c1f4 <_strtod_l+0x19c>
 800c1ca:	b924      	cbnz	r4, 800c1d6 <_strtod_l+0x17e>
 800c1cc:	b910      	cbnz	r0, 800c1d4 <_strtod_l+0x17c>
 800c1ce:	9b06      	ldr	r3, [sp, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d09e      	beq.n	800c112 <_strtod_l+0xba>
 800c1d4:	2400      	movs	r4, #0
 800c1d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c1d8:	1c73      	adds	r3, r6, #1
 800c1da:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1dc:	7873      	ldrb	r3, [r6, #1]
 800c1de:	2b2b      	cmp	r3, #43	; 0x2b
 800c1e0:	d078      	beq.n	800c2d4 <_strtod_l+0x27c>
 800c1e2:	2b2d      	cmp	r3, #45	; 0x2d
 800c1e4:	d070      	beq.n	800c2c8 <_strtod_l+0x270>
 800c1e6:	f04f 0c00 	mov.w	ip, #0
 800c1ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c1ee:	2f09      	cmp	r7, #9
 800c1f0:	d97c      	bls.n	800c2ec <_strtod_l+0x294>
 800c1f2:	961b      	str	r6, [sp, #108]	; 0x6c
 800c1f4:	f04f 0e00 	mov.w	lr, #0
 800c1f8:	e09a      	b.n	800c330 <_strtod_l+0x2d8>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e7c7      	b.n	800c18e <_strtod_l+0x136>
 800c1fe:	9905      	ldr	r1, [sp, #20]
 800c200:	2908      	cmp	r1, #8
 800c202:	bfdd      	ittte	le
 800c204:	9907      	ldrle	r1, [sp, #28]
 800c206:	fb02 3301 	mlale	r3, r2, r1, r3
 800c20a:	9307      	strle	r3, [sp, #28]
 800c20c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c210:	9b05      	ldr	r3, [sp, #20]
 800c212:	3001      	adds	r0, #1
 800c214:	3301      	adds	r3, #1
 800c216:	9305      	str	r3, [sp, #20]
 800c218:	901b      	str	r0, [sp, #108]	; 0x6c
 800c21a:	e7bf      	b.n	800c19c <_strtod_l+0x144>
 800c21c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c21e:	191a      	adds	r2, r3, r4
 800c220:	921b      	str	r2, [sp, #108]	; 0x6c
 800c222:	9a05      	ldr	r2, [sp, #20]
 800c224:	5d1b      	ldrb	r3, [r3, r4]
 800c226:	2a00      	cmp	r2, #0
 800c228:	d037      	beq.n	800c29a <_strtod_l+0x242>
 800c22a:	9c05      	ldr	r4, [sp, #20]
 800c22c:	4602      	mov	r2, r0
 800c22e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c232:	2909      	cmp	r1, #9
 800c234:	d913      	bls.n	800c25e <_strtod_l+0x206>
 800c236:	2101      	movs	r1, #1
 800c238:	9104      	str	r1, [sp, #16]
 800c23a:	e7c2      	b.n	800c1c2 <_strtod_l+0x16a>
 800c23c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	921b      	str	r2, [sp, #108]	; 0x6c
 800c242:	785b      	ldrb	r3, [r3, #1]
 800c244:	3001      	adds	r0, #1
 800c246:	2b30      	cmp	r3, #48	; 0x30
 800c248:	d0f8      	beq.n	800c23c <_strtod_l+0x1e4>
 800c24a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c24e:	2a08      	cmp	r2, #8
 800c250:	f200 84e4 	bhi.w	800cc1c <_strtod_l+0xbc4>
 800c254:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c256:	9208      	str	r2, [sp, #32]
 800c258:	4602      	mov	r2, r0
 800c25a:	2000      	movs	r0, #0
 800c25c:	4604      	mov	r4, r0
 800c25e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c262:	f100 0101 	add.w	r1, r0, #1
 800c266:	d012      	beq.n	800c28e <_strtod_l+0x236>
 800c268:	440a      	add	r2, r1
 800c26a:	eb00 0c04 	add.w	ip, r0, r4
 800c26e:	4621      	mov	r1, r4
 800c270:	270a      	movs	r7, #10
 800c272:	458c      	cmp	ip, r1
 800c274:	d113      	bne.n	800c29e <_strtod_l+0x246>
 800c276:	1821      	adds	r1, r4, r0
 800c278:	2908      	cmp	r1, #8
 800c27a:	f104 0401 	add.w	r4, r4, #1
 800c27e:	4404      	add	r4, r0
 800c280:	dc19      	bgt.n	800c2b6 <_strtod_l+0x25e>
 800c282:	9b07      	ldr	r3, [sp, #28]
 800c284:	210a      	movs	r1, #10
 800c286:	fb01 e303 	mla	r3, r1, r3, lr
 800c28a:	9307      	str	r3, [sp, #28]
 800c28c:	2100      	movs	r1, #0
 800c28e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c290:	1c58      	adds	r0, r3, #1
 800c292:	901b      	str	r0, [sp, #108]	; 0x6c
 800c294:	785b      	ldrb	r3, [r3, #1]
 800c296:	4608      	mov	r0, r1
 800c298:	e7c9      	b.n	800c22e <_strtod_l+0x1d6>
 800c29a:	9805      	ldr	r0, [sp, #20]
 800c29c:	e7d3      	b.n	800c246 <_strtod_l+0x1ee>
 800c29e:	2908      	cmp	r1, #8
 800c2a0:	f101 0101 	add.w	r1, r1, #1
 800c2a4:	dc03      	bgt.n	800c2ae <_strtod_l+0x256>
 800c2a6:	9b07      	ldr	r3, [sp, #28]
 800c2a8:	437b      	muls	r3, r7
 800c2aa:	9307      	str	r3, [sp, #28]
 800c2ac:	e7e1      	b.n	800c272 <_strtod_l+0x21a>
 800c2ae:	2910      	cmp	r1, #16
 800c2b0:	bfd8      	it	le
 800c2b2:	437d      	mulle	r5, r7
 800c2b4:	e7dd      	b.n	800c272 <_strtod_l+0x21a>
 800c2b6:	2c10      	cmp	r4, #16
 800c2b8:	bfdc      	itt	le
 800c2ba:	210a      	movle	r1, #10
 800c2bc:	fb01 e505 	mlale	r5, r1, r5, lr
 800c2c0:	e7e4      	b.n	800c28c <_strtod_l+0x234>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	9304      	str	r3, [sp, #16]
 800c2c6:	e781      	b.n	800c1cc <_strtod_l+0x174>
 800c2c8:	f04f 0c01 	mov.w	ip, #1
 800c2cc:	1cb3      	adds	r3, r6, #2
 800c2ce:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2d0:	78b3      	ldrb	r3, [r6, #2]
 800c2d2:	e78a      	b.n	800c1ea <_strtod_l+0x192>
 800c2d4:	f04f 0c00 	mov.w	ip, #0
 800c2d8:	e7f8      	b.n	800c2cc <_strtod_l+0x274>
 800c2da:	bf00      	nop
 800c2dc:	08012a50 	.word	0x08012a50
 800c2e0:	7ff00000 	.word	0x7ff00000
 800c2e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2e6:	1c5f      	adds	r7, r3, #1
 800c2e8:	971b      	str	r7, [sp, #108]	; 0x6c
 800c2ea:	785b      	ldrb	r3, [r3, #1]
 800c2ec:	2b30      	cmp	r3, #48	; 0x30
 800c2ee:	d0f9      	beq.n	800c2e4 <_strtod_l+0x28c>
 800c2f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c2f4:	2f08      	cmp	r7, #8
 800c2f6:	f63f af7d 	bhi.w	800c1f4 <_strtod_l+0x19c>
 800c2fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c2fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c300:	930a      	str	r3, [sp, #40]	; 0x28
 800c302:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c304:	1c5f      	adds	r7, r3, #1
 800c306:	971b      	str	r7, [sp, #108]	; 0x6c
 800c308:	785b      	ldrb	r3, [r3, #1]
 800c30a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c30e:	f1b8 0f09 	cmp.w	r8, #9
 800c312:	d937      	bls.n	800c384 <_strtod_l+0x32c>
 800c314:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c316:	1a7f      	subs	r7, r7, r1
 800c318:	2f08      	cmp	r7, #8
 800c31a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c31e:	dc37      	bgt.n	800c390 <_strtod_l+0x338>
 800c320:	45be      	cmp	lr, r7
 800c322:	bfa8      	it	ge
 800c324:	46be      	movge	lr, r7
 800c326:	f1bc 0f00 	cmp.w	ip, #0
 800c32a:	d001      	beq.n	800c330 <_strtod_l+0x2d8>
 800c32c:	f1ce 0e00 	rsb	lr, lr, #0
 800c330:	2c00      	cmp	r4, #0
 800c332:	d151      	bne.n	800c3d8 <_strtod_l+0x380>
 800c334:	2800      	cmp	r0, #0
 800c336:	f47f aece 	bne.w	800c0d6 <_strtod_l+0x7e>
 800c33a:	9a06      	ldr	r2, [sp, #24]
 800c33c:	2a00      	cmp	r2, #0
 800c33e:	f47f aeca 	bne.w	800c0d6 <_strtod_l+0x7e>
 800c342:	9a04      	ldr	r2, [sp, #16]
 800c344:	2a00      	cmp	r2, #0
 800c346:	f47f aee4 	bne.w	800c112 <_strtod_l+0xba>
 800c34a:	2b4e      	cmp	r3, #78	; 0x4e
 800c34c:	d027      	beq.n	800c39e <_strtod_l+0x346>
 800c34e:	dc21      	bgt.n	800c394 <_strtod_l+0x33c>
 800c350:	2b49      	cmp	r3, #73	; 0x49
 800c352:	f47f aede 	bne.w	800c112 <_strtod_l+0xba>
 800c356:	49a0      	ldr	r1, [pc, #640]	; (800c5d8 <_strtod_l+0x580>)
 800c358:	a81b      	add	r0, sp, #108	; 0x6c
 800c35a:	f002 f831 	bl	800e3c0 <__match>
 800c35e:	2800      	cmp	r0, #0
 800c360:	f43f aed7 	beq.w	800c112 <_strtod_l+0xba>
 800c364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c366:	499d      	ldr	r1, [pc, #628]	; (800c5dc <_strtod_l+0x584>)
 800c368:	3b01      	subs	r3, #1
 800c36a:	a81b      	add	r0, sp, #108	; 0x6c
 800c36c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c36e:	f002 f827 	bl	800e3c0 <__match>
 800c372:	b910      	cbnz	r0, 800c37a <_strtod_l+0x322>
 800c374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c376:	3301      	adds	r3, #1
 800c378:	931b      	str	r3, [sp, #108]	; 0x6c
 800c37a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c5f0 <_strtod_l+0x598>
 800c37e:	f04f 0a00 	mov.w	sl, #0
 800c382:	e6a8      	b.n	800c0d6 <_strtod_l+0x7e>
 800c384:	210a      	movs	r1, #10
 800c386:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c38a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c38e:	e7b8      	b.n	800c302 <_strtod_l+0x2aa>
 800c390:	46be      	mov	lr, r7
 800c392:	e7c8      	b.n	800c326 <_strtod_l+0x2ce>
 800c394:	2b69      	cmp	r3, #105	; 0x69
 800c396:	d0de      	beq.n	800c356 <_strtod_l+0x2fe>
 800c398:	2b6e      	cmp	r3, #110	; 0x6e
 800c39a:	f47f aeba 	bne.w	800c112 <_strtod_l+0xba>
 800c39e:	4990      	ldr	r1, [pc, #576]	; (800c5e0 <_strtod_l+0x588>)
 800c3a0:	a81b      	add	r0, sp, #108	; 0x6c
 800c3a2:	f002 f80d 	bl	800e3c0 <__match>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	f43f aeb3 	beq.w	800c112 <_strtod_l+0xba>
 800c3ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	2b28      	cmp	r3, #40	; 0x28
 800c3b2:	d10e      	bne.n	800c3d2 <_strtod_l+0x37a>
 800c3b4:	aa1e      	add	r2, sp, #120	; 0x78
 800c3b6:	498b      	ldr	r1, [pc, #556]	; (800c5e4 <_strtod_l+0x58c>)
 800c3b8:	a81b      	add	r0, sp, #108	; 0x6c
 800c3ba:	f002 f815 	bl	800e3e8 <__hexnan>
 800c3be:	2805      	cmp	r0, #5
 800c3c0:	d107      	bne.n	800c3d2 <_strtod_l+0x37a>
 800c3c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c3c4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c3c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c3cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c3d0:	e681      	b.n	800c0d6 <_strtod_l+0x7e>
 800c3d2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c5f8 <_strtod_l+0x5a0>
 800c3d6:	e7d2      	b.n	800c37e <_strtod_l+0x326>
 800c3d8:	ebae 0302 	sub.w	r3, lr, r2
 800c3dc:	9306      	str	r3, [sp, #24]
 800c3de:	9b05      	ldr	r3, [sp, #20]
 800c3e0:	9807      	ldr	r0, [sp, #28]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	bf08      	it	eq
 800c3e6:	4623      	moveq	r3, r4
 800c3e8:	2c10      	cmp	r4, #16
 800c3ea:	9305      	str	r3, [sp, #20]
 800c3ec:	46a0      	mov	r8, r4
 800c3ee:	bfa8      	it	ge
 800c3f0:	f04f 0810 	movge.w	r8, #16
 800c3f4:	f7f4 f88e 	bl	8000514 <__aeabi_ui2d>
 800c3f8:	2c09      	cmp	r4, #9
 800c3fa:	4682      	mov	sl, r0
 800c3fc:	468b      	mov	fp, r1
 800c3fe:	dc13      	bgt.n	800c428 <_strtod_l+0x3d0>
 800c400:	9b06      	ldr	r3, [sp, #24]
 800c402:	2b00      	cmp	r3, #0
 800c404:	f43f ae67 	beq.w	800c0d6 <_strtod_l+0x7e>
 800c408:	9b06      	ldr	r3, [sp, #24]
 800c40a:	dd7a      	ble.n	800c502 <_strtod_l+0x4aa>
 800c40c:	2b16      	cmp	r3, #22
 800c40e:	dc61      	bgt.n	800c4d4 <_strtod_l+0x47c>
 800c410:	4a75      	ldr	r2, [pc, #468]	; (800c5e8 <_strtod_l+0x590>)
 800c412:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c416:	e9de 0100 	ldrd	r0, r1, [lr]
 800c41a:	4652      	mov	r2, sl
 800c41c:	465b      	mov	r3, fp
 800c41e:	f7f4 f8f3 	bl	8000608 <__aeabi_dmul>
 800c422:	4682      	mov	sl, r0
 800c424:	468b      	mov	fp, r1
 800c426:	e656      	b.n	800c0d6 <_strtod_l+0x7e>
 800c428:	4b6f      	ldr	r3, [pc, #444]	; (800c5e8 <_strtod_l+0x590>)
 800c42a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c42e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c432:	f7f4 f8e9 	bl	8000608 <__aeabi_dmul>
 800c436:	4606      	mov	r6, r0
 800c438:	4628      	mov	r0, r5
 800c43a:	460f      	mov	r7, r1
 800c43c:	f7f4 f86a 	bl	8000514 <__aeabi_ui2d>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	4630      	mov	r0, r6
 800c446:	4639      	mov	r1, r7
 800c448:	f7f3 ff28 	bl	800029c <__adddf3>
 800c44c:	2c0f      	cmp	r4, #15
 800c44e:	4682      	mov	sl, r0
 800c450:	468b      	mov	fp, r1
 800c452:	ddd5      	ble.n	800c400 <_strtod_l+0x3a8>
 800c454:	9b06      	ldr	r3, [sp, #24]
 800c456:	eba4 0808 	sub.w	r8, r4, r8
 800c45a:	4498      	add	r8, r3
 800c45c:	f1b8 0f00 	cmp.w	r8, #0
 800c460:	f340 8096 	ble.w	800c590 <_strtod_l+0x538>
 800c464:	f018 030f 	ands.w	r3, r8, #15
 800c468:	d00a      	beq.n	800c480 <_strtod_l+0x428>
 800c46a:	495f      	ldr	r1, [pc, #380]	; (800c5e8 <_strtod_l+0x590>)
 800c46c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c470:	4652      	mov	r2, sl
 800c472:	465b      	mov	r3, fp
 800c474:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c478:	f7f4 f8c6 	bl	8000608 <__aeabi_dmul>
 800c47c:	4682      	mov	sl, r0
 800c47e:	468b      	mov	fp, r1
 800c480:	f038 080f 	bics.w	r8, r8, #15
 800c484:	d073      	beq.n	800c56e <_strtod_l+0x516>
 800c486:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c48a:	dd47      	ble.n	800c51c <_strtod_l+0x4c4>
 800c48c:	2400      	movs	r4, #0
 800c48e:	46a0      	mov	r8, r4
 800c490:	9407      	str	r4, [sp, #28]
 800c492:	9405      	str	r4, [sp, #20]
 800c494:	2322      	movs	r3, #34	; 0x22
 800c496:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c5f0 <_strtod_l+0x598>
 800c49a:	f8c9 3000 	str.w	r3, [r9]
 800c49e:	f04f 0a00 	mov.w	sl, #0
 800c4a2:	9b07      	ldr	r3, [sp, #28]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f43f ae16 	beq.w	800c0d6 <_strtod_l+0x7e>
 800c4aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c4ac:	4648      	mov	r0, r9
 800c4ae:	f002 f916 	bl	800e6de <_Bfree>
 800c4b2:	9905      	ldr	r1, [sp, #20]
 800c4b4:	4648      	mov	r0, r9
 800c4b6:	f002 f912 	bl	800e6de <_Bfree>
 800c4ba:	4641      	mov	r1, r8
 800c4bc:	4648      	mov	r0, r9
 800c4be:	f002 f90e 	bl	800e6de <_Bfree>
 800c4c2:	9907      	ldr	r1, [sp, #28]
 800c4c4:	4648      	mov	r0, r9
 800c4c6:	f002 f90a 	bl	800e6de <_Bfree>
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	4648      	mov	r0, r9
 800c4ce:	f002 f906 	bl	800e6de <_Bfree>
 800c4d2:	e600      	b.n	800c0d6 <_strtod_l+0x7e>
 800c4d4:	9a06      	ldr	r2, [sp, #24]
 800c4d6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	dbba      	blt.n	800c454 <_strtod_l+0x3fc>
 800c4de:	4d42      	ldr	r5, [pc, #264]	; (800c5e8 <_strtod_l+0x590>)
 800c4e0:	f1c4 040f 	rsb	r4, r4, #15
 800c4e4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c4e8:	4652      	mov	r2, sl
 800c4ea:	465b      	mov	r3, fp
 800c4ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4f0:	f7f4 f88a 	bl	8000608 <__aeabi_dmul>
 800c4f4:	9b06      	ldr	r3, [sp, #24]
 800c4f6:	1b1c      	subs	r4, r3, r4
 800c4f8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c4fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c500:	e78d      	b.n	800c41e <_strtod_l+0x3c6>
 800c502:	f113 0f16 	cmn.w	r3, #22
 800c506:	dba5      	blt.n	800c454 <_strtod_l+0x3fc>
 800c508:	4a37      	ldr	r2, [pc, #220]	; (800c5e8 <_strtod_l+0x590>)
 800c50a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c50e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c512:	4650      	mov	r0, sl
 800c514:	4659      	mov	r1, fp
 800c516:	f7f4 f9a1 	bl	800085c <__aeabi_ddiv>
 800c51a:	e782      	b.n	800c422 <_strtod_l+0x3ca>
 800c51c:	2300      	movs	r3, #0
 800c51e:	4e33      	ldr	r6, [pc, #204]	; (800c5ec <_strtod_l+0x594>)
 800c520:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c524:	4650      	mov	r0, sl
 800c526:	4659      	mov	r1, fp
 800c528:	461d      	mov	r5, r3
 800c52a:	f1b8 0f01 	cmp.w	r8, #1
 800c52e:	dc21      	bgt.n	800c574 <_strtod_l+0x51c>
 800c530:	b10b      	cbz	r3, 800c536 <_strtod_l+0x4de>
 800c532:	4682      	mov	sl, r0
 800c534:	468b      	mov	fp, r1
 800c536:	4b2d      	ldr	r3, [pc, #180]	; (800c5ec <_strtod_l+0x594>)
 800c538:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c53c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c540:	4652      	mov	r2, sl
 800c542:	465b      	mov	r3, fp
 800c544:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c548:	f7f4 f85e 	bl	8000608 <__aeabi_dmul>
 800c54c:	4b28      	ldr	r3, [pc, #160]	; (800c5f0 <_strtod_l+0x598>)
 800c54e:	460a      	mov	r2, r1
 800c550:	400b      	ands	r3, r1
 800c552:	4928      	ldr	r1, [pc, #160]	; (800c5f4 <_strtod_l+0x59c>)
 800c554:	428b      	cmp	r3, r1
 800c556:	4682      	mov	sl, r0
 800c558:	d898      	bhi.n	800c48c <_strtod_l+0x434>
 800c55a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c55e:	428b      	cmp	r3, r1
 800c560:	bf86      	itte	hi
 800c562:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c5fc <_strtod_l+0x5a4>
 800c566:	f04f 3aff 	movhi.w	sl, #4294967295
 800c56a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c56e:	2300      	movs	r3, #0
 800c570:	9304      	str	r3, [sp, #16]
 800c572:	e077      	b.n	800c664 <_strtod_l+0x60c>
 800c574:	f018 0f01 	tst.w	r8, #1
 800c578:	d006      	beq.n	800c588 <_strtod_l+0x530>
 800c57a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c582:	f7f4 f841 	bl	8000608 <__aeabi_dmul>
 800c586:	2301      	movs	r3, #1
 800c588:	3501      	adds	r5, #1
 800c58a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c58e:	e7cc      	b.n	800c52a <_strtod_l+0x4d2>
 800c590:	d0ed      	beq.n	800c56e <_strtod_l+0x516>
 800c592:	f1c8 0800 	rsb	r8, r8, #0
 800c596:	f018 020f 	ands.w	r2, r8, #15
 800c59a:	d00a      	beq.n	800c5b2 <_strtod_l+0x55a>
 800c59c:	4b12      	ldr	r3, [pc, #72]	; (800c5e8 <_strtod_l+0x590>)
 800c59e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	4659      	mov	r1, fp
 800c5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5aa:	f7f4 f957 	bl	800085c <__aeabi_ddiv>
 800c5ae:	4682      	mov	sl, r0
 800c5b0:	468b      	mov	fp, r1
 800c5b2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c5b6:	d0da      	beq.n	800c56e <_strtod_l+0x516>
 800c5b8:	f1b8 0f1f 	cmp.w	r8, #31
 800c5bc:	dd20      	ble.n	800c600 <_strtod_l+0x5a8>
 800c5be:	2400      	movs	r4, #0
 800c5c0:	46a0      	mov	r8, r4
 800c5c2:	9407      	str	r4, [sp, #28]
 800c5c4:	9405      	str	r4, [sp, #20]
 800c5c6:	2322      	movs	r3, #34	; 0x22
 800c5c8:	f04f 0a00 	mov.w	sl, #0
 800c5cc:	f04f 0b00 	mov.w	fp, #0
 800c5d0:	f8c9 3000 	str.w	r3, [r9]
 800c5d4:	e765      	b.n	800c4a2 <_strtod_l+0x44a>
 800c5d6:	bf00      	nop
 800c5d8:	08012a1d 	.word	0x08012a1d
 800c5dc:	08012aa3 	.word	0x08012aa3
 800c5e0:	08012a25 	.word	0x08012a25
 800c5e4:	08012a64 	.word	0x08012a64
 800c5e8:	08012b48 	.word	0x08012b48
 800c5ec:	08012b20 	.word	0x08012b20
 800c5f0:	7ff00000 	.word	0x7ff00000
 800c5f4:	7ca00000 	.word	0x7ca00000
 800c5f8:	fff80000 	.word	0xfff80000
 800c5fc:	7fefffff 	.word	0x7fefffff
 800c600:	f018 0310 	ands.w	r3, r8, #16
 800c604:	bf18      	it	ne
 800c606:	236a      	movne	r3, #106	; 0x6a
 800c608:	4da0      	ldr	r5, [pc, #640]	; (800c88c <_strtod_l+0x834>)
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	4650      	mov	r0, sl
 800c60e:	4659      	mov	r1, fp
 800c610:	2300      	movs	r3, #0
 800c612:	f1b8 0f00 	cmp.w	r8, #0
 800c616:	f300 810a 	bgt.w	800c82e <_strtod_l+0x7d6>
 800c61a:	b10b      	cbz	r3, 800c620 <_strtod_l+0x5c8>
 800c61c:	4682      	mov	sl, r0
 800c61e:	468b      	mov	fp, r1
 800c620:	9b04      	ldr	r3, [sp, #16]
 800c622:	b1bb      	cbz	r3, 800c654 <_strtod_l+0x5fc>
 800c624:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c628:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	4659      	mov	r1, fp
 800c630:	dd10      	ble.n	800c654 <_strtod_l+0x5fc>
 800c632:	2b1f      	cmp	r3, #31
 800c634:	f340 8107 	ble.w	800c846 <_strtod_l+0x7ee>
 800c638:	2b34      	cmp	r3, #52	; 0x34
 800c63a:	bfde      	ittt	le
 800c63c:	3b20      	suble	r3, #32
 800c63e:	f04f 32ff 	movle.w	r2, #4294967295
 800c642:	fa02 f303 	lslle.w	r3, r2, r3
 800c646:	f04f 0a00 	mov.w	sl, #0
 800c64a:	bfcc      	ite	gt
 800c64c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c650:	ea03 0b01 	andle.w	fp, r3, r1
 800c654:	2200      	movs	r2, #0
 800c656:	2300      	movs	r3, #0
 800c658:	4650      	mov	r0, sl
 800c65a:	4659      	mov	r1, fp
 800c65c:	f7f4 fa3c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c660:	2800      	cmp	r0, #0
 800c662:	d1ac      	bne.n	800c5be <_strtod_l+0x566>
 800c664:	9b07      	ldr	r3, [sp, #28]
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	9a05      	ldr	r2, [sp, #20]
 800c66a:	9908      	ldr	r1, [sp, #32]
 800c66c:	4623      	mov	r3, r4
 800c66e:	4648      	mov	r0, r9
 800c670:	f002 f887 	bl	800e782 <__s2b>
 800c674:	9007      	str	r0, [sp, #28]
 800c676:	2800      	cmp	r0, #0
 800c678:	f43f af08 	beq.w	800c48c <_strtod_l+0x434>
 800c67c:	9a06      	ldr	r2, [sp, #24]
 800c67e:	9b06      	ldr	r3, [sp, #24]
 800c680:	2a00      	cmp	r2, #0
 800c682:	f1c3 0300 	rsb	r3, r3, #0
 800c686:	bfa8      	it	ge
 800c688:	2300      	movge	r3, #0
 800c68a:	930e      	str	r3, [sp, #56]	; 0x38
 800c68c:	2400      	movs	r4, #0
 800c68e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c692:	9316      	str	r3, [sp, #88]	; 0x58
 800c694:	46a0      	mov	r8, r4
 800c696:	9b07      	ldr	r3, [sp, #28]
 800c698:	4648      	mov	r0, r9
 800c69a:	6859      	ldr	r1, [r3, #4]
 800c69c:	f001 ffeb 	bl	800e676 <_Balloc>
 800c6a0:	9005      	str	r0, [sp, #20]
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	f43f aef6 	beq.w	800c494 <_strtod_l+0x43c>
 800c6a8:	9b07      	ldr	r3, [sp, #28]
 800c6aa:	691a      	ldr	r2, [r3, #16]
 800c6ac:	3202      	adds	r2, #2
 800c6ae:	f103 010c 	add.w	r1, r3, #12
 800c6b2:	0092      	lsls	r2, r2, #2
 800c6b4:	300c      	adds	r0, #12
 800c6b6:	f001 ffd1 	bl	800e65c <memcpy>
 800c6ba:	aa1e      	add	r2, sp, #120	; 0x78
 800c6bc:	a91d      	add	r1, sp, #116	; 0x74
 800c6be:	ec4b ab10 	vmov	d0, sl, fp
 800c6c2:	4648      	mov	r0, r9
 800c6c4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c6c8:	f002 fb16 	bl	800ecf8 <__d2b>
 800c6cc:	901c      	str	r0, [sp, #112]	; 0x70
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	f43f aee0 	beq.w	800c494 <_strtod_l+0x43c>
 800c6d4:	2101      	movs	r1, #1
 800c6d6:	4648      	mov	r0, r9
 800c6d8:	f002 f8df 	bl	800e89a <__i2b>
 800c6dc:	4680      	mov	r8, r0
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	f43f aed8 	beq.w	800c494 <_strtod_l+0x43c>
 800c6e4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c6e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c6e8:	2e00      	cmp	r6, #0
 800c6ea:	bfab      	itete	ge
 800c6ec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c6ee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c6f0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c6f2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c6f4:	bfac      	ite	ge
 800c6f6:	18f7      	addge	r7, r6, r3
 800c6f8:	1b9d      	sublt	r5, r3, r6
 800c6fa:	9b04      	ldr	r3, [sp, #16]
 800c6fc:	1af6      	subs	r6, r6, r3
 800c6fe:	4416      	add	r6, r2
 800c700:	4b63      	ldr	r3, [pc, #396]	; (800c890 <_strtod_l+0x838>)
 800c702:	3e01      	subs	r6, #1
 800c704:	429e      	cmp	r6, r3
 800c706:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c70a:	f280 80af 	bge.w	800c86c <_strtod_l+0x814>
 800c70e:	1b9b      	subs	r3, r3, r6
 800c710:	2b1f      	cmp	r3, #31
 800c712:	eba2 0203 	sub.w	r2, r2, r3
 800c716:	f04f 0101 	mov.w	r1, #1
 800c71a:	f300 809b 	bgt.w	800c854 <_strtod_l+0x7fc>
 800c71e:	fa01 f303 	lsl.w	r3, r1, r3
 800c722:	930f      	str	r3, [sp, #60]	; 0x3c
 800c724:	2300      	movs	r3, #0
 800c726:	930a      	str	r3, [sp, #40]	; 0x28
 800c728:	18be      	adds	r6, r7, r2
 800c72a:	9b04      	ldr	r3, [sp, #16]
 800c72c:	42b7      	cmp	r7, r6
 800c72e:	4415      	add	r5, r2
 800c730:	441d      	add	r5, r3
 800c732:	463b      	mov	r3, r7
 800c734:	bfa8      	it	ge
 800c736:	4633      	movge	r3, r6
 800c738:	42ab      	cmp	r3, r5
 800c73a:	bfa8      	it	ge
 800c73c:	462b      	movge	r3, r5
 800c73e:	2b00      	cmp	r3, #0
 800c740:	bfc2      	ittt	gt
 800c742:	1af6      	subgt	r6, r6, r3
 800c744:	1aed      	subgt	r5, r5, r3
 800c746:	1aff      	subgt	r7, r7, r3
 800c748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c74a:	b1bb      	cbz	r3, 800c77c <_strtod_l+0x724>
 800c74c:	4641      	mov	r1, r8
 800c74e:	461a      	mov	r2, r3
 800c750:	4648      	mov	r0, r9
 800c752:	f002 f941 	bl	800e9d8 <__pow5mult>
 800c756:	4680      	mov	r8, r0
 800c758:	2800      	cmp	r0, #0
 800c75a:	f43f ae9b 	beq.w	800c494 <_strtod_l+0x43c>
 800c75e:	4601      	mov	r1, r0
 800c760:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c762:	4648      	mov	r0, r9
 800c764:	f002 f8a2 	bl	800e8ac <__multiply>
 800c768:	900c      	str	r0, [sp, #48]	; 0x30
 800c76a:	2800      	cmp	r0, #0
 800c76c:	f43f ae92 	beq.w	800c494 <_strtod_l+0x43c>
 800c770:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c772:	4648      	mov	r0, r9
 800c774:	f001 ffb3 	bl	800e6de <_Bfree>
 800c778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c77a:	931c      	str	r3, [sp, #112]	; 0x70
 800c77c:	2e00      	cmp	r6, #0
 800c77e:	dc7a      	bgt.n	800c876 <_strtod_l+0x81e>
 800c780:	9b06      	ldr	r3, [sp, #24]
 800c782:	2b00      	cmp	r3, #0
 800c784:	dd08      	ble.n	800c798 <_strtod_l+0x740>
 800c786:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c788:	9905      	ldr	r1, [sp, #20]
 800c78a:	4648      	mov	r0, r9
 800c78c:	f002 f924 	bl	800e9d8 <__pow5mult>
 800c790:	9005      	str	r0, [sp, #20]
 800c792:	2800      	cmp	r0, #0
 800c794:	f43f ae7e 	beq.w	800c494 <_strtod_l+0x43c>
 800c798:	2d00      	cmp	r5, #0
 800c79a:	dd08      	ble.n	800c7ae <_strtod_l+0x756>
 800c79c:	462a      	mov	r2, r5
 800c79e:	9905      	ldr	r1, [sp, #20]
 800c7a0:	4648      	mov	r0, r9
 800c7a2:	f002 f967 	bl	800ea74 <__lshift>
 800c7a6:	9005      	str	r0, [sp, #20]
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	f43f ae73 	beq.w	800c494 <_strtod_l+0x43c>
 800c7ae:	2f00      	cmp	r7, #0
 800c7b0:	dd08      	ble.n	800c7c4 <_strtod_l+0x76c>
 800c7b2:	4641      	mov	r1, r8
 800c7b4:	463a      	mov	r2, r7
 800c7b6:	4648      	mov	r0, r9
 800c7b8:	f002 f95c 	bl	800ea74 <__lshift>
 800c7bc:	4680      	mov	r8, r0
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	f43f ae68 	beq.w	800c494 <_strtod_l+0x43c>
 800c7c4:	9a05      	ldr	r2, [sp, #20]
 800c7c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c7c8:	4648      	mov	r0, r9
 800c7ca:	f002 f9c1 	bl	800eb50 <__mdiff>
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	f43f ae5f 	beq.w	800c494 <_strtod_l+0x43c>
 800c7d6:	68c3      	ldr	r3, [r0, #12]
 800c7d8:	930c      	str	r3, [sp, #48]	; 0x30
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60c3      	str	r3, [r0, #12]
 800c7de:	4641      	mov	r1, r8
 800c7e0:	f002 f99c 	bl	800eb1c <__mcmp>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	da55      	bge.n	800c894 <_strtod_l+0x83c>
 800c7e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7ea:	b9e3      	cbnz	r3, 800c826 <_strtod_l+0x7ce>
 800c7ec:	f1ba 0f00 	cmp.w	sl, #0
 800c7f0:	d119      	bne.n	800c826 <_strtod_l+0x7ce>
 800c7f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7f6:	b9b3      	cbnz	r3, 800c826 <_strtod_l+0x7ce>
 800c7f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c7fc:	0d1b      	lsrs	r3, r3, #20
 800c7fe:	051b      	lsls	r3, r3, #20
 800c800:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c804:	d90f      	bls.n	800c826 <_strtod_l+0x7ce>
 800c806:	6963      	ldr	r3, [r4, #20]
 800c808:	b913      	cbnz	r3, 800c810 <_strtod_l+0x7b8>
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	dd0a      	ble.n	800c826 <_strtod_l+0x7ce>
 800c810:	4621      	mov	r1, r4
 800c812:	2201      	movs	r2, #1
 800c814:	4648      	mov	r0, r9
 800c816:	f002 f92d 	bl	800ea74 <__lshift>
 800c81a:	4641      	mov	r1, r8
 800c81c:	4604      	mov	r4, r0
 800c81e:	f002 f97d 	bl	800eb1c <__mcmp>
 800c822:	2800      	cmp	r0, #0
 800c824:	dc67      	bgt.n	800c8f6 <_strtod_l+0x89e>
 800c826:	9b04      	ldr	r3, [sp, #16]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d171      	bne.n	800c910 <_strtod_l+0x8b8>
 800c82c:	e63d      	b.n	800c4aa <_strtod_l+0x452>
 800c82e:	f018 0f01 	tst.w	r8, #1
 800c832:	d004      	beq.n	800c83e <_strtod_l+0x7e6>
 800c834:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c838:	f7f3 fee6 	bl	8000608 <__aeabi_dmul>
 800c83c:	2301      	movs	r3, #1
 800c83e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c842:	3508      	adds	r5, #8
 800c844:	e6e5      	b.n	800c612 <_strtod_l+0x5ba>
 800c846:	f04f 32ff 	mov.w	r2, #4294967295
 800c84a:	fa02 f303 	lsl.w	r3, r2, r3
 800c84e:	ea03 0a0a 	and.w	sl, r3, sl
 800c852:	e6ff      	b.n	800c654 <_strtod_l+0x5fc>
 800c854:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c858:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c85c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c860:	36e2      	adds	r6, #226	; 0xe2
 800c862:	fa01 f306 	lsl.w	r3, r1, r6
 800c866:	930a      	str	r3, [sp, #40]	; 0x28
 800c868:	910f      	str	r1, [sp, #60]	; 0x3c
 800c86a:	e75d      	b.n	800c728 <_strtod_l+0x6d0>
 800c86c:	2300      	movs	r3, #0
 800c86e:	930a      	str	r3, [sp, #40]	; 0x28
 800c870:	2301      	movs	r3, #1
 800c872:	930f      	str	r3, [sp, #60]	; 0x3c
 800c874:	e758      	b.n	800c728 <_strtod_l+0x6d0>
 800c876:	4632      	mov	r2, r6
 800c878:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c87a:	4648      	mov	r0, r9
 800c87c:	f002 f8fa 	bl	800ea74 <__lshift>
 800c880:	901c      	str	r0, [sp, #112]	; 0x70
 800c882:	2800      	cmp	r0, #0
 800c884:	f47f af7c 	bne.w	800c780 <_strtod_l+0x728>
 800c888:	e604      	b.n	800c494 <_strtod_l+0x43c>
 800c88a:	bf00      	nop
 800c88c:	08012a78 	.word	0x08012a78
 800c890:	fffffc02 	.word	0xfffffc02
 800c894:	465d      	mov	r5, fp
 800c896:	f040 8086 	bne.w	800c9a6 <_strtod_l+0x94e>
 800c89a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c89c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8a0:	b32a      	cbz	r2, 800c8ee <_strtod_l+0x896>
 800c8a2:	4aaf      	ldr	r2, [pc, #700]	; (800cb60 <_strtod_l+0xb08>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d153      	bne.n	800c950 <_strtod_l+0x8f8>
 800c8a8:	9b04      	ldr	r3, [sp, #16]
 800c8aa:	4650      	mov	r0, sl
 800c8ac:	b1d3      	cbz	r3, 800c8e4 <_strtod_l+0x88c>
 800c8ae:	4aad      	ldr	r2, [pc, #692]	; (800cb64 <_strtod_l+0xb0c>)
 800c8b0:	402a      	ands	r2, r5
 800c8b2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c8b6:	f04f 31ff 	mov.w	r1, #4294967295
 800c8ba:	d816      	bhi.n	800c8ea <_strtod_l+0x892>
 800c8bc:	0d12      	lsrs	r2, r2, #20
 800c8be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c8c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c8c6:	4298      	cmp	r0, r3
 800c8c8:	d142      	bne.n	800c950 <_strtod_l+0x8f8>
 800c8ca:	4ba7      	ldr	r3, [pc, #668]	; (800cb68 <_strtod_l+0xb10>)
 800c8cc:	429d      	cmp	r5, r3
 800c8ce:	d102      	bne.n	800c8d6 <_strtod_l+0x87e>
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	f43f addf 	beq.w	800c494 <_strtod_l+0x43c>
 800c8d6:	4ba3      	ldr	r3, [pc, #652]	; (800cb64 <_strtod_l+0xb0c>)
 800c8d8:	402b      	ands	r3, r5
 800c8da:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c8de:	f04f 0a00 	mov.w	sl, #0
 800c8e2:	e7a0      	b.n	800c826 <_strtod_l+0x7ce>
 800c8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e8:	e7ed      	b.n	800c8c6 <_strtod_l+0x86e>
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	e7eb      	b.n	800c8c6 <_strtod_l+0x86e>
 800c8ee:	bb7b      	cbnz	r3, 800c950 <_strtod_l+0x8f8>
 800c8f0:	f1ba 0f00 	cmp.w	sl, #0
 800c8f4:	d12c      	bne.n	800c950 <_strtod_l+0x8f8>
 800c8f6:	9904      	ldr	r1, [sp, #16]
 800c8f8:	4a9a      	ldr	r2, [pc, #616]	; (800cb64 <_strtod_l+0xb0c>)
 800c8fa:	465b      	mov	r3, fp
 800c8fc:	b1f1      	cbz	r1, 800c93c <_strtod_l+0x8e4>
 800c8fe:	ea02 010b 	and.w	r1, r2, fp
 800c902:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c906:	dc19      	bgt.n	800c93c <_strtod_l+0x8e4>
 800c908:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c90c:	f77f ae5b 	ble.w	800c5c6 <_strtod_l+0x56e>
 800c910:	4a96      	ldr	r2, [pc, #600]	; (800cb6c <_strtod_l+0xb14>)
 800c912:	2300      	movs	r3, #0
 800c914:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c918:	4650      	mov	r0, sl
 800c91a:	4659      	mov	r1, fp
 800c91c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c920:	f7f3 fe72 	bl	8000608 <__aeabi_dmul>
 800c924:	4682      	mov	sl, r0
 800c926:	468b      	mov	fp, r1
 800c928:	2900      	cmp	r1, #0
 800c92a:	f47f adbe 	bne.w	800c4aa <_strtod_l+0x452>
 800c92e:	2800      	cmp	r0, #0
 800c930:	f47f adbb 	bne.w	800c4aa <_strtod_l+0x452>
 800c934:	2322      	movs	r3, #34	; 0x22
 800c936:	f8c9 3000 	str.w	r3, [r9]
 800c93a:	e5b6      	b.n	800c4aa <_strtod_l+0x452>
 800c93c:	4013      	ands	r3, r2
 800c93e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c942:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c946:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c94a:	f04f 3aff 	mov.w	sl, #4294967295
 800c94e:	e76a      	b.n	800c826 <_strtod_l+0x7ce>
 800c950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c952:	b193      	cbz	r3, 800c97a <_strtod_l+0x922>
 800c954:	422b      	tst	r3, r5
 800c956:	f43f af66 	beq.w	800c826 <_strtod_l+0x7ce>
 800c95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c95c:	9a04      	ldr	r2, [sp, #16]
 800c95e:	4650      	mov	r0, sl
 800c960:	4659      	mov	r1, fp
 800c962:	b173      	cbz	r3, 800c982 <_strtod_l+0x92a>
 800c964:	f7ff fb5c 	bl	800c020 <sulp>
 800c968:	4602      	mov	r2, r0
 800c96a:	460b      	mov	r3, r1
 800c96c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c970:	f7f3 fc94 	bl	800029c <__adddf3>
 800c974:	4682      	mov	sl, r0
 800c976:	468b      	mov	fp, r1
 800c978:	e755      	b.n	800c826 <_strtod_l+0x7ce>
 800c97a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c97c:	ea13 0f0a 	tst.w	r3, sl
 800c980:	e7e9      	b.n	800c956 <_strtod_l+0x8fe>
 800c982:	f7ff fb4d 	bl	800c020 <sulp>
 800c986:	4602      	mov	r2, r0
 800c988:	460b      	mov	r3, r1
 800c98a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c98e:	f7f3 fc83 	bl	8000298 <__aeabi_dsub>
 800c992:	2200      	movs	r2, #0
 800c994:	2300      	movs	r3, #0
 800c996:	4682      	mov	sl, r0
 800c998:	468b      	mov	fp, r1
 800c99a:	f7f4 f89d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f47f ae11 	bne.w	800c5c6 <_strtod_l+0x56e>
 800c9a4:	e73f      	b.n	800c826 <_strtod_l+0x7ce>
 800c9a6:	4641      	mov	r1, r8
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f002 f9f4 	bl	800ed96 <__ratio>
 800c9ae:	ec57 6b10 	vmov	r6, r7, d0
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9b8:	ee10 0a10 	vmov	r0, s0
 800c9bc:	4639      	mov	r1, r7
 800c9be:	f7f4 f89f 	bl	8000b00 <__aeabi_dcmple>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d077      	beq.n	800cab6 <_strtod_l+0xa5e>
 800c9c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d04a      	beq.n	800ca62 <_strtod_l+0xa0a>
 800c9cc:	4b68      	ldr	r3, [pc, #416]	; (800cb70 <_strtod_l+0xb18>)
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c9d4:	4f66      	ldr	r7, [pc, #408]	; (800cb70 <_strtod_l+0xb18>)
 800c9d6:	2600      	movs	r6, #0
 800c9d8:	4b62      	ldr	r3, [pc, #392]	; (800cb64 <_strtod_l+0xb0c>)
 800c9da:	402b      	ands	r3, r5
 800c9dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c9e0:	4b64      	ldr	r3, [pc, #400]	; (800cb74 <_strtod_l+0xb1c>)
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	f040 80ce 	bne.w	800cb84 <_strtod_l+0xb2c>
 800c9e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c9ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c9f0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c9f4:	ec4b ab10 	vmov	d0, sl, fp
 800c9f8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c9fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ca00:	f002 f904 	bl	800ec0c <__ulp>
 800ca04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca08:	ec53 2b10 	vmov	r2, r3, d0
 800ca0c:	f7f3 fdfc 	bl	8000608 <__aeabi_dmul>
 800ca10:	4652      	mov	r2, sl
 800ca12:	465b      	mov	r3, fp
 800ca14:	f7f3 fc42 	bl	800029c <__adddf3>
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4952      	ldr	r1, [pc, #328]	; (800cb64 <_strtod_l+0xb0c>)
 800ca1c:	4a56      	ldr	r2, [pc, #344]	; (800cb78 <_strtod_l+0xb20>)
 800ca1e:	4019      	ands	r1, r3
 800ca20:	4291      	cmp	r1, r2
 800ca22:	4682      	mov	sl, r0
 800ca24:	d95b      	bls.n	800cade <_strtod_l+0xa86>
 800ca26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca28:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d103      	bne.n	800ca38 <_strtod_l+0x9e0>
 800ca30:	9b08      	ldr	r3, [sp, #32]
 800ca32:	3301      	adds	r3, #1
 800ca34:	f43f ad2e 	beq.w	800c494 <_strtod_l+0x43c>
 800ca38:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800cb68 <_strtod_l+0xb10>
 800ca3c:	f04f 3aff 	mov.w	sl, #4294967295
 800ca40:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca42:	4648      	mov	r0, r9
 800ca44:	f001 fe4b 	bl	800e6de <_Bfree>
 800ca48:	9905      	ldr	r1, [sp, #20]
 800ca4a:	4648      	mov	r0, r9
 800ca4c:	f001 fe47 	bl	800e6de <_Bfree>
 800ca50:	4641      	mov	r1, r8
 800ca52:	4648      	mov	r0, r9
 800ca54:	f001 fe43 	bl	800e6de <_Bfree>
 800ca58:	4621      	mov	r1, r4
 800ca5a:	4648      	mov	r0, r9
 800ca5c:	f001 fe3f 	bl	800e6de <_Bfree>
 800ca60:	e619      	b.n	800c696 <_strtod_l+0x63e>
 800ca62:	f1ba 0f00 	cmp.w	sl, #0
 800ca66:	d11a      	bne.n	800ca9e <_strtod_l+0xa46>
 800ca68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca6c:	b9eb      	cbnz	r3, 800caaa <_strtod_l+0xa52>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	4b3f      	ldr	r3, [pc, #252]	; (800cb70 <_strtod_l+0xb18>)
 800ca72:	4630      	mov	r0, r6
 800ca74:	4639      	mov	r1, r7
 800ca76:	f7f4 f839 	bl	8000aec <__aeabi_dcmplt>
 800ca7a:	b9c8      	cbnz	r0, 800cab0 <_strtod_l+0xa58>
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	4639      	mov	r1, r7
 800ca80:	2200      	movs	r2, #0
 800ca82:	4b3e      	ldr	r3, [pc, #248]	; (800cb7c <_strtod_l+0xb24>)
 800ca84:	f7f3 fdc0 	bl	8000608 <__aeabi_dmul>
 800ca88:	4606      	mov	r6, r0
 800ca8a:	460f      	mov	r7, r1
 800ca8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ca90:	9618      	str	r6, [sp, #96]	; 0x60
 800ca92:	9319      	str	r3, [sp, #100]	; 0x64
 800ca94:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ca98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ca9c:	e79c      	b.n	800c9d8 <_strtod_l+0x980>
 800ca9e:	f1ba 0f01 	cmp.w	sl, #1
 800caa2:	d102      	bne.n	800caaa <_strtod_l+0xa52>
 800caa4:	2d00      	cmp	r5, #0
 800caa6:	f43f ad8e 	beq.w	800c5c6 <_strtod_l+0x56e>
 800caaa:	2200      	movs	r2, #0
 800caac:	4b34      	ldr	r3, [pc, #208]	; (800cb80 <_strtod_l+0xb28>)
 800caae:	e78f      	b.n	800c9d0 <_strtod_l+0x978>
 800cab0:	2600      	movs	r6, #0
 800cab2:	4f32      	ldr	r7, [pc, #200]	; (800cb7c <_strtod_l+0xb24>)
 800cab4:	e7ea      	b.n	800ca8c <_strtod_l+0xa34>
 800cab6:	4b31      	ldr	r3, [pc, #196]	; (800cb7c <_strtod_l+0xb24>)
 800cab8:	4630      	mov	r0, r6
 800caba:	4639      	mov	r1, r7
 800cabc:	2200      	movs	r2, #0
 800cabe:	f7f3 fda3 	bl	8000608 <__aeabi_dmul>
 800cac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cac4:	4606      	mov	r6, r0
 800cac6:	460f      	mov	r7, r1
 800cac8:	b933      	cbnz	r3, 800cad8 <_strtod_l+0xa80>
 800caca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cace:	9010      	str	r0, [sp, #64]	; 0x40
 800cad0:	9311      	str	r3, [sp, #68]	; 0x44
 800cad2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cad6:	e7df      	b.n	800ca98 <_strtod_l+0xa40>
 800cad8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cadc:	e7f9      	b.n	800cad2 <_strtod_l+0xa7a>
 800cade:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cae2:	9b04      	ldr	r3, [sp, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1ab      	bne.n	800ca40 <_strtod_l+0x9e8>
 800cae8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800caec:	0d1b      	lsrs	r3, r3, #20
 800caee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800caf0:	051b      	lsls	r3, r3, #20
 800caf2:	429a      	cmp	r2, r3
 800caf4:	465d      	mov	r5, fp
 800caf6:	d1a3      	bne.n	800ca40 <_strtod_l+0x9e8>
 800caf8:	4639      	mov	r1, r7
 800cafa:	4630      	mov	r0, r6
 800cafc:	f7f4 f834 	bl	8000b68 <__aeabi_d2iz>
 800cb00:	f7f3 fd18 	bl	8000534 <__aeabi_i2d>
 800cb04:	460b      	mov	r3, r1
 800cb06:	4602      	mov	r2, r0
 800cb08:	4639      	mov	r1, r7
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f7f3 fbc4 	bl	8000298 <__aeabi_dsub>
 800cb10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb12:	4606      	mov	r6, r0
 800cb14:	460f      	mov	r7, r1
 800cb16:	b933      	cbnz	r3, 800cb26 <_strtod_l+0xace>
 800cb18:	f1ba 0f00 	cmp.w	sl, #0
 800cb1c:	d103      	bne.n	800cb26 <_strtod_l+0xace>
 800cb1e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800cb22:	2d00      	cmp	r5, #0
 800cb24:	d06d      	beq.n	800cc02 <_strtod_l+0xbaa>
 800cb26:	a30a      	add	r3, pc, #40	; (adr r3, 800cb50 <_strtod_l+0xaf8>)
 800cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	4639      	mov	r1, r7
 800cb30:	f7f3 ffdc 	bl	8000aec <__aeabi_dcmplt>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	f47f acb8 	bne.w	800c4aa <_strtod_l+0x452>
 800cb3a:	a307      	add	r3, pc, #28	; (adr r3, 800cb58 <_strtod_l+0xb00>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	4630      	mov	r0, r6
 800cb42:	4639      	mov	r1, r7
 800cb44:	f7f3 fff0 	bl	8000b28 <__aeabi_dcmpgt>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	f43f af79 	beq.w	800ca40 <_strtod_l+0x9e8>
 800cb4e:	e4ac      	b.n	800c4aa <_strtod_l+0x452>
 800cb50:	94a03595 	.word	0x94a03595
 800cb54:	3fdfffff 	.word	0x3fdfffff
 800cb58:	35afe535 	.word	0x35afe535
 800cb5c:	3fe00000 	.word	0x3fe00000
 800cb60:	000fffff 	.word	0x000fffff
 800cb64:	7ff00000 	.word	0x7ff00000
 800cb68:	7fefffff 	.word	0x7fefffff
 800cb6c:	39500000 	.word	0x39500000
 800cb70:	3ff00000 	.word	0x3ff00000
 800cb74:	7fe00000 	.word	0x7fe00000
 800cb78:	7c9fffff 	.word	0x7c9fffff
 800cb7c:	3fe00000 	.word	0x3fe00000
 800cb80:	bff00000 	.word	0xbff00000
 800cb84:	9b04      	ldr	r3, [sp, #16]
 800cb86:	b333      	cbz	r3, 800cbd6 <_strtod_l+0xb7e>
 800cb88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cb8e:	d822      	bhi.n	800cbd6 <_strtod_l+0xb7e>
 800cb90:	a327      	add	r3, pc, #156	; (adr r3, 800cc30 <_strtod_l+0xbd8>)
 800cb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb96:	4630      	mov	r0, r6
 800cb98:	4639      	mov	r1, r7
 800cb9a:	f7f3 ffb1 	bl	8000b00 <__aeabi_dcmple>
 800cb9e:	b1a0      	cbz	r0, 800cbca <_strtod_l+0xb72>
 800cba0:	4639      	mov	r1, r7
 800cba2:	4630      	mov	r0, r6
 800cba4:	f7f4 f808 	bl	8000bb8 <__aeabi_d2uiz>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	bf08      	it	eq
 800cbac:	2001      	moveq	r0, #1
 800cbae:	f7f3 fcb1 	bl	8000514 <__aeabi_ui2d>
 800cbb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	460f      	mov	r7, r1
 800cbb8:	bb03      	cbnz	r3, 800cbfc <_strtod_l+0xba4>
 800cbba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbbe:	9012      	str	r0, [sp, #72]	; 0x48
 800cbc0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cbc2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cbc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cbca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cbd2:	1a9b      	subs	r3, r3, r2
 800cbd4:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbd6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800cbda:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800cbde:	f002 f815 	bl	800ec0c <__ulp>
 800cbe2:	4650      	mov	r0, sl
 800cbe4:	ec53 2b10 	vmov	r2, r3, d0
 800cbe8:	4659      	mov	r1, fp
 800cbea:	f7f3 fd0d 	bl	8000608 <__aeabi_dmul>
 800cbee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cbf2:	f7f3 fb53 	bl	800029c <__adddf3>
 800cbf6:	4682      	mov	sl, r0
 800cbf8:	468b      	mov	fp, r1
 800cbfa:	e772      	b.n	800cae2 <_strtod_l+0xa8a>
 800cbfc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800cc00:	e7df      	b.n	800cbc2 <_strtod_l+0xb6a>
 800cc02:	a30d      	add	r3, pc, #52	; (adr r3, 800cc38 <_strtod_l+0xbe0>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 ff70 	bl	8000aec <__aeabi_dcmplt>
 800cc0c:	e79c      	b.n	800cb48 <_strtod_l+0xaf0>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	930d      	str	r3, [sp, #52]	; 0x34
 800cc12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cc14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	f7ff ba61 	b.w	800c0de <_strtod_l+0x86>
 800cc1c:	2b65      	cmp	r3, #101	; 0x65
 800cc1e:	f04f 0200 	mov.w	r2, #0
 800cc22:	f43f ab4e 	beq.w	800c2c2 <_strtod_l+0x26a>
 800cc26:	2101      	movs	r1, #1
 800cc28:	4614      	mov	r4, r2
 800cc2a:	9104      	str	r1, [sp, #16]
 800cc2c:	f7ff bacb 	b.w	800c1c6 <_strtod_l+0x16e>
 800cc30:	ffc00000 	.word	0xffc00000
 800cc34:	41dfffff 	.word	0x41dfffff
 800cc38:	94a03595 	.word	0x94a03595
 800cc3c:	3fcfffff 	.word	0x3fcfffff

0800cc40 <_strtod_r>:
 800cc40:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <_strtod_r+0x18>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	b410      	push	{r4}
 800cc46:	6a1b      	ldr	r3, [r3, #32]
 800cc48:	4c04      	ldr	r4, [pc, #16]	; (800cc5c <_strtod_r+0x1c>)
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	bf08      	it	eq
 800cc4e:	4623      	moveq	r3, r4
 800cc50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc54:	f7ff ba00 	b.w	800c058 <_strtod_l>
 800cc58:	200001e8 	.word	0x200001e8
 800cc5c:	2000024c 	.word	0x2000024c

0800cc60 <_strtol_l.isra.0>:
 800cc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc64:	4680      	mov	r8, r0
 800cc66:	4689      	mov	r9, r1
 800cc68:	4692      	mov	sl, r2
 800cc6a:	461e      	mov	r6, r3
 800cc6c:	460f      	mov	r7, r1
 800cc6e:	463d      	mov	r5, r7
 800cc70:	9808      	ldr	r0, [sp, #32]
 800cc72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc76:	f001 fc47 	bl	800e508 <__locale_ctype_ptr_l>
 800cc7a:	4420      	add	r0, r4
 800cc7c:	7843      	ldrb	r3, [r0, #1]
 800cc7e:	f013 0308 	ands.w	r3, r3, #8
 800cc82:	d132      	bne.n	800ccea <_strtol_l.isra.0+0x8a>
 800cc84:	2c2d      	cmp	r4, #45	; 0x2d
 800cc86:	d132      	bne.n	800ccee <_strtol_l.isra.0+0x8e>
 800cc88:	787c      	ldrb	r4, [r7, #1]
 800cc8a:	1cbd      	adds	r5, r7, #2
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	2e00      	cmp	r6, #0
 800cc90:	d05d      	beq.n	800cd4e <_strtol_l.isra.0+0xee>
 800cc92:	2e10      	cmp	r6, #16
 800cc94:	d109      	bne.n	800ccaa <_strtol_l.isra.0+0x4a>
 800cc96:	2c30      	cmp	r4, #48	; 0x30
 800cc98:	d107      	bne.n	800ccaa <_strtol_l.isra.0+0x4a>
 800cc9a:	782b      	ldrb	r3, [r5, #0]
 800cc9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cca0:	2b58      	cmp	r3, #88	; 0x58
 800cca2:	d14f      	bne.n	800cd44 <_strtol_l.isra.0+0xe4>
 800cca4:	786c      	ldrb	r4, [r5, #1]
 800cca6:	2610      	movs	r6, #16
 800cca8:	3502      	adds	r5, #2
 800ccaa:	2a00      	cmp	r2, #0
 800ccac:	bf14      	ite	ne
 800ccae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ccb2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ccb6:	2700      	movs	r7, #0
 800ccb8:	fbb1 fcf6 	udiv	ip, r1, r6
 800ccbc:	4638      	mov	r0, r7
 800ccbe:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ccc2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ccc6:	2b09      	cmp	r3, #9
 800ccc8:	d817      	bhi.n	800ccfa <_strtol_l.isra.0+0x9a>
 800ccca:	461c      	mov	r4, r3
 800cccc:	42a6      	cmp	r6, r4
 800ccce:	dd23      	ble.n	800cd18 <_strtol_l.isra.0+0xb8>
 800ccd0:	1c7b      	adds	r3, r7, #1
 800ccd2:	d007      	beq.n	800cce4 <_strtol_l.isra.0+0x84>
 800ccd4:	4584      	cmp	ip, r0
 800ccd6:	d31c      	bcc.n	800cd12 <_strtol_l.isra.0+0xb2>
 800ccd8:	d101      	bne.n	800ccde <_strtol_l.isra.0+0x7e>
 800ccda:	45a6      	cmp	lr, r4
 800ccdc:	db19      	blt.n	800cd12 <_strtol_l.isra.0+0xb2>
 800ccde:	fb00 4006 	mla	r0, r0, r6, r4
 800cce2:	2701      	movs	r7, #1
 800cce4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cce8:	e7eb      	b.n	800ccc2 <_strtol_l.isra.0+0x62>
 800ccea:	462f      	mov	r7, r5
 800ccec:	e7bf      	b.n	800cc6e <_strtol_l.isra.0+0xe>
 800ccee:	2c2b      	cmp	r4, #43	; 0x2b
 800ccf0:	bf04      	itt	eq
 800ccf2:	1cbd      	addeq	r5, r7, #2
 800ccf4:	787c      	ldrbeq	r4, [r7, #1]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	e7c9      	b.n	800cc8e <_strtol_l.isra.0+0x2e>
 800ccfa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ccfe:	2b19      	cmp	r3, #25
 800cd00:	d801      	bhi.n	800cd06 <_strtol_l.isra.0+0xa6>
 800cd02:	3c37      	subs	r4, #55	; 0x37
 800cd04:	e7e2      	b.n	800cccc <_strtol_l.isra.0+0x6c>
 800cd06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cd0a:	2b19      	cmp	r3, #25
 800cd0c:	d804      	bhi.n	800cd18 <_strtol_l.isra.0+0xb8>
 800cd0e:	3c57      	subs	r4, #87	; 0x57
 800cd10:	e7dc      	b.n	800cccc <_strtol_l.isra.0+0x6c>
 800cd12:	f04f 37ff 	mov.w	r7, #4294967295
 800cd16:	e7e5      	b.n	800cce4 <_strtol_l.isra.0+0x84>
 800cd18:	1c7b      	adds	r3, r7, #1
 800cd1a:	d108      	bne.n	800cd2e <_strtol_l.isra.0+0xce>
 800cd1c:	2322      	movs	r3, #34	; 0x22
 800cd1e:	f8c8 3000 	str.w	r3, [r8]
 800cd22:	4608      	mov	r0, r1
 800cd24:	f1ba 0f00 	cmp.w	sl, #0
 800cd28:	d107      	bne.n	800cd3a <_strtol_l.isra.0+0xda>
 800cd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd2e:	b102      	cbz	r2, 800cd32 <_strtol_l.isra.0+0xd2>
 800cd30:	4240      	negs	r0, r0
 800cd32:	f1ba 0f00 	cmp.w	sl, #0
 800cd36:	d0f8      	beq.n	800cd2a <_strtol_l.isra.0+0xca>
 800cd38:	b10f      	cbz	r7, 800cd3e <_strtol_l.isra.0+0xde>
 800cd3a:	f105 39ff 	add.w	r9, r5, #4294967295
 800cd3e:	f8ca 9000 	str.w	r9, [sl]
 800cd42:	e7f2      	b.n	800cd2a <_strtol_l.isra.0+0xca>
 800cd44:	2430      	movs	r4, #48	; 0x30
 800cd46:	2e00      	cmp	r6, #0
 800cd48:	d1af      	bne.n	800ccaa <_strtol_l.isra.0+0x4a>
 800cd4a:	2608      	movs	r6, #8
 800cd4c:	e7ad      	b.n	800ccaa <_strtol_l.isra.0+0x4a>
 800cd4e:	2c30      	cmp	r4, #48	; 0x30
 800cd50:	d0a3      	beq.n	800cc9a <_strtol_l.isra.0+0x3a>
 800cd52:	260a      	movs	r6, #10
 800cd54:	e7a9      	b.n	800ccaa <_strtol_l.isra.0+0x4a>
	...

0800cd58 <_strtol_r>:
 800cd58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd5a:	4c06      	ldr	r4, [pc, #24]	; (800cd74 <_strtol_r+0x1c>)
 800cd5c:	4d06      	ldr	r5, [pc, #24]	; (800cd78 <_strtol_r+0x20>)
 800cd5e:	6824      	ldr	r4, [r4, #0]
 800cd60:	6a24      	ldr	r4, [r4, #32]
 800cd62:	2c00      	cmp	r4, #0
 800cd64:	bf08      	it	eq
 800cd66:	462c      	moveq	r4, r5
 800cd68:	9400      	str	r4, [sp, #0]
 800cd6a:	f7ff ff79 	bl	800cc60 <_strtol_l.isra.0>
 800cd6e:	b003      	add	sp, #12
 800cd70:	bd30      	pop	{r4, r5, pc}
 800cd72:	bf00      	nop
 800cd74:	200001e8 	.word	0x200001e8
 800cd78:	2000024c 	.word	0x2000024c

0800cd7c <__swbuf_r>:
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	460e      	mov	r6, r1
 800cd80:	4614      	mov	r4, r2
 800cd82:	4605      	mov	r5, r0
 800cd84:	b118      	cbz	r0, 800cd8e <__swbuf_r+0x12>
 800cd86:	6983      	ldr	r3, [r0, #24]
 800cd88:	b90b      	cbnz	r3, 800cd8e <__swbuf_r+0x12>
 800cd8a:	f001 f80d 	bl	800dda8 <__sinit>
 800cd8e:	4b21      	ldr	r3, [pc, #132]	; (800ce14 <__swbuf_r+0x98>)
 800cd90:	429c      	cmp	r4, r3
 800cd92:	d12a      	bne.n	800cdea <__swbuf_r+0x6e>
 800cd94:	686c      	ldr	r4, [r5, #4]
 800cd96:	69a3      	ldr	r3, [r4, #24]
 800cd98:	60a3      	str	r3, [r4, #8]
 800cd9a:	89a3      	ldrh	r3, [r4, #12]
 800cd9c:	071a      	lsls	r2, r3, #28
 800cd9e:	d52e      	bpl.n	800cdfe <__swbuf_r+0x82>
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	b363      	cbz	r3, 800cdfe <__swbuf_r+0x82>
 800cda4:	6923      	ldr	r3, [r4, #16]
 800cda6:	6820      	ldr	r0, [r4, #0]
 800cda8:	1ac0      	subs	r0, r0, r3
 800cdaa:	6963      	ldr	r3, [r4, #20]
 800cdac:	b2f6      	uxtb	r6, r6
 800cdae:	4283      	cmp	r3, r0
 800cdb0:	4637      	mov	r7, r6
 800cdb2:	dc04      	bgt.n	800cdbe <__swbuf_r+0x42>
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f000 ff8c 	bl	800dcd4 <_fflush_r>
 800cdbc:	bb28      	cbnz	r0, 800ce0a <__swbuf_r+0x8e>
 800cdbe:	68a3      	ldr	r3, [r4, #8]
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	60a3      	str	r3, [r4, #8]
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	1c5a      	adds	r2, r3, #1
 800cdc8:	6022      	str	r2, [r4, #0]
 800cdca:	701e      	strb	r6, [r3, #0]
 800cdcc:	6963      	ldr	r3, [r4, #20]
 800cdce:	3001      	adds	r0, #1
 800cdd0:	4283      	cmp	r3, r0
 800cdd2:	d004      	beq.n	800cdde <__swbuf_r+0x62>
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	07db      	lsls	r3, r3, #31
 800cdd8:	d519      	bpl.n	800ce0e <__swbuf_r+0x92>
 800cdda:	2e0a      	cmp	r6, #10
 800cddc:	d117      	bne.n	800ce0e <__swbuf_r+0x92>
 800cdde:	4621      	mov	r1, r4
 800cde0:	4628      	mov	r0, r5
 800cde2:	f000 ff77 	bl	800dcd4 <_fflush_r>
 800cde6:	b190      	cbz	r0, 800ce0e <__swbuf_r+0x92>
 800cde8:	e00f      	b.n	800ce0a <__swbuf_r+0x8e>
 800cdea:	4b0b      	ldr	r3, [pc, #44]	; (800ce18 <__swbuf_r+0x9c>)
 800cdec:	429c      	cmp	r4, r3
 800cdee:	d101      	bne.n	800cdf4 <__swbuf_r+0x78>
 800cdf0:	68ac      	ldr	r4, [r5, #8]
 800cdf2:	e7d0      	b.n	800cd96 <__swbuf_r+0x1a>
 800cdf4:	4b09      	ldr	r3, [pc, #36]	; (800ce1c <__swbuf_r+0xa0>)
 800cdf6:	429c      	cmp	r4, r3
 800cdf8:	bf08      	it	eq
 800cdfa:	68ec      	ldreq	r4, [r5, #12]
 800cdfc:	e7cb      	b.n	800cd96 <__swbuf_r+0x1a>
 800cdfe:	4621      	mov	r1, r4
 800ce00:	4628      	mov	r0, r5
 800ce02:	f000 f81f 	bl	800ce44 <__swsetup_r>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d0cc      	beq.n	800cda4 <__swbuf_r+0x28>
 800ce0a:	f04f 37ff 	mov.w	r7, #4294967295
 800ce0e:	4638      	mov	r0, r7
 800ce10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce12:	bf00      	nop
 800ce14:	08012ad0 	.word	0x08012ad0
 800ce18:	08012af0 	.word	0x08012af0
 800ce1c:	08012ab0 	.word	0x08012ab0

0800ce20 <_write_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4c07      	ldr	r4, [pc, #28]	; (800ce40 <_write_r+0x20>)
 800ce24:	4605      	mov	r5, r0
 800ce26:	4608      	mov	r0, r1
 800ce28:	4611      	mov	r1, r2
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	6022      	str	r2, [r4, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f7f4 fa48 	bl	80012c4 <_write>
 800ce34:	1c43      	adds	r3, r0, #1
 800ce36:	d102      	bne.n	800ce3e <_write_r+0x1e>
 800ce38:	6823      	ldr	r3, [r4, #0]
 800ce3a:	b103      	cbz	r3, 800ce3e <_write_r+0x1e>
 800ce3c:	602b      	str	r3, [r5, #0]
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
 800ce40:	20001338 	.word	0x20001338

0800ce44 <__swsetup_r>:
 800ce44:	4b32      	ldr	r3, [pc, #200]	; (800cf10 <__swsetup_r+0xcc>)
 800ce46:	b570      	push	{r4, r5, r6, lr}
 800ce48:	681d      	ldr	r5, [r3, #0]
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	b125      	cbz	r5, 800ce5a <__swsetup_r+0x16>
 800ce50:	69ab      	ldr	r3, [r5, #24]
 800ce52:	b913      	cbnz	r3, 800ce5a <__swsetup_r+0x16>
 800ce54:	4628      	mov	r0, r5
 800ce56:	f000 ffa7 	bl	800dda8 <__sinit>
 800ce5a:	4b2e      	ldr	r3, [pc, #184]	; (800cf14 <__swsetup_r+0xd0>)
 800ce5c:	429c      	cmp	r4, r3
 800ce5e:	d10f      	bne.n	800ce80 <__swsetup_r+0x3c>
 800ce60:	686c      	ldr	r4, [r5, #4]
 800ce62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	0715      	lsls	r5, r2, #28
 800ce6a:	d42c      	bmi.n	800cec6 <__swsetup_r+0x82>
 800ce6c:	06d0      	lsls	r0, r2, #27
 800ce6e:	d411      	bmi.n	800ce94 <__swsetup_r+0x50>
 800ce70:	2209      	movs	r2, #9
 800ce72:	6032      	str	r2, [r6, #0]
 800ce74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce78:	81a3      	strh	r3, [r4, #12]
 800ce7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce7e:	e03e      	b.n	800cefe <__swsetup_r+0xba>
 800ce80:	4b25      	ldr	r3, [pc, #148]	; (800cf18 <__swsetup_r+0xd4>)
 800ce82:	429c      	cmp	r4, r3
 800ce84:	d101      	bne.n	800ce8a <__swsetup_r+0x46>
 800ce86:	68ac      	ldr	r4, [r5, #8]
 800ce88:	e7eb      	b.n	800ce62 <__swsetup_r+0x1e>
 800ce8a:	4b24      	ldr	r3, [pc, #144]	; (800cf1c <__swsetup_r+0xd8>)
 800ce8c:	429c      	cmp	r4, r3
 800ce8e:	bf08      	it	eq
 800ce90:	68ec      	ldreq	r4, [r5, #12]
 800ce92:	e7e6      	b.n	800ce62 <__swsetup_r+0x1e>
 800ce94:	0751      	lsls	r1, r2, #29
 800ce96:	d512      	bpl.n	800cebe <__swsetup_r+0x7a>
 800ce98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce9a:	b141      	cbz	r1, 800ceae <__swsetup_r+0x6a>
 800ce9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cea0:	4299      	cmp	r1, r3
 800cea2:	d002      	beq.n	800ceaa <__swsetup_r+0x66>
 800cea4:	4630      	mov	r0, r6
 800cea6:	f7fe f89f 	bl	800afe8 <_free_r>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	6363      	str	r3, [r4, #52]	; 0x34
 800ceae:	89a3      	ldrh	r3, [r4, #12]
 800ceb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ceb4:	81a3      	strh	r3, [r4, #12]
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	6063      	str	r3, [r4, #4]
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	89a3      	ldrh	r3, [r4, #12]
 800cec0:	f043 0308 	orr.w	r3, r3, #8
 800cec4:	81a3      	strh	r3, [r4, #12]
 800cec6:	6923      	ldr	r3, [r4, #16]
 800cec8:	b94b      	cbnz	r3, 800cede <__swsetup_r+0x9a>
 800ceca:	89a3      	ldrh	r3, [r4, #12]
 800cecc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ced0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ced4:	d003      	beq.n	800cede <__swsetup_r+0x9a>
 800ced6:	4621      	mov	r1, r4
 800ced8:	4630      	mov	r0, r6
 800ceda:	f001 fb6d 	bl	800e5b8 <__smakebuf_r>
 800cede:	89a2      	ldrh	r2, [r4, #12]
 800cee0:	f012 0301 	ands.w	r3, r2, #1
 800cee4:	d00c      	beq.n	800cf00 <__swsetup_r+0xbc>
 800cee6:	2300      	movs	r3, #0
 800cee8:	60a3      	str	r3, [r4, #8]
 800ceea:	6963      	ldr	r3, [r4, #20]
 800ceec:	425b      	negs	r3, r3
 800ceee:	61a3      	str	r3, [r4, #24]
 800cef0:	6923      	ldr	r3, [r4, #16]
 800cef2:	b953      	cbnz	r3, 800cf0a <__swsetup_r+0xc6>
 800cef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cef8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cefc:	d1ba      	bne.n	800ce74 <__swsetup_r+0x30>
 800cefe:	bd70      	pop	{r4, r5, r6, pc}
 800cf00:	0792      	lsls	r2, r2, #30
 800cf02:	bf58      	it	pl
 800cf04:	6963      	ldrpl	r3, [r4, #20]
 800cf06:	60a3      	str	r3, [r4, #8]
 800cf08:	e7f2      	b.n	800cef0 <__swsetup_r+0xac>
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	e7f7      	b.n	800cefe <__swsetup_r+0xba>
 800cf0e:	bf00      	nop
 800cf10:	200001e8 	.word	0x200001e8
 800cf14:	08012ad0 	.word	0x08012ad0
 800cf18:	08012af0 	.word	0x08012af0
 800cf1c:	08012ab0 	.word	0x08012ab0

0800cf20 <_close_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4c06      	ldr	r4, [pc, #24]	; (800cf3c <_close_r+0x1c>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4605      	mov	r5, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	6023      	str	r3, [r4, #0]
 800cf2c:	f7f5 f909 	bl	8002142 <_close>
 800cf30:	1c43      	adds	r3, r0, #1
 800cf32:	d102      	bne.n	800cf3a <_close_r+0x1a>
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	b103      	cbz	r3, 800cf3a <_close_r+0x1a>
 800cf38:	602b      	str	r3, [r5, #0]
 800cf3a:	bd38      	pop	{r3, r4, r5, pc}
 800cf3c:	20001338 	.word	0x20001338

0800cf40 <quorem>:
 800cf40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf44:	6903      	ldr	r3, [r0, #16]
 800cf46:	690c      	ldr	r4, [r1, #16]
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	f2c0 8082 	blt.w	800d054 <quorem+0x114>
 800cf50:	3c01      	subs	r4, #1
 800cf52:	f101 0714 	add.w	r7, r1, #20
 800cf56:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cf5a:	f100 0614 	add.w	r6, r0, #20
 800cf5e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cf62:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cf66:	eb06 030c 	add.w	r3, r6, ip
 800cf6a:	3501      	adds	r5, #1
 800cf6c:	eb07 090c 	add.w	r9, r7, ip
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	fbb0 f5f5 	udiv	r5, r0, r5
 800cf76:	b395      	cbz	r5, 800cfde <quorem+0x9e>
 800cf78:	f04f 0a00 	mov.w	sl, #0
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	46b6      	mov	lr, r6
 800cf80:	46d3      	mov	fp, sl
 800cf82:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf86:	b293      	uxth	r3, r2
 800cf88:	fb05 a303 	mla	r3, r5, r3, sl
 800cf8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	ebab 0303 	sub.w	r3, fp, r3
 800cf96:	0c12      	lsrs	r2, r2, #16
 800cf98:	f8de b000 	ldr.w	fp, [lr]
 800cf9c:	fb05 a202 	mla	r2, r5, r2, sl
 800cfa0:	fa13 f38b 	uxtah	r3, r3, fp
 800cfa4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cfa8:	fa1f fb82 	uxth.w	fp, r2
 800cfac:	f8de 2000 	ldr.w	r2, [lr]
 800cfb0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cfb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfbe:	4581      	cmp	r9, r0
 800cfc0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cfc4:	f84e 3b04 	str.w	r3, [lr], #4
 800cfc8:	d2db      	bcs.n	800cf82 <quorem+0x42>
 800cfca:	f856 300c 	ldr.w	r3, [r6, ip]
 800cfce:	b933      	cbnz	r3, 800cfde <quorem+0x9e>
 800cfd0:	9b01      	ldr	r3, [sp, #4]
 800cfd2:	3b04      	subs	r3, #4
 800cfd4:	429e      	cmp	r6, r3
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	d330      	bcc.n	800d03c <quorem+0xfc>
 800cfda:	f8c8 4010 	str.w	r4, [r8, #16]
 800cfde:	4640      	mov	r0, r8
 800cfe0:	f001 fd9c 	bl	800eb1c <__mcmp>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	db25      	blt.n	800d034 <quorem+0xf4>
 800cfe8:	3501      	adds	r5, #1
 800cfea:	4630      	mov	r0, r6
 800cfec:	f04f 0c00 	mov.w	ip, #0
 800cff0:	f857 2b04 	ldr.w	r2, [r7], #4
 800cff4:	f8d0 e000 	ldr.w	lr, [r0]
 800cff8:	b293      	uxth	r3, r2
 800cffa:	ebac 0303 	sub.w	r3, ip, r3
 800cffe:	0c12      	lsrs	r2, r2, #16
 800d000:	fa13 f38e 	uxtah	r3, r3, lr
 800d004:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d012:	45b9      	cmp	r9, r7
 800d014:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d018:	f840 3b04 	str.w	r3, [r0], #4
 800d01c:	d2e8      	bcs.n	800cff0 <quorem+0xb0>
 800d01e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d022:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d026:	b92a      	cbnz	r2, 800d034 <quorem+0xf4>
 800d028:	3b04      	subs	r3, #4
 800d02a:	429e      	cmp	r6, r3
 800d02c:	461a      	mov	r2, r3
 800d02e:	d30b      	bcc.n	800d048 <quorem+0x108>
 800d030:	f8c8 4010 	str.w	r4, [r8, #16]
 800d034:	4628      	mov	r0, r5
 800d036:	b003      	add	sp, #12
 800d038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d03c:	6812      	ldr	r2, [r2, #0]
 800d03e:	3b04      	subs	r3, #4
 800d040:	2a00      	cmp	r2, #0
 800d042:	d1ca      	bne.n	800cfda <quorem+0x9a>
 800d044:	3c01      	subs	r4, #1
 800d046:	e7c5      	b.n	800cfd4 <quorem+0x94>
 800d048:	6812      	ldr	r2, [r2, #0]
 800d04a:	3b04      	subs	r3, #4
 800d04c:	2a00      	cmp	r2, #0
 800d04e:	d1ef      	bne.n	800d030 <quorem+0xf0>
 800d050:	3c01      	subs	r4, #1
 800d052:	e7ea      	b.n	800d02a <quorem+0xea>
 800d054:	2000      	movs	r0, #0
 800d056:	e7ee      	b.n	800d036 <quorem+0xf6>

0800d058 <_dtoa_r>:
 800d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	ec57 6b10 	vmov	r6, r7, d0
 800d060:	b097      	sub	sp, #92	; 0x5c
 800d062:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d064:	9106      	str	r1, [sp, #24]
 800d066:	4604      	mov	r4, r0
 800d068:	920b      	str	r2, [sp, #44]	; 0x2c
 800d06a:	9312      	str	r3, [sp, #72]	; 0x48
 800d06c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d070:	e9cd 6700 	strd	r6, r7, [sp]
 800d074:	b93d      	cbnz	r5, 800d086 <_dtoa_r+0x2e>
 800d076:	2010      	movs	r0, #16
 800d078:	f7fd ff9e 	bl	800afb8 <malloc>
 800d07c:	6260      	str	r0, [r4, #36]	; 0x24
 800d07e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d082:	6005      	str	r5, [r0, #0]
 800d084:	60c5      	str	r5, [r0, #12]
 800d086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d088:	6819      	ldr	r1, [r3, #0]
 800d08a:	b151      	cbz	r1, 800d0a2 <_dtoa_r+0x4a>
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	604a      	str	r2, [r1, #4]
 800d090:	2301      	movs	r3, #1
 800d092:	4093      	lsls	r3, r2
 800d094:	608b      	str	r3, [r1, #8]
 800d096:	4620      	mov	r0, r4
 800d098:	f001 fb21 	bl	800e6de <_Bfree>
 800d09c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d09e:	2200      	movs	r2, #0
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	1e3b      	subs	r3, r7, #0
 800d0a4:	bfbb      	ittet	lt
 800d0a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d0aa:	9301      	strlt	r3, [sp, #4]
 800d0ac:	2300      	movge	r3, #0
 800d0ae:	2201      	movlt	r2, #1
 800d0b0:	bfac      	ite	ge
 800d0b2:	f8c8 3000 	strge.w	r3, [r8]
 800d0b6:	f8c8 2000 	strlt.w	r2, [r8]
 800d0ba:	4baf      	ldr	r3, [pc, #700]	; (800d378 <_dtoa_r+0x320>)
 800d0bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d0c0:	ea33 0308 	bics.w	r3, r3, r8
 800d0c4:	d114      	bne.n	800d0f0 <_dtoa_r+0x98>
 800d0c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d0c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0cc:	6013      	str	r3, [r2, #0]
 800d0ce:	9b00      	ldr	r3, [sp, #0]
 800d0d0:	b923      	cbnz	r3, 800d0dc <_dtoa_r+0x84>
 800d0d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	f000 8542 	beq.w	800db60 <_dtoa_r+0xb08>
 800d0dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d38c <_dtoa_r+0x334>
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f000 8544 	beq.w	800db70 <_dtoa_r+0xb18>
 800d0e8:	f10b 0303 	add.w	r3, fp, #3
 800d0ec:	f000 bd3e 	b.w	800db6c <_dtoa_r+0xb14>
 800d0f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	f7f3 fcec 	bl	8000ad8 <__aeabi_dcmpeq>
 800d100:	4681      	mov	r9, r0
 800d102:	b168      	cbz	r0, 800d120 <_dtoa_r+0xc8>
 800d104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d106:	2301      	movs	r3, #1
 800d108:	6013      	str	r3, [r2, #0]
 800d10a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f000 8524 	beq.w	800db5a <_dtoa_r+0xb02>
 800d112:	4b9a      	ldr	r3, [pc, #616]	; (800d37c <_dtoa_r+0x324>)
 800d114:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d116:	f103 3bff 	add.w	fp, r3, #4294967295
 800d11a:	6013      	str	r3, [r2, #0]
 800d11c:	f000 bd28 	b.w	800db70 <_dtoa_r+0xb18>
 800d120:	aa14      	add	r2, sp, #80	; 0x50
 800d122:	a915      	add	r1, sp, #84	; 0x54
 800d124:	ec47 6b10 	vmov	d0, r6, r7
 800d128:	4620      	mov	r0, r4
 800d12a:	f001 fde5 	bl	800ecf8 <__d2b>
 800d12e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d132:	9004      	str	r0, [sp, #16]
 800d134:	2d00      	cmp	r5, #0
 800d136:	d07c      	beq.n	800d232 <_dtoa_r+0x1da>
 800d138:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d13c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d140:	46b2      	mov	sl, r6
 800d142:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d146:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d14a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d14e:	2200      	movs	r2, #0
 800d150:	4b8b      	ldr	r3, [pc, #556]	; (800d380 <_dtoa_r+0x328>)
 800d152:	4650      	mov	r0, sl
 800d154:	4659      	mov	r1, fp
 800d156:	f7f3 f89f 	bl	8000298 <__aeabi_dsub>
 800d15a:	a381      	add	r3, pc, #516	; (adr r3, 800d360 <_dtoa_r+0x308>)
 800d15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d160:	f7f3 fa52 	bl	8000608 <__aeabi_dmul>
 800d164:	a380      	add	r3, pc, #512	; (adr r3, 800d368 <_dtoa_r+0x310>)
 800d166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16a:	f7f3 f897 	bl	800029c <__adddf3>
 800d16e:	4606      	mov	r6, r0
 800d170:	4628      	mov	r0, r5
 800d172:	460f      	mov	r7, r1
 800d174:	f7f3 f9de 	bl	8000534 <__aeabi_i2d>
 800d178:	a37d      	add	r3, pc, #500	; (adr r3, 800d370 <_dtoa_r+0x318>)
 800d17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17e:	f7f3 fa43 	bl	8000608 <__aeabi_dmul>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	4630      	mov	r0, r6
 800d188:	4639      	mov	r1, r7
 800d18a:	f7f3 f887 	bl	800029c <__adddf3>
 800d18e:	4606      	mov	r6, r0
 800d190:	460f      	mov	r7, r1
 800d192:	f7f3 fce9 	bl	8000b68 <__aeabi_d2iz>
 800d196:	2200      	movs	r2, #0
 800d198:	4682      	mov	sl, r0
 800d19a:	2300      	movs	r3, #0
 800d19c:	4630      	mov	r0, r6
 800d19e:	4639      	mov	r1, r7
 800d1a0:	f7f3 fca4 	bl	8000aec <__aeabi_dcmplt>
 800d1a4:	b148      	cbz	r0, 800d1ba <_dtoa_r+0x162>
 800d1a6:	4650      	mov	r0, sl
 800d1a8:	f7f3 f9c4 	bl	8000534 <__aeabi_i2d>
 800d1ac:	4632      	mov	r2, r6
 800d1ae:	463b      	mov	r3, r7
 800d1b0:	f7f3 fc92 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1b4:	b908      	cbnz	r0, 800d1ba <_dtoa_r+0x162>
 800d1b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1ba:	f1ba 0f16 	cmp.w	sl, #22
 800d1be:	d859      	bhi.n	800d274 <_dtoa_r+0x21c>
 800d1c0:	4970      	ldr	r1, [pc, #448]	; (800d384 <_dtoa_r+0x32c>)
 800d1c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d1c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1ce:	f7f3 fcab 	bl	8000b28 <__aeabi_dcmpgt>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d050      	beq.n	800d278 <_dtoa_r+0x220>
 800d1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1da:	2300      	movs	r3, #0
 800d1dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1e0:	1b5d      	subs	r5, r3, r5
 800d1e2:	f1b5 0801 	subs.w	r8, r5, #1
 800d1e6:	bf49      	itett	mi
 800d1e8:	f1c5 0301 	rsbmi	r3, r5, #1
 800d1ec:	2300      	movpl	r3, #0
 800d1ee:	9305      	strmi	r3, [sp, #20]
 800d1f0:	f04f 0800 	movmi.w	r8, #0
 800d1f4:	bf58      	it	pl
 800d1f6:	9305      	strpl	r3, [sp, #20]
 800d1f8:	f1ba 0f00 	cmp.w	sl, #0
 800d1fc:	db3e      	blt.n	800d27c <_dtoa_r+0x224>
 800d1fe:	2300      	movs	r3, #0
 800d200:	44d0      	add	r8, sl
 800d202:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d206:	9307      	str	r3, [sp, #28]
 800d208:	9b06      	ldr	r3, [sp, #24]
 800d20a:	2b09      	cmp	r3, #9
 800d20c:	f200 8090 	bhi.w	800d330 <_dtoa_r+0x2d8>
 800d210:	2b05      	cmp	r3, #5
 800d212:	bfc4      	itt	gt
 800d214:	3b04      	subgt	r3, #4
 800d216:	9306      	strgt	r3, [sp, #24]
 800d218:	9b06      	ldr	r3, [sp, #24]
 800d21a:	f1a3 0302 	sub.w	r3, r3, #2
 800d21e:	bfcc      	ite	gt
 800d220:	2500      	movgt	r5, #0
 800d222:	2501      	movle	r5, #1
 800d224:	2b03      	cmp	r3, #3
 800d226:	f200 808f 	bhi.w	800d348 <_dtoa_r+0x2f0>
 800d22a:	e8df f003 	tbb	[pc, r3]
 800d22e:	7f7d      	.short	0x7f7d
 800d230:	7131      	.short	0x7131
 800d232:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d236:	441d      	add	r5, r3
 800d238:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d23c:	2820      	cmp	r0, #32
 800d23e:	dd13      	ble.n	800d268 <_dtoa_r+0x210>
 800d240:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d244:	9b00      	ldr	r3, [sp, #0]
 800d246:	fa08 f800 	lsl.w	r8, r8, r0
 800d24a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d24e:	fa23 f000 	lsr.w	r0, r3, r0
 800d252:	ea48 0000 	orr.w	r0, r8, r0
 800d256:	f7f3 f95d 	bl	8000514 <__aeabi_ui2d>
 800d25a:	2301      	movs	r3, #1
 800d25c:	4682      	mov	sl, r0
 800d25e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d262:	3d01      	subs	r5, #1
 800d264:	9313      	str	r3, [sp, #76]	; 0x4c
 800d266:	e772      	b.n	800d14e <_dtoa_r+0xf6>
 800d268:	9b00      	ldr	r3, [sp, #0]
 800d26a:	f1c0 0020 	rsb	r0, r0, #32
 800d26e:	fa03 f000 	lsl.w	r0, r3, r0
 800d272:	e7f0      	b.n	800d256 <_dtoa_r+0x1fe>
 800d274:	2301      	movs	r3, #1
 800d276:	e7b1      	b.n	800d1dc <_dtoa_r+0x184>
 800d278:	900f      	str	r0, [sp, #60]	; 0x3c
 800d27a:	e7b0      	b.n	800d1de <_dtoa_r+0x186>
 800d27c:	9b05      	ldr	r3, [sp, #20]
 800d27e:	eba3 030a 	sub.w	r3, r3, sl
 800d282:	9305      	str	r3, [sp, #20]
 800d284:	f1ca 0300 	rsb	r3, sl, #0
 800d288:	9307      	str	r3, [sp, #28]
 800d28a:	2300      	movs	r3, #0
 800d28c:	930e      	str	r3, [sp, #56]	; 0x38
 800d28e:	e7bb      	b.n	800d208 <_dtoa_r+0x1b0>
 800d290:	2301      	movs	r3, #1
 800d292:	930a      	str	r3, [sp, #40]	; 0x28
 800d294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d296:	2b00      	cmp	r3, #0
 800d298:	dd59      	ble.n	800d34e <_dtoa_r+0x2f6>
 800d29a:	9302      	str	r3, [sp, #8]
 800d29c:	4699      	mov	r9, r3
 800d29e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	6072      	str	r2, [r6, #4]
 800d2a4:	2204      	movs	r2, #4
 800d2a6:	f102 0014 	add.w	r0, r2, #20
 800d2aa:	4298      	cmp	r0, r3
 800d2ac:	6871      	ldr	r1, [r6, #4]
 800d2ae:	d953      	bls.n	800d358 <_dtoa_r+0x300>
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f001 f9e0 	bl	800e676 <_Balloc>
 800d2b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2b8:	6030      	str	r0, [r6, #0]
 800d2ba:	f1b9 0f0e 	cmp.w	r9, #14
 800d2be:	f8d3 b000 	ldr.w	fp, [r3]
 800d2c2:	f200 80e6 	bhi.w	800d492 <_dtoa_r+0x43a>
 800d2c6:	2d00      	cmp	r5, #0
 800d2c8:	f000 80e3 	beq.w	800d492 <_dtoa_r+0x43a>
 800d2cc:	ed9d 7b00 	vldr	d7, [sp]
 800d2d0:	f1ba 0f00 	cmp.w	sl, #0
 800d2d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d2d8:	dd74      	ble.n	800d3c4 <_dtoa_r+0x36c>
 800d2da:	4a2a      	ldr	r2, [pc, #168]	; (800d384 <_dtoa_r+0x32c>)
 800d2dc:	f00a 030f 	and.w	r3, sl, #15
 800d2e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d2e4:	ed93 7b00 	vldr	d7, [r3]
 800d2e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d2ec:	06f0      	lsls	r0, r6, #27
 800d2ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d2f2:	d565      	bpl.n	800d3c0 <_dtoa_r+0x368>
 800d2f4:	4b24      	ldr	r3, [pc, #144]	; (800d388 <_dtoa_r+0x330>)
 800d2f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d2fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d2fe:	f7f3 faad 	bl	800085c <__aeabi_ddiv>
 800d302:	e9cd 0100 	strd	r0, r1, [sp]
 800d306:	f006 060f 	and.w	r6, r6, #15
 800d30a:	2503      	movs	r5, #3
 800d30c:	4f1e      	ldr	r7, [pc, #120]	; (800d388 <_dtoa_r+0x330>)
 800d30e:	e04c      	b.n	800d3aa <_dtoa_r+0x352>
 800d310:	2301      	movs	r3, #1
 800d312:	930a      	str	r3, [sp, #40]	; 0x28
 800d314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d316:	4453      	add	r3, sl
 800d318:	f103 0901 	add.w	r9, r3, #1
 800d31c:	9302      	str	r3, [sp, #8]
 800d31e:	464b      	mov	r3, r9
 800d320:	2b01      	cmp	r3, #1
 800d322:	bfb8      	it	lt
 800d324:	2301      	movlt	r3, #1
 800d326:	e7ba      	b.n	800d29e <_dtoa_r+0x246>
 800d328:	2300      	movs	r3, #0
 800d32a:	e7b2      	b.n	800d292 <_dtoa_r+0x23a>
 800d32c:	2300      	movs	r3, #0
 800d32e:	e7f0      	b.n	800d312 <_dtoa_r+0x2ba>
 800d330:	2501      	movs	r5, #1
 800d332:	2300      	movs	r3, #0
 800d334:	9306      	str	r3, [sp, #24]
 800d336:	950a      	str	r5, [sp, #40]	; 0x28
 800d338:	f04f 33ff 	mov.w	r3, #4294967295
 800d33c:	9302      	str	r3, [sp, #8]
 800d33e:	4699      	mov	r9, r3
 800d340:	2200      	movs	r2, #0
 800d342:	2312      	movs	r3, #18
 800d344:	920b      	str	r2, [sp, #44]	; 0x2c
 800d346:	e7aa      	b.n	800d29e <_dtoa_r+0x246>
 800d348:	2301      	movs	r3, #1
 800d34a:	930a      	str	r3, [sp, #40]	; 0x28
 800d34c:	e7f4      	b.n	800d338 <_dtoa_r+0x2e0>
 800d34e:	2301      	movs	r3, #1
 800d350:	9302      	str	r3, [sp, #8]
 800d352:	4699      	mov	r9, r3
 800d354:	461a      	mov	r2, r3
 800d356:	e7f5      	b.n	800d344 <_dtoa_r+0x2ec>
 800d358:	3101      	adds	r1, #1
 800d35a:	6071      	str	r1, [r6, #4]
 800d35c:	0052      	lsls	r2, r2, #1
 800d35e:	e7a2      	b.n	800d2a6 <_dtoa_r+0x24e>
 800d360:	636f4361 	.word	0x636f4361
 800d364:	3fd287a7 	.word	0x3fd287a7
 800d368:	8b60c8b3 	.word	0x8b60c8b3
 800d36c:	3fc68a28 	.word	0x3fc68a28
 800d370:	509f79fb 	.word	0x509f79fb
 800d374:	3fd34413 	.word	0x3fd34413
 800d378:	7ff00000 	.word	0x7ff00000
 800d37c:	08012c44 	.word	0x08012c44
 800d380:	3ff80000 	.word	0x3ff80000
 800d384:	08012b48 	.word	0x08012b48
 800d388:	08012b20 	.word	0x08012b20
 800d38c:	08012aa9 	.word	0x08012aa9
 800d390:	07f1      	lsls	r1, r6, #31
 800d392:	d508      	bpl.n	800d3a6 <_dtoa_r+0x34e>
 800d394:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d39c:	f7f3 f934 	bl	8000608 <__aeabi_dmul>
 800d3a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d3a4:	3501      	adds	r5, #1
 800d3a6:	1076      	asrs	r6, r6, #1
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	2e00      	cmp	r6, #0
 800d3ac:	d1f0      	bne.n	800d390 <_dtoa_r+0x338>
 800d3ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d3b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3b6:	f7f3 fa51 	bl	800085c <__aeabi_ddiv>
 800d3ba:	e9cd 0100 	strd	r0, r1, [sp]
 800d3be:	e01a      	b.n	800d3f6 <_dtoa_r+0x39e>
 800d3c0:	2502      	movs	r5, #2
 800d3c2:	e7a3      	b.n	800d30c <_dtoa_r+0x2b4>
 800d3c4:	f000 80a0 	beq.w	800d508 <_dtoa_r+0x4b0>
 800d3c8:	f1ca 0600 	rsb	r6, sl, #0
 800d3cc:	4b9f      	ldr	r3, [pc, #636]	; (800d64c <_dtoa_r+0x5f4>)
 800d3ce:	4fa0      	ldr	r7, [pc, #640]	; (800d650 <_dtoa_r+0x5f8>)
 800d3d0:	f006 020f 	and.w	r2, r6, #15
 800d3d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d3e0:	f7f3 f912 	bl	8000608 <__aeabi_dmul>
 800d3e4:	e9cd 0100 	strd	r0, r1, [sp]
 800d3e8:	1136      	asrs	r6, r6, #4
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	2502      	movs	r5, #2
 800d3ee:	2e00      	cmp	r6, #0
 800d3f0:	d17f      	bne.n	800d4f2 <_dtoa_r+0x49a>
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1e1      	bne.n	800d3ba <_dtoa_r+0x362>
 800d3f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 8087 	beq.w	800d50c <_dtoa_r+0x4b4>
 800d3fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d402:	2200      	movs	r2, #0
 800d404:	4b93      	ldr	r3, [pc, #588]	; (800d654 <_dtoa_r+0x5fc>)
 800d406:	4630      	mov	r0, r6
 800d408:	4639      	mov	r1, r7
 800d40a:	f7f3 fb6f 	bl	8000aec <__aeabi_dcmplt>
 800d40e:	2800      	cmp	r0, #0
 800d410:	d07c      	beq.n	800d50c <_dtoa_r+0x4b4>
 800d412:	f1b9 0f00 	cmp.w	r9, #0
 800d416:	d079      	beq.n	800d50c <_dtoa_r+0x4b4>
 800d418:	9b02      	ldr	r3, [sp, #8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	dd35      	ble.n	800d48a <_dtoa_r+0x432>
 800d41e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d422:	9308      	str	r3, [sp, #32]
 800d424:	4639      	mov	r1, r7
 800d426:	2200      	movs	r2, #0
 800d428:	4b8b      	ldr	r3, [pc, #556]	; (800d658 <_dtoa_r+0x600>)
 800d42a:	4630      	mov	r0, r6
 800d42c:	f7f3 f8ec 	bl	8000608 <__aeabi_dmul>
 800d430:	e9cd 0100 	strd	r0, r1, [sp]
 800d434:	9f02      	ldr	r7, [sp, #8]
 800d436:	3501      	adds	r5, #1
 800d438:	4628      	mov	r0, r5
 800d43a:	f7f3 f87b 	bl	8000534 <__aeabi_i2d>
 800d43e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d442:	f7f3 f8e1 	bl	8000608 <__aeabi_dmul>
 800d446:	2200      	movs	r2, #0
 800d448:	4b84      	ldr	r3, [pc, #528]	; (800d65c <_dtoa_r+0x604>)
 800d44a:	f7f2 ff27 	bl	800029c <__adddf3>
 800d44e:	4605      	mov	r5, r0
 800d450:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d454:	2f00      	cmp	r7, #0
 800d456:	d15d      	bne.n	800d514 <_dtoa_r+0x4bc>
 800d458:	2200      	movs	r2, #0
 800d45a:	4b81      	ldr	r3, [pc, #516]	; (800d660 <_dtoa_r+0x608>)
 800d45c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d460:	f7f2 ff1a 	bl	8000298 <__aeabi_dsub>
 800d464:	462a      	mov	r2, r5
 800d466:	4633      	mov	r3, r6
 800d468:	e9cd 0100 	strd	r0, r1, [sp]
 800d46c:	f7f3 fb5c 	bl	8000b28 <__aeabi_dcmpgt>
 800d470:	2800      	cmp	r0, #0
 800d472:	f040 8288 	bne.w	800d986 <_dtoa_r+0x92e>
 800d476:	462a      	mov	r2, r5
 800d478:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d480:	f7f3 fb34 	bl	8000aec <__aeabi_dcmplt>
 800d484:	2800      	cmp	r0, #0
 800d486:	f040 827c 	bne.w	800d982 <_dtoa_r+0x92a>
 800d48a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d48e:	e9cd 2300 	strd	r2, r3, [sp]
 800d492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d494:	2b00      	cmp	r3, #0
 800d496:	f2c0 8150 	blt.w	800d73a <_dtoa_r+0x6e2>
 800d49a:	f1ba 0f0e 	cmp.w	sl, #14
 800d49e:	f300 814c 	bgt.w	800d73a <_dtoa_r+0x6e2>
 800d4a2:	4b6a      	ldr	r3, [pc, #424]	; (800d64c <_dtoa_r+0x5f4>)
 800d4a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d4a8:	ed93 7b00 	vldr	d7, [r3]
 800d4ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d4b4:	f280 80d8 	bge.w	800d668 <_dtoa_r+0x610>
 800d4b8:	f1b9 0f00 	cmp.w	r9, #0
 800d4bc:	f300 80d4 	bgt.w	800d668 <_dtoa_r+0x610>
 800d4c0:	f040 825e 	bne.w	800d980 <_dtoa_r+0x928>
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	4b66      	ldr	r3, [pc, #408]	; (800d660 <_dtoa_r+0x608>)
 800d4c8:	ec51 0b17 	vmov	r0, r1, d7
 800d4cc:	f7f3 f89c 	bl	8000608 <__aeabi_dmul>
 800d4d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4d4:	f7f3 fb1e 	bl	8000b14 <__aeabi_dcmpge>
 800d4d8:	464f      	mov	r7, r9
 800d4da:	464e      	mov	r6, r9
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	f040 8234 	bne.w	800d94a <_dtoa_r+0x8f2>
 800d4e2:	2331      	movs	r3, #49	; 0x31
 800d4e4:	f10b 0501 	add.w	r5, fp, #1
 800d4e8:	f88b 3000 	strb.w	r3, [fp]
 800d4ec:	f10a 0a01 	add.w	sl, sl, #1
 800d4f0:	e22f      	b.n	800d952 <_dtoa_r+0x8fa>
 800d4f2:	07f2      	lsls	r2, r6, #31
 800d4f4:	d505      	bpl.n	800d502 <_dtoa_r+0x4aa>
 800d4f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4fa:	f7f3 f885 	bl	8000608 <__aeabi_dmul>
 800d4fe:	3501      	adds	r5, #1
 800d500:	2301      	movs	r3, #1
 800d502:	1076      	asrs	r6, r6, #1
 800d504:	3708      	adds	r7, #8
 800d506:	e772      	b.n	800d3ee <_dtoa_r+0x396>
 800d508:	2502      	movs	r5, #2
 800d50a:	e774      	b.n	800d3f6 <_dtoa_r+0x39e>
 800d50c:	f8cd a020 	str.w	sl, [sp, #32]
 800d510:	464f      	mov	r7, r9
 800d512:	e791      	b.n	800d438 <_dtoa_r+0x3e0>
 800d514:	4b4d      	ldr	r3, [pc, #308]	; (800d64c <_dtoa_r+0x5f4>)
 800d516:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d51a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d520:	2b00      	cmp	r3, #0
 800d522:	d047      	beq.n	800d5b4 <_dtoa_r+0x55c>
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	2000      	movs	r0, #0
 800d52a:	494e      	ldr	r1, [pc, #312]	; (800d664 <_dtoa_r+0x60c>)
 800d52c:	f7f3 f996 	bl	800085c <__aeabi_ddiv>
 800d530:	462a      	mov	r2, r5
 800d532:	4633      	mov	r3, r6
 800d534:	f7f2 feb0 	bl	8000298 <__aeabi_dsub>
 800d538:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d53c:	465d      	mov	r5, fp
 800d53e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d542:	f7f3 fb11 	bl	8000b68 <__aeabi_d2iz>
 800d546:	4606      	mov	r6, r0
 800d548:	f7f2 fff4 	bl	8000534 <__aeabi_i2d>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d554:	f7f2 fea0 	bl	8000298 <__aeabi_dsub>
 800d558:	3630      	adds	r6, #48	; 0x30
 800d55a:	f805 6b01 	strb.w	r6, [r5], #1
 800d55e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d562:	e9cd 0100 	strd	r0, r1, [sp]
 800d566:	f7f3 fac1 	bl	8000aec <__aeabi_dcmplt>
 800d56a:	2800      	cmp	r0, #0
 800d56c:	d163      	bne.n	800d636 <_dtoa_r+0x5de>
 800d56e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d572:	2000      	movs	r0, #0
 800d574:	4937      	ldr	r1, [pc, #220]	; (800d654 <_dtoa_r+0x5fc>)
 800d576:	f7f2 fe8f 	bl	8000298 <__aeabi_dsub>
 800d57a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d57e:	f7f3 fab5 	bl	8000aec <__aeabi_dcmplt>
 800d582:	2800      	cmp	r0, #0
 800d584:	f040 80b7 	bne.w	800d6f6 <_dtoa_r+0x69e>
 800d588:	eba5 030b 	sub.w	r3, r5, fp
 800d58c:	429f      	cmp	r7, r3
 800d58e:	f77f af7c 	ble.w	800d48a <_dtoa_r+0x432>
 800d592:	2200      	movs	r2, #0
 800d594:	4b30      	ldr	r3, [pc, #192]	; (800d658 <_dtoa_r+0x600>)
 800d596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d59a:	f7f3 f835 	bl	8000608 <__aeabi_dmul>
 800d59e:	2200      	movs	r2, #0
 800d5a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d5a4:	4b2c      	ldr	r3, [pc, #176]	; (800d658 <_dtoa_r+0x600>)
 800d5a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5aa:	f7f3 f82d 	bl	8000608 <__aeabi_dmul>
 800d5ae:	e9cd 0100 	strd	r0, r1, [sp]
 800d5b2:	e7c4      	b.n	800d53e <_dtoa_r+0x4e6>
 800d5b4:	462a      	mov	r2, r5
 800d5b6:	4633      	mov	r3, r6
 800d5b8:	f7f3 f826 	bl	8000608 <__aeabi_dmul>
 800d5bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d5c0:	eb0b 0507 	add.w	r5, fp, r7
 800d5c4:	465e      	mov	r6, fp
 800d5c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5ca:	f7f3 facd 	bl	8000b68 <__aeabi_d2iz>
 800d5ce:	4607      	mov	r7, r0
 800d5d0:	f7f2 ffb0 	bl	8000534 <__aeabi_i2d>
 800d5d4:	3730      	adds	r7, #48	; 0x30
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5de:	f7f2 fe5b 	bl	8000298 <__aeabi_dsub>
 800d5e2:	f806 7b01 	strb.w	r7, [r6], #1
 800d5e6:	42ae      	cmp	r6, r5
 800d5e8:	e9cd 0100 	strd	r0, r1, [sp]
 800d5ec:	f04f 0200 	mov.w	r2, #0
 800d5f0:	d126      	bne.n	800d640 <_dtoa_r+0x5e8>
 800d5f2:	4b1c      	ldr	r3, [pc, #112]	; (800d664 <_dtoa_r+0x60c>)
 800d5f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d5f8:	f7f2 fe50 	bl	800029c <__adddf3>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	460b      	mov	r3, r1
 800d600:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d604:	f7f3 fa90 	bl	8000b28 <__aeabi_dcmpgt>
 800d608:	2800      	cmp	r0, #0
 800d60a:	d174      	bne.n	800d6f6 <_dtoa_r+0x69e>
 800d60c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d610:	2000      	movs	r0, #0
 800d612:	4914      	ldr	r1, [pc, #80]	; (800d664 <_dtoa_r+0x60c>)
 800d614:	f7f2 fe40 	bl	8000298 <__aeabi_dsub>
 800d618:	4602      	mov	r2, r0
 800d61a:	460b      	mov	r3, r1
 800d61c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d620:	f7f3 fa64 	bl	8000aec <__aeabi_dcmplt>
 800d624:	2800      	cmp	r0, #0
 800d626:	f43f af30 	beq.w	800d48a <_dtoa_r+0x432>
 800d62a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d62e:	2b30      	cmp	r3, #48	; 0x30
 800d630:	f105 32ff 	add.w	r2, r5, #4294967295
 800d634:	d002      	beq.n	800d63c <_dtoa_r+0x5e4>
 800d636:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d63a:	e04a      	b.n	800d6d2 <_dtoa_r+0x67a>
 800d63c:	4615      	mov	r5, r2
 800d63e:	e7f4      	b.n	800d62a <_dtoa_r+0x5d2>
 800d640:	4b05      	ldr	r3, [pc, #20]	; (800d658 <_dtoa_r+0x600>)
 800d642:	f7f2 ffe1 	bl	8000608 <__aeabi_dmul>
 800d646:	e9cd 0100 	strd	r0, r1, [sp]
 800d64a:	e7bc      	b.n	800d5c6 <_dtoa_r+0x56e>
 800d64c:	08012b48 	.word	0x08012b48
 800d650:	08012b20 	.word	0x08012b20
 800d654:	3ff00000 	.word	0x3ff00000
 800d658:	40240000 	.word	0x40240000
 800d65c:	401c0000 	.word	0x401c0000
 800d660:	40140000 	.word	0x40140000
 800d664:	3fe00000 	.word	0x3fe00000
 800d668:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d66c:	465d      	mov	r5, fp
 800d66e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d672:	4630      	mov	r0, r6
 800d674:	4639      	mov	r1, r7
 800d676:	f7f3 f8f1 	bl	800085c <__aeabi_ddiv>
 800d67a:	f7f3 fa75 	bl	8000b68 <__aeabi_d2iz>
 800d67e:	4680      	mov	r8, r0
 800d680:	f7f2 ff58 	bl	8000534 <__aeabi_i2d>
 800d684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d688:	f7f2 ffbe 	bl	8000608 <__aeabi_dmul>
 800d68c:	4602      	mov	r2, r0
 800d68e:	460b      	mov	r3, r1
 800d690:	4630      	mov	r0, r6
 800d692:	4639      	mov	r1, r7
 800d694:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d698:	f7f2 fdfe 	bl	8000298 <__aeabi_dsub>
 800d69c:	f805 6b01 	strb.w	r6, [r5], #1
 800d6a0:	eba5 060b 	sub.w	r6, r5, fp
 800d6a4:	45b1      	cmp	r9, r6
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	d139      	bne.n	800d720 <_dtoa_r+0x6c8>
 800d6ac:	f7f2 fdf6 	bl	800029c <__adddf3>
 800d6b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6b4:	4606      	mov	r6, r0
 800d6b6:	460f      	mov	r7, r1
 800d6b8:	f7f3 fa36 	bl	8000b28 <__aeabi_dcmpgt>
 800d6bc:	b9c8      	cbnz	r0, 800d6f2 <_dtoa_r+0x69a>
 800d6be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	f7f3 fa07 	bl	8000ad8 <__aeabi_dcmpeq>
 800d6ca:	b110      	cbz	r0, 800d6d2 <_dtoa_r+0x67a>
 800d6cc:	f018 0f01 	tst.w	r8, #1
 800d6d0:	d10f      	bne.n	800d6f2 <_dtoa_r+0x69a>
 800d6d2:	9904      	ldr	r1, [sp, #16]
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f001 f802 	bl	800e6de <_Bfree>
 800d6da:	2300      	movs	r3, #0
 800d6dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d6de:	702b      	strb	r3, [r5, #0]
 800d6e0:	f10a 0301 	add.w	r3, sl, #1
 800d6e4:	6013      	str	r3, [r2, #0]
 800d6e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 8241 	beq.w	800db70 <_dtoa_r+0xb18>
 800d6ee:	601d      	str	r5, [r3, #0]
 800d6f0:	e23e      	b.n	800db70 <_dtoa_r+0xb18>
 800d6f2:	f8cd a020 	str.w	sl, [sp, #32]
 800d6f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d6fa:	2a39      	cmp	r2, #57	; 0x39
 800d6fc:	f105 33ff 	add.w	r3, r5, #4294967295
 800d700:	d108      	bne.n	800d714 <_dtoa_r+0x6bc>
 800d702:	459b      	cmp	fp, r3
 800d704:	d10a      	bne.n	800d71c <_dtoa_r+0x6c4>
 800d706:	9b08      	ldr	r3, [sp, #32]
 800d708:	3301      	adds	r3, #1
 800d70a:	9308      	str	r3, [sp, #32]
 800d70c:	2330      	movs	r3, #48	; 0x30
 800d70e:	f88b 3000 	strb.w	r3, [fp]
 800d712:	465b      	mov	r3, fp
 800d714:	781a      	ldrb	r2, [r3, #0]
 800d716:	3201      	adds	r2, #1
 800d718:	701a      	strb	r2, [r3, #0]
 800d71a:	e78c      	b.n	800d636 <_dtoa_r+0x5de>
 800d71c:	461d      	mov	r5, r3
 800d71e:	e7ea      	b.n	800d6f6 <_dtoa_r+0x69e>
 800d720:	2200      	movs	r2, #0
 800d722:	4b9b      	ldr	r3, [pc, #620]	; (800d990 <_dtoa_r+0x938>)
 800d724:	f7f2 ff70 	bl	8000608 <__aeabi_dmul>
 800d728:	2200      	movs	r2, #0
 800d72a:	2300      	movs	r3, #0
 800d72c:	4606      	mov	r6, r0
 800d72e:	460f      	mov	r7, r1
 800d730:	f7f3 f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 800d734:	2800      	cmp	r0, #0
 800d736:	d09a      	beq.n	800d66e <_dtoa_r+0x616>
 800d738:	e7cb      	b.n	800d6d2 <_dtoa_r+0x67a>
 800d73a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d73c:	2a00      	cmp	r2, #0
 800d73e:	f000 808b 	beq.w	800d858 <_dtoa_r+0x800>
 800d742:	9a06      	ldr	r2, [sp, #24]
 800d744:	2a01      	cmp	r2, #1
 800d746:	dc6e      	bgt.n	800d826 <_dtoa_r+0x7ce>
 800d748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d74a:	2a00      	cmp	r2, #0
 800d74c:	d067      	beq.n	800d81e <_dtoa_r+0x7c6>
 800d74e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d752:	9f07      	ldr	r7, [sp, #28]
 800d754:	9d05      	ldr	r5, [sp, #20]
 800d756:	9a05      	ldr	r2, [sp, #20]
 800d758:	2101      	movs	r1, #1
 800d75a:	441a      	add	r2, r3
 800d75c:	4620      	mov	r0, r4
 800d75e:	9205      	str	r2, [sp, #20]
 800d760:	4498      	add	r8, r3
 800d762:	f001 f89a 	bl	800e89a <__i2b>
 800d766:	4606      	mov	r6, r0
 800d768:	2d00      	cmp	r5, #0
 800d76a:	dd0c      	ble.n	800d786 <_dtoa_r+0x72e>
 800d76c:	f1b8 0f00 	cmp.w	r8, #0
 800d770:	dd09      	ble.n	800d786 <_dtoa_r+0x72e>
 800d772:	4545      	cmp	r5, r8
 800d774:	9a05      	ldr	r2, [sp, #20]
 800d776:	462b      	mov	r3, r5
 800d778:	bfa8      	it	ge
 800d77a:	4643      	movge	r3, r8
 800d77c:	1ad2      	subs	r2, r2, r3
 800d77e:	9205      	str	r2, [sp, #20]
 800d780:	1aed      	subs	r5, r5, r3
 800d782:	eba8 0803 	sub.w	r8, r8, r3
 800d786:	9b07      	ldr	r3, [sp, #28]
 800d788:	b1eb      	cbz	r3, 800d7c6 <_dtoa_r+0x76e>
 800d78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d067      	beq.n	800d860 <_dtoa_r+0x808>
 800d790:	b18f      	cbz	r7, 800d7b6 <_dtoa_r+0x75e>
 800d792:	4631      	mov	r1, r6
 800d794:	463a      	mov	r2, r7
 800d796:	4620      	mov	r0, r4
 800d798:	f001 f91e 	bl	800e9d8 <__pow5mult>
 800d79c:	9a04      	ldr	r2, [sp, #16]
 800d79e:	4601      	mov	r1, r0
 800d7a0:	4606      	mov	r6, r0
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f001 f882 	bl	800e8ac <__multiply>
 800d7a8:	9904      	ldr	r1, [sp, #16]
 800d7aa:	9008      	str	r0, [sp, #32]
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f000 ff96 	bl	800e6de <_Bfree>
 800d7b2:	9b08      	ldr	r3, [sp, #32]
 800d7b4:	9304      	str	r3, [sp, #16]
 800d7b6:	9b07      	ldr	r3, [sp, #28]
 800d7b8:	1bda      	subs	r2, r3, r7
 800d7ba:	d004      	beq.n	800d7c6 <_dtoa_r+0x76e>
 800d7bc:	9904      	ldr	r1, [sp, #16]
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f001 f90a 	bl	800e9d8 <__pow5mult>
 800d7c4:	9004      	str	r0, [sp, #16]
 800d7c6:	2101      	movs	r1, #1
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f001 f866 	bl	800e89a <__i2b>
 800d7ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7d0:	4607      	mov	r7, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 81d0 	beq.w	800db78 <_dtoa_r+0xb20>
 800d7d8:	461a      	mov	r2, r3
 800d7da:	4601      	mov	r1, r0
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f001 f8fb 	bl	800e9d8 <__pow5mult>
 800d7e2:	9b06      	ldr	r3, [sp, #24]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	4607      	mov	r7, r0
 800d7e8:	dc40      	bgt.n	800d86c <_dtoa_r+0x814>
 800d7ea:	9b00      	ldr	r3, [sp, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d139      	bne.n	800d864 <_dtoa_r+0x80c>
 800d7f0:	9b01      	ldr	r3, [sp, #4]
 800d7f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d136      	bne.n	800d868 <_dtoa_r+0x810>
 800d7fa:	9b01      	ldr	r3, [sp, #4]
 800d7fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d800:	0d1b      	lsrs	r3, r3, #20
 800d802:	051b      	lsls	r3, r3, #20
 800d804:	b12b      	cbz	r3, 800d812 <_dtoa_r+0x7ba>
 800d806:	9b05      	ldr	r3, [sp, #20]
 800d808:	3301      	adds	r3, #1
 800d80a:	9305      	str	r3, [sp, #20]
 800d80c:	f108 0801 	add.w	r8, r8, #1
 800d810:	2301      	movs	r3, #1
 800d812:	9307      	str	r3, [sp, #28]
 800d814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d816:	2b00      	cmp	r3, #0
 800d818:	d12a      	bne.n	800d870 <_dtoa_r+0x818>
 800d81a:	2001      	movs	r0, #1
 800d81c:	e030      	b.n	800d880 <_dtoa_r+0x828>
 800d81e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d820:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d824:	e795      	b.n	800d752 <_dtoa_r+0x6fa>
 800d826:	9b07      	ldr	r3, [sp, #28]
 800d828:	f109 37ff 	add.w	r7, r9, #4294967295
 800d82c:	42bb      	cmp	r3, r7
 800d82e:	bfbf      	itttt	lt
 800d830:	9b07      	ldrlt	r3, [sp, #28]
 800d832:	9707      	strlt	r7, [sp, #28]
 800d834:	1afa      	sublt	r2, r7, r3
 800d836:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d838:	bfbb      	ittet	lt
 800d83a:	189b      	addlt	r3, r3, r2
 800d83c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d83e:	1bdf      	subge	r7, r3, r7
 800d840:	2700      	movlt	r7, #0
 800d842:	f1b9 0f00 	cmp.w	r9, #0
 800d846:	bfb5      	itete	lt
 800d848:	9b05      	ldrlt	r3, [sp, #20]
 800d84a:	9d05      	ldrge	r5, [sp, #20]
 800d84c:	eba3 0509 	sublt.w	r5, r3, r9
 800d850:	464b      	movge	r3, r9
 800d852:	bfb8      	it	lt
 800d854:	2300      	movlt	r3, #0
 800d856:	e77e      	b.n	800d756 <_dtoa_r+0x6fe>
 800d858:	9f07      	ldr	r7, [sp, #28]
 800d85a:	9d05      	ldr	r5, [sp, #20]
 800d85c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d85e:	e783      	b.n	800d768 <_dtoa_r+0x710>
 800d860:	9a07      	ldr	r2, [sp, #28]
 800d862:	e7ab      	b.n	800d7bc <_dtoa_r+0x764>
 800d864:	2300      	movs	r3, #0
 800d866:	e7d4      	b.n	800d812 <_dtoa_r+0x7ba>
 800d868:	9b00      	ldr	r3, [sp, #0]
 800d86a:	e7d2      	b.n	800d812 <_dtoa_r+0x7ba>
 800d86c:	2300      	movs	r3, #0
 800d86e:	9307      	str	r3, [sp, #28]
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d876:	6918      	ldr	r0, [r3, #16]
 800d878:	f000 ffc1 	bl	800e7fe <__hi0bits>
 800d87c:	f1c0 0020 	rsb	r0, r0, #32
 800d880:	4440      	add	r0, r8
 800d882:	f010 001f 	ands.w	r0, r0, #31
 800d886:	d047      	beq.n	800d918 <_dtoa_r+0x8c0>
 800d888:	f1c0 0320 	rsb	r3, r0, #32
 800d88c:	2b04      	cmp	r3, #4
 800d88e:	dd3b      	ble.n	800d908 <_dtoa_r+0x8b0>
 800d890:	9b05      	ldr	r3, [sp, #20]
 800d892:	f1c0 001c 	rsb	r0, r0, #28
 800d896:	4403      	add	r3, r0
 800d898:	9305      	str	r3, [sp, #20]
 800d89a:	4405      	add	r5, r0
 800d89c:	4480      	add	r8, r0
 800d89e:	9b05      	ldr	r3, [sp, #20]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	dd05      	ble.n	800d8b0 <_dtoa_r+0x858>
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	9904      	ldr	r1, [sp, #16]
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f001 f8e3 	bl	800ea74 <__lshift>
 800d8ae:	9004      	str	r0, [sp, #16]
 800d8b0:	f1b8 0f00 	cmp.w	r8, #0
 800d8b4:	dd05      	ble.n	800d8c2 <_dtoa_r+0x86a>
 800d8b6:	4639      	mov	r1, r7
 800d8b8:	4642      	mov	r2, r8
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f001 f8da 	bl	800ea74 <__lshift>
 800d8c0:	4607      	mov	r7, r0
 800d8c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8c4:	b353      	cbz	r3, 800d91c <_dtoa_r+0x8c4>
 800d8c6:	4639      	mov	r1, r7
 800d8c8:	9804      	ldr	r0, [sp, #16]
 800d8ca:	f001 f927 	bl	800eb1c <__mcmp>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	da24      	bge.n	800d91c <_dtoa_r+0x8c4>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	220a      	movs	r2, #10
 800d8d6:	9904      	ldr	r1, [sp, #16]
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f000 ff17 	bl	800e70c <__multadd>
 800d8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8e0:	9004      	str	r0, [sp, #16]
 800d8e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f000 814d 	beq.w	800db86 <_dtoa_r+0xb2e>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	4631      	mov	r1, r6
 800d8f0:	220a      	movs	r2, #10
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 ff0a 	bl	800e70c <__multadd>
 800d8f8:	9b02      	ldr	r3, [sp, #8]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	4606      	mov	r6, r0
 800d8fe:	dc4f      	bgt.n	800d9a0 <_dtoa_r+0x948>
 800d900:	9b06      	ldr	r3, [sp, #24]
 800d902:	2b02      	cmp	r3, #2
 800d904:	dd4c      	ble.n	800d9a0 <_dtoa_r+0x948>
 800d906:	e011      	b.n	800d92c <_dtoa_r+0x8d4>
 800d908:	d0c9      	beq.n	800d89e <_dtoa_r+0x846>
 800d90a:	9a05      	ldr	r2, [sp, #20]
 800d90c:	331c      	adds	r3, #28
 800d90e:	441a      	add	r2, r3
 800d910:	9205      	str	r2, [sp, #20]
 800d912:	441d      	add	r5, r3
 800d914:	4498      	add	r8, r3
 800d916:	e7c2      	b.n	800d89e <_dtoa_r+0x846>
 800d918:	4603      	mov	r3, r0
 800d91a:	e7f6      	b.n	800d90a <_dtoa_r+0x8b2>
 800d91c:	f1b9 0f00 	cmp.w	r9, #0
 800d920:	dc38      	bgt.n	800d994 <_dtoa_r+0x93c>
 800d922:	9b06      	ldr	r3, [sp, #24]
 800d924:	2b02      	cmp	r3, #2
 800d926:	dd35      	ble.n	800d994 <_dtoa_r+0x93c>
 800d928:	f8cd 9008 	str.w	r9, [sp, #8]
 800d92c:	9b02      	ldr	r3, [sp, #8]
 800d92e:	b963      	cbnz	r3, 800d94a <_dtoa_r+0x8f2>
 800d930:	4639      	mov	r1, r7
 800d932:	2205      	movs	r2, #5
 800d934:	4620      	mov	r0, r4
 800d936:	f000 fee9 	bl	800e70c <__multadd>
 800d93a:	4601      	mov	r1, r0
 800d93c:	4607      	mov	r7, r0
 800d93e:	9804      	ldr	r0, [sp, #16]
 800d940:	f001 f8ec 	bl	800eb1c <__mcmp>
 800d944:	2800      	cmp	r0, #0
 800d946:	f73f adcc 	bgt.w	800d4e2 <_dtoa_r+0x48a>
 800d94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d94c:	465d      	mov	r5, fp
 800d94e:	ea6f 0a03 	mvn.w	sl, r3
 800d952:	f04f 0900 	mov.w	r9, #0
 800d956:	4639      	mov	r1, r7
 800d958:	4620      	mov	r0, r4
 800d95a:	f000 fec0 	bl	800e6de <_Bfree>
 800d95e:	2e00      	cmp	r6, #0
 800d960:	f43f aeb7 	beq.w	800d6d2 <_dtoa_r+0x67a>
 800d964:	f1b9 0f00 	cmp.w	r9, #0
 800d968:	d005      	beq.n	800d976 <_dtoa_r+0x91e>
 800d96a:	45b1      	cmp	r9, r6
 800d96c:	d003      	beq.n	800d976 <_dtoa_r+0x91e>
 800d96e:	4649      	mov	r1, r9
 800d970:	4620      	mov	r0, r4
 800d972:	f000 feb4 	bl	800e6de <_Bfree>
 800d976:	4631      	mov	r1, r6
 800d978:	4620      	mov	r0, r4
 800d97a:	f000 feb0 	bl	800e6de <_Bfree>
 800d97e:	e6a8      	b.n	800d6d2 <_dtoa_r+0x67a>
 800d980:	2700      	movs	r7, #0
 800d982:	463e      	mov	r6, r7
 800d984:	e7e1      	b.n	800d94a <_dtoa_r+0x8f2>
 800d986:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d98a:	463e      	mov	r6, r7
 800d98c:	e5a9      	b.n	800d4e2 <_dtoa_r+0x48a>
 800d98e:	bf00      	nop
 800d990:	40240000 	.word	0x40240000
 800d994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d996:	f8cd 9008 	str.w	r9, [sp, #8]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 80fa 	beq.w	800db94 <_dtoa_r+0xb3c>
 800d9a0:	2d00      	cmp	r5, #0
 800d9a2:	dd05      	ble.n	800d9b0 <_dtoa_r+0x958>
 800d9a4:	4631      	mov	r1, r6
 800d9a6:	462a      	mov	r2, r5
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f001 f863 	bl	800ea74 <__lshift>
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	9b07      	ldr	r3, [sp, #28]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d04c      	beq.n	800da50 <_dtoa_r+0x9f8>
 800d9b6:	6871      	ldr	r1, [r6, #4]
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f000 fe5c 	bl	800e676 <_Balloc>
 800d9be:	6932      	ldr	r2, [r6, #16]
 800d9c0:	3202      	adds	r2, #2
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	0092      	lsls	r2, r2, #2
 800d9c6:	f106 010c 	add.w	r1, r6, #12
 800d9ca:	300c      	adds	r0, #12
 800d9cc:	f000 fe46 	bl	800e65c <memcpy>
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f001 f84d 	bl	800ea74 <__lshift>
 800d9da:	9b00      	ldr	r3, [sp, #0]
 800d9dc:	f8cd b014 	str.w	fp, [sp, #20]
 800d9e0:	f003 0301 	and.w	r3, r3, #1
 800d9e4:	46b1      	mov	r9, r6
 800d9e6:	9307      	str	r3, [sp, #28]
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	4639      	mov	r1, r7
 800d9ec:	9804      	ldr	r0, [sp, #16]
 800d9ee:	f7ff faa7 	bl	800cf40 <quorem>
 800d9f2:	4649      	mov	r1, r9
 800d9f4:	4605      	mov	r5, r0
 800d9f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d9fa:	9804      	ldr	r0, [sp, #16]
 800d9fc:	f001 f88e 	bl	800eb1c <__mcmp>
 800da00:	4632      	mov	r2, r6
 800da02:	9000      	str	r0, [sp, #0]
 800da04:	4639      	mov	r1, r7
 800da06:	4620      	mov	r0, r4
 800da08:	f001 f8a2 	bl	800eb50 <__mdiff>
 800da0c:	68c3      	ldr	r3, [r0, #12]
 800da0e:	4602      	mov	r2, r0
 800da10:	bb03      	cbnz	r3, 800da54 <_dtoa_r+0x9fc>
 800da12:	4601      	mov	r1, r0
 800da14:	9008      	str	r0, [sp, #32]
 800da16:	9804      	ldr	r0, [sp, #16]
 800da18:	f001 f880 	bl	800eb1c <__mcmp>
 800da1c:	9a08      	ldr	r2, [sp, #32]
 800da1e:	4603      	mov	r3, r0
 800da20:	4611      	mov	r1, r2
 800da22:	4620      	mov	r0, r4
 800da24:	9308      	str	r3, [sp, #32]
 800da26:	f000 fe5a 	bl	800e6de <_Bfree>
 800da2a:	9b08      	ldr	r3, [sp, #32]
 800da2c:	b9a3      	cbnz	r3, 800da58 <_dtoa_r+0xa00>
 800da2e:	9a06      	ldr	r2, [sp, #24]
 800da30:	b992      	cbnz	r2, 800da58 <_dtoa_r+0xa00>
 800da32:	9a07      	ldr	r2, [sp, #28]
 800da34:	b982      	cbnz	r2, 800da58 <_dtoa_r+0xa00>
 800da36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800da3a:	d029      	beq.n	800da90 <_dtoa_r+0xa38>
 800da3c:	9b00      	ldr	r3, [sp, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	dd01      	ble.n	800da46 <_dtoa_r+0x9ee>
 800da42:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800da46:	9b05      	ldr	r3, [sp, #20]
 800da48:	1c5d      	adds	r5, r3, #1
 800da4a:	f883 8000 	strb.w	r8, [r3]
 800da4e:	e782      	b.n	800d956 <_dtoa_r+0x8fe>
 800da50:	4630      	mov	r0, r6
 800da52:	e7c2      	b.n	800d9da <_dtoa_r+0x982>
 800da54:	2301      	movs	r3, #1
 800da56:	e7e3      	b.n	800da20 <_dtoa_r+0x9c8>
 800da58:	9a00      	ldr	r2, [sp, #0]
 800da5a:	2a00      	cmp	r2, #0
 800da5c:	db04      	blt.n	800da68 <_dtoa_r+0xa10>
 800da5e:	d125      	bne.n	800daac <_dtoa_r+0xa54>
 800da60:	9a06      	ldr	r2, [sp, #24]
 800da62:	bb1a      	cbnz	r2, 800daac <_dtoa_r+0xa54>
 800da64:	9a07      	ldr	r2, [sp, #28]
 800da66:	bb0a      	cbnz	r2, 800daac <_dtoa_r+0xa54>
 800da68:	2b00      	cmp	r3, #0
 800da6a:	ddec      	ble.n	800da46 <_dtoa_r+0x9ee>
 800da6c:	2201      	movs	r2, #1
 800da6e:	9904      	ldr	r1, [sp, #16]
 800da70:	4620      	mov	r0, r4
 800da72:	f000 ffff 	bl	800ea74 <__lshift>
 800da76:	4639      	mov	r1, r7
 800da78:	9004      	str	r0, [sp, #16]
 800da7a:	f001 f84f 	bl	800eb1c <__mcmp>
 800da7e:	2800      	cmp	r0, #0
 800da80:	dc03      	bgt.n	800da8a <_dtoa_r+0xa32>
 800da82:	d1e0      	bne.n	800da46 <_dtoa_r+0x9ee>
 800da84:	f018 0f01 	tst.w	r8, #1
 800da88:	d0dd      	beq.n	800da46 <_dtoa_r+0x9ee>
 800da8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800da8e:	d1d8      	bne.n	800da42 <_dtoa_r+0x9ea>
 800da90:	9b05      	ldr	r3, [sp, #20]
 800da92:	9a05      	ldr	r2, [sp, #20]
 800da94:	1c5d      	adds	r5, r3, #1
 800da96:	2339      	movs	r3, #57	; 0x39
 800da98:	7013      	strb	r3, [r2, #0]
 800da9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da9e:	2b39      	cmp	r3, #57	; 0x39
 800daa0:	f105 32ff 	add.w	r2, r5, #4294967295
 800daa4:	d04f      	beq.n	800db46 <_dtoa_r+0xaee>
 800daa6:	3301      	adds	r3, #1
 800daa8:	7013      	strb	r3, [r2, #0]
 800daaa:	e754      	b.n	800d956 <_dtoa_r+0x8fe>
 800daac:	9a05      	ldr	r2, [sp, #20]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f102 0501 	add.w	r5, r2, #1
 800dab4:	dd06      	ble.n	800dac4 <_dtoa_r+0xa6c>
 800dab6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800daba:	d0e9      	beq.n	800da90 <_dtoa_r+0xa38>
 800dabc:	f108 0801 	add.w	r8, r8, #1
 800dac0:	9b05      	ldr	r3, [sp, #20]
 800dac2:	e7c2      	b.n	800da4a <_dtoa_r+0x9f2>
 800dac4:	9a02      	ldr	r2, [sp, #8]
 800dac6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800daca:	eba5 030b 	sub.w	r3, r5, fp
 800dace:	4293      	cmp	r3, r2
 800dad0:	d021      	beq.n	800db16 <_dtoa_r+0xabe>
 800dad2:	2300      	movs	r3, #0
 800dad4:	220a      	movs	r2, #10
 800dad6:	9904      	ldr	r1, [sp, #16]
 800dad8:	4620      	mov	r0, r4
 800dada:	f000 fe17 	bl	800e70c <__multadd>
 800dade:	45b1      	cmp	r9, r6
 800dae0:	9004      	str	r0, [sp, #16]
 800dae2:	f04f 0300 	mov.w	r3, #0
 800dae6:	f04f 020a 	mov.w	r2, #10
 800daea:	4649      	mov	r1, r9
 800daec:	4620      	mov	r0, r4
 800daee:	d105      	bne.n	800dafc <_dtoa_r+0xaa4>
 800daf0:	f000 fe0c 	bl	800e70c <__multadd>
 800daf4:	4681      	mov	r9, r0
 800daf6:	4606      	mov	r6, r0
 800daf8:	9505      	str	r5, [sp, #20]
 800dafa:	e776      	b.n	800d9ea <_dtoa_r+0x992>
 800dafc:	f000 fe06 	bl	800e70c <__multadd>
 800db00:	4631      	mov	r1, r6
 800db02:	4681      	mov	r9, r0
 800db04:	2300      	movs	r3, #0
 800db06:	220a      	movs	r2, #10
 800db08:	4620      	mov	r0, r4
 800db0a:	f000 fdff 	bl	800e70c <__multadd>
 800db0e:	4606      	mov	r6, r0
 800db10:	e7f2      	b.n	800daf8 <_dtoa_r+0xaa0>
 800db12:	f04f 0900 	mov.w	r9, #0
 800db16:	2201      	movs	r2, #1
 800db18:	9904      	ldr	r1, [sp, #16]
 800db1a:	4620      	mov	r0, r4
 800db1c:	f000 ffaa 	bl	800ea74 <__lshift>
 800db20:	4639      	mov	r1, r7
 800db22:	9004      	str	r0, [sp, #16]
 800db24:	f000 fffa 	bl	800eb1c <__mcmp>
 800db28:	2800      	cmp	r0, #0
 800db2a:	dcb6      	bgt.n	800da9a <_dtoa_r+0xa42>
 800db2c:	d102      	bne.n	800db34 <_dtoa_r+0xadc>
 800db2e:	f018 0f01 	tst.w	r8, #1
 800db32:	d1b2      	bne.n	800da9a <_dtoa_r+0xa42>
 800db34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800db38:	2b30      	cmp	r3, #48	; 0x30
 800db3a:	f105 32ff 	add.w	r2, r5, #4294967295
 800db3e:	f47f af0a 	bne.w	800d956 <_dtoa_r+0x8fe>
 800db42:	4615      	mov	r5, r2
 800db44:	e7f6      	b.n	800db34 <_dtoa_r+0xadc>
 800db46:	4593      	cmp	fp, r2
 800db48:	d105      	bne.n	800db56 <_dtoa_r+0xafe>
 800db4a:	2331      	movs	r3, #49	; 0x31
 800db4c:	f10a 0a01 	add.w	sl, sl, #1
 800db50:	f88b 3000 	strb.w	r3, [fp]
 800db54:	e6ff      	b.n	800d956 <_dtoa_r+0x8fe>
 800db56:	4615      	mov	r5, r2
 800db58:	e79f      	b.n	800da9a <_dtoa_r+0xa42>
 800db5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dbc0 <_dtoa_r+0xb68>
 800db5e:	e007      	b.n	800db70 <_dtoa_r+0xb18>
 800db60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db62:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dbc4 <_dtoa_r+0xb6c>
 800db66:	b11b      	cbz	r3, 800db70 <_dtoa_r+0xb18>
 800db68:	f10b 0308 	add.w	r3, fp, #8
 800db6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db6e:	6013      	str	r3, [r2, #0]
 800db70:	4658      	mov	r0, fp
 800db72:	b017      	add	sp, #92	; 0x5c
 800db74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db78:	9b06      	ldr	r3, [sp, #24]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	f77f ae35 	ble.w	800d7ea <_dtoa_r+0x792>
 800db80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db82:	9307      	str	r3, [sp, #28]
 800db84:	e649      	b.n	800d81a <_dtoa_r+0x7c2>
 800db86:	9b02      	ldr	r3, [sp, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	dc03      	bgt.n	800db94 <_dtoa_r+0xb3c>
 800db8c:	9b06      	ldr	r3, [sp, #24]
 800db8e:	2b02      	cmp	r3, #2
 800db90:	f73f aecc 	bgt.w	800d92c <_dtoa_r+0x8d4>
 800db94:	465d      	mov	r5, fp
 800db96:	4639      	mov	r1, r7
 800db98:	9804      	ldr	r0, [sp, #16]
 800db9a:	f7ff f9d1 	bl	800cf40 <quorem>
 800db9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dba2:	f805 8b01 	strb.w	r8, [r5], #1
 800dba6:	9a02      	ldr	r2, [sp, #8]
 800dba8:	eba5 030b 	sub.w	r3, r5, fp
 800dbac:	429a      	cmp	r2, r3
 800dbae:	ddb0      	ble.n	800db12 <_dtoa_r+0xaba>
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	220a      	movs	r2, #10
 800dbb4:	9904      	ldr	r1, [sp, #16]
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f000 fda8 	bl	800e70c <__multadd>
 800dbbc:	9004      	str	r0, [sp, #16]
 800dbbe:	e7ea      	b.n	800db96 <_dtoa_r+0xb3e>
 800dbc0:	08012c43 	.word	0x08012c43
 800dbc4:	08012aa0 	.word	0x08012aa0

0800dbc8 <__sflush_r>:
 800dbc8:	898a      	ldrh	r2, [r1, #12]
 800dbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbce:	4605      	mov	r5, r0
 800dbd0:	0710      	lsls	r0, r2, #28
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	d458      	bmi.n	800dc88 <__sflush_r+0xc0>
 800dbd6:	684b      	ldr	r3, [r1, #4]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	dc05      	bgt.n	800dbe8 <__sflush_r+0x20>
 800dbdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	dc02      	bgt.n	800dbe8 <__sflush_r+0x20>
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbea:	2e00      	cmp	r6, #0
 800dbec:	d0f9      	beq.n	800dbe2 <__sflush_r+0x1a>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbf4:	682f      	ldr	r7, [r5, #0]
 800dbf6:	6a21      	ldr	r1, [r4, #32]
 800dbf8:	602b      	str	r3, [r5, #0]
 800dbfa:	d032      	beq.n	800dc62 <__sflush_r+0x9a>
 800dbfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	075a      	lsls	r2, r3, #29
 800dc02:	d505      	bpl.n	800dc10 <__sflush_r+0x48>
 800dc04:	6863      	ldr	r3, [r4, #4]
 800dc06:	1ac0      	subs	r0, r0, r3
 800dc08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc0a:	b10b      	cbz	r3, 800dc10 <__sflush_r+0x48>
 800dc0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc0e:	1ac0      	subs	r0, r0, r3
 800dc10:	2300      	movs	r3, #0
 800dc12:	4602      	mov	r2, r0
 800dc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc16:	6a21      	ldr	r1, [r4, #32]
 800dc18:	4628      	mov	r0, r5
 800dc1a:	47b0      	blx	r6
 800dc1c:	1c43      	adds	r3, r0, #1
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	d106      	bne.n	800dc30 <__sflush_r+0x68>
 800dc22:	6829      	ldr	r1, [r5, #0]
 800dc24:	291d      	cmp	r1, #29
 800dc26:	d848      	bhi.n	800dcba <__sflush_r+0xf2>
 800dc28:	4a29      	ldr	r2, [pc, #164]	; (800dcd0 <__sflush_r+0x108>)
 800dc2a:	40ca      	lsrs	r2, r1
 800dc2c:	07d6      	lsls	r6, r2, #31
 800dc2e:	d544      	bpl.n	800dcba <__sflush_r+0xf2>
 800dc30:	2200      	movs	r2, #0
 800dc32:	6062      	str	r2, [r4, #4]
 800dc34:	04d9      	lsls	r1, r3, #19
 800dc36:	6922      	ldr	r2, [r4, #16]
 800dc38:	6022      	str	r2, [r4, #0]
 800dc3a:	d504      	bpl.n	800dc46 <__sflush_r+0x7e>
 800dc3c:	1c42      	adds	r2, r0, #1
 800dc3e:	d101      	bne.n	800dc44 <__sflush_r+0x7c>
 800dc40:	682b      	ldr	r3, [r5, #0]
 800dc42:	b903      	cbnz	r3, 800dc46 <__sflush_r+0x7e>
 800dc44:	6560      	str	r0, [r4, #84]	; 0x54
 800dc46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc48:	602f      	str	r7, [r5, #0]
 800dc4a:	2900      	cmp	r1, #0
 800dc4c:	d0c9      	beq.n	800dbe2 <__sflush_r+0x1a>
 800dc4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc52:	4299      	cmp	r1, r3
 800dc54:	d002      	beq.n	800dc5c <__sflush_r+0x94>
 800dc56:	4628      	mov	r0, r5
 800dc58:	f7fd f9c6 	bl	800afe8 <_free_r>
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	6360      	str	r0, [r4, #52]	; 0x34
 800dc60:	e7c0      	b.n	800dbe4 <__sflush_r+0x1c>
 800dc62:	2301      	movs	r3, #1
 800dc64:	4628      	mov	r0, r5
 800dc66:	47b0      	blx	r6
 800dc68:	1c41      	adds	r1, r0, #1
 800dc6a:	d1c8      	bne.n	800dbfe <__sflush_r+0x36>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d0c5      	beq.n	800dbfe <__sflush_r+0x36>
 800dc72:	2b1d      	cmp	r3, #29
 800dc74:	d001      	beq.n	800dc7a <__sflush_r+0xb2>
 800dc76:	2b16      	cmp	r3, #22
 800dc78:	d101      	bne.n	800dc7e <__sflush_r+0xb6>
 800dc7a:	602f      	str	r7, [r5, #0]
 800dc7c:	e7b1      	b.n	800dbe2 <__sflush_r+0x1a>
 800dc7e:	89a3      	ldrh	r3, [r4, #12]
 800dc80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc84:	81a3      	strh	r3, [r4, #12]
 800dc86:	e7ad      	b.n	800dbe4 <__sflush_r+0x1c>
 800dc88:	690f      	ldr	r7, [r1, #16]
 800dc8a:	2f00      	cmp	r7, #0
 800dc8c:	d0a9      	beq.n	800dbe2 <__sflush_r+0x1a>
 800dc8e:	0793      	lsls	r3, r2, #30
 800dc90:	680e      	ldr	r6, [r1, #0]
 800dc92:	bf08      	it	eq
 800dc94:	694b      	ldreq	r3, [r1, #20]
 800dc96:	600f      	str	r7, [r1, #0]
 800dc98:	bf18      	it	ne
 800dc9a:	2300      	movne	r3, #0
 800dc9c:	eba6 0807 	sub.w	r8, r6, r7
 800dca0:	608b      	str	r3, [r1, #8]
 800dca2:	f1b8 0f00 	cmp.w	r8, #0
 800dca6:	dd9c      	ble.n	800dbe2 <__sflush_r+0x1a>
 800dca8:	4643      	mov	r3, r8
 800dcaa:	463a      	mov	r2, r7
 800dcac:	6a21      	ldr	r1, [r4, #32]
 800dcae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	47b0      	blx	r6
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	dc06      	bgt.n	800dcc6 <__sflush_r+0xfe>
 800dcb8:	89a3      	ldrh	r3, [r4, #12]
 800dcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcbe:	81a3      	strh	r3, [r4, #12]
 800dcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc4:	e78e      	b.n	800dbe4 <__sflush_r+0x1c>
 800dcc6:	4407      	add	r7, r0
 800dcc8:	eba8 0800 	sub.w	r8, r8, r0
 800dccc:	e7e9      	b.n	800dca2 <__sflush_r+0xda>
 800dcce:	bf00      	nop
 800dcd0:	20400001 	.word	0x20400001

0800dcd4 <_fflush_r>:
 800dcd4:	b538      	push	{r3, r4, r5, lr}
 800dcd6:	690b      	ldr	r3, [r1, #16]
 800dcd8:	4605      	mov	r5, r0
 800dcda:	460c      	mov	r4, r1
 800dcdc:	b1db      	cbz	r3, 800dd16 <_fflush_r+0x42>
 800dcde:	b118      	cbz	r0, 800dce8 <_fflush_r+0x14>
 800dce0:	6983      	ldr	r3, [r0, #24]
 800dce2:	b90b      	cbnz	r3, 800dce8 <_fflush_r+0x14>
 800dce4:	f000 f860 	bl	800dda8 <__sinit>
 800dce8:	4b0c      	ldr	r3, [pc, #48]	; (800dd1c <_fflush_r+0x48>)
 800dcea:	429c      	cmp	r4, r3
 800dcec:	d109      	bne.n	800dd02 <_fflush_r+0x2e>
 800dcee:	686c      	ldr	r4, [r5, #4]
 800dcf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcf4:	b17b      	cbz	r3, 800dd16 <_fflush_r+0x42>
 800dcf6:	4621      	mov	r1, r4
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcfe:	f7ff bf63 	b.w	800dbc8 <__sflush_r>
 800dd02:	4b07      	ldr	r3, [pc, #28]	; (800dd20 <_fflush_r+0x4c>)
 800dd04:	429c      	cmp	r4, r3
 800dd06:	d101      	bne.n	800dd0c <_fflush_r+0x38>
 800dd08:	68ac      	ldr	r4, [r5, #8]
 800dd0a:	e7f1      	b.n	800dcf0 <_fflush_r+0x1c>
 800dd0c:	4b05      	ldr	r3, [pc, #20]	; (800dd24 <_fflush_r+0x50>)
 800dd0e:	429c      	cmp	r4, r3
 800dd10:	bf08      	it	eq
 800dd12:	68ec      	ldreq	r4, [r5, #12]
 800dd14:	e7ec      	b.n	800dcf0 <_fflush_r+0x1c>
 800dd16:	2000      	movs	r0, #0
 800dd18:	bd38      	pop	{r3, r4, r5, pc}
 800dd1a:	bf00      	nop
 800dd1c:	08012ad0 	.word	0x08012ad0
 800dd20:	08012af0 	.word	0x08012af0
 800dd24:	08012ab0 	.word	0x08012ab0

0800dd28 <std>:
 800dd28:	2300      	movs	r3, #0
 800dd2a:	b510      	push	{r4, lr}
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	e9c0 3300 	strd	r3, r3, [r0]
 800dd32:	6083      	str	r3, [r0, #8]
 800dd34:	8181      	strh	r1, [r0, #12]
 800dd36:	6643      	str	r3, [r0, #100]	; 0x64
 800dd38:	81c2      	strh	r2, [r0, #14]
 800dd3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd3e:	6183      	str	r3, [r0, #24]
 800dd40:	4619      	mov	r1, r3
 800dd42:	2208      	movs	r2, #8
 800dd44:	305c      	adds	r0, #92	; 0x5c
 800dd46:	f7fd f947 	bl	800afd8 <memset>
 800dd4a:	4b05      	ldr	r3, [pc, #20]	; (800dd60 <std+0x38>)
 800dd4c:	6263      	str	r3, [r4, #36]	; 0x24
 800dd4e:	4b05      	ldr	r3, [pc, #20]	; (800dd64 <std+0x3c>)
 800dd50:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd52:	4b05      	ldr	r3, [pc, #20]	; (800dd68 <std+0x40>)
 800dd54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd56:	4b05      	ldr	r3, [pc, #20]	; (800dd6c <std+0x44>)
 800dd58:	6224      	str	r4, [r4, #32]
 800dd5a:	6323      	str	r3, [r4, #48]	; 0x30
 800dd5c:	bd10      	pop	{r4, pc}
 800dd5e:	bf00      	nop
 800dd60:	0800bf6d 	.word	0x0800bf6d
 800dd64:	0800bf93 	.word	0x0800bf93
 800dd68:	0800bfcb 	.word	0x0800bfcb
 800dd6c:	0800bfef 	.word	0x0800bfef

0800dd70 <_cleanup_r>:
 800dd70:	4901      	ldr	r1, [pc, #4]	; (800dd78 <_cleanup_r+0x8>)
 800dd72:	f000 b885 	b.w	800de80 <_fwalk_reent>
 800dd76:	bf00      	nop
 800dd78:	0800dcd5 	.word	0x0800dcd5

0800dd7c <__sfmoreglue>:
 800dd7c:	b570      	push	{r4, r5, r6, lr}
 800dd7e:	1e4a      	subs	r2, r1, #1
 800dd80:	2568      	movs	r5, #104	; 0x68
 800dd82:	4355      	muls	r5, r2
 800dd84:	460e      	mov	r6, r1
 800dd86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd8a:	f7fd f97b 	bl	800b084 <_malloc_r>
 800dd8e:	4604      	mov	r4, r0
 800dd90:	b140      	cbz	r0, 800dda4 <__sfmoreglue+0x28>
 800dd92:	2100      	movs	r1, #0
 800dd94:	e9c0 1600 	strd	r1, r6, [r0]
 800dd98:	300c      	adds	r0, #12
 800dd9a:	60a0      	str	r0, [r4, #8]
 800dd9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dda0:	f7fd f91a 	bl	800afd8 <memset>
 800dda4:	4620      	mov	r0, r4
 800dda6:	bd70      	pop	{r4, r5, r6, pc}

0800dda8 <__sinit>:
 800dda8:	6983      	ldr	r3, [r0, #24]
 800ddaa:	b510      	push	{r4, lr}
 800ddac:	4604      	mov	r4, r0
 800ddae:	bb33      	cbnz	r3, 800ddfe <__sinit+0x56>
 800ddb0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ddb4:	6503      	str	r3, [r0, #80]	; 0x50
 800ddb6:	4b12      	ldr	r3, [pc, #72]	; (800de00 <__sinit+0x58>)
 800ddb8:	4a12      	ldr	r2, [pc, #72]	; (800de04 <__sinit+0x5c>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	6282      	str	r2, [r0, #40]	; 0x28
 800ddbe:	4298      	cmp	r0, r3
 800ddc0:	bf04      	itt	eq
 800ddc2:	2301      	moveq	r3, #1
 800ddc4:	6183      	streq	r3, [r0, #24]
 800ddc6:	f000 f81f 	bl	800de08 <__sfp>
 800ddca:	6060      	str	r0, [r4, #4]
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f000 f81b 	bl	800de08 <__sfp>
 800ddd2:	60a0      	str	r0, [r4, #8]
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f000 f817 	bl	800de08 <__sfp>
 800ddda:	2200      	movs	r2, #0
 800dddc:	60e0      	str	r0, [r4, #12]
 800ddde:	2104      	movs	r1, #4
 800dde0:	6860      	ldr	r0, [r4, #4]
 800dde2:	f7ff ffa1 	bl	800dd28 <std>
 800dde6:	2201      	movs	r2, #1
 800dde8:	2109      	movs	r1, #9
 800ddea:	68a0      	ldr	r0, [r4, #8]
 800ddec:	f7ff ff9c 	bl	800dd28 <std>
 800ddf0:	2202      	movs	r2, #2
 800ddf2:	2112      	movs	r1, #18
 800ddf4:	68e0      	ldr	r0, [r4, #12]
 800ddf6:	f7ff ff97 	bl	800dd28 <std>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	61a3      	str	r3, [r4, #24]
 800ddfe:	bd10      	pop	{r4, pc}
 800de00:	08012a14 	.word	0x08012a14
 800de04:	0800dd71 	.word	0x0800dd71

0800de08 <__sfp>:
 800de08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0a:	4b1b      	ldr	r3, [pc, #108]	; (800de78 <__sfp+0x70>)
 800de0c:	681e      	ldr	r6, [r3, #0]
 800de0e:	69b3      	ldr	r3, [r6, #24]
 800de10:	4607      	mov	r7, r0
 800de12:	b913      	cbnz	r3, 800de1a <__sfp+0x12>
 800de14:	4630      	mov	r0, r6
 800de16:	f7ff ffc7 	bl	800dda8 <__sinit>
 800de1a:	3648      	adds	r6, #72	; 0x48
 800de1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de20:	3b01      	subs	r3, #1
 800de22:	d503      	bpl.n	800de2c <__sfp+0x24>
 800de24:	6833      	ldr	r3, [r6, #0]
 800de26:	b133      	cbz	r3, 800de36 <__sfp+0x2e>
 800de28:	6836      	ldr	r6, [r6, #0]
 800de2a:	e7f7      	b.n	800de1c <__sfp+0x14>
 800de2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de30:	b16d      	cbz	r5, 800de4e <__sfp+0x46>
 800de32:	3468      	adds	r4, #104	; 0x68
 800de34:	e7f4      	b.n	800de20 <__sfp+0x18>
 800de36:	2104      	movs	r1, #4
 800de38:	4638      	mov	r0, r7
 800de3a:	f7ff ff9f 	bl	800dd7c <__sfmoreglue>
 800de3e:	6030      	str	r0, [r6, #0]
 800de40:	2800      	cmp	r0, #0
 800de42:	d1f1      	bne.n	800de28 <__sfp+0x20>
 800de44:	230c      	movs	r3, #12
 800de46:	603b      	str	r3, [r7, #0]
 800de48:	4604      	mov	r4, r0
 800de4a:	4620      	mov	r0, r4
 800de4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de4e:	4b0b      	ldr	r3, [pc, #44]	; (800de7c <__sfp+0x74>)
 800de50:	6665      	str	r5, [r4, #100]	; 0x64
 800de52:	e9c4 5500 	strd	r5, r5, [r4]
 800de56:	60a5      	str	r5, [r4, #8]
 800de58:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800de5c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800de60:	2208      	movs	r2, #8
 800de62:	4629      	mov	r1, r5
 800de64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de68:	f7fd f8b6 	bl	800afd8 <memset>
 800de6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de74:	e7e9      	b.n	800de4a <__sfp+0x42>
 800de76:	bf00      	nop
 800de78:	08012a14 	.word	0x08012a14
 800de7c:	ffff0001 	.word	0xffff0001

0800de80 <_fwalk_reent>:
 800de80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de84:	4680      	mov	r8, r0
 800de86:	4689      	mov	r9, r1
 800de88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de8c:	2600      	movs	r6, #0
 800de8e:	b914      	cbnz	r4, 800de96 <_fwalk_reent+0x16>
 800de90:	4630      	mov	r0, r6
 800de92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de96:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800de9a:	3f01      	subs	r7, #1
 800de9c:	d501      	bpl.n	800dea2 <_fwalk_reent+0x22>
 800de9e:	6824      	ldr	r4, [r4, #0]
 800dea0:	e7f5      	b.n	800de8e <_fwalk_reent+0xe>
 800dea2:	89ab      	ldrh	r3, [r5, #12]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d907      	bls.n	800deb8 <_fwalk_reent+0x38>
 800dea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800deac:	3301      	adds	r3, #1
 800deae:	d003      	beq.n	800deb8 <_fwalk_reent+0x38>
 800deb0:	4629      	mov	r1, r5
 800deb2:	4640      	mov	r0, r8
 800deb4:	47c8      	blx	r9
 800deb6:	4306      	orrs	r6, r0
 800deb8:	3568      	adds	r5, #104	; 0x68
 800deba:	e7ee      	b.n	800de9a <_fwalk_reent+0x1a>

0800debc <rshift>:
 800debc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800debe:	6906      	ldr	r6, [r0, #16]
 800dec0:	114b      	asrs	r3, r1, #5
 800dec2:	429e      	cmp	r6, r3
 800dec4:	f100 0414 	add.w	r4, r0, #20
 800dec8:	dd30      	ble.n	800df2c <rshift+0x70>
 800deca:	f011 011f 	ands.w	r1, r1, #31
 800dece:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ded2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ded6:	d108      	bne.n	800deea <rshift+0x2e>
 800ded8:	4621      	mov	r1, r4
 800deda:	42b2      	cmp	r2, r6
 800dedc:	460b      	mov	r3, r1
 800dede:	d211      	bcs.n	800df04 <rshift+0x48>
 800dee0:	f852 3b04 	ldr.w	r3, [r2], #4
 800dee4:	f841 3b04 	str.w	r3, [r1], #4
 800dee8:	e7f7      	b.n	800deda <rshift+0x1e>
 800deea:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800deee:	f1c1 0c20 	rsb	ip, r1, #32
 800def2:	40cd      	lsrs	r5, r1
 800def4:	3204      	adds	r2, #4
 800def6:	4623      	mov	r3, r4
 800def8:	42b2      	cmp	r2, r6
 800defa:	4617      	mov	r7, r2
 800defc:	d30c      	bcc.n	800df18 <rshift+0x5c>
 800defe:	601d      	str	r5, [r3, #0]
 800df00:	b105      	cbz	r5, 800df04 <rshift+0x48>
 800df02:	3304      	adds	r3, #4
 800df04:	1b1a      	subs	r2, r3, r4
 800df06:	42a3      	cmp	r3, r4
 800df08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800df0c:	bf08      	it	eq
 800df0e:	2300      	moveq	r3, #0
 800df10:	6102      	str	r2, [r0, #16]
 800df12:	bf08      	it	eq
 800df14:	6143      	streq	r3, [r0, #20]
 800df16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df18:	683f      	ldr	r7, [r7, #0]
 800df1a:	fa07 f70c 	lsl.w	r7, r7, ip
 800df1e:	433d      	orrs	r5, r7
 800df20:	f843 5b04 	str.w	r5, [r3], #4
 800df24:	f852 5b04 	ldr.w	r5, [r2], #4
 800df28:	40cd      	lsrs	r5, r1
 800df2a:	e7e5      	b.n	800def8 <rshift+0x3c>
 800df2c:	4623      	mov	r3, r4
 800df2e:	e7e9      	b.n	800df04 <rshift+0x48>

0800df30 <__hexdig_fun>:
 800df30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800df34:	2b09      	cmp	r3, #9
 800df36:	d802      	bhi.n	800df3e <__hexdig_fun+0xe>
 800df38:	3820      	subs	r0, #32
 800df3a:	b2c0      	uxtb	r0, r0
 800df3c:	4770      	bx	lr
 800df3e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800df42:	2b05      	cmp	r3, #5
 800df44:	d801      	bhi.n	800df4a <__hexdig_fun+0x1a>
 800df46:	3847      	subs	r0, #71	; 0x47
 800df48:	e7f7      	b.n	800df3a <__hexdig_fun+0xa>
 800df4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800df4e:	2b05      	cmp	r3, #5
 800df50:	d801      	bhi.n	800df56 <__hexdig_fun+0x26>
 800df52:	3827      	subs	r0, #39	; 0x27
 800df54:	e7f1      	b.n	800df3a <__hexdig_fun+0xa>
 800df56:	2000      	movs	r0, #0
 800df58:	4770      	bx	lr

0800df5a <__gethex>:
 800df5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5e:	b08b      	sub	sp, #44	; 0x2c
 800df60:	468a      	mov	sl, r1
 800df62:	9002      	str	r0, [sp, #8]
 800df64:	9816      	ldr	r0, [sp, #88]	; 0x58
 800df66:	9306      	str	r3, [sp, #24]
 800df68:	4690      	mov	r8, r2
 800df6a:	f000 fadf 	bl	800e52c <__localeconv_l>
 800df6e:	6803      	ldr	r3, [r0, #0]
 800df70:	9303      	str	r3, [sp, #12]
 800df72:	4618      	mov	r0, r3
 800df74:	f7f2 f934 	bl	80001e0 <strlen>
 800df78:	9b03      	ldr	r3, [sp, #12]
 800df7a:	9001      	str	r0, [sp, #4]
 800df7c:	4403      	add	r3, r0
 800df7e:	f04f 0b00 	mov.w	fp, #0
 800df82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800df86:	9307      	str	r3, [sp, #28]
 800df88:	f8da 3000 	ldr.w	r3, [sl]
 800df8c:	3302      	adds	r3, #2
 800df8e:	461f      	mov	r7, r3
 800df90:	f813 0b01 	ldrb.w	r0, [r3], #1
 800df94:	2830      	cmp	r0, #48	; 0x30
 800df96:	d06c      	beq.n	800e072 <__gethex+0x118>
 800df98:	f7ff ffca 	bl	800df30 <__hexdig_fun>
 800df9c:	4604      	mov	r4, r0
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d16a      	bne.n	800e078 <__gethex+0x11e>
 800dfa2:	9a01      	ldr	r2, [sp, #4]
 800dfa4:	9903      	ldr	r1, [sp, #12]
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	f001 fd4a 	bl	800fa40 <strncmp>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d166      	bne.n	800e07e <__gethex+0x124>
 800dfb0:	9b01      	ldr	r3, [sp, #4]
 800dfb2:	5cf8      	ldrb	r0, [r7, r3]
 800dfb4:	18fe      	adds	r6, r7, r3
 800dfb6:	f7ff ffbb 	bl	800df30 <__hexdig_fun>
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	d062      	beq.n	800e084 <__gethex+0x12a>
 800dfbe:	4633      	mov	r3, r6
 800dfc0:	7818      	ldrb	r0, [r3, #0]
 800dfc2:	2830      	cmp	r0, #48	; 0x30
 800dfc4:	461f      	mov	r7, r3
 800dfc6:	f103 0301 	add.w	r3, r3, #1
 800dfca:	d0f9      	beq.n	800dfc0 <__gethex+0x66>
 800dfcc:	f7ff ffb0 	bl	800df30 <__hexdig_fun>
 800dfd0:	fab0 f580 	clz	r5, r0
 800dfd4:	096d      	lsrs	r5, r5, #5
 800dfd6:	4634      	mov	r4, r6
 800dfd8:	f04f 0b01 	mov.w	fp, #1
 800dfdc:	463a      	mov	r2, r7
 800dfde:	4616      	mov	r6, r2
 800dfe0:	3201      	adds	r2, #1
 800dfe2:	7830      	ldrb	r0, [r6, #0]
 800dfe4:	f7ff ffa4 	bl	800df30 <__hexdig_fun>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d1f8      	bne.n	800dfde <__gethex+0x84>
 800dfec:	9a01      	ldr	r2, [sp, #4]
 800dfee:	9903      	ldr	r1, [sp, #12]
 800dff0:	4630      	mov	r0, r6
 800dff2:	f001 fd25 	bl	800fa40 <strncmp>
 800dff6:	b950      	cbnz	r0, 800e00e <__gethex+0xb4>
 800dff8:	b954      	cbnz	r4, 800e010 <__gethex+0xb6>
 800dffa:	9b01      	ldr	r3, [sp, #4]
 800dffc:	18f4      	adds	r4, r6, r3
 800dffe:	4622      	mov	r2, r4
 800e000:	4616      	mov	r6, r2
 800e002:	3201      	adds	r2, #1
 800e004:	7830      	ldrb	r0, [r6, #0]
 800e006:	f7ff ff93 	bl	800df30 <__hexdig_fun>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d1f8      	bne.n	800e000 <__gethex+0xa6>
 800e00e:	b10c      	cbz	r4, 800e014 <__gethex+0xba>
 800e010:	1ba4      	subs	r4, r4, r6
 800e012:	00a4      	lsls	r4, r4, #2
 800e014:	7833      	ldrb	r3, [r6, #0]
 800e016:	2b50      	cmp	r3, #80	; 0x50
 800e018:	d001      	beq.n	800e01e <__gethex+0xc4>
 800e01a:	2b70      	cmp	r3, #112	; 0x70
 800e01c:	d140      	bne.n	800e0a0 <__gethex+0x146>
 800e01e:	7873      	ldrb	r3, [r6, #1]
 800e020:	2b2b      	cmp	r3, #43	; 0x2b
 800e022:	d031      	beq.n	800e088 <__gethex+0x12e>
 800e024:	2b2d      	cmp	r3, #45	; 0x2d
 800e026:	d033      	beq.n	800e090 <__gethex+0x136>
 800e028:	1c71      	adds	r1, r6, #1
 800e02a:	f04f 0900 	mov.w	r9, #0
 800e02e:	7808      	ldrb	r0, [r1, #0]
 800e030:	f7ff ff7e 	bl	800df30 <__hexdig_fun>
 800e034:	1e43      	subs	r3, r0, #1
 800e036:	b2db      	uxtb	r3, r3
 800e038:	2b18      	cmp	r3, #24
 800e03a:	d831      	bhi.n	800e0a0 <__gethex+0x146>
 800e03c:	f1a0 0210 	sub.w	r2, r0, #16
 800e040:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e044:	f7ff ff74 	bl	800df30 <__hexdig_fun>
 800e048:	1e43      	subs	r3, r0, #1
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	2b18      	cmp	r3, #24
 800e04e:	d922      	bls.n	800e096 <__gethex+0x13c>
 800e050:	f1b9 0f00 	cmp.w	r9, #0
 800e054:	d000      	beq.n	800e058 <__gethex+0xfe>
 800e056:	4252      	negs	r2, r2
 800e058:	4414      	add	r4, r2
 800e05a:	f8ca 1000 	str.w	r1, [sl]
 800e05e:	b30d      	cbz	r5, 800e0a4 <__gethex+0x14a>
 800e060:	f1bb 0f00 	cmp.w	fp, #0
 800e064:	bf0c      	ite	eq
 800e066:	2706      	moveq	r7, #6
 800e068:	2700      	movne	r7, #0
 800e06a:	4638      	mov	r0, r7
 800e06c:	b00b      	add	sp, #44	; 0x2c
 800e06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e072:	f10b 0b01 	add.w	fp, fp, #1
 800e076:	e78a      	b.n	800df8e <__gethex+0x34>
 800e078:	2500      	movs	r5, #0
 800e07a:	462c      	mov	r4, r5
 800e07c:	e7ae      	b.n	800dfdc <__gethex+0x82>
 800e07e:	463e      	mov	r6, r7
 800e080:	2501      	movs	r5, #1
 800e082:	e7c7      	b.n	800e014 <__gethex+0xba>
 800e084:	4604      	mov	r4, r0
 800e086:	e7fb      	b.n	800e080 <__gethex+0x126>
 800e088:	f04f 0900 	mov.w	r9, #0
 800e08c:	1cb1      	adds	r1, r6, #2
 800e08e:	e7ce      	b.n	800e02e <__gethex+0xd4>
 800e090:	f04f 0901 	mov.w	r9, #1
 800e094:	e7fa      	b.n	800e08c <__gethex+0x132>
 800e096:	230a      	movs	r3, #10
 800e098:	fb03 0202 	mla	r2, r3, r2, r0
 800e09c:	3a10      	subs	r2, #16
 800e09e:	e7cf      	b.n	800e040 <__gethex+0xe6>
 800e0a0:	4631      	mov	r1, r6
 800e0a2:	e7da      	b.n	800e05a <__gethex+0x100>
 800e0a4:	1bf3      	subs	r3, r6, r7
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	4629      	mov	r1, r5
 800e0aa:	2b07      	cmp	r3, #7
 800e0ac:	dc49      	bgt.n	800e142 <__gethex+0x1e8>
 800e0ae:	9802      	ldr	r0, [sp, #8]
 800e0b0:	f000 fae1 	bl	800e676 <_Balloc>
 800e0b4:	9b01      	ldr	r3, [sp, #4]
 800e0b6:	f100 0914 	add.w	r9, r0, #20
 800e0ba:	f04f 0b00 	mov.w	fp, #0
 800e0be:	f1c3 0301 	rsb	r3, r3, #1
 800e0c2:	4605      	mov	r5, r0
 800e0c4:	f8cd 9010 	str.w	r9, [sp, #16]
 800e0c8:	46da      	mov	sl, fp
 800e0ca:	9308      	str	r3, [sp, #32]
 800e0cc:	42b7      	cmp	r7, r6
 800e0ce:	d33b      	bcc.n	800e148 <__gethex+0x1ee>
 800e0d0:	9804      	ldr	r0, [sp, #16]
 800e0d2:	f840 ab04 	str.w	sl, [r0], #4
 800e0d6:	eba0 0009 	sub.w	r0, r0, r9
 800e0da:	1080      	asrs	r0, r0, #2
 800e0dc:	6128      	str	r0, [r5, #16]
 800e0de:	0147      	lsls	r7, r0, #5
 800e0e0:	4650      	mov	r0, sl
 800e0e2:	f000 fb8c 	bl	800e7fe <__hi0bits>
 800e0e6:	f8d8 6000 	ldr.w	r6, [r8]
 800e0ea:	1a3f      	subs	r7, r7, r0
 800e0ec:	42b7      	cmp	r7, r6
 800e0ee:	dd64      	ble.n	800e1ba <__gethex+0x260>
 800e0f0:	1bbf      	subs	r7, r7, r6
 800e0f2:	4639      	mov	r1, r7
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	f000 fe9b 	bl	800ee30 <__any_on>
 800e0fa:	4682      	mov	sl, r0
 800e0fc:	b178      	cbz	r0, 800e11e <__gethex+0x1c4>
 800e0fe:	1e7b      	subs	r3, r7, #1
 800e100:	1159      	asrs	r1, r3, #5
 800e102:	f003 021f 	and.w	r2, r3, #31
 800e106:	f04f 0a01 	mov.w	sl, #1
 800e10a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e10e:	fa0a f202 	lsl.w	r2, sl, r2
 800e112:	420a      	tst	r2, r1
 800e114:	d003      	beq.n	800e11e <__gethex+0x1c4>
 800e116:	4553      	cmp	r3, sl
 800e118:	dc46      	bgt.n	800e1a8 <__gethex+0x24e>
 800e11a:	f04f 0a02 	mov.w	sl, #2
 800e11e:	4639      	mov	r1, r7
 800e120:	4628      	mov	r0, r5
 800e122:	f7ff fecb 	bl	800debc <rshift>
 800e126:	443c      	add	r4, r7
 800e128:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e12c:	42a3      	cmp	r3, r4
 800e12e:	da52      	bge.n	800e1d6 <__gethex+0x27c>
 800e130:	4629      	mov	r1, r5
 800e132:	9802      	ldr	r0, [sp, #8]
 800e134:	f000 fad3 	bl	800e6de <_Bfree>
 800e138:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e13a:	2300      	movs	r3, #0
 800e13c:	6013      	str	r3, [r2, #0]
 800e13e:	27a3      	movs	r7, #163	; 0xa3
 800e140:	e793      	b.n	800e06a <__gethex+0x110>
 800e142:	3101      	adds	r1, #1
 800e144:	105b      	asrs	r3, r3, #1
 800e146:	e7b0      	b.n	800e0aa <__gethex+0x150>
 800e148:	1e73      	subs	r3, r6, #1
 800e14a:	9305      	str	r3, [sp, #20]
 800e14c:	9a07      	ldr	r2, [sp, #28]
 800e14e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e152:	4293      	cmp	r3, r2
 800e154:	d018      	beq.n	800e188 <__gethex+0x22e>
 800e156:	f1bb 0f20 	cmp.w	fp, #32
 800e15a:	d107      	bne.n	800e16c <__gethex+0x212>
 800e15c:	9b04      	ldr	r3, [sp, #16]
 800e15e:	f8c3 a000 	str.w	sl, [r3]
 800e162:	3304      	adds	r3, #4
 800e164:	f04f 0a00 	mov.w	sl, #0
 800e168:	9304      	str	r3, [sp, #16]
 800e16a:	46d3      	mov	fp, sl
 800e16c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e170:	f7ff fede 	bl	800df30 <__hexdig_fun>
 800e174:	f000 000f 	and.w	r0, r0, #15
 800e178:	fa00 f00b 	lsl.w	r0, r0, fp
 800e17c:	ea4a 0a00 	orr.w	sl, sl, r0
 800e180:	f10b 0b04 	add.w	fp, fp, #4
 800e184:	9b05      	ldr	r3, [sp, #20]
 800e186:	e00d      	b.n	800e1a4 <__gethex+0x24a>
 800e188:	9b05      	ldr	r3, [sp, #20]
 800e18a:	9a08      	ldr	r2, [sp, #32]
 800e18c:	4413      	add	r3, r2
 800e18e:	42bb      	cmp	r3, r7
 800e190:	d3e1      	bcc.n	800e156 <__gethex+0x1fc>
 800e192:	4618      	mov	r0, r3
 800e194:	9a01      	ldr	r2, [sp, #4]
 800e196:	9903      	ldr	r1, [sp, #12]
 800e198:	9309      	str	r3, [sp, #36]	; 0x24
 800e19a:	f001 fc51 	bl	800fa40 <strncmp>
 800e19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d1d8      	bne.n	800e156 <__gethex+0x1fc>
 800e1a4:	461e      	mov	r6, r3
 800e1a6:	e791      	b.n	800e0cc <__gethex+0x172>
 800e1a8:	1eb9      	subs	r1, r7, #2
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	f000 fe40 	bl	800ee30 <__any_on>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d0b2      	beq.n	800e11a <__gethex+0x1c0>
 800e1b4:	f04f 0a03 	mov.w	sl, #3
 800e1b8:	e7b1      	b.n	800e11e <__gethex+0x1c4>
 800e1ba:	da09      	bge.n	800e1d0 <__gethex+0x276>
 800e1bc:	1bf7      	subs	r7, r6, r7
 800e1be:	4629      	mov	r1, r5
 800e1c0:	463a      	mov	r2, r7
 800e1c2:	9802      	ldr	r0, [sp, #8]
 800e1c4:	f000 fc56 	bl	800ea74 <__lshift>
 800e1c8:	1be4      	subs	r4, r4, r7
 800e1ca:	4605      	mov	r5, r0
 800e1cc:	f100 0914 	add.w	r9, r0, #20
 800e1d0:	f04f 0a00 	mov.w	sl, #0
 800e1d4:	e7a8      	b.n	800e128 <__gethex+0x1ce>
 800e1d6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e1da:	42a0      	cmp	r0, r4
 800e1dc:	dd6a      	ble.n	800e2b4 <__gethex+0x35a>
 800e1de:	1b04      	subs	r4, r0, r4
 800e1e0:	42a6      	cmp	r6, r4
 800e1e2:	dc2e      	bgt.n	800e242 <__gethex+0x2e8>
 800e1e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	d022      	beq.n	800e232 <__gethex+0x2d8>
 800e1ec:	2b03      	cmp	r3, #3
 800e1ee:	d024      	beq.n	800e23a <__gethex+0x2e0>
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d115      	bne.n	800e220 <__gethex+0x2c6>
 800e1f4:	42a6      	cmp	r6, r4
 800e1f6:	d113      	bne.n	800e220 <__gethex+0x2c6>
 800e1f8:	2e01      	cmp	r6, #1
 800e1fa:	dc0b      	bgt.n	800e214 <__gethex+0x2ba>
 800e1fc:	9a06      	ldr	r2, [sp, #24]
 800e1fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e202:	6013      	str	r3, [r2, #0]
 800e204:	2301      	movs	r3, #1
 800e206:	612b      	str	r3, [r5, #16]
 800e208:	f8c9 3000 	str.w	r3, [r9]
 800e20c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e20e:	2762      	movs	r7, #98	; 0x62
 800e210:	601d      	str	r5, [r3, #0]
 800e212:	e72a      	b.n	800e06a <__gethex+0x110>
 800e214:	1e71      	subs	r1, r6, #1
 800e216:	4628      	mov	r0, r5
 800e218:	f000 fe0a 	bl	800ee30 <__any_on>
 800e21c:	2800      	cmp	r0, #0
 800e21e:	d1ed      	bne.n	800e1fc <__gethex+0x2a2>
 800e220:	4629      	mov	r1, r5
 800e222:	9802      	ldr	r0, [sp, #8]
 800e224:	f000 fa5b 	bl	800e6de <_Bfree>
 800e228:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e22a:	2300      	movs	r3, #0
 800e22c:	6013      	str	r3, [r2, #0]
 800e22e:	2750      	movs	r7, #80	; 0x50
 800e230:	e71b      	b.n	800e06a <__gethex+0x110>
 800e232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e234:	2b00      	cmp	r3, #0
 800e236:	d0e1      	beq.n	800e1fc <__gethex+0x2a2>
 800e238:	e7f2      	b.n	800e220 <__gethex+0x2c6>
 800e23a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1dd      	bne.n	800e1fc <__gethex+0x2a2>
 800e240:	e7ee      	b.n	800e220 <__gethex+0x2c6>
 800e242:	1e67      	subs	r7, r4, #1
 800e244:	f1ba 0f00 	cmp.w	sl, #0
 800e248:	d131      	bne.n	800e2ae <__gethex+0x354>
 800e24a:	b127      	cbz	r7, 800e256 <__gethex+0x2fc>
 800e24c:	4639      	mov	r1, r7
 800e24e:	4628      	mov	r0, r5
 800e250:	f000 fdee 	bl	800ee30 <__any_on>
 800e254:	4682      	mov	sl, r0
 800e256:	117a      	asrs	r2, r7, #5
 800e258:	2301      	movs	r3, #1
 800e25a:	f007 071f 	and.w	r7, r7, #31
 800e25e:	fa03 f707 	lsl.w	r7, r3, r7
 800e262:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e266:	4621      	mov	r1, r4
 800e268:	421f      	tst	r7, r3
 800e26a:	4628      	mov	r0, r5
 800e26c:	bf18      	it	ne
 800e26e:	f04a 0a02 	orrne.w	sl, sl, #2
 800e272:	1b36      	subs	r6, r6, r4
 800e274:	f7ff fe22 	bl	800debc <rshift>
 800e278:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e27c:	2702      	movs	r7, #2
 800e27e:	f1ba 0f00 	cmp.w	sl, #0
 800e282:	d048      	beq.n	800e316 <__gethex+0x3bc>
 800e284:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d015      	beq.n	800e2b8 <__gethex+0x35e>
 800e28c:	2b03      	cmp	r3, #3
 800e28e:	d017      	beq.n	800e2c0 <__gethex+0x366>
 800e290:	2b01      	cmp	r3, #1
 800e292:	d109      	bne.n	800e2a8 <__gethex+0x34e>
 800e294:	f01a 0f02 	tst.w	sl, #2
 800e298:	d006      	beq.n	800e2a8 <__gethex+0x34e>
 800e29a:	f8d9 3000 	ldr.w	r3, [r9]
 800e29e:	ea4a 0a03 	orr.w	sl, sl, r3
 800e2a2:	f01a 0f01 	tst.w	sl, #1
 800e2a6:	d10e      	bne.n	800e2c6 <__gethex+0x36c>
 800e2a8:	f047 0710 	orr.w	r7, r7, #16
 800e2ac:	e033      	b.n	800e316 <__gethex+0x3bc>
 800e2ae:	f04f 0a01 	mov.w	sl, #1
 800e2b2:	e7d0      	b.n	800e256 <__gethex+0x2fc>
 800e2b4:	2701      	movs	r7, #1
 800e2b6:	e7e2      	b.n	800e27e <__gethex+0x324>
 800e2b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2ba:	f1c3 0301 	rsb	r3, r3, #1
 800e2be:	9315      	str	r3, [sp, #84]	; 0x54
 800e2c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d0f0      	beq.n	800e2a8 <__gethex+0x34e>
 800e2c6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e2ca:	f105 0314 	add.w	r3, r5, #20
 800e2ce:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e2d2:	eb03 010a 	add.w	r1, r3, sl
 800e2d6:	f04f 0c00 	mov.w	ip, #0
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e2e4:	d01c      	beq.n	800e320 <__gethex+0x3c6>
 800e2e6:	3201      	adds	r2, #1
 800e2e8:	6002      	str	r2, [r0, #0]
 800e2ea:	2f02      	cmp	r7, #2
 800e2ec:	f105 0314 	add.w	r3, r5, #20
 800e2f0:	d138      	bne.n	800e364 <__gethex+0x40a>
 800e2f2:	f8d8 2000 	ldr.w	r2, [r8]
 800e2f6:	3a01      	subs	r2, #1
 800e2f8:	42b2      	cmp	r2, r6
 800e2fa:	d10a      	bne.n	800e312 <__gethex+0x3b8>
 800e2fc:	1171      	asrs	r1, r6, #5
 800e2fe:	2201      	movs	r2, #1
 800e300:	f006 061f 	and.w	r6, r6, #31
 800e304:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e308:	fa02 f606 	lsl.w	r6, r2, r6
 800e30c:	421e      	tst	r6, r3
 800e30e:	bf18      	it	ne
 800e310:	4617      	movne	r7, r2
 800e312:	f047 0720 	orr.w	r7, r7, #32
 800e316:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e318:	601d      	str	r5, [r3, #0]
 800e31a:	9b06      	ldr	r3, [sp, #24]
 800e31c:	601c      	str	r4, [r3, #0]
 800e31e:	e6a4      	b.n	800e06a <__gethex+0x110>
 800e320:	4299      	cmp	r1, r3
 800e322:	f843 cc04 	str.w	ip, [r3, #-4]
 800e326:	d8d8      	bhi.n	800e2da <__gethex+0x380>
 800e328:	68ab      	ldr	r3, [r5, #8]
 800e32a:	4599      	cmp	r9, r3
 800e32c:	db12      	blt.n	800e354 <__gethex+0x3fa>
 800e32e:	6869      	ldr	r1, [r5, #4]
 800e330:	9802      	ldr	r0, [sp, #8]
 800e332:	3101      	adds	r1, #1
 800e334:	f000 f99f 	bl	800e676 <_Balloc>
 800e338:	692a      	ldr	r2, [r5, #16]
 800e33a:	3202      	adds	r2, #2
 800e33c:	f105 010c 	add.w	r1, r5, #12
 800e340:	4683      	mov	fp, r0
 800e342:	0092      	lsls	r2, r2, #2
 800e344:	300c      	adds	r0, #12
 800e346:	f000 f989 	bl	800e65c <memcpy>
 800e34a:	4629      	mov	r1, r5
 800e34c:	9802      	ldr	r0, [sp, #8]
 800e34e:	f000 f9c6 	bl	800e6de <_Bfree>
 800e352:	465d      	mov	r5, fp
 800e354:	692b      	ldr	r3, [r5, #16]
 800e356:	1c5a      	adds	r2, r3, #1
 800e358:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e35c:	612a      	str	r2, [r5, #16]
 800e35e:	2201      	movs	r2, #1
 800e360:	615a      	str	r2, [r3, #20]
 800e362:	e7c2      	b.n	800e2ea <__gethex+0x390>
 800e364:	692a      	ldr	r2, [r5, #16]
 800e366:	454a      	cmp	r2, r9
 800e368:	dd0b      	ble.n	800e382 <__gethex+0x428>
 800e36a:	2101      	movs	r1, #1
 800e36c:	4628      	mov	r0, r5
 800e36e:	f7ff fda5 	bl	800debc <rshift>
 800e372:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e376:	3401      	adds	r4, #1
 800e378:	42a3      	cmp	r3, r4
 800e37a:	f6ff aed9 	blt.w	800e130 <__gethex+0x1d6>
 800e37e:	2701      	movs	r7, #1
 800e380:	e7c7      	b.n	800e312 <__gethex+0x3b8>
 800e382:	f016 061f 	ands.w	r6, r6, #31
 800e386:	d0fa      	beq.n	800e37e <__gethex+0x424>
 800e388:	449a      	add	sl, r3
 800e38a:	f1c6 0620 	rsb	r6, r6, #32
 800e38e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e392:	f000 fa34 	bl	800e7fe <__hi0bits>
 800e396:	42b0      	cmp	r0, r6
 800e398:	dbe7      	blt.n	800e36a <__gethex+0x410>
 800e39a:	e7f0      	b.n	800e37e <__gethex+0x424>

0800e39c <L_shift>:
 800e39c:	f1c2 0208 	rsb	r2, r2, #8
 800e3a0:	0092      	lsls	r2, r2, #2
 800e3a2:	b570      	push	{r4, r5, r6, lr}
 800e3a4:	f1c2 0620 	rsb	r6, r2, #32
 800e3a8:	6843      	ldr	r3, [r0, #4]
 800e3aa:	6804      	ldr	r4, [r0, #0]
 800e3ac:	fa03 f506 	lsl.w	r5, r3, r6
 800e3b0:	432c      	orrs	r4, r5
 800e3b2:	40d3      	lsrs	r3, r2
 800e3b4:	6004      	str	r4, [r0, #0]
 800e3b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e3ba:	4288      	cmp	r0, r1
 800e3bc:	d3f4      	bcc.n	800e3a8 <L_shift+0xc>
 800e3be:	bd70      	pop	{r4, r5, r6, pc}

0800e3c0 <__match>:
 800e3c0:	b530      	push	{r4, r5, lr}
 800e3c2:	6803      	ldr	r3, [r0, #0]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3ca:	b914      	cbnz	r4, 800e3d2 <__match+0x12>
 800e3cc:	6003      	str	r3, [r0, #0]
 800e3ce:	2001      	movs	r0, #1
 800e3d0:	bd30      	pop	{r4, r5, pc}
 800e3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e3da:	2d19      	cmp	r5, #25
 800e3dc:	bf98      	it	ls
 800e3de:	3220      	addls	r2, #32
 800e3e0:	42a2      	cmp	r2, r4
 800e3e2:	d0f0      	beq.n	800e3c6 <__match+0x6>
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	e7f3      	b.n	800e3d0 <__match+0x10>

0800e3e8 <__hexnan>:
 800e3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ec:	680b      	ldr	r3, [r1, #0]
 800e3ee:	6801      	ldr	r1, [r0, #0]
 800e3f0:	115f      	asrs	r7, r3, #5
 800e3f2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e3f6:	f013 031f 	ands.w	r3, r3, #31
 800e3fa:	b087      	sub	sp, #28
 800e3fc:	bf18      	it	ne
 800e3fe:	3704      	addne	r7, #4
 800e400:	2500      	movs	r5, #0
 800e402:	1f3e      	subs	r6, r7, #4
 800e404:	4682      	mov	sl, r0
 800e406:	4690      	mov	r8, r2
 800e408:	9301      	str	r3, [sp, #4]
 800e40a:	f847 5c04 	str.w	r5, [r7, #-4]
 800e40e:	46b1      	mov	r9, r6
 800e410:	4634      	mov	r4, r6
 800e412:	9502      	str	r5, [sp, #8]
 800e414:	46ab      	mov	fp, r5
 800e416:	784a      	ldrb	r2, [r1, #1]
 800e418:	1c4b      	adds	r3, r1, #1
 800e41a:	9303      	str	r3, [sp, #12]
 800e41c:	b342      	cbz	r2, 800e470 <__hexnan+0x88>
 800e41e:	4610      	mov	r0, r2
 800e420:	9105      	str	r1, [sp, #20]
 800e422:	9204      	str	r2, [sp, #16]
 800e424:	f7ff fd84 	bl	800df30 <__hexdig_fun>
 800e428:	2800      	cmp	r0, #0
 800e42a:	d143      	bne.n	800e4b4 <__hexnan+0xcc>
 800e42c:	9a04      	ldr	r2, [sp, #16]
 800e42e:	9905      	ldr	r1, [sp, #20]
 800e430:	2a20      	cmp	r2, #32
 800e432:	d818      	bhi.n	800e466 <__hexnan+0x7e>
 800e434:	9b02      	ldr	r3, [sp, #8]
 800e436:	459b      	cmp	fp, r3
 800e438:	dd13      	ble.n	800e462 <__hexnan+0x7a>
 800e43a:	454c      	cmp	r4, r9
 800e43c:	d206      	bcs.n	800e44c <__hexnan+0x64>
 800e43e:	2d07      	cmp	r5, #7
 800e440:	dc04      	bgt.n	800e44c <__hexnan+0x64>
 800e442:	462a      	mov	r2, r5
 800e444:	4649      	mov	r1, r9
 800e446:	4620      	mov	r0, r4
 800e448:	f7ff ffa8 	bl	800e39c <L_shift>
 800e44c:	4544      	cmp	r4, r8
 800e44e:	d944      	bls.n	800e4da <__hexnan+0xf2>
 800e450:	2300      	movs	r3, #0
 800e452:	f1a4 0904 	sub.w	r9, r4, #4
 800e456:	f844 3c04 	str.w	r3, [r4, #-4]
 800e45a:	f8cd b008 	str.w	fp, [sp, #8]
 800e45e:	464c      	mov	r4, r9
 800e460:	461d      	mov	r5, r3
 800e462:	9903      	ldr	r1, [sp, #12]
 800e464:	e7d7      	b.n	800e416 <__hexnan+0x2e>
 800e466:	2a29      	cmp	r2, #41	; 0x29
 800e468:	d14a      	bne.n	800e500 <__hexnan+0x118>
 800e46a:	3102      	adds	r1, #2
 800e46c:	f8ca 1000 	str.w	r1, [sl]
 800e470:	f1bb 0f00 	cmp.w	fp, #0
 800e474:	d044      	beq.n	800e500 <__hexnan+0x118>
 800e476:	454c      	cmp	r4, r9
 800e478:	d206      	bcs.n	800e488 <__hexnan+0xa0>
 800e47a:	2d07      	cmp	r5, #7
 800e47c:	dc04      	bgt.n	800e488 <__hexnan+0xa0>
 800e47e:	462a      	mov	r2, r5
 800e480:	4649      	mov	r1, r9
 800e482:	4620      	mov	r0, r4
 800e484:	f7ff ff8a 	bl	800e39c <L_shift>
 800e488:	4544      	cmp	r4, r8
 800e48a:	d928      	bls.n	800e4de <__hexnan+0xf6>
 800e48c:	4643      	mov	r3, r8
 800e48e:	f854 2b04 	ldr.w	r2, [r4], #4
 800e492:	f843 2b04 	str.w	r2, [r3], #4
 800e496:	42a6      	cmp	r6, r4
 800e498:	d2f9      	bcs.n	800e48e <__hexnan+0xa6>
 800e49a:	2200      	movs	r2, #0
 800e49c:	f843 2b04 	str.w	r2, [r3], #4
 800e4a0:	429e      	cmp	r6, r3
 800e4a2:	d2fb      	bcs.n	800e49c <__hexnan+0xb4>
 800e4a4:	6833      	ldr	r3, [r6, #0]
 800e4a6:	b91b      	cbnz	r3, 800e4b0 <__hexnan+0xc8>
 800e4a8:	4546      	cmp	r6, r8
 800e4aa:	d127      	bne.n	800e4fc <__hexnan+0x114>
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	6033      	str	r3, [r6, #0]
 800e4b0:	2005      	movs	r0, #5
 800e4b2:	e026      	b.n	800e502 <__hexnan+0x11a>
 800e4b4:	3501      	adds	r5, #1
 800e4b6:	2d08      	cmp	r5, #8
 800e4b8:	f10b 0b01 	add.w	fp, fp, #1
 800e4bc:	dd06      	ble.n	800e4cc <__hexnan+0xe4>
 800e4be:	4544      	cmp	r4, r8
 800e4c0:	d9cf      	bls.n	800e462 <__hexnan+0x7a>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	f844 3c04 	str.w	r3, [r4, #-4]
 800e4c8:	2501      	movs	r5, #1
 800e4ca:	3c04      	subs	r4, #4
 800e4cc:	6822      	ldr	r2, [r4, #0]
 800e4ce:	f000 000f 	and.w	r0, r0, #15
 800e4d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e4d6:	6020      	str	r0, [r4, #0]
 800e4d8:	e7c3      	b.n	800e462 <__hexnan+0x7a>
 800e4da:	2508      	movs	r5, #8
 800e4dc:	e7c1      	b.n	800e462 <__hexnan+0x7a>
 800e4de:	9b01      	ldr	r3, [sp, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d0df      	beq.n	800e4a4 <__hexnan+0xbc>
 800e4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4e8:	f1c3 0320 	rsb	r3, r3, #32
 800e4ec:	fa22 f303 	lsr.w	r3, r2, r3
 800e4f0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e4f4:	401a      	ands	r2, r3
 800e4f6:	f847 2c04 	str.w	r2, [r7, #-4]
 800e4fa:	e7d3      	b.n	800e4a4 <__hexnan+0xbc>
 800e4fc:	3e04      	subs	r6, #4
 800e4fe:	e7d1      	b.n	800e4a4 <__hexnan+0xbc>
 800e500:	2004      	movs	r0, #4
 800e502:	b007      	add	sp, #28
 800e504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e508 <__locale_ctype_ptr_l>:
 800e508:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e50c:	4770      	bx	lr
	...

0800e510 <__locale_ctype_ptr>:
 800e510:	4b04      	ldr	r3, [pc, #16]	; (800e524 <__locale_ctype_ptr+0x14>)
 800e512:	4a05      	ldr	r2, [pc, #20]	; (800e528 <__locale_ctype_ptr+0x18>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	6a1b      	ldr	r3, [r3, #32]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	bf08      	it	eq
 800e51c:	4613      	moveq	r3, r2
 800e51e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800e522:	4770      	bx	lr
 800e524:	200001e8 	.word	0x200001e8
 800e528:	2000024c 	.word	0x2000024c

0800e52c <__localeconv_l>:
 800e52c:	30f0      	adds	r0, #240	; 0xf0
 800e52e:	4770      	bx	lr

0800e530 <_localeconv_r>:
 800e530:	4b04      	ldr	r3, [pc, #16]	; (800e544 <_localeconv_r+0x14>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	6a18      	ldr	r0, [r3, #32]
 800e536:	4b04      	ldr	r3, [pc, #16]	; (800e548 <_localeconv_r+0x18>)
 800e538:	2800      	cmp	r0, #0
 800e53a:	bf08      	it	eq
 800e53c:	4618      	moveq	r0, r3
 800e53e:	30f0      	adds	r0, #240	; 0xf0
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	200001e8 	.word	0x200001e8
 800e548:	2000024c 	.word	0x2000024c

0800e54c <_lseek_r>:
 800e54c:	b538      	push	{r3, r4, r5, lr}
 800e54e:	4c07      	ldr	r4, [pc, #28]	; (800e56c <_lseek_r+0x20>)
 800e550:	4605      	mov	r5, r0
 800e552:	4608      	mov	r0, r1
 800e554:	4611      	mov	r1, r2
 800e556:	2200      	movs	r2, #0
 800e558:	6022      	str	r2, [r4, #0]
 800e55a:	461a      	mov	r2, r3
 800e55c:	f7f3 fe18 	bl	8002190 <_lseek>
 800e560:	1c43      	adds	r3, r0, #1
 800e562:	d102      	bne.n	800e56a <_lseek_r+0x1e>
 800e564:	6823      	ldr	r3, [r4, #0]
 800e566:	b103      	cbz	r3, 800e56a <_lseek_r+0x1e>
 800e568:	602b      	str	r3, [r5, #0]
 800e56a:	bd38      	pop	{r3, r4, r5, pc}
 800e56c:	20001338 	.word	0x20001338

0800e570 <__swhatbuf_r>:
 800e570:	b570      	push	{r4, r5, r6, lr}
 800e572:	460e      	mov	r6, r1
 800e574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e578:	2900      	cmp	r1, #0
 800e57a:	b096      	sub	sp, #88	; 0x58
 800e57c:	4614      	mov	r4, r2
 800e57e:	461d      	mov	r5, r3
 800e580:	da07      	bge.n	800e592 <__swhatbuf_r+0x22>
 800e582:	2300      	movs	r3, #0
 800e584:	602b      	str	r3, [r5, #0]
 800e586:	89b3      	ldrh	r3, [r6, #12]
 800e588:	061a      	lsls	r2, r3, #24
 800e58a:	d410      	bmi.n	800e5ae <__swhatbuf_r+0x3e>
 800e58c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e590:	e00e      	b.n	800e5b0 <__swhatbuf_r+0x40>
 800e592:	466a      	mov	r2, sp
 800e594:	f001 fb3a 	bl	800fc0c <_fstat_r>
 800e598:	2800      	cmp	r0, #0
 800e59a:	dbf2      	blt.n	800e582 <__swhatbuf_r+0x12>
 800e59c:	9a01      	ldr	r2, [sp, #4]
 800e59e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e5a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e5a6:	425a      	negs	r2, r3
 800e5a8:	415a      	adcs	r2, r3
 800e5aa:	602a      	str	r2, [r5, #0]
 800e5ac:	e7ee      	b.n	800e58c <__swhatbuf_r+0x1c>
 800e5ae:	2340      	movs	r3, #64	; 0x40
 800e5b0:	2000      	movs	r0, #0
 800e5b2:	6023      	str	r3, [r4, #0]
 800e5b4:	b016      	add	sp, #88	; 0x58
 800e5b6:	bd70      	pop	{r4, r5, r6, pc}

0800e5b8 <__smakebuf_r>:
 800e5b8:	898b      	ldrh	r3, [r1, #12]
 800e5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5bc:	079d      	lsls	r5, r3, #30
 800e5be:	4606      	mov	r6, r0
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	d507      	bpl.n	800e5d4 <__smakebuf_r+0x1c>
 800e5c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e5c8:	6023      	str	r3, [r4, #0]
 800e5ca:	6123      	str	r3, [r4, #16]
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	6163      	str	r3, [r4, #20]
 800e5d0:	b002      	add	sp, #8
 800e5d2:	bd70      	pop	{r4, r5, r6, pc}
 800e5d4:	ab01      	add	r3, sp, #4
 800e5d6:	466a      	mov	r2, sp
 800e5d8:	f7ff ffca 	bl	800e570 <__swhatbuf_r>
 800e5dc:	9900      	ldr	r1, [sp, #0]
 800e5de:	4605      	mov	r5, r0
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f7fc fd4f 	bl	800b084 <_malloc_r>
 800e5e6:	b948      	cbnz	r0, 800e5fc <__smakebuf_r+0x44>
 800e5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ec:	059a      	lsls	r2, r3, #22
 800e5ee:	d4ef      	bmi.n	800e5d0 <__smakebuf_r+0x18>
 800e5f0:	f023 0303 	bic.w	r3, r3, #3
 800e5f4:	f043 0302 	orr.w	r3, r3, #2
 800e5f8:	81a3      	strh	r3, [r4, #12]
 800e5fa:	e7e3      	b.n	800e5c4 <__smakebuf_r+0xc>
 800e5fc:	4b0d      	ldr	r3, [pc, #52]	; (800e634 <__smakebuf_r+0x7c>)
 800e5fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	6020      	str	r0, [r4, #0]
 800e604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e608:	81a3      	strh	r3, [r4, #12]
 800e60a:	9b00      	ldr	r3, [sp, #0]
 800e60c:	6163      	str	r3, [r4, #20]
 800e60e:	9b01      	ldr	r3, [sp, #4]
 800e610:	6120      	str	r0, [r4, #16]
 800e612:	b15b      	cbz	r3, 800e62c <__smakebuf_r+0x74>
 800e614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e618:	4630      	mov	r0, r6
 800e61a:	f001 fb09 	bl	800fc30 <_isatty_r>
 800e61e:	b128      	cbz	r0, 800e62c <__smakebuf_r+0x74>
 800e620:	89a3      	ldrh	r3, [r4, #12]
 800e622:	f023 0303 	bic.w	r3, r3, #3
 800e626:	f043 0301 	orr.w	r3, r3, #1
 800e62a:	81a3      	strh	r3, [r4, #12]
 800e62c:	89a3      	ldrh	r3, [r4, #12]
 800e62e:	431d      	orrs	r5, r3
 800e630:	81a5      	strh	r5, [r4, #12]
 800e632:	e7cd      	b.n	800e5d0 <__smakebuf_r+0x18>
 800e634:	0800dd71 	.word	0x0800dd71

0800e638 <__ascii_mbtowc>:
 800e638:	b082      	sub	sp, #8
 800e63a:	b901      	cbnz	r1, 800e63e <__ascii_mbtowc+0x6>
 800e63c:	a901      	add	r1, sp, #4
 800e63e:	b142      	cbz	r2, 800e652 <__ascii_mbtowc+0x1a>
 800e640:	b14b      	cbz	r3, 800e656 <__ascii_mbtowc+0x1e>
 800e642:	7813      	ldrb	r3, [r2, #0]
 800e644:	600b      	str	r3, [r1, #0]
 800e646:	7812      	ldrb	r2, [r2, #0]
 800e648:	1c10      	adds	r0, r2, #0
 800e64a:	bf18      	it	ne
 800e64c:	2001      	movne	r0, #1
 800e64e:	b002      	add	sp, #8
 800e650:	4770      	bx	lr
 800e652:	4610      	mov	r0, r2
 800e654:	e7fb      	b.n	800e64e <__ascii_mbtowc+0x16>
 800e656:	f06f 0001 	mvn.w	r0, #1
 800e65a:	e7f8      	b.n	800e64e <__ascii_mbtowc+0x16>

0800e65c <memcpy>:
 800e65c:	b510      	push	{r4, lr}
 800e65e:	1e43      	subs	r3, r0, #1
 800e660:	440a      	add	r2, r1
 800e662:	4291      	cmp	r1, r2
 800e664:	d100      	bne.n	800e668 <memcpy+0xc>
 800e666:	bd10      	pop	{r4, pc}
 800e668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e66c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e670:	e7f7      	b.n	800e662 <memcpy+0x6>

0800e672 <__malloc_lock>:
 800e672:	4770      	bx	lr

0800e674 <__malloc_unlock>:
 800e674:	4770      	bx	lr

0800e676 <_Balloc>:
 800e676:	b570      	push	{r4, r5, r6, lr}
 800e678:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e67a:	4604      	mov	r4, r0
 800e67c:	460e      	mov	r6, r1
 800e67e:	b93d      	cbnz	r5, 800e690 <_Balloc+0x1a>
 800e680:	2010      	movs	r0, #16
 800e682:	f7fc fc99 	bl	800afb8 <malloc>
 800e686:	6260      	str	r0, [r4, #36]	; 0x24
 800e688:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e68c:	6005      	str	r5, [r0, #0]
 800e68e:	60c5      	str	r5, [r0, #12]
 800e690:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e692:	68eb      	ldr	r3, [r5, #12]
 800e694:	b183      	cbz	r3, 800e6b8 <_Balloc+0x42>
 800e696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e69e:	b9b8      	cbnz	r0, 800e6d0 <_Balloc+0x5a>
 800e6a0:	2101      	movs	r1, #1
 800e6a2:	fa01 f506 	lsl.w	r5, r1, r6
 800e6a6:	1d6a      	adds	r2, r5, #5
 800e6a8:	0092      	lsls	r2, r2, #2
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f000 fbe1 	bl	800ee72 <_calloc_r>
 800e6b0:	b160      	cbz	r0, 800e6cc <_Balloc+0x56>
 800e6b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e6b6:	e00e      	b.n	800e6d6 <_Balloc+0x60>
 800e6b8:	2221      	movs	r2, #33	; 0x21
 800e6ba:	2104      	movs	r1, #4
 800e6bc:	4620      	mov	r0, r4
 800e6be:	f000 fbd8 	bl	800ee72 <_calloc_r>
 800e6c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6c4:	60e8      	str	r0, [r5, #12]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d1e4      	bne.n	800e696 <_Balloc+0x20>
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	bd70      	pop	{r4, r5, r6, pc}
 800e6d0:	6802      	ldr	r2, [r0, #0]
 800e6d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6dc:	e7f7      	b.n	800e6ce <_Balloc+0x58>

0800e6de <_Bfree>:
 800e6de:	b570      	push	{r4, r5, r6, lr}
 800e6e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	460d      	mov	r5, r1
 800e6e6:	b93c      	cbnz	r4, 800e6f8 <_Bfree+0x1a>
 800e6e8:	2010      	movs	r0, #16
 800e6ea:	f7fc fc65 	bl	800afb8 <malloc>
 800e6ee:	6270      	str	r0, [r6, #36]	; 0x24
 800e6f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6f4:	6004      	str	r4, [r0, #0]
 800e6f6:	60c4      	str	r4, [r0, #12]
 800e6f8:	b13d      	cbz	r5, 800e70a <_Bfree+0x2c>
 800e6fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e6fc:	686a      	ldr	r2, [r5, #4]
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e704:	6029      	str	r1, [r5, #0]
 800e706:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e70a:	bd70      	pop	{r4, r5, r6, pc}

0800e70c <__multadd>:
 800e70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e710:	690d      	ldr	r5, [r1, #16]
 800e712:	461f      	mov	r7, r3
 800e714:	4606      	mov	r6, r0
 800e716:	460c      	mov	r4, r1
 800e718:	f101 0c14 	add.w	ip, r1, #20
 800e71c:	2300      	movs	r3, #0
 800e71e:	f8dc 0000 	ldr.w	r0, [ip]
 800e722:	b281      	uxth	r1, r0
 800e724:	fb02 7101 	mla	r1, r2, r1, r7
 800e728:	0c0f      	lsrs	r7, r1, #16
 800e72a:	0c00      	lsrs	r0, r0, #16
 800e72c:	fb02 7000 	mla	r0, r2, r0, r7
 800e730:	b289      	uxth	r1, r1
 800e732:	3301      	adds	r3, #1
 800e734:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e738:	429d      	cmp	r5, r3
 800e73a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e73e:	f84c 1b04 	str.w	r1, [ip], #4
 800e742:	dcec      	bgt.n	800e71e <__multadd+0x12>
 800e744:	b1d7      	cbz	r7, 800e77c <__multadd+0x70>
 800e746:	68a3      	ldr	r3, [r4, #8]
 800e748:	42ab      	cmp	r3, r5
 800e74a:	dc12      	bgt.n	800e772 <__multadd+0x66>
 800e74c:	6861      	ldr	r1, [r4, #4]
 800e74e:	4630      	mov	r0, r6
 800e750:	3101      	adds	r1, #1
 800e752:	f7ff ff90 	bl	800e676 <_Balloc>
 800e756:	6922      	ldr	r2, [r4, #16]
 800e758:	3202      	adds	r2, #2
 800e75a:	f104 010c 	add.w	r1, r4, #12
 800e75e:	4680      	mov	r8, r0
 800e760:	0092      	lsls	r2, r2, #2
 800e762:	300c      	adds	r0, #12
 800e764:	f7ff ff7a 	bl	800e65c <memcpy>
 800e768:	4621      	mov	r1, r4
 800e76a:	4630      	mov	r0, r6
 800e76c:	f7ff ffb7 	bl	800e6de <_Bfree>
 800e770:	4644      	mov	r4, r8
 800e772:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e776:	3501      	adds	r5, #1
 800e778:	615f      	str	r7, [r3, #20]
 800e77a:	6125      	str	r5, [r4, #16]
 800e77c:	4620      	mov	r0, r4
 800e77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e782 <__s2b>:
 800e782:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e786:	460c      	mov	r4, r1
 800e788:	4615      	mov	r5, r2
 800e78a:	461f      	mov	r7, r3
 800e78c:	2209      	movs	r2, #9
 800e78e:	3308      	adds	r3, #8
 800e790:	4606      	mov	r6, r0
 800e792:	fb93 f3f2 	sdiv	r3, r3, r2
 800e796:	2100      	movs	r1, #0
 800e798:	2201      	movs	r2, #1
 800e79a:	429a      	cmp	r2, r3
 800e79c:	db20      	blt.n	800e7e0 <__s2b+0x5e>
 800e79e:	4630      	mov	r0, r6
 800e7a0:	f7ff ff69 	bl	800e676 <_Balloc>
 800e7a4:	9b08      	ldr	r3, [sp, #32]
 800e7a6:	6143      	str	r3, [r0, #20]
 800e7a8:	2d09      	cmp	r5, #9
 800e7aa:	f04f 0301 	mov.w	r3, #1
 800e7ae:	6103      	str	r3, [r0, #16]
 800e7b0:	dd19      	ble.n	800e7e6 <__s2b+0x64>
 800e7b2:	f104 0809 	add.w	r8, r4, #9
 800e7b6:	46c1      	mov	r9, r8
 800e7b8:	442c      	add	r4, r5
 800e7ba:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e7be:	4601      	mov	r1, r0
 800e7c0:	3b30      	subs	r3, #48	; 0x30
 800e7c2:	220a      	movs	r2, #10
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	f7ff ffa1 	bl	800e70c <__multadd>
 800e7ca:	45a1      	cmp	r9, r4
 800e7cc:	d1f5      	bne.n	800e7ba <__s2b+0x38>
 800e7ce:	eb08 0405 	add.w	r4, r8, r5
 800e7d2:	3c08      	subs	r4, #8
 800e7d4:	1b2d      	subs	r5, r5, r4
 800e7d6:	1963      	adds	r3, r4, r5
 800e7d8:	42bb      	cmp	r3, r7
 800e7da:	db07      	blt.n	800e7ec <__s2b+0x6a>
 800e7dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7e0:	0052      	lsls	r2, r2, #1
 800e7e2:	3101      	adds	r1, #1
 800e7e4:	e7d9      	b.n	800e79a <__s2b+0x18>
 800e7e6:	340a      	adds	r4, #10
 800e7e8:	2509      	movs	r5, #9
 800e7ea:	e7f3      	b.n	800e7d4 <__s2b+0x52>
 800e7ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e7f0:	4601      	mov	r1, r0
 800e7f2:	3b30      	subs	r3, #48	; 0x30
 800e7f4:	220a      	movs	r2, #10
 800e7f6:	4630      	mov	r0, r6
 800e7f8:	f7ff ff88 	bl	800e70c <__multadd>
 800e7fc:	e7eb      	b.n	800e7d6 <__s2b+0x54>

0800e7fe <__hi0bits>:
 800e7fe:	0c02      	lsrs	r2, r0, #16
 800e800:	0412      	lsls	r2, r2, #16
 800e802:	4603      	mov	r3, r0
 800e804:	b9b2      	cbnz	r2, 800e834 <__hi0bits+0x36>
 800e806:	0403      	lsls	r3, r0, #16
 800e808:	2010      	movs	r0, #16
 800e80a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e80e:	bf04      	itt	eq
 800e810:	021b      	lsleq	r3, r3, #8
 800e812:	3008      	addeq	r0, #8
 800e814:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e818:	bf04      	itt	eq
 800e81a:	011b      	lsleq	r3, r3, #4
 800e81c:	3004      	addeq	r0, #4
 800e81e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e822:	bf04      	itt	eq
 800e824:	009b      	lsleq	r3, r3, #2
 800e826:	3002      	addeq	r0, #2
 800e828:	2b00      	cmp	r3, #0
 800e82a:	db06      	blt.n	800e83a <__hi0bits+0x3c>
 800e82c:	005b      	lsls	r3, r3, #1
 800e82e:	d503      	bpl.n	800e838 <__hi0bits+0x3a>
 800e830:	3001      	adds	r0, #1
 800e832:	4770      	bx	lr
 800e834:	2000      	movs	r0, #0
 800e836:	e7e8      	b.n	800e80a <__hi0bits+0xc>
 800e838:	2020      	movs	r0, #32
 800e83a:	4770      	bx	lr

0800e83c <__lo0bits>:
 800e83c:	6803      	ldr	r3, [r0, #0]
 800e83e:	f013 0207 	ands.w	r2, r3, #7
 800e842:	4601      	mov	r1, r0
 800e844:	d00b      	beq.n	800e85e <__lo0bits+0x22>
 800e846:	07da      	lsls	r2, r3, #31
 800e848:	d423      	bmi.n	800e892 <__lo0bits+0x56>
 800e84a:	0798      	lsls	r0, r3, #30
 800e84c:	bf49      	itett	mi
 800e84e:	085b      	lsrmi	r3, r3, #1
 800e850:	089b      	lsrpl	r3, r3, #2
 800e852:	2001      	movmi	r0, #1
 800e854:	600b      	strmi	r3, [r1, #0]
 800e856:	bf5c      	itt	pl
 800e858:	600b      	strpl	r3, [r1, #0]
 800e85a:	2002      	movpl	r0, #2
 800e85c:	4770      	bx	lr
 800e85e:	b298      	uxth	r0, r3
 800e860:	b9a8      	cbnz	r0, 800e88e <__lo0bits+0x52>
 800e862:	0c1b      	lsrs	r3, r3, #16
 800e864:	2010      	movs	r0, #16
 800e866:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e86a:	bf04      	itt	eq
 800e86c:	0a1b      	lsreq	r3, r3, #8
 800e86e:	3008      	addeq	r0, #8
 800e870:	071a      	lsls	r2, r3, #28
 800e872:	bf04      	itt	eq
 800e874:	091b      	lsreq	r3, r3, #4
 800e876:	3004      	addeq	r0, #4
 800e878:	079a      	lsls	r2, r3, #30
 800e87a:	bf04      	itt	eq
 800e87c:	089b      	lsreq	r3, r3, #2
 800e87e:	3002      	addeq	r0, #2
 800e880:	07da      	lsls	r2, r3, #31
 800e882:	d402      	bmi.n	800e88a <__lo0bits+0x4e>
 800e884:	085b      	lsrs	r3, r3, #1
 800e886:	d006      	beq.n	800e896 <__lo0bits+0x5a>
 800e888:	3001      	adds	r0, #1
 800e88a:	600b      	str	r3, [r1, #0]
 800e88c:	4770      	bx	lr
 800e88e:	4610      	mov	r0, r2
 800e890:	e7e9      	b.n	800e866 <__lo0bits+0x2a>
 800e892:	2000      	movs	r0, #0
 800e894:	4770      	bx	lr
 800e896:	2020      	movs	r0, #32
 800e898:	4770      	bx	lr

0800e89a <__i2b>:
 800e89a:	b510      	push	{r4, lr}
 800e89c:	460c      	mov	r4, r1
 800e89e:	2101      	movs	r1, #1
 800e8a0:	f7ff fee9 	bl	800e676 <_Balloc>
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	6144      	str	r4, [r0, #20]
 800e8a8:	6102      	str	r2, [r0, #16]
 800e8aa:	bd10      	pop	{r4, pc}

0800e8ac <__multiply>:
 800e8ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b0:	4614      	mov	r4, r2
 800e8b2:	690a      	ldr	r2, [r1, #16]
 800e8b4:	6923      	ldr	r3, [r4, #16]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	bfb8      	it	lt
 800e8ba:	460b      	movlt	r3, r1
 800e8bc:	4688      	mov	r8, r1
 800e8be:	bfbc      	itt	lt
 800e8c0:	46a0      	movlt	r8, r4
 800e8c2:	461c      	movlt	r4, r3
 800e8c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e8c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e8cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e8d4:	eb07 0609 	add.w	r6, r7, r9
 800e8d8:	42b3      	cmp	r3, r6
 800e8da:	bfb8      	it	lt
 800e8dc:	3101      	addlt	r1, #1
 800e8de:	f7ff feca 	bl	800e676 <_Balloc>
 800e8e2:	f100 0514 	add.w	r5, r0, #20
 800e8e6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e8ea:	462b      	mov	r3, r5
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4573      	cmp	r3, lr
 800e8f0:	d316      	bcc.n	800e920 <__multiply+0x74>
 800e8f2:	f104 0214 	add.w	r2, r4, #20
 800e8f6:	f108 0114 	add.w	r1, r8, #20
 800e8fa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e8fe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	9b00      	ldr	r3, [sp, #0]
 800e906:	9201      	str	r2, [sp, #4]
 800e908:	4293      	cmp	r3, r2
 800e90a:	d80c      	bhi.n	800e926 <__multiply+0x7a>
 800e90c:	2e00      	cmp	r6, #0
 800e90e:	dd03      	ble.n	800e918 <__multiply+0x6c>
 800e910:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e914:	2b00      	cmp	r3, #0
 800e916:	d05d      	beq.n	800e9d4 <__multiply+0x128>
 800e918:	6106      	str	r6, [r0, #16]
 800e91a:	b003      	add	sp, #12
 800e91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e920:	f843 2b04 	str.w	r2, [r3], #4
 800e924:	e7e3      	b.n	800e8ee <__multiply+0x42>
 800e926:	f8b2 b000 	ldrh.w	fp, [r2]
 800e92a:	f1bb 0f00 	cmp.w	fp, #0
 800e92e:	d023      	beq.n	800e978 <__multiply+0xcc>
 800e930:	4689      	mov	r9, r1
 800e932:	46ac      	mov	ip, r5
 800e934:	f04f 0800 	mov.w	r8, #0
 800e938:	f859 4b04 	ldr.w	r4, [r9], #4
 800e93c:	f8dc a000 	ldr.w	sl, [ip]
 800e940:	b2a3      	uxth	r3, r4
 800e942:	fa1f fa8a 	uxth.w	sl, sl
 800e946:	fb0b a303 	mla	r3, fp, r3, sl
 800e94a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e94e:	f8dc 4000 	ldr.w	r4, [ip]
 800e952:	4443      	add	r3, r8
 800e954:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e958:	fb0b 840a 	mla	r4, fp, sl, r8
 800e95c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e960:	46e2      	mov	sl, ip
 800e962:	b29b      	uxth	r3, r3
 800e964:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e968:	454f      	cmp	r7, r9
 800e96a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e96e:	f84a 3b04 	str.w	r3, [sl], #4
 800e972:	d82b      	bhi.n	800e9cc <__multiply+0x120>
 800e974:	f8cc 8004 	str.w	r8, [ip, #4]
 800e978:	9b01      	ldr	r3, [sp, #4]
 800e97a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e97e:	3204      	adds	r2, #4
 800e980:	f1ba 0f00 	cmp.w	sl, #0
 800e984:	d020      	beq.n	800e9c8 <__multiply+0x11c>
 800e986:	682b      	ldr	r3, [r5, #0]
 800e988:	4689      	mov	r9, r1
 800e98a:	46a8      	mov	r8, r5
 800e98c:	f04f 0b00 	mov.w	fp, #0
 800e990:	f8b9 c000 	ldrh.w	ip, [r9]
 800e994:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e998:	fb0a 440c 	mla	r4, sl, ip, r4
 800e99c:	445c      	add	r4, fp
 800e99e:	46c4      	mov	ip, r8
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e9a6:	f84c 3b04 	str.w	r3, [ip], #4
 800e9aa:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9ae:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e9b2:	0c1b      	lsrs	r3, r3, #16
 800e9b4:	fb0a b303 	mla	r3, sl, r3, fp
 800e9b8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e9bc:	454f      	cmp	r7, r9
 800e9be:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e9c2:	d805      	bhi.n	800e9d0 <__multiply+0x124>
 800e9c4:	f8c8 3004 	str.w	r3, [r8, #4]
 800e9c8:	3504      	adds	r5, #4
 800e9ca:	e79b      	b.n	800e904 <__multiply+0x58>
 800e9cc:	46d4      	mov	ip, sl
 800e9ce:	e7b3      	b.n	800e938 <__multiply+0x8c>
 800e9d0:	46e0      	mov	r8, ip
 800e9d2:	e7dd      	b.n	800e990 <__multiply+0xe4>
 800e9d4:	3e01      	subs	r6, #1
 800e9d6:	e799      	b.n	800e90c <__multiply+0x60>

0800e9d8 <__pow5mult>:
 800e9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9dc:	4615      	mov	r5, r2
 800e9de:	f012 0203 	ands.w	r2, r2, #3
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	460f      	mov	r7, r1
 800e9e6:	d007      	beq.n	800e9f8 <__pow5mult+0x20>
 800e9e8:	3a01      	subs	r2, #1
 800e9ea:	4c21      	ldr	r4, [pc, #132]	; (800ea70 <__pow5mult+0x98>)
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9f2:	f7ff fe8b 	bl	800e70c <__multadd>
 800e9f6:	4607      	mov	r7, r0
 800e9f8:	10ad      	asrs	r5, r5, #2
 800e9fa:	d035      	beq.n	800ea68 <__pow5mult+0x90>
 800e9fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e9fe:	b93c      	cbnz	r4, 800ea10 <__pow5mult+0x38>
 800ea00:	2010      	movs	r0, #16
 800ea02:	f7fc fad9 	bl	800afb8 <malloc>
 800ea06:	6270      	str	r0, [r6, #36]	; 0x24
 800ea08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea0c:	6004      	str	r4, [r0, #0]
 800ea0e:	60c4      	str	r4, [r0, #12]
 800ea10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ea14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea18:	b94c      	cbnz	r4, 800ea2e <__pow5mult+0x56>
 800ea1a:	f240 2171 	movw	r1, #625	; 0x271
 800ea1e:	4630      	mov	r0, r6
 800ea20:	f7ff ff3b 	bl	800e89a <__i2b>
 800ea24:	2300      	movs	r3, #0
 800ea26:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	6003      	str	r3, [r0, #0]
 800ea2e:	f04f 0800 	mov.w	r8, #0
 800ea32:	07eb      	lsls	r3, r5, #31
 800ea34:	d50a      	bpl.n	800ea4c <__pow5mult+0x74>
 800ea36:	4639      	mov	r1, r7
 800ea38:	4622      	mov	r2, r4
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f7ff ff36 	bl	800e8ac <__multiply>
 800ea40:	4639      	mov	r1, r7
 800ea42:	4681      	mov	r9, r0
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7ff fe4a 	bl	800e6de <_Bfree>
 800ea4a:	464f      	mov	r7, r9
 800ea4c:	106d      	asrs	r5, r5, #1
 800ea4e:	d00b      	beq.n	800ea68 <__pow5mult+0x90>
 800ea50:	6820      	ldr	r0, [r4, #0]
 800ea52:	b938      	cbnz	r0, 800ea64 <__pow5mult+0x8c>
 800ea54:	4622      	mov	r2, r4
 800ea56:	4621      	mov	r1, r4
 800ea58:	4630      	mov	r0, r6
 800ea5a:	f7ff ff27 	bl	800e8ac <__multiply>
 800ea5e:	6020      	str	r0, [r4, #0]
 800ea60:	f8c0 8000 	str.w	r8, [r0]
 800ea64:	4604      	mov	r4, r0
 800ea66:	e7e4      	b.n	800ea32 <__pow5mult+0x5a>
 800ea68:	4638      	mov	r0, r7
 800ea6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea6e:	bf00      	nop
 800ea70:	08012c10 	.word	0x08012c10

0800ea74 <__lshift>:
 800ea74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea78:	460c      	mov	r4, r1
 800ea7a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea7e:	6923      	ldr	r3, [r4, #16]
 800ea80:	6849      	ldr	r1, [r1, #4]
 800ea82:	eb0a 0903 	add.w	r9, sl, r3
 800ea86:	68a3      	ldr	r3, [r4, #8]
 800ea88:	4607      	mov	r7, r0
 800ea8a:	4616      	mov	r6, r2
 800ea8c:	f109 0501 	add.w	r5, r9, #1
 800ea90:	42ab      	cmp	r3, r5
 800ea92:	db32      	blt.n	800eafa <__lshift+0x86>
 800ea94:	4638      	mov	r0, r7
 800ea96:	f7ff fdee 	bl	800e676 <_Balloc>
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	4680      	mov	r8, r0
 800ea9e:	f100 0114 	add.w	r1, r0, #20
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	4553      	cmp	r3, sl
 800eaa6:	db2b      	blt.n	800eb00 <__lshift+0x8c>
 800eaa8:	6920      	ldr	r0, [r4, #16]
 800eaaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eaae:	f104 0314 	add.w	r3, r4, #20
 800eab2:	f016 021f 	ands.w	r2, r6, #31
 800eab6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eaba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eabe:	d025      	beq.n	800eb0c <__lshift+0x98>
 800eac0:	f1c2 0e20 	rsb	lr, r2, #32
 800eac4:	2000      	movs	r0, #0
 800eac6:	681e      	ldr	r6, [r3, #0]
 800eac8:	468a      	mov	sl, r1
 800eaca:	4096      	lsls	r6, r2
 800eacc:	4330      	orrs	r0, r6
 800eace:	f84a 0b04 	str.w	r0, [sl], #4
 800ead2:	f853 0b04 	ldr.w	r0, [r3], #4
 800ead6:	459c      	cmp	ip, r3
 800ead8:	fa20 f00e 	lsr.w	r0, r0, lr
 800eadc:	d814      	bhi.n	800eb08 <__lshift+0x94>
 800eade:	6048      	str	r0, [r1, #4]
 800eae0:	b108      	cbz	r0, 800eae6 <__lshift+0x72>
 800eae2:	f109 0502 	add.w	r5, r9, #2
 800eae6:	3d01      	subs	r5, #1
 800eae8:	4638      	mov	r0, r7
 800eaea:	f8c8 5010 	str.w	r5, [r8, #16]
 800eaee:	4621      	mov	r1, r4
 800eaf0:	f7ff fdf5 	bl	800e6de <_Bfree>
 800eaf4:	4640      	mov	r0, r8
 800eaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eafa:	3101      	adds	r1, #1
 800eafc:	005b      	lsls	r3, r3, #1
 800eafe:	e7c7      	b.n	800ea90 <__lshift+0x1c>
 800eb00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800eb04:	3301      	adds	r3, #1
 800eb06:	e7cd      	b.n	800eaa4 <__lshift+0x30>
 800eb08:	4651      	mov	r1, sl
 800eb0a:	e7dc      	b.n	800eac6 <__lshift+0x52>
 800eb0c:	3904      	subs	r1, #4
 800eb0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb12:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb16:	459c      	cmp	ip, r3
 800eb18:	d8f9      	bhi.n	800eb0e <__lshift+0x9a>
 800eb1a:	e7e4      	b.n	800eae6 <__lshift+0x72>

0800eb1c <__mcmp>:
 800eb1c:	6903      	ldr	r3, [r0, #16]
 800eb1e:	690a      	ldr	r2, [r1, #16]
 800eb20:	1a9b      	subs	r3, r3, r2
 800eb22:	b530      	push	{r4, r5, lr}
 800eb24:	d10c      	bne.n	800eb40 <__mcmp+0x24>
 800eb26:	0092      	lsls	r2, r2, #2
 800eb28:	3014      	adds	r0, #20
 800eb2a:	3114      	adds	r1, #20
 800eb2c:	1884      	adds	r4, r0, r2
 800eb2e:	4411      	add	r1, r2
 800eb30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eb34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eb38:	4295      	cmp	r5, r2
 800eb3a:	d003      	beq.n	800eb44 <__mcmp+0x28>
 800eb3c:	d305      	bcc.n	800eb4a <__mcmp+0x2e>
 800eb3e:	2301      	movs	r3, #1
 800eb40:	4618      	mov	r0, r3
 800eb42:	bd30      	pop	{r4, r5, pc}
 800eb44:	42a0      	cmp	r0, r4
 800eb46:	d3f3      	bcc.n	800eb30 <__mcmp+0x14>
 800eb48:	e7fa      	b.n	800eb40 <__mcmp+0x24>
 800eb4a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb4e:	e7f7      	b.n	800eb40 <__mcmp+0x24>

0800eb50 <__mdiff>:
 800eb50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb54:	460d      	mov	r5, r1
 800eb56:	4607      	mov	r7, r0
 800eb58:	4611      	mov	r1, r2
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	4614      	mov	r4, r2
 800eb5e:	f7ff ffdd 	bl	800eb1c <__mcmp>
 800eb62:	1e06      	subs	r6, r0, #0
 800eb64:	d108      	bne.n	800eb78 <__mdiff+0x28>
 800eb66:	4631      	mov	r1, r6
 800eb68:	4638      	mov	r0, r7
 800eb6a:	f7ff fd84 	bl	800e676 <_Balloc>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800eb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb78:	bfa4      	itt	ge
 800eb7a:	4623      	movge	r3, r4
 800eb7c:	462c      	movge	r4, r5
 800eb7e:	4638      	mov	r0, r7
 800eb80:	6861      	ldr	r1, [r4, #4]
 800eb82:	bfa6      	itte	ge
 800eb84:	461d      	movge	r5, r3
 800eb86:	2600      	movge	r6, #0
 800eb88:	2601      	movlt	r6, #1
 800eb8a:	f7ff fd74 	bl	800e676 <_Balloc>
 800eb8e:	692b      	ldr	r3, [r5, #16]
 800eb90:	60c6      	str	r6, [r0, #12]
 800eb92:	6926      	ldr	r6, [r4, #16]
 800eb94:	f105 0914 	add.w	r9, r5, #20
 800eb98:	f104 0214 	add.w	r2, r4, #20
 800eb9c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800eba0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800eba4:	f100 0514 	add.w	r5, r0, #20
 800eba8:	f04f 0e00 	mov.w	lr, #0
 800ebac:	f852 ab04 	ldr.w	sl, [r2], #4
 800ebb0:	f859 4b04 	ldr.w	r4, [r9], #4
 800ebb4:	fa1e f18a 	uxtah	r1, lr, sl
 800ebb8:	b2a3      	uxth	r3, r4
 800ebba:	1ac9      	subs	r1, r1, r3
 800ebbc:	0c23      	lsrs	r3, r4, #16
 800ebbe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ebc2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ebc6:	b289      	uxth	r1, r1
 800ebc8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ebcc:	45c8      	cmp	r8, r9
 800ebce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ebd2:	4694      	mov	ip, r2
 800ebd4:	f845 3b04 	str.w	r3, [r5], #4
 800ebd8:	d8e8      	bhi.n	800ebac <__mdiff+0x5c>
 800ebda:	45bc      	cmp	ip, r7
 800ebdc:	d304      	bcc.n	800ebe8 <__mdiff+0x98>
 800ebde:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ebe2:	b183      	cbz	r3, 800ec06 <__mdiff+0xb6>
 800ebe4:	6106      	str	r6, [r0, #16]
 800ebe6:	e7c5      	b.n	800eb74 <__mdiff+0x24>
 800ebe8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ebec:	fa1e f381 	uxtah	r3, lr, r1
 800ebf0:	141a      	asrs	r2, r3, #16
 800ebf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebfc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ec00:	f845 3b04 	str.w	r3, [r5], #4
 800ec04:	e7e9      	b.n	800ebda <__mdiff+0x8a>
 800ec06:	3e01      	subs	r6, #1
 800ec08:	e7e9      	b.n	800ebde <__mdiff+0x8e>
	...

0800ec0c <__ulp>:
 800ec0c:	4b12      	ldr	r3, [pc, #72]	; (800ec58 <__ulp+0x4c>)
 800ec0e:	ee10 2a90 	vmov	r2, s1
 800ec12:	401a      	ands	r2, r3
 800ec14:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	dd04      	ble.n	800ec26 <__ulp+0x1a>
 800ec1c:	2000      	movs	r0, #0
 800ec1e:	4619      	mov	r1, r3
 800ec20:	ec41 0b10 	vmov	d0, r0, r1
 800ec24:	4770      	bx	lr
 800ec26:	425b      	negs	r3, r3
 800ec28:	151b      	asrs	r3, r3, #20
 800ec2a:	2b13      	cmp	r3, #19
 800ec2c:	f04f 0000 	mov.w	r0, #0
 800ec30:	f04f 0100 	mov.w	r1, #0
 800ec34:	dc04      	bgt.n	800ec40 <__ulp+0x34>
 800ec36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ec3a:	fa42 f103 	asr.w	r1, r2, r3
 800ec3e:	e7ef      	b.n	800ec20 <__ulp+0x14>
 800ec40:	3b14      	subs	r3, #20
 800ec42:	2b1e      	cmp	r3, #30
 800ec44:	f04f 0201 	mov.w	r2, #1
 800ec48:	bfda      	itte	le
 800ec4a:	f1c3 031f 	rsble	r3, r3, #31
 800ec4e:	fa02 f303 	lslle.w	r3, r2, r3
 800ec52:	4613      	movgt	r3, r2
 800ec54:	4618      	mov	r0, r3
 800ec56:	e7e3      	b.n	800ec20 <__ulp+0x14>
 800ec58:	7ff00000 	.word	0x7ff00000

0800ec5c <__b2d>:
 800ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5e:	6905      	ldr	r5, [r0, #16]
 800ec60:	f100 0714 	add.w	r7, r0, #20
 800ec64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ec68:	1f2e      	subs	r6, r5, #4
 800ec6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f7ff fdc5 	bl	800e7fe <__hi0bits>
 800ec74:	f1c0 0320 	rsb	r3, r0, #32
 800ec78:	280a      	cmp	r0, #10
 800ec7a:	600b      	str	r3, [r1, #0]
 800ec7c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ecf4 <__b2d+0x98>
 800ec80:	dc14      	bgt.n	800ecac <__b2d+0x50>
 800ec82:	f1c0 0e0b 	rsb	lr, r0, #11
 800ec86:	fa24 f10e 	lsr.w	r1, r4, lr
 800ec8a:	42b7      	cmp	r7, r6
 800ec8c:	ea41 030c 	orr.w	r3, r1, ip
 800ec90:	bf34      	ite	cc
 800ec92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ec96:	2100      	movcs	r1, #0
 800ec98:	3015      	adds	r0, #21
 800ec9a:	fa04 f000 	lsl.w	r0, r4, r0
 800ec9e:	fa21 f10e 	lsr.w	r1, r1, lr
 800eca2:	ea40 0201 	orr.w	r2, r0, r1
 800eca6:	ec43 2b10 	vmov	d0, r2, r3
 800ecaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecac:	42b7      	cmp	r7, r6
 800ecae:	bf3a      	itte	cc
 800ecb0:	f1a5 0608 	subcc.w	r6, r5, #8
 800ecb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ecb8:	2100      	movcs	r1, #0
 800ecba:	380b      	subs	r0, #11
 800ecbc:	d015      	beq.n	800ecea <__b2d+0x8e>
 800ecbe:	4084      	lsls	r4, r0
 800ecc0:	f1c0 0520 	rsb	r5, r0, #32
 800ecc4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ecc8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800eccc:	42be      	cmp	r6, r7
 800ecce:	fa21 fc05 	lsr.w	ip, r1, r5
 800ecd2:	ea44 030c 	orr.w	r3, r4, ip
 800ecd6:	bf8c      	ite	hi
 800ecd8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ecdc:	2400      	movls	r4, #0
 800ecde:	fa01 f000 	lsl.w	r0, r1, r0
 800ece2:	40ec      	lsrs	r4, r5
 800ece4:	ea40 0204 	orr.w	r2, r0, r4
 800ece8:	e7dd      	b.n	800eca6 <__b2d+0x4a>
 800ecea:	ea44 030c 	orr.w	r3, r4, ip
 800ecee:	460a      	mov	r2, r1
 800ecf0:	e7d9      	b.n	800eca6 <__b2d+0x4a>
 800ecf2:	bf00      	nop
 800ecf4:	3ff00000 	.word	0x3ff00000

0800ecf8 <__d2b>:
 800ecf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ecfc:	460e      	mov	r6, r1
 800ecfe:	2101      	movs	r1, #1
 800ed00:	ec59 8b10 	vmov	r8, r9, d0
 800ed04:	4615      	mov	r5, r2
 800ed06:	f7ff fcb6 	bl	800e676 <_Balloc>
 800ed0a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ed0e:	4607      	mov	r7, r0
 800ed10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed14:	bb34      	cbnz	r4, 800ed64 <__d2b+0x6c>
 800ed16:	9301      	str	r3, [sp, #4]
 800ed18:	f1b8 0300 	subs.w	r3, r8, #0
 800ed1c:	d027      	beq.n	800ed6e <__d2b+0x76>
 800ed1e:	a802      	add	r0, sp, #8
 800ed20:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ed24:	f7ff fd8a 	bl	800e83c <__lo0bits>
 800ed28:	9900      	ldr	r1, [sp, #0]
 800ed2a:	b1f0      	cbz	r0, 800ed6a <__d2b+0x72>
 800ed2c:	9a01      	ldr	r2, [sp, #4]
 800ed2e:	f1c0 0320 	rsb	r3, r0, #32
 800ed32:	fa02 f303 	lsl.w	r3, r2, r3
 800ed36:	430b      	orrs	r3, r1
 800ed38:	40c2      	lsrs	r2, r0
 800ed3a:	617b      	str	r3, [r7, #20]
 800ed3c:	9201      	str	r2, [sp, #4]
 800ed3e:	9b01      	ldr	r3, [sp, #4]
 800ed40:	61bb      	str	r3, [r7, #24]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	bf14      	ite	ne
 800ed46:	2102      	movne	r1, #2
 800ed48:	2101      	moveq	r1, #1
 800ed4a:	6139      	str	r1, [r7, #16]
 800ed4c:	b1c4      	cbz	r4, 800ed80 <__d2b+0x88>
 800ed4e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ed52:	4404      	add	r4, r0
 800ed54:	6034      	str	r4, [r6, #0]
 800ed56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ed5a:	6028      	str	r0, [r5, #0]
 800ed5c:	4638      	mov	r0, r7
 800ed5e:	b003      	add	sp, #12
 800ed60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed68:	e7d5      	b.n	800ed16 <__d2b+0x1e>
 800ed6a:	6179      	str	r1, [r7, #20]
 800ed6c:	e7e7      	b.n	800ed3e <__d2b+0x46>
 800ed6e:	a801      	add	r0, sp, #4
 800ed70:	f7ff fd64 	bl	800e83c <__lo0bits>
 800ed74:	9b01      	ldr	r3, [sp, #4]
 800ed76:	617b      	str	r3, [r7, #20]
 800ed78:	2101      	movs	r1, #1
 800ed7a:	6139      	str	r1, [r7, #16]
 800ed7c:	3020      	adds	r0, #32
 800ed7e:	e7e5      	b.n	800ed4c <__d2b+0x54>
 800ed80:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ed84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed88:	6030      	str	r0, [r6, #0]
 800ed8a:	6918      	ldr	r0, [r3, #16]
 800ed8c:	f7ff fd37 	bl	800e7fe <__hi0bits>
 800ed90:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ed94:	e7e1      	b.n	800ed5a <__d2b+0x62>

0800ed96 <__ratio>:
 800ed96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed9a:	4688      	mov	r8, r1
 800ed9c:	4669      	mov	r1, sp
 800ed9e:	4681      	mov	r9, r0
 800eda0:	f7ff ff5c 	bl	800ec5c <__b2d>
 800eda4:	a901      	add	r1, sp, #4
 800eda6:	4640      	mov	r0, r8
 800eda8:	ec57 6b10 	vmov	r6, r7, d0
 800edac:	f7ff ff56 	bl	800ec5c <__b2d>
 800edb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800edb4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800edb8:	eba3 0c02 	sub.w	ip, r3, r2
 800edbc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800edc0:	1a9b      	subs	r3, r3, r2
 800edc2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800edc6:	ec5b ab10 	vmov	sl, fp, d0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	bfce      	itee	gt
 800edce:	463a      	movgt	r2, r7
 800edd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800edd4:	465a      	movle	r2, fp
 800edd6:	4659      	mov	r1, fp
 800edd8:	463d      	mov	r5, r7
 800edda:	bfd4      	ite	le
 800eddc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ede0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800ede4:	4630      	mov	r0, r6
 800ede6:	ee10 2a10 	vmov	r2, s0
 800edea:	460b      	mov	r3, r1
 800edec:	4629      	mov	r1, r5
 800edee:	f7f1 fd35 	bl	800085c <__aeabi_ddiv>
 800edf2:	ec41 0b10 	vmov	d0, r0, r1
 800edf6:	b003      	add	sp, #12
 800edf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800edfc <__copybits>:
 800edfc:	3901      	subs	r1, #1
 800edfe:	b510      	push	{r4, lr}
 800ee00:	1149      	asrs	r1, r1, #5
 800ee02:	6914      	ldr	r4, [r2, #16]
 800ee04:	3101      	adds	r1, #1
 800ee06:	f102 0314 	add.w	r3, r2, #20
 800ee0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee12:	42a3      	cmp	r3, r4
 800ee14:	4602      	mov	r2, r0
 800ee16:	d303      	bcc.n	800ee20 <__copybits+0x24>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	428a      	cmp	r2, r1
 800ee1c:	d305      	bcc.n	800ee2a <__copybits+0x2e>
 800ee1e:	bd10      	pop	{r4, pc}
 800ee20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee24:	f840 2b04 	str.w	r2, [r0], #4
 800ee28:	e7f3      	b.n	800ee12 <__copybits+0x16>
 800ee2a:	f842 3b04 	str.w	r3, [r2], #4
 800ee2e:	e7f4      	b.n	800ee1a <__copybits+0x1e>

0800ee30 <__any_on>:
 800ee30:	f100 0214 	add.w	r2, r0, #20
 800ee34:	6900      	ldr	r0, [r0, #16]
 800ee36:	114b      	asrs	r3, r1, #5
 800ee38:	4298      	cmp	r0, r3
 800ee3a:	b510      	push	{r4, lr}
 800ee3c:	db11      	blt.n	800ee62 <__any_on+0x32>
 800ee3e:	dd0a      	ble.n	800ee56 <__any_on+0x26>
 800ee40:	f011 011f 	ands.w	r1, r1, #31
 800ee44:	d007      	beq.n	800ee56 <__any_on+0x26>
 800ee46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee4a:	fa24 f001 	lsr.w	r0, r4, r1
 800ee4e:	fa00 f101 	lsl.w	r1, r0, r1
 800ee52:	428c      	cmp	r4, r1
 800ee54:	d10b      	bne.n	800ee6e <__any_on+0x3e>
 800ee56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d803      	bhi.n	800ee66 <__any_on+0x36>
 800ee5e:	2000      	movs	r0, #0
 800ee60:	bd10      	pop	{r4, pc}
 800ee62:	4603      	mov	r3, r0
 800ee64:	e7f7      	b.n	800ee56 <__any_on+0x26>
 800ee66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee6a:	2900      	cmp	r1, #0
 800ee6c:	d0f5      	beq.n	800ee5a <__any_on+0x2a>
 800ee6e:	2001      	movs	r0, #1
 800ee70:	e7f6      	b.n	800ee60 <__any_on+0x30>

0800ee72 <_calloc_r>:
 800ee72:	b538      	push	{r3, r4, r5, lr}
 800ee74:	fb02 f401 	mul.w	r4, r2, r1
 800ee78:	4621      	mov	r1, r4
 800ee7a:	f7fc f903 	bl	800b084 <_malloc_r>
 800ee7e:	4605      	mov	r5, r0
 800ee80:	b118      	cbz	r0, 800ee8a <_calloc_r+0x18>
 800ee82:	4622      	mov	r2, r4
 800ee84:	2100      	movs	r1, #0
 800ee86:	f7fc f8a7 	bl	800afd8 <memset>
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	bd38      	pop	{r3, r4, r5, pc}

0800ee8e <__ssputs_r>:
 800ee8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee92:	688e      	ldr	r6, [r1, #8]
 800ee94:	429e      	cmp	r6, r3
 800ee96:	4682      	mov	sl, r0
 800ee98:	460c      	mov	r4, r1
 800ee9a:	4690      	mov	r8, r2
 800ee9c:	4699      	mov	r9, r3
 800ee9e:	d837      	bhi.n	800ef10 <__ssputs_r+0x82>
 800eea0:	898a      	ldrh	r2, [r1, #12]
 800eea2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eea6:	d031      	beq.n	800ef0c <__ssputs_r+0x7e>
 800eea8:	6825      	ldr	r5, [r4, #0]
 800eeaa:	6909      	ldr	r1, [r1, #16]
 800eeac:	1a6f      	subs	r7, r5, r1
 800eeae:	6965      	ldr	r5, [r4, #20]
 800eeb0:	2302      	movs	r3, #2
 800eeb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eeb6:	fb95 f5f3 	sdiv	r5, r5, r3
 800eeba:	f109 0301 	add.w	r3, r9, #1
 800eebe:	443b      	add	r3, r7
 800eec0:	429d      	cmp	r5, r3
 800eec2:	bf38      	it	cc
 800eec4:	461d      	movcc	r5, r3
 800eec6:	0553      	lsls	r3, r2, #21
 800eec8:	d530      	bpl.n	800ef2c <__ssputs_r+0x9e>
 800eeca:	4629      	mov	r1, r5
 800eecc:	f7fc f8da 	bl	800b084 <_malloc_r>
 800eed0:	4606      	mov	r6, r0
 800eed2:	b950      	cbnz	r0, 800eeea <__ssputs_r+0x5c>
 800eed4:	230c      	movs	r3, #12
 800eed6:	f8ca 3000 	str.w	r3, [sl]
 800eeda:	89a3      	ldrh	r3, [r4, #12]
 800eedc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eee0:	81a3      	strh	r3, [r4, #12]
 800eee2:	f04f 30ff 	mov.w	r0, #4294967295
 800eee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeea:	463a      	mov	r2, r7
 800eeec:	6921      	ldr	r1, [r4, #16]
 800eeee:	f7ff fbb5 	bl	800e65c <memcpy>
 800eef2:	89a3      	ldrh	r3, [r4, #12]
 800eef4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eefc:	81a3      	strh	r3, [r4, #12]
 800eefe:	6126      	str	r6, [r4, #16]
 800ef00:	6165      	str	r5, [r4, #20]
 800ef02:	443e      	add	r6, r7
 800ef04:	1bed      	subs	r5, r5, r7
 800ef06:	6026      	str	r6, [r4, #0]
 800ef08:	60a5      	str	r5, [r4, #8]
 800ef0a:	464e      	mov	r6, r9
 800ef0c:	454e      	cmp	r6, r9
 800ef0e:	d900      	bls.n	800ef12 <__ssputs_r+0x84>
 800ef10:	464e      	mov	r6, r9
 800ef12:	4632      	mov	r2, r6
 800ef14:	4641      	mov	r1, r8
 800ef16:	6820      	ldr	r0, [r4, #0]
 800ef18:	f000 fe9a 	bl	800fc50 <memmove>
 800ef1c:	68a3      	ldr	r3, [r4, #8]
 800ef1e:	1b9b      	subs	r3, r3, r6
 800ef20:	60a3      	str	r3, [r4, #8]
 800ef22:	6823      	ldr	r3, [r4, #0]
 800ef24:	441e      	add	r6, r3
 800ef26:	6026      	str	r6, [r4, #0]
 800ef28:	2000      	movs	r0, #0
 800ef2a:	e7dc      	b.n	800eee6 <__ssputs_r+0x58>
 800ef2c:	462a      	mov	r2, r5
 800ef2e:	f000 fea8 	bl	800fc82 <_realloc_r>
 800ef32:	4606      	mov	r6, r0
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d1e2      	bne.n	800eefe <__ssputs_r+0x70>
 800ef38:	6921      	ldr	r1, [r4, #16]
 800ef3a:	4650      	mov	r0, sl
 800ef3c:	f7fc f854 	bl	800afe8 <_free_r>
 800ef40:	e7c8      	b.n	800eed4 <__ssputs_r+0x46>
	...

0800ef44 <_svfiprintf_r>:
 800ef44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef48:	461d      	mov	r5, r3
 800ef4a:	898b      	ldrh	r3, [r1, #12]
 800ef4c:	061f      	lsls	r7, r3, #24
 800ef4e:	b09d      	sub	sp, #116	; 0x74
 800ef50:	4680      	mov	r8, r0
 800ef52:	460c      	mov	r4, r1
 800ef54:	4616      	mov	r6, r2
 800ef56:	d50f      	bpl.n	800ef78 <_svfiprintf_r+0x34>
 800ef58:	690b      	ldr	r3, [r1, #16]
 800ef5a:	b96b      	cbnz	r3, 800ef78 <_svfiprintf_r+0x34>
 800ef5c:	2140      	movs	r1, #64	; 0x40
 800ef5e:	f7fc f891 	bl	800b084 <_malloc_r>
 800ef62:	6020      	str	r0, [r4, #0]
 800ef64:	6120      	str	r0, [r4, #16]
 800ef66:	b928      	cbnz	r0, 800ef74 <_svfiprintf_r+0x30>
 800ef68:	230c      	movs	r3, #12
 800ef6a:	f8c8 3000 	str.w	r3, [r8]
 800ef6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef72:	e0c8      	b.n	800f106 <_svfiprintf_r+0x1c2>
 800ef74:	2340      	movs	r3, #64	; 0x40
 800ef76:	6163      	str	r3, [r4, #20]
 800ef78:	2300      	movs	r3, #0
 800ef7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef7c:	2320      	movs	r3, #32
 800ef7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef82:	2330      	movs	r3, #48	; 0x30
 800ef84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef88:	9503      	str	r5, [sp, #12]
 800ef8a:	f04f 0b01 	mov.w	fp, #1
 800ef8e:	4637      	mov	r7, r6
 800ef90:	463d      	mov	r5, r7
 800ef92:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ef96:	b10b      	cbz	r3, 800ef9c <_svfiprintf_r+0x58>
 800ef98:	2b25      	cmp	r3, #37	; 0x25
 800ef9a:	d13e      	bne.n	800f01a <_svfiprintf_r+0xd6>
 800ef9c:	ebb7 0a06 	subs.w	sl, r7, r6
 800efa0:	d00b      	beq.n	800efba <_svfiprintf_r+0x76>
 800efa2:	4653      	mov	r3, sl
 800efa4:	4632      	mov	r2, r6
 800efa6:	4621      	mov	r1, r4
 800efa8:	4640      	mov	r0, r8
 800efaa:	f7ff ff70 	bl	800ee8e <__ssputs_r>
 800efae:	3001      	adds	r0, #1
 800efb0:	f000 80a4 	beq.w	800f0fc <_svfiprintf_r+0x1b8>
 800efb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb6:	4453      	add	r3, sl
 800efb8:	9309      	str	r3, [sp, #36]	; 0x24
 800efba:	783b      	ldrb	r3, [r7, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f000 809d 	beq.w	800f0fc <_svfiprintf_r+0x1b8>
 800efc2:	2300      	movs	r3, #0
 800efc4:	f04f 32ff 	mov.w	r2, #4294967295
 800efc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efcc:	9304      	str	r3, [sp, #16]
 800efce:	9307      	str	r3, [sp, #28]
 800efd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efd4:	931a      	str	r3, [sp, #104]	; 0x68
 800efd6:	462f      	mov	r7, r5
 800efd8:	2205      	movs	r2, #5
 800efda:	f817 1b01 	ldrb.w	r1, [r7], #1
 800efde:	4850      	ldr	r0, [pc, #320]	; (800f120 <_svfiprintf_r+0x1dc>)
 800efe0:	f7f1 f906 	bl	80001f0 <memchr>
 800efe4:	9b04      	ldr	r3, [sp, #16]
 800efe6:	b9d0      	cbnz	r0, 800f01e <_svfiprintf_r+0xda>
 800efe8:	06d9      	lsls	r1, r3, #27
 800efea:	bf44      	itt	mi
 800efec:	2220      	movmi	r2, #32
 800efee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eff2:	071a      	lsls	r2, r3, #28
 800eff4:	bf44      	itt	mi
 800eff6:	222b      	movmi	r2, #43	; 0x2b
 800eff8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800effc:	782a      	ldrb	r2, [r5, #0]
 800effe:	2a2a      	cmp	r2, #42	; 0x2a
 800f000:	d015      	beq.n	800f02e <_svfiprintf_r+0xea>
 800f002:	9a07      	ldr	r2, [sp, #28]
 800f004:	462f      	mov	r7, r5
 800f006:	2000      	movs	r0, #0
 800f008:	250a      	movs	r5, #10
 800f00a:	4639      	mov	r1, r7
 800f00c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f010:	3b30      	subs	r3, #48	; 0x30
 800f012:	2b09      	cmp	r3, #9
 800f014:	d94d      	bls.n	800f0b2 <_svfiprintf_r+0x16e>
 800f016:	b1b8      	cbz	r0, 800f048 <_svfiprintf_r+0x104>
 800f018:	e00f      	b.n	800f03a <_svfiprintf_r+0xf6>
 800f01a:	462f      	mov	r7, r5
 800f01c:	e7b8      	b.n	800ef90 <_svfiprintf_r+0x4c>
 800f01e:	4a40      	ldr	r2, [pc, #256]	; (800f120 <_svfiprintf_r+0x1dc>)
 800f020:	1a80      	subs	r0, r0, r2
 800f022:	fa0b f000 	lsl.w	r0, fp, r0
 800f026:	4318      	orrs	r0, r3
 800f028:	9004      	str	r0, [sp, #16]
 800f02a:	463d      	mov	r5, r7
 800f02c:	e7d3      	b.n	800efd6 <_svfiprintf_r+0x92>
 800f02e:	9a03      	ldr	r2, [sp, #12]
 800f030:	1d11      	adds	r1, r2, #4
 800f032:	6812      	ldr	r2, [r2, #0]
 800f034:	9103      	str	r1, [sp, #12]
 800f036:	2a00      	cmp	r2, #0
 800f038:	db01      	blt.n	800f03e <_svfiprintf_r+0xfa>
 800f03a:	9207      	str	r2, [sp, #28]
 800f03c:	e004      	b.n	800f048 <_svfiprintf_r+0x104>
 800f03e:	4252      	negs	r2, r2
 800f040:	f043 0302 	orr.w	r3, r3, #2
 800f044:	9207      	str	r2, [sp, #28]
 800f046:	9304      	str	r3, [sp, #16]
 800f048:	783b      	ldrb	r3, [r7, #0]
 800f04a:	2b2e      	cmp	r3, #46	; 0x2e
 800f04c:	d10c      	bne.n	800f068 <_svfiprintf_r+0x124>
 800f04e:	787b      	ldrb	r3, [r7, #1]
 800f050:	2b2a      	cmp	r3, #42	; 0x2a
 800f052:	d133      	bne.n	800f0bc <_svfiprintf_r+0x178>
 800f054:	9b03      	ldr	r3, [sp, #12]
 800f056:	1d1a      	adds	r2, r3, #4
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	9203      	str	r2, [sp, #12]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	bfb8      	it	lt
 800f060:	f04f 33ff 	movlt.w	r3, #4294967295
 800f064:	3702      	adds	r7, #2
 800f066:	9305      	str	r3, [sp, #20]
 800f068:	4d2e      	ldr	r5, [pc, #184]	; (800f124 <_svfiprintf_r+0x1e0>)
 800f06a:	7839      	ldrb	r1, [r7, #0]
 800f06c:	2203      	movs	r2, #3
 800f06e:	4628      	mov	r0, r5
 800f070:	f7f1 f8be 	bl	80001f0 <memchr>
 800f074:	b138      	cbz	r0, 800f086 <_svfiprintf_r+0x142>
 800f076:	2340      	movs	r3, #64	; 0x40
 800f078:	1b40      	subs	r0, r0, r5
 800f07a:	fa03 f000 	lsl.w	r0, r3, r0
 800f07e:	9b04      	ldr	r3, [sp, #16]
 800f080:	4303      	orrs	r3, r0
 800f082:	3701      	adds	r7, #1
 800f084:	9304      	str	r3, [sp, #16]
 800f086:	7839      	ldrb	r1, [r7, #0]
 800f088:	4827      	ldr	r0, [pc, #156]	; (800f128 <_svfiprintf_r+0x1e4>)
 800f08a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f08e:	2206      	movs	r2, #6
 800f090:	1c7e      	adds	r6, r7, #1
 800f092:	f7f1 f8ad 	bl	80001f0 <memchr>
 800f096:	2800      	cmp	r0, #0
 800f098:	d038      	beq.n	800f10c <_svfiprintf_r+0x1c8>
 800f09a:	4b24      	ldr	r3, [pc, #144]	; (800f12c <_svfiprintf_r+0x1e8>)
 800f09c:	bb13      	cbnz	r3, 800f0e4 <_svfiprintf_r+0x1a0>
 800f09e:	9b03      	ldr	r3, [sp, #12]
 800f0a0:	3307      	adds	r3, #7
 800f0a2:	f023 0307 	bic.w	r3, r3, #7
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	9303      	str	r3, [sp, #12]
 800f0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0ac:	444b      	add	r3, r9
 800f0ae:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b0:	e76d      	b.n	800ef8e <_svfiprintf_r+0x4a>
 800f0b2:	fb05 3202 	mla	r2, r5, r2, r3
 800f0b6:	2001      	movs	r0, #1
 800f0b8:	460f      	mov	r7, r1
 800f0ba:	e7a6      	b.n	800f00a <_svfiprintf_r+0xc6>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	3701      	adds	r7, #1
 800f0c0:	9305      	str	r3, [sp, #20]
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	250a      	movs	r5, #10
 800f0c6:	4638      	mov	r0, r7
 800f0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0cc:	3a30      	subs	r2, #48	; 0x30
 800f0ce:	2a09      	cmp	r2, #9
 800f0d0:	d903      	bls.n	800f0da <_svfiprintf_r+0x196>
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d0c8      	beq.n	800f068 <_svfiprintf_r+0x124>
 800f0d6:	9105      	str	r1, [sp, #20]
 800f0d8:	e7c6      	b.n	800f068 <_svfiprintf_r+0x124>
 800f0da:	fb05 2101 	mla	r1, r5, r1, r2
 800f0de:	2301      	movs	r3, #1
 800f0e0:	4607      	mov	r7, r0
 800f0e2:	e7f0      	b.n	800f0c6 <_svfiprintf_r+0x182>
 800f0e4:	ab03      	add	r3, sp, #12
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	4622      	mov	r2, r4
 800f0ea:	4b11      	ldr	r3, [pc, #68]	; (800f130 <_svfiprintf_r+0x1ec>)
 800f0ec:	a904      	add	r1, sp, #16
 800f0ee:	4640      	mov	r0, r8
 800f0f0:	f7fc f8b6 	bl	800b260 <_printf_float>
 800f0f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f0f8:	4681      	mov	r9, r0
 800f0fa:	d1d6      	bne.n	800f0aa <_svfiprintf_r+0x166>
 800f0fc:	89a3      	ldrh	r3, [r4, #12]
 800f0fe:	065b      	lsls	r3, r3, #25
 800f100:	f53f af35 	bmi.w	800ef6e <_svfiprintf_r+0x2a>
 800f104:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f106:	b01d      	add	sp, #116	; 0x74
 800f108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10c:	ab03      	add	r3, sp, #12
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	4622      	mov	r2, r4
 800f112:	4b07      	ldr	r3, [pc, #28]	; (800f130 <_svfiprintf_r+0x1ec>)
 800f114:	a904      	add	r1, sp, #16
 800f116:	4640      	mov	r0, r8
 800f118:	f7fc fb58 	bl	800b7cc <_printf_i>
 800f11c:	e7ea      	b.n	800f0f4 <_svfiprintf_r+0x1b0>
 800f11e:	bf00      	nop
 800f120:	08012c1c 	.word	0x08012c1c
 800f124:	08012c22 	.word	0x08012c22
 800f128:	08012c26 	.word	0x08012c26
 800f12c:	0800b261 	.word	0x0800b261
 800f130:	0800ee8f 	.word	0x0800ee8f

0800f134 <_sungetc_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	1c4b      	adds	r3, r1, #1
 800f138:	4614      	mov	r4, r2
 800f13a:	d103      	bne.n	800f144 <_sungetc_r+0x10>
 800f13c:	f04f 35ff 	mov.w	r5, #4294967295
 800f140:	4628      	mov	r0, r5
 800f142:	bd38      	pop	{r3, r4, r5, pc}
 800f144:	8993      	ldrh	r3, [r2, #12]
 800f146:	f023 0320 	bic.w	r3, r3, #32
 800f14a:	8193      	strh	r3, [r2, #12]
 800f14c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f14e:	6852      	ldr	r2, [r2, #4]
 800f150:	b2cd      	uxtb	r5, r1
 800f152:	b18b      	cbz	r3, 800f178 <_sungetc_r+0x44>
 800f154:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f156:	4293      	cmp	r3, r2
 800f158:	dd08      	ble.n	800f16c <_sungetc_r+0x38>
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	1e5a      	subs	r2, r3, #1
 800f15e:	6022      	str	r2, [r4, #0]
 800f160:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f164:	6863      	ldr	r3, [r4, #4]
 800f166:	3301      	adds	r3, #1
 800f168:	6063      	str	r3, [r4, #4]
 800f16a:	e7e9      	b.n	800f140 <_sungetc_r+0xc>
 800f16c:	4621      	mov	r1, r4
 800f16e:	f000 fd05 	bl	800fb7c <__submore>
 800f172:	2800      	cmp	r0, #0
 800f174:	d0f1      	beq.n	800f15a <_sungetc_r+0x26>
 800f176:	e7e1      	b.n	800f13c <_sungetc_r+0x8>
 800f178:	6921      	ldr	r1, [r4, #16]
 800f17a:	6823      	ldr	r3, [r4, #0]
 800f17c:	b151      	cbz	r1, 800f194 <_sungetc_r+0x60>
 800f17e:	4299      	cmp	r1, r3
 800f180:	d208      	bcs.n	800f194 <_sungetc_r+0x60>
 800f182:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f186:	42a9      	cmp	r1, r5
 800f188:	d104      	bne.n	800f194 <_sungetc_r+0x60>
 800f18a:	3b01      	subs	r3, #1
 800f18c:	3201      	adds	r2, #1
 800f18e:	6023      	str	r3, [r4, #0]
 800f190:	6062      	str	r2, [r4, #4]
 800f192:	e7d5      	b.n	800f140 <_sungetc_r+0xc>
 800f194:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f19c:	6363      	str	r3, [r4, #52]	; 0x34
 800f19e:	2303      	movs	r3, #3
 800f1a0:	63a3      	str	r3, [r4, #56]	; 0x38
 800f1a2:	4623      	mov	r3, r4
 800f1a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f1a8:	6023      	str	r3, [r4, #0]
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e7dc      	b.n	800f168 <_sungetc_r+0x34>

0800f1ae <__ssrefill_r>:
 800f1ae:	b510      	push	{r4, lr}
 800f1b0:	460c      	mov	r4, r1
 800f1b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f1b4:	b169      	cbz	r1, 800f1d2 <__ssrefill_r+0x24>
 800f1b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1ba:	4299      	cmp	r1, r3
 800f1bc:	d001      	beq.n	800f1c2 <__ssrefill_r+0x14>
 800f1be:	f7fb ff13 	bl	800afe8 <_free_r>
 800f1c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1c4:	6063      	str	r3, [r4, #4]
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	6360      	str	r0, [r4, #52]	; 0x34
 800f1ca:	b113      	cbz	r3, 800f1d2 <__ssrefill_r+0x24>
 800f1cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f1ce:	6023      	str	r3, [r4, #0]
 800f1d0:	bd10      	pop	{r4, pc}
 800f1d2:	6923      	ldr	r3, [r4, #16]
 800f1d4:	6023      	str	r3, [r4, #0]
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	6063      	str	r3, [r4, #4]
 800f1da:	89a3      	ldrh	r3, [r4, #12]
 800f1dc:	f043 0320 	orr.w	r3, r3, #32
 800f1e0:	81a3      	strh	r3, [r4, #12]
 800f1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e6:	e7f3      	b.n	800f1d0 <__ssrefill_r+0x22>

0800f1e8 <__ssvfiscanf_r>:
 800f1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ec:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800f1f0:	460c      	mov	r4, r1
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	9144      	str	r1, [sp, #272]	; 0x110
 800f1f6:	9145      	str	r1, [sp, #276]	; 0x114
 800f1f8:	499f      	ldr	r1, [pc, #636]	; (800f478 <__ssvfiscanf_r+0x290>)
 800f1fa:	91a0      	str	r1, [sp, #640]	; 0x280
 800f1fc:	f10d 0804 	add.w	r8, sp, #4
 800f200:	499e      	ldr	r1, [pc, #632]	; (800f47c <__ssvfiscanf_r+0x294>)
 800f202:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800f480 <__ssvfiscanf_r+0x298>
 800f206:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f20a:	4606      	mov	r6, r0
 800f20c:	4692      	mov	sl, r2
 800f20e:	91a1      	str	r1, [sp, #644]	; 0x284
 800f210:	9300      	str	r3, [sp, #0]
 800f212:	270a      	movs	r7, #10
 800f214:	f89a 3000 	ldrb.w	r3, [sl]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f000 812a 	beq.w	800f472 <__ssvfiscanf_r+0x28a>
 800f21e:	4655      	mov	r5, sl
 800f220:	f7ff f976 	bl	800e510 <__locale_ctype_ptr>
 800f224:	f815 bb01 	ldrb.w	fp, [r5], #1
 800f228:	4458      	add	r0, fp
 800f22a:	7843      	ldrb	r3, [r0, #1]
 800f22c:	f013 0308 	ands.w	r3, r3, #8
 800f230:	d01c      	beq.n	800f26c <__ssvfiscanf_r+0x84>
 800f232:	6863      	ldr	r3, [r4, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	dd12      	ble.n	800f25e <__ssvfiscanf_r+0x76>
 800f238:	f7ff f96a 	bl	800e510 <__locale_ctype_ptr>
 800f23c:	6823      	ldr	r3, [r4, #0]
 800f23e:	781a      	ldrb	r2, [r3, #0]
 800f240:	4410      	add	r0, r2
 800f242:	7842      	ldrb	r2, [r0, #1]
 800f244:	0712      	lsls	r2, r2, #28
 800f246:	d401      	bmi.n	800f24c <__ssvfiscanf_r+0x64>
 800f248:	46aa      	mov	sl, r5
 800f24a:	e7e3      	b.n	800f214 <__ssvfiscanf_r+0x2c>
 800f24c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f24e:	3201      	adds	r2, #1
 800f250:	9245      	str	r2, [sp, #276]	; 0x114
 800f252:	6862      	ldr	r2, [r4, #4]
 800f254:	3301      	adds	r3, #1
 800f256:	3a01      	subs	r2, #1
 800f258:	6062      	str	r2, [r4, #4]
 800f25a:	6023      	str	r3, [r4, #0]
 800f25c:	e7e9      	b.n	800f232 <__ssvfiscanf_r+0x4a>
 800f25e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f260:	4621      	mov	r1, r4
 800f262:	4630      	mov	r0, r6
 800f264:	4798      	blx	r3
 800f266:	2800      	cmp	r0, #0
 800f268:	d0e6      	beq.n	800f238 <__ssvfiscanf_r+0x50>
 800f26a:	e7ed      	b.n	800f248 <__ssvfiscanf_r+0x60>
 800f26c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800f270:	f040 8082 	bne.w	800f378 <__ssvfiscanf_r+0x190>
 800f274:	9343      	str	r3, [sp, #268]	; 0x10c
 800f276:	9341      	str	r3, [sp, #260]	; 0x104
 800f278:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800f27c:	2b2a      	cmp	r3, #42	; 0x2a
 800f27e:	d103      	bne.n	800f288 <__ssvfiscanf_r+0xa0>
 800f280:	2310      	movs	r3, #16
 800f282:	9341      	str	r3, [sp, #260]	; 0x104
 800f284:	f10a 0502 	add.w	r5, sl, #2
 800f288:	46aa      	mov	sl, r5
 800f28a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800f28e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f292:	2a09      	cmp	r2, #9
 800f294:	d922      	bls.n	800f2dc <__ssvfiscanf_r+0xf4>
 800f296:	2203      	movs	r2, #3
 800f298:	4879      	ldr	r0, [pc, #484]	; (800f480 <__ssvfiscanf_r+0x298>)
 800f29a:	f7f0 ffa9 	bl	80001f0 <memchr>
 800f29e:	b138      	cbz	r0, 800f2b0 <__ssvfiscanf_r+0xc8>
 800f2a0:	eba0 0309 	sub.w	r3, r0, r9
 800f2a4:	2001      	movs	r0, #1
 800f2a6:	4098      	lsls	r0, r3
 800f2a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f2aa:	4318      	orrs	r0, r3
 800f2ac:	9041      	str	r0, [sp, #260]	; 0x104
 800f2ae:	46aa      	mov	sl, r5
 800f2b0:	f89a 3000 	ldrb.w	r3, [sl]
 800f2b4:	2b67      	cmp	r3, #103	; 0x67
 800f2b6:	f10a 0501 	add.w	r5, sl, #1
 800f2ba:	d82b      	bhi.n	800f314 <__ssvfiscanf_r+0x12c>
 800f2bc:	2b65      	cmp	r3, #101	; 0x65
 800f2be:	f080 809f 	bcs.w	800f400 <__ssvfiscanf_r+0x218>
 800f2c2:	2b47      	cmp	r3, #71	; 0x47
 800f2c4:	d810      	bhi.n	800f2e8 <__ssvfiscanf_r+0x100>
 800f2c6:	2b45      	cmp	r3, #69	; 0x45
 800f2c8:	f080 809a 	bcs.w	800f400 <__ssvfiscanf_r+0x218>
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d06c      	beq.n	800f3aa <__ssvfiscanf_r+0x1c2>
 800f2d0:	2b25      	cmp	r3, #37	; 0x25
 800f2d2:	d051      	beq.n	800f378 <__ssvfiscanf_r+0x190>
 800f2d4:	2303      	movs	r3, #3
 800f2d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800f2d8:	9742      	str	r7, [sp, #264]	; 0x108
 800f2da:	e027      	b.n	800f32c <__ssvfiscanf_r+0x144>
 800f2dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f2de:	fb07 1303 	mla	r3, r7, r3, r1
 800f2e2:	3b30      	subs	r3, #48	; 0x30
 800f2e4:	9343      	str	r3, [sp, #268]	; 0x10c
 800f2e6:	e7cf      	b.n	800f288 <__ssvfiscanf_r+0xa0>
 800f2e8:	2b5b      	cmp	r3, #91	; 0x5b
 800f2ea:	d06a      	beq.n	800f3c2 <__ssvfiscanf_r+0x1da>
 800f2ec:	d80c      	bhi.n	800f308 <__ssvfiscanf_r+0x120>
 800f2ee:	2b58      	cmp	r3, #88	; 0x58
 800f2f0:	d1f0      	bne.n	800f2d4 <__ssvfiscanf_r+0xec>
 800f2f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f2f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2f8:	9241      	str	r2, [sp, #260]	; 0x104
 800f2fa:	2210      	movs	r2, #16
 800f2fc:	9242      	str	r2, [sp, #264]	; 0x108
 800f2fe:	2b6e      	cmp	r3, #110	; 0x6e
 800f300:	bf8c      	ite	hi
 800f302:	2304      	movhi	r3, #4
 800f304:	2303      	movls	r3, #3
 800f306:	e010      	b.n	800f32a <__ssvfiscanf_r+0x142>
 800f308:	2b63      	cmp	r3, #99	; 0x63
 800f30a:	d065      	beq.n	800f3d8 <__ssvfiscanf_r+0x1f0>
 800f30c:	2b64      	cmp	r3, #100	; 0x64
 800f30e:	d1e1      	bne.n	800f2d4 <__ssvfiscanf_r+0xec>
 800f310:	9742      	str	r7, [sp, #264]	; 0x108
 800f312:	e7f4      	b.n	800f2fe <__ssvfiscanf_r+0x116>
 800f314:	2b70      	cmp	r3, #112	; 0x70
 800f316:	d04b      	beq.n	800f3b0 <__ssvfiscanf_r+0x1c8>
 800f318:	d826      	bhi.n	800f368 <__ssvfiscanf_r+0x180>
 800f31a:	2b6e      	cmp	r3, #110	; 0x6e
 800f31c:	d062      	beq.n	800f3e4 <__ssvfiscanf_r+0x1fc>
 800f31e:	d84c      	bhi.n	800f3ba <__ssvfiscanf_r+0x1d2>
 800f320:	2b69      	cmp	r3, #105	; 0x69
 800f322:	d1d7      	bne.n	800f2d4 <__ssvfiscanf_r+0xec>
 800f324:	2300      	movs	r3, #0
 800f326:	9342      	str	r3, [sp, #264]	; 0x108
 800f328:	2303      	movs	r3, #3
 800f32a:	9347      	str	r3, [sp, #284]	; 0x11c
 800f32c:	6863      	ldr	r3, [r4, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	dd68      	ble.n	800f404 <__ssvfiscanf_r+0x21c>
 800f332:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f334:	0659      	lsls	r1, r3, #25
 800f336:	d407      	bmi.n	800f348 <__ssvfiscanf_r+0x160>
 800f338:	f7ff f8ea 	bl	800e510 <__locale_ctype_ptr>
 800f33c:	6823      	ldr	r3, [r4, #0]
 800f33e:	781a      	ldrb	r2, [r3, #0]
 800f340:	4410      	add	r0, r2
 800f342:	7842      	ldrb	r2, [r0, #1]
 800f344:	0712      	lsls	r2, r2, #28
 800f346:	d464      	bmi.n	800f412 <__ssvfiscanf_r+0x22a>
 800f348:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f34a:	2b02      	cmp	r3, #2
 800f34c:	dc73      	bgt.n	800f436 <__ssvfiscanf_r+0x24e>
 800f34e:	466b      	mov	r3, sp
 800f350:	4622      	mov	r2, r4
 800f352:	a941      	add	r1, sp, #260	; 0x104
 800f354:	4630      	mov	r0, r6
 800f356:	f000 f9d7 	bl	800f708 <_scanf_chars>
 800f35a:	2801      	cmp	r0, #1
 800f35c:	f000 8089 	beq.w	800f472 <__ssvfiscanf_r+0x28a>
 800f360:	2802      	cmp	r0, #2
 800f362:	f47f af71 	bne.w	800f248 <__ssvfiscanf_r+0x60>
 800f366:	e01d      	b.n	800f3a4 <__ssvfiscanf_r+0x1bc>
 800f368:	2b75      	cmp	r3, #117	; 0x75
 800f36a:	d0d1      	beq.n	800f310 <__ssvfiscanf_r+0x128>
 800f36c:	2b78      	cmp	r3, #120	; 0x78
 800f36e:	d0c0      	beq.n	800f2f2 <__ssvfiscanf_r+0x10a>
 800f370:	2b73      	cmp	r3, #115	; 0x73
 800f372:	d1af      	bne.n	800f2d4 <__ssvfiscanf_r+0xec>
 800f374:	2302      	movs	r3, #2
 800f376:	e7d8      	b.n	800f32a <__ssvfiscanf_r+0x142>
 800f378:	6863      	ldr	r3, [r4, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	dd0c      	ble.n	800f398 <__ssvfiscanf_r+0x1b0>
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	781a      	ldrb	r2, [r3, #0]
 800f382:	455a      	cmp	r2, fp
 800f384:	d175      	bne.n	800f472 <__ssvfiscanf_r+0x28a>
 800f386:	3301      	adds	r3, #1
 800f388:	6862      	ldr	r2, [r4, #4]
 800f38a:	6023      	str	r3, [r4, #0]
 800f38c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f38e:	3a01      	subs	r2, #1
 800f390:	3301      	adds	r3, #1
 800f392:	6062      	str	r2, [r4, #4]
 800f394:	9345      	str	r3, [sp, #276]	; 0x114
 800f396:	e757      	b.n	800f248 <__ssvfiscanf_r+0x60>
 800f398:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f39a:	4621      	mov	r1, r4
 800f39c:	4630      	mov	r0, r6
 800f39e:	4798      	blx	r3
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d0ec      	beq.n	800f37e <__ssvfiscanf_r+0x196>
 800f3a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d159      	bne.n	800f45e <__ssvfiscanf_r+0x276>
 800f3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ae:	e05c      	b.n	800f46a <__ssvfiscanf_r+0x282>
 800f3b0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f3b2:	f042 0220 	orr.w	r2, r2, #32
 800f3b6:	9241      	str	r2, [sp, #260]	; 0x104
 800f3b8:	e79b      	b.n	800f2f2 <__ssvfiscanf_r+0x10a>
 800f3ba:	2308      	movs	r3, #8
 800f3bc:	9342      	str	r3, [sp, #264]	; 0x108
 800f3be:	2304      	movs	r3, #4
 800f3c0:	e7b3      	b.n	800f32a <__ssvfiscanf_r+0x142>
 800f3c2:	4629      	mov	r1, r5
 800f3c4:	4640      	mov	r0, r8
 800f3c6:	f000 fb09 	bl	800f9dc <__sccl>
 800f3ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f3cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3d0:	9341      	str	r3, [sp, #260]	; 0x104
 800f3d2:	4605      	mov	r5, r0
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e7a8      	b.n	800f32a <__ssvfiscanf_r+0x142>
 800f3d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3de:	9341      	str	r3, [sp, #260]	; 0x104
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	e7a2      	b.n	800f32a <__ssvfiscanf_r+0x142>
 800f3e4:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f3e6:	06c3      	lsls	r3, r0, #27
 800f3e8:	f53f af2e 	bmi.w	800f248 <__ssvfiscanf_r+0x60>
 800f3ec:	9b00      	ldr	r3, [sp, #0]
 800f3ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f3f0:	1d19      	adds	r1, r3, #4
 800f3f2:	9100      	str	r1, [sp, #0]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	07c0      	lsls	r0, r0, #31
 800f3f8:	bf4c      	ite	mi
 800f3fa:	801a      	strhmi	r2, [r3, #0]
 800f3fc:	601a      	strpl	r2, [r3, #0]
 800f3fe:	e723      	b.n	800f248 <__ssvfiscanf_r+0x60>
 800f400:	2305      	movs	r3, #5
 800f402:	e792      	b.n	800f32a <__ssvfiscanf_r+0x142>
 800f404:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f406:	4621      	mov	r1, r4
 800f408:	4630      	mov	r0, r6
 800f40a:	4798      	blx	r3
 800f40c:	2800      	cmp	r0, #0
 800f40e:	d090      	beq.n	800f332 <__ssvfiscanf_r+0x14a>
 800f410:	e7c8      	b.n	800f3a4 <__ssvfiscanf_r+0x1bc>
 800f412:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f414:	3201      	adds	r2, #1
 800f416:	9245      	str	r2, [sp, #276]	; 0x114
 800f418:	6862      	ldr	r2, [r4, #4]
 800f41a:	3a01      	subs	r2, #1
 800f41c:	2a00      	cmp	r2, #0
 800f41e:	6062      	str	r2, [r4, #4]
 800f420:	dd02      	ble.n	800f428 <__ssvfiscanf_r+0x240>
 800f422:	3301      	adds	r3, #1
 800f424:	6023      	str	r3, [r4, #0]
 800f426:	e787      	b.n	800f338 <__ssvfiscanf_r+0x150>
 800f428:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f42a:	4621      	mov	r1, r4
 800f42c:	4630      	mov	r0, r6
 800f42e:	4798      	blx	r3
 800f430:	2800      	cmp	r0, #0
 800f432:	d081      	beq.n	800f338 <__ssvfiscanf_r+0x150>
 800f434:	e7b6      	b.n	800f3a4 <__ssvfiscanf_r+0x1bc>
 800f436:	2b04      	cmp	r3, #4
 800f438:	dc06      	bgt.n	800f448 <__ssvfiscanf_r+0x260>
 800f43a:	466b      	mov	r3, sp
 800f43c:	4622      	mov	r2, r4
 800f43e:	a941      	add	r1, sp, #260	; 0x104
 800f440:	4630      	mov	r0, r6
 800f442:	f000 f9c5 	bl	800f7d0 <_scanf_i>
 800f446:	e788      	b.n	800f35a <__ssvfiscanf_r+0x172>
 800f448:	4b0e      	ldr	r3, [pc, #56]	; (800f484 <__ssvfiscanf_r+0x29c>)
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f43f aefc 	beq.w	800f248 <__ssvfiscanf_r+0x60>
 800f450:	466b      	mov	r3, sp
 800f452:	4622      	mov	r2, r4
 800f454:	a941      	add	r1, sp, #260	; 0x104
 800f456:	4630      	mov	r0, r6
 800f458:	f7fc faca 	bl	800b9f0 <_scanf_float>
 800f45c:	e77d      	b.n	800f35a <__ssvfiscanf_r+0x172>
 800f45e:	89a3      	ldrh	r3, [r4, #12]
 800f460:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f464:	bf18      	it	ne
 800f466:	f04f 30ff 	movne.w	r0, #4294967295
 800f46a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800f46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f472:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f474:	e7f9      	b.n	800f46a <__ssvfiscanf_r+0x282>
 800f476:	bf00      	nop
 800f478:	0800f135 	.word	0x0800f135
 800f47c:	0800f1af 	.word	0x0800f1af
 800f480:	08012c22 	.word	0x08012c22
 800f484:	0800b9f1 	.word	0x0800b9f1

0800f488 <__sfputc_r>:
 800f488:	6893      	ldr	r3, [r2, #8]
 800f48a:	3b01      	subs	r3, #1
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	b410      	push	{r4}
 800f490:	6093      	str	r3, [r2, #8]
 800f492:	da08      	bge.n	800f4a6 <__sfputc_r+0x1e>
 800f494:	6994      	ldr	r4, [r2, #24]
 800f496:	42a3      	cmp	r3, r4
 800f498:	db01      	blt.n	800f49e <__sfputc_r+0x16>
 800f49a:	290a      	cmp	r1, #10
 800f49c:	d103      	bne.n	800f4a6 <__sfputc_r+0x1e>
 800f49e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4a2:	f7fd bc6b 	b.w	800cd7c <__swbuf_r>
 800f4a6:	6813      	ldr	r3, [r2, #0]
 800f4a8:	1c58      	adds	r0, r3, #1
 800f4aa:	6010      	str	r0, [r2, #0]
 800f4ac:	7019      	strb	r1, [r3, #0]
 800f4ae:	4608      	mov	r0, r1
 800f4b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4b4:	4770      	bx	lr

0800f4b6 <__sfputs_r>:
 800f4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4b8:	4606      	mov	r6, r0
 800f4ba:	460f      	mov	r7, r1
 800f4bc:	4614      	mov	r4, r2
 800f4be:	18d5      	adds	r5, r2, r3
 800f4c0:	42ac      	cmp	r4, r5
 800f4c2:	d101      	bne.n	800f4c8 <__sfputs_r+0x12>
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	e007      	b.n	800f4d8 <__sfputs_r+0x22>
 800f4c8:	463a      	mov	r2, r7
 800f4ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	f7ff ffda 	bl	800f488 <__sfputc_r>
 800f4d4:	1c43      	adds	r3, r0, #1
 800f4d6:	d1f3      	bne.n	800f4c0 <__sfputs_r+0xa>
 800f4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4dc <_vfiprintf_r>:
 800f4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e0:	460c      	mov	r4, r1
 800f4e2:	b09d      	sub	sp, #116	; 0x74
 800f4e4:	4617      	mov	r7, r2
 800f4e6:	461d      	mov	r5, r3
 800f4e8:	4606      	mov	r6, r0
 800f4ea:	b118      	cbz	r0, 800f4f4 <_vfiprintf_r+0x18>
 800f4ec:	6983      	ldr	r3, [r0, #24]
 800f4ee:	b90b      	cbnz	r3, 800f4f4 <_vfiprintf_r+0x18>
 800f4f0:	f7fe fc5a 	bl	800dda8 <__sinit>
 800f4f4:	4b7c      	ldr	r3, [pc, #496]	; (800f6e8 <_vfiprintf_r+0x20c>)
 800f4f6:	429c      	cmp	r4, r3
 800f4f8:	d158      	bne.n	800f5ac <_vfiprintf_r+0xd0>
 800f4fa:	6874      	ldr	r4, [r6, #4]
 800f4fc:	89a3      	ldrh	r3, [r4, #12]
 800f4fe:	0718      	lsls	r0, r3, #28
 800f500:	d55e      	bpl.n	800f5c0 <_vfiprintf_r+0xe4>
 800f502:	6923      	ldr	r3, [r4, #16]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d05b      	beq.n	800f5c0 <_vfiprintf_r+0xe4>
 800f508:	2300      	movs	r3, #0
 800f50a:	9309      	str	r3, [sp, #36]	; 0x24
 800f50c:	2320      	movs	r3, #32
 800f50e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f512:	2330      	movs	r3, #48	; 0x30
 800f514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f518:	9503      	str	r5, [sp, #12]
 800f51a:	f04f 0b01 	mov.w	fp, #1
 800f51e:	46b8      	mov	r8, r7
 800f520:	4645      	mov	r5, r8
 800f522:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f526:	b10b      	cbz	r3, 800f52c <_vfiprintf_r+0x50>
 800f528:	2b25      	cmp	r3, #37	; 0x25
 800f52a:	d154      	bne.n	800f5d6 <_vfiprintf_r+0xfa>
 800f52c:	ebb8 0a07 	subs.w	sl, r8, r7
 800f530:	d00b      	beq.n	800f54a <_vfiprintf_r+0x6e>
 800f532:	4653      	mov	r3, sl
 800f534:	463a      	mov	r2, r7
 800f536:	4621      	mov	r1, r4
 800f538:	4630      	mov	r0, r6
 800f53a:	f7ff ffbc 	bl	800f4b6 <__sfputs_r>
 800f53e:	3001      	adds	r0, #1
 800f540:	f000 80c2 	beq.w	800f6c8 <_vfiprintf_r+0x1ec>
 800f544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f546:	4453      	add	r3, sl
 800f548:	9309      	str	r3, [sp, #36]	; 0x24
 800f54a:	f898 3000 	ldrb.w	r3, [r8]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f000 80ba 	beq.w	800f6c8 <_vfiprintf_r+0x1ec>
 800f554:	2300      	movs	r3, #0
 800f556:	f04f 32ff 	mov.w	r2, #4294967295
 800f55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f55e:	9304      	str	r3, [sp, #16]
 800f560:	9307      	str	r3, [sp, #28]
 800f562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f566:	931a      	str	r3, [sp, #104]	; 0x68
 800f568:	46a8      	mov	r8, r5
 800f56a:	2205      	movs	r2, #5
 800f56c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f570:	485e      	ldr	r0, [pc, #376]	; (800f6ec <_vfiprintf_r+0x210>)
 800f572:	f7f0 fe3d 	bl	80001f0 <memchr>
 800f576:	9b04      	ldr	r3, [sp, #16]
 800f578:	bb78      	cbnz	r0, 800f5da <_vfiprintf_r+0xfe>
 800f57a:	06d9      	lsls	r1, r3, #27
 800f57c:	bf44      	itt	mi
 800f57e:	2220      	movmi	r2, #32
 800f580:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f584:	071a      	lsls	r2, r3, #28
 800f586:	bf44      	itt	mi
 800f588:	222b      	movmi	r2, #43	; 0x2b
 800f58a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f58e:	782a      	ldrb	r2, [r5, #0]
 800f590:	2a2a      	cmp	r2, #42	; 0x2a
 800f592:	d02a      	beq.n	800f5ea <_vfiprintf_r+0x10e>
 800f594:	9a07      	ldr	r2, [sp, #28]
 800f596:	46a8      	mov	r8, r5
 800f598:	2000      	movs	r0, #0
 800f59a:	250a      	movs	r5, #10
 800f59c:	4641      	mov	r1, r8
 800f59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5a2:	3b30      	subs	r3, #48	; 0x30
 800f5a4:	2b09      	cmp	r3, #9
 800f5a6:	d969      	bls.n	800f67c <_vfiprintf_r+0x1a0>
 800f5a8:	b360      	cbz	r0, 800f604 <_vfiprintf_r+0x128>
 800f5aa:	e024      	b.n	800f5f6 <_vfiprintf_r+0x11a>
 800f5ac:	4b50      	ldr	r3, [pc, #320]	; (800f6f0 <_vfiprintf_r+0x214>)
 800f5ae:	429c      	cmp	r4, r3
 800f5b0:	d101      	bne.n	800f5b6 <_vfiprintf_r+0xda>
 800f5b2:	68b4      	ldr	r4, [r6, #8]
 800f5b4:	e7a2      	b.n	800f4fc <_vfiprintf_r+0x20>
 800f5b6:	4b4f      	ldr	r3, [pc, #316]	; (800f6f4 <_vfiprintf_r+0x218>)
 800f5b8:	429c      	cmp	r4, r3
 800f5ba:	bf08      	it	eq
 800f5bc:	68f4      	ldreq	r4, [r6, #12]
 800f5be:	e79d      	b.n	800f4fc <_vfiprintf_r+0x20>
 800f5c0:	4621      	mov	r1, r4
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	f7fd fc3e 	bl	800ce44 <__swsetup_r>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d09d      	beq.n	800f508 <_vfiprintf_r+0x2c>
 800f5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d0:	b01d      	add	sp, #116	; 0x74
 800f5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d6:	46a8      	mov	r8, r5
 800f5d8:	e7a2      	b.n	800f520 <_vfiprintf_r+0x44>
 800f5da:	4a44      	ldr	r2, [pc, #272]	; (800f6ec <_vfiprintf_r+0x210>)
 800f5dc:	1a80      	subs	r0, r0, r2
 800f5de:	fa0b f000 	lsl.w	r0, fp, r0
 800f5e2:	4318      	orrs	r0, r3
 800f5e4:	9004      	str	r0, [sp, #16]
 800f5e6:	4645      	mov	r5, r8
 800f5e8:	e7be      	b.n	800f568 <_vfiprintf_r+0x8c>
 800f5ea:	9a03      	ldr	r2, [sp, #12]
 800f5ec:	1d11      	adds	r1, r2, #4
 800f5ee:	6812      	ldr	r2, [r2, #0]
 800f5f0:	9103      	str	r1, [sp, #12]
 800f5f2:	2a00      	cmp	r2, #0
 800f5f4:	db01      	blt.n	800f5fa <_vfiprintf_r+0x11e>
 800f5f6:	9207      	str	r2, [sp, #28]
 800f5f8:	e004      	b.n	800f604 <_vfiprintf_r+0x128>
 800f5fa:	4252      	negs	r2, r2
 800f5fc:	f043 0302 	orr.w	r3, r3, #2
 800f600:	9207      	str	r2, [sp, #28]
 800f602:	9304      	str	r3, [sp, #16]
 800f604:	f898 3000 	ldrb.w	r3, [r8]
 800f608:	2b2e      	cmp	r3, #46	; 0x2e
 800f60a:	d10e      	bne.n	800f62a <_vfiprintf_r+0x14e>
 800f60c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f610:	2b2a      	cmp	r3, #42	; 0x2a
 800f612:	d138      	bne.n	800f686 <_vfiprintf_r+0x1aa>
 800f614:	9b03      	ldr	r3, [sp, #12]
 800f616:	1d1a      	adds	r2, r3, #4
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	9203      	str	r2, [sp, #12]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	bfb8      	it	lt
 800f620:	f04f 33ff 	movlt.w	r3, #4294967295
 800f624:	f108 0802 	add.w	r8, r8, #2
 800f628:	9305      	str	r3, [sp, #20]
 800f62a:	4d33      	ldr	r5, [pc, #204]	; (800f6f8 <_vfiprintf_r+0x21c>)
 800f62c:	f898 1000 	ldrb.w	r1, [r8]
 800f630:	2203      	movs	r2, #3
 800f632:	4628      	mov	r0, r5
 800f634:	f7f0 fddc 	bl	80001f0 <memchr>
 800f638:	b140      	cbz	r0, 800f64c <_vfiprintf_r+0x170>
 800f63a:	2340      	movs	r3, #64	; 0x40
 800f63c:	1b40      	subs	r0, r0, r5
 800f63e:	fa03 f000 	lsl.w	r0, r3, r0
 800f642:	9b04      	ldr	r3, [sp, #16]
 800f644:	4303      	orrs	r3, r0
 800f646:	f108 0801 	add.w	r8, r8, #1
 800f64a:	9304      	str	r3, [sp, #16]
 800f64c:	f898 1000 	ldrb.w	r1, [r8]
 800f650:	482a      	ldr	r0, [pc, #168]	; (800f6fc <_vfiprintf_r+0x220>)
 800f652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f656:	2206      	movs	r2, #6
 800f658:	f108 0701 	add.w	r7, r8, #1
 800f65c:	f7f0 fdc8 	bl	80001f0 <memchr>
 800f660:	2800      	cmp	r0, #0
 800f662:	d037      	beq.n	800f6d4 <_vfiprintf_r+0x1f8>
 800f664:	4b26      	ldr	r3, [pc, #152]	; (800f700 <_vfiprintf_r+0x224>)
 800f666:	bb1b      	cbnz	r3, 800f6b0 <_vfiprintf_r+0x1d4>
 800f668:	9b03      	ldr	r3, [sp, #12]
 800f66a:	3307      	adds	r3, #7
 800f66c:	f023 0307 	bic.w	r3, r3, #7
 800f670:	3308      	adds	r3, #8
 800f672:	9303      	str	r3, [sp, #12]
 800f674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f676:	444b      	add	r3, r9
 800f678:	9309      	str	r3, [sp, #36]	; 0x24
 800f67a:	e750      	b.n	800f51e <_vfiprintf_r+0x42>
 800f67c:	fb05 3202 	mla	r2, r5, r2, r3
 800f680:	2001      	movs	r0, #1
 800f682:	4688      	mov	r8, r1
 800f684:	e78a      	b.n	800f59c <_vfiprintf_r+0xc0>
 800f686:	2300      	movs	r3, #0
 800f688:	f108 0801 	add.w	r8, r8, #1
 800f68c:	9305      	str	r3, [sp, #20]
 800f68e:	4619      	mov	r1, r3
 800f690:	250a      	movs	r5, #10
 800f692:	4640      	mov	r0, r8
 800f694:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f698:	3a30      	subs	r2, #48	; 0x30
 800f69a:	2a09      	cmp	r2, #9
 800f69c:	d903      	bls.n	800f6a6 <_vfiprintf_r+0x1ca>
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d0c3      	beq.n	800f62a <_vfiprintf_r+0x14e>
 800f6a2:	9105      	str	r1, [sp, #20]
 800f6a4:	e7c1      	b.n	800f62a <_vfiprintf_r+0x14e>
 800f6a6:	fb05 2101 	mla	r1, r5, r1, r2
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	4680      	mov	r8, r0
 800f6ae:	e7f0      	b.n	800f692 <_vfiprintf_r+0x1b6>
 800f6b0:	ab03      	add	r3, sp, #12
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	4622      	mov	r2, r4
 800f6b6:	4b13      	ldr	r3, [pc, #76]	; (800f704 <_vfiprintf_r+0x228>)
 800f6b8:	a904      	add	r1, sp, #16
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	f7fb fdd0 	bl	800b260 <_printf_float>
 800f6c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f6c4:	4681      	mov	r9, r0
 800f6c6:	d1d5      	bne.n	800f674 <_vfiprintf_r+0x198>
 800f6c8:	89a3      	ldrh	r3, [r4, #12]
 800f6ca:	065b      	lsls	r3, r3, #25
 800f6cc:	f53f af7e 	bmi.w	800f5cc <_vfiprintf_r+0xf0>
 800f6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6d2:	e77d      	b.n	800f5d0 <_vfiprintf_r+0xf4>
 800f6d4:	ab03      	add	r3, sp, #12
 800f6d6:	9300      	str	r3, [sp, #0]
 800f6d8:	4622      	mov	r2, r4
 800f6da:	4b0a      	ldr	r3, [pc, #40]	; (800f704 <_vfiprintf_r+0x228>)
 800f6dc:	a904      	add	r1, sp, #16
 800f6de:	4630      	mov	r0, r6
 800f6e0:	f7fc f874 	bl	800b7cc <_printf_i>
 800f6e4:	e7ec      	b.n	800f6c0 <_vfiprintf_r+0x1e4>
 800f6e6:	bf00      	nop
 800f6e8:	08012ad0 	.word	0x08012ad0
 800f6ec:	08012c1c 	.word	0x08012c1c
 800f6f0:	08012af0 	.word	0x08012af0
 800f6f4:	08012ab0 	.word	0x08012ab0
 800f6f8:	08012c22 	.word	0x08012c22
 800f6fc:	08012c26 	.word	0x08012c26
 800f700:	0800b261 	.word	0x0800b261
 800f704:	0800f4b7 	.word	0x0800f4b7

0800f708 <_scanf_chars>:
 800f708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f70c:	4615      	mov	r5, r2
 800f70e:	688a      	ldr	r2, [r1, #8]
 800f710:	4680      	mov	r8, r0
 800f712:	460c      	mov	r4, r1
 800f714:	b932      	cbnz	r2, 800f724 <_scanf_chars+0x1c>
 800f716:	698a      	ldr	r2, [r1, #24]
 800f718:	2a00      	cmp	r2, #0
 800f71a:	bf14      	ite	ne
 800f71c:	f04f 32ff 	movne.w	r2, #4294967295
 800f720:	2201      	moveq	r2, #1
 800f722:	608a      	str	r2, [r1, #8]
 800f724:	6822      	ldr	r2, [r4, #0]
 800f726:	06d1      	lsls	r1, r2, #27
 800f728:	bf5f      	itttt	pl
 800f72a:	681a      	ldrpl	r2, [r3, #0]
 800f72c:	1d11      	addpl	r1, r2, #4
 800f72e:	6019      	strpl	r1, [r3, #0]
 800f730:	6817      	ldrpl	r7, [r2, #0]
 800f732:	2600      	movs	r6, #0
 800f734:	69a3      	ldr	r3, [r4, #24]
 800f736:	b1db      	cbz	r3, 800f770 <_scanf_chars+0x68>
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d107      	bne.n	800f74c <_scanf_chars+0x44>
 800f73c:	682b      	ldr	r3, [r5, #0]
 800f73e:	6962      	ldr	r2, [r4, #20]
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	5cd3      	ldrb	r3, [r2, r3]
 800f744:	b9a3      	cbnz	r3, 800f770 <_scanf_chars+0x68>
 800f746:	2e00      	cmp	r6, #0
 800f748:	d132      	bne.n	800f7b0 <_scanf_chars+0xa8>
 800f74a:	e006      	b.n	800f75a <_scanf_chars+0x52>
 800f74c:	2b02      	cmp	r3, #2
 800f74e:	d007      	beq.n	800f760 <_scanf_chars+0x58>
 800f750:	2e00      	cmp	r6, #0
 800f752:	d12d      	bne.n	800f7b0 <_scanf_chars+0xa8>
 800f754:	69a3      	ldr	r3, [r4, #24]
 800f756:	2b01      	cmp	r3, #1
 800f758:	d12a      	bne.n	800f7b0 <_scanf_chars+0xa8>
 800f75a:	2001      	movs	r0, #1
 800f75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f760:	f7fe fed6 	bl	800e510 <__locale_ctype_ptr>
 800f764:	682b      	ldr	r3, [r5, #0]
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	4418      	add	r0, r3
 800f76a:	7843      	ldrb	r3, [r0, #1]
 800f76c:	071b      	lsls	r3, r3, #28
 800f76e:	d4ef      	bmi.n	800f750 <_scanf_chars+0x48>
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	06da      	lsls	r2, r3, #27
 800f774:	bf5e      	ittt	pl
 800f776:	682b      	ldrpl	r3, [r5, #0]
 800f778:	781b      	ldrbpl	r3, [r3, #0]
 800f77a:	703b      	strbpl	r3, [r7, #0]
 800f77c:	682a      	ldr	r2, [r5, #0]
 800f77e:	686b      	ldr	r3, [r5, #4]
 800f780:	f102 0201 	add.w	r2, r2, #1
 800f784:	602a      	str	r2, [r5, #0]
 800f786:	68a2      	ldr	r2, [r4, #8]
 800f788:	f103 33ff 	add.w	r3, r3, #4294967295
 800f78c:	f102 32ff 	add.w	r2, r2, #4294967295
 800f790:	606b      	str	r3, [r5, #4]
 800f792:	f106 0601 	add.w	r6, r6, #1
 800f796:	bf58      	it	pl
 800f798:	3701      	addpl	r7, #1
 800f79a:	60a2      	str	r2, [r4, #8]
 800f79c:	b142      	cbz	r2, 800f7b0 <_scanf_chars+0xa8>
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	dcc8      	bgt.n	800f734 <_scanf_chars+0x2c>
 800f7a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f7a6:	4629      	mov	r1, r5
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	4798      	blx	r3
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d0c1      	beq.n	800f734 <_scanf_chars+0x2c>
 800f7b0:	6823      	ldr	r3, [r4, #0]
 800f7b2:	f013 0310 	ands.w	r3, r3, #16
 800f7b6:	d105      	bne.n	800f7c4 <_scanf_chars+0xbc>
 800f7b8:	68e2      	ldr	r2, [r4, #12]
 800f7ba:	3201      	adds	r2, #1
 800f7bc:	60e2      	str	r2, [r4, #12]
 800f7be:	69a2      	ldr	r2, [r4, #24]
 800f7c0:	b102      	cbz	r2, 800f7c4 <_scanf_chars+0xbc>
 800f7c2:	703b      	strb	r3, [r7, #0]
 800f7c4:	6923      	ldr	r3, [r4, #16]
 800f7c6:	441e      	add	r6, r3
 800f7c8:	6126      	str	r6, [r4, #16]
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	e7c6      	b.n	800f75c <_scanf_chars+0x54>
	...

0800f7d0 <_scanf_i>:
 800f7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d4:	469a      	mov	sl, r3
 800f7d6:	4b74      	ldr	r3, [pc, #464]	; (800f9a8 <_scanf_i+0x1d8>)
 800f7d8:	460c      	mov	r4, r1
 800f7da:	4683      	mov	fp, r0
 800f7dc:	4616      	mov	r6, r2
 800f7de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f7e2:	b087      	sub	sp, #28
 800f7e4:	ab03      	add	r3, sp, #12
 800f7e6:	68a7      	ldr	r7, [r4, #8]
 800f7e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f7ec:	4b6f      	ldr	r3, [pc, #444]	; (800f9ac <_scanf_i+0x1dc>)
 800f7ee:	69a1      	ldr	r1, [r4, #24]
 800f7f0:	4a6f      	ldr	r2, [pc, #444]	; (800f9b0 <_scanf_i+0x1e0>)
 800f7f2:	2903      	cmp	r1, #3
 800f7f4:	bf08      	it	eq
 800f7f6:	461a      	moveq	r2, r3
 800f7f8:	1e7b      	subs	r3, r7, #1
 800f7fa:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800f7fe:	bf84      	itt	hi
 800f800:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f804:	60a3      	strhi	r3, [r4, #8]
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	9200      	str	r2, [sp, #0]
 800f80a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f80e:	bf88      	it	hi
 800f810:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f814:	f104 091c 	add.w	r9, r4, #28
 800f818:	6023      	str	r3, [r4, #0]
 800f81a:	bf8c      	ite	hi
 800f81c:	197f      	addhi	r7, r7, r5
 800f81e:	2700      	movls	r7, #0
 800f820:	464b      	mov	r3, r9
 800f822:	f04f 0800 	mov.w	r8, #0
 800f826:	9301      	str	r3, [sp, #4]
 800f828:	6831      	ldr	r1, [r6, #0]
 800f82a:	ab03      	add	r3, sp, #12
 800f82c:	2202      	movs	r2, #2
 800f82e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f832:	7809      	ldrb	r1, [r1, #0]
 800f834:	f7f0 fcdc 	bl	80001f0 <memchr>
 800f838:	9b01      	ldr	r3, [sp, #4]
 800f83a:	b330      	cbz	r0, 800f88a <_scanf_i+0xba>
 800f83c:	f1b8 0f01 	cmp.w	r8, #1
 800f840:	d15a      	bne.n	800f8f8 <_scanf_i+0x128>
 800f842:	6862      	ldr	r2, [r4, #4]
 800f844:	b92a      	cbnz	r2, 800f852 <_scanf_i+0x82>
 800f846:	6822      	ldr	r2, [r4, #0]
 800f848:	2108      	movs	r1, #8
 800f84a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f84e:	6061      	str	r1, [r4, #4]
 800f850:	6022      	str	r2, [r4, #0]
 800f852:	6822      	ldr	r2, [r4, #0]
 800f854:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f858:	6022      	str	r2, [r4, #0]
 800f85a:	68a2      	ldr	r2, [r4, #8]
 800f85c:	1e51      	subs	r1, r2, #1
 800f85e:	60a1      	str	r1, [r4, #8]
 800f860:	b19a      	cbz	r2, 800f88a <_scanf_i+0xba>
 800f862:	6832      	ldr	r2, [r6, #0]
 800f864:	1c51      	adds	r1, r2, #1
 800f866:	6031      	str	r1, [r6, #0]
 800f868:	7812      	ldrb	r2, [r2, #0]
 800f86a:	701a      	strb	r2, [r3, #0]
 800f86c:	1c5d      	adds	r5, r3, #1
 800f86e:	6873      	ldr	r3, [r6, #4]
 800f870:	3b01      	subs	r3, #1
 800f872:	2b00      	cmp	r3, #0
 800f874:	6073      	str	r3, [r6, #4]
 800f876:	dc07      	bgt.n	800f888 <_scanf_i+0xb8>
 800f878:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f87c:	4631      	mov	r1, r6
 800f87e:	4658      	mov	r0, fp
 800f880:	4798      	blx	r3
 800f882:	2800      	cmp	r0, #0
 800f884:	f040 8086 	bne.w	800f994 <_scanf_i+0x1c4>
 800f888:	462b      	mov	r3, r5
 800f88a:	f108 0801 	add.w	r8, r8, #1
 800f88e:	f1b8 0f03 	cmp.w	r8, #3
 800f892:	d1c8      	bne.n	800f826 <_scanf_i+0x56>
 800f894:	6862      	ldr	r2, [r4, #4]
 800f896:	b90a      	cbnz	r2, 800f89c <_scanf_i+0xcc>
 800f898:	220a      	movs	r2, #10
 800f89a:	6062      	str	r2, [r4, #4]
 800f89c:	6862      	ldr	r2, [r4, #4]
 800f89e:	4945      	ldr	r1, [pc, #276]	; (800f9b4 <_scanf_i+0x1e4>)
 800f8a0:	6960      	ldr	r0, [r4, #20]
 800f8a2:	9301      	str	r3, [sp, #4]
 800f8a4:	1a89      	subs	r1, r1, r2
 800f8a6:	f000 f899 	bl	800f9dc <__sccl>
 800f8aa:	9b01      	ldr	r3, [sp, #4]
 800f8ac:	f04f 0800 	mov.w	r8, #0
 800f8b0:	461d      	mov	r5, r3
 800f8b2:	68a3      	ldr	r3, [r4, #8]
 800f8b4:	6822      	ldr	r2, [r4, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d03a      	beq.n	800f930 <_scanf_i+0x160>
 800f8ba:	6831      	ldr	r1, [r6, #0]
 800f8bc:	6960      	ldr	r0, [r4, #20]
 800f8be:	f891 c000 	ldrb.w	ip, [r1]
 800f8c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	d032      	beq.n	800f930 <_scanf_i+0x160>
 800f8ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f8ce:	d121      	bne.n	800f914 <_scanf_i+0x144>
 800f8d0:	0510      	lsls	r0, r2, #20
 800f8d2:	d51f      	bpl.n	800f914 <_scanf_i+0x144>
 800f8d4:	f108 0801 	add.w	r8, r8, #1
 800f8d8:	b117      	cbz	r7, 800f8e0 <_scanf_i+0x110>
 800f8da:	3301      	adds	r3, #1
 800f8dc:	3f01      	subs	r7, #1
 800f8de:	60a3      	str	r3, [r4, #8]
 800f8e0:	6873      	ldr	r3, [r6, #4]
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	6073      	str	r3, [r6, #4]
 800f8e8:	dd1b      	ble.n	800f922 <_scanf_i+0x152>
 800f8ea:	6833      	ldr	r3, [r6, #0]
 800f8ec:	3301      	adds	r3, #1
 800f8ee:	6033      	str	r3, [r6, #0]
 800f8f0:	68a3      	ldr	r3, [r4, #8]
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	60a3      	str	r3, [r4, #8]
 800f8f6:	e7dc      	b.n	800f8b2 <_scanf_i+0xe2>
 800f8f8:	f1b8 0f02 	cmp.w	r8, #2
 800f8fc:	d1ad      	bne.n	800f85a <_scanf_i+0x8a>
 800f8fe:	6822      	ldr	r2, [r4, #0]
 800f900:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f904:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f908:	d1bf      	bne.n	800f88a <_scanf_i+0xba>
 800f90a:	2110      	movs	r1, #16
 800f90c:	6061      	str	r1, [r4, #4]
 800f90e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f912:	e7a1      	b.n	800f858 <_scanf_i+0x88>
 800f914:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f918:	6022      	str	r2, [r4, #0]
 800f91a:	780b      	ldrb	r3, [r1, #0]
 800f91c:	702b      	strb	r3, [r5, #0]
 800f91e:	3501      	adds	r5, #1
 800f920:	e7de      	b.n	800f8e0 <_scanf_i+0x110>
 800f922:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f926:	4631      	mov	r1, r6
 800f928:	4658      	mov	r0, fp
 800f92a:	4798      	blx	r3
 800f92c:	2800      	cmp	r0, #0
 800f92e:	d0df      	beq.n	800f8f0 <_scanf_i+0x120>
 800f930:	6823      	ldr	r3, [r4, #0]
 800f932:	05d9      	lsls	r1, r3, #23
 800f934:	d50c      	bpl.n	800f950 <_scanf_i+0x180>
 800f936:	454d      	cmp	r5, r9
 800f938:	d908      	bls.n	800f94c <_scanf_i+0x17c>
 800f93a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f93e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f942:	4632      	mov	r2, r6
 800f944:	4658      	mov	r0, fp
 800f946:	4798      	blx	r3
 800f948:	1e6f      	subs	r7, r5, #1
 800f94a:	463d      	mov	r5, r7
 800f94c:	454d      	cmp	r5, r9
 800f94e:	d029      	beq.n	800f9a4 <_scanf_i+0x1d4>
 800f950:	6822      	ldr	r2, [r4, #0]
 800f952:	f012 0210 	ands.w	r2, r2, #16
 800f956:	d113      	bne.n	800f980 <_scanf_i+0x1b0>
 800f958:	702a      	strb	r2, [r5, #0]
 800f95a:	6863      	ldr	r3, [r4, #4]
 800f95c:	9e00      	ldr	r6, [sp, #0]
 800f95e:	4649      	mov	r1, r9
 800f960:	4658      	mov	r0, fp
 800f962:	47b0      	blx	r6
 800f964:	f8da 3000 	ldr.w	r3, [sl]
 800f968:	6821      	ldr	r1, [r4, #0]
 800f96a:	1d1a      	adds	r2, r3, #4
 800f96c:	f8ca 2000 	str.w	r2, [sl]
 800f970:	f011 0f20 	tst.w	r1, #32
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	d010      	beq.n	800f99a <_scanf_i+0x1ca>
 800f978:	6018      	str	r0, [r3, #0]
 800f97a:	68e3      	ldr	r3, [r4, #12]
 800f97c:	3301      	adds	r3, #1
 800f97e:	60e3      	str	r3, [r4, #12]
 800f980:	eba5 0509 	sub.w	r5, r5, r9
 800f984:	44a8      	add	r8, r5
 800f986:	6925      	ldr	r5, [r4, #16]
 800f988:	4445      	add	r5, r8
 800f98a:	6125      	str	r5, [r4, #16]
 800f98c:	2000      	movs	r0, #0
 800f98e:	b007      	add	sp, #28
 800f990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f994:	f04f 0800 	mov.w	r8, #0
 800f998:	e7ca      	b.n	800f930 <_scanf_i+0x160>
 800f99a:	07ca      	lsls	r2, r1, #31
 800f99c:	bf4c      	ite	mi
 800f99e:	8018      	strhmi	r0, [r3, #0]
 800f9a0:	6018      	strpl	r0, [r3, #0]
 800f9a2:	e7ea      	b.n	800f97a <_scanf_i+0x1aa>
 800f9a4:	2001      	movs	r0, #1
 800f9a6:	e7f2      	b.n	800f98e <_scanf_i+0x1be>
 800f9a8:	080129e8 	.word	0x080129e8
 800f9ac:	0800cd59 	.word	0x0800cd59
 800f9b0:	0800fb59 	.word	0x0800fb59
 800f9b4:	08012c3d 	.word	0x08012c3d

0800f9b8 <_read_r>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	4c07      	ldr	r4, [pc, #28]	; (800f9d8 <_read_r+0x20>)
 800f9bc:	4605      	mov	r5, r0
 800f9be:	4608      	mov	r0, r1
 800f9c0:	4611      	mov	r1, r2
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	6022      	str	r2, [r4, #0]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	f7f2 fb9e 	bl	8002108 <_read>
 800f9cc:	1c43      	adds	r3, r0, #1
 800f9ce:	d102      	bne.n	800f9d6 <_read_r+0x1e>
 800f9d0:	6823      	ldr	r3, [r4, #0]
 800f9d2:	b103      	cbz	r3, 800f9d6 <_read_r+0x1e>
 800f9d4:	602b      	str	r3, [r5, #0]
 800f9d6:	bd38      	pop	{r3, r4, r5, pc}
 800f9d8:	20001338 	.word	0x20001338

0800f9dc <__sccl>:
 800f9dc:	b570      	push	{r4, r5, r6, lr}
 800f9de:	780b      	ldrb	r3, [r1, #0]
 800f9e0:	2b5e      	cmp	r3, #94	; 0x5e
 800f9e2:	bf13      	iteet	ne
 800f9e4:	1c4a      	addne	r2, r1, #1
 800f9e6:	1c8a      	addeq	r2, r1, #2
 800f9e8:	784b      	ldrbeq	r3, [r1, #1]
 800f9ea:	2100      	movne	r1, #0
 800f9ec:	bf08      	it	eq
 800f9ee:	2101      	moveq	r1, #1
 800f9f0:	1e44      	subs	r4, r0, #1
 800f9f2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800f9f6:	f804 1f01 	strb.w	r1, [r4, #1]!
 800f9fa:	42ac      	cmp	r4, r5
 800f9fc:	d1fb      	bne.n	800f9f6 <__sccl+0x1a>
 800f9fe:	b913      	cbnz	r3, 800fa06 <__sccl+0x2a>
 800fa00:	3a01      	subs	r2, #1
 800fa02:	4610      	mov	r0, r2
 800fa04:	bd70      	pop	{r4, r5, r6, pc}
 800fa06:	f081 0401 	eor.w	r4, r1, #1
 800fa0a:	54c4      	strb	r4, [r0, r3]
 800fa0c:	1c51      	adds	r1, r2, #1
 800fa0e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800fa12:	2d2d      	cmp	r5, #45	; 0x2d
 800fa14:	f101 36ff 	add.w	r6, r1, #4294967295
 800fa18:	460a      	mov	r2, r1
 800fa1a:	d006      	beq.n	800fa2a <__sccl+0x4e>
 800fa1c:	2d5d      	cmp	r5, #93	; 0x5d
 800fa1e:	d0f0      	beq.n	800fa02 <__sccl+0x26>
 800fa20:	b90d      	cbnz	r5, 800fa26 <__sccl+0x4a>
 800fa22:	4632      	mov	r2, r6
 800fa24:	e7ed      	b.n	800fa02 <__sccl+0x26>
 800fa26:	462b      	mov	r3, r5
 800fa28:	e7ef      	b.n	800fa0a <__sccl+0x2e>
 800fa2a:	780e      	ldrb	r6, [r1, #0]
 800fa2c:	2e5d      	cmp	r6, #93	; 0x5d
 800fa2e:	d0fa      	beq.n	800fa26 <__sccl+0x4a>
 800fa30:	42b3      	cmp	r3, r6
 800fa32:	dcf8      	bgt.n	800fa26 <__sccl+0x4a>
 800fa34:	3301      	adds	r3, #1
 800fa36:	429e      	cmp	r6, r3
 800fa38:	54c4      	strb	r4, [r0, r3]
 800fa3a:	dcfb      	bgt.n	800fa34 <__sccl+0x58>
 800fa3c:	3102      	adds	r1, #2
 800fa3e:	e7e6      	b.n	800fa0e <__sccl+0x32>

0800fa40 <strncmp>:
 800fa40:	b510      	push	{r4, lr}
 800fa42:	b16a      	cbz	r2, 800fa60 <strncmp+0x20>
 800fa44:	3901      	subs	r1, #1
 800fa46:	1884      	adds	r4, r0, r2
 800fa48:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fa4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d103      	bne.n	800fa5c <strncmp+0x1c>
 800fa54:	42a0      	cmp	r0, r4
 800fa56:	d001      	beq.n	800fa5c <strncmp+0x1c>
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d1f5      	bne.n	800fa48 <strncmp+0x8>
 800fa5c:	1a98      	subs	r0, r3, r2
 800fa5e:	bd10      	pop	{r4, pc}
 800fa60:	4610      	mov	r0, r2
 800fa62:	e7fc      	b.n	800fa5e <strncmp+0x1e>

0800fa64 <_strtoul_l.isra.0>:
 800fa64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa68:	4680      	mov	r8, r0
 800fa6a:	4689      	mov	r9, r1
 800fa6c:	4692      	mov	sl, r2
 800fa6e:	461e      	mov	r6, r3
 800fa70:	460f      	mov	r7, r1
 800fa72:	463d      	mov	r5, r7
 800fa74:	9808      	ldr	r0, [sp, #32]
 800fa76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa7a:	f7fe fd45 	bl	800e508 <__locale_ctype_ptr_l>
 800fa7e:	4420      	add	r0, r4
 800fa80:	7843      	ldrb	r3, [r0, #1]
 800fa82:	f013 0308 	ands.w	r3, r3, #8
 800fa86:	d130      	bne.n	800faea <_strtoul_l.isra.0+0x86>
 800fa88:	2c2d      	cmp	r4, #45	; 0x2d
 800fa8a:	d130      	bne.n	800faee <_strtoul_l.isra.0+0x8a>
 800fa8c:	787c      	ldrb	r4, [r7, #1]
 800fa8e:	1cbd      	adds	r5, r7, #2
 800fa90:	2101      	movs	r1, #1
 800fa92:	2e00      	cmp	r6, #0
 800fa94:	d05c      	beq.n	800fb50 <_strtoul_l.isra.0+0xec>
 800fa96:	2e10      	cmp	r6, #16
 800fa98:	d109      	bne.n	800faae <_strtoul_l.isra.0+0x4a>
 800fa9a:	2c30      	cmp	r4, #48	; 0x30
 800fa9c:	d107      	bne.n	800faae <_strtoul_l.isra.0+0x4a>
 800fa9e:	782b      	ldrb	r3, [r5, #0]
 800faa0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800faa4:	2b58      	cmp	r3, #88	; 0x58
 800faa6:	d14e      	bne.n	800fb46 <_strtoul_l.isra.0+0xe2>
 800faa8:	786c      	ldrb	r4, [r5, #1]
 800faaa:	2610      	movs	r6, #16
 800faac:	3502      	adds	r5, #2
 800faae:	f04f 32ff 	mov.w	r2, #4294967295
 800fab2:	2300      	movs	r3, #0
 800fab4:	fbb2 f2f6 	udiv	r2, r2, r6
 800fab8:	fb06 fc02 	mul.w	ip, r6, r2
 800fabc:	ea6f 0c0c 	mvn.w	ip, ip
 800fac0:	4618      	mov	r0, r3
 800fac2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800fac6:	2f09      	cmp	r7, #9
 800fac8:	d817      	bhi.n	800fafa <_strtoul_l.isra.0+0x96>
 800faca:	463c      	mov	r4, r7
 800facc:	42a6      	cmp	r6, r4
 800face:	dd23      	ble.n	800fb18 <_strtoul_l.isra.0+0xb4>
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	db1e      	blt.n	800fb12 <_strtoul_l.isra.0+0xae>
 800fad4:	4282      	cmp	r2, r0
 800fad6:	d31c      	bcc.n	800fb12 <_strtoul_l.isra.0+0xae>
 800fad8:	d101      	bne.n	800fade <_strtoul_l.isra.0+0x7a>
 800fada:	45a4      	cmp	ip, r4
 800fadc:	db19      	blt.n	800fb12 <_strtoul_l.isra.0+0xae>
 800fade:	fb00 4006 	mla	r0, r0, r6, r4
 800fae2:	2301      	movs	r3, #1
 800fae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fae8:	e7eb      	b.n	800fac2 <_strtoul_l.isra.0+0x5e>
 800faea:	462f      	mov	r7, r5
 800faec:	e7c1      	b.n	800fa72 <_strtoul_l.isra.0+0xe>
 800faee:	2c2b      	cmp	r4, #43	; 0x2b
 800faf0:	bf04      	itt	eq
 800faf2:	1cbd      	addeq	r5, r7, #2
 800faf4:	787c      	ldrbeq	r4, [r7, #1]
 800faf6:	4619      	mov	r1, r3
 800faf8:	e7cb      	b.n	800fa92 <_strtoul_l.isra.0+0x2e>
 800fafa:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800fafe:	2f19      	cmp	r7, #25
 800fb00:	d801      	bhi.n	800fb06 <_strtoul_l.isra.0+0xa2>
 800fb02:	3c37      	subs	r4, #55	; 0x37
 800fb04:	e7e2      	b.n	800facc <_strtoul_l.isra.0+0x68>
 800fb06:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800fb0a:	2f19      	cmp	r7, #25
 800fb0c:	d804      	bhi.n	800fb18 <_strtoul_l.isra.0+0xb4>
 800fb0e:	3c57      	subs	r4, #87	; 0x57
 800fb10:	e7dc      	b.n	800facc <_strtoul_l.isra.0+0x68>
 800fb12:	f04f 33ff 	mov.w	r3, #4294967295
 800fb16:	e7e5      	b.n	800fae4 <_strtoul_l.isra.0+0x80>
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	da09      	bge.n	800fb30 <_strtoul_l.isra.0+0xcc>
 800fb1c:	2322      	movs	r3, #34	; 0x22
 800fb1e:	f8c8 3000 	str.w	r3, [r8]
 800fb22:	f04f 30ff 	mov.w	r0, #4294967295
 800fb26:	f1ba 0f00 	cmp.w	sl, #0
 800fb2a:	d107      	bne.n	800fb3c <_strtoul_l.isra.0+0xd8>
 800fb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb30:	b101      	cbz	r1, 800fb34 <_strtoul_l.isra.0+0xd0>
 800fb32:	4240      	negs	r0, r0
 800fb34:	f1ba 0f00 	cmp.w	sl, #0
 800fb38:	d0f8      	beq.n	800fb2c <_strtoul_l.isra.0+0xc8>
 800fb3a:	b10b      	cbz	r3, 800fb40 <_strtoul_l.isra.0+0xdc>
 800fb3c:	f105 39ff 	add.w	r9, r5, #4294967295
 800fb40:	f8ca 9000 	str.w	r9, [sl]
 800fb44:	e7f2      	b.n	800fb2c <_strtoul_l.isra.0+0xc8>
 800fb46:	2430      	movs	r4, #48	; 0x30
 800fb48:	2e00      	cmp	r6, #0
 800fb4a:	d1b0      	bne.n	800faae <_strtoul_l.isra.0+0x4a>
 800fb4c:	2608      	movs	r6, #8
 800fb4e:	e7ae      	b.n	800faae <_strtoul_l.isra.0+0x4a>
 800fb50:	2c30      	cmp	r4, #48	; 0x30
 800fb52:	d0a4      	beq.n	800fa9e <_strtoul_l.isra.0+0x3a>
 800fb54:	260a      	movs	r6, #10
 800fb56:	e7aa      	b.n	800faae <_strtoul_l.isra.0+0x4a>

0800fb58 <_strtoul_r>:
 800fb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb5a:	4c06      	ldr	r4, [pc, #24]	; (800fb74 <_strtoul_r+0x1c>)
 800fb5c:	4d06      	ldr	r5, [pc, #24]	; (800fb78 <_strtoul_r+0x20>)
 800fb5e:	6824      	ldr	r4, [r4, #0]
 800fb60:	6a24      	ldr	r4, [r4, #32]
 800fb62:	2c00      	cmp	r4, #0
 800fb64:	bf08      	it	eq
 800fb66:	462c      	moveq	r4, r5
 800fb68:	9400      	str	r4, [sp, #0]
 800fb6a:	f7ff ff7b 	bl	800fa64 <_strtoul_l.isra.0>
 800fb6e:	b003      	add	sp, #12
 800fb70:	bd30      	pop	{r4, r5, pc}
 800fb72:	bf00      	nop
 800fb74:	200001e8 	.word	0x200001e8
 800fb78:	2000024c 	.word	0x2000024c

0800fb7c <__submore>:
 800fb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb80:	460c      	mov	r4, r1
 800fb82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fb84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb88:	4299      	cmp	r1, r3
 800fb8a:	d11d      	bne.n	800fbc8 <__submore+0x4c>
 800fb8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fb90:	f7fb fa78 	bl	800b084 <_malloc_r>
 800fb94:	b918      	cbnz	r0, 800fb9e <__submore+0x22>
 800fb96:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fba2:	63a3      	str	r3, [r4, #56]	; 0x38
 800fba4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fba8:	6360      	str	r0, [r4, #52]	; 0x34
 800fbaa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fbae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fbb2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fbb6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fbba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fbbe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fbc2:	6020      	str	r0, [r4, #0]
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	e7e8      	b.n	800fb9a <__submore+0x1e>
 800fbc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fbca:	0077      	lsls	r7, r6, #1
 800fbcc:	463a      	mov	r2, r7
 800fbce:	f000 f858 	bl	800fc82 <_realloc_r>
 800fbd2:	4605      	mov	r5, r0
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d0de      	beq.n	800fb96 <__submore+0x1a>
 800fbd8:	eb00 0806 	add.w	r8, r0, r6
 800fbdc:	4601      	mov	r1, r0
 800fbde:	4632      	mov	r2, r6
 800fbe0:	4640      	mov	r0, r8
 800fbe2:	f7fe fd3b 	bl	800e65c <memcpy>
 800fbe6:	f8c4 8000 	str.w	r8, [r4]
 800fbea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fbee:	e7e9      	b.n	800fbc4 <__submore+0x48>

0800fbf0 <__ascii_wctomb>:
 800fbf0:	b149      	cbz	r1, 800fc06 <__ascii_wctomb+0x16>
 800fbf2:	2aff      	cmp	r2, #255	; 0xff
 800fbf4:	bf85      	ittet	hi
 800fbf6:	238a      	movhi	r3, #138	; 0x8a
 800fbf8:	6003      	strhi	r3, [r0, #0]
 800fbfa:	700a      	strbls	r2, [r1, #0]
 800fbfc:	f04f 30ff 	movhi.w	r0, #4294967295
 800fc00:	bf98      	it	ls
 800fc02:	2001      	movls	r0, #1
 800fc04:	4770      	bx	lr
 800fc06:	4608      	mov	r0, r1
 800fc08:	4770      	bx	lr
	...

0800fc0c <_fstat_r>:
 800fc0c:	b538      	push	{r3, r4, r5, lr}
 800fc0e:	4c07      	ldr	r4, [pc, #28]	; (800fc2c <_fstat_r+0x20>)
 800fc10:	2300      	movs	r3, #0
 800fc12:	4605      	mov	r5, r0
 800fc14:	4608      	mov	r0, r1
 800fc16:	4611      	mov	r1, r2
 800fc18:	6023      	str	r3, [r4, #0]
 800fc1a:	f7f2 fa9e 	bl	800215a <_fstat>
 800fc1e:	1c43      	adds	r3, r0, #1
 800fc20:	d102      	bne.n	800fc28 <_fstat_r+0x1c>
 800fc22:	6823      	ldr	r3, [r4, #0]
 800fc24:	b103      	cbz	r3, 800fc28 <_fstat_r+0x1c>
 800fc26:	602b      	str	r3, [r5, #0]
 800fc28:	bd38      	pop	{r3, r4, r5, pc}
 800fc2a:	bf00      	nop
 800fc2c:	20001338 	.word	0x20001338

0800fc30 <_isatty_r>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	4c06      	ldr	r4, [pc, #24]	; (800fc4c <_isatty_r+0x1c>)
 800fc34:	2300      	movs	r3, #0
 800fc36:	4605      	mov	r5, r0
 800fc38:	4608      	mov	r0, r1
 800fc3a:	6023      	str	r3, [r4, #0]
 800fc3c:	f7f2 fa9d 	bl	800217a <_isatty>
 800fc40:	1c43      	adds	r3, r0, #1
 800fc42:	d102      	bne.n	800fc4a <_isatty_r+0x1a>
 800fc44:	6823      	ldr	r3, [r4, #0]
 800fc46:	b103      	cbz	r3, 800fc4a <_isatty_r+0x1a>
 800fc48:	602b      	str	r3, [r5, #0]
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}
 800fc4c:	20001338 	.word	0x20001338

0800fc50 <memmove>:
 800fc50:	4288      	cmp	r0, r1
 800fc52:	b510      	push	{r4, lr}
 800fc54:	eb01 0302 	add.w	r3, r1, r2
 800fc58:	d807      	bhi.n	800fc6a <memmove+0x1a>
 800fc5a:	1e42      	subs	r2, r0, #1
 800fc5c:	4299      	cmp	r1, r3
 800fc5e:	d00a      	beq.n	800fc76 <memmove+0x26>
 800fc60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc64:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fc68:	e7f8      	b.n	800fc5c <memmove+0xc>
 800fc6a:	4283      	cmp	r3, r0
 800fc6c:	d9f5      	bls.n	800fc5a <memmove+0xa>
 800fc6e:	1881      	adds	r1, r0, r2
 800fc70:	1ad2      	subs	r2, r2, r3
 800fc72:	42d3      	cmn	r3, r2
 800fc74:	d100      	bne.n	800fc78 <memmove+0x28>
 800fc76:	bd10      	pop	{r4, pc}
 800fc78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fc80:	e7f7      	b.n	800fc72 <memmove+0x22>

0800fc82 <_realloc_r>:
 800fc82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc84:	4607      	mov	r7, r0
 800fc86:	4614      	mov	r4, r2
 800fc88:	460e      	mov	r6, r1
 800fc8a:	b921      	cbnz	r1, 800fc96 <_realloc_r+0x14>
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fc92:	f7fb b9f7 	b.w	800b084 <_malloc_r>
 800fc96:	b922      	cbnz	r2, 800fca2 <_realloc_r+0x20>
 800fc98:	f7fb f9a6 	bl	800afe8 <_free_r>
 800fc9c:	4625      	mov	r5, r4
 800fc9e:	4628      	mov	r0, r5
 800fca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fca2:	f000 f814 	bl	800fcce <_malloc_usable_size_r>
 800fca6:	42a0      	cmp	r0, r4
 800fca8:	d20f      	bcs.n	800fcca <_realloc_r+0x48>
 800fcaa:	4621      	mov	r1, r4
 800fcac:	4638      	mov	r0, r7
 800fcae:	f7fb f9e9 	bl	800b084 <_malloc_r>
 800fcb2:	4605      	mov	r5, r0
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	d0f2      	beq.n	800fc9e <_realloc_r+0x1c>
 800fcb8:	4631      	mov	r1, r6
 800fcba:	4622      	mov	r2, r4
 800fcbc:	f7fe fcce 	bl	800e65c <memcpy>
 800fcc0:	4631      	mov	r1, r6
 800fcc2:	4638      	mov	r0, r7
 800fcc4:	f7fb f990 	bl	800afe8 <_free_r>
 800fcc8:	e7e9      	b.n	800fc9e <_realloc_r+0x1c>
 800fcca:	4635      	mov	r5, r6
 800fccc:	e7e7      	b.n	800fc9e <_realloc_r+0x1c>

0800fcce <_malloc_usable_size_r>:
 800fcce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcd2:	1f18      	subs	r0, r3, #4
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	bfbc      	itt	lt
 800fcd8:	580b      	ldrlt	r3, [r1, r0]
 800fcda:	18c0      	addlt	r0, r0, r3
 800fcdc:	4770      	bx	lr
	...

0800fce0 <cos>:
 800fce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fce2:	ec51 0b10 	vmov	r0, r1, d0
 800fce6:	4a1e      	ldr	r2, [pc, #120]	; (800fd60 <cos+0x80>)
 800fce8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fcec:	4293      	cmp	r3, r2
 800fcee:	dc06      	bgt.n	800fcfe <cos+0x1e>
 800fcf0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800fd58 <cos+0x78>
 800fcf4:	f001 fd94 	bl	8011820 <__kernel_cos>
 800fcf8:	ec51 0b10 	vmov	r0, r1, d0
 800fcfc:	e007      	b.n	800fd0e <cos+0x2e>
 800fcfe:	4a19      	ldr	r2, [pc, #100]	; (800fd64 <cos+0x84>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	dd09      	ble.n	800fd18 <cos+0x38>
 800fd04:	ee10 2a10 	vmov	r2, s0
 800fd08:	460b      	mov	r3, r1
 800fd0a:	f7f0 fac5 	bl	8000298 <__aeabi_dsub>
 800fd0e:	ec41 0b10 	vmov	d0, r0, r1
 800fd12:	b005      	add	sp, #20
 800fd14:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd18:	4668      	mov	r0, sp
 800fd1a:	f001 fadd 	bl	80112d8 <__ieee754_rem_pio2>
 800fd1e:	f000 0003 	and.w	r0, r0, #3
 800fd22:	2801      	cmp	r0, #1
 800fd24:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd28:	ed9d 0b00 	vldr	d0, [sp]
 800fd2c:	d007      	beq.n	800fd3e <cos+0x5e>
 800fd2e:	2802      	cmp	r0, #2
 800fd30:	d00e      	beq.n	800fd50 <cos+0x70>
 800fd32:	2800      	cmp	r0, #0
 800fd34:	d0de      	beq.n	800fcf4 <cos+0x14>
 800fd36:	2001      	movs	r0, #1
 800fd38:	f002 f97a 	bl	8012030 <__kernel_sin>
 800fd3c:	e7dc      	b.n	800fcf8 <cos+0x18>
 800fd3e:	f002 f977 	bl	8012030 <__kernel_sin>
 800fd42:	ec53 2b10 	vmov	r2, r3, d0
 800fd46:	ee10 0a10 	vmov	r0, s0
 800fd4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fd4e:	e7de      	b.n	800fd0e <cos+0x2e>
 800fd50:	f001 fd66 	bl	8011820 <__kernel_cos>
 800fd54:	e7f5      	b.n	800fd42 <cos+0x62>
 800fd56:	bf00      	nop
	...
 800fd60:	3fe921fb 	.word	0x3fe921fb
 800fd64:	7fefffff 	.word	0x7fefffff

0800fd68 <sin>:
 800fd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd6a:	ec51 0b10 	vmov	r0, r1, d0
 800fd6e:	4a20      	ldr	r2, [pc, #128]	; (800fdf0 <sin+0x88>)
 800fd70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fd74:	4293      	cmp	r3, r2
 800fd76:	dc07      	bgt.n	800fd88 <sin+0x20>
 800fd78:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800fde8 <sin+0x80>
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	f002 f957 	bl	8012030 <__kernel_sin>
 800fd82:	ec51 0b10 	vmov	r0, r1, d0
 800fd86:	e007      	b.n	800fd98 <sin+0x30>
 800fd88:	4a1a      	ldr	r2, [pc, #104]	; (800fdf4 <sin+0x8c>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	dd09      	ble.n	800fda2 <sin+0x3a>
 800fd8e:	ee10 2a10 	vmov	r2, s0
 800fd92:	460b      	mov	r3, r1
 800fd94:	f7f0 fa80 	bl	8000298 <__aeabi_dsub>
 800fd98:	ec41 0b10 	vmov	d0, r0, r1
 800fd9c:	b005      	add	sp, #20
 800fd9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fda2:	4668      	mov	r0, sp
 800fda4:	f001 fa98 	bl	80112d8 <__ieee754_rem_pio2>
 800fda8:	f000 0003 	and.w	r0, r0, #3
 800fdac:	2801      	cmp	r0, #1
 800fdae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdb2:	ed9d 0b00 	vldr	d0, [sp]
 800fdb6:	d004      	beq.n	800fdc2 <sin+0x5a>
 800fdb8:	2802      	cmp	r0, #2
 800fdba:	d005      	beq.n	800fdc8 <sin+0x60>
 800fdbc:	b970      	cbnz	r0, 800fddc <sin+0x74>
 800fdbe:	2001      	movs	r0, #1
 800fdc0:	e7dd      	b.n	800fd7e <sin+0x16>
 800fdc2:	f001 fd2d 	bl	8011820 <__kernel_cos>
 800fdc6:	e7dc      	b.n	800fd82 <sin+0x1a>
 800fdc8:	2001      	movs	r0, #1
 800fdca:	f002 f931 	bl	8012030 <__kernel_sin>
 800fdce:	ec53 2b10 	vmov	r2, r3, d0
 800fdd2:	ee10 0a10 	vmov	r0, s0
 800fdd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fdda:	e7dd      	b.n	800fd98 <sin+0x30>
 800fddc:	f001 fd20 	bl	8011820 <__kernel_cos>
 800fde0:	e7f5      	b.n	800fdce <sin+0x66>
 800fde2:	bf00      	nop
 800fde4:	f3af 8000 	nop.w
	...
 800fdf0:	3fe921fb 	.word	0x3fe921fb
 800fdf4:	7fefffff 	.word	0x7fefffff

0800fdf8 <acos>:
 800fdf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdfa:	ed2d 8b02 	vpush	{d8}
 800fdfe:	4e26      	ldr	r6, [pc, #152]	; (800fe98 <acos+0xa0>)
 800fe00:	b08b      	sub	sp, #44	; 0x2c
 800fe02:	ec55 4b10 	vmov	r4, r5, d0
 800fe06:	f000 fa1b 	bl	8010240 <__ieee754_acos>
 800fe0a:	f996 3000 	ldrsb.w	r3, [r6]
 800fe0e:	eeb0 8a40 	vmov.f32	s16, s0
 800fe12:	eef0 8a60 	vmov.f32	s17, s1
 800fe16:	3301      	adds	r3, #1
 800fe18:	d036      	beq.n	800fe88 <acos+0x90>
 800fe1a:	4622      	mov	r2, r4
 800fe1c:	462b      	mov	r3, r5
 800fe1e:	4620      	mov	r0, r4
 800fe20:	4629      	mov	r1, r5
 800fe22:	f7f0 fe8b 	bl	8000b3c <__aeabi_dcmpun>
 800fe26:	4607      	mov	r7, r0
 800fe28:	bb70      	cbnz	r0, 800fe88 <acos+0x90>
 800fe2a:	ec45 4b10 	vmov	d0, r4, r5
 800fe2e:	f002 fb5b 	bl	80124e8 <fabs>
 800fe32:	2200      	movs	r2, #0
 800fe34:	4b19      	ldr	r3, [pc, #100]	; (800fe9c <acos+0xa4>)
 800fe36:	ec51 0b10 	vmov	r0, r1, d0
 800fe3a:	f7f0 fe75 	bl	8000b28 <__aeabi_dcmpgt>
 800fe3e:	b318      	cbz	r0, 800fe88 <acos+0x90>
 800fe40:	2301      	movs	r3, #1
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	4816      	ldr	r0, [pc, #88]	; (800fea0 <acos+0xa8>)
 800fe46:	4b17      	ldr	r3, [pc, #92]	; (800fea4 <acos+0xac>)
 800fe48:	9301      	str	r3, [sp, #4]
 800fe4a:	9708      	str	r7, [sp, #32]
 800fe4c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800fe50:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800fe54:	f002 fbe4 	bl	8012620 <nan>
 800fe58:	f996 3000 	ldrsb.w	r3, [r6]
 800fe5c:	2b02      	cmp	r3, #2
 800fe5e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800fe62:	d104      	bne.n	800fe6e <acos+0x76>
 800fe64:	f7fb f87e 	bl	800af64 <__errno>
 800fe68:	2321      	movs	r3, #33	; 0x21
 800fe6a:	6003      	str	r3, [r0, #0]
 800fe6c:	e004      	b.n	800fe78 <acos+0x80>
 800fe6e:	4668      	mov	r0, sp
 800fe70:	f002 fbd2 	bl	8012618 <matherr>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	d0f5      	beq.n	800fe64 <acos+0x6c>
 800fe78:	9b08      	ldr	r3, [sp, #32]
 800fe7a:	b11b      	cbz	r3, 800fe84 <acos+0x8c>
 800fe7c:	f7fb f872 	bl	800af64 <__errno>
 800fe80:	9b08      	ldr	r3, [sp, #32]
 800fe82:	6003      	str	r3, [r0, #0]
 800fe84:	ed9d 8b06 	vldr	d8, [sp, #24]
 800fe88:	eeb0 0a48 	vmov.f32	s0, s16
 800fe8c:	eef0 0a68 	vmov.f32	s1, s17
 800fe90:	b00b      	add	sp, #44	; 0x2c
 800fe92:	ecbd 8b02 	vpop	{d8}
 800fe96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe98:	200003b8 	.word	0x200003b8
 800fe9c:	3ff00000 	.word	0x3ff00000
 800fea0:	08012c21 	.word	0x08012c21
 800fea4:	08012d49 	.word	0x08012d49

0800fea8 <atan2>:
 800fea8:	f000 bc26 	b.w	80106f8 <__ieee754_atan2>

0800feac <pow>:
 800feac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb0:	ed2d 8b04 	vpush	{d8-d9}
 800feb4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8010188 <pow+0x2dc>
 800feb8:	b08d      	sub	sp, #52	; 0x34
 800feba:	ec57 6b10 	vmov	r6, r7, d0
 800febe:	ec55 4b11 	vmov	r4, r5, d1
 800fec2:	f000 fcf9 	bl	80108b8 <__ieee754_pow>
 800fec6:	f999 3000 	ldrsb.w	r3, [r9]
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	3301      	adds	r3, #1
 800fece:	eeb0 8a40 	vmov.f32	s16, s0
 800fed2:	eef0 8a60 	vmov.f32	s17, s1
 800fed6:	46c8      	mov	r8, r9
 800fed8:	d05f      	beq.n	800ff9a <pow+0xee>
 800feda:	4622      	mov	r2, r4
 800fedc:	462b      	mov	r3, r5
 800fede:	4620      	mov	r0, r4
 800fee0:	4629      	mov	r1, r5
 800fee2:	f7f0 fe2b 	bl	8000b3c <__aeabi_dcmpun>
 800fee6:	4683      	mov	fp, r0
 800fee8:	2800      	cmp	r0, #0
 800feea:	d156      	bne.n	800ff9a <pow+0xee>
 800feec:	4632      	mov	r2, r6
 800feee:	463b      	mov	r3, r7
 800fef0:	4630      	mov	r0, r6
 800fef2:	4639      	mov	r1, r7
 800fef4:	f7f0 fe22 	bl	8000b3c <__aeabi_dcmpun>
 800fef8:	9001      	str	r0, [sp, #4]
 800fefa:	b1e8      	cbz	r0, 800ff38 <pow+0x8c>
 800fefc:	2200      	movs	r2, #0
 800fefe:	2300      	movs	r3, #0
 800ff00:	4620      	mov	r0, r4
 800ff02:	4629      	mov	r1, r5
 800ff04:	f7f0 fde8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d046      	beq.n	800ff9a <pow+0xee>
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	9302      	str	r3, [sp, #8]
 800ff10:	4b96      	ldr	r3, [pc, #600]	; (801016c <pow+0x2c0>)
 800ff12:	9303      	str	r3, [sp, #12]
 800ff14:	4b96      	ldr	r3, [pc, #600]	; (8010170 <pow+0x2c4>)
 800ff16:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff20:	9b00      	ldr	r3, [sp, #0]
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ff28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ff2c:	d033      	beq.n	800ff96 <pow+0xea>
 800ff2e:	a802      	add	r0, sp, #8
 800ff30:	f002 fb72 	bl	8012618 <matherr>
 800ff34:	bb48      	cbnz	r0, 800ff8a <pow+0xde>
 800ff36:	e05d      	b.n	800fff4 <pow+0x148>
 800ff38:	f04f 0a00 	mov.w	sl, #0
 800ff3c:	f04f 0b00 	mov.w	fp, #0
 800ff40:	4652      	mov	r2, sl
 800ff42:	465b      	mov	r3, fp
 800ff44:	4630      	mov	r0, r6
 800ff46:	4639      	mov	r1, r7
 800ff48:	f7f0 fdc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff4c:	ec4b ab19 	vmov	d9, sl, fp
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d054      	beq.n	800fffe <pow+0x152>
 800ff54:	4652      	mov	r2, sl
 800ff56:	465b      	mov	r3, fp
 800ff58:	4620      	mov	r0, r4
 800ff5a:	4629      	mov	r1, r5
 800ff5c:	f7f0 fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff60:	4680      	mov	r8, r0
 800ff62:	b318      	cbz	r0, 800ffac <pow+0x100>
 800ff64:	2301      	movs	r3, #1
 800ff66:	9302      	str	r3, [sp, #8]
 800ff68:	4b80      	ldr	r3, [pc, #512]	; (801016c <pow+0x2c0>)
 800ff6a:	9303      	str	r3, [sp, #12]
 800ff6c:	9b01      	ldr	r3, [sp, #4]
 800ff6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ff70:	9b00      	ldr	r3, [sp, #0]
 800ff72:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ff76:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ff7a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d0d5      	beq.n	800ff2e <pow+0x82>
 800ff82:	4b7b      	ldr	r3, [pc, #492]	; (8010170 <pow+0x2c4>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ff8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff8c:	b11b      	cbz	r3, 800ff96 <pow+0xea>
 800ff8e:	f7fa ffe9 	bl	800af64 <__errno>
 800ff92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff94:	6003      	str	r3, [r0, #0]
 800ff96:	ed9d 8b08 	vldr	d8, [sp, #32]
 800ff9a:	eeb0 0a48 	vmov.f32	s0, s16
 800ff9e:	eef0 0a68 	vmov.f32	s1, s17
 800ffa2:	b00d      	add	sp, #52	; 0x34
 800ffa4:	ecbd 8b04 	vpop	{d8-d9}
 800ffa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffac:	ec45 4b10 	vmov	d0, r4, r5
 800ffb0:	f002 faa3 	bl	80124fa <finite>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	d0f0      	beq.n	800ff9a <pow+0xee>
 800ffb8:	4652      	mov	r2, sl
 800ffba:	465b      	mov	r3, fp
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	4629      	mov	r1, r5
 800ffc0:	f7f0 fd94 	bl	8000aec <__aeabi_dcmplt>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	d0e8      	beq.n	800ff9a <pow+0xee>
 800ffc8:	2301      	movs	r3, #1
 800ffca:	9302      	str	r3, [sp, #8]
 800ffcc:	4b67      	ldr	r3, [pc, #412]	; (801016c <pow+0x2c0>)
 800ffce:	9303      	str	r3, [sp, #12]
 800ffd0:	f999 3000 	ldrsb.w	r3, [r9]
 800ffd4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800ffd8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ffdc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ffe0:	b913      	cbnz	r3, 800ffe8 <pow+0x13c>
 800ffe2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ffe6:	e7a2      	b.n	800ff2e <pow+0x82>
 800ffe8:	4962      	ldr	r1, [pc, #392]	; (8010174 <pow+0x2c8>)
 800ffea:	2000      	movs	r0, #0
 800ffec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fff0:	2b02      	cmp	r3, #2
 800fff2:	d19c      	bne.n	800ff2e <pow+0x82>
 800fff4:	f7fa ffb6 	bl	800af64 <__errno>
 800fff8:	2321      	movs	r3, #33	; 0x21
 800fffa:	6003      	str	r3, [r0, #0]
 800fffc:	e7c5      	b.n	800ff8a <pow+0xde>
 800fffe:	eeb0 0a48 	vmov.f32	s0, s16
 8010002:	eef0 0a68 	vmov.f32	s1, s17
 8010006:	f002 fa78 	bl	80124fa <finite>
 801000a:	9000      	str	r0, [sp, #0]
 801000c:	2800      	cmp	r0, #0
 801000e:	f040 8081 	bne.w	8010114 <pow+0x268>
 8010012:	ec47 6b10 	vmov	d0, r6, r7
 8010016:	f002 fa70 	bl	80124fa <finite>
 801001a:	2800      	cmp	r0, #0
 801001c:	d07a      	beq.n	8010114 <pow+0x268>
 801001e:	ec45 4b10 	vmov	d0, r4, r5
 8010022:	f002 fa6a 	bl	80124fa <finite>
 8010026:	2800      	cmp	r0, #0
 8010028:	d074      	beq.n	8010114 <pow+0x268>
 801002a:	ec53 2b18 	vmov	r2, r3, d8
 801002e:	ee18 0a10 	vmov	r0, s16
 8010032:	4619      	mov	r1, r3
 8010034:	f7f0 fd82 	bl	8000b3c <__aeabi_dcmpun>
 8010038:	f999 9000 	ldrsb.w	r9, [r9]
 801003c:	4b4b      	ldr	r3, [pc, #300]	; (801016c <pow+0x2c0>)
 801003e:	b1b0      	cbz	r0, 801006e <pow+0x1c2>
 8010040:	2201      	movs	r2, #1
 8010042:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010046:	9b00      	ldr	r3, [sp, #0]
 8010048:	930a      	str	r3, [sp, #40]	; 0x28
 801004a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801004e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010052:	f1b9 0f00 	cmp.w	r9, #0
 8010056:	d0c4      	beq.n	800ffe2 <pow+0x136>
 8010058:	4652      	mov	r2, sl
 801005a:	465b      	mov	r3, fp
 801005c:	4650      	mov	r0, sl
 801005e:	4659      	mov	r1, fp
 8010060:	f7f0 fbfc 	bl	800085c <__aeabi_ddiv>
 8010064:	f1b9 0f02 	cmp.w	r9, #2
 8010068:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801006c:	e7c1      	b.n	800fff2 <pow+0x146>
 801006e:	2203      	movs	r2, #3
 8010070:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010074:	900a      	str	r0, [sp, #40]	; 0x28
 8010076:	4629      	mov	r1, r5
 8010078:	4620      	mov	r0, r4
 801007a:	2200      	movs	r2, #0
 801007c:	4b3e      	ldr	r3, [pc, #248]	; (8010178 <pow+0x2cc>)
 801007e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010082:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010086:	f7f0 fabf 	bl	8000608 <__aeabi_dmul>
 801008a:	4604      	mov	r4, r0
 801008c:	460d      	mov	r5, r1
 801008e:	f1b9 0f00 	cmp.w	r9, #0
 8010092:	d124      	bne.n	80100de <pow+0x232>
 8010094:	4b39      	ldr	r3, [pc, #228]	; (801017c <pow+0x2d0>)
 8010096:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801009a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801009e:	4630      	mov	r0, r6
 80100a0:	4652      	mov	r2, sl
 80100a2:	465b      	mov	r3, fp
 80100a4:	4639      	mov	r1, r7
 80100a6:	f7f0 fd21 	bl	8000aec <__aeabi_dcmplt>
 80100aa:	2800      	cmp	r0, #0
 80100ac:	d056      	beq.n	801015c <pow+0x2b0>
 80100ae:	ec45 4b10 	vmov	d0, r4, r5
 80100b2:	f002 fabd 	bl	8012630 <rint>
 80100b6:	4622      	mov	r2, r4
 80100b8:	462b      	mov	r3, r5
 80100ba:	ec51 0b10 	vmov	r0, r1, d0
 80100be:	f7f0 fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80100c2:	b920      	cbnz	r0, 80100ce <pow+0x222>
 80100c4:	4b2e      	ldr	r3, [pc, #184]	; (8010180 <pow+0x2d4>)
 80100c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80100ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80100ce:	f998 3000 	ldrsb.w	r3, [r8]
 80100d2:	2b02      	cmp	r3, #2
 80100d4:	d142      	bne.n	801015c <pow+0x2b0>
 80100d6:	f7fa ff45 	bl	800af64 <__errno>
 80100da:	2322      	movs	r3, #34	; 0x22
 80100dc:	e78d      	b.n	800fffa <pow+0x14e>
 80100de:	4b29      	ldr	r3, [pc, #164]	; (8010184 <pow+0x2d8>)
 80100e0:	2200      	movs	r2, #0
 80100e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80100e6:	4630      	mov	r0, r6
 80100e8:	4652      	mov	r2, sl
 80100ea:	465b      	mov	r3, fp
 80100ec:	4639      	mov	r1, r7
 80100ee:	f7f0 fcfd 	bl	8000aec <__aeabi_dcmplt>
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d0eb      	beq.n	80100ce <pow+0x222>
 80100f6:	ec45 4b10 	vmov	d0, r4, r5
 80100fa:	f002 fa99 	bl	8012630 <rint>
 80100fe:	4622      	mov	r2, r4
 8010100:	462b      	mov	r3, r5
 8010102:	ec51 0b10 	vmov	r0, r1, d0
 8010106:	f7f0 fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 801010a:	2800      	cmp	r0, #0
 801010c:	d1df      	bne.n	80100ce <pow+0x222>
 801010e:	2200      	movs	r2, #0
 8010110:	4b18      	ldr	r3, [pc, #96]	; (8010174 <pow+0x2c8>)
 8010112:	e7da      	b.n	80100ca <pow+0x21e>
 8010114:	2200      	movs	r2, #0
 8010116:	2300      	movs	r3, #0
 8010118:	ec51 0b18 	vmov	r0, r1, d8
 801011c:	f7f0 fcdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8010120:	2800      	cmp	r0, #0
 8010122:	f43f af3a 	beq.w	800ff9a <pow+0xee>
 8010126:	ec47 6b10 	vmov	d0, r6, r7
 801012a:	f002 f9e6 	bl	80124fa <finite>
 801012e:	2800      	cmp	r0, #0
 8010130:	f43f af33 	beq.w	800ff9a <pow+0xee>
 8010134:	ec45 4b10 	vmov	d0, r4, r5
 8010138:	f002 f9df 	bl	80124fa <finite>
 801013c:	2800      	cmp	r0, #0
 801013e:	f43f af2c 	beq.w	800ff9a <pow+0xee>
 8010142:	2304      	movs	r3, #4
 8010144:	9302      	str	r3, [sp, #8]
 8010146:	4b09      	ldr	r3, [pc, #36]	; (801016c <pow+0x2c0>)
 8010148:	9303      	str	r3, [sp, #12]
 801014a:	2300      	movs	r3, #0
 801014c:	930a      	str	r3, [sp, #40]	; 0x28
 801014e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010152:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010156:	ed8d 9b08 	vstr	d9, [sp, #32]
 801015a:	e7b8      	b.n	80100ce <pow+0x222>
 801015c:	a802      	add	r0, sp, #8
 801015e:	f002 fa5b 	bl	8012618 <matherr>
 8010162:	2800      	cmp	r0, #0
 8010164:	f47f af11 	bne.w	800ff8a <pow+0xde>
 8010168:	e7b5      	b.n	80100d6 <pow+0x22a>
 801016a:	bf00      	nop
 801016c:	08012d4e 	.word	0x08012d4e
 8010170:	3ff00000 	.word	0x3ff00000
 8010174:	fff00000 	.word	0xfff00000
 8010178:	3fe00000 	.word	0x3fe00000
 801017c:	47efffff 	.word	0x47efffff
 8010180:	c7efffff 	.word	0xc7efffff
 8010184:	7ff00000 	.word	0x7ff00000
 8010188:	200003b8 	.word	0x200003b8

0801018c <sqrt>:
 801018c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010190:	ed2d 8b02 	vpush	{d8}
 8010194:	b08b      	sub	sp, #44	; 0x2c
 8010196:	ec55 4b10 	vmov	r4, r5, d0
 801019a:	f001 fa8f 	bl	80116bc <__ieee754_sqrt>
 801019e:	4b26      	ldr	r3, [pc, #152]	; (8010238 <sqrt+0xac>)
 80101a0:	eeb0 8a40 	vmov.f32	s16, s0
 80101a4:	eef0 8a60 	vmov.f32	s17, s1
 80101a8:	f993 6000 	ldrsb.w	r6, [r3]
 80101ac:	1c73      	adds	r3, r6, #1
 80101ae:	d02a      	beq.n	8010206 <sqrt+0x7a>
 80101b0:	4622      	mov	r2, r4
 80101b2:	462b      	mov	r3, r5
 80101b4:	4620      	mov	r0, r4
 80101b6:	4629      	mov	r1, r5
 80101b8:	f7f0 fcc0 	bl	8000b3c <__aeabi_dcmpun>
 80101bc:	4607      	mov	r7, r0
 80101be:	bb10      	cbnz	r0, 8010206 <sqrt+0x7a>
 80101c0:	f04f 0800 	mov.w	r8, #0
 80101c4:	f04f 0900 	mov.w	r9, #0
 80101c8:	4642      	mov	r2, r8
 80101ca:	464b      	mov	r3, r9
 80101cc:	4620      	mov	r0, r4
 80101ce:	4629      	mov	r1, r5
 80101d0:	f7f0 fc8c 	bl	8000aec <__aeabi_dcmplt>
 80101d4:	b1b8      	cbz	r0, 8010206 <sqrt+0x7a>
 80101d6:	2301      	movs	r3, #1
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	4b18      	ldr	r3, [pc, #96]	; (801023c <sqrt+0xb0>)
 80101dc:	9301      	str	r3, [sp, #4]
 80101de:	9708      	str	r7, [sp, #32]
 80101e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80101e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80101e8:	b9b6      	cbnz	r6, 8010218 <sqrt+0x8c>
 80101ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80101ee:	4668      	mov	r0, sp
 80101f0:	f002 fa12 	bl	8012618 <matherr>
 80101f4:	b1d0      	cbz	r0, 801022c <sqrt+0xa0>
 80101f6:	9b08      	ldr	r3, [sp, #32]
 80101f8:	b11b      	cbz	r3, 8010202 <sqrt+0x76>
 80101fa:	f7fa feb3 	bl	800af64 <__errno>
 80101fe:	9b08      	ldr	r3, [sp, #32]
 8010200:	6003      	str	r3, [r0, #0]
 8010202:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010206:	eeb0 0a48 	vmov.f32	s0, s16
 801020a:	eef0 0a68 	vmov.f32	s1, s17
 801020e:	b00b      	add	sp, #44	; 0x2c
 8010210:	ecbd 8b02 	vpop	{d8}
 8010214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010218:	4642      	mov	r2, r8
 801021a:	464b      	mov	r3, r9
 801021c:	4640      	mov	r0, r8
 801021e:	4649      	mov	r1, r9
 8010220:	f7f0 fb1c 	bl	800085c <__aeabi_ddiv>
 8010224:	2e02      	cmp	r6, #2
 8010226:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801022a:	d1e0      	bne.n	80101ee <sqrt+0x62>
 801022c:	f7fa fe9a 	bl	800af64 <__errno>
 8010230:	2321      	movs	r3, #33	; 0x21
 8010232:	6003      	str	r3, [r0, #0]
 8010234:	e7df      	b.n	80101f6 <sqrt+0x6a>
 8010236:	bf00      	nop
 8010238:	200003b8 	.word	0x200003b8
 801023c:	08012d52 	.word	0x08012d52

08010240 <__ieee754_acos>:
 8010240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010244:	ec55 4b10 	vmov	r4, r5, d0
 8010248:	49b7      	ldr	r1, [pc, #732]	; (8010528 <__ieee754_acos+0x2e8>)
 801024a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801024e:	428b      	cmp	r3, r1
 8010250:	dd1b      	ble.n	801028a <__ieee754_acos+0x4a>
 8010252:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010256:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801025a:	4323      	orrs	r3, r4
 801025c:	d109      	bne.n	8010272 <__ieee754_acos+0x32>
 801025e:	2d00      	cmp	r5, #0
 8010260:	f300 8211 	bgt.w	8010686 <__ieee754_acos+0x446>
 8010264:	a196      	add	r1, pc, #600	; (adr r1, 80104c0 <__ieee754_acos+0x280>)
 8010266:	e9d1 0100 	ldrd	r0, r1, [r1]
 801026a:	ec41 0b10 	vmov	d0, r0, r1
 801026e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010272:	ee10 2a10 	vmov	r2, s0
 8010276:	462b      	mov	r3, r5
 8010278:	4620      	mov	r0, r4
 801027a:	4629      	mov	r1, r5
 801027c:	f7f0 f80c 	bl	8000298 <__aeabi_dsub>
 8010280:	4602      	mov	r2, r0
 8010282:	460b      	mov	r3, r1
 8010284:	f7f0 faea 	bl	800085c <__aeabi_ddiv>
 8010288:	e7ef      	b.n	801026a <__ieee754_acos+0x2a>
 801028a:	49a8      	ldr	r1, [pc, #672]	; (801052c <__ieee754_acos+0x2ec>)
 801028c:	428b      	cmp	r3, r1
 801028e:	f300 8087 	bgt.w	80103a0 <__ieee754_acos+0x160>
 8010292:	4aa7      	ldr	r2, [pc, #668]	; (8010530 <__ieee754_acos+0x2f0>)
 8010294:	4293      	cmp	r3, r2
 8010296:	f340 81f9 	ble.w	801068c <__ieee754_acos+0x44c>
 801029a:	ee10 2a10 	vmov	r2, s0
 801029e:	ee10 0a10 	vmov	r0, s0
 80102a2:	462b      	mov	r3, r5
 80102a4:	4629      	mov	r1, r5
 80102a6:	f7f0 f9af 	bl	8000608 <__aeabi_dmul>
 80102aa:	a387      	add	r3, pc, #540	; (adr r3, 80104c8 <__ieee754_acos+0x288>)
 80102ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b0:	4606      	mov	r6, r0
 80102b2:	460f      	mov	r7, r1
 80102b4:	f7f0 f9a8 	bl	8000608 <__aeabi_dmul>
 80102b8:	a385      	add	r3, pc, #532	; (adr r3, 80104d0 <__ieee754_acos+0x290>)
 80102ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102be:	f7ef ffed 	bl	800029c <__adddf3>
 80102c2:	4632      	mov	r2, r6
 80102c4:	463b      	mov	r3, r7
 80102c6:	f7f0 f99f 	bl	8000608 <__aeabi_dmul>
 80102ca:	a383      	add	r3, pc, #524	; (adr r3, 80104d8 <__ieee754_acos+0x298>)
 80102cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d0:	f7ef ffe2 	bl	8000298 <__aeabi_dsub>
 80102d4:	4632      	mov	r2, r6
 80102d6:	463b      	mov	r3, r7
 80102d8:	f7f0 f996 	bl	8000608 <__aeabi_dmul>
 80102dc:	a380      	add	r3, pc, #512	; (adr r3, 80104e0 <__ieee754_acos+0x2a0>)
 80102de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e2:	f7ef ffdb 	bl	800029c <__adddf3>
 80102e6:	4632      	mov	r2, r6
 80102e8:	463b      	mov	r3, r7
 80102ea:	f7f0 f98d 	bl	8000608 <__aeabi_dmul>
 80102ee:	a37e      	add	r3, pc, #504	; (adr r3, 80104e8 <__ieee754_acos+0x2a8>)
 80102f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f4:	f7ef ffd0 	bl	8000298 <__aeabi_dsub>
 80102f8:	4632      	mov	r2, r6
 80102fa:	463b      	mov	r3, r7
 80102fc:	f7f0 f984 	bl	8000608 <__aeabi_dmul>
 8010300:	a37b      	add	r3, pc, #492	; (adr r3, 80104f0 <__ieee754_acos+0x2b0>)
 8010302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010306:	f7ef ffc9 	bl	800029c <__adddf3>
 801030a:	4632      	mov	r2, r6
 801030c:	463b      	mov	r3, r7
 801030e:	f7f0 f97b 	bl	8000608 <__aeabi_dmul>
 8010312:	a379      	add	r3, pc, #484	; (adr r3, 80104f8 <__ieee754_acos+0x2b8>)
 8010314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010318:	4680      	mov	r8, r0
 801031a:	4689      	mov	r9, r1
 801031c:	4630      	mov	r0, r6
 801031e:	4639      	mov	r1, r7
 8010320:	f7f0 f972 	bl	8000608 <__aeabi_dmul>
 8010324:	a376      	add	r3, pc, #472	; (adr r3, 8010500 <__ieee754_acos+0x2c0>)
 8010326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032a:	f7ef ffb5 	bl	8000298 <__aeabi_dsub>
 801032e:	4632      	mov	r2, r6
 8010330:	463b      	mov	r3, r7
 8010332:	f7f0 f969 	bl	8000608 <__aeabi_dmul>
 8010336:	a374      	add	r3, pc, #464	; (adr r3, 8010508 <__ieee754_acos+0x2c8>)
 8010338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033c:	f7ef ffae 	bl	800029c <__adddf3>
 8010340:	4632      	mov	r2, r6
 8010342:	463b      	mov	r3, r7
 8010344:	f7f0 f960 	bl	8000608 <__aeabi_dmul>
 8010348:	a371      	add	r3, pc, #452	; (adr r3, 8010510 <__ieee754_acos+0x2d0>)
 801034a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801034e:	f7ef ffa3 	bl	8000298 <__aeabi_dsub>
 8010352:	4632      	mov	r2, r6
 8010354:	463b      	mov	r3, r7
 8010356:	f7f0 f957 	bl	8000608 <__aeabi_dmul>
 801035a:	2200      	movs	r2, #0
 801035c:	4b75      	ldr	r3, [pc, #468]	; (8010534 <__ieee754_acos+0x2f4>)
 801035e:	f7ef ff9d 	bl	800029c <__adddf3>
 8010362:	4602      	mov	r2, r0
 8010364:	460b      	mov	r3, r1
 8010366:	4640      	mov	r0, r8
 8010368:	4649      	mov	r1, r9
 801036a:	f7f0 fa77 	bl	800085c <__aeabi_ddiv>
 801036e:	4622      	mov	r2, r4
 8010370:	462b      	mov	r3, r5
 8010372:	f7f0 f949 	bl	8000608 <__aeabi_dmul>
 8010376:	4602      	mov	r2, r0
 8010378:	460b      	mov	r3, r1
 801037a:	a167      	add	r1, pc, #412	; (adr r1, 8010518 <__ieee754_acos+0x2d8>)
 801037c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010380:	f7ef ff8a 	bl	8000298 <__aeabi_dsub>
 8010384:	4602      	mov	r2, r0
 8010386:	460b      	mov	r3, r1
 8010388:	4620      	mov	r0, r4
 801038a:	4629      	mov	r1, r5
 801038c:	f7ef ff84 	bl	8000298 <__aeabi_dsub>
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	a162      	add	r1, pc, #392	; (adr r1, 8010520 <__ieee754_acos+0x2e0>)
 8010396:	e9d1 0100 	ldrd	r0, r1, [r1]
 801039a:	f7ef ff7d 	bl	8000298 <__aeabi_dsub>
 801039e:	e764      	b.n	801026a <__ieee754_acos+0x2a>
 80103a0:	2d00      	cmp	r5, #0
 80103a2:	f280 80cb 	bge.w	801053c <__ieee754_acos+0x2fc>
 80103a6:	ee10 0a10 	vmov	r0, s0
 80103aa:	2200      	movs	r2, #0
 80103ac:	4b61      	ldr	r3, [pc, #388]	; (8010534 <__ieee754_acos+0x2f4>)
 80103ae:	4629      	mov	r1, r5
 80103b0:	f7ef ff74 	bl	800029c <__adddf3>
 80103b4:	2200      	movs	r2, #0
 80103b6:	4b60      	ldr	r3, [pc, #384]	; (8010538 <__ieee754_acos+0x2f8>)
 80103b8:	f7f0 f926 	bl	8000608 <__aeabi_dmul>
 80103bc:	a342      	add	r3, pc, #264	; (adr r3, 80104c8 <__ieee754_acos+0x288>)
 80103be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c2:	4604      	mov	r4, r0
 80103c4:	460d      	mov	r5, r1
 80103c6:	f7f0 f91f 	bl	8000608 <__aeabi_dmul>
 80103ca:	a341      	add	r3, pc, #260	; (adr r3, 80104d0 <__ieee754_acos+0x290>)
 80103cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d0:	f7ef ff64 	bl	800029c <__adddf3>
 80103d4:	4622      	mov	r2, r4
 80103d6:	462b      	mov	r3, r5
 80103d8:	f7f0 f916 	bl	8000608 <__aeabi_dmul>
 80103dc:	a33e      	add	r3, pc, #248	; (adr r3, 80104d8 <__ieee754_acos+0x298>)
 80103de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e2:	f7ef ff59 	bl	8000298 <__aeabi_dsub>
 80103e6:	4622      	mov	r2, r4
 80103e8:	462b      	mov	r3, r5
 80103ea:	f7f0 f90d 	bl	8000608 <__aeabi_dmul>
 80103ee:	a33c      	add	r3, pc, #240	; (adr r3, 80104e0 <__ieee754_acos+0x2a0>)
 80103f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f4:	f7ef ff52 	bl	800029c <__adddf3>
 80103f8:	4622      	mov	r2, r4
 80103fa:	462b      	mov	r3, r5
 80103fc:	f7f0 f904 	bl	8000608 <__aeabi_dmul>
 8010400:	a339      	add	r3, pc, #228	; (adr r3, 80104e8 <__ieee754_acos+0x2a8>)
 8010402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010406:	f7ef ff47 	bl	8000298 <__aeabi_dsub>
 801040a:	4622      	mov	r2, r4
 801040c:	462b      	mov	r3, r5
 801040e:	f7f0 f8fb 	bl	8000608 <__aeabi_dmul>
 8010412:	a337      	add	r3, pc, #220	; (adr r3, 80104f0 <__ieee754_acos+0x2b0>)
 8010414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010418:	f7ef ff40 	bl	800029c <__adddf3>
 801041c:	4622      	mov	r2, r4
 801041e:	462b      	mov	r3, r5
 8010420:	f7f0 f8f2 	bl	8000608 <__aeabi_dmul>
 8010424:	ec45 4b10 	vmov	d0, r4, r5
 8010428:	4680      	mov	r8, r0
 801042a:	4689      	mov	r9, r1
 801042c:	f001 f946 	bl	80116bc <__ieee754_sqrt>
 8010430:	a331      	add	r3, pc, #196	; (adr r3, 80104f8 <__ieee754_acos+0x2b8>)
 8010432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010436:	4620      	mov	r0, r4
 8010438:	4629      	mov	r1, r5
 801043a:	ec57 6b10 	vmov	r6, r7, d0
 801043e:	f7f0 f8e3 	bl	8000608 <__aeabi_dmul>
 8010442:	a32f      	add	r3, pc, #188	; (adr r3, 8010500 <__ieee754_acos+0x2c0>)
 8010444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010448:	f7ef ff26 	bl	8000298 <__aeabi_dsub>
 801044c:	4622      	mov	r2, r4
 801044e:	462b      	mov	r3, r5
 8010450:	f7f0 f8da 	bl	8000608 <__aeabi_dmul>
 8010454:	a32c      	add	r3, pc, #176	; (adr r3, 8010508 <__ieee754_acos+0x2c8>)
 8010456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045a:	f7ef ff1f 	bl	800029c <__adddf3>
 801045e:	4622      	mov	r2, r4
 8010460:	462b      	mov	r3, r5
 8010462:	f7f0 f8d1 	bl	8000608 <__aeabi_dmul>
 8010466:	a32a      	add	r3, pc, #168	; (adr r3, 8010510 <__ieee754_acos+0x2d0>)
 8010468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046c:	f7ef ff14 	bl	8000298 <__aeabi_dsub>
 8010470:	4622      	mov	r2, r4
 8010472:	462b      	mov	r3, r5
 8010474:	f7f0 f8c8 	bl	8000608 <__aeabi_dmul>
 8010478:	2200      	movs	r2, #0
 801047a:	4b2e      	ldr	r3, [pc, #184]	; (8010534 <__ieee754_acos+0x2f4>)
 801047c:	f7ef ff0e 	bl	800029c <__adddf3>
 8010480:	4602      	mov	r2, r0
 8010482:	460b      	mov	r3, r1
 8010484:	4640      	mov	r0, r8
 8010486:	4649      	mov	r1, r9
 8010488:	f7f0 f9e8 	bl	800085c <__aeabi_ddiv>
 801048c:	4632      	mov	r2, r6
 801048e:	463b      	mov	r3, r7
 8010490:	f7f0 f8ba 	bl	8000608 <__aeabi_dmul>
 8010494:	a320      	add	r3, pc, #128	; (adr r3, 8010518 <__ieee754_acos+0x2d8>)
 8010496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049a:	f7ef fefd 	bl	8000298 <__aeabi_dsub>
 801049e:	4632      	mov	r2, r6
 80104a0:	463b      	mov	r3, r7
 80104a2:	f7ef fefb 	bl	800029c <__adddf3>
 80104a6:	4602      	mov	r2, r0
 80104a8:	460b      	mov	r3, r1
 80104aa:	f7ef fef7 	bl	800029c <__adddf3>
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	a103      	add	r1, pc, #12	; (adr r1, 80104c0 <__ieee754_acos+0x280>)
 80104b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104b8:	e76f      	b.n	801039a <__ieee754_acos+0x15a>
 80104ba:	bf00      	nop
 80104bc:	f3af 8000 	nop.w
 80104c0:	54442d18 	.word	0x54442d18
 80104c4:	400921fb 	.word	0x400921fb
 80104c8:	0dfdf709 	.word	0x0dfdf709
 80104cc:	3f023de1 	.word	0x3f023de1
 80104d0:	7501b288 	.word	0x7501b288
 80104d4:	3f49efe0 	.word	0x3f49efe0
 80104d8:	b5688f3b 	.word	0xb5688f3b
 80104dc:	3fa48228 	.word	0x3fa48228
 80104e0:	0e884455 	.word	0x0e884455
 80104e4:	3fc9c155 	.word	0x3fc9c155
 80104e8:	03eb6f7d 	.word	0x03eb6f7d
 80104ec:	3fd4d612 	.word	0x3fd4d612
 80104f0:	55555555 	.word	0x55555555
 80104f4:	3fc55555 	.word	0x3fc55555
 80104f8:	b12e9282 	.word	0xb12e9282
 80104fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8010500:	1b8d0159 	.word	0x1b8d0159
 8010504:	3fe6066c 	.word	0x3fe6066c
 8010508:	9c598ac8 	.word	0x9c598ac8
 801050c:	40002ae5 	.word	0x40002ae5
 8010510:	1c8a2d4b 	.word	0x1c8a2d4b
 8010514:	40033a27 	.word	0x40033a27
 8010518:	33145c07 	.word	0x33145c07
 801051c:	3c91a626 	.word	0x3c91a626
 8010520:	54442d18 	.word	0x54442d18
 8010524:	3ff921fb 	.word	0x3ff921fb
 8010528:	3fefffff 	.word	0x3fefffff
 801052c:	3fdfffff 	.word	0x3fdfffff
 8010530:	3c600000 	.word	0x3c600000
 8010534:	3ff00000 	.word	0x3ff00000
 8010538:	3fe00000 	.word	0x3fe00000
 801053c:	ee10 2a10 	vmov	r2, s0
 8010540:	462b      	mov	r3, r5
 8010542:	2000      	movs	r0, #0
 8010544:	496a      	ldr	r1, [pc, #424]	; (80106f0 <__ieee754_acos+0x4b0>)
 8010546:	f7ef fea7 	bl	8000298 <__aeabi_dsub>
 801054a:	2200      	movs	r2, #0
 801054c:	4b69      	ldr	r3, [pc, #420]	; (80106f4 <__ieee754_acos+0x4b4>)
 801054e:	f7f0 f85b 	bl	8000608 <__aeabi_dmul>
 8010552:	4604      	mov	r4, r0
 8010554:	460d      	mov	r5, r1
 8010556:	ec45 4b10 	vmov	d0, r4, r5
 801055a:	f001 f8af 	bl	80116bc <__ieee754_sqrt>
 801055e:	a34e      	add	r3, pc, #312	; (adr r3, 8010698 <__ieee754_acos+0x458>)
 8010560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010564:	4620      	mov	r0, r4
 8010566:	4629      	mov	r1, r5
 8010568:	ec59 8b10 	vmov	r8, r9, d0
 801056c:	f7f0 f84c 	bl	8000608 <__aeabi_dmul>
 8010570:	a34b      	add	r3, pc, #300	; (adr r3, 80106a0 <__ieee754_acos+0x460>)
 8010572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010576:	f7ef fe91 	bl	800029c <__adddf3>
 801057a:	4622      	mov	r2, r4
 801057c:	462b      	mov	r3, r5
 801057e:	f7f0 f843 	bl	8000608 <__aeabi_dmul>
 8010582:	a349      	add	r3, pc, #292	; (adr r3, 80106a8 <__ieee754_acos+0x468>)
 8010584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010588:	f7ef fe86 	bl	8000298 <__aeabi_dsub>
 801058c:	4622      	mov	r2, r4
 801058e:	462b      	mov	r3, r5
 8010590:	f7f0 f83a 	bl	8000608 <__aeabi_dmul>
 8010594:	a346      	add	r3, pc, #280	; (adr r3, 80106b0 <__ieee754_acos+0x470>)
 8010596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059a:	f7ef fe7f 	bl	800029c <__adddf3>
 801059e:	4622      	mov	r2, r4
 80105a0:	462b      	mov	r3, r5
 80105a2:	f7f0 f831 	bl	8000608 <__aeabi_dmul>
 80105a6:	a344      	add	r3, pc, #272	; (adr r3, 80106b8 <__ieee754_acos+0x478>)
 80105a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ac:	f7ef fe74 	bl	8000298 <__aeabi_dsub>
 80105b0:	4622      	mov	r2, r4
 80105b2:	462b      	mov	r3, r5
 80105b4:	f7f0 f828 	bl	8000608 <__aeabi_dmul>
 80105b8:	a341      	add	r3, pc, #260	; (adr r3, 80106c0 <__ieee754_acos+0x480>)
 80105ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105be:	f7ef fe6d 	bl	800029c <__adddf3>
 80105c2:	4622      	mov	r2, r4
 80105c4:	462b      	mov	r3, r5
 80105c6:	f7f0 f81f 	bl	8000608 <__aeabi_dmul>
 80105ca:	a33f      	add	r3, pc, #252	; (adr r3, 80106c8 <__ieee754_acos+0x488>)
 80105cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d0:	4682      	mov	sl, r0
 80105d2:	468b      	mov	fp, r1
 80105d4:	4620      	mov	r0, r4
 80105d6:	4629      	mov	r1, r5
 80105d8:	f7f0 f816 	bl	8000608 <__aeabi_dmul>
 80105dc:	a33c      	add	r3, pc, #240	; (adr r3, 80106d0 <__ieee754_acos+0x490>)
 80105de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e2:	f7ef fe59 	bl	8000298 <__aeabi_dsub>
 80105e6:	4622      	mov	r2, r4
 80105e8:	462b      	mov	r3, r5
 80105ea:	f7f0 f80d 	bl	8000608 <__aeabi_dmul>
 80105ee:	a33a      	add	r3, pc, #232	; (adr r3, 80106d8 <__ieee754_acos+0x498>)
 80105f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f4:	f7ef fe52 	bl	800029c <__adddf3>
 80105f8:	4622      	mov	r2, r4
 80105fa:	462b      	mov	r3, r5
 80105fc:	f7f0 f804 	bl	8000608 <__aeabi_dmul>
 8010600:	a337      	add	r3, pc, #220	; (adr r3, 80106e0 <__ieee754_acos+0x4a0>)
 8010602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010606:	f7ef fe47 	bl	8000298 <__aeabi_dsub>
 801060a:	4622      	mov	r2, r4
 801060c:	462b      	mov	r3, r5
 801060e:	f7ef fffb 	bl	8000608 <__aeabi_dmul>
 8010612:	2200      	movs	r2, #0
 8010614:	4b36      	ldr	r3, [pc, #216]	; (80106f0 <__ieee754_acos+0x4b0>)
 8010616:	f7ef fe41 	bl	800029c <__adddf3>
 801061a:	4602      	mov	r2, r0
 801061c:	460b      	mov	r3, r1
 801061e:	4650      	mov	r0, sl
 8010620:	4659      	mov	r1, fp
 8010622:	f7f0 f91b 	bl	800085c <__aeabi_ddiv>
 8010626:	4642      	mov	r2, r8
 8010628:	464b      	mov	r3, r9
 801062a:	f7ef ffed 	bl	8000608 <__aeabi_dmul>
 801062e:	2600      	movs	r6, #0
 8010630:	4682      	mov	sl, r0
 8010632:	468b      	mov	fp, r1
 8010634:	4632      	mov	r2, r6
 8010636:	464b      	mov	r3, r9
 8010638:	4630      	mov	r0, r6
 801063a:	4649      	mov	r1, r9
 801063c:	f7ef ffe4 	bl	8000608 <__aeabi_dmul>
 8010640:	4602      	mov	r2, r0
 8010642:	460b      	mov	r3, r1
 8010644:	4620      	mov	r0, r4
 8010646:	4629      	mov	r1, r5
 8010648:	f7ef fe26 	bl	8000298 <__aeabi_dsub>
 801064c:	4632      	mov	r2, r6
 801064e:	4604      	mov	r4, r0
 8010650:	460d      	mov	r5, r1
 8010652:	464b      	mov	r3, r9
 8010654:	4640      	mov	r0, r8
 8010656:	4649      	mov	r1, r9
 8010658:	f7ef fe20 	bl	800029c <__adddf3>
 801065c:	4602      	mov	r2, r0
 801065e:	460b      	mov	r3, r1
 8010660:	4620      	mov	r0, r4
 8010662:	4629      	mov	r1, r5
 8010664:	f7f0 f8fa 	bl	800085c <__aeabi_ddiv>
 8010668:	4602      	mov	r2, r0
 801066a:	460b      	mov	r3, r1
 801066c:	4650      	mov	r0, sl
 801066e:	4659      	mov	r1, fp
 8010670:	f7ef fe14 	bl	800029c <__adddf3>
 8010674:	4632      	mov	r2, r6
 8010676:	464b      	mov	r3, r9
 8010678:	f7ef fe10 	bl	800029c <__adddf3>
 801067c:	4602      	mov	r2, r0
 801067e:	460b      	mov	r3, r1
 8010680:	f7ef fe0c 	bl	800029c <__adddf3>
 8010684:	e5f1      	b.n	801026a <__ieee754_acos+0x2a>
 8010686:	2000      	movs	r0, #0
 8010688:	2100      	movs	r1, #0
 801068a:	e5ee      	b.n	801026a <__ieee754_acos+0x2a>
 801068c:	a116      	add	r1, pc, #88	; (adr r1, 80106e8 <__ieee754_acos+0x4a8>)
 801068e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010692:	e5ea      	b.n	801026a <__ieee754_acos+0x2a>
 8010694:	f3af 8000 	nop.w
 8010698:	0dfdf709 	.word	0x0dfdf709
 801069c:	3f023de1 	.word	0x3f023de1
 80106a0:	7501b288 	.word	0x7501b288
 80106a4:	3f49efe0 	.word	0x3f49efe0
 80106a8:	b5688f3b 	.word	0xb5688f3b
 80106ac:	3fa48228 	.word	0x3fa48228
 80106b0:	0e884455 	.word	0x0e884455
 80106b4:	3fc9c155 	.word	0x3fc9c155
 80106b8:	03eb6f7d 	.word	0x03eb6f7d
 80106bc:	3fd4d612 	.word	0x3fd4d612
 80106c0:	55555555 	.word	0x55555555
 80106c4:	3fc55555 	.word	0x3fc55555
 80106c8:	b12e9282 	.word	0xb12e9282
 80106cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80106d0:	1b8d0159 	.word	0x1b8d0159
 80106d4:	3fe6066c 	.word	0x3fe6066c
 80106d8:	9c598ac8 	.word	0x9c598ac8
 80106dc:	40002ae5 	.word	0x40002ae5
 80106e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80106e4:	40033a27 	.word	0x40033a27
 80106e8:	54442d18 	.word	0x54442d18
 80106ec:	3ff921fb 	.word	0x3ff921fb
 80106f0:	3ff00000 	.word	0x3ff00000
 80106f4:	3fe00000 	.word	0x3fe00000

080106f8 <__ieee754_atan2>:
 80106f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106fc:	ec57 6b11 	vmov	r6, r7, d1
 8010700:	4273      	negs	r3, r6
 8010702:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010706:	4333      	orrs	r3, r6
 8010708:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80108b0 <__ieee754_atan2+0x1b8>
 801070c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010710:	4573      	cmp	r3, lr
 8010712:	ec51 0b10 	vmov	r0, r1, d0
 8010716:	ee11 8a10 	vmov	r8, s2
 801071a:	d80a      	bhi.n	8010732 <__ieee754_atan2+0x3a>
 801071c:	4244      	negs	r4, r0
 801071e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010722:	4304      	orrs	r4, r0
 8010724:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010728:	4574      	cmp	r4, lr
 801072a:	468c      	mov	ip, r1
 801072c:	ee10 9a10 	vmov	r9, s0
 8010730:	d907      	bls.n	8010742 <__ieee754_atan2+0x4a>
 8010732:	4632      	mov	r2, r6
 8010734:	463b      	mov	r3, r7
 8010736:	f7ef fdb1 	bl	800029c <__adddf3>
 801073a:	ec41 0b10 	vmov	d0, r0, r1
 801073e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010742:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010746:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801074a:	4334      	orrs	r4, r6
 801074c:	d103      	bne.n	8010756 <__ieee754_atan2+0x5e>
 801074e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010752:	f001 bd29 	b.w	80121a8 <atan>
 8010756:	17bc      	asrs	r4, r7, #30
 8010758:	f004 0402 	and.w	r4, r4, #2
 801075c:	ea53 0909 	orrs.w	r9, r3, r9
 8010760:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010764:	d107      	bne.n	8010776 <__ieee754_atan2+0x7e>
 8010766:	2c02      	cmp	r4, #2
 8010768:	d073      	beq.n	8010852 <__ieee754_atan2+0x15a>
 801076a:	2c03      	cmp	r4, #3
 801076c:	d1e5      	bne.n	801073a <__ieee754_atan2+0x42>
 801076e:	a13e      	add	r1, pc, #248	; (adr r1, 8010868 <__ieee754_atan2+0x170>)
 8010770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010774:	e7e1      	b.n	801073a <__ieee754_atan2+0x42>
 8010776:	ea52 0808 	orrs.w	r8, r2, r8
 801077a:	d106      	bne.n	801078a <__ieee754_atan2+0x92>
 801077c:	f1bc 0f00 	cmp.w	ip, #0
 8010780:	da6b      	bge.n	801085a <__ieee754_atan2+0x162>
 8010782:	a13b      	add	r1, pc, #236	; (adr r1, 8010870 <__ieee754_atan2+0x178>)
 8010784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010788:	e7d7      	b.n	801073a <__ieee754_atan2+0x42>
 801078a:	4572      	cmp	r2, lr
 801078c:	d120      	bne.n	80107d0 <__ieee754_atan2+0xd8>
 801078e:	4293      	cmp	r3, r2
 8010790:	d111      	bne.n	80107b6 <__ieee754_atan2+0xbe>
 8010792:	2c02      	cmp	r4, #2
 8010794:	d007      	beq.n	80107a6 <__ieee754_atan2+0xae>
 8010796:	2c03      	cmp	r4, #3
 8010798:	d009      	beq.n	80107ae <__ieee754_atan2+0xb6>
 801079a:	2c01      	cmp	r4, #1
 801079c:	d155      	bne.n	801084a <__ieee754_atan2+0x152>
 801079e:	a136      	add	r1, pc, #216	; (adr r1, 8010878 <__ieee754_atan2+0x180>)
 80107a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107a4:	e7c9      	b.n	801073a <__ieee754_atan2+0x42>
 80107a6:	a136      	add	r1, pc, #216	; (adr r1, 8010880 <__ieee754_atan2+0x188>)
 80107a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107ac:	e7c5      	b.n	801073a <__ieee754_atan2+0x42>
 80107ae:	a136      	add	r1, pc, #216	; (adr r1, 8010888 <__ieee754_atan2+0x190>)
 80107b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107b4:	e7c1      	b.n	801073a <__ieee754_atan2+0x42>
 80107b6:	2c02      	cmp	r4, #2
 80107b8:	d04b      	beq.n	8010852 <__ieee754_atan2+0x15a>
 80107ba:	2c03      	cmp	r4, #3
 80107bc:	d0d7      	beq.n	801076e <__ieee754_atan2+0x76>
 80107be:	2c01      	cmp	r4, #1
 80107c0:	f04f 0000 	mov.w	r0, #0
 80107c4:	d102      	bne.n	80107cc <__ieee754_atan2+0xd4>
 80107c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80107ca:	e7b6      	b.n	801073a <__ieee754_atan2+0x42>
 80107cc:	2100      	movs	r1, #0
 80107ce:	e7b4      	b.n	801073a <__ieee754_atan2+0x42>
 80107d0:	4573      	cmp	r3, lr
 80107d2:	d0d3      	beq.n	801077c <__ieee754_atan2+0x84>
 80107d4:	1a9b      	subs	r3, r3, r2
 80107d6:	151b      	asrs	r3, r3, #20
 80107d8:	2b3c      	cmp	r3, #60	; 0x3c
 80107da:	dc1e      	bgt.n	801081a <__ieee754_atan2+0x122>
 80107dc:	2f00      	cmp	r7, #0
 80107de:	da01      	bge.n	80107e4 <__ieee754_atan2+0xec>
 80107e0:	333c      	adds	r3, #60	; 0x3c
 80107e2:	db1e      	blt.n	8010822 <__ieee754_atan2+0x12a>
 80107e4:	4632      	mov	r2, r6
 80107e6:	463b      	mov	r3, r7
 80107e8:	f7f0 f838 	bl	800085c <__aeabi_ddiv>
 80107ec:	ec41 0b10 	vmov	d0, r0, r1
 80107f0:	f001 fe7a 	bl	80124e8 <fabs>
 80107f4:	f001 fcd8 	bl	80121a8 <atan>
 80107f8:	ec51 0b10 	vmov	r0, r1, d0
 80107fc:	2c01      	cmp	r4, #1
 80107fe:	d013      	beq.n	8010828 <__ieee754_atan2+0x130>
 8010800:	2c02      	cmp	r4, #2
 8010802:	d015      	beq.n	8010830 <__ieee754_atan2+0x138>
 8010804:	2c00      	cmp	r4, #0
 8010806:	d098      	beq.n	801073a <__ieee754_atan2+0x42>
 8010808:	a321      	add	r3, pc, #132	; (adr r3, 8010890 <__ieee754_atan2+0x198>)
 801080a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080e:	f7ef fd43 	bl	8000298 <__aeabi_dsub>
 8010812:	a321      	add	r3, pc, #132	; (adr r3, 8010898 <__ieee754_atan2+0x1a0>)
 8010814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010818:	e014      	b.n	8010844 <__ieee754_atan2+0x14c>
 801081a:	a121      	add	r1, pc, #132	; (adr r1, 80108a0 <__ieee754_atan2+0x1a8>)
 801081c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010820:	e7ec      	b.n	80107fc <__ieee754_atan2+0x104>
 8010822:	2000      	movs	r0, #0
 8010824:	2100      	movs	r1, #0
 8010826:	e7e9      	b.n	80107fc <__ieee754_atan2+0x104>
 8010828:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801082c:	4619      	mov	r1, r3
 801082e:	e784      	b.n	801073a <__ieee754_atan2+0x42>
 8010830:	a317      	add	r3, pc, #92	; (adr r3, 8010890 <__ieee754_atan2+0x198>)
 8010832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010836:	f7ef fd2f 	bl	8000298 <__aeabi_dsub>
 801083a:	4602      	mov	r2, r0
 801083c:	460b      	mov	r3, r1
 801083e:	a116      	add	r1, pc, #88	; (adr r1, 8010898 <__ieee754_atan2+0x1a0>)
 8010840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010844:	f7ef fd28 	bl	8000298 <__aeabi_dsub>
 8010848:	e777      	b.n	801073a <__ieee754_atan2+0x42>
 801084a:	a117      	add	r1, pc, #92	; (adr r1, 80108a8 <__ieee754_atan2+0x1b0>)
 801084c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010850:	e773      	b.n	801073a <__ieee754_atan2+0x42>
 8010852:	a111      	add	r1, pc, #68	; (adr r1, 8010898 <__ieee754_atan2+0x1a0>)
 8010854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010858:	e76f      	b.n	801073a <__ieee754_atan2+0x42>
 801085a:	a111      	add	r1, pc, #68	; (adr r1, 80108a0 <__ieee754_atan2+0x1a8>)
 801085c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010860:	e76b      	b.n	801073a <__ieee754_atan2+0x42>
 8010862:	bf00      	nop
 8010864:	f3af 8000 	nop.w
 8010868:	54442d18 	.word	0x54442d18
 801086c:	c00921fb 	.word	0xc00921fb
 8010870:	54442d18 	.word	0x54442d18
 8010874:	bff921fb 	.word	0xbff921fb
 8010878:	54442d18 	.word	0x54442d18
 801087c:	bfe921fb 	.word	0xbfe921fb
 8010880:	7f3321d2 	.word	0x7f3321d2
 8010884:	4002d97c 	.word	0x4002d97c
 8010888:	7f3321d2 	.word	0x7f3321d2
 801088c:	c002d97c 	.word	0xc002d97c
 8010890:	33145c07 	.word	0x33145c07
 8010894:	3ca1a626 	.word	0x3ca1a626
 8010898:	54442d18 	.word	0x54442d18
 801089c:	400921fb 	.word	0x400921fb
 80108a0:	54442d18 	.word	0x54442d18
 80108a4:	3ff921fb 	.word	0x3ff921fb
 80108a8:	54442d18 	.word	0x54442d18
 80108ac:	3fe921fb 	.word	0x3fe921fb
 80108b0:	7ff00000 	.word	0x7ff00000
 80108b4:	00000000 	.word	0x00000000

080108b8 <__ieee754_pow>:
 80108b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108bc:	b091      	sub	sp, #68	; 0x44
 80108be:	ed8d 1b00 	vstr	d1, [sp]
 80108c2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80108c6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80108ca:	ea58 0302 	orrs.w	r3, r8, r2
 80108ce:	ec57 6b10 	vmov	r6, r7, d0
 80108d2:	f000 84be 	beq.w	8011252 <__ieee754_pow+0x99a>
 80108d6:	4b7a      	ldr	r3, [pc, #488]	; (8010ac0 <__ieee754_pow+0x208>)
 80108d8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80108dc:	429c      	cmp	r4, r3
 80108de:	463d      	mov	r5, r7
 80108e0:	ee10 aa10 	vmov	sl, s0
 80108e4:	dc09      	bgt.n	80108fa <__ieee754_pow+0x42>
 80108e6:	d103      	bne.n	80108f0 <__ieee754_pow+0x38>
 80108e8:	b93e      	cbnz	r6, 80108fa <__ieee754_pow+0x42>
 80108ea:	45a0      	cmp	r8, r4
 80108ec:	dc0d      	bgt.n	801090a <__ieee754_pow+0x52>
 80108ee:	e001      	b.n	80108f4 <__ieee754_pow+0x3c>
 80108f0:	4598      	cmp	r8, r3
 80108f2:	dc02      	bgt.n	80108fa <__ieee754_pow+0x42>
 80108f4:	4598      	cmp	r8, r3
 80108f6:	d10e      	bne.n	8010916 <__ieee754_pow+0x5e>
 80108f8:	b16a      	cbz	r2, 8010916 <__ieee754_pow+0x5e>
 80108fa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80108fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010902:	ea54 030a 	orrs.w	r3, r4, sl
 8010906:	f000 84a4 	beq.w	8011252 <__ieee754_pow+0x99a>
 801090a:	486e      	ldr	r0, [pc, #440]	; (8010ac4 <__ieee754_pow+0x20c>)
 801090c:	b011      	add	sp, #68	; 0x44
 801090e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010912:	f001 be85 	b.w	8012620 <nan>
 8010916:	2d00      	cmp	r5, #0
 8010918:	da53      	bge.n	80109c2 <__ieee754_pow+0x10a>
 801091a:	4b6b      	ldr	r3, [pc, #428]	; (8010ac8 <__ieee754_pow+0x210>)
 801091c:	4598      	cmp	r8, r3
 801091e:	dc4d      	bgt.n	80109bc <__ieee754_pow+0x104>
 8010920:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010924:	4598      	cmp	r8, r3
 8010926:	dd4c      	ble.n	80109c2 <__ieee754_pow+0x10a>
 8010928:	ea4f 5328 	mov.w	r3, r8, asr #20
 801092c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010930:	2b14      	cmp	r3, #20
 8010932:	dd26      	ble.n	8010982 <__ieee754_pow+0xca>
 8010934:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010938:	fa22 f103 	lsr.w	r1, r2, r3
 801093c:	fa01 f303 	lsl.w	r3, r1, r3
 8010940:	4293      	cmp	r3, r2
 8010942:	d13e      	bne.n	80109c2 <__ieee754_pow+0x10a>
 8010944:	f001 0101 	and.w	r1, r1, #1
 8010948:	f1c1 0b02 	rsb	fp, r1, #2
 801094c:	2a00      	cmp	r2, #0
 801094e:	d15b      	bne.n	8010a08 <__ieee754_pow+0x150>
 8010950:	4b5b      	ldr	r3, [pc, #364]	; (8010ac0 <__ieee754_pow+0x208>)
 8010952:	4598      	cmp	r8, r3
 8010954:	d124      	bne.n	80109a0 <__ieee754_pow+0xe8>
 8010956:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801095a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801095e:	ea53 030a 	orrs.w	r3, r3, sl
 8010962:	f000 8476 	beq.w	8011252 <__ieee754_pow+0x99a>
 8010966:	4b59      	ldr	r3, [pc, #356]	; (8010acc <__ieee754_pow+0x214>)
 8010968:	429c      	cmp	r4, r3
 801096a:	dd2d      	ble.n	80109c8 <__ieee754_pow+0x110>
 801096c:	f1b9 0f00 	cmp.w	r9, #0
 8010970:	f280 8473 	bge.w	801125a <__ieee754_pow+0x9a2>
 8010974:	2000      	movs	r0, #0
 8010976:	2100      	movs	r1, #0
 8010978:	ec41 0b10 	vmov	d0, r0, r1
 801097c:	b011      	add	sp, #68	; 0x44
 801097e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010982:	2a00      	cmp	r2, #0
 8010984:	d13e      	bne.n	8010a04 <__ieee754_pow+0x14c>
 8010986:	f1c3 0314 	rsb	r3, r3, #20
 801098a:	fa48 f103 	asr.w	r1, r8, r3
 801098e:	fa01 f303 	lsl.w	r3, r1, r3
 8010992:	4543      	cmp	r3, r8
 8010994:	f040 8469 	bne.w	801126a <__ieee754_pow+0x9b2>
 8010998:	f001 0101 	and.w	r1, r1, #1
 801099c:	f1c1 0b02 	rsb	fp, r1, #2
 80109a0:	4b4b      	ldr	r3, [pc, #300]	; (8010ad0 <__ieee754_pow+0x218>)
 80109a2:	4598      	cmp	r8, r3
 80109a4:	d118      	bne.n	80109d8 <__ieee754_pow+0x120>
 80109a6:	f1b9 0f00 	cmp.w	r9, #0
 80109aa:	f280 845a 	bge.w	8011262 <__ieee754_pow+0x9aa>
 80109ae:	4948      	ldr	r1, [pc, #288]	; (8010ad0 <__ieee754_pow+0x218>)
 80109b0:	4632      	mov	r2, r6
 80109b2:	463b      	mov	r3, r7
 80109b4:	2000      	movs	r0, #0
 80109b6:	f7ef ff51 	bl	800085c <__aeabi_ddiv>
 80109ba:	e7dd      	b.n	8010978 <__ieee754_pow+0xc0>
 80109bc:	f04f 0b02 	mov.w	fp, #2
 80109c0:	e7c4      	b.n	801094c <__ieee754_pow+0x94>
 80109c2:	f04f 0b00 	mov.w	fp, #0
 80109c6:	e7c1      	b.n	801094c <__ieee754_pow+0x94>
 80109c8:	f1b9 0f00 	cmp.w	r9, #0
 80109cc:	dad2      	bge.n	8010974 <__ieee754_pow+0xbc>
 80109ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 80109d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80109d6:	e7cf      	b.n	8010978 <__ieee754_pow+0xc0>
 80109d8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80109dc:	d106      	bne.n	80109ec <__ieee754_pow+0x134>
 80109de:	4632      	mov	r2, r6
 80109e0:	463b      	mov	r3, r7
 80109e2:	4610      	mov	r0, r2
 80109e4:	4619      	mov	r1, r3
 80109e6:	f7ef fe0f 	bl	8000608 <__aeabi_dmul>
 80109ea:	e7c5      	b.n	8010978 <__ieee754_pow+0xc0>
 80109ec:	4b39      	ldr	r3, [pc, #228]	; (8010ad4 <__ieee754_pow+0x21c>)
 80109ee:	4599      	cmp	r9, r3
 80109f0:	d10a      	bne.n	8010a08 <__ieee754_pow+0x150>
 80109f2:	2d00      	cmp	r5, #0
 80109f4:	db08      	blt.n	8010a08 <__ieee754_pow+0x150>
 80109f6:	ec47 6b10 	vmov	d0, r6, r7
 80109fa:	b011      	add	sp, #68	; 0x44
 80109fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a00:	f000 be5c 	b.w	80116bc <__ieee754_sqrt>
 8010a04:	f04f 0b00 	mov.w	fp, #0
 8010a08:	ec47 6b10 	vmov	d0, r6, r7
 8010a0c:	f001 fd6c 	bl	80124e8 <fabs>
 8010a10:	ec51 0b10 	vmov	r0, r1, d0
 8010a14:	f1ba 0f00 	cmp.w	sl, #0
 8010a18:	d127      	bne.n	8010a6a <__ieee754_pow+0x1b2>
 8010a1a:	b124      	cbz	r4, 8010a26 <__ieee754_pow+0x16e>
 8010a1c:	4b2c      	ldr	r3, [pc, #176]	; (8010ad0 <__ieee754_pow+0x218>)
 8010a1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d121      	bne.n	8010a6a <__ieee754_pow+0x1b2>
 8010a26:	f1b9 0f00 	cmp.w	r9, #0
 8010a2a:	da05      	bge.n	8010a38 <__ieee754_pow+0x180>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	460b      	mov	r3, r1
 8010a30:	2000      	movs	r0, #0
 8010a32:	4927      	ldr	r1, [pc, #156]	; (8010ad0 <__ieee754_pow+0x218>)
 8010a34:	f7ef ff12 	bl	800085c <__aeabi_ddiv>
 8010a38:	2d00      	cmp	r5, #0
 8010a3a:	da9d      	bge.n	8010978 <__ieee754_pow+0xc0>
 8010a3c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010a40:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010a44:	ea54 030b 	orrs.w	r3, r4, fp
 8010a48:	d108      	bne.n	8010a5c <__ieee754_pow+0x1a4>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	4610      	mov	r0, r2
 8010a50:	4619      	mov	r1, r3
 8010a52:	f7ef fc21 	bl	8000298 <__aeabi_dsub>
 8010a56:	4602      	mov	r2, r0
 8010a58:	460b      	mov	r3, r1
 8010a5a:	e7ac      	b.n	80109b6 <__ieee754_pow+0xfe>
 8010a5c:	f1bb 0f01 	cmp.w	fp, #1
 8010a60:	d18a      	bne.n	8010978 <__ieee754_pow+0xc0>
 8010a62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a66:	4619      	mov	r1, r3
 8010a68:	e786      	b.n	8010978 <__ieee754_pow+0xc0>
 8010a6a:	0fed      	lsrs	r5, r5, #31
 8010a6c:	1e6b      	subs	r3, r5, #1
 8010a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8010a70:	ea5b 0303 	orrs.w	r3, fp, r3
 8010a74:	d102      	bne.n	8010a7c <__ieee754_pow+0x1c4>
 8010a76:	4632      	mov	r2, r6
 8010a78:	463b      	mov	r3, r7
 8010a7a:	e7e8      	b.n	8010a4e <__ieee754_pow+0x196>
 8010a7c:	4b16      	ldr	r3, [pc, #88]	; (8010ad8 <__ieee754_pow+0x220>)
 8010a7e:	4598      	cmp	r8, r3
 8010a80:	f340 80fe 	ble.w	8010c80 <__ieee754_pow+0x3c8>
 8010a84:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010a88:	4598      	cmp	r8, r3
 8010a8a:	dd0a      	ble.n	8010aa2 <__ieee754_pow+0x1ea>
 8010a8c:	4b0f      	ldr	r3, [pc, #60]	; (8010acc <__ieee754_pow+0x214>)
 8010a8e:	429c      	cmp	r4, r3
 8010a90:	dc0d      	bgt.n	8010aae <__ieee754_pow+0x1f6>
 8010a92:	f1b9 0f00 	cmp.w	r9, #0
 8010a96:	f6bf af6d 	bge.w	8010974 <__ieee754_pow+0xbc>
 8010a9a:	a307      	add	r3, pc, #28	; (adr r3, 8010ab8 <__ieee754_pow+0x200>)
 8010a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa0:	e79f      	b.n	80109e2 <__ieee754_pow+0x12a>
 8010aa2:	4b0e      	ldr	r3, [pc, #56]	; (8010adc <__ieee754_pow+0x224>)
 8010aa4:	429c      	cmp	r4, r3
 8010aa6:	ddf4      	ble.n	8010a92 <__ieee754_pow+0x1da>
 8010aa8:	4b09      	ldr	r3, [pc, #36]	; (8010ad0 <__ieee754_pow+0x218>)
 8010aaa:	429c      	cmp	r4, r3
 8010aac:	dd18      	ble.n	8010ae0 <__ieee754_pow+0x228>
 8010aae:	f1b9 0f00 	cmp.w	r9, #0
 8010ab2:	dcf2      	bgt.n	8010a9a <__ieee754_pow+0x1e2>
 8010ab4:	e75e      	b.n	8010974 <__ieee754_pow+0xbc>
 8010ab6:	bf00      	nop
 8010ab8:	8800759c 	.word	0x8800759c
 8010abc:	7e37e43c 	.word	0x7e37e43c
 8010ac0:	7ff00000 	.word	0x7ff00000
 8010ac4:	08012c21 	.word	0x08012c21
 8010ac8:	433fffff 	.word	0x433fffff
 8010acc:	3fefffff 	.word	0x3fefffff
 8010ad0:	3ff00000 	.word	0x3ff00000
 8010ad4:	3fe00000 	.word	0x3fe00000
 8010ad8:	41e00000 	.word	0x41e00000
 8010adc:	3feffffe 	.word	0x3feffffe
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	4b63      	ldr	r3, [pc, #396]	; (8010c70 <__ieee754_pow+0x3b8>)
 8010ae4:	f7ef fbd8 	bl	8000298 <__aeabi_dsub>
 8010ae8:	a355      	add	r3, pc, #340	; (adr r3, 8010c40 <__ieee754_pow+0x388>)
 8010aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aee:	4604      	mov	r4, r0
 8010af0:	460d      	mov	r5, r1
 8010af2:	f7ef fd89 	bl	8000608 <__aeabi_dmul>
 8010af6:	a354      	add	r3, pc, #336	; (adr r3, 8010c48 <__ieee754_pow+0x390>)
 8010af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afc:	4606      	mov	r6, r0
 8010afe:	460f      	mov	r7, r1
 8010b00:	4620      	mov	r0, r4
 8010b02:	4629      	mov	r1, r5
 8010b04:	f7ef fd80 	bl	8000608 <__aeabi_dmul>
 8010b08:	2200      	movs	r2, #0
 8010b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b0e:	4b59      	ldr	r3, [pc, #356]	; (8010c74 <__ieee754_pow+0x3bc>)
 8010b10:	4620      	mov	r0, r4
 8010b12:	4629      	mov	r1, r5
 8010b14:	f7ef fd78 	bl	8000608 <__aeabi_dmul>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	460b      	mov	r3, r1
 8010b1c:	a14c      	add	r1, pc, #304	; (adr r1, 8010c50 <__ieee754_pow+0x398>)
 8010b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b22:	f7ef fbb9 	bl	8000298 <__aeabi_dsub>
 8010b26:	4622      	mov	r2, r4
 8010b28:	462b      	mov	r3, r5
 8010b2a:	f7ef fd6d 	bl	8000608 <__aeabi_dmul>
 8010b2e:	4602      	mov	r2, r0
 8010b30:	460b      	mov	r3, r1
 8010b32:	2000      	movs	r0, #0
 8010b34:	4950      	ldr	r1, [pc, #320]	; (8010c78 <__ieee754_pow+0x3c0>)
 8010b36:	f7ef fbaf 	bl	8000298 <__aeabi_dsub>
 8010b3a:	4622      	mov	r2, r4
 8010b3c:	462b      	mov	r3, r5
 8010b3e:	4680      	mov	r8, r0
 8010b40:	4689      	mov	r9, r1
 8010b42:	4620      	mov	r0, r4
 8010b44:	4629      	mov	r1, r5
 8010b46:	f7ef fd5f 	bl	8000608 <__aeabi_dmul>
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	4640      	mov	r0, r8
 8010b50:	4649      	mov	r1, r9
 8010b52:	f7ef fd59 	bl	8000608 <__aeabi_dmul>
 8010b56:	a340      	add	r3, pc, #256	; (adr r3, 8010c58 <__ieee754_pow+0x3a0>)
 8010b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5c:	f7ef fd54 	bl	8000608 <__aeabi_dmul>
 8010b60:	4602      	mov	r2, r0
 8010b62:	460b      	mov	r3, r1
 8010b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b68:	f7ef fb96 	bl	8000298 <__aeabi_dsub>
 8010b6c:	4602      	mov	r2, r0
 8010b6e:	460b      	mov	r3, r1
 8010b70:	4604      	mov	r4, r0
 8010b72:	460d      	mov	r5, r1
 8010b74:	4630      	mov	r0, r6
 8010b76:	4639      	mov	r1, r7
 8010b78:	f7ef fb90 	bl	800029c <__adddf3>
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b82:	4632      	mov	r2, r6
 8010b84:	463b      	mov	r3, r7
 8010b86:	f7ef fb87 	bl	8000298 <__aeabi_dsub>
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	4620      	mov	r0, r4
 8010b90:	4629      	mov	r1, r5
 8010b92:	f7ef fb81 	bl	8000298 <__aeabi_dsub>
 8010b96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b98:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010b9c:	4313      	orrs	r3, r2
 8010b9e:	4606      	mov	r6, r0
 8010ba0:	460f      	mov	r7, r1
 8010ba2:	f040 81eb 	bne.w	8010f7c <__ieee754_pow+0x6c4>
 8010ba6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010c60 <__ieee754_pow+0x3a8>
 8010baa:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010bae:	2400      	movs	r4, #0
 8010bb0:	4622      	mov	r2, r4
 8010bb2:	462b      	mov	r3, r5
 8010bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010bb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010bbc:	f7ef fb6c 	bl	8000298 <__aeabi_dsub>
 8010bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bc4:	f7ef fd20 	bl	8000608 <__aeabi_dmul>
 8010bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bcc:	4680      	mov	r8, r0
 8010bce:	4689      	mov	r9, r1
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	4639      	mov	r1, r7
 8010bd4:	f7ef fd18 	bl	8000608 <__aeabi_dmul>
 8010bd8:	4602      	mov	r2, r0
 8010bda:	460b      	mov	r3, r1
 8010bdc:	4640      	mov	r0, r8
 8010bde:	4649      	mov	r1, r9
 8010be0:	f7ef fb5c 	bl	800029c <__adddf3>
 8010be4:	4622      	mov	r2, r4
 8010be6:	462b      	mov	r3, r5
 8010be8:	4680      	mov	r8, r0
 8010bea:	4689      	mov	r9, r1
 8010bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bf0:	f7ef fd0a 	bl	8000608 <__aeabi_dmul>
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	4604      	mov	r4, r0
 8010bf8:	460d      	mov	r5, r1
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	4640      	mov	r0, r8
 8010c00:	e9cd 4500 	strd	r4, r5, [sp]
 8010c04:	f7ef fb4a 	bl	800029c <__adddf3>
 8010c08:	4b1c      	ldr	r3, [pc, #112]	; (8010c7c <__ieee754_pow+0x3c4>)
 8010c0a:	4299      	cmp	r1, r3
 8010c0c:	4606      	mov	r6, r0
 8010c0e:	460f      	mov	r7, r1
 8010c10:	468b      	mov	fp, r1
 8010c12:	f340 82f7 	ble.w	8011204 <__ieee754_pow+0x94c>
 8010c16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010c1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010c1e:	4303      	orrs	r3, r0
 8010c20:	f000 81ea 	beq.w	8010ff8 <__ieee754_pow+0x740>
 8010c24:	a310      	add	r3, pc, #64	; (adr r3, 8010c68 <__ieee754_pow+0x3b0>)
 8010c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c2e:	f7ef fceb 	bl	8000608 <__aeabi_dmul>
 8010c32:	a30d      	add	r3, pc, #52	; (adr r3, 8010c68 <__ieee754_pow+0x3b0>)
 8010c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c38:	e6d5      	b.n	80109e6 <__ieee754_pow+0x12e>
 8010c3a:	bf00      	nop
 8010c3c:	f3af 8000 	nop.w
 8010c40:	60000000 	.word	0x60000000
 8010c44:	3ff71547 	.word	0x3ff71547
 8010c48:	f85ddf44 	.word	0xf85ddf44
 8010c4c:	3e54ae0b 	.word	0x3e54ae0b
 8010c50:	55555555 	.word	0x55555555
 8010c54:	3fd55555 	.word	0x3fd55555
 8010c58:	652b82fe 	.word	0x652b82fe
 8010c5c:	3ff71547 	.word	0x3ff71547
 8010c60:	00000000 	.word	0x00000000
 8010c64:	bff00000 	.word	0xbff00000
 8010c68:	8800759c 	.word	0x8800759c
 8010c6c:	7e37e43c 	.word	0x7e37e43c
 8010c70:	3ff00000 	.word	0x3ff00000
 8010c74:	3fd00000 	.word	0x3fd00000
 8010c78:	3fe00000 	.word	0x3fe00000
 8010c7c:	408fffff 	.word	0x408fffff
 8010c80:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010c84:	f04f 0200 	mov.w	r2, #0
 8010c88:	da05      	bge.n	8010c96 <__ieee754_pow+0x3de>
 8010c8a:	4bd3      	ldr	r3, [pc, #844]	; (8010fd8 <__ieee754_pow+0x720>)
 8010c8c:	f7ef fcbc 	bl	8000608 <__aeabi_dmul>
 8010c90:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010c94:	460c      	mov	r4, r1
 8010c96:	1523      	asrs	r3, r4, #20
 8010c98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010c9c:	4413      	add	r3, r2
 8010c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010ca0:	4bce      	ldr	r3, [pc, #824]	; (8010fdc <__ieee754_pow+0x724>)
 8010ca2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010ca6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010caa:	429c      	cmp	r4, r3
 8010cac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010cb0:	dd08      	ble.n	8010cc4 <__ieee754_pow+0x40c>
 8010cb2:	4bcb      	ldr	r3, [pc, #812]	; (8010fe0 <__ieee754_pow+0x728>)
 8010cb4:	429c      	cmp	r4, r3
 8010cb6:	f340 815e 	ble.w	8010f76 <__ieee754_pow+0x6be>
 8010cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8010cc0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010cc4:	f04f 0a00 	mov.w	sl, #0
 8010cc8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010ccc:	930c      	str	r3, [sp, #48]	; 0x30
 8010cce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010cd0:	4bc4      	ldr	r3, [pc, #784]	; (8010fe4 <__ieee754_pow+0x72c>)
 8010cd2:	4413      	add	r3, r2
 8010cd4:	ed93 7b00 	vldr	d7, [r3]
 8010cd8:	4629      	mov	r1, r5
 8010cda:	ec53 2b17 	vmov	r2, r3, d7
 8010cde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ce2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010ce6:	f7ef fad7 	bl	8000298 <__aeabi_dsub>
 8010cea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010cee:	4606      	mov	r6, r0
 8010cf0:	460f      	mov	r7, r1
 8010cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010cf6:	f7ef fad1 	bl	800029c <__adddf3>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	2000      	movs	r0, #0
 8010d00:	49b9      	ldr	r1, [pc, #740]	; (8010fe8 <__ieee754_pow+0x730>)
 8010d02:	f7ef fdab 	bl	800085c <__aeabi_ddiv>
 8010d06:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	4630      	mov	r0, r6
 8010d10:	4639      	mov	r1, r7
 8010d12:	f7ef fc79 	bl	8000608 <__aeabi_dmul>
 8010d16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d1a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010d1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010d22:	2300      	movs	r3, #0
 8010d24:	9302      	str	r3, [sp, #8]
 8010d26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010d2a:	106d      	asrs	r5, r5, #1
 8010d2c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010d30:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010d34:	2200      	movs	r2, #0
 8010d36:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010d3a:	4640      	mov	r0, r8
 8010d3c:	4649      	mov	r1, r9
 8010d3e:	4614      	mov	r4, r2
 8010d40:	461d      	mov	r5, r3
 8010d42:	f7ef fc61 	bl	8000608 <__aeabi_dmul>
 8010d46:	4602      	mov	r2, r0
 8010d48:	460b      	mov	r3, r1
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	4639      	mov	r1, r7
 8010d4e:	f7ef faa3 	bl	8000298 <__aeabi_dsub>
 8010d52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d56:	4606      	mov	r6, r0
 8010d58:	460f      	mov	r7, r1
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	f7ef fa9b 	bl	8000298 <__aeabi_dsub>
 8010d62:	4602      	mov	r2, r0
 8010d64:	460b      	mov	r3, r1
 8010d66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010d6a:	f7ef fa95 	bl	8000298 <__aeabi_dsub>
 8010d6e:	4642      	mov	r2, r8
 8010d70:	464b      	mov	r3, r9
 8010d72:	f7ef fc49 	bl	8000608 <__aeabi_dmul>
 8010d76:	4602      	mov	r2, r0
 8010d78:	460b      	mov	r3, r1
 8010d7a:	4630      	mov	r0, r6
 8010d7c:	4639      	mov	r1, r7
 8010d7e:	f7ef fa8b 	bl	8000298 <__aeabi_dsub>
 8010d82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010d86:	f7ef fc3f 	bl	8000608 <__aeabi_dmul>
 8010d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010d92:	4610      	mov	r0, r2
 8010d94:	4619      	mov	r1, r3
 8010d96:	f7ef fc37 	bl	8000608 <__aeabi_dmul>
 8010d9a:	a37b      	add	r3, pc, #492	; (adr r3, 8010f88 <__ieee754_pow+0x6d0>)
 8010d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da0:	4604      	mov	r4, r0
 8010da2:	460d      	mov	r5, r1
 8010da4:	f7ef fc30 	bl	8000608 <__aeabi_dmul>
 8010da8:	a379      	add	r3, pc, #484	; (adr r3, 8010f90 <__ieee754_pow+0x6d8>)
 8010daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dae:	f7ef fa75 	bl	800029c <__adddf3>
 8010db2:	4622      	mov	r2, r4
 8010db4:	462b      	mov	r3, r5
 8010db6:	f7ef fc27 	bl	8000608 <__aeabi_dmul>
 8010dba:	a377      	add	r3, pc, #476	; (adr r3, 8010f98 <__ieee754_pow+0x6e0>)
 8010dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc0:	f7ef fa6c 	bl	800029c <__adddf3>
 8010dc4:	4622      	mov	r2, r4
 8010dc6:	462b      	mov	r3, r5
 8010dc8:	f7ef fc1e 	bl	8000608 <__aeabi_dmul>
 8010dcc:	a374      	add	r3, pc, #464	; (adr r3, 8010fa0 <__ieee754_pow+0x6e8>)
 8010dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd2:	f7ef fa63 	bl	800029c <__adddf3>
 8010dd6:	4622      	mov	r2, r4
 8010dd8:	462b      	mov	r3, r5
 8010dda:	f7ef fc15 	bl	8000608 <__aeabi_dmul>
 8010dde:	a372      	add	r3, pc, #456	; (adr r3, 8010fa8 <__ieee754_pow+0x6f0>)
 8010de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de4:	f7ef fa5a 	bl	800029c <__adddf3>
 8010de8:	4622      	mov	r2, r4
 8010dea:	462b      	mov	r3, r5
 8010dec:	f7ef fc0c 	bl	8000608 <__aeabi_dmul>
 8010df0:	a36f      	add	r3, pc, #444	; (adr r3, 8010fb0 <__ieee754_pow+0x6f8>)
 8010df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df6:	f7ef fa51 	bl	800029c <__adddf3>
 8010dfa:	4622      	mov	r2, r4
 8010dfc:	4606      	mov	r6, r0
 8010dfe:	460f      	mov	r7, r1
 8010e00:	462b      	mov	r3, r5
 8010e02:	4620      	mov	r0, r4
 8010e04:	4629      	mov	r1, r5
 8010e06:	f7ef fbff 	bl	8000608 <__aeabi_dmul>
 8010e0a:	4602      	mov	r2, r0
 8010e0c:	460b      	mov	r3, r1
 8010e0e:	4630      	mov	r0, r6
 8010e10:	4639      	mov	r1, r7
 8010e12:	f7ef fbf9 	bl	8000608 <__aeabi_dmul>
 8010e16:	4642      	mov	r2, r8
 8010e18:	4604      	mov	r4, r0
 8010e1a:	460d      	mov	r5, r1
 8010e1c:	464b      	mov	r3, r9
 8010e1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e22:	f7ef fa3b 	bl	800029c <__adddf3>
 8010e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e2a:	f7ef fbed 	bl	8000608 <__aeabi_dmul>
 8010e2e:	4622      	mov	r2, r4
 8010e30:	462b      	mov	r3, r5
 8010e32:	f7ef fa33 	bl	800029c <__adddf3>
 8010e36:	4642      	mov	r2, r8
 8010e38:	4606      	mov	r6, r0
 8010e3a:	460f      	mov	r7, r1
 8010e3c:	464b      	mov	r3, r9
 8010e3e:	4640      	mov	r0, r8
 8010e40:	4649      	mov	r1, r9
 8010e42:	f7ef fbe1 	bl	8000608 <__aeabi_dmul>
 8010e46:	2200      	movs	r2, #0
 8010e48:	4b68      	ldr	r3, [pc, #416]	; (8010fec <__ieee754_pow+0x734>)
 8010e4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010e4e:	f7ef fa25 	bl	800029c <__adddf3>
 8010e52:	4632      	mov	r2, r6
 8010e54:	463b      	mov	r3, r7
 8010e56:	f7ef fa21 	bl	800029c <__adddf3>
 8010e5a:	9802      	ldr	r0, [sp, #8]
 8010e5c:	460d      	mov	r5, r1
 8010e5e:	4604      	mov	r4, r0
 8010e60:	4602      	mov	r2, r0
 8010e62:	460b      	mov	r3, r1
 8010e64:	4640      	mov	r0, r8
 8010e66:	4649      	mov	r1, r9
 8010e68:	f7ef fbce 	bl	8000608 <__aeabi_dmul>
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	4680      	mov	r8, r0
 8010e70:	4689      	mov	r9, r1
 8010e72:	4b5e      	ldr	r3, [pc, #376]	; (8010fec <__ieee754_pow+0x734>)
 8010e74:	4620      	mov	r0, r4
 8010e76:	4629      	mov	r1, r5
 8010e78:	f7ef fa0e 	bl	8000298 <__aeabi_dsub>
 8010e7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010e80:	f7ef fa0a 	bl	8000298 <__aeabi_dsub>
 8010e84:	4602      	mov	r2, r0
 8010e86:	460b      	mov	r3, r1
 8010e88:	4630      	mov	r0, r6
 8010e8a:	4639      	mov	r1, r7
 8010e8c:	f7ef fa04 	bl	8000298 <__aeabi_dsub>
 8010e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e94:	f7ef fbb8 	bl	8000608 <__aeabi_dmul>
 8010e98:	4622      	mov	r2, r4
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	460f      	mov	r7, r1
 8010e9e:	462b      	mov	r3, r5
 8010ea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ea4:	f7ef fbb0 	bl	8000608 <__aeabi_dmul>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	460b      	mov	r3, r1
 8010eac:	4630      	mov	r0, r6
 8010eae:	4639      	mov	r1, r7
 8010eb0:	f7ef f9f4 	bl	800029c <__adddf3>
 8010eb4:	4606      	mov	r6, r0
 8010eb6:	460f      	mov	r7, r1
 8010eb8:	4602      	mov	r2, r0
 8010eba:	460b      	mov	r3, r1
 8010ebc:	4640      	mov	r0, r8
 8010ebe:	4649      	mov	r1, r9
 8010ec0:	f7ef f9ec 	bl	800029c <__adddf3>
 8010ec4:	9802      	ldr	r0, [sp, #8]
 8010ec6:	a33c      	add	r3, pc, #240	; (adr r3, 8010fb8 <__ieee754_pow+0x700>)
 8010ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ecc:	4604      	mov	r4, r0
 8010ece:	460d      	mov	r5, r1
 8010ed0:	f7ef fb9a 	bl	8000608 <__aeabi_dmul>
 8010ed4:	4642      	mov	r2, r8
 8010ed6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010eda:	464b      	mov	r3, r9
 8010edc:	4620      	mov	r0, r4
 8010ede:	4629      	mov	r1, r5
 8010ee0:	f7ef f9da 	bl	8000298 <__aeabi_dsub>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	4630      	mov	r0, r6
 8010eea:	4639      	mov	r1, r7
 8010eec:	f7ef f9d4 	bl	8000298 <__aeabi_dsub>
 8010ef0:	a333      	add	r3, pc, #204	; (adr r3, 8010fc0 <__ieee754_pow+0x708>)
 8010ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef6:	f7ef fb87 	bl	8000608 <__aeabi_dmul>
 8010efa:	a333      	add	r3, pc, #204	; (adr r3, 8010fc8 <__ieee754_pow+0x710>)
 8010efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f00:	4606      	mov	r6, r0
 8010f02:	460f      	mov	r7, r1
 8010f04:	4620      	mov	r0, r4
 8010f06:	4629      	mov	r1, r5
 8010f08:	f7ef fb7e 	bl	8000608 <__aeabi_dmul>
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	460b      	mov	r3, r1
 8010f10:	4630      	mov	r0, r6
 8010f12:	4639      	mov	r1, r7
 8010f14:	f7ef f9c2 	bl	800029c <__adddf3>
 8010f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f1a:	4b35      	ldr	r3, [pc, #212]	; (8010ff0 <__ieee754_pow+0x738>)
 8010f1c:	4413      	add	r3, r2
 8010f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f22:	f7ef f9bb 	bl	800029c <__adddf3>
 8010f26:	4604      	mov	r4, r0
 8010f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f2a:	460d      	mov	r5, r1
 8010f2c:	f7ef fb02 	bl	8000534 <__aeabi_i2d>
 8010f30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f32:	4b30      	ldr	r3, [pc, #192]	; (8010ff4 <__ieee754_pow+0x73c>)
 8010f34:	4413      	add	r3, r2
 8010f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f3a:	4606      	mov	r6, r0
 8010f3c:	460f      	mov	r7, r1
 8010f3e:	4622      	mov	r2, r4
 8010f40:	462b      	mov	r3, r5
 8010f42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f46:	f7ef f9a9 	bl	800029c <__adddf3>
 8010f4a:	4642      	mov	r2, r8
 8010f4c:	464b      	mov	r3, r9
 8010f4e:	f7ef f9a5 	bl	800029c <__adddf3>
 8010f52:	4632      	mov	r2, r6
 8010f54:	463b      	mov	r3, r7
 8010f56:	f7ef f9a1 	bl	800029c <__adddf3>
 8010f5a:	9802      	ldr	r0, [sp, #8]
 8010f5c:	4632      	mov	r2, r6
 8010f5e:	463b      	mov	r3, r7
 8010f60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f64:	f7ef f998 	bl	8000298 <__aeabi_dsub>
 8010f68:	4642      	mov	r2, r8
 8010f6a:	464b      	mov	r3, r9
 8010f6c:	f7ef f994 	bl	8000298 <__aeabi_dsub>
 8010f70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f74:	e607      	b.n	8010b86 <__ieee754_pow+0x2ce>
 8010f76:	f04f 0a01 	mov.w	sl, #1
 8010f7a:	e6a5      	b.n	8010cc8 <__ieee754_pow+0x410>
 8010f7c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8010fd0 <__ieee754_pow+0x718>
 8010f80:	e613      	b.n	8010baa <__ieee754_pow+0x2f2>
 8010f82:	bf00      	nop
 8010f84:	f3af 8000 	nop.w
 8010f88:	4a454eef 	.word	0x4a454eef
 8010f8c:	3fca7e28 	.word	0x3fca7e28
 8010f90:	93c9db65 	.word	0x93c9db65
 8010f94:	3fcd864a 	.word	0x3fcd864a
 8010f98:	a91d4101 	.word	0xa91d4101
 8010f9c:	3fd17460 	.word	0x3fd17460
 8010fa0:	518f264d 	.word	0x518f264d
 8010fa4:	3fd55555 	.word	0x3fd55555
 8010fa8:	db6fabff 	.word	0xdb6fabff
 8010fac:	3fdb6db6 	.word	0x3fdb6db6
 8010fb0:	33333303 	.word	0x33333303
 8010fb4:	3fe33333 	.word	0x3fe33333
 8010fb8:	e0000000 	.word	0xe0000000
 8010fbc:	3feec709 	.word	0x3feec709
 8010fc0:	dc3a03fd 	.word	0xdc3a03fd
 8010fc4:	3feec709 	.word	0x3feec709
 8010fc8:	145b01f5 	.word	0x145b01f5
 8010fcc:	be3e2fe0 	.word	0xbe3e2fe0
 8010fd0:	00000000 	.word	0x00000000
 8010fd4:	3ff00000 	.word	0x3ff00000
 8010fd8:	43400000 	.word	0x43400000
 8010fdc:	0003988e 	.word	0x0003988e
 8010fe0:	000bb679 	.word	0x000bb679
 8010fe4:	08012d58 	.word	0x08012d58
 8010fe8:	3ff00000 	.word	0x3ff00000
 8010fec:	40080000 	.word	0x40080000
 8010ff0:	08012d78 	.word	0x08012d78
 8010ff4:	08012d68 	.word	0x08012d68
 8010ff8:	a3b4      	add	r3, pc, #720	; (adr r3, 80112cc <__ieee754_pow+0xa14>)
 8010ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffe:	4640      	mov	r0, r8
 8011000:	4649      	mov	r1, r9
 8011002:	f7ef f94b 	bl	800029c <__adddf3>
 8011006:	4622      	mov	r2, r4
 8011008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801100c:	462b      	mov	r3, r5
 801100e:	4630      	mov	r0, r6
 8011010:	4639      	mov	r1, r7
 8011012:	f7ef f941 	bl	8000298 <__aeabi_dsub>
 8011016:	4602      	mov	r2, r0
 8011018:	460b      	mov	r3, r1
 801101a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801101e:	f7ef fd83 	bl	8000b28 <__aeabi_dcmpgt>
 8011022:	2800      	cmp	r0, #0
 8011024:	f47f adfe 	bne.w	8010c24 <__ieee754_pow+0x36c>
 8011028:	4aa3      	ldr	r2, [pc, #652]	; (80112b8 <__ieee754_pow+0xa00>)
 801102a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801102e:	4293      	cmp	r3, r2
 8011030:	f340 810a 	ble.w	8011248 <__ieee754_pow+0x990>
 8011034:	151b      	asrs	r3, r3, #20
 8011036:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801103a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801103e:	fa4a f303 	asr.w	r3, sl, r3
 8011042:	445b      	add	r3, fp
 8011044:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011048:	4e9c      	ldr	r6, [pc, #624]	; (80112bc <__ieee754_pow+0xa04>)
 801104a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801104e:	4116      	asrs	r6, r2
 8011050:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011054:	2000      	movs	r0, #0
 8011056:	ea23 0106 	bic.w	r1, r3, r6
 801105a:	f1c2 0214 	rsb	r2, r2, #20
 801105e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011062:	fa4a fa02 	asr.w	sl, sl, r2
 8011066:	f1bb 0f00 	cmp.w	fp, #0
 801106a:	4602      	mov	r2, r0
 801106c:	460b      	mov	r3, r1
 801106e:	4620      	mov	r0, r4
 8011070:	4629      	mov	r1, r5
 8011072:	bfb8      	it	lt
 8011074:	f1ca 0a00 	rsblt	sl, sl, #0
 8011078:	f7ef f90e 	bl	8000298 <__aeabi_dsub>
 801107c:	e9cd 0100 	strd	r0, r1, [sp]
 8011080:	4642      	mov	r2, r8
 8011082:	464b      	mov	r3, r9
 8011084:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011088:	f7ef f908 	bl	800029c <__adddf3>
 801108c:	2000      	movs	r0, #0
 801108e:	a378      	add	r3, pc, #480	; (adr r3, 8011270 <__ieee754_pow+0x9b8>)
 8011090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011094:	4604      	mov	r4, r0
 8011096:	460d      	mov	r5, r1
 8011098:	f7ef fab6 	bl	8000608 <__aeabi_dmul>
 801109c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110a0:	4606      	mov	r6, r0
 80110a2:	460f      	mov	r7, r1
 80110a4:	4620      	mov	r0, r4
 80110a6:	4629      	mov	r1, r5
 80110a8:	f7ef f8f6 	bl	8000298 <__aeabi_dsub>
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	4640      	mov	r0, r8
 80110b2:	4649      	mov	r1, r9
 80110b4:	f7ef f8f0 	bl	8000298 <__aeabi_dsub>
 80110b8:	a36f      	add	r3, pc, #444	; (adr r3, 8011278 <__ieee754_pow+0x9c0>)
 80110ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110be:	f7ef faa3 	bl	8000608 <__aeabi_dmul>
 80110c2:	a36f      	add	r3, pc, #444	; (adr r3, 8011280 <__ieee754_pow+0x9c8>)
 80110c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c8:	4680      	mov	r8, r0
 80110ca:	4689      	mov	r9, r1
 80110cc:	4620      	mov	r0, r4
 80110ce:	4629      	mov	r1, r5
 80110d0:	f7ef fa9a 	bl	8000608 <__aeabi_dmul>
 80110d4:	4602      	mov	r2, r0
 80110d6:	460b      	mov	r3, r1
 80110d8:	4640      	mov	r0, r8
 80110da:	4649      	mov	r1, r9
 80110dc:	f7ef f8de 	bl	800029c <__adddf3>
 80110e0:	4604      	mov	r4, r0
 80110e2:	460d      	mov	r5, r1
 80110e4:	4602      	mov	r2, r0
 80110e6:	460b      	mov	r3, r1
 80110e8:	4630      	mov	r0, r6
 80110ea:	4639      	mov	r1, r7
 80110ec:	f7ef f8d6 	bl	800029c <__adddf3>
 80110f0:	4632      	mov	r2, r6
 80110f2:	463b      	mov	r3, r7
 80110f4:	4680      	mov	r8, r0
 80110f6:	4689      	mov	r9, r1
 80110f8:	f7ef f8ce 	bl	8000298 <__aeabi_dsub>
 80110fc:	4602      	mov	r2, r0
 80110fe:	460b      	mov	r3, r1
 8011100:	4620      	mov	r0, r4
 8011102:	4629      	mov	r1, r5
 8011104:	f7ef f8c8 	bl	8000298 <__aeabi_dsub>
 8011108:	4642      	mov	r2, r8
 801110a:	4606      	mov	r6, r0
 801110c:	460f      	mov	r7, r1
 801110e:	464b      	mov	r3, r9
 8011110:	4640      	mov	r0, r8
 8011112:	4649      	mov	r1, r9
 8011114:	f7ef fa78 	bl	8000608 <__aeabi_dmul>
 8011118:	a35b      	add	r3, pc, #364	; (adr r3, 8011288 <__ieee754_pow+0x9d0>)
 801111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111e:	4604      	mov	r4, r0
 8011120:	460d      	mov	r5, r1
 8011122:	f7ef fa71 	bl	8000608 <__aeabi_dmul>
 8011126:	a35a      	add	r3, pc, #360	; (adr r3, 8011290 <__ieee754_pow+0x9d8>)
 8011128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112c:	f7ef f8b4 	bl	8000298 <__aeabi_dsub>
 8011130:	4622      	mov	r2, r4
 8011132:	462b      	mov	r3, r5
 8011134:	f7ef fa68 	bl	8000608 <__aeabi_dmul>
 8011138:	a357      	add	r3, pc, #348	; (adr r3, 8011298 <__ieee754_pow+0x9e0>)
 801113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113e:	f7ef f8ad 	bl	800029c <__adddf3>
 8011142:	4622      	mov	r2, r4
 8011144:	462b      	mov	r3, r5
 8011146:	f7ef fa5f 	bl	8000608 <__aeabi_dmul>
 801114a:	a355      	add	r3, pc, #340	; (adr r3, 80112a0 <__ieee754_pow+0x9e8>)
 801114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011150:	f7ef f8a2 	bl	8000298 <__aeabi_dsub>
 8011154:	4622      	mov	r2, r4
 8011156:	462b      	mov	r3, r5
 8011158:	f7ef fa56 	bl	8000608 <__aeabi_dmul>
 801115c:	a352      	add	r3, pc, #328	; (adr r3, 80112a8 <__ieee754_pow+0x9f0>)
 801115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011162:	f7ef f89b 	bl	800029c <__adddf3>
 8011166:	4622      	mov	r2, r4
 8011168:	462b      	mov	r3, r5
 801116a:	f7ef fa4d 	bl	8000608 <__aeabi_dmul>
 801116e:	4602      	mov	r2, r0
 8011170:	460b      	mov	r3, r1
 8011172:	4640      	mov	r0, r8
 8011174:	4649      	mov	r1, r9
 8011176:	f7ef f88f 	bl	8000298 <__aeabi_dsub>
 801117a:	4604      	mov	r4, r0
 801117c:	460d      	mov	r5, r1
 801117e:	4602      	mov	r2, r0
 8011180:	460b      	mov	r3, r1
 8011182:	4640      	mov	r0, r8
 8011184:	4649      	mov	r1, r9
 8011186:	f7ef fa3f 	bl	8000608 <__aeabi_dmul>
 801118a:	2200      	movs	r2, #0
 801118c:	e9cd 0100 	strd	r0, r1, [sp]
 8011190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011194:	4620      	mov	r0, r4
 8011196:	4629      	mov	r1, r5
 8011198:	f7ef f87e 	bl	8000298 <__aeabi_dsub>
 801119c:	4602      	mov	r2, r0
 801119e:	460b      	mov	r3, r1
 80111a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111a4:	f7ef fb5a 	bl	800085c <__aeabi_ddiv>
 80111a8:	4632      	mov	r2, r6
 80111aa:	4604      	mov	r4, r0
 80111ac:	460d      	mov	r5, r1
 80111ae:	463b      	mov	r3, r7
 80111b0:	4640      	mov	r0, r8
 80111b2:	4649      	mov	r1, r9
 80111b4:	f7ef fa28 	bl	8000608 <__aeabi_dmul>
 80111b8:	4632      	mov	r2, r6
 80111ba:	463b      	mov	r3, r7
 80111bc:	f7ef f86e 	bl	800029c <__adddf3>
 80111c0:	4602      	mov	r2, r0
 80111c2:	460b      	mov	r3, r1
 80111c4:	4620      	mov	r0, r4
 80111c6:	4629      	mov	r1, r5
 80111c8:	f7ef f866 	bl	8000298 <__aeabi_dsub>
 80111cc:	4642      	mov	r2, r8
 80111ce:	464b      	mov	r3, r9
 80111d0:	f7ef f862 	bl	8000298 <__aeabi_dsub>
 80111d4:	4602      	mov	r2, r0
 80111d6:	460b      	mov	r3, r1
 80111d8:	2000      	movs	r0, #0
 80111da:	4939      	ldr	r1, [pc, #228]	; (80112c0 <__ieee754_pow+0xa08>)
 80111dc:	f7ef f85c 	bl	8000298 <__aeabi_dsub>
 80111e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80111e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80111e8:	4602      	mov	r2, r0
 80111ea:	460b      	mov	r3, r1
 80111ec:	da2f      	bge.n	801124e <__ieee754_pow+0x996>
 80111ee:	4650      	mov	r0, sl
 80111f0:	ec43 2b10 	vmov	d0, r2, r3
 80111f4:	f001 faa0 	bl	8012738 <scalbn>
 80111f8:	ec51 0b10 	vmov	r0, r1, d0
 80111fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011200:	f7ff bbf1 	b.w	80109e6 <__ieee754_pow+0x12e>
 8011204:	4b2f      	ldr	r3, [pc, #188]	; (80112c4 <__ieee754_pow+0xa0c>)
 8011206:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801120a:	429e      	cmp	r6, r3
 801120c:	f77f af0c 	ble.w	8011028 <__ieee754_pow+0x770>
 8011210:	4b2d      	ldr	r3, [pc, #180]	; (80112c8 <__ieee754_pow+0xa10>)
 8011212:	440b      	add	r3, r1
 8011214:	4303      	orrs	r3, r0
 8011216:	d00b      	beq.n	8011230 <__ieee754_pow+0x978>
 8011218:	a325      	add	r3, pc, #148	; (adr r3, 80112b0 <__ieee754_pow+0x9f8>)
 801121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011222:	f7ef f9f1 	bl	8000608 <__aeabi_dmul>
 8011226:	a322      	add	r3, pc, #136	; (adr r3, 80112b0 <__ieee754_pow+0x9f8>)
 8011228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122c:	f7ff bbdb 	b.w	80109e6 <__ieee754_pow+0x12e>
 8011230:	4622      	mov	r2, r4
 8011232:	462b      	mov	r3, r5
 8011234:	f7ef f830 	bl	8000298 <__aeabi_dsub>
 8011238:	4642      	mov	r2, r8
 801123a:	464b      	mov	r3, r9
 801123c:	f7ef fc6a 	bl	8000b14 <__aeabi_dcmpge>
 8011240:	2800      	cmp	r0, #0
 8011242:	f43f aef1 	beq.w	8011028 <__ieee754_pow+0x770>
 8011246:	e7e7      	b.n	8011218 <__ieee754_pow+0x960>
 8011248:	f04f 0a00 	mov.w	sl, #0
 801124c:	e718      	b.n	8011080 <__ieee754_pow+0x7c8>
 801124e:	4621      	mov	r1, r4
 8011250:	e7d4      	b.n	80111fc <__ieee754_pow+0x944>
 8011252:	2000      	movs	r0, #0
 8011254:	491a      	ldr	r1, [pc, #104]	; (80112c0 <__ieee754_pow+0xa08>)
 8011256:	f7ff bb8f 	b.w	8010978 <__ieee754_pow+0xc0>
 801125a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801125e:	f7ff bb8b 	b.w	8010978 <__ieee754_pow+0xc0>
 8011262:	4630      	mov	r0, r6
 8011264:	4639      	mov	r1, r7
 8011266:	f7ff bb87 	b.w	8010978 <__ieee754_pow+0xc0>
 801126a:	4693      	mov	fp, r2
 801126c:	f7ff bb98 	b.w	80109a0 <__ieee754_pow+0xe8>
 8011270:	00000000 	.word	0x00000000
 8011274:	3fe62e43 	.word	0x3fe62e43
 8011278:	fefa39ef 	.word	0xfefa39ef
 801127c:	3fe62e42 	.word	0x3fe62e42
 8011280:	0ca86c39 	.word	0x0ca86c39
 8011284:	be205c61 	.word	0xbe205c61
 8011288:	72bea4d0 	.word	0x72bea4d0
 801128c:	3e663769 	.word	0x3e663769
 8011290:	c5d26bf1 	.word	0xc5d26bf1
 8011294:	3ebbbd41 	.word	0x3ebbbd41
 8011298:	af25de2c 	.word	0xaf25de2c
 801129c:	3f11566a 	.word	0x3f11566a
 80112a0:	16bebd93 	.word	0x16bebd93
 80112a4:	3f66c16c 	.word	0x3f66c16c
 80112a8:	5555553e 	.word	0x5555553e
 80112ac:	3fc55555 	.word	0x3fc55555
 80112b0:	c2f8f359 	.word	0xc2f8f359
 80112b4:	01a56e1f 	.word	0x01a56e1f
 80112b8:	3fe00000 	.word	0x3fe00000
 80112bc:	000fffff 	.word	0x000fffff
 80112c0:	3ff00000 	.word	0x3ff00000
 80112c4:	4090cbff 	.word	0x4090cbff
 80112c8:	3f6f3400 	.word	0x3f6f3400
 80112cc:	652b82fe 	.word	0x652b82fe
 80112d0:	3c971547 	.word	0x3c971547
 80112d4:	00000000 	.word	0x00000000

080112d8 <__ieee754_rem_pio2>:
 80112d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112dc:	ec57 6b10 	vmov	r6, r7, d0
 80112e0:	4bc3      	ldr	r3, [pc, #780]	; (80115f0 <__ieee754_rem_pio2+0x318>)
 80112e2:	b08d      	sub	sp, #52	; 0x34
 80112e4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80112e8:	4598      	cmp	r8, r3
 80112ea:	4604      	mov	r4, r0
 80112ec:	9704      	str	r7, [sp, #16]
 80112ee:	dc07      	bgt.n	8011300 <__ieee754_rem_pio2+0x28>
 80112f0:	2200      	movs	r2, #0
 80112f2:	2300      	movs	r3, #0
 80112f4:	ed84 0b00 	vstr	d0, [r4]
 80112f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80112fc:	2500      	movs	r5, #0
 80112fe:	e027      	b.n	8011350 <__ieee754_rem_pio2+0x78>
 8011300:	4bbc      	ldr	r3, [pc, #752]	; (80115f4 <__ieee754_rem_pio2+0x31c>)
 8011302:	4598      	cmp	r8, r3
 8011304:	dc75      	bgt.n	80113f2 <__ieee754_rem_pio2+0x11a>
 8011306:	9b04      	ldr	r3, [sp, #16]
 8011308:	4dbb      	ldr	r5, [pc, #748]	; (80115f8 <__ieee754_rem_pio2+0x320>)
 801130a:	2b00      	cmp	r3, #0
 801130c:	ee10 0a10 	vmov	r0, s0
 8011310:	a3a9      	add	r3, pc, #676	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x2e0>)
 8011312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011316:	4639      	mov	r1, r7
 8011318:	dd36      	ble.n	8011388 <__ieee754_rem_pio2+0xb0>
 801131a:	f7ee ffbd 	bl	8000298 <__aeabi_dsub>
 801131e:	45a8      	cmp	r8, r5
 8011320:	4606      	mov	r6, r0
 8011322:	460f      	mov	r7, r1
 8011324:	d018      	beq.n	8011358 <__ieee754_rem_pio2+0x80>
 8011326:	a3a6      	add	r3, pc, #664	; (adr r3, 80115c0 <__ieee754_rem_pio2+0x2e8>)
 8011328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132c:	f7ee ffb4 	bl	8000298 <__aeabi_dsub>
 8011330:	4602      	mov	r2, r0
 8011332:	460b      	mov	r3, r1
 8011334:	e9c4 2300 	strd	r2, r3, [r4]
 8011338:	4630      	mov	r0, r6
 801133a:	4639      	mov	r1, r7
 801133c:	f7ee ffac 	bl	8000298 <__aeabi_dsub>
 8011340:	a39f      	add	r3, pc, #636	; (adr r3, 80115c0 <__ieee754_rem_pio2+0x2e8>)
 8011342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011346:	f7ee ffa7 	bl	8000298 <__aeabi_dsub>
 801134a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801134e:	2501      	movs	r5, #1
 8011350:	4628      	mov	r0, r5
 8011352:	b00d      	add	sp, #52	; 0x34
 8011354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011358:	a39b      	add	r3, pc, #620	; (adr r3, 80115c8 <__ieee754_rem_pio2+0x2f0>)
 801135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801135e:	f7ee ff9b 	bl	8000298 <__aeabi_dsub>
 8011362:	a39b      	add	r3, pc, #620	; (adr r3, 80115d0 <__ieee754_rem_pio2+0x2f8>)
 8011364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011368:	4606      	mov	r6, r0
 801136a:	460f      	mov	r7, r1
 801136c:	f7ee ff94 	bl	8000298 <__aeabi_dsub>
 8011370:	4602      	mov	r2, r0
 8011372:	460b      	mov	r3, r1
 8011374:	e9c4 2300 	strd	r2, r3, [r4]
 8011378:	4630      	mov	r0, r6
 801137a:	4639      	mov	r1, r7
 801137c:	f7ee ff8c 	bl	8000298 <__aeabi_dsub>
 8011380:	a393      	add	r3, pc, #588	; (adr r3, 80115d0 <__ieee754_rem_pio2+0x2f8>)
 8011382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011386:	e7de      	b.n	8011346 <__ieee754_rem_pio2+0x6e>
 8011388:	f7ee ff88 	bl	800029c <__adddf3>
 801138c:	45a8      	cmp	r8, r5
 801138e:	4606      	mov	r6, r0
 8011390:	460f      	mov	r7, r1
 8011392:	d016      	beq.n	80113c2 <__ieee754_rem_pio2+0xea>
 8011394:	a38a      	add	r3, pc, #552	; (adr r3, 80115c0 <__ieee754_rem_pio2+0x2e8>)
 8011396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139a:	f7ee ff7f 	bl	800029c <__adddf3>
 801139e:	4602      	mov	r2, r0
 80113a0:	460b      	mov	r3, r1
 80113a2:	e9c4 2300 	strd	r2, r3, [r4]
 80113a6:	4630      	mov	r0, r6
 80113a8:	4639      	mov	r1, r7
 80113aa:	f7ee ff75 	bl	8000298 <__aeabi_dsub>
 80113ae:	a384      	add	r3, pc, #528	; (adr r3, 80115c0 <__ieee754_rem_pio2+0x2e8>)
 80113b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b4:	f7ee ff72 	bl	800029c <__adddf3>
 80113b8:	f04f 35ff 	mov.w	r5, #4294967295
 80113bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80113c0:	e7c6      	b.n	8011350 <__ieee754_rem_pio2+0x78>
 80113c2:	a381      	add	r3, pc, #516	; (adr r3, 80115c8 <__ieee754_rem_pio2+0x2f0>)
 80113c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c8:	f7ee ff68 	bl	800029c <__adddf3>
 80113cc:	a380      	add	r3, pc, #512	; (adr r3, 80115d0 <__ieee754_rem_pio2+0x2f8>)
 80113ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d2:	4606      	mov	r6, r0
 80113d4:	460f      	mov	r7, r1
 80113d6:	f7ee ff61 	bl	800029c <__adddf3>
 80113da:	4602      	mov	r2, r0
 80113dc:	460b      	mov	r3, r1
 80113de:	e9c4 2300 	strd	r2, r3, [r4]
 80113e2:	4630      	mov	r0, r6
 80113e4:	4639      	mov	r1, r7
 80113e6:	f7ee ff57 	bl	8000298 <__aeabi_dsub>
 80113ea:	a379      	add	r3, pc, #484	; (adr r3, 80115d0 <__ieee754_rem_pio2+0x2f8>)
 80113ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f0:	e7e0      	b.n	80113b4 <__ieee754_rem_pio2+0xdc>
 80113f2:	4b82      	ldr	r3, [pc, #520]	; (80115fc <__ieee754_rem_pio2+0x324>)
 80113f4:	4598      	cmp	r8, r3
 80113f6:	f300 80d0 	bgt.w	801159a <__ieee754_rem_pio2+0x2c2>
 80113fa:	f001 f875 	bl	80124e8 <fabs>
 80113fe:	ec57 6b10 	vmov	r6, r7, d0
 8011402:	ee10 0a10 	vmov	r0, s0
 8011406:	a374      	add	r3, pc, #464	; (adr r3, 80115d8 <__ieee754_rem_pio2+0x300>)
 8011408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140c:	4639      	mov	r1, r7
 801140e:	f7ef f8fb 	bl	8000608 <__aeabi_dmul>
 8011412:	2200      	movs	r2, #0
 8011414:	4b7a      	ldr	r3, [pc, #488]	; (8011600 <__ieee754_rem_pio2+0x328>)
 8011416:	f7ee ff41 	bl	800029c <__adddf3>
 801141a:	f7ef fba5 	bl	8000b68 <__aeabi_d2iz>
 801141e:	4605      	mov	r5, r0
 8011420:	f7ef f888 	bl	8000534 <__aeabi_i2d>
 8011424:	a364      	add	r3, pc, #400	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x2e0>)
 8011426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801142e:	f7ef f8eb 	bl	8000608 <__aeabi_dmul>
 8011432:	4602      	mov	r2, r0
 8011434:	460b      	mov	r3, r1
 8011436:	4630      	mov	r0, r6
 8011438:	4639      	mov	r1, r7
 801143a:	f7ee ff2d 	bl	8000298 <__aeabi_dsub>
 801143e:	a360      	add	r3, pc, #384	; (adr r3, 80115c0 <__ieee754_rem_pio2+0x2e8>)
 8011440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011444:	4682      	mov	sl, r0
 8011446:	468b      	mov	fp, r1
 8011448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801144c:	f7ef f8dc 	bl	8000608 <__aeabi_dmul>
 8011450:	2d1f      	cmp	r5, #31
 8011452:	4606      	mov	r6, r0
 8011454:	460f      	mov	r7, r1
 8011456:	dc0c      	bgt.n	8011472 <__ieee754_rem_pio2+0x19a>
 8011458:	1e6a      	subs	r2, r5, #1
 801145a:	4b6a      	ldr	r3, [pc, #424]	; (8011604 <__ieee754_rem_pio2+0x32c>)
 801145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011460:	4543      	cmp	r3, r8
 8011462:	d006      	beq.n	8011472 <__ieee754_rem_pio2+0x19a>
 8011464:	4632      	mov	r2, r6
 8011466:	463b      	mov	r3, r7
 8011468:	4650      	mov	r0, sl
 801146a:	4659      	mov	r1, fp
 801146c:	f7ee ff14 	bl	8000298 <__aeabi_dsub>
 8011470:	e00e      	b.n	8011490 <__ieee754_rem_pio2+0x1b8>
 8011472:	4632      	mov	r2, r6
 8011474:	463b      	mov	r3, r7
 8011476:	4650      	mov	r0, sl
 8011478:	4659      	mov	r1, fp
 801147a:	f7ee ff0d 	bl	8000298 <__aeabi_dsub>
 801147e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011482:	9305      	str	r3, [sp, #20]
 8011484:	9a05      	ldr	r2, [sp, #20]
 8011486:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801148a:	1ad3      	subs	r3, r2, r3
 801148c:	2b10      	cmp	r3, #16
 801148e:	dc02      	bgt.n	8011496 <__ieee754_rem_pio2+0x1be>
 8011490:	e9c4 0100 	strd	r0, r1, [r4]
 8011494:	e039      	b.n	801150a <__ieee754_rem_pio2+0x232>
 8011496:	a34c      	add	r3, pc, #304	; (adr r3, 80115c8 <__ieee754_rem_pio2+0x2f0>)
 8011498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114a0:	f7ef f8b2 	bl	8000608 <__aeabi_dmul>
 80114a4:	4606      	mov	r6, r0
 80114a6:	460f      	mov	r7, r1
 80114a8:	4602      	mov	r2, r0
 80114aa:	460b      	mov	r3, r1
 80114ac:	4650      	mov	r0, sl
 80114ae:	4659      	mov	r1, fp
 80114b0:	f7ee fef2 	bl	8000298 <__aeabi_dsub>
 80114b4:	4602      	mov	r2, r0
 80114b6:	460b      	mov	r3, r1
 80114b8:	4680      	mov	r8, r0
 80114ba:	4689      	mov	r9, r1
 80114bc:	4650      	mov	r0, sl
 80114be:	4659      	mov	r1, fp
 80114c0:	f7ee feea 	bl	8000298 <__aeabi_dsub>
 80114c4:	4632      	mov	r2, r6
 80114c6:	463b      	mov	r3, r7
 80114c8:	f7ee fee6 	bl	8000298 <__aeabi_dsub>
 80114cc:	a340      	add	r3, pc, #256	; (adr r3, 80115d0 <__ieee754_rem_pio2+0x2f8>)
 80114ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d2:	4606      	mov	r6, r0
 80114d4:	460f      	mov	r7, r1
 80114d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114da:	f7ef f895 	bl	8000608 <__aeabi_dmul>
 80114de:	4632      	mov	r2, r6
 80114e0:	463b      	mov	r3, r7
 80114e2:	f7ee fed9 	bl	8000298 <__aeabi_dsub>
 80114e6:	4602      	mov	r2, r0
 80114e8:	460b      	mov	r3, r1
 80114ea:	4606      	mov	r6, r0
 80114ec:	460f      	mov	r7, r1
 80114ee:	4640      	mov	r0, r8
 80114f0:	4649      	mov	r1, r9
 80114f2:	f7ee fed1 	bl	8000298 <__aeabi_dsub>
 80114f6:	9a05      	ldr	r2, [sp, #20]
 80114f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80114fc:	1ad3      	subs	r3, r2, r3
 80114fe:	2b31      	cmp	r3, #49	; 0x31
 8011500:	dc20      	bgt.n	8011544 <__ieee754_rem_pio2+0x26c>
 8011502:	e9c4 0100 	strd	r0, r1, [r4]
 8011506:	46c2      	mov	sl, r8
 8011508:	46cb      	mov	fp, r9
 801150a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801150e:	4650      	mov	r0, sl
 8011510:	4642      	mov	r2, r8
 8011512:	464b      	mov	r3, r9
 8011514:	4659      	mov	r1, fp
 8011516:	f7ee febf 	bl	8000298 <__aeabi_dsub>
 801151a:	463b      	mov	r3, r7
 801151c:	4632      	mov	r2, r6
 801151e:	f7ee febb 	bl	8000298 <__aeabi_dsub>
 8011522:	9b04      	ldr	r3, [sp, #16]
 8011524:	2b00      	cmp	r3, #0
 8011526:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801152a:	f6bf af11 	bge.w	8011350 <__ieee754_rem_pio2+0x78>
 801152e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011532:	6063      	str	r3, [r4, #4]
 8011534:	f8c4 8000 	str.w	r8, [r4]
 8011538:	60a0      	str	r0, [r4, #8]
 801153a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801153e:	60e3      	str	r3, [r4, #12]
 8011540:	426d      	negs	r5, r5
 8011542:	e705      	b.n	8011350 <__ieee754_rem_pio2+0x78>
 8011544:	a326      	add	r3, pc, #152	; (adr r3, 80115e0 <__ieee754_rem_pio2+0x308>)
 8011546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801154e:	f7ef f85b 	bl	8000608 <__aeabi_dmul>
 8011552:	4606      	mov	r6, r0
 8011554:	460f      	mov	r7, r1
 8011556:	4602      	mov	r2, r0
 8011558:	460b      	mov	r3, r1
 801155a:	4640      	mov	r0, r8
 801155c:	4649      	mov	r1, r9
 801155e:	f7ee fe9b 	bl	8000298 <__aeabi_dsub>
 8011562:	4602      	mov	r2, r0
 8011564:	460b      	mov	r3, r1
 8011566:	4682      	mov	sl, r0
 8011568:	468b      	mov	fp, r1
 801156a:	4640      	mov	r0, r8
 801156c:	4649      	mov	r1, r9
 801156e:	f7ee fe93 	bl	8000298 <__aeabi_dsub>
 8011572:	4632      	mov	r2, r6
 8011574:	463b      	mov	r3, r7
 8011576:	f7ee fe8f 	bl	8000298 <__aeabi_dsub>
 801157a:	a31b      	add	r3, pc, #108	; (adr r3, 80115e8 <__ieee754_rem_pio2+0x310>)
 801157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011580:	4606      	mov	r6, r0
 8011582:	460f      	mov	r7, r1
 8011584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011588:	f7ef f83e 	bl	8000608 <__aeabi_dmul>
 801158c:	4632      	mov	r2, r6
 801158e:	463b      	mov	r3, r7
 8011590:	f7ee fe82 	bl	8000298 <__aeabi_dsub>
 8011594:	4606      	mov	r6, r0
 8011596:	460f      	mov	r7, r1
 8011598:	e764      	b.n	8011464 <__ieee754_rem_pio2+0x18c>
 801159a:	4b1b      	ldr	r3, [pc, #108]	; (8011608 <__ieee754_rem_pio2+0x330>)
 801159c:	4598      	cmp	r8, r3
 801159e:	dd35      	ble.n	801160c <__ieee754_rem_pio2+0x334>
 80115a0:	ee10 2a10 	vmov	r2, s0
 80115a4:	463b      	mov	r3, r7
 80115a6:	4630      	mov	r0, r6
 80115a8:	4639      	mov	r1, r7
 80115aa:	f7ee fe75 	bl	8000298 <__aeabi_dsub>
 80115ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80115b2:	e9c4 0100 	strd	r0, r1, [r4]
 80115b6:	e6a1      	b.n	80112fc <__ieee754_rem_pio2+0x24>
 80115b8:	54400000 	.word	0x54400000
 80115bc:	3ff921fb 	.word	0x3ff921fb
 80115c0:	1a626331 	.word	0x1a626331
 80115c4:	3dd0b461 	.word	0x3dd0b461
 80115c8:	1a600000 	.word	0x1a600000
 80115cc:	3dd0b461 	.word	0x3dd0b461
 80115d0:	2e037073 	.word	0x2e037073
 80115d4:	3ba3198a 	.word	0x3ba3198a
 80115d8:	6dc9c883 	.word	0x6dc9c883
 80115dc:	3fe45f30 	.word	0x3fe45f30
 80115e0:	2e000000 	.word	0x2e000000
 80115e4:	3ba3198a 	.word	0x3ba3198a
 80115e8:	252049c1 	.word	0x252049c1
 80115ec:	397b839a 	.word	0x397b839a
 80115f0:	3fe921fb 	.word	0x3fe921fb
 80115f4:	4002d97b 	.word	0x4002d97b
 80115f8:	3ff921fb 	.word	0x3ff921fb
 80115fc:	413921fb 	.word	0x413921fb
 8011600:	3fe00000 	.word	0x3fe00000
 8011604:	08012d88 	.word	0x08012d88
 8011608:	7fefffff 	.word	0x7fefffff
 801160c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011610:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011614:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011618:	4630      	mov	r0, r6
 801161a:	460f      	mov	r7, r1
 801161c:	f7ef faa4 	bl	8000b68 <__aeabi_d2iz>
 8011620:	f7ee ff88 	bl	8000534 <__aeabi_i2d>
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	4630      	mov	r0, r6
 801162a:	4639      	mov	r1, r7
 801162c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011630:	f7ee fe32 	bl	8000298 <__aeabi_dsub>
 8011634:	2200      	movs	r2, #0
 8011636:	4b1f      	ldr	r3, [pc, #124]	; (80116b4 <__ieee754_rem_pio2+0x3dc>)
 8011638:	f7ee ffe6 	bl	8000608 <__aeabi_dmul>
 801163c:	460f      	mov	r7, r1
 801163e:	4606      	mov	r6, r0
 8011640:	f7ef fa92 	bl	8000b68 <__aeabi_d2iz>
 8011644:	f7ee ff76 	bl	8000534 <__aeabi_i2d>
 8011648:	4602      	mov	r2, r0
 801164a:	460b      	mov	r3, r1
 801164c:	4630      	mov	r0, r6
 801164e:	4639      	mov	r1, r7
 8011650:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011654:	f7ee fe20 	bl	8000298 <__aeabi_dsub>
 8011658:	2200      	movs	r2, #0
 801165a:	4b16      	ldr	r3, [pc, #88]	; (80116b4 <__ieee754_rem_pio2+0x3dc>)
 801165c:	f7ee ffd4 	bl	8000608 <__aeabi_dmul>
 8011660:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011664:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011668:	f04f 0803 	mov.w	r8, #3
 801166c:	2600      	movs	r6, #0
 801166e:	2700      	movs	r7, #0
 8011670:	4632      	mov	r2, r6
 8011672:	463b      	mov	r3, r7
 8011674:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011678:	f108 3aff 	add.w	sl, r8, #4294967295
 801167c:	f7ef fa2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8011680:	b9b0      	cbnz	r0, 80116b0 <__ieee754_rem_pio2+0x3d8>
 8011682:	4b0d      	ldr	r3, [pc, #52]	; (80116b8 <__ieee754_rem_pio2+0x3e0>)
 8011684:	9301      	str	r3, [sp, #4]
 8011686:	2302      	movs	r3, #2
 8011688:	9300      	str	r3, [sp, #0]
 801168a:	462a      	mov	r2, r5
 801168c:	4643      	mov	r3, r8
 801168e:	4621      	mov	r1, r4
 8011690:	a806      	add	r0, sp, #24
 8011692:	f000 f98d 	bl	80119b0 <__kernel_rem_pio2>
 8011696:	9b04      	ldr	r3, [sp, #16]
 8011698:	2b00      	cmp	r3, #0
 801169a:	4605      	mov	r5, r0
 801169c:	f6bf ae58 	bge.w	8011350 <__ieee754_rem_pio2+0x78>
 80116a0:	6863      	ldr	r3, [r4, #4]
 80116a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80116a6:	6063      	str	r3, [r4, #4]
 80116a8:	68e3      	ldr	r3, [r4, #12]
 80116aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80116ae:	e746      	b.n	801153e <__ieee754_rem_pio2+0x266>
 80116b0:	46d0      	mov	r8, sl
 80116b2:	e7dd      	b.n	8011670 <__ieee754_rem_pio2+0x398>
 80116b4:	41700000 	.word	0x41700000
 80116b8:	08012e08 	.word	0x08012e08

080116bc <__ieee754_sqrt>:
 80116bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116c0:	4955      	ldr	r1, [pc, #340]	; (8011818 <__ieee754_sqrt+0x15c>)
 80116c2:	ec55 4b10 	vmov	r4, r5, d0
 80116c6:	43a9      	bics	r1, r5
 80116c8:	462b      	mov	r3, r5
 80116ca:	462a      	mov	r2, r5
 80116cc:	d112      	bne.n	80116f4 <__ieee754_sqrt+0x38>
 80116ce:	ee10 2a10 	vmov	r2, s0
 80116d2:	ee10 0a10 	vmov	r0, s0
 80116d6:	4629      	mov	r1, r5
 80116d8:	f7ee ff96 	bl	8000608 <__aeabi_dmul>
 80116dc:	4602      	mov	r2, r0
 80116de:	460b      	mov	r3, r1
 80116e0:	4620      	mov	r0, r4
 80116e2:	4629      	mov	r1, r5
 80116e4:	f7ee fdda 	bl	800029c <__adddf3>
 80116e8:	4604      	mov	r4, r0
 80116ea:	460d      	mov	r5, r1
 80116ec:	ec45 4b10 	vmov	d0, r4, r5
 80116f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f4:	2d00      	cmp	r5, #0
 80116f6:	ee10 0a10 	vmov	r0, s0
 80116fa:	4621      	mov	r1, r4
 80116fc:	dc0f      	bgt.n	801171e <__ieee754_sqrt+0x62>
 80116fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011702:	4330      	orrs	r0, r6
 8011704:	d0f2      	beq.n	80116ec <__ieee754_sqrt+0x30>
 8011706:	b155      	cbz	r5, 801171e <__ieee754_sqrt+0x62>
 8011708:	ee10 2a10 	vmov	r2, s0
 801170c:	4620      	mov	r0, r4
 801170e:	4629      	mov	r1, r5
 8011710:	f7ee fdc2 	bl	8000298 <__aeabi_dsub>
 8011714:	4602      	mov	r2, r0
 8011716:	460b      	mov	r3, r1
 8011718:	f7ef f8a0 	bl	800085c <__aeabi_ddiv>
 801171c:	e7e4      	b.n	80116e8 <__ieee754_sqrt+0x2c>
 801171e:	151b      	asrs	r3, r3, #20
 8011720:	d073      	beq.n	801180a <__ieee754_sqrt+0x14e>
 8011722:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011726:	07dd      	lsls	r5, r3, #31
 8011728:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801172c:	bf48      	it	mi
 801172e:	0fc8      	lsrmi	r0, r1, #31
 8011730:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011734:	bf44      	itt	mi
 8011736:	0049      	lslmi	r1, r1, #1
 8011738:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801173c:	2500      	movs	r5, #0
 801173e:	1058      	asrs	r0, r3, #1
 8011740:	0fcb      	lsrs	r3, r1, #31
 8011742:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011746:	0049      	lsls	r1, r1, #1
 8011748:	2316      	movs	r3, #22
 801174a:	462c      	mov	r4, r5
 801174c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011750:	19a7      	adds	r7, r4, r6
 8011752:	4297      	cmp	r7, r2
 8011754:	bfde      	ittt	le
 8011756:	19bc      	addle	r4, r7, r6
 8011758:	1bd2      	suble	r2, r2, r7
 801175a:	19ad      	addle	r5, r5, r6
 801175c:	0fcf      	lsrs	r7, r1, #31
 801175e:	3b01      	subs	r3, #1
 8011760:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011764:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011768:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801176c:	d1f0      	bne.n	8011750 <__ieee754_sqrt+0x94>
 801176e:	f04f 0c20 	mov.w	ip, #32
 8011772:	469e      	mov	lr, r3
 8011774:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011778:	42a2      	cmp	r2, r4
 801177a:	eb06 070e 	add.w	r7, r6, lr
 801177e:	dc02      	bgt.n	8011786 <__ieee754_sqrt+0xca>
 8011780:	d112      	bne.n	80117a8 <__ieee754_sqrt+0xec>
 8011782:	428f      	cmp	r7, r1
 8011784:	d810      	bhi.n	80117a8 <__ieee754_sqrt+0xec>
 8011786:	2f00      	cmp	r7, #0
 8011788:	eb07 0e06 	add.w	lr, r7, r6
 801178c:	da42      	bge.n	8011814 <__ieee754_sqrt+0x158>
 801178e:	f1be 0f00 	cmp.w	lr, #0
 8011792:	db3f      	blt.n	8011814 <__ieee754_sqrt+0x158>
 8011794:	f104 0801 	add.w	r8, r4, #1
 8011798:	1b12      	subs	r2, r2, r4
 801179a:	428f      	cmp	r7, r1
 801179c:	bf88      	it	hi
 801179e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80117a2:	1bc9      	subs	r1, r1, r7
 80117a4:	4433      	add	r3, r6
 80117a6:	4644      	mov	r4, r8
 80117a8:	0052      	lsls	r2, r2, #1
 80117aa:	f1bc 0c01 	subs.w	ip, ip, #1
 80117ae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80117b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80117b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80117ba:	d1dd      	bne.n	8011778 <__ieee754_sqrt+0xbc>
 80117bc:	430a      	orrs	r2, r1
 80117be:	d006      	beq.n	80117ce <__ieee754_sqrt+0x112>
 80117c0:	1c5c      	adds	r4, r3, #1
 80117c2:	bf13      	iteet	ne
 80117c4:	3301      	addne	r3, #1
 80117c6:	3501      	addeq	r5, #1
 80117c8:	4663      	moveq	r3, ip
 80117ca:	f023 0301 	bicne.w	r3, r3, #1
 80117ce:	106a      	asrs	r2, r5, #1
 80117d0:	085b      	lsrs	r3, r3, #1
 80117d2:	07e9      	lsls	r1, r5, #31
 80117d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80117d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80117dc:	bf48      	it	mi
 80117de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80117e2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80117e6:	461c      	mov	r4, r3
 80117e8:	e780      	b.n	80116ec <__ieee754_sqrt+0x30>
 80117ea:	0aca      	lsrs	r2, r1, #11
 80117ec:	3815      	subs	r0, #21
 80117ee:	0549      	lsls	r1, r1, #21
 80117f0:	2a00      	cmp	r2, #0
 80117f2:	d0fa      	beq.n	80117ea <__ieee754_sqrt+0x12e>
 80117f4:	02d6      	lsls	r6, r2, #11
 80117f6:	d50a      	bpl.n	801180e <__ieee754_sqrt+0x152>
 80117f8:	f1c3 0420 	rsb	r4, r3, #32
 80117fc:	fa21 f404 	lsr.w	r4, r1, r4
 8011800:	1e5d      	subs	r5, r3, #1
 8011802:	4099      	lsls	r1, r3
 8011804:	4322      	orrs	r2, r4
 8011806:	1b43      	subs	r3, r0, r5
 8011808:	e78b      	b.n	8011722 <__ieee754_sqrt+0x66>
 801180a:	4618      	mov	r0, r3
 801180c:	e7f0      	b.n	80117f0 <__ieee754_sqrt+0x134>
 801180e:	0052      	lsls	r2, r2, #1
 8011810:	3301      	adds	r3, #1
 8011812:	e7ef      	b.n	80117f4 <__ieee754_sqrt+0x138>
 8011814:	46a0      	mov	r8, r4
 8011816:	e7bf      	b.n	8011798 <__ieee754_sqrt+0xdc>
 8011818:	7ff00000 	.word	0x7ff00000
 801181c:	00000000 	.word	0x00000000

08011820 <__kernel_cos>:
 8011820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011824:	ec59 8b10 	vmov	r8, r9, d0
 8011828:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801182c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011830:	ed2d 8b02 	vpush	{d8}
 8011834:	eeb0 8a41 	vmov.f32	s16, s2
 8011838:	eef0 8a61 	vmov.f32	s17, s3
 801183c:	da07      	bge.n	801184e <__kernel_cos+0x2e>
 801183e:	ee10 0a10 	vmov	r0, s0
 8011842:	4649      	mov	r1, r9
 8011844:	f7ef f990 	bl	8000b68 <__aeabi_d2iz>
 8011848:	2800      	cmp	r0, #0
 801184a:	f000 8089 	beq.w	8011960 <__kernel_cos+0x140>
 801184e:	4642      	mov	r2, r8
 8011850:	464b      	mov	r3, r9
 8011852:	4640      	mov	r0, r8
 8011854:	4649      	mov	r1, r9
 8011856:	f7ee fed7 	bl	8000608 <__aeabi_dmul>
 801185a:	2200      	movs	r2, #0
 801185c:	4b4e      	ldr	r3, [pc, #312]	; (8011998 <__kernel_cos+0x178>)
 801185e:	4604      	mov	r4, r0
 8011860:	460d      	mov	r5, r1
 8011862:	f7ee fed1 	bl	8000608 <__aeabi_dmul>
 8011866:	a340      	add	r3, pc, #256	; (adr r3, 8011968 <__kernel_cos+0x148>)
 8011868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186c:	4682      	mov	sl, r0
 801186e:	468b      	mov	fp, r1
 8011870:	4620      	mov	r0, r4
 8011872:	4629      	mov	r1, r5
 8011874:	f7ee fec8 	bl	8000608 <__aeabi_dmul>
 8011878:	a33d      	add	r3, pc, #244	; (adr r3, 8011970 <__kernel_cos+0x150>)
 801187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187e:	f7ee fd0d 	bl	800029c <__adddf3>
 8011882:	4622      	mov	r2, r4
 8011884:	462b      	mov	r3, r5
 8011886:	f7ee febf 	bl	8000608 <__aeabi_dmul>
 801188a:	a33b      	add	r3, pc, #236	; (adr r3, 8011978 <__kernel_cos+0x158>)
 801188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011890:	f7ee fd02 	bl	8000298 <__aeabi_dsub>
 8011894:	4622      	mov	r2, r4
 8011896:	462b      	mov	r3, r5
 8011898:	f7ee feb6 	bl	8000608 <__aeabi_dmul>
 801189c:	a338      	add	r3, pc, #224	; (adr r3, 8011980 <__kernel_cos+0x160>)
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	f7ee fcfb 	bl	800029c <__adddf3>
 80118a6:	4622      	mov	r2, r4
 80118a8:	462b      	mov	r3, r5
 80118aa:	f7ee fead 	bl	8000608 <__aeabi_dmul>
 80118ae:	a336      	add	r3, pc, #216	; (adr r3, 8011988 <__kernel_cos+0x168>)
 80118b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b4:	f7ee fcf0 	bl	8000298 <__aeabi_dsub>
 80118b8:	4622      	mov	r2, r4
 80118ba:	462b      	mov	r3, r5
 80118bc:	f7ee fea4 	bl	8000608 <__aeabi_dmul>
 80118c0:	a333      	add	r3, pc, #204	; (adr r3, 8011990 <__kernel_cos+0x170>)
 80118c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c6:	f7ee fce9 	bl	800029c <__adddf3>
 80118ca:	4622      	mov	r2, r4
 80118cc:	462b      	mov	r3, r5
 80118ce:	f7ee fe9b 	bl	8000608 <__aeabi_dmul>
 80118d2:	4622      	mov	r2, r4
 80118d4:	462b      	mov	r3, r5
 80118d6:	f7ee fe97 	bl	8000608 <__aeabi_dmul>
 80118da:	ec53 2b18 	vmov	r2, r3, d8
 80118de:	4604      	mov	r4, r0
 80118e0:	460d      	mov	r5, r1
 80118e2:	4640      	mov	r0, r8
 80118e4:	4649      	mov	r1, r9
 80118e6:	f7ee fe8f 	bl	8000608 <__aeabi_dmul>
 80118ea:	460b      	mov	r3, r1
 80118ec:	4602      	mov	r2, r0
 80118ee:	4629      	mov	r1, r5
 80118f0:	4620      	mov	r0, r4
 80118f2:	f7ee fcd1 	bl	8000298 <__aeabi_dsub>
 80118f6:	4b29      	ldr	r3, [pc, #164]	; (801199c <__kernel_cos+0x17c>)
 80118f8:	429e      	cmp	r6, r3
 80118fa:	4680      	mov	r8, r0
 80118fc:	4689      	mov	r9, r1
 80118fe:	dc11      	bgt.n	8011924 <__kernel_cos+0x104>
 8011900:	4602      	mov	r2, r0
 8011902:	460b      	mov	r3, r1
 8011904:	4650      	mov	r0, sl
 8011906:	4659      	mov	r1, fp
 8011908:	f7ee fcc6 	bl	8000298 <__aeabi_dsub>
 801190c:	460b      	mov	r3, r1
 801190e:	4924      	ldr	r1, [pc, #144]	; (80119a0 <__kernel_cos+0x180>)
 8011910:	4602      	mov	r2, r0
 8011912:	2000      	movs	r0, #0
 8011914:	f7ee fcc0 	bl	8000298 <__aeabi_dsub>
 8011918:	ecbd 8b02 	vpop	{d8}
 801191c:	ec41 0b10 	vmov	d0, r0, r1
 8011920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011924:	4b1f      	ldr	r3, [pc, #124]	; (80119a4 <__kernel_cos+0x184>)
 8011926:	491e      	ldr	r1, [pc, #120]	; (80119a0 <__kernel_cos+0x180>)
 8011928:	429e      	cmp	r6, r3
 801192a:	bfcc      	ite	gt
 801192c:	4d1e      	ldrgt	r5, [pc, #120]	; (80119a8 <__kernel_cos+0x188>)
 801192e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011932:	2400      	movs	r4, #0
 8011934:	4622      	mov	r2, r4
 8011936:	462b      	mov	r3, r5
 8011938:	2000      	movs	r0, #0
 801193a:	f7ee fcad 	bl	8000298 <__aeabi_dsub>
 801193e:	4622      	mov	r2, r4
 8011940:	4606      	mov	r6, r0
 8011942:	460f      	mov	r7, r1
 8011944:	462b      	mov	r3, r5
 8011946:	4650      	mov	r0, sl
 8011948:	4659      	mov	r1, fp
 801194a:	f7ee fca5 	bl	8000298 <__aeabi_dsub>
 801194e:	4642      	mov	r2, r8
 8011950:	464b      	mov	r3, r9
 8011952:	f7ee fca1 	bl	8000298 <__aeabi_dsub>
 8011956:	4602      	mov	r2, r0
 8011958:	460b      	mov	r3, r1
 801195a:	4630      	mov	r0, r6
 801195c:	4639      	mov	r1, r7
 801195e:	e7d9      	b.n	8011914 <__kernel_cos+0xf4>
 8011960:	2000      	movs	r0, #0
 8011962:	490f      	ldr	r1, [pc, #60]	; (80119a0 <__kernel_cos+0x180>)
 8011964:	e7d8      	b.n	8011918 <__kernel_cos+0xf8>
 8011966:	bf00      	nop
 8011968:	be8838d4 	.word	0xbe8838d4
 801196c:	bda8fae9 	.word	0xbda8fae9
 8011970:	bdb4b1c4 	.word	0xbdb4b1c4
 8011974:	3e21ee9e 	.word	0x3e21ee9e
 8011978:	809c52ad 	.word	0x809c52ad
 801197c:	3e927e4f 	.word	0x3e927e4f
 8011980:	19cb1590 	.word	0x19cb1590
 8011984:	3efa01a0 	.word	0x3efa01a0
 8011988:	16c15177 	.word	0x16c15177
 801198c:	3f56c16c 	.word	0x3f56c16c
 8011990:	5555554c 	.word	0x5555554c
 8011994:	3fa55555 	.word	0x3fa55555
 8011998:	3fe00000 	.word	0x3fe00000
 801199c:	3fd33332 	.word	0x3fd33332
 80119a0:	3ff00000 	.word	0x3ff00000
 80119a4:	3fe90000 	.word	0x3fe90000
 80119a8:	3fd20000 	.word	0x3fd20000
 80119ac:	00000000 	.word	0x00000000

080119b0 <__kernel_rem_pio2>:
 80119b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b4:	ed2d 8b02 	vpush	{d8}
 80119b8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80119bc:	1ed4      	subs	r4, r2, #3
 80119be:	9308      	str	r3, [sp, #32]
 80119c0:	9101      	str	r1, [sp, #4]
 80119c2:	4bc5      	ldr	r3, [pc, #788]	; (8011cd8 <__kernel_rem_pio2+0x328>)
 80119c4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80119c6:	9009      	str	r0, [sp, #36]	; 0x24
 80119c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119cc:	9304      	str	r3, [sp, #16]
 80119ce:	9b08      	ldr	r3, [sp, #32]
 80119d0:	3b01      	subs	r3, #1
 80119d2:	9307      	str	r3, [sp, #28]
 80119d4:	2318      	movs	r3, #24
 80119d6:	fb94 f4f3 	sdiv	r4, r4, r3
 80119da:	f06f 0317 	mvn.w	r3, #23
 80119de:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80119e2:	fb04 3303 	mla	r3, r4, r3, r3
 80119e6:	eb03 0a02 	add.w	sl, r3, r2
 80119ea:	9b04      	ldr	r3, [sp, #16]
 80119ec:	9a07      	ldr	r2, [sp, #28]
 80119ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011cc8 <__kernel_rem_pio2+0x318>
 80119f2:	eb03 0802 	add.w	r8, r3, r2
 80119f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80119f8:	1aa7      	subs	r7, r4, r2
 80119fa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80119fe:	ae22      	add	r6, sp, #136	; 0x88
 8011a00:	2500      	movs	r5, #0
 8011a02:	4545      	cmp	r5, r8
 8011a04:	dd13      	ble.n	8011a2e <__kernel_rem_pio2+0x7e>
 8011a06:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011cc8 <__kernel_rem_pio2+0x318>
 8011a0a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011a0e:	2600      	movs	r6, #0
 8011a10:	9b04      	ldr	r3, [sp, #16]
 8011a12:	429e      	cmp	r6, r3
 8011a14:	dc32      	bgt.n	8011a7c <__kernel_rem_pio2+0xcc>
 8011a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a18:	9302      	str	r3, [sp, #8]
 8011a1a:	9b08      	ldr	r3, [sp, #32]
 8011a1c:	199d      	adds	r5, r3, r6
 8011a1e:	ab22      	add	r3, sp, #136	; 0x88
 8011a20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011a24:	9306      	str	r3, [sp, #24]
 8011a26:	ec59 8b18 	vmov	r8, r9, d8
 8011a2a:	2700      	movs	r7, #0
 8011a2c:	e01f      	b.n	8011a6e <__kernel_rem_pio2+0xbe>
 8011a2e:	42ef      	cmn	r7, r5
 8011a30:	d407      	bmi.n	8011a42 <__kernel_rem_pio2+0x92>
 8011a32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011a36:	f7ee fd7d 	bl	8000534 <__aeabi_i2d>
 8011a3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011a3e:	3501      	adds	r5, #1
 8011a40:	e7df      	b.n	8011a02 <__kernel_rem_pio2+0x52>
 8011a42:	ec51 0b18 	vmov	r0, r1, d8
 8011a46:	e7f8      	b.n	8011a3a <__kernel_rem_pio2+0x8a>
 8011a48:	9906      	ldr	r1, [sp, #24]
 8011a4a:	9d02      	ldr	r5, [sp, #8]
 8011a4c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011a50:	9106      	str	r1, [sp, #24]
 8011a52:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011a56:	9502      	str	r5, [sp, #8]
 8011a58:	f7ee fdd6 	bl	8000608 <__aeabi_dmul>
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	460b      	mov	r3, r1
 8011a60:	4640      	mov	r0, r8
 8011a62:	4649      	mov	r1, r9
 8011a64:	f7ee fc1a 	bl	800029c <__adddf3>
 8011a68:	3701      	adds	r7, #1
 8011a6a:	4680      	mov	r8, r0
 8011a6c:	4689      	mov	r9, r1
 8011a6e:	9b07      	ldr	r3, [sp, #28]
 8011a70:	429f      	cmp	r7, r3
 8011a72:	dde9      	ble.n	8011a48 <__kernel_rem_pio2+0x98>
 8011a74:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011a78:	3601      	adds	r6, #1
 8011a7a:	e7c9      	b.n	8011a10 <__kernel_rem_pio2+0x60>
 8011a7c:	9b04      	ldr	r3, [sp, #16]
 8011a7e:	aa0e      	add	r2, sp, #56	; 0x38
 8011a80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a84:	930c      	str	r3, [sp, #48]	; 0x30
 8011a86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011a88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011a8c:	9c04      	ldr	r4, [sp, #16]
 8011a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a90:	ab9a      	add	r3, sp, #616	; 0x268
 8011a92:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011a96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a9e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011aa2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011aa6:	ab9a      	add	r3, sp, #616	; 0x268
 8011aa8:	445b      	add	r3, fp
 8011aaa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011aae:	2500      	movs	r5, #0
 8011ab0:	1b63      	subs	r3, r4, r5
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	dc78      	bgt.n	8011ba8 <__kernel_rem_pio2+0x1f8>
 8011ab6:	4650      	mov	r0, sl
 8011ab8:	ec49 8b10 	vmov	d0, r8, r9
 8011abc:	f000 fe3c 	bl	8012738 <scalbn>
 8011ac0:	ec57 6b10 	vmov	r6, r7, d0
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011aca:	ee10 0a10 	vmov	r0, s0
 8011ace:	4639      	mov	r1, r7
 8011ad0:	f7ee fd9a 	bl	8000608 <__aeabi_dmul>
 8011ad4:	ec41 0b10 	vmov	d0, r0, r1
 8011ad8:	f000 fd1a 	bl	8012510 <floor>
 8011adc:	2200      	movs	r2, #0
 8011ade:	ec51 0b10 	vmov	r0, r1, d0
 8011ae2:	4b7e      	ldr	r3, [pc, #504]	; (8011cdc <__kernel_rem_pio2+0x32c>)
 8011ae4:	f7ee fd90 	bl	8000608 <__aeabi_dmul>
 8011ae8:	4602      	mov	r2, r0
 8011aea:	460b      	mov	r3, r1
 8011aec:	4630      	mov	r0, r6
 8011aee:	4639      	mov	r1, r7
 8011af0:	f7ee fbd2 	bl	8000298 <__aeabi_dsub>
 8011af4:	460f      	mov	r7, r1
 8011af6:	4606      	mov	r6, r0
 8011af8:	f7ef f836 	bl	8000b68 <__aeabi_d2iz>
 8011afc:	9006      	str	r0, [sp, #24]
 8011afe:	f7ee fd19 	bl	8000534 <__aeabi_i2d>
 8011b02:	4602      	mov	r2, r0
 8011b04:	460b      	mov	r3, r1
 8011b06:	4630      	mov	r0, r6
 8011b08:	4639      	mov	r1, r7
 8011b0a:	f7ee fbc5 	bl	8000298 <__aeabi_dsub>
 8011b0e:	f1ba 0f00 	cmp.w	sl, #0
 8011b12:	4606      	mov	r6, r0
 8011b14:	460f      	mov	r7, r1
 8011b16:	dd6c      	ble.n	8011bf2 <__kernel_rem_pio2+0x242>
 8011b18:	1e62      	subs	r2, r4, #1
 8011b1a:	ab0e      	add	r3, sp, #56	; 0x38
 8011b1c:	f1ca 0118 	rsb	r1, sl, #24
 8011b20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b24:	9d06      	ldr	r5, [sp, #24]
 8011b26:	fa40 f301 	asr.w	r3, r0, r1
 8011b2a:	441d      	add	r5, r3
 8011b2c:	408b      	lsls	r3, r1
 8011b2e:	1ac0      	subs	r0, r0, r3
 8011b30:	ab0e      	add	r3, sp, #56	; 0x38
 8011b32:	9506      	str	r5, [sp, #24]
 8011b34:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011b38:	f1ca 0317 	rsb	r3, sl, #23
 8011b3c:	fa40 f303 	asr.w	r3, r0, r3
 8011b40:	9302      	str	r3, [sp, #8]
 8011b42:	9b02      	ldr	r3, [sp, #8]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	dd62      	ble.n	8011c0e <__kernel_rem_pio2+0x25e>
 8011b48:	9b06      	ldr	r3, [sp, #24]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	9306      	str	r3, [sp, #24]
 8011b50:	4615      	mov	r5, r2
 8011b52:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011b56:	4294      	cmp	r4, r2
 8011b58:	f300 8095 	bgt.w	8011c86 <__kernel_rem_pio2+0x2d6>
 8011b5c:	f1ba 0f00 	cmp.w	sl, #0
 8011b60:	dd07      	ble.n	8011b72 <__kernel_rem_pio2+0x1c2>
 8011b62:	f1ba 0f01 	cmp.w	sl, #1
 8011b66:	f000 80a2 	beq.w	8011cae <__kernel_rem_pio2+0x2fe>
 8011b6a:	f1ba 0f02 	cmp.w	sl, #2
 8011b6e:	f000 80c1 	beq.w	8011cf4 <__kernel_rem_pio2+0x344>
 8011b72:	9b02      	ldr	r3, [sp, #8]
 8011b74:	2b02      	cmp	r3, #2
 8011b76:	d14a      	bne.n	8011c0e <__kernel_rem_pio2+0x25e>
 8011b78:	4632      	mov	r2, r6
 8011b7a:	463b      	mov	r3, r7
 8011b7c:	2000      	movs	r0, #0
 8011b7e:	4958      	ldr	r1, [pc, #352]	; (8011ce0 <__kernel_rem_pio2+0x330>)
 8011b80:	f7ee fb8a 	bl	8000298 <__aeabi_dsub>
 8011b84:	4606      	mov	r6, r0
 8011b86:	460f      	mov	r7, r1
 8011b88:	2d00      	cmp	r5, #0
 8011b8a:	d040      	beq.n	8011c0e <__kernel_rem_pio2+0x25e>
 8011b8c:	4650      	mov	r0, sl
 8011b8e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011cd0 <__kernel_rem_pio2+0x320>
 8011b92:	f000 fdd1 	bl	8012738 <scalbn>
 8011b96:	4630      	mov	r0, r6
 8011b98:	4639      	mov	r1, r7
 8011b9a:	ec53 2b10 	vmov	r2, r3, d0
 8011b9e:	f7ee fb7b 	bl	8000298 <__aeabi_dsub>
 8011ba2:	4606      	mov	r6, r0
 8011ba4:	460f      	mov	r7, r1
 8011ba6:	e032      	b.n	8011c0e <__kernel_rem_pio2+0x25e>
 8011ba8:	2200      	movs	r2, #0
 8011baa:	4b4e      	ldr	r3, [pc, #312]	; (8011ce4 <__kernel_rem_pio2+0x334>)
 8011bac:	4640      	mov	r0, r8
 8011bae:	4649      	mov	r1, r9
 8011bb0:	f7ee fd2a 	bl	8000608 <__aeabi_dmul>
 8011bb4:	f7ee ffd8 	bl	8000b68 <__aeabi_d2iz>
 8011bb8:	f7ee fcbc 	bl	8000534 <__aeabi_i2d>
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	4b4a      	ldr	r3, [pc, #296]	; (8011ce8 <__kernel_rem_pio2+0x338>)
 8011bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bc4:	f7ee fd20 	bl	8000608 <__aeabi_dmul>
 8011bc8:	4602      	mov	r2, r0
 8011bca:	460b      	mov	r3, r1
 8011bcc:	4640      	mov	r0, r8
 8011bce:	4649      	mov	r1, r9
 8011bd0:	f7ee fb62 	bl	8000298 <__aeabi_dsub>
 8011bd4:	f7ee ffc8 	bl	8000b68 <__aeabi_d2iz>
 8011bd8:	ab0e      	add	r3, sp, #56	; 0x38
 8011bda:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011bde:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011be6:	f7ee fb59 	bl	800029c <__adddf3>
 8011bea:	3501      	adds	r5, #1
 8011bec:	4680      	mov	r8, r0
 8011bee:	4689      	mov	r9, r1
 8011bf0:	e75e      	b.n	8011ab0 <__kernel_rem_pio2+0x100>
 8011bf2:	d105      	bne.n	8011c00 <__kernel_rem_pio2+0x250>
 8011bf4:	1e63      	subs	r3, r4, #1
 8011bf6:	aa0e      	add	r2, sp, #56	; 0x38
 8011bf8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011bfc:	15c3      	asrs	r3, r0, #23
 8011bfe:	e79f      	b.n	8011b40 <__kernel_rem_pio2+0x190>
 8011c00:	2200      	movs	r2, #0
 8011c02:	4b3a      	ldr	r3, [pc, #232]	; (8011cec <__kernel_rem_pio2+0x33c>)
 8011c04:	f7ee ff86 	bl	8000b14 <__aeabi_dcmpge>
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d139      	bne.n	8011c80 <__kernel_rem_pio2+0x2d0>
 8011c0c:	9002      	str	r0, [sp, #8]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	2300      	movs	r3, #0
 8011c12:	4630      	mov	r0, r6
 8011c14:	4639      	mov	r1, r7
 8011c16:	f7ee ff5f 	bl	8000ad8 <__aeabi_dcmpeq>
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	f000 80c7 	beq.w	8011dae <__kernel_rem_pio2+0x3fe>
 8011c20:	1e65      	subs	r5, r4, #1
 8011c22:	462b      	mov	r3, r5
 8011c24:	2200      	movs	r2, #0
 8011c26:	9904      	ldr	r1, [sp, #16]
 8011c28:	428b      	cmp	r3, r1
 8011c2a:	da6a      	bge.n	8011d02 <__kernel_rem_pio2+0x352>
 8011c2c:	2a00      	cmp	r2, #0
 8011c2e:	f000 8088 	beq.w	8011d42 <__kernel_rem_pio2+0x392>
 8011c32:	ab0e      	add	r3, sp, #56	; 0x38
 8011c34:	f1aa 0a18 	sub.w	sl, sl, #24
 8011c38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f000 80b4 	beq.w	8011daa <__kernel_rem_pio2+0x3fa>
 8011c42:	4650      	mov	r0, sl
 8011c44:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011cd0 <__kernel_rem_pio2+0x320>
 8011c48:	f000 fd76 	bl	8012738 <scalbn>
 8011c4c:	00ec      	lsls	r4, r5, #3
 8011c4e:	ab72      	add	r3, sp, #456	; 0x1c8
 8011c50:	191e      	adds	r6, r3, r4
 8011c52:	ec59 8b10 	vmov	r8, r9, d0
 8011c56:	f106 0a08 	add.w	sl, r6, #8
 8011c5a:	462f      	mov	r7, r5
 8011c5c:	2f00      	cmp	r7, #0
 8011c5e:	f280 80df 	bge.w	8011e20 <__kernel_rem_pio2+0x470>
 8011c62:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011cc8 <__kernel_rem_pio2+0x318>
 8011c66:	f04f 0a00 	mov.w	sl, #0
 8011c6a:	eba5 030a 	sub.w	r3, r5, sl
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f2c0 810a 	blt.w	8011e88 <__kernel_rem_pio2+0x4d8>
 8011c74:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011cf0 <__kernel_rem_pio2+0x340>
 8011c78:	ec59 8b18 	vmov	r8, r9, d8
 8011c7c:	2700      	movs	r7, #0
 8011c7e:	e0f5      	b.n	8011e6c <__kernel_rem_pio2+0x4bc>
 8011c80:	2302      	movs	r3, #2
 8011c82:	9302      	str	r3, [sp, #8]
 8011c84:	e760      	b.n	8011b48 <__kernel_rem_pio2+0x198>
 8011c86:	ab0e      	add	r3, sp, #56	; 0x38
 8011c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c8c:	b94d      	cbnz	r5, 8011ca2 <__kernel_rem_pio2+0x2f2>
 8011c8e:	b12b      	cbz	r3, 8011c9c <__kernel_rem_pio2+0x2ec>
 8011c90:	a80e      	add	r0, sp, #56	; 0x38
 8011c92:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011c96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	3201      	adds	r2, #1
 8011c9e:	461d      	mov	r5, r3
 8011ca0:	e759      	b.n	8011b56 <__kernel_rem_pio2+0x1a6>
 8011ca2:	a80e      	add	r0, sp, #56	; 0x38
 8011ca4:	1acb      	subs	r3, r1, r3
 8011ca6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011caa:	462b      	mov	r3, r5
 8011cac:	e7f6      	b.n	8011c9c <__kernel_rem_pio2+0x2ec>
 8011cae:	1e62      	subs	r2, r4, #1
 8011cb0:	ab0e      	add	r3, sp, #56	; 0x38
 8011cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011cba:	a90e      	add	r1, sp, #56	; 0x38
 8011cbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011cc0:	e757      	b.n	8011b72 <__kernel_rem_pio2+0x1c2>
 8011cc2:	bf00      	nop
 8011cc4:	f3af 8000 	nop.w
	...
 8011cd4:	3ff00000 	.word	0x3ff00000
 8011cd8:	08012f50 	.word	0x08012f50
 8011cdc:	40200000 	.word	0x40200000
 8011ce0:	3ff00000 	.word	0x3ff00000
 8011ce4:	3e700000 	.word	0x3e700000
 8011ce8:	41700000 	.word	0x41700000
 8011cec:	3fe00000 	.word	0x3fe00000
 8011cf0:	08012f10 	.word	0x08012f10
 8011cf4:	1e62      	subs	r2, r4, #1
 8011cf6:	ab0e      	add	r3, sp, #56	; 0x38
 8011cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011d00:	e7db      	b.n	8011cba <__kernel_rem_pio2+0x30a>
 8011d02:	a90e      	add	r1, sp, #56	; 0x38
 8011d04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	430a      	orrs	r2, r1
 8011d0c:	e78b      	b.n	8011c26 <__kernel_rem_pio2+0x276>
 8011d0e:	3301      	adds	r3, #1
 8011d10:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011d14:	2900      	cmp	r1, #0
 8011d16:	d0fa      	beq.n	8011d0e <__kernel_rem_pio2+0x35e>
 8011d18:	9a08      	ldr	r2, [sp, #32]
 8011d1a:	4422      	add	r2, r4
 8011d1c:	00d2      	lsls	r2, r2, #3
 8011d1e:	a922      	add	r1, sp, #136	; 0x88
 8011d20:	18e3      	adds	r3, r4, r3
 8011d22:	9206      	str	r2, [sp, #24]
 8011d24:	440a      	add	r2, r1
 8011d26:	9302      	str	r3, [sp, #8]
 8011d28:	f10b 0108 	add.w	r1, fp, #8
 8011d2c:	f102 0308 	add.w	r3, r2, #8
 8011d30:	1c66      	adds	r6, r4, #1
 8011d32:	910a      	str	r1, [sp, #40]	; 0x28
 8011d34:	2500      	movs	r5, #0
 8011d36:	930d      	str	r3, [sp, #52]	; 0x34
 8011d38:	9b02      	ldr	r3, [sp, #8]
 8011d3a:	42b3      	cmp	r3, r6
 8011d3c:	da04      	bge.n	8011d48 <__kernel_rem_pio2+0x398>
 8011d3e:	461c      	mov	r4, r3
 8011d40:	e6a6      	b.n	8011a90 <__kernel_rem_pio2+0xe0>
 8011d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d44:	2301      	movs	r3, #1
 8011d46:	e7e3      	b.n	8011d10 <__kernel_rem_pio2+0x360>
 8011d48:	9b06      	ldr	r3, [sp, #24]
 8011d4a:	18ef      	adds	r7, r5, r3
 8011d4c:	ab22      	add	r3, sp, #136	; 0x88
 8011d4e:	441f      	add	r7, r3
 8011d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011d56:	f7ee fbed 	bl	8000534 <__aeabi_i2d>
 8011d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d5c:	461c      	mov	r4, r3
 8011d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d60:	e9c7 0100 	strd	r0, r1, [r7]
 8011d64:	eb03 0b05 	add.w	fp, r3, r5
 8011d68:	2700      	movs	r7, #0
 8011d6a:	f04f 0800 	mov.w	r8, #0
 8011d6e:	f04f 0900 	mov.w	r9, #0
 8011d72:	9b07      	ldr	r3, [sp, #28]
 8011d74:	429f      	cmp	r7, r3
 8011d76:	dd08      	ble.n	8011d8a <__kernel_rem_pio2+0x3da>
 8011d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d7a:	aa72      	add	r2, sp, #456	; 0x1c8
 8011d7c:	18eb      	adds	r3, r5, r3
 8011d7e:	4413      	add	r3, r2
 8011d80:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011d84:	3601      	adds	r6, #1
 8011d86:	3508      	adds	r5, #8
 8011d88:	e7d6      	b.n	8011d38 <__kernel_rem_pio2+0x388>
 8011d8a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011d8e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011d92:	f7ee fc39 	bl	8000608 <__aeabi_dmul>
 8011d96:	4602      	mov	r2, r0
 8011d98:	460b      	mov	r3, r1
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	4649      	mov	r1, r9
 8011d9e:	f7ee fa7d 	bl	800029c <__adddf3>
 8011da2:	3701      	adds	r7, #1
 8011da4:	4680      	mov	r8, r0
 8011da6:	4689      	mov	r9, r1
 8011da8:	e7e3      	b.n	8011d72 <__kernel_rem_pio2+0x3c2>
 8011daa:	3d01      	subs	r5, #1
 8011dac:	e741      	b.n	8011c32 <__kernel_rem_pio2+0x282>
 8011dae:	f1ca 0000 	rsb	r0, sl, #0
 8011db2:	ec47 6b10 	vmov	d0, r6, r7
 8011db6:	f000 fcbf 	bl	8012738 <scalbn>
 8011dba:	ec57 6b10 	vmov	r6, r7, d0
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	4b99      	ldr	r3, [pc, #612]	; (8012028 <__kernel_rem_pio2+0x678>)
 8011dc2:	ee10 0a10 	vmov	r0, s0
 8011dc6:	4639      	mov	r1, r7
 8011dc8:	f7ee fea4 	bl	8000b14 <__aeabi_dcmpge>
 8011dcc:	b1f8      	cbz	r0, 8011e0e <__kernel_rem_pio2+0x45e>
 8011dce:	2200      	movs	r2, #0
 8011dd0:	4b96      	ldr	r3, [pc, #600]	; (801202c <__kernel_rem_pio2+0x67c>)
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	4639      	mov	r1, r7
 8011dd6:	f7ee fc17 	bl	8000608 <__aeabi_dmul>
 8011dda:	f7ee fec5 	bl	8000b68 <__aeabi_d2iz>
 8011dde:	4680      	mov	r8, r0
 8011de0:	f7ee fba8 	bl	8000534 <__aeabi_i2d>
 8011de4:	2200      	movs	r2, #0
 8011de6:	4b90      	ldr	r3, [pc, #576]	; (8012028 <__kernel_rem_pio2+0x678>)
 8011de8:	f7ee fc0e 	bl	8000608 <__aeabi_dmul>
 8011dec:	460b      	mov	r3, r1
 8011dee:	4602      	mov	r2, r0
 8011df0:	4639      	mov	r1, r7
 8011df2:	4630      	mov	r0, r6
 8011df4:	f7ee fa50 	bl	8000298 <__aeabi_dsub>
 8011df8:	f7ee feb6 	bl	8000b68 <__aeabi_d2iz>
 8011dfc:	1c65      	adds	r5, r4, #1
 8011dfe:	ab0e      	add	r3, sp, #56	; 0x38
 8011e00:	f10a 0a18 	add.w	sl, sl, #24
 8011e04:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011e08:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011e0c:	e719      	b.n	8011c42 <__kernel_rem_pio2+0x292>
 8011e0e:	4630      	mov	r0, r6
 8011e10:	4639      	mov	r1, r7
 8011e12:	f7ee fea9 	bl	8000b68 <__aeabi_d2iz>
 8011e16:	ab0e      	add	r3, sp, #56	; 0x38
 8011e18:	4625      	mov	r5, r4
 8011e1a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011e1e:	e710      	b.n	8011c42 <__kernel_rem_pio2+0x292>
 8011e20:	ab0e      	add	r3, sp, #56	; 0x38
 8011e22:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011e26:	f7ee fb85 	bl	8000534 <__aeabi_i2d>
 8011e2a:	4642      	mov	r2, r8
 8011e2c:	464b      	mov	r3, r9
 8011e2e:	f7ee fbeb 	bl	8000608 <__aeabi_dmul>
 8011e32:	2200      	movs	r2, #0
 8011e34:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011e38:	4b7c      	ldr	r3, [pc, #496]	; (801202c <__kernel_rem_pio2+0x67c>)
 8011e3a:	4640      	mov	r0, r8
 8011e3c:	4649      	mov	r1, r9
 8011e3e:	f7ee fbe3 	bl	8000608 <__aeabi_dmul>
 8011e42:	3f01      	subs	r7, #1
 8011e44:	4680      	mov	r8, r0
 8011e46:	4689      	mov	r9, r1
 8011e48:	e708      	b.n	8011c5c <__kernel_rem_pio2+0x2ac>
 8011e4a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e52:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8011e56:	f7ee fbd7 	bl	8000608 <__aeabi_dmul>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	4640      	mov	r0, r8
 8011e60:	4649      	mov	r1, r9
 8011e62:	f7ee fa1b 	bl	800029c <__adddf3>
 8011e66:	3701      	adds	r7, #1
 8011e68:	4680      	mov	r8, r0
 8011e6a:	4689      	mov	r9, r1
 8011e6c:	9b04      	ldr	r3, [sp, #16]
 8011e6e:	429f      	cmp	r7, r3
 8011e70:	dc01      	bgt.n	8011e76 <__kernel_rem_pio2+0x4c6>
 8011e72:	45ba      	cmp	sl, r7
 8011e74:	dae9      	bge.n	8011e4a <__kernel_rem_pio2+0x49a>
 8011e76:	ab4a      	add	r3, sp, #296	; 0x128
 8011e78:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011e7c:	e9c3 8900 	strd	r8, r9, [r3]
 8011e80:	f10a 0a01 	add.w	sl, sl, #1
 8011e84:	3e08      	subs	r6, #8
 8011e86:	e6f0      	b.n	8011c6a <__kernel_rem_pio2+0x2ba>
 8011e88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011e8a:	2b03      	cmp	r3, #3
 8011e8c:	d85b      	bhi.n	8011f46 <__kernel_rem_pio2+0x596>
 8011e8e:	e8df f003 	tbb	[pc, r3]
 8011e92:	264a      	.short	0x264a
 8011e94:	0226      	.short	0x0226
 8011e96:	ab9a      	add	r3, sp, #616	; 0x268
 8011e98:	441c      	add	r4, r3
 8011e9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011e9e:	46a2      	mov	sl, r4
 8011ea0:	46ab      	mov	fp, r5
 8011ea2:	f1bb 0f00 	cmp.w	fp, #0
 8011ea6:	dc6c      	bgt.n	8011f82 <__kernel_rem_pio2+0x5d2>
 8011ea8:	46a2      	mov	sl, r4
 8011eaa:	46ab      	mov	fp, r5
 8011eac:	f1bb 0f01 	cmp.w	fp, #1
 8011eb0:	f300 8086 	bgt.w	8011fc0 <__kernel_rem_pio2+0x610>
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	2d01      	cmp	r5, #1
 8011eba:	f300 80a0 	bgt.w	8011ffe <__kernel_rem_pio2+0x64e>
 8011ebe:	9b02      	ldr	r3, [sp, #8]
 8011ec0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011ec4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	f040 809e 	bne.w	801200a <__kernel_rem_pio2+0x65a>
 8011ece:	9b01      	ldr	r3, [sp, #4]
 8011ed0:	e9c3 7800 	strd	r7, r8, [r3]
 8011ed4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011ed8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011edc:	e033      	b.n	8011f46 <__kernel_rem_pio2+0x596>
 8011ede:	3408      	adds	r4, #8
 8011ee0:	ab4a      	add	r3, sp, #296	; 0x128
 8011ee2:	441c      	add	r4, r3
 8011ee4:	462e      	mov	r6, r5
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	2100      	movs	r1, #0
 8011eea:	2e00      	cmp	r6, #0
 8011eec:	da3a      	bge.n	8011f64 <__kernel_rem_pio2+0x5b4>
 8011eee:	9b02      	ldr	r3, [sp, #8]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d03d      	beq.n	8011f70 <__kernel_rem_pio2+0x5c0>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011efa:	9c01      	ldr	r4, [sp, #4]
 8011efc:	e9c4 2300 	strd	r2, r3, [r4]
 8011f00:	4602      	mov	r2, r0
 8011f02:	460b      	mov	r3, r1
 8011f04:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011f08:	f7ee f9c6 	bl	8000298 <__aeabi_dsub>
 8011f0c:	ae4c      	add	r6, sp, #304	; 0x130
 8011f0e:	2401      	movs	r4, #1
 8011f10:	42a5      	cmp	r5, r4
 8011f12:	da30      	bge.n	8011f76 <__kernel_rem_pio2+0x5c6>
 8011f14:	9b02      	ldr	r3, [sp, #8]
 8011f16:	b113      	cbz	r3, 8011f1e <__kernel_rem_pio2+0x56e>
 8011f18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	9b01      	ldr	r3, [sp, #4]
 8011f20:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011f24:	e00f      	b.n	8011f46 <__kernel_rem_pio2+0x596>
 8011f26:	ab9a      	add	r3, sp, #616	; 0x268
 8011f28:	441c      	add	r4, r3
 8011f2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011f2e:	2000      	movs	r0, #0
 8011f30:	2100      	movs	r1, #0
 8011f32:	2d00      	cmp	r5, #0
 8011f34:	da10      	bge.n	8011f58 <__kernel_rem_pio2+0x5a8>
 8011f36:	9b02      	ldr	r3, [sp, #8]
 8011f38:	b113      	cbz	r3, 8011f40 <__kernel_rem_pio2+0x590>
 8011f3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f3e:	4619      	mov	r1, r3
 8011f40:	9b01      	ldr	r3, [sp, #4]
 8011f42:	e9c3 0100 	strd	r0, r1, [r3]
 8011f46:	9b06      	ldr	r3, [sp, #24]
 8011f48:	f003 0007 	and.w	r0, r3, #7
 8011f4c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011f50:	ecbd 8b02 	vpop	{d8}
 8011f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f58:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f5c:	f7ee f99e 	bl	800029c <__adddf3>
 8011f60:	3d01      	subs	r5, #1
 8011f62:	e7e6      	b.n	8011f32 <__kernel_rem_pio2+0x582>
 8011f64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f68:	f7ee f998 	bl	800029c <__adddf3>
 8011f6c:	3e01      	subs	r6, #1
 8011f6e:	e7bc      	b.n	8011eea <__kernel_rem_pio2+0x53a>
 8011f70:	4602      	mov	r2, r0
 8011f72:	460b      	mov	r3, r1
 8011f74:	e7c1      	b.n	8011efa <__kernel_rem_pio2+0x54a>
 8011f76:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011f7a:	f7ee f98f 	bl	800029c <__adddf3>
 8011f7e:	3401      	adds	r4, #1
 8011f80:	e7c6      	b.n	8011f10 <__kernel_rem_pio2+0x560>
 8011f82:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8011f86:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011f8a:	4640      	mov	r0, r8
 8011f8c:	ec53 2b17 	vmov	r2, r3, d7
 8011f90:	4649      	mov	r1, r9
 8011f92:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011f96:	f7ee f981 	bl	800029c <__adddf3>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	4606      	mov	r6, r0
 8011fa0:	460f      	mov	r7, r1
 8011fa2:	4640      	mov	r0, r8
 8011fa4:	4649      	mov	r1, r9
 8011fa6:	f7ee f977 	bl	8000298 <__aeabi_dsub>
 8011faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fae:	f7ee f975 	bl	800029c <__adddf3>
 8011fb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011fb6:	e9ca 0100 	strd	r0, r1, [sl]
 8011fba:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8011fbe:	e770      	b.n	8011ea2 <__kernel_rem_pio2+0x4f2>
 8011fc0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8011fc4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011fc8:	4630      	mov	r0, r6
 8011fca:	ec53 2b17 	vmov	r2, r3, d7
 8011fce:	4639      	mov	r1, r7
 8011fd0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011fd4:	f7ee f962 	bl	800029c <__adddf3>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	4680      	mov	r8, r0
 8011fde:	4689      	mov	r9, r1
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	4639      	mov	r1, r7
 8011fe4:	f7ee f958 	bl	8000298 <__aeabi_dsub>
 8011fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fec:	f7ee f956 	bl	800029c <__adddf3>
 8011ff0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011ff4:	e9ca 0100 	strd	r0, r1, [sl]
 8011ff8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8011ffc:	e756      	b.n	8011eac <__kernel_rem_pio2+0x4fc>
 8011ffe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012002:	f7ee f94b 	bl	800029c <__adddf3>
 8012006:	3d01      	subs	r5, #1
 8012008:	e756      	b.n	8011eb8 <__kernel_rem_pio2+0x508>
 801200a:	9b01      	ldr	r3, [sp, #4]
 801200c:	9a01      	ldr	r2, [sp, #4]
 801200e:	601f      	str	r7, [r3, #0]
 8012010:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012014:	605c      	str	r4, [r3, #4]
 8012016:	609d      	str	r5, [r3, #8]
 8012018:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801201c:	60d3      	str	r3, [r2, #12]
 801201e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012022:	6110      	str	r0, [r2, #16]
 8012024:	6153      	str	r3, [r2, #20]
 8012026:	e78e      	b.n	8011f46 <__kernel_rem_pio2+0x596>
 8012028:	41700000 	.word	0x41700000
 801202c:	3e700000 	.word	0x3e700000

08012030 <__kernel_sin>:
 8012030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012034:	ec55 4b10 	vmov	r4, r5, d0
 8012038:	b085      	sub	sp, #20
 801203a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801203e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012042:	ed8d 1b00 	vstr	d1, [sp]
 8012046:	9002      	str	r0, [sp, #8]
 8012048:	da06      	bge.n	8012058 <__kernel_sin+0x28>
 801204a:	ee10 0a10 	vmov	r0, s0
 801204e:	4629      	mov	r1, r5
 8012050:	f7ee fd8a 	bl	8000b68 <__aeabi_d2iz>
 8012054:	2800      	cmp	r0, #0
 8012056:	d051      	beq.n	80120fc <__kernel_sin+0xcc>
 8012058:	4622      	mov	r2, r4
 801205a:	462b      	mov	r3, r5
 801205c:	4620      	mov	r0, r4
 801205e:	4629      	mov	r1, r5
 8012060:	f7ee fad2 	bl	8000608 <__aeabi_dmul>
 8012064:	4682      	mov	sl, r0
 8012066:	468b      	mov	fp, r1
 8012068:	4602      	mov	r2, r0
 801206a:	460b      	mov	r3, r1
 801206c:	4620      	mov	r0, r4
 801206e:	4629      	mov	r1, r5
 8012070:	f7ee faca 	bl	8000608 <__aeabi_dmul>
 8012074:	a341      	add	r3, pc, #260	; (adr r3, 801217c <__kernel_sin+0x14c>)
 8012076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207a:	4680      	mov	r8, r0
 801207c:	4689      	mov	r9, r1
 801207e:	4650      	mov	r0, sl
 8012080:	4659      	mov	r1, fp
 8012082:	f7ee fac1 	bl	8000608 <__aeabi_dmul>
 8012086:	a33f      	add	r3, pc, #252	; (adr r3, 8012184 <__kernel_sin+0x154>)
 8012088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208c:	f7ee f904 	bl	8000298 <__aeabi_dsub>
 8012090:	4652      	mov	r2, sl
 8012092:	465b      	mov	r3, fp
 8012094:	f7ee fab8 	bl	8000608 <__aeabi_dmul>
 8012098:	a33c      	add	r3, pc, #240	; (adr r3, 801218c <__kernel_sin+0x15c>)
 801209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209e:	f7ee f8fd 	bl	800029c <__adddf3>
 80120a2:	4652      	mov	r2, sl
 80120a4:	465b      	mov	r3, fp
 80120a6:	f7ee faaf 	bl	8000608 <__aeabi_dmul>
 80120aa:	a33a      	add	r3, pc, #232	; (adr r3, 8012194 <__kernel_sin+0x164>)
 80120ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b0:	f7ee f8f2 	bl	8000298 <__aeabi_dsub>
 80120b4:	4652      	mov	r2, sl
 80120b6:	465b      	mov	r3, fp
 80120b8:	f7ee faa6 	bl	8000608 <__aeabi_dmul>
 80120bc:	a337      	add	r3, pc, #220	; (adr r3, 801219c <__kernel_sin+0x16c>)
 80120be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c2:	f7ee f8eb 	bl	800029c <__adddf3>
 80120c6:	9b02      	ldr	r3, [sp, #8]
 80120c8:	4606      	mov	r6, r0
 80120ca:	460f      	mov	r7, r1
 80120cc:	b9db      	cbnz	r3, 8012106 <__kernel_sin+0xd6>
 80120ce:	4602      	mov	r2, r0
 80120d0:	460b      	mov	r3, r1
 80120d2:	4650      	mov	r0, sl
 80120d4:	4659      	mov	r1, fp
 80120d6:	f7ee fa97 	bl	8000608 <__aeabi_dmul>
 80120da:	a325      	add	r3, pc, #148	; (adr r3, 8012170 <__kernel_sin+0x140>)
 80120dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e0:	f7ee f8da 	bl	8000298 <__aeabi_dsub>
 80120e4:	4642      	mov	r2, r8
 80120e6:	464b      	mov	r3, r9
 80120e8:	f7ee fa8e 	bl	8000608 <__aeabi_dmul>
 80120ec:	4602      	mov	r2, r0
 80120ee:	460b      	mov	r3, r1
 80120f0:	4620      	mov	r0, r4
 80120f2:	4629      	mov	r1, r5
 80120f4:	f7ee f8d2 	bl	800029c <__adddf3>
 80120f8:	4604      	mov	r4, r0
 80120fa:	460d      	mov	r5, r1
 80120fc:	ec45 4b10 	vmov	d0, r4, r5
 8012100:	b005      	add	sp, #20
 8012102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012106:	2200      	movs	r2, #0
 8012108:	4b1b      	ldr	r3, [pc, #108]	; (8012178 <__kernel_sin+0x148>)
 801210a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801210e:	f7ee fa7b 	bl	8000608 <__aeabi_dmul>
 8012112:	4632      	mov	r2, r6
 8012114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012118:	463b      	mov	r3, r7
 801211a:	4640      	mov	r0, r8
 801211c:	4649      	mov	r1, r9
 801211e:	f7ee fa73 	bl	8000608 <__aeabi_dmul>
 8012122:	4602      	mov	r2, r0
 8012124:	460b      	mov	r3, r1
 8012126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801212a:	f7ee f8b5 	bl	8000298 <__aeabi_dsub>
 801212e:	4652      	mov	r2, sl
 8012130:	465b      	mov	r3, fp
 8012132:	f7ee fa69 	bl	8000608 <__aeabi_dmul>
 8012136:	e9dd 2300 	ldrd	r2, r3, [sp]
 801213a:	f7ee f8ad 	bl	8000298 <__aeabi_dsub>
 801213e:	a30c      	add	r3, pc, #48	; (adr r3, 8012170 <__kernel_sin+0x140>)
 8012140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012144:	4606      	mov	r6, r0
 8012146:	460f      	mov	r7, r1
 8012148:	4640      	mov	r0, r8
 801214a:	4649      	mov	r1, r9
 801214c:	f7ee fa5c 	bl	8000608 <__aeabi_dmul>
 8012150:	4602      	mov	r2, r0
 8012152:	460b      	mov	r3, r1
 8012154:	4630      	mov	r0, r6
 8012156:	4639      	mov	r1, r7
 8012158:	f7ee f8a0 	bl	800029c <__adddf3>
 801215c:	4602      	mov	r2, r0
 801215e:	460b      	mov	r3, r1
 8012160:	4620      	mov	r0, r4
 8012162:	4629      	mov	r1, r5
 8012164:	f7ee f898 	bl	8000298 <__aeabi_dsub>
 8012168:	e7c6      	b.n	80120f8 <__kernel_sin+0xc8>
 801216a:	bf00      	nop
 801216c:	f3af 8000 	nop.w
 8012170:	55555549 	.word	0x55555549
 8012174:	3fc55555 	.word	0x3fc55555
 8012178:	3fe00000 	.word	0x3fe00000
 801217c:	5acfd57c 	.word	0x5acfd57c
 8012180:	3de5d93a 	.word	0x3de5d93a
 8012184:	8a2b9ceb 	.word	0x8a2b9ceb
 8012188:	3e5ae5e6 	.word	0x3e5ae5e6
 801218c:	57b1fe7d 	.word	0x57b1fe7d
 8012190:	3ec71de3 	.word	0x3ec71de3
 8012194:	19c161d5 	.word	0x19c161d5
 8012198:	3f2a01a0 	.word	0x3f2a01a0
 801219c:	1110f8a6 	.word	0x1110f8a6
 80121a0:	3f811111 	.word	0x3f811111
 80121a4:	00000000 	.word	0x00000000

080121a8 <atan>:
 80121a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121ac:	ec55 4b10 	vmov	r4, r5, d0
 80121b0:	4bc3      	ldr	r3, [pc, #780]	; (80124c0 <atan+0x318>)
 80121b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80121b6:	429e      	cmp	r6, r3
 80121b8:	46ab      	mov	fp, r5
 80121ba:	dd18      	ble.n	80121ee <atan+0x46>
 80121bc:	4bc1      	ldr	r3, [pc, #772]	; (80124c4 <atan+0x31c>)
 80121be:	429e      	cmp	r6, r3
 80121c0:	dc01      	bgt.n	80121c6 <atan+0x1e>
 80121c2:	d109      	bne.n	80121d8 <atan+0x30>
 80121c4:	b144      	cbz	r4, 80121d8 <atan+0x30>
 80121c6:	4622      	mov	r2, r4
 80121c8:	462b      	mov	r3, r5
 80121ca:	4620      	mov	r0, r4
 80121cc:	4629      	mov	r1, r5
 80121ce:	f7ee f865 	bl	800029c <__adddf3>
 80121d2:	4604      	mov	r4, r0
 80121d4:	460d      	mov	r5, r1
 80121d6:	e006      	b.n	80121e6 <atan+0x3e>
 80121d8:	f1bb 0f00 	cmp.w	fp, #0
 80121dc:	f340 8131 	ble.w	8012442 <atan+0x29a>
 80121e0:	a59b      	add	r5, pc, #620	; (adr r5, 8012450 <atan+0x2a8>)
 80121e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80121e6:	ec45 4b10 	vmov	d0, r4, r5
 80121ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ee:	4bb6      	ldr	r3, [pc, #728]	; (80124c8 <atan+0x320>)
 80121f0:	429e      	cmp	r6, r3
 80121f2:	dc14      	bgt.n	801221e <atan+0x76>
 80121f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80121f8:	429e      	cmp	r6, r3
 80121fa:	dc0d      	bgt.n	8012218 <atan+0x70>
 80121fc:	a396      	add	r3, pc, #600	; (adr r3, 8012458 <atan+0x2b0>)
 80121fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012202:	ee10 0a10 	vmov	r0, s0
 8012206:	4629      	mov	r1, r5
 8012208:	f7ee f848 	bl	800029c <__adddf3>
 801220c:	2200      	movs	r2, #0
 801220e:	4baf      	ldr	r3, [pc, #700]	; (80124cc <atan+0x324>)
 8012210:	f7ee fc8a 	bl	8000b28 <__aeabi_dcmpgt>
 8012214:	2800      	cmp	r0, #0
 8012216:	d1e6      	bne.n	80121e6 <atan+0x3e>
 8012218:	f04f 3aff 	mov.w	sl, #4294967295
 801221c:	e02b      	b.n	8012276 <atan+0xce>
 801221e:	f000 f963 	bl	80124e8 <fabs>
 8012222:	4bab      	ldr	r3, [pc, #684]	; (80124d0 <atan+0x328>)
 8012224:	429e      	cmp	r6, r3
 8012226:	ec55 4b10 	vmov	r4, r5, d0
 801222a:	f300 80bf 	bgt.w	80123ac <atan+0x204>
 801222e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012232:	429e      	cmp	r6, r3
 8012234:	f300 80a0 	bgt.w	8012378 <atan+0x1d0>
 8012238:	ee10 2a10 	vmov	r2, s0
 801223c:	ee10 0a10 	vmov	r0, s0
 8012240:	462b      	mov	r3, r5
 8012242:	4629      	mov	r1, r5
 8012244:	f7ee f82a 	bl	800029c <__adddf3>
 8012248:	2200      	movs	r2, #0
 801224a:	4ba0      	ldr	r3, [pc, #640]	; (80124cc <atan+0x324>)
 801224c:	f7ee f824 	bl	8000298 <__aeabi_dsub>
 8012250:	2200      	movs	r2, #0
 8012252:	4606      	mov	r6, r0
 8012254:	460f      	mov	r7, r1
 8012256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801225a:	4620      	mov	r0, r4
 801225c:	4629      	mov	r1, r5
 801225e:	f7ee f81d 	bl	800029c <__adddf3>
 8012262:	4602      	mov	r2, r0
 8012264:	460b      	mov	r3, r1
 8012266:	4630      	mov	r0, r6
 8012268:	4639      	mov	r1, r7
 801226a:	f7ee faf7 	bl	800085c <__aeabi_ddiv>
 801226e:	f04f 0a00 	mov.w	sl, #0
 8012272:	4604      	mov	r4, r0
 8012274:	460d      	mov	r5, r1
 8012276:	4622      	mov	r2, r4
 8012278:	462b      	mov	r3, r5
 801227a:	4620      	mov	r0, r4
 801227c:	4629      	mov	r1, r5
 801227e:	f7ee f9c3 	bl	8000608 <__aeabi_dmul>
 8012282:	4602      	mov	r2, r0
 8012284:	460b      	mov	r3, r1
 8012286:	4680      	mov	r8, r0
 8012288:	4689      	mov	r9, r1
 801228a:	f7ee f9bd 	bl	8000608 <__aeabi_dmul>
 801228e:	a374      	add	r3, pc, #464	; (adr r3, 8012460 <atan+0x2b8>)
 8012290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012294:	4606      	mov	r6, r0
 8012296:	460f      	mov	r7, r1
 8012298:	f7ee f9b6 	bl	8000608 <__aeabi_dmul>
 801229c:	a372      	add	r3, pc, #456	; (adr r3, 8012468 <atan+0x2c0>)
 801229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a2:	f7ed fffb 	bl	800029c <__adddf3>
 80122a6:	4632      	mov	r2, r6
 80122a8:	463b      	mov	r3, r7
 80122aa:	f7ee f9ad 	bl	8000608 <__aeabi_dmul>
 80122ae:	a370      	add	r3, pc, #448	; (adr r3, 8012470 <atan+0x2c8>)
 80122b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b4:	f7ed fff2 	bl	800029c <__adddf3>
 80122b8:	4632      	mov	r2, r6
 80122ba:	463b      	mov	r3, r7
 80122bc:	f7ee f9a4 	bl	8000608 <__aeabi_dmul>
 80122c0:	a36d      	add	r3, pc, #436	; (adr r3, 8012478 <atan+0x2d0>)
 80122c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c6:	f7ed ffe9 	bl	800029c <__adddf3>
 80122ca:	4632      	mov	r2, r6
 80122cc:	463b      	mov	r3, r7
 80122ce:	f7ee f99b 	bl	8000608 <__aeabi_dmul>
 80122d2:	a36b      	add	r3, pc, #428	; (adr r3, 8012480 <atan+0x2d8>)
 80122d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d8:	f7ed ffe0 	bl	800029c <__adddf3>
 80122dc:	4632      	mov	r2, r6
 80122de:	463b      	mov	r3, r7
 80122e0:	f7ee f992 	bl	8000608 <__aeabi_dmul>
 80122e4:	a368      	add	r3, pc, #416	; (adr r3, 8012488 <atan+0x2e0>)
 80122e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ea:	f7ed ffd7 	bl	800029c <__adddf3>
 80122ee:	4642      	mov	r2, r8
 80122f0:	464b      	mov	r3, r9
 80122f2:	f7ee f989 	bl	8000608 <__aeabi_dmul>
 80122f6:	a366      	add	r3, pc, #408	; (adr r3, 8012490 <atan+0x2e8>)
 80122f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fc:	4680      	mov	r8, r0
 80122fe:	4689      	mov	r9, r1
 8012300:	4630      	mov	r0, r6
 8012302:	4639      	mov	r1, r7
 8012304:	f7ee f980 	bl	8000608 <__aeabi_dmul>
 8012308:	a363      	add	r3, pc, #396	; (adr r3, 8012498 <atan+0x2f0>)
 801230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230e:	f7ed ffc3 	bl	8000298 <__aeabi_dsub>
 8012312:	4632      	mov	r2, r6
 8012314:	463b      	mov	r3, r7
 8012316:	f7ee f977 	bl	8000608 <__aeabi_dmul>
 801231a:	a361      	add	r3, pc, #388	; (adr r3, 80124a0 <atan+0x2f8>)
 801231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012320:	f7ed ffba 	bl	8000298 <__aeabi_dsub>
 8012324:	4632      	mov	r2, r6
 8012326:	463b      	mov	r3, r7
 8012328:	f7ee f96e 	bl	8000608 <__aeabi_dmul>
 801232c:	a35e      	add	r3, pc, #376	; (adr r3, 80124a8 <atan+0x300>)
 801232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012332:	f7ed ffb1 	bl	8000298 <__aeabi_dsub>
 8012336:	4632      	mov	r2, r6
 8012338:	463b      	mov	r3, r7
 801233a:	f7ee f965 	bl	8000608 <__aeabi_dmul>
 801233e:	a35c      	add	r3, pc, #368	; (adr r3, 80124b0 <atan+0x308>)
 8012340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012344:	f7ed ffa8 	bl	8000298 <__aeabi_dsub>
 8012348:	4632      	mov	r2, r6
 801234a:	463b      	mov	r3, r7
 801234c:	f7ee f95c 	bl	8000608 <__aeabi_dmul>
 8012350:	4602      	mov	r2, r0
 8012352:	460b      	mov	r3, r1
 8012354:	4640      	mov	r0, r8
 8012356:	4649      	mov	r1, r9
 8012358:	f7ed ffa0 	bl	800029c <__adddf3>
 801235c:	4622      	mov	r2, r4
 801235e:	462b      	mov	r3, r5
 8012360:	f7ee f952 	bl	8000608 <__aeabi_dmul>
 8012364:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012368:	4602      	mov	r2, r0
 801236a:	460b      	mov	r3, r1
 801236c:	d14b      	bne.n	8012406 <atan+0x25e>
 801236e:	4620      	mov	r0, r4
 8012370:	4629      	mov	r1, r5
 8012372:	f7ed ff91 	bl	8000298 <__aeabi_dsub>
 8012376:	e72c      	b.n	80121d2 <atan+0x2a>
 8012378:	ee10 0a10 	vmov	r0, s0
 801237c:	2200      	movs	r2, #0
 801237e:	4b53      	ldr	r3, [pc, #332]	; (80124cc <atan+0x324>)
 8012380:	4629      	mov	r1, r5
 8012382:	f7ed ff89 	bl	8000298 <__aeabi_dsub>
 8012386:	2200      	movs	r2, #0
 8012388:	4606      	mov	r6, r0
 801238a:	460f      	mov	r7, r1
 801238c:	4b4f      	ldr	r3, [pc, #316]	; (80124cc <atan+0x324>)
 801238e:	4620      	mov	r0, r4
 8012390:	4629      	mov	r1, r5
 8012392:	f7ed ff83 	bl	800029c <__adddf3>
 8012396:	4602      	mov	r2, r0
 8012398:	460b      	mov	r3, r1
 801239a:	4630      	mov	r0, r6
 801239c:	4639      	mov	r1, r7
 801239e:	f7ee fa5d 	bl	800085c <__aeabi_ddiv>
 80123a2:	f04f 0a01 	mov.w	sl, #1
 80123a6:	4604      	mov	r4, r0
 80123a8:	460d      	mov	r5, r1
 80123aa:	e764      	b.n	8012276 <atan+0xce>
 80123ac:	4b49      	ldr	r3, [pc, #292]	; (80124d4 <atan+0x32c>)
 80123ae:	429e      	cmp	r6, r3
 80123b0:	dc1d      	bgt.n	80123ee <atan+0x246>
 80123b2:	ee10 0a10 	vmov	r0, s0
 80123b6:	2200      	movs	r2, #0
 80123b8:	4b47      	ldr	r3, [pc, #284]	; (80124d8 <atan+0x330>)
 80123ba:	4629      	mov	r1, r5
 80123bc:	f7ed ff6c 	bl	8000298 <__aeabi_dsub>
 80123c0:	2200      	movs	r2, #0
 80123c2:	4606      	mov	r6, r0
 80123c4:	460f      	mov	r7, r1
 80123c6:	4b44      	ldr	r3, [pc, #272]	; (80124d8 <atan+0x330>)
 80123c8:	4620      	mov	r0, r4
 80123ca:	4629      	mov	r1, r5
 80123cc:	f7ee f91c 	bl	8000608 <__aeabi_dmul>
 80123d0:	2200      	movs	r2, #0
 80123d2:	4b3e      	ldr	r3, [pc, #248]	; (80124cc <atan+0x324>)
 80123d4:	f7ed ff62 	bl	800029c <__adddf3>
 80123d8:	4602      	mov	r2, r0
 80123da:	460b      	mov	r3, r1
 80123dc:	4630      	mov	r0, r6
 80123de:	4639      	mov	r1, r7
 80123e0:	f7ee fa3c 	bl	800085c <__aeabi_ddiv>
 80123e4:	f04f 0a02 	mov.w	sl, #2
 80123e8:	4604      	mov	r4, r0
 80123ea:	460d      	mov	r5, r1
 80123ec:	e743      	b.n	8012276 <atan+0xce>
 80123ee:	462b      	mov	r3, r5
 80123f0:	ee10 2a10 	vmov	r2, s0
 80123f4:	2000      	movs	r0, #0
 80123f6:	4939      	ldr	r1, [pc, #228]	; (80124dc <atan+0x334>)
 80123f8:	f7ee fa30 	bl	800085c <__aeabi_ddiv>
 80123fc:	f04f 0a03 	mov.w	sl, #3
 8012400:	4604      	mov	r4, r0
 8012402:	460d      	mov	r5, r1
 8012404:	e737      	b.n	8012276 <atan+0xce>
 8012406:	4b36      	ldr	r3, [pc, #216]	; (80124e0 <atan+0x338>)
 8012408:	4e36      	ldr	r6, [pc, #216]	; (80124e4 <atan+0x33c>)
 801240a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801240e:	4456      	add	r6, sl
 8012410:	449a      	add	sl, r3
 8012412:	e9da 2300 	ldrd	r2, r3, [sl]
 8012416:	f7ed ff3f 	bl	8000298 <__aeabi_dsub>
 801241a:	4622      	mov	r2, r4
 801241c:	462b      	mov	r3, r5
 801241e:	f7ed ff3b 	bl	8000298 <__aeabi_dsub>
 8012422:	4602      	mov	r2, r0
 8012424:	460b      	mov	r3, r1
 8012426:	e9d6 0100 	ldrd	r0, r1, [r6]
 801242a:	f7ed ff35 	bl	8000298 <__aeabi_dsub>
 801242e:	f1bb 0f00 	cmp.w	fp, #0
 8012432:	4604      	mov	r4, r0
 8012434:	460d      	mov	r5, r1
 8012436:	f6bf aed6 	bge.w	80121e6 <atan+0x3e>
 801243a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801243e:	461d      	mov	r5, r3
 8012440:	e6d1      	b.n	80121e6 <atan+0x3e>
 8012442:	a51d      	add	r5, pc, #116	; (adr r5, 80124b8 <atan+0x310>)
 8012444:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012448:	e6cd      	b.n	80121e6 <atan+0x3e>
 801244a:	bf00      	nop
 801244c:	f3af 8000 	nop.w
 8012450:	54442d18 	.word	0x54442d18
 8012454:	3ff921fb 	.word	0x3ff921fb
 8012458:	8800759c 	.word	0x8800759c
 801245c:	7e37e43c 	.word	0x7e37e43c
 8012460:	e322da11 	.word	0xe322da11
 8012464:	3f90ad3a 	.word	0x3f90ad3a
 8012468:	24760deb 	.word	0x24760deb
 801246c:	3fa97b4b 	.word	0x3fa97b4b
 8012470:	a0d03d51 	.word	0xa0d03d51
 8012474:	3fb10d66 	.word	0x3fb10d66
 8012478:	c54c206e 	.word	0xc54c206e
 801247c:	3fb745cd 	.word	0x3fb745cd
 8012480:	920083ff 	.word	0x920083ff
 8012484:	3fc24924 	.word	0x3fc24924
 8012488:	5555550d 	.word	0x5555550d
 801248c:	3fd55555 	.word	0x3fd55555
 8012490:	2c6a6c2f 	.word	0x2c6a6c2f
 8012494:	bfa2b444 	.word	0xbfa2b444
 8012498:	52defd9a 	.word	0x52defd9a
 801249c:	3fadde2d 	.word	0x3fadde2d
 80124a0:	af749a6d 	.word	0xaf749a6d
 80124a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80124a8:	fe231671 	.word	0xfe231671
 80124ac:	3fbc71c6 	.word	0x3fbc71c6
 80124b0:	9998ebc4 	.word	0x9998ebc4
 80124b4:	3fc99999 	.word	0x3fc99999
 80124b8:	54442d18 	.word	0x54442d18
 80124bc:	bff921fb 	.word	0xbff921fb
 80124c0:	440fffff 	.word	0x440fffff
 80124c4:	7ff00000 	.word	0x7ff00000
 80124c8:	3fdbffff 	.word	0x3fdbffff
 80124cc:	3ff00000 	.word	0x3ff00000
 80124d0:	3ff2ffff 	.word	0x3ff2ffff
 80124d4:	40037fff 	.word	0x40037fff
 80124d8:	3ff80000 	.word	0x3ff80000
 80124dc:	bff00000 	.word	0xbff00000
 80124e0:	08012f80 	.word	0x08012f80
 80124e4:	08012f60 	.word	0x08012f60

080124e8 <fabs>:
 80124e8:	ec51 0b10 	vmov	r0, r1, d0
 80124ec:	ee10 2a10 	vmov	r2, s0
 80124f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80124f4:	ec43 2b10 	vmov	d0, r2, r3
 80124f8:	4770      	bx	lr

080124fa <finite>:
 80124fa:	ee10 3a90 	vmov	r3, s1
 80124fe:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012502:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012506:	0fc0      	lsrs	r0, r0, #31
 8012508:	4770      	bx	lr
 801250a:	0000      	movs	r0, r0
 801250c:	0000      	movs	r0, r0
	...

08012510 <floor>:
 8012510:	ec51 0b10 	vmov	r0, r1, d0
 8012514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012518:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801251c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012520:	2e13      	cmp	r6, #19
 8012522:	460c      	mov	r4, r1
 8012524:	ee10 5a10 	vmov	r5, s0
 8012528:	4680      	mov	r8, r0
 801252a:	dc34      	bgt.n	8012596 <floor+0x86>
 801252c:	2e00      	cmp	r6, #0
 801252e:	da16      	bge.n	801255e <floor+0x4e>
 8012530:	a335      	add	r3, pc, #212	; (adr r3, 8012608 <floor+0xf8>)
 8012532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012536:	f7ed feb1 	bl	800029c <__adddf3>
 801253a:	2200      	movs	r2, #0
 801253c:	2300      	movs	r3, #0
 801253e:	f7ee faf3 	bl	8000b28 <__aeabi_dcmpgt>
 8012542:	b148      	cbz	r0, 8012558 <floor+0x48>
 8012544:	2c00      	cmp	r4, #0
 8012546:	da59      	bge.n	80125fc <floor+0xec>
 8012548:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801254c:	4a30      	ldr	r2, [pc, #192]	; (8012610 <floor+0x100>)
 801254e:	432b      	orrs	r3, r5
 8012550:	2500      	movs	r5, #0
 8012552:	42ab      	cmp	r3, r5
 8012554:	bf18      	it	ne
 8012556:	4614      	movne	r4, r2
 8012558:	4621      	mov	r1, r4
 801255a:	4628      	mov	r0, r5
 801255c:	e025      	b.n	80125aa <floor+0x9a>
 801255e:	4f2d      	ldr	r7, [pc, #180]	; (8012614 <floor+0x104>)
 8012560:	4137      	asrs	r7, r6
 8012562:	ea01 0307 	and.w	r3, r1, r7
 8012566:	4303      	orrs	r3, r0
 8012568:	d01f      	beq.n	80125aa <floor+0x9a>
 801256a:	a327      	add	r3, pc, #156	; (adr r3, 8012608 <floor+0xf8>)
 801256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012570:	f7ed fe94 	bl	800029c <__adddf3>
 8012574:	2200      	movs	r2, #0
 8012576:	2300      	movs	r3, #0
 8012578:	f7ee fad6 	bl	8000b28 <__aeabi_dcmpgt>
 801257c:	2800      	cmp	r0, #0
 801257e:	d0eb      	beq.n	8012558 <floor+0x48>
 8012580:	2c00      	cmp	r4, #0
 8012582:	bfbe      	ittt	lt
 8012584:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012588:	fa43 f606 	asrlt.w	r6, r3, r6
 801258c:	19a4      	addlt	r4, r4, r6
 801258e:	ea24 0407 	bic.w	r4, r4, r7
 8012592:	2500      	movs	r5, #0
 8012594:	e7e0      	b.n	8012558 <floor+0x48>
 8012596:	2e33      	cmp	r6, #51	; 0x33
 8012598:	dd0b      	ble.n	80125b2 <floor+0xa2>
 801259a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801259e:	d104      	bne.n	80125aa <floor+0x9a>
 80125a0:	ee10 2a10 	vmov	r2, s0
 80125a4:	460b      	mov	r3, r1
 80125a6:	f7ed fe79 	bl	800029c <__adddf3>
 80125aa:	ec41 0b10 	vmov	d0, r0, r1
 80125ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80125b6:	f04f 33ff 	mov.w	r3, #4294967295
 80125ba:	fa23 f707 	lsr.w	r7, r3, r7
 80125be:	4207      	tst	r7, r0
 80125c0:	d0f3      	beq.n	80125aa <floor+0x9a>
 80125c2:	a311      	add	r3, pc, #68	; (adr r3, 8012608 <floor+0xf8>)
 80125c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c8:	f7ed fe68 	bl	800029c <__adddf3>
 80125cc:	2200      	movs	r2, #0
 80125ce:	2300      	movs	r3, #0
 80125d0:	f7ee faaa 	bl	8000b28 <__aeabi_dcmpgt>
 80125d4:	2800      	cmp	r0, #0
 80125d6:	d0bf      	beq.n	8012558 <floor+0x48>
 80125d8:	2c00      	cmp	r4, #0
 80125da:	da02      	bge.n	80125e2 <floor+0xd2>
 80125dc:	2e14      	cmp	r6, #20
 80125de:	d103      	bne.n	80125e8 <floor+0xd8>
 80125e0:	3401      	adds	r4, #1
 80125e2:	ea25 0507 	bic.w	r5, r5, r7
 80125e6:	e7b7      	b.n	8012558 <floor+0x48>
 80125e8:	2301      	movs	r3, #1
 80125ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80125ee:	fa03 f606 	lsl.w	r6, r3, r6
 80125f2:	4435      	add	r5, r6
 80125f4:	4545      	cmp	r5, r8
 80125f6:	bf38      	it	cc
 80125f8:	18e4      	addcc	r4, r4, r3
 80125fa:	e7f2      	b.n	80125e2 <floor+0xd2>
 80125fc:	2500      	movs	r5, #0
 80125fe:	462c      	mov	r4, r5
 8012600:	e7aa      	b.n	8012558 <floor+0x48>
 8012602:	bf00      	nop
 8012604:	f3af 8000 	nop.w
 8012608:	8800759c 	.word	0x8800759c
 801260c:	7e37e43c 	.word	0x7e37e43c
 8012610:	bff00000 	.word	0xbff00000
 8012614:	000fffff 	.word	0x000fffff

08012618 <matherr>:
 8012618:	2000      	movs	r0, #0
 801261a:	4770      	bx	lr
 801261c:	0000      	movs	r0, r0
	...

08012620 <nan>:
 8012620:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012628 <nan+0x8>
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop
 8012628:	00000000 	.word	0x00000000
 801262c:	7ff80000 	.word	0x7ff80000

08012630 <rint>:
 8012630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012632:	ec51 0b10 	vmov	r0, r1, d0
 8012636:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801263a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801263e:	2e13      	cmp	r6, #19
 8012640:	460b      	mov	r3, r1
 8012642:	ee10 4a10 	vmov	r4, s0
 8012646:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801264a:	dc56      	bgt.n	80126fa <rint+0xca>
 801264c:	2e00      	cmp	r6, #0
 801264e:	da2b      	bge.n	80126a8 <rint+0x78>
 8012650:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012654:	4302      	orrs	r2, r0
 8012656:	d023      	beq.n	80126a0 <rint+0x70>
 8012658:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801265c:	4302      	orrs	r2, r0
 801265e:	4254      	negs	r4, r2
 8012660:	4314      	orrs	r4, r2
 8012662:	0c4b      	lsrs	r3, r1, #17
 8012664:	0b24      	lsrs	r4, r4, #12
 8012666:	045b      	lsls	r3, r3, #17
 8012668:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801266c:	ea44 0103 	orr.w	r1, r4, r3
 8012670:	460b      	mov	r3, r1
 8012672:	492f      	ldr	r1, [pc, #188]	; (8012730 <rint+0x100>)
 8012674:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012678:	e9d1 6700 	ldrd	r6, r7, [r1]
 801267c:	4602      	mov	r2, r0
 801267e:	4639      	mov	r1, r7
 8012680:	4630      	mov	r0, r6
 8012682:	f7ed fe0b 	bl	800029c <__adddf3>
 8012686:	e9cd 0100 	strd	r0, r1, [sp]
 801268a:	463b      	mov	r3, r7
 801268c:	4632      	mov	r2, r6
 801268e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012692:	f7ed fe01 	bl	8000298 <__aeabi_dsub>
 8012696:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801269a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801269e:	4639      	mov	r1, r7
 80126a0:	ec41 0b10 	vmov	d0, r0, r1
 80126a4:	b003      	add	sp, #12
 80126a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126a8:	4a22      	ldr	r2, [pc, #136]	; (8012734 <rint+0x104>)
 80126aa:	4132      	asrs	r2, r6
 80126ac:	ea01 0702 	and.w	r7, r1, r2
 80126b0:	4307      	orrs	r7, r0
 80126b2:	d0f5      	beq.n	80126a0 <rint+0x70>
 80126b4:	0852      	lsrs	r2, r2, #1
 80126b6:	4011      	ands	r1, r2
 80126b8:	430c      	orrs	r4, r1
 80126ba:	d00b      	beq.n	80126d4 <rint+0xa4>
 80126bc:	ea23 0202 	bic.w	r2, r3, r2
 80126c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80126c4:	2e13      	cmp	r6, #19
 80126c6:	fa43 f306 	asr.w	r3, r3, r6
 80126ca:	bf0c      	ite	eq
 80126cc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80126d0:	2400      	movne	r4, #0
 80126d2:	4313      	orrs	r3, r2
 80126d4:	4916      	ldr	r1, [pc, #88]	; (8012730 <rint+0x100>)
 80126d6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80126da:	4622      	mov	r2, r4
 80126dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80126e0:	4620      	mov	r0, r4
 80126e2:	4629      	mov	r1, r5
 80126e4:	f7ed fdda 	bl	800029c <__adddf3>
 80126e8:	e9cd 0100 	strd	r0, r1, [sp]
 80126ec:	4622      	mov	r2, r4
 80126ee:	462b      	mov	r3, r5
 80126f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126f4:	f7ed fdd0 	bl	8000298 <__aeabi_dsub>
 80126f8:	e7d2      	b.n	80126a0 <rint+0x70>
 80126fa:	2e33      	cmp	r6, #51	; 0x33
 80126fc:	dd07      	ble.n	801270e <rint+0xde>
 80126fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012702:	d1cd      	bne.n	80126a0 <rint+0x70>
 8012704:	ee10 2a10 	vmov	r2, s0
 8012708:	f7ed fdc8 	bl	800029c <__adddf3>
 801270c:	e7c8      	b.n	80126a0 <rint+0x70>
 801270e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8012712:	f04f 32ff 	mov.w	r2, #4294967295
 8012716:	40f2      	lsrs	r2, r6
 8012718:	4210      	tst	r0, r2
 801271a:	d0c1      	beq.n	80126a0 <rint+0x70>
 801271c:	0852      	lsrs	r2, r2, #1
 801271e:	4210      	tst	r0, r2
 8012720:	bf1f      	itttt	ne
 8012722:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012726:	ea20 0202 	bicne.w	r2, r0, r2
 801272a:	4134      	asrne	r4, r6
 801272c:	4314      	orrne	r4, r2
 801272e:	e7d1      	b.n	80126d4 <rint+0xa4>
 8012730:	08012fa0 	.word	0x08012fa0
 8012734:	000fffff 	.word	0x000fffff

08012738 <scalbn>:
 8012738:	b570      	push	{r4, r5, r6, lr}
 801273a:	ec55 4b10 	vmov	r4, r5, d0
 801273e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012742:	4606      	mov	r6, r0
 8012744:	462b      	mov	r3, r5
 8012746:	b9aa      	cbnz	r2, 8012774 <scalbn+0x3c>
 8012748:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801274c:	4323      	orrs	r3, r4
 801274e:	d03b      	beq.n	80127c8 <scalbn+0x90>
 8012750:	4b31      	ldr	r3, [pc, #196]	; (8012818 <scalbn+0xe0>)
 8012752:	4629      	mov	r1, r5
 8012754:	2200      	movs	r2, #0
 8012756:	ee10 0a10 	vmov	r0, s0
 801275a:	f7ed ff55 	bl	8000608 <__aeabi_dmul>
 801275e:	4b2f      	ldr	r3, [pc, #188]	; (801281c <scalbn+0xe4>)
 8012760:	429e      	cmp	r6, r3
 8012762:	4604      	mov	r4, r0
 8012764:	460d      	mov	r5, r1
 8012766:	da12      	bge.n	801278e <scalbn+0x56>
 8012768:	a327      	add	r3, pc, #156	; (adr r3, 8012808 <scalbn+0xd0>)
 801276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276e:	f7ed ff4b 	bl	8000608 <__aeabi_dmul>
 8012772:	e009      	b.n	8012788 <scalbn+0x50>
 8012774:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012778:	428a      	cmp	r2, r1
 801277a:	d10c      	bne.n	8012796 <scalbn+0x5e>
 801277c:	ee10 2a10 	vmov	r2, s0
 8012780:	4620      	mov	r0, r4
 8012782:	4629      	mov	r1, r5
 8012784:	f7ed fd8a 	bl	800029c <__adddf3>
 8012788:	4604      	mov	r4, r0
 801278a:	460d      	mov	r5, r1
 801278c:	e01c      	b.n	80127c8 <scalbn+0x90>
 801278e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012792:	460b      	mov	r3, r1
 8012794:	3a36      	subs	r2, #54	; 0x36
 8012796:	4432      	add	r2, r6
 8012798:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801279c:	428a      	cmp	r2, r1
 801279e:	dd0b      	ble.n	80127b8 <scalbn+0x80>
 80127a0:	ec45 4b11 	vmov	d1, r4, r5
 80127a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012810 <scalbn+0xd8>
 80127a8:	f000 f83c 	bl	8012824 <copysign>
 80127ac:	a318      	add	r3, pc, #96	; (adr r3, 8012810 <scalbn+0xd8>)
 80127ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b2:	ec51 0b10 	vmov	r0, r1, d0
 80127b6:	e7da      	b.n	801276e <scalbn+0x36>
 80127b8:	2a00      	cmp	r2, #0
 80127ba:	dd08      	ble.n	80127ce <scalbn+0x96>
 80127bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80127c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80127c8:	ec45 4b10 	vmov	d0, r4, r5
 80127cc:	bd70      	pop	{r4, r5, r6, pc}
 80127ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80127d2:	da0d      	bge.n	80127f0 <scalbn+0xb8>
 80127d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80127d8:	429e      	cmp	r6, r3
 80127da:	ec45 4b11 	vmov	d1, r4, r5
 80127de:	dce1      	bgt.n	80127a4 <scalbn+0x6c>
 80127e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012808 <scalbn+0xd0>
 80127e4:	f000 f81e 	bl	8012824 <copysign>
 80127e8:	a307      	add	r3, pc, #28	; (adr r3, 8012808 <scalbn+0xd0>)
 80127ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ee:	e7e0      	b.n	80127b2 <scalbn+0x7a>
 80127f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127f4:	3236      	adds	r2, #54	; 0x36
 80127f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80127fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80127fe:	4620      	mov	r0, r4
 8012800:	4629      	mov	r1, r5
 8012802:	2200      	movs	r2, #0
 8012804:	4b06      	ldr	r3, [pc, #24]	; (8012820 <scalbn+0xe8>)
 8012806:	e7b2      	b.n	801276e <scalbn+0x36>
 8012808:	c2f8f359 	.word	0xc2f8f359
 801280c:	01a56e1f 	.word	0x01a56e1f
 8012810:	8800759c 	.word	0x8800759c
 8012814:	7e37e43c 	.word	0x7e37e43c
 8012818:	43500000 	.word	0x43500000
 801281c:	ffff3cb0 	.word	0xffff3cb0
 8012820:	3c900000 	.word	0x3c900000

08012824 <copysign>:
 8012824:	ec51 0b10 	vmov	r0, r1, d0
 8012828:	ee11 0a90 	vmov	r0, s3
 801282c:	ee10 2a10 	vmov	r2, s0
 8012830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012834:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012838:	ea41 0300 	orr.w	r3, r1, r0
 801283c:	ec43 2b10 	vmov	d0, r2, r3
 8012840:	4770      	bx	lr
	...

08012844 <_init>:
 8012844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012846:	bf00      	nop
 8012848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801284a:	bc08      	pop	{r3}
 801284c:	469e      	mov	lr, r3
 801284e:	4770      	bx	lr

08012850 <_fini>:
 8012850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012852:	bf00      	nop
 8012854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012856:	bc08      	pop	{r3}
 8012858:	469e      	mov	lr, r3
 801285a:	4770      	bx	lr
