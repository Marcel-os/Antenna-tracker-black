
Antenna tracker black.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fde4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800ff88  0800ff88  0001ff88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010618  08010618  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08010618  08010618  00020618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010620  08010620  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010620  08010620  00020620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010624  08010624  00020624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08010628  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c1c  20000354  0801097c  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f70  0801097c  00030f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d8c  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000365b  00000000  00000000  00048110  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001180  00000000  00000000  0004b770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd8  00000000  00000000  0004c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a45c  00000000  00000000  0004d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010bc6  00000000  00000000  00067d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f97c  00000000  00000000  000788ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108266  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006200  00000000  00000000  001082e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000354 	.word	0x20000354
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ff6c 	.word	0x0800ff6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000358 	.word	0x20000358
 80001dc:	0800ff6c 	.word	0x0800ff6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a26      	ldr	r2, [pc, #152]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_GPIO_Init+0xb8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <MX_GPIO_Init+0xb8>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_GPIO_Init+0xb8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <MX_GPIO_Init+0xbc>)
 8001026:	f001 facf 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin;
 800102a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_GPIO_Init+0xbc>)
 8001044:	f001 f93e 	bl	80022c4 <HAL_GPIO_Init>

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400

08001058 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
    CDC_Transmit_FS((uint8_t*)ptr, len);
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	68b8      	ldr	r0, [r7, #8]
 8001068:	f006 fed6 	bl	8007e18 <CDC_Transmit_FS>
    return len;
 800106c:	687b      	ldr	r3, [r7, #4]

}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <send_json_ada>:

void send_json(int32_t Encoder1, int32_t Encoder2){
	printf("{\"enkoder1\":%d,\"enkoder2\":%d}\r\n", Encoder1, Encoder2);
}

void send_json_ada(double azimuth, double altitude, double distance){
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af04      	add	r7, sp, #16
 800107e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001082:	ed87 1b02 	vstr	d1, [r7, #8]
 8001086:	ed87 2b00 	vstr	d2, [r7]
	printf("{\"azimuth\":%f,\"altitude\":%f,\"distance\":%f}\r\n", azimuth, altitude, distance);
 800108a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800108e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001092:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001096:	e9cd 3400 	strd	r3, r4, [sp]
 800109a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <send_json_ada+0x34>)
 80010a0:	f008 fa1a 	bl	80094d8 <iprintf>
}
 80010a4:	bf00      	nop
 80010a6:	371c      	adds	r7, #28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	0800ffcc 	.word	0x0800ffcc

080010b0 <calc_azimuth>:

void calc_azimuth(double Latitude1, double Longitude1, double Height1, double Latitude2, double Longitude2, double Height2, double *azimuth, double *distance, double *altitude){ //Latitude = φ Longitude = λ
 80010b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b4:	ed2d 8b02 	vpush	{d8}
 80010b8:	b09c      	sub	sp, #112	; 0x70
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80010c0:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80010c4:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80010c8:	ed87 3b08 	vstr	d3, [r7, #32]
 80010cc:	ed87 4b06 	vstr	d4, [r7, #24]
 80010d0:	ed87 5b04 	vstr	d5, [r7, #16]
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]

	Latitude1 *= (M_PI/180);
 80010da:	a3e1      	add	r3, pc, #900	; (adr r3, 8001460 <calc_azimuth+0x3b0>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80010e4:	f7ff fa90 	bl	8000608 <__aeabi_dmul>
 80010e8:	4603      	mov	r3, r0
 80010ea:	460c      	mov	r4, r1
 80010ec:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	Longitude1 *= (M_PI/180);
 80010f0:	a3db      	add	r3, pc, #876	; (adr r3, 8001460 <calc_azimuth+0x3b0>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80010fa:	f7ff fa85 	bl	8000608 <__aeabi_dmul>
 80010fe:	4603      	mov	r3, r0
 8001100:	460c      	mov	r4, r1
 8001102:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	Latitude2 *= (M_PI/180);
 8001106:	a3d6      	add	r3, pc, #856	; (adr r3, 8001460 <calc_azimuth+0x3b0>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001110:	f7ff fa7a 	bl	8000608 <__aeabi_dmul>
 8001114:	4603      	mov	r3, r0
 8001116:	460c      	mov	r4, r1
 8001118:	e9c7 3408 	strd	r3, r4, [r7, #32]
	Longitude2 *= (M_PI/180);
 800111c:	a3d0      	add	r3, pc, #832	; (adr r3, 8001460 <calc_azimuth+0x3b0>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001126:	f7ff fa6f 	bl	8000608 <__aeabi_dmul>
 800112a:	4603      	mov	r3, r0
 800112c:	460c      	mov	r4, r1
 800112e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	Height1 /= 1000;
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4bc8      	ldr	r3, [pc, #800]	; (8001458 <calc_azimuth+0x3a8>)
 8001138:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800113c:	f7ff fb8e 	bl	800085c <__aeabi_ddiv>
 8001140:	4603      	mov	r3, r0
 8001142:	460c      	mov	r4, r1
 8001144:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	Height2 /= 1000;
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4bc2      	ldr	r3, [pc, #776]	; (8001458 <calc_azimuth+0x3a8>)
 800114e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001152:	f7ff fb83 	bl	800085c <__aeabi_ddiv>
 8001156:	4603      	mov	r3, r0
 8001158:	460c      	mov	r4, r1
 800115a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	double delta_Latitude = (Latitude2 - Latitude1);
 800115e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001162:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001166:	f7ff f897 	bl	8000298 <__aeabi_dsub>
 800116a:	4603      	mov	r3, r0
 800116c:	460c      	mov	r4, r1
 800116e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	double delta_Longitude = (Longitude2 - Longitude1);
 8001172:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001176:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800117a:	f7ff f88d 	bl	8000298 <__aeabi_dsub>
 800117e:	4603      	mov	r3, r0
 8001180:	460c      	mov	r4, r1
 8001182:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	double delta_Height = Height2 - Height1;
 8001186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800118a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800118e:	f7ff f883 	bl	8000298 <__aeabi_dsub>
 8001192:	4603      	mov	r3, r0
 8001194:	460c      	mov	r4, r1
 8001196:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58



	//θ = atan2 [(sin Δλ * cos φ₂), (cos φ�? * sin φ₂ �?� sin φ�? * cos φ₂ *  cos Δλ)]
	*azimuth = atan2( ( sin(delta_Longitude) * cos(Latitude2) ) , ( (cos(Latitude1) * sin(Latitude2)) - (sin(Latitude1) * cos(Latitude2) * cos(delta_Longitude)) ) ) * (180/ M_PI );
 800119a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800119e:	f00c f977 	bl	800d490 <sin>
 80011a2:	ec55 4b10 	vmov	r4, r5, d0
 80011a6:	ed97 0b08 	vldr	d0, [r7, #32]
 80011aa:	f00c f92d 	bl	800d408 <cos>
 80011ae:	ec53 2b10 	vmov	r2, r3, d0
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff fa27 	bl	8000608 <__aeabi_dmul>
 80011ba:	4603      	mov	r3, r0
 80011bc:	460c      	mov	r4, r1
 80011be:	ec44 3b18 	vmov	d8, r3, r4
 80011c2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80011c6:	f00c f91f 	bl	800d408 <cos>
 80011ca:	ec55 4b10 	vmov	r4, r5, d0
 80011ce:	ed97 0b08 	vldr	d0, [r7, #32]
 80011d2:	f00c f95d 	bl	800d490 <sin>
 80011d6:	ec53 2b10 	vmov	r2, r3, d0
 80011da:	4620      	mov	r0, r4
 80011dc:	4629      	mov	r1, r5
 80011de:	f7ff fa13 	bl	8000608 <__aeabi_dmul>
 80011e2:	4603      	mov	r3, r0
 80011e4:	460c      	mov	r4, r1
 80011e6:	4625      	mov	r5, r4
 80011e8:	461c      	mov	r4, r3
 80011ea:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80011ee:	f00c f94f 	bl	800d490 <sin>
 80011f2:	ec59 8b10 	vmov	r8, r9, d0
 80011f6:	ed97 0b08 	vldr	d0, [r7, #32]
 80011fa:	f00c f905 	bl	800d408 <cos>
 80011fe:	ec53 2b10 	vmov	r2, r3, d0
 8001202:	4640      	mov	r0, r8
 8001204:	4649      	mov	r1, r9
 8001206:	f7ff f9ff 	bl	8000608 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4690      	mov	r8, r2
 8001210:	4699      	mov	r9, r3
 8001212:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001216:	f00c f8f7 	bl	800d408 <cos>
 800121a:	ec53 2b10 	vmov	r2, r3, d0
 800121e:	4640      	mov	r0, r8
 8001220:	4649      	mov	r1, r9
 8001222:	f7ff f9f1 	bl	8000608 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff f833 	bl	8000298 <__aeabi_dsub>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	ec44 3b17 	vmov	d7, r3, r4
 800123a:	eeb0 1a47 	vmov.f32	s2, s14
 800123e:	eef0 1a67 	vmov.f32	s3, s15
 8001242:	eeb0 0a48 	vmov.f32	s0, s16
 8001246:	eef0 0a68 	vmov.f32	s1, s17
 800124a:	f00c f9c1 	bl	800d5d0 <atan2>
 800124e:	ec51 0b10 	vmov	r0, r1, d0
 8001252:	a37b      	add	r3, pc, #492	; (adr r3, 8001440 <calc_azimuth+0x390>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9d6 	bl	8000608 <__aeabi_dmul>
 800125c:	4603      	mov	r3, r0
 800125e:	460c      	mov	r4, r1
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	e9c2 3400 	strd	r3, r4, [r2]
	//Haversine formula:
	//a = sin²(Δφ/2) + cos φ�? * cos φ₂ * sin²(Δλ/2)
	double a = pow( sin(delta_Latitude/2), 2.0 ) + (cos(Latitude1) * cos(Latitude2) * pow(sin(delta_Longitude/2), 2.0));
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800126e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001272:	f7ff faf3 	bl	800085c <__aeabi_ddiv>
 8001276:	4603      	mov	r3, r0
 8001278:	460c      	mov	r4, r1
 800127a:	ec44 3b17 	vmov	d7, r3, r4
 800127e:	eeb0 0a47 	vmov.f32	s0, s14
 8001282:	eef0 0a67 	vmov.f32	s1, s15
 8001286:	f00c f903 	bl	800d490 <sin>
 800128a:	eeb0 7a40 	vmov.f32	s14, s0
 800128e:	eef0 7a60 	vmov.f32	s15, s1
 8001292:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8001448 <calc_azimuth+0x398>
 8001296:	eeb0 0a47 	vmov.f32	s0, s14
 800129a:	eef0 0a67 	vmov.f32	s1, s15
 800129e:	f00c f999 	bl	800d5d4 <pow>
 80012a2:	ec59 8b10 	vmov	r8, r9, d0
 80012a6:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80012aa:	f00c f8ad 	bl	800d408 <cos>
 80012ae:	ec55 4b10 	vmov	r4, r5, d0
 80012b2:	ed97 0b08 	vldr	d0, [r7, #32]
 80012b6:	f00c f8a7 	bl	800d408 <cos>
 80012ba:	ec53 2b10 	vmov	r2, r3, d0
 80012be:	4620      	mov	r0, r4
 80012c0:	4629      	mov	r1, r5
 80012c2:	f7ff f9a1 	bl	8000608 <__aeabi_dmul>
 80012c6:	4603      	mov	r3, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	4625      	mov	r5, r4
 80012cc:	461c      	mov	r4, r3
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012d6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80012da:	f7ff fabf 	bl	800085c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	ec43 2b17 	vmov	d7, r2, r3
 80012e6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ea:	eef0 0a67 	vmov.f32	s1, s15
 80012ee:	f00c f8cf 	bl	800d490 <sin>
 80012f2:	eeb0 7a40 	vmov.f32	s14, s0
 80012f6:	eef0 7a60 	vmov.f32	s15, s1
 80012fa:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8001448 <calc_azimuth+0x398>
 80012fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001302:	eef0 0a67 	vmov.f32	s1, s15
 8001306:	f00c f965 	bl	800d5d4 <pow>
 800130a:	ec53 2b10 	vmov	r2, r3, d0
 800130e:	4620      	mov	r0, r4
 8001310:	4629      	mov	r1, r5
 8001312:	f7ff f979 	bl	8000608 <__aeabi_dmul>
 8001316:	4603      	mov	r3, r0
 8001318:	460c      	mov	r4, r1
 800131a:	461a      	mov	r2, r3
 800131c:	4623      	mov	r3, r4
 800131e:	4640      	mov	r0, r8
 8001320:	4649      	mov	r1, r9
 8001322:	f7fe ffbb 	bl	800029c <__adddf3>
 8001326:	4603      	mov	r3, r0
 8001328:	460c      	mov	r4, r1
 800132a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	//c = 2 * atan2 [�?�a, �?�(1�?�a)]
	double c = 2.0 * atan2( sqrt(a), sqrt(1.0-a));
 800132e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001332:	f00c fabf 	bl	800d8b4 <sqrt>
 8001336:	eeb0 8a40 	vmov.f32	s16, s0
 800133a:	eef0 8a60 	vmov.f32	s17, s1
 800133e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001342:	f04f 0000 	mov.w	r0, #0
 8001346:	4945      	ldr	r1, [pc, #276]	; (800145c <calc_azimuth+0x3ac>)
 8001348:	f7fe ffa6 	bl	8000298 <__aeabi_dsub>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	ec44 3b17 	vmov	d7, r3, r4
 8001354:	eeb0 0a47 	vmov.f32	s0, s14
 8001358:	eef0 0a67 	vmov.f32	s1, s15
 800135c:	f00c faaa 	bl	800d8b4 <sqrt>
 8001360:	eeb0 7a40 	vmov.f32	s14, s0
 8001364:	eef0 7a60 	vmov.f32	s15, s1
 8001368:	eeb0 1a47 	vmov.f32	s2, s14
 800136c:	eef0 1a67 	vmov.f32	s3, s15
 8001370:	eeb0 0a48 	vmov.f32	s0, s16
 8001374:	eef0 0a68 	vmov.f32	s1, s17
 8001378:	f00c f92a 	bl	800d5d0 <atan2>
 800137c:	ec51 0b10 	vmov	r0, r1, d0
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	f7fe ff8a 	bl	800029c <__adddf3>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	//d = R * c, R = 6371 km - radius of the Earth
	double sphere_distance = 6371.0 * c; // in km
 8001390:	a32f      	add	r3, pc, #188	; (adr r3, 8001450 <calc_azimuth+0x3a0>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800139a:	f7ff f935 	bl	8000608 <__aeabi_dmul>
 800139e:	4603      	mov	r3, r0
 80013a0:	460c      	mov	r4, r1
 80013a2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	*distance = sqrt( pow(sphere_distance, 2.0) + pow(delta_Height, 2.0));// in km
 80013a6:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001448 <calc_azimuth+0x398>
 80013aa:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80013ae:	f00c f911 	bl	800d5d4 <pow>
 80013b2:	ec55 4b10 	vmov	r4, r5, d0
 80013b6:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001448 <calc_azimuth+0x398>
 80013ba:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80013be:	f00c f909 	bl	800d5d4 <pow>
 80013c2:	ec53 2b10 	vmov	r2, r3, d0
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7fe ff67 	bl	800029c <__adddf3>
 80013ce:	4603      	mov	r3, r0
 80013d0:	460c      	mov	r4, r1
 80013d2:	ec44 3b17 	vmov	d7, r3, r4
 80013d6:	eeb0 0a47 	vmov.f32	s0, s14
 80013da:	eef0 0a67 	vmov.f32	s1, s15
 80013de:	f00c fa69 	bl	800d8b4 <sqrt>
 80013e2:	eeb0 7a40 	vmov.f32	s14, s0
 80013e6:	eef0 7a60 	vmov.f32	s15, s1
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	ed83 7b00 	vstr	d7, [r3]
	*altitude = acos(sphere_distance/ *distance)  * (180/M_PI);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4623      	mov	r3, r4
 80013fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80013fe:	f7ff fa2d 	bl	800085c <__aeabi_ddiv>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	ec44 3b17 	vmov	d7, r3, r4
 800140a:	eeb0 0a47 	vmov.f32	s0, s14
 800140e:	eef0 0a67 	vmov.f32	s1, s15
 8001412:	f00c f885 	bl	800d520 <acos>
 8001416:	ec51 0b10 	vmov	r0, r1, d0
 800141a:	a309      	add	r3, pc, #36	; (adr r3, 8001440 <calc_azimuth+0x390>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f8f2 	bl	8000608 <__aeabi_dmul>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	e9c2 3400 	strd	r3, r4, [r2]
}
 800142e:	bf00      	nop
 8001430:	3770      	adds	r7, #112	; 0x70
 8001432:	46bd      	mov	sp, r7
 8001434:	ecbd 8b02 	vpop	{d8}
 8001438:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800143c:	f3af 8000 	nop.w
 8001440:	1a63c1f8 	.word	0x1a63c1f8
 8001444:	404ca5dc 	.word	0x404ca5dc
 8001448:	00000000 	.word	0x00000000
 800144c:	40000000 	.word	0x40000000
 8001450:	00000000 	.word	0x00000000
 8001454:	40b8e300 	.word	0x40b8e300
 8001458:	408f4000 	.word	0x408f4000
 800145c:	3ff00000 	.word	0x3ff00000
 8001460:	a2529d39 	.word	0xa2529d39
 8001464:	3f91df46 	.word	0x3f91df46

08001468 <parse_loc>:

void parse_loc(){
 8001468:	b580      	push	{r7, lr}
 800146a:	b09a      	sub	sp, #104	; 0x68
 800146c:	af06      	add	r7, sp, #24
  	char header[1];
  	double Latitude1, Longitude1, Height1, Latitude2, Longitude2, Height2, azimuth, distance, altitude;

  	sscanf(ReceivedData, "%s %lf %lf %lf %lf %lf %lf", &header, &Latitude1, &Longitude1, &Height1, &Latitude2, &Longitude2, &Height2);
 800146e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001472:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001476:	f107 0318 	add.w	r3, r7, #24
 800147a:	9304      	str	r3, [sp, #16]
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	9303      	str	r3, [sp, #12]
 8001482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001486:	9302      	str	r3, [sp, #8]
 8001488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	460b      	mov	r3, r1
 8001496:	4920      	ldr	r1, [pc, #128]	; (8001518 <parse_loc+0xb0>)
 8001498:	4820      	ldr	r0, [pc, #128]	; (800151c <parse_loc+0xb4>)
 800149a:	f008 f8cf 	bl	800963c <siscanf>
  	if( header[0] == 'G' )
 800149e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80014a2:	2b47      	cmp	r3, #71	; 0x47
 80014a4:	d130      	bne.n	8001508 <parse_loc+0xa0>
  	{
  		calc_azimuth( Latitude1,  Longitude1,  Height1,  Latitude2,  Longitude2,  Height2,  &azimuth,  &distance,  &altitude);
 80014a6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80014aa:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80014ae:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 80014b2:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 80014b6:	ed97 4b08 	vldr	d4, [r7, #32]
 80014ba:	ed97 5b06 	vldr	d5, [r7, #24]
 80014be:	463a      	mov	r2, r7
 80014c0:	f107 0108 	add.w	r1, r7, #8
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4618      	mov	r0, r3
 80014ca:	eeb0 1a46 	vmov.f32	s2, s12
 80014ce:	eef0 1a66 	vmov.f32	s3, s13
 80014d2:	eeb0 0a47 	vmov.f32	s0, s14
 80014d6:	eef0 0a67 	vmov.f32	s1, s15
 80014da:	f7ff fde9 	bl	80010b0 <calc_azimuth>
  		send_json_ada( azimuth, altitude, distance);
 80014de:	ed97 7b04 	vldr	d7, [r7, #16]
 80014e2:	ed97 6b00 	vldr	d6, [r7]
 80014e6:	ed97 5b02 	vldr	d5, [r7, #8]
 80014ea:	eeb0 2a45 	vmov.f32	s4, s10
 80014ee:	eef0 2a65 	vmov.f32	s5, s11
 80014f2:	eeb0 1a46 	vmov.f32	s2, s12
 80014f6:	eef0 1a66 	vmov.f32	s3, s13
 80014fa:	eeb0 0a47 	vmov.f32	s0, s14
 80014fe:	eef0 0a67 	vmov.f32	s1, s15
 8001502:	f7ff fdb9 	bl	8001078 <send_json_ada>

  	}else printf("error - zle dane \r\n");

}
 8001506:	e002      	b.n	800150e <parse_loc+0xa6>
  	}else printf("error - zle dane \r\n");
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <parse_loc+0xb8>)
 800150a:	f008 f859 	bl	80095c0 <puts>
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	; 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	0800fffc 	.word	0x0800fffc
 800151c:	20000448 	.word	0x20000448
 8001520:	0800ff98 	.word	0x0800ff98

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f000 fd26 	bl	8001f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f8c0 	bl	80016b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f7ff fd32 	bl	8000f98 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001534:	f006 fb96 	bl	8007c64 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001538:	f000 fac2 	bl	8001ac0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800153c:	f000 fb76 	bl	8001c2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001540:	f000 fbc6 	bl	8001cd0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  pid_init(&pid_azimuth, 150.0f, 50.0f, 0.005f, 10, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	210a      	movs	r1, #10
 8001548:	ed9f 1a50 	vldr	s2, [pc, #320]	; 800168c <main+0x168>
 800154c:	eddf 0a50 	vldr	s1, [pc, #320]	; 8001690 <main+0x16c>
 8001550:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001694 <main+0x170>
 8001554:	4850      	ldr	r0, [pc, #320]	; (8001698 <main+0x174>)
 8001556:	f000 f91a 	bl	800178e <pid_init>
  pid_azimuth.p_max = pid_scale(&pid_azimuth, 4095);
 800155a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800169c <main+0x178>
 800155e:	484e      	ldr	r0, [pc, #312]	; (8001698 <main+0x174>)
 8001560:	f000 f9a0 	bl	80018a4 <pid_scale>
 8001564:	4602      	mov	r2, r0
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <main+0x174>)
 8001568:	619a      	str	r2, [r3, #24]
  pid_azimuth.p_min = pid_scale(&pid_azimuth, -4095);
 800156a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80016a0 <main+0x17c>
 800156e:	484a      	ldr	r0, [pc, #296]	; (8001698 <main+0x174>)
 8001570:	f000 f998 	bl	80018a4 <pid_scale>
 8001574:	4602      	mov	r2, r0
 8001576:	4b48      	ldr	r3, [pc, #288]	; (8001698 <main+0x174>)
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
  pid_azimuth.i_max = pid_scale(&pid_azimuth, 4095);
 800157a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800169c <main+0x178>
 800157e:	4846      	ldr	r0, [pc, #280]	; (8001698 <main+0x174>)
 8001580:	f000 f990 	bl	80018a4 <pid_scale>
 8001584:	4602      	mov	r2, r0
 8001586:	4b44      	ldr	r3, [pc, #272]	; (8001698 <main+0x174>)
 8001588:	61da      	str	r2, [r3, #28]
  pid_azimuth.i_min = pid_scale(&pid_azimuth, -4095);
 800158a:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80016a0 <main+0x17c>
 800158e:	4842      	ldr	r0, [pc, #264]	; (8001698 <main+0x174>)
 8001590:	f000 f988 	bl	80018a4 <pid_scale>
 8001594:	4602      	mov	r2, r0
 8001596:	4b40      	ldr	r3, [pc, #256]	; (8001698 <main+0x174>)
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  pid_azimuth.d_max = pid_scale(&pid_azimuth, 4095);
 800159a:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800169c <main+0x178>
 800159e:	483e      	ldr	r0, [pc, #248]	; (8001698 <main+0x174>)
 80015a0:	f000 f980 	bl	80018a4 <pid_scale>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <main+0x174>)
 80015a8:	621a      	str	r2, [r3, #32]
  pid_azimuth.d_min = pid_scale(&pid_azimuth, -4095);
 80015aa:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80016a0 <main+0x17c>
 80015ae:	483a      	ldr	r0, [pc, #232]	; (8001698 <main+0x174>)
 80015b0:	f000 f978 	bl	80018a4 <pid_scale>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <main+0x174>)
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_azimuth.total_max = pid_scale(&pid_azimuth, 4095);
 80015ba:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800169c <main+0x178>
 80015be:	4836      	ldr	r0, [pc, #216]	; (8001698 <main+0x174>)
 80015c0:	f000 f970 	bl	80018a4 <pid_scale>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <main+0x174>)
 80015c8:	649a      	str	r2, [r3, #72]	; 0x48
  pid_azimuth.total_min = pid_scale(&pid_azimuth, 0);
 80015ca:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80016a4 <main+0x180>
 80015ce:	4832      	ldr	r0, [pc, #200]	; (8001698 <main+0x174>)
 80015d0:	f000 f968 	bl	80018a4 <pid_scale>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <main+0x174>)
 80015d8:	64da      	str	r2, [r3, #76]	; 0x4c

  pid_init(&pid_height, 150.0f, 50.0f, 0.005f, 10, 1);
 80015da:	2201      	movs	r2, #1
 80015dc:	210a      	movs	r1, #10
 80015de:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 800168c <main+0x168>
 80015e2:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001690 <main+0x16c>
 80015e6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001694 <main+0x170>
 80015ea:	482f      	ldr	r0, [pc, #188]	; (80016a8 <main+0x184>)
 80015ec:	f000 f8cf 	bl	800178e <pid_init>
  pid_height.p_max = pid_scale(&pid_height, 4095);
 80015f0:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800169c <main+0x178>
 80015f4:	482c      	ldr	r0, [pc, #176]	; (80016a8 <main+0x184>)
 80015f6:	f000 f955 	bl	80018a4 <pid_scale>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <main+0x184>)
 80015fe:	619a      	str	r2, [r3, #24]
  pid_height.p_min = pid_scale(&pid_height, -4095);
 8001600:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80016a0 <main+0x17c>
 8001604:	4828      	ldr	r0, [pc, #160]	; (80016a8 <main+0x184>)
 8001606:	f000 f94d 	bl	80018a4 <pid_scale>
 800160a:	4602      	mov	r2, r0
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <main+0x184>)
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
  pid_height.i_max = pid_scale(&pid_height, 4095);
 8001610:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800169c <main+0x178>
 8001614:	4824      	ldr	r0, [pc, #144]	; (80016a8 <main+0x184>)
 8001616:	f000 f945 	bl	80018a4 <pid_scale>
 800161a:	4602      	mov	r2, r0
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <main+0x184>)
 800161e:	61da      	str	r2, [r3, #28]
  pid_height.i_min = pid_scale(&pid_height, -4095);
 8001620:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80016a0 <main+0x17c>
 8001624:	4820      	ldr	r0, [pc, #128]	; (80016a8 <main+0x184>)
 8001626:	f000 f93d 	bl	80018a4 <pid_scale>
 800162a:	4602      	mov	r2, r0
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <main+0x184>)
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
  pid_height.d_max = pid_scale(&pid_height, 4095);
 8001630:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800169c <main+0x178>
 8001634:	481c      	ldr	r0, [pc, #112]	; (80016a8 <main+0x184>)
 8001636:	f000 f935 	bl	80018a4 <pid_scale>
 800163a:	4602      	mov	r2, r0
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <main+0x184>)
 800163e:	621a      	str	r2, [r3, #32]
  pid_height.d_min = pid_scale(&pid_height, -4095);
 8001640:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80016a0 <main+0x17c>
 8001644:	4818      	ldr	r0, [pc, #96]	; (80016a8 <main+0x184>)
 8001646:	f000 f92d 	bl	80018a4 <pid_scale>
 800164a:	4602      	mov	r2, r0
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <main+0x184>)
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_height.total_max = pid_scale(&pid_height, 4095);
 8001650:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800169c <main+0x178>
 8001654:	4814      	ldr	r0, [pc, #80]	; (80016a8 <main+0x184>)
 8001656:	f000 f925 	bl	80018a4 <pid_scale>
 800165a:	4602      	mov	r2, r0
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <main+0x184>)
 800165e:	649a      	str	r2, [r3, #72]	; 0x48
  pid_height.total_min = pid_scale(&pid_height, 0);
 8001660:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80016a4 <main+0x180>
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <main+0x184>)
 8001666:	f000 f91d 	bl	80018a4 <pid_scale>
 800166a:	4602      	mov	r2, r0
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <main+0x184>)
 800166e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(ReceivedDataFlag == 1){
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <main+0x188>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d104      	bne.n	8001682 <main+0x15e>
	  	ReceivedDataFlag = 0;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <main+0x188>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
	  	//parse();
	  	parse_loc();
 800167e:	f7ff fef3 	bl	8001468 <parse_loc>
	  }
	  HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	; 0x64
 8001684:	f000 fcea 	bl	800205c <HAL_Delay>
	  if(ReceivedDataFlag == 1){
 8001688:	e7f2      	b.n	8001670 <main+0x14c>
 800168a:	bf00      	nop
 800168c:	3ba3d70a 	.word	0x3ba3d70a
 8001690:	42480000 	.word	0x42480000
 8001694:	43160000 	.word	0x43160000
 8001698:	20000384 	.word	0x20000384
 800169c:	457ff000 	.word	0x457ff000
 80016a0:	c57ff000 	.word	0xc57ff000
 80016a4:	00000000 	.word	0x00000000
 80016a8:	200004ac 	.word	0x200004ac
 80016ac:	20000370 	.word	0x20000370

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	; 0x50
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	2230      	movs	r2, #48	; 0x30
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f007 f81c 	bl	80086fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <SystemClock_Config+0xc8>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a26      	ldr	r2, [pc, #152]	; (8001778 <SystemClock_Config+0xc8>)
 80016de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <SystemClock_Config+0xc8>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <SystemClock_Config+0xcc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a20      	ldr	r2, [pc, #128]	; (800177c <SystemClock_Config+0xcc>)
 80016fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <SystemClock_Config+0xcc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170c:	2301      	movs	r3, #1
 800170e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001716:	2302      	movs	r3, #2
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001720:	2319      	movs	r3, #25
 8001722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001724:	23c0      	movs	r3, #192	; 0xc0
 8001726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001728:	2302      	movs	r3, #2
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800172c:	2304      	movs	r3, #4
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4618      	mov	r0, r3
 8001736:	f002 f8e3 	bl	8003900 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001740:	f000 f81e 	bl	8001780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	230f      	movs	r3, #15
 8001746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001748:	2302      	movs	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2103      	movs	r1, #3
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fb3d 	bl	8003de0 <HAL_RCC_ClockConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800176c:	f000 f808 	bl	8001780 <Error_Handler>
  }
}
 8001770:	bf00      	nop
 8001772:	3750      	adds	r7, #80	; 0x50
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <pid_init>:
 *
 * Created on: 09.03.2018
 * Author: Wojciech Domski
 */
#include "pid.h"
void pid_init(cpid_t *pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 800178e:	b480      	push	{r7}
 8001790:	b089      	sub	sp, #36	; 0x24
 8001792:	af00      	add	r7, sp, #0
 8001794:	6178      	str	r0, [r7, #20]
 8001796:	ed87 0a04 	vstr	s0, [r7, #16]
 800179a:	edc7 0a03 	vstr	s1, [r7, #12]
 800179e:	ed87 1a02 	vstr	s2, [r7, #8]
 80017a2:	460b      	mov	r3, r1
 80017a4:	603a      	str	r2, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
	uint32_t k;
	pid->power = 1;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2201      	movs	r2, #1
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e007      	b.n	80017c4 <pid_init+0x36>
		pid->power = pid->power * 2;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b8:	005a      	lsls	r2, r3, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3301      	adds	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d3f3      	bcc.n	80017b4 <pid_init+0x26>
	}
	pid->f = f;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	79fa      	ldrb	r2, [r7, #7]
 80017d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pid->p = (int32_t) (p * pid->power);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ec:	ee17 2a90 	vmov	r2, s15
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	601a      	str	r2, [r3, #0]
	pid->i = (int32_t) (i * pid->power);
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001800:	edd7 7a03 	vldr	s15, [r7, #12]
 8001804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800180c:	ee17 2a90 	vmov	r2, s15
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	605a      	str	r2, [r3, #4]
	pid->d = (int32_t) (d * pid->power);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001820:	edd7 7a02 	vldr	s15, [r7, #8]
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182c:	ee17 2a90 	vmov	r2, s15
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	609a      	str	r2, [r3, #8]
	pid->p_val = 0;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
	pid->i_val = 0;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
	pid->d_val = 0;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
	pid->p_max = INT32_MAX;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800184c:	619a      	str	r2, [r3, #24]
	pid->p_min = INT32_MIN;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
	pid->i_max = INT32_MAX;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800185c:	61da      	str	r2, [r3, #28]
	pid->i_min = INT32_MIN;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
	pid->d_max = INT32_MAX;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800186c:	621a      	str	r2, [r3, #32]
	pid->d_min = INT32_MIN;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_last = 0;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2200      	movs	r2, #0
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
	pid->sum = 0;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2200      	movs	r2, #0
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
	pid->total_max = INT32_MAX;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001888:	649a      	str	r2, [r3, #72]	; 0x48
	pid->total_min = INT32_MIN;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001890:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->dt_ms = dt_ms;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001898:	bf00      	nop
 800189a:	3724      	adds	r7, #36	; 0x24
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <pid_scale>:
		total = pid->total_min;
	pid->control = total >> pid->f;
	pid->e_last = e;
	return pid->control;
}
int32_t pid_scale(cpid_t *pid, float v) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	ed87 0a00 	vstr	s0, [r7]
	return v * pid->power;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018bc:	edd7 7a00 	vldr	s15, [r7]
 80018c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c8:	ee17 3a90 	vmov	r3, s15
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <HAL_MspInit+0x4c>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_MspInit+0x4c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_MspInit+0x4c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_MspInit+0x4c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <MemManage_Handler+0x4>

08001942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <UsageFault_Handler+0x4>

0800194e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 fb4e 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <OTG_FS_IRQHandler+0x10>)
 800198a:	f000 ff86 	bl	800289a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000b64 	.word	0x20000b64

08001998 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00a      	b.n	80019c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019aa:	f3af 8000 	nop.w
 80019ae:	4601      	mov	r1, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf0      	blt.n	80019aa <_read+0x12>
	}

return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
	return -1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019fa:	605a      	str	r2, [r3, #4]
	return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_isatty>:

int _isatty(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	return 1;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x50>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x16>
		heap_end = &end;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <_sbrk+0x50>)
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <_sbrk+0x54>)
 8001a50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <_sbrk+0x50>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <_sbrk+0x50>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	466a      	mov	r2, sp
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d907      	bls.n	8001a76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a66:	f006 fe0f 	bl	8008688 <__errno>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	e006      	b.n	8001a84 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <_sbrk+0x50>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <_sbrk+0x50>)
 8001a80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000374 	.word	0x20000374
 8001a90:	20000f70 	.word	0x20000f70

08001a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <SystemInit+0x28>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <SystemInit+0x28>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SystemInit+0x28>)
 8001aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aae:	609a      	str	r2, [r3, #8]
#endif
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b096      	sub	sp, #88	; 0x58
 8001ac4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	615a      	str	r2, [r3, #20]
 8001af0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2220      	movs	r2, #32
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f006 fdff 	bl	80086fc <memset>

  htim1.Instance = TIM1;
 8001afe:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b00:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <MX_TIM1_Init+0x168>)
 8001b02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96;
 8001b04:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b06:	2260      	movs	r2, #96	; 0x60
 8001b08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001b10:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b2a:	483e      	ldr	r0, [pc, #248]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b2c:	f002 fafc 	bl	8004128 <HAL_TIM_Base_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b36:	f7ff fe23 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b44:	4619      	mov	r1, r3
 8001b46:	4837      	ldr	r0, [pc, #220]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b48:	f002 fd3c 	bl	80045c4 <HAL_TIM_ConfigClockSource>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b52:	f7ff fe15 	bl	8001780 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b56:	4833      	ldr	r0, [pc, #204]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b58:	f002 fb46 	bl	80041e8 <HAL_TIM_PWM_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b62:	f7ff fe0d 	bl	8001780 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001b66:	482f      	ldr	r0, [pc, #188]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b68:	f002 fb09 	bl	800417e <HAL_TIM_OC_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001b72:	f7ff fe05 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b82:	4619      	mov	r1, r3
 8001b84:	4827      	ldr	r0, [pc, #156]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001b86:	f003 f87b 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001b90:	f7ff fdf6 	bl	8001780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b94:	2360      	movs	r3, #96	; 0x60
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481a      	ldr	r0, [pc, #104]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001bba:	f002 fc3d 	bl	8004438 <HAL_TIM_PWM_ConfigChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001bc4:	f7ff fddc 	bl	8001780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4813      	ldr	r0, [pc, #76]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001bd6:	f002 fbcf 	bl	8004378 <HAL_TIM_OC_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001be0:	f7ff fdce 	bl	8001780 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001c08:	f003 f8a8 	bl	8004d5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8001c12:	f7ff fdb5 	bl	8001780 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001c16:	4803      	ldr	r0, [pc, #12]	; (8001c24 <MX_TIM1_Init+0x164>)
 8001c18:	f000 f94a 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 8001c1c:	bf00      	nop
 8001c1e:	3758      	adds	r7, #88	; 0x58
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000548 	.word	0x20000548
 8001c28:	40010000 	.word	0x40010000

08001c2c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	2224      	movs	r2, #36	; 0x24
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f006 fd5e 	bl	80086fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <MX_TIM2_Init+0xa0>)
 8001c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <MX_TIM2_Init+0xa0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <MX_TIM2_Init+0xa0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <MX_TIM2_Init+0xa0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <MX_TIM2_Init+0xa0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <MX_TIM2_Init+0xa0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c76:	2301      	movs	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c86:	2301      	movs	r3, #1
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	4619      	mov	r1, r3
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <MX_TIM2_Init+0xa0>)
 8001c9a:	f002 fada 	bl	8004252 <HAL_TIM_Encoder_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001ca4:	f7ff fd6c 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	; (8001ccc <MX_TIM2_Init+0xa0>)
 8001cb6:	f002 ffe3 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001cc0:	f7ff fd5e 	bl	8001780 <Error_Handler>
  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3730      	adds	r7, #48	; 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000588 	.word	0x20000588

08001cd0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2224      	movs	r2, #36	; 0x24
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f006 fd0c 	bl	80086fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001cee:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <MX_TIM3_Init+0xa4>)
 8001cf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d10:	2301      	movs	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d3c:	f002 fa89 	bl	8004252 <HAL_TIM_Encoder_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001d46:	f7ff fd1b 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	4806      	ldr	r0, [pc, #24]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d58:	f002 ff92 	bl	8004c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001d62:	f7ff fd0d 	bl	8001780 <Error_Handler>
  }

}
 8001d66:	bf00      	nop
 8001d68:	3730      	adds	r7, #48	; 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000508 	.word	0x20000508
 8001d74:	40000400 	.word	0x40000400

08001d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <HAL_TIM_Base_MspInit+0x3c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10d      	bne.n	8001da6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_TIM_Base_MspInit+0x40>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_TIM_Base_MspInit+0x40>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_TIM_Base_MspInit+0x40>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d12c      	bne.n	8001e38 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a28      	ldr	r2, [pc, #160]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e16:	2303      	movs	r3, #3
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e26:	2301      	movs	r3, #1
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4619      	mov	r1, r3
 8001e30:	481d      	ldr	r0, [pc, #116]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e32:	f000 fa47 	bl	80022c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e36:	e030      	b.n	8001e9a <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d12b      	bne.n	8001e9a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e7a:	23c0      	movs	r3, #192	; 0xc0
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e96:	f000 fa15 	bl	80022c4 <HAL_GPIO_Init>
}
 8001e9a:	bf00      	nop
 8001e9c:	3730      	adds	r7, #48	; 0x30
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40000400 	.word	0x40000400

08001eb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <HAL_TIM_MspPostInit+0x68>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d11e      	bne.n	8001f10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_TIM_MspPostInit+0x6c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <HAL_TIM_MspPostInit+0x6c>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_TIM_MspPostInit+0x6c>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <HAL_TIM_MspPostInit+0x70>)
 8001f0c:	f000 f9da 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000

08001f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f2a:	e003      	b.n	8001f34 <LoopCopyDataInit>

08001f2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f32:	3104      	adds	r1, #4

08001f34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f34:	480b      	ldr	r0, [pc, #44]	; (8001f64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f3c:	d3f6      	bcc.n	8001f2c <CopyDataInit>
  ldr  r2, =_sbss
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f40:	e002      	b.n	8001f48 <LoopFillZerobss>

08001f42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f44:	f842 3b04 	str.w	r3, [r2], #4

08001f48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f4c:	d3f9      	bcc.n	8001f42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f4e:	f7ff fda1 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f52:	f006 fb9f 	bl	8008694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f56:	f7ff fae5 	bl	8001524 <main>
  bx  lr    
 8001f5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f60:	08010628 	.word	0x08010628
  ldr  r0, =_sdata
 8001f64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f68:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 8001f6c:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 8001f70:	20000f70 	.word	0x20000f70

08001f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC_IRQHandler>
	...

08001f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <HAL_Init+0x40>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_Init+0x40>)
 8001f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_Init+0x40>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 f94d 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f808 	bl	8001fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fac:	f7ff fc94 	bl	80018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_InitTick+0x54>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x58>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f965 	bl	80022aa <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f000 f92d 	bl	8002256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <HAL_InitTick+0x5c>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000000 	.word	0x20000000
 8002014:	20000008 	.word	0x20000008
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008
 8002040:	200005c8 	.word	0x200005c8

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	200005c8 	.word	0x200005c8

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff ffee 	bl	8002044 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_Delay+0x40>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffde 	bl	8002044 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000008 	.word	0x20000008

080020a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <__NVIC_EnableIRQ+0x38>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000e100 	.word	0xe000e100

08002140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0a      	blt.n	800216a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	490c      	ldr	r1, [pc, #48]	; (800218c <__NVIC_SetPriority+0x4c>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	440b      	add	r3, r1
 8002164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002168:	e00a      	b.n	8002180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4908      	ldr	r1, [pc, #32]	; (8002190 <__NVIC_SetPriority+0x50>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	3b04      	subs	r3, #4
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	440b      	add	r3, r1
 800217e:	761a      	strb	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1c3 0307 	rsb	r3, r3, #7
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	bf28      	it	cs
 80021b2:	2304      	movcs	r3, #4
 80021b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d902      	bls.n	80021c4 <NVIC_EncodePriority+0x30>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b03      	subs	r3, #3
 80021c2:	e000      	b.n	80021c6 <NVIC_EncodePriority+0x32>
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	401a      	ands	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	4313      	orrs	r3, r2
         );
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800220c:	d301      	bcc.n	8002212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <SysTick_Config+0x40>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221a:	210f      	movs	r1, #15
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f7ff ff8e 	bl	8002140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <SysTick_Config+0x40>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <SysTick_Config+0x40>)
 800222c:	2207      	movs	r2, #7
 800222e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	e000e010 	.word	0xe000e010

08002240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff29 	bl	80020a0 <__NVIC_SetPriorityGrouping>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002268:	f7ff ff3e 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 800226c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f7ff ff8e 	bl	8002194 <NVIC_EncodePriority>
 8002278:	4602      	mov	r2, r0
 800227a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff5d 	bl	8002140 <__NVIC_SetPriority>
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff31 	bl	8002104 <__NVIC_EnableIRQ>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffa2 	bl	80021fc <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e159      	b.n	8002594 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	f040 8148 	bne.w	800258e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d00b      	beq.n	800231e <HAL_GPIO_Init+0x5a>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002312:	2b11      	cmp	r3, #17
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b12      	cmp	r3, #18
 800231c:	d130      	bne.n	8002380 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 0201 	and.w	r2, r3, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0xfc>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b12      	cmp	r3, #18
 80023be:	d123      	bne.n	8002408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	08da      	lsrs	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3208      	adds	r2, #8
 8002402:	69b9      	ldr	r1, [r7, #24]
 8002404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0203 	and.w	r2, r3, #3
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a2 	beq.w	800258e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <HAL_GPIO_Init+0x2e4>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a55      	ldr	r2, [pc, #340]	; (80025a8 <HAL_GPIO_Init+0x2e4>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_GPIO_Init+0x2e4>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002466:	4a51      	ldr	r2, [pc, #324]	; (80025ac <HAL_GPIO_Init+0x2e8>)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	089b      	lsrs	r3, r3, #2
 800246c:	3302      	adds	r3, #2
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	220f      	movs	r2, #15
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a48      	ldr	r2, [pc, #288]	; (80025b0 <HAL_GPIO_Init+0x2ec>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0x202>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <HAL_GPIO_Init+0x2f0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x1fe>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a46      	ldr	r2, [pc, #280]	; (80025b8 <HAL_GPIO_Init+0x2f4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x1fa>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a45      	ldr	r2, [pc, #276]	; (80025bc <HAL_GPIO_Init+0x2f8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x1f6>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a44      	ldr	r2, [pc, #272]	; (80025c0 <HAL_GPIO_Init+0x2fc>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x1f2>
 80024b2:	2304      	movs	r3, #4
 80024b4:	e008      	b.n	80024c8 <HAL_GPIO_Init+0x204>
 80024b6:	2307      	movs	r3, #7
 80024b8:	e006      	b.n	80024c8 <HAL_GPIO_Init+0x204>
 80024ba:	2303      	movs	r3, #3
 80024bc:	e004      	b.n	80024c8 <HAL_GPIO_Init+0x204>
 80024be:	2302      	movs	r3, #2
 80024c0:	e002      	b.n	80024c8 <HAL_GPIO_Init+0x204>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_GPIO_Init+0x204>
 80024c6:	2300      	movs	r3, #0
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	f002 0203 	and.w	r2, r2, #3
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	4093      	lsls	r3, r2
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d8:	4934      	ldr	r1, [pc, #208]	; (80025ac <HAL_GPIO_Init+0x2e8>)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	3302      	adds	r3, #2
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <HAL_GPIO_Init+0x300>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250a:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <HAL_GPIO_Init+0x300>)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002510:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_GPIO_Init+0x300>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002534:	4a23      	ldr	r2, [pc, #140]	; (80025c4 <HAL_GPIO_Init+0x300>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_GPIO_Init+0x300>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255e:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <HAL_GPIO_Init+0x300>)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_GPIO_Init+0x300>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002588:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <HAL_GPIO_Init+0x300>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3301      	adds	r3, #1
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b0f      	cmp	r3, #15
 8002598:	f67f aea2 	bls.w	80022e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800259c:	bf00      	nop
 800259e:	3724      	adds	r7, #36	; 0x24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40013800 	.word	0x40013800
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020c00 	.word	0x40020c00
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fc:	b08f      	sub	sp, #60	; 0x3c
 80025fe:	af0a      	add	r7, sp, #40	; 0x28
 8002600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e10f      	b.n	800282c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f005 fd3c 	bl	80080a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2203      	movs	r2, #3
 8002630:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f002 fced 	bl	800502a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	687e      	ldr	r6, [r7, #4]
 8002658:	466d      	mov	r5, sp
 800265a:	f106 0410 	add.w	r4, r6, #16
 800265e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002666:	e894 0003 	ldmia.w	r4, {r0, r1}
 800266a:	e885 0003 	stmia.w	r5, {r0, r1}
 800266e:	1d33      	adds	r3, r6, #4
 8002670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002672:	6838      	ldr	r0, [r7, #0]
 8002674:	f002 fbc4 	bl	8004e00 <USB_CoreInit>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0d0      	b.n	800282c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f002 fcdb 	bl	800504c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	e04a      	b.n	8002732 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	333d      	adds	r3, #61	; 0x3d
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	333c      	adds	r3, #60	; 0x3c
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	b298      	uxth	r0, r3
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3342      	adds	r3, #66	; 0x42
 80026d8:	4602      	mov	r2, r0
 80026da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	333f      	adds	r3, #63	; 0x3f
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	3344      	adds	r3, #68	; 0x44
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3348      	adds	r3, #72	; 0x48
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	3350      	adds	r3, #80	; 0x50
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	3301      	adds	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	d3af      	bcc.n	800269c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e044      	b.n	80027cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	3301      	adds	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d3b5      	bcc.n	8002742 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	687e      	ldr	r6, [r7, #4]
 80027de:	466d      	mov	r5, sp
 80027e0:	f106 0410 	add.w	r4, r6, #16
 80027e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80027f4:	1d33      	adds	r3, r6, #4
 80027f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f8:	6838      	ldr	r0, [r7, #0]
 80027fa:	f002 fc51 	bl	80050a0 <USB_DevInit>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e00d      	b.n	800282c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fc99 	bl	800615c <USB_DevDisconnect>

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002834 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_PCD_Start+0x1c>
 800284c:	2302      	movs	r3, #2
 800284e:	e020      	b.n	8002892 <HAL_PCD_Start+0x5e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	2b01      	cmp	r3, #1
 800285e:	d109      	bne.n	8002874 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002864:	2b01      	cmp	r3, #1
 8002866:	d005      	beq.n	8002874 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f002 fbc5 	bl	8005008 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f003 fc49 	bl	800611a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800289a:	b590      	push	{r4, r7, lr}
 800289c:	b08d      	sub	sp, #52	; 0x34
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fd07 	bl	80062c4 <USB_GetMode>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f040 839d 	bne.w	8002ff8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f003 fc6b 	bl	800619e <USB_ReadInterrupts>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8393 	beq.w	8002ff6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 fc62 	bl	800619e <USB_ReadInterrupts>
 80028da:	4603      	mov	r3, r0
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d107      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f002 0202 	and.w	r2, r2, #2
 80028f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 fc50 	bl	800619e <USB_ReadInterrupts>
 80028fe:	4603      	mov	r3, r0
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b10      	cmp	r3, #16
 8002906:	d161      	bne.n	80029cc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0210 	bic.w	r2, r2, #16
 8002916:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	3304      	adds	r3, #4
 8002936:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	0c5b      	lsrs	r3, r3, #17
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	2b02      	cmp	r3, #2
 8002942:	d124      	bne.n	800298e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d035      	beq.n	80029bc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800295a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800295e:	b29b      	uxth	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	6a38      	ldr	r0, [r7, #32]
 8002964:	f003 fab6 	bl	8005ed4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002974:	441a      	add	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002986:	441a      	add	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	619a      	str	r2, [r3, #24]
 800298c:	e016      	b.n	80029bc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	0c5b      	lsrs	r3, r3, #17
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	2b06      	cmp	r3, #6
 8002998:	d110      	bne.n	80029bc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029a0:	2208      	movs	r2, #8
 80029a2:	4619      	mov	r1, r3
 80029a4:	6a38      	ldr	r0, [r7, #32]
 80029a6:	f003 fa95 	bl	8005ed4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b6:	441a      	add	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0210 	orr.w	r2, r2, #16
 80029ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 fbe4 	bl	800619e <USB_ReadInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029e0:	d16e      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 fbea 	bl	80061c4 <USB_ReadDevAllOutEpInterrupt>
 80029f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029f2:	e062      	b.n	8002aba <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d057      	beq.n	8002aae <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 fc0f 	bl	800622c <USB_ReadDevOutEPInterrupt>
 8002a0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00c      	beq.n	8002a34 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a26:	461a      	mov	r2, r3
 8002a28:	2301      	movs	r3, #1
 8002a2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fdb0 	bl	8003594 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00c      	beq.n	8002a58 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 feaa 	bl	80037ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2310      	movs	r3, #16
 8002a72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d008      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d199      	bne.n	80029f4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fb6a 	bl	800619e <USB_ReadInterrupts>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ad4:	f040 80c0 	bne.w	8002c58 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 fb8b 	bl	80061f8 <USB_ReadDevAllInEpInterrupt>
 8002ae2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ae8:	e0b2      	b.n	8002c50 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a7 	beq.w	8002c44 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 fbb1 	bl	8006268 <USB_ReadDevInEPInterrupt>
 8002b06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d057      	beq.n	8002bc2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	2201      	movs	r2, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69f9      	ldr	r1, [r7, #28]
 8002b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b32:	4013      	ands	r3, r2
 8002b34:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b42:	461a      	mov	r2, r3
 8002b44:	2301      	movs	r3, #1
 8002b46:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d132      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3348      	adds	r3, #72	; 0x48
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4403      	add	r3, r0
 8002b70:	3344      	adds	r3, #68	; 0x44
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4419      	add	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4403      	add	r3, r0
 8002b84:	3348      	adds	r3, #72	; 0x48
 8002b86:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d113      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x31c>
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3350      	adds	r3, #80	; 0x50
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d108      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	f003 fbb9 	bl	8006328 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f005 faf2 	bl	80081a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2308      	movs	r3, #8
 8002bdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c10:	461a      	mov	r2, r3
 8002c12:	2340      	movs	r3, #64	; 0x40
 8002c14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2302      	movs	r3, #2
 8002c30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fc1b 	bl	800347a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	3301      	adds	r3, #1
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	085b      	lsrs	r3, r3, #1
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f47f af49 	bne.w	8002aea <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 fa9e 	bl	800619e <USB_ReadInterrupts>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c6c:	d122      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d108      	bne.n	8002c9e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c94:	2100      	movs	r1, #0
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fe26 	bl	80038e8 <HAL_PCDEx_LPM_Callback>
 8002c9c:	e002      	b.n	8002ca4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f005 faee 	bl	8008280 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fa70 	bl	800619e <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc8:	d112      	bne.n	8002cf0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f005 faaa 	bl	8008234 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002cee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 fa52 	bl	800619e <USB_ReadInterrupts>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d04:	f040 80c7 	bne.w	8002e96 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2110      	movs	r1, #16
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 fb20 	bl	8005368 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2c:	e056      	b.n	8002ddc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d52:	0151      	lsls	r1, r2, #5
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	440a      	add	r2, r1
 8002d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d60:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d72:	0151      	lsls	r1, r2, #5
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	440a      	add	r2, r1
 8002d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da6:	0151      	lsls	r1, r2, #5
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	440a      	add	r2, r1
 8002dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002db0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002db4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc6:	0151      	lsls	r1, r2, #5
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	440a      	add	r2, r1
 8002dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002dd4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	3301      	adds	r3, #1
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d3a3      	bcc.n	8002d2e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002df4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002df8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e12:	f043 030b 	orr.w	r3, r3, #11
 8002e16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e28:	f043 030b 	orr.w	r3, r3, #11
 8002e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2e:	e015      	b.n	8002e5c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e42:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e56:	f043 030b 	orr.w	r3, r3, #11
 8002e5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e80:	461a      	mov	r2, r3
 8002e82:	f003 fa51 	bl	8006328 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 f97f 	bl	800619e <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eaa:	d124      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fa15 	bl	80062e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f002 fab5 	bl	800542a <USB_GetDevSpeed>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681c      	ldr	r4, [r3, #0]
 8002ecc:	f001 f920 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4620      	mov	r0, r4
 8002edc:	f001 fff2 	bl	8004ec4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f005 f988 	bl	80081f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 f94f 	bl	800619e <USB_ReadInterrupts>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d10a      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f005 f965 	bl	80081da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f002 0208 	and.w	r2, r2, #8
 8002f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 f93a 	bl	800619e <USB_ReadInterrupts>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f34:	d10f      	bne.n	8002f56 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f005 f9bd 	bl	80082c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 f91f 	bl	800619e <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f6a:	d10f      	bne.n	8002f8c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f005 f990 	bl	800829c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 f904 	bl	800619e <USB_ReadInterrupts>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f005 f99e 	bl	80082e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 f8ee 	bl	800619e <USB_ReadInterrupts>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d115      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f005 f98e 	bl	8008300 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	e000      	b.n	8002ff8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002ff6:	bf00      	nop
    }
  }
}
 8002ff8:	3734      	adds	r7, #52	; 0x34
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd90      	pop	{r4, r7, pc}

08002ffe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_PCD_SetAddress+0x1a>
 8003014:	2302      	movs	r3, #2
 8003016:	e013      	b.n	8003040 <HAL_PCD_SetAddress+0x42>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f003 f84c 	bl	80060ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4603      	mov	r3, r0
 8003058:	70fb      	strb	r3, [r7, #3]
 800305a:	460b      	mov	r3, r1
 800305c:	803b      	strh	r3, [r7, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306a:	2b00      	cmp	r3, #0
 800306c:	da0f      	bge.n	800308e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	3338      	adds	r3, #56	; 0x38
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	705a      	strb	r2, [r3, #1]
 800308c:	e00f      	b.n	80030ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 020f 	and.w	r2, r3, #15
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	3304      	adds	r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030ba:	883a      	ldrh	r2, [r7, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	78ba      	ldrb	r2, [r7, #2]
 80030c4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d004      	beq.n	80030d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030d8:	78bb      	ldrb	r3, [r7, #2]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d102      	bne.n	80030e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_PCD_EP_Open+0xaa>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e00e      	b.n	8003110 <HAL_PCD_EP_Open+0xc8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68f9      	ldr	r1, [r7, #12]
 8003100:	4618      	mov	r0, r3
 8003102:	f002 f9b7 	bl	8005474 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800310e:	7afb      	ldrb	r3, [r7, #11]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003128:	2b00      	cmp	r3, #0
 800312a:	da0f      	bge.n	800314c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	f003 020f 	and.w	r2, r3, #15
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	3338      	adds	r3, #56	; 0x38
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	3304      	adds	r3, #4
 8003142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	705a      	strb	r2, [r3, #1]
 800314a:	e00f      	b.n	800316c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	f003 020f 	and.w	r2, r3, #15
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_PCD_EP_Close+0x6e>
 8003182:	2302      	movs	r3, #2
 8003184:	e00e      	b.n	80031a4 <HAL_PCD_EP_Close+0x8c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	4618      	mov	r0, r3
 8003196:	f002 f9f5 	bl	8005584 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	460b      	mov	r3, r1
 80031ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031bc:	7afb      	ldrb	r3, [r7, #11]
 80031be:	f003 020f 	and.w	r2, r3, #15
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	3304      	adds	r3, #4
 80031d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2200      	movs	r2, #0
 80031ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d102      	bne.n	8003208 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003208:	7afb      	ldrb	r3, [r7, #11]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	6979      	ldr	r1, [r7, #20]
 8003220:	f002 fcd0 	bl	8005bc4 <USB_EP0StartXfer>
 8003224:	e008      	b.n	8003238 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	f002 fa82 	bl	800573c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 020f 	and.w	r2, r3, #15
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003264:	681b      	ldr	r3, [r3, #0]
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	460b      	mov	r3, r1
 8003280:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003282:	7afb      	ldrb	r3, [r7, #11]
 8003284:	f003 020f 	and.w	r2, r3, #15
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	3338      	adds	r3, #56	; 0x38
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	3304      	adds	r3, #4
 8003298:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2200      	movs	r2, #0
 80032aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2201      	movs	r2, #1
 80032b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b2:	7afb      	ldrb	r3, [r7, #11]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032cc:	7afb      	ldrb	r3, [r7, #11]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	6979      	ldr	r1, [r7, #20]
 80032e4:	f002 fc6e 	bl	8005bc4 <USB_EP0StartXfer>
 80032e8:	e008      	b.n	80032fc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	6979      	ldr	r1, [r7, #20]
 80032f8:	f002 fa20 	bl	800573c <USB_EPStartXfer>
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	460b      	mov	r3, r1
 8003310:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	d901      	bls.n	8003324 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e050      	b.n	80033c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003328:	2b00      	cmp	r3, #0
 800332a:	da0f      	bge.n	800334c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	f003 020f 	and.w	r2, r3, #15
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	3338      	adds	r3, #56	; 0x38
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	3304      	adds	r3, #4
 8003342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	705a      	strb	r2, [r3, #1]
 800334a:	e00d      	b.n	8003368 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	4613      	mov	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	3304      	adds	r3, #4
 8003360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_PCD_EP_SetStall+0x82>
 8003384:	2302      	movs	r3, #2
 8003386:	e01e      	b.n	80033c6 <HAL_PCD_EP_SetStall+0xc0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68f9      	ldr	r1, [r7, #12]
 8003396:	4618      	mov	r0, r3
 8003398:	f002 fdc5 	bl	8005f26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	b2d9      	uxtb	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033b6:	461a      	mov	r2, r3
 80033b8:	f002 ffb6 	bl	8006328 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d901      	bls.n	80033ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e042      	b.n	8003472 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da0f      	bge.n	8003414 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 020f 	and.w	r2, r3, #15
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	3338      	adds	r3, #56	; 0x38
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	705a      	strb	r2, [r3, #1]
 8003412:	e00f      	b.n	8003434 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	f003 020f 	and.w	r2, r3, #15
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	3304      	adds	r3, #4
 800342c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_PCD_EP_ClrStall+0x86>
 8003450:	2302      	movs	r3, #2
 8003452:	e00e      	b.n	8003472 <HAL_PCD_EP_ClrStall+0xa4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68f9      	ldr	r1, [r7, #12]
 8003462:	4618      	mov	r0, r3
 8003464:	f002 fdcd 	bl	8006002 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b08a      	sub	sp, #40	; 0x28
 800347e:	af02      	add	r7, sp, #8
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	3338      	adds	r3, #56	; 0x38
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	3304      	adds	r3, #4
 80034a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d901      	bls.n	80034b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e06c      	b.n	800358c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d902      	bls.n	80034ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3303      	adds	r3, #3
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034d6:	e02b      	b.n	8003530 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d902      	bls.n	80034f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3303      	adds	r3, #3
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68d9      	ldr	r1, [r3, #12]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800350c:	b2db      	uxtb	r3, r3
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	4603      	mov	r3, r0
 8003512:	6978      	ldr	r0, [r7, #20]
 8003514:	f002 fca9 	bl	8005e6a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	441a      	add	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	441a      	add	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	b29b      	uxth	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	429a      	cmp	r2, r3
 8003544:	d809      	bhi.n	800355a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800354e:	429a      	cmp	r2, r3
 8003550:	d203      	bcs.n	800355a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1be      	bne.n	80034d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	429a      	cmp	r2, r3
 8003564:	d811      	bhi.n	800358a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	2201      	movs	r2, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	43db      	mvns	r3, r3
 8003580:	6939      	ldr	r1, [r7, #16]
 8003582:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003586:	4013      	ands	r3, r2
 8003588:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	333c      	adds	r3, #60	; 0x3c
 80035ac:	3304      	adds	r3, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	f040 80a0 	bne.w	800370c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d015      	beq.n	8003602 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a72      	ldr	r2, [pc, #456]	; (80037a4 <PCD_EP_OutXfrComplete_int+0x210>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	f240 80dd 	bls.w	800379a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80d7 	beq.w	800379a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fe:	6093      	str	r3, [r2, #8]
 8003600:	e0cb      	b.n	800379a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003618:	461a      	mov	r2, r3
 800361a:	2320      	movs	r3, #32
 800361c:	6093      	str	r3, [r2, #8]
 800361e:	e0bc      	b.n	800379a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 80b7 	bne.w	800379a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a5d      	ldr	r2, [pc, #372]	; (80037a4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d90f      	bls.n	8003654 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364a:	461a      	mov	r2, r3
 800364c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	e0a2      	b.n	800379a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003666:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	0159      	lsls	r1, r3, #5
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	440b      	add	r3, r1
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800367a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4403      	add	r3, r0
 800368a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800368e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4403      	add	r3, r0
 80036b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4419      	add	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4403      	add	r3, r0
 80036c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036cc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d114      	bne.n	80036fe <PCD_EP_OutXfrComplete_int+0x16a>
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d108      	bne.n	80036fe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036f6:	461a      	mov	r2, r3
 80036f8:	2101      	movs	r1, #1
 80036fa:	f002 fe15 	bl	8006328 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	4619      	mov	r1, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f004 fd33 	bl	8008170 <HAL_PCD_DataOutStageCallback>
 800370a:	e046      	b.n	800379a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d124      	bne.n	800375e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372a:	461a      	mov	r2, r3
 800372c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003730:	6093      	str	r3, [r2, #8]
 8003732:	e032      	b.n	800379a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	2320      	movs	r3, #32
 800374e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f004 fd0a 	bl	8008170 <HAL_PCD_DataOutStageCallback>
 800375c:	e01d      	b.n	800379a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d114      	bne.n	800378e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d108      	bne.n	800378e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003786:	461a      	mov	r2, r3
 8003788:	2100      	movs	r1, #0
 800378a:	f002 fdcd 	bl	8006328 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	4619      	mov	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f004 fceb 	bl	8008170 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	4f54300a 	.word	0x4f54300a
 80037a8:	4f54310a 	.word	0x4f54310a

080037ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	333c      	adds	r3, #60	; 0x3c
 80037c4:	3304      	adds	r3, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a15      	ldr	r2, [pc, #84]	; (8003834 <PCD_EP_OutSetupPacket_int+0x88>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d90e      	bls.n	8003800 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f8:	461a      	mov	r2, r3
 80037fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f004 fca3 	bl	800814c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <PCD_EP_OutSetupPacket_int+0x88>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d90c      	bls.n	8003828 <PCD_EP_OutSetupPacket_int+0x7c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d108      	bne.n	8003828 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003820:	461a      	mov	r2, r3
 8003822:	2101      	movs	r1, #1
 8003824:	f002 fd80 	bl	8006328 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	4f54300a 	.word	0x4f54300a

08003838 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
 8003844:	4613      	mov	r3, r2
 8003846:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003856:	883b      	ldrh	r3, [r7, #0]
 8003858:	0419      	lsls	r1, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	430a      	orrs	r2, r1
 8003862:	629a      	str	r2, [r3, #40]	; 0x28
 8003864:	e028      	b.n	80038b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4413      	add	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e00d      	b.n	8003896 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3340      	adds	r3, #64	; 0x40
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	4413      	add	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	3301      	adds	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	3b01      	subs	r3, #1
 800389c:	429a      	cmp	r2, r3
 800389e:	d3ec      	bcc.n	800387a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038a0:	883b      	ldrh	r3, [r7, #0]
 80038a2:	0418      	lsls	r0, r3, #16
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4302      	orrs	r2, r0
 80038b0:	3340      	adds	r3, #64	; 0x40
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e25b      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d075      	beq.n	8003a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391e:	4ba3      	ldr	r3, [pc, #652]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b04      	cmp	r3, #4
 8003928:	d00c      	beq.n	8003944 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4ba0      	ldr	r3, [pc, #640]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003932:	2b08      	cmp	r3, #8
 8003934:	d112      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b9d      	ldr	r3, [pc, #628]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4b99      	ldr	r3, [pc, #612]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05b      	beq.n	8003a08 <HAL_RCC_OscConfig+0x108>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d157      	bne.n	8003a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e236      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x74>
 8003966:	4b91      	ldr	r3, [pc, #580]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a90      	ldr	r2, [pc, #576]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e01d      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x98>
 800397e:	4b8b      	ldr	r3, [pc, #556]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a8a      	ldr	r2, [pc, #552]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a87      	ldr	r2, [pc, #540]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003998:	4b84      	ldr	r3, [pc, #528]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a83      	ldr	r2, [pc, #524]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a80      	ldr	r2, [pc, #512]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fe fb44 	bl	8002044 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fe fb40 	bl	8002044 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e1fb      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0xc0>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fe fb30 	bl	8002044 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe fb2c 	bl	8002044 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1e7      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	4b6c      	ldr	r3, [pc, #432]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0xe8>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d063      	beq.n	8003ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b62      	ldr	r3, [pc, #392]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d11c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	4b5c      	ldr	r3, [pc, #368]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e1bb      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4952      	ldr	r1, [pc, #328]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	e03a      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a70:	4b4f      	ldr	r3, [pc, #316]	; (8003bb0 <HAL_RCC_OscConfig+0x2b0>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fe fae5 	bl	8002044 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7e:	f7fe fae1 	bl	8002044 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e19c      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	4b46      	ldr	r3, [pc, #280]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9c:	4b43      	ldr	r3, [pc, #268]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4940      	ldr	r1, [pc, #256]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	e015      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <HAL_RCC_OscConfig+0x2b0>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fac4 	bl	8002044 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fe fac0 	bl	8002044 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e17b      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	4b36      	ldr	r3, [pc, #216]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d030      	beq.n	8003b4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af2:	4b30      	ldr	r3, [pc, #192]	; (8003bb4 <HAL_RCC_OscConfig+0x2b4>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fe faa4 	bl	8002044 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fe faa0 	bl	8002044 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e15b      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	4b26      	ldr	r3, [pc, #152]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x200>
 8003b1e:	e015      	b.n	8003b4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCC_OscConfig+0x2b4>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b26:	f7fe fa8d 	bl	8002044 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fe fa89 	bl	8002044 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e144      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80a0 	beq.w	8003c9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10f      	bne.n	8003b8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_OscConfig+0x2b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d121      	bne.n	8003bda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_RCC_OscConfig+0x2b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <HAL_RCC_OscConfig+0x2b8>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba2:	f7fe fa4f 	bl	8002044 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	e011      	b.n	8003bce <HAL_RCC_OscConfig+0x2ce>
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	42470000 	.word	0x42470000
 8003bb4:	42470e80 	.word	0x42470e80
 8003bb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbc:	f7fe fa42 	bl	8002044 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0fd      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bce:	4b81      	ldr	r3, [pc, #516]	; (8003dd4 <HAL_RCC_OscConfig+0x4d4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x2f0>
 8003be2:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a7c      	ldr	r2, [pc, #496]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	e01c      	b.n	8003c2a <HAL_RCC_OscConfig+0x32a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x312>
 8003bf8:	4b77      	ldr	r3, [pc, #476]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a76      	ldr	r2, [pc, #472]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	4b74      	ldr	r3, [pc, #464]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a73      	ldr	r2, [pc, #460]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0x32a>
 8003c12:	4b71      	ldr	r3, [pc, #452]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a70      	ldr	r2, [pc, #448]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1e:	4b6e      	ldr	r3, [pc, #440]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a6d      	ldr	r2, [pc, #436]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d015      	beq.n	8003c5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fe fa07 	bl	8002044 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fe fa03 	bl	8002044 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0bc      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	4b61      	ldr	r3, [pc, #388]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ee      	beq.n	8003c3a <HAL_RCC_OscConfig+0x33a>
 8003c5c:	e014      	b.n	8003c88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7fe f9f1 	bl	8002044 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe f9ed 	bl	8002044 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0a6      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	4b56      	ldr	r3, [pc, #344]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b52      	ldr	r3, [pc, #328]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4a51      	ldr	r2, [pc, #324]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8092 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d05c      	beq.n	8003d6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d141      	bne.n	8003d3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb8:	4b48      	ldr	r3, [pc, #288]	; (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe f9c1 	bl	8002044 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7fe f9bd 	bl	8002044 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e078      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	019b      	lsls	r3, r3, #6
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	061b      	lsls	r3, r3, #24
 8003d08:	4933      	ldr	r1, [pc, #204]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0e:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fe f996 	bl	8002044 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fe f992 	bl	8002044 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e04d      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x41c>
 8003d3a:	e045      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7fe f97f 	bl	8002044 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fe f97b 	bl	8002044 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e036      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x44a>
 8003d68:	e02e      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e029      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d11c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d115      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10d      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	42470060 	.word	0x42470060

08003de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0cc      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df4:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d90c      	bls.n	8003e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b63      	ldr	r3, [pc, #396]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0b8      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e34:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a58      	ldr	r2, [pc, #352]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a52      	ldr	r2, [pc, #328]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e58:	4b50      	ldr	r3, [pc, #320]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	494d      	ldr	r1, [pc, #308]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d044      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d119      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	4b3f      	ldr	r3, [pc, #252]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eae:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e067      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 0203 	bic.w	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4934      	ldr	r1, [pc, #208]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed0:	f7fe f8b8 	bl	8002044 <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed8:	f7fe f8b4 	bl	8002044 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e04f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 020c 	and.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d1eb      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d20c      	bcs.n	8003f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e032      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4916      	ldr	r1, [pc, #88]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	490e      	ldr	r1, [pc, #56]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f66:	f000 f821 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	5cd3      	ldrb	r3, [r2, r3]
 8003f7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f7e:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe f818 	bl	8001fbc <HAL_InitTick>

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40023c00 	.word	0x40023c00
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	0801006c 	.word	0x0801006c
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	20000004 	.word	0x20000004

08003fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc2:	4b50      	ldr	r3, [pc, #320]	; (8004104 <HAL_RCC_GetSysClockFreq+0x158>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d007      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x32>
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x38>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 808d 	bne.w	80040f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4b4b      	ldr	r3, [pc, #300]	; (8004108 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003fda:	60bb      	str	r3, [r7, #8]
       break;
 8003fdc:	e08c      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fde:	4b4b      	ldr	r3, [pc, #300]	; (800410c <HAL_RCC_GetSysClockFreq+0x160>)
 8003fe0:	60bb      	str	r3, [r7, #8]
      break;
 8003fe2:	e089      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe4:	4b47      	ldr	r3, [pc, #284]	; (8004104 <HAL_RCC_GetSysClockFreq+0x158>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fee:	4b45      	ldr	r3, [pc, #276]	; (8004104 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d023      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4b42      	ldr	r3, [pc, #264]	; (8004104 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	f04f 0400 	mov.w	r4, #0
 8004004:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	ea03 0501 	and.w	r5, r3, r1
 8004010:	ea04 0602 	and.w	r6, r4, r2
 8004014:	4a3d      	ldr	r2, [pc, #244]	; (800410c <HAL_RCC_GetSysClockFreq+0x160>)
 8004016:	fb02 f106 	mul.w	r1, r2, r6
 800401a:	2200      	movs	r2, #0
 800401c:	fb02 f205 	mul.w	r2, r2, r5
 8004020:	440a      	add	r2, r1
 8004022:	493a      	ldr	r1, [pc, #232]	; (800410c <HAL_RCC_GetSysClockFreq+0x160>)
 8004024:	fba5 0101 	umull	r0, r1, r5, r1
 8004028:	1853      	adds	r3, r2, r1
 800402a:	4619      	mov	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f04f 0400 	mov.w	r4, #0
 8004032:	461a      	mov	r2, r3
 8004034:	4623      	mov	r3, r4
 8004036:	f7fc fe2f 	bl	8000c98 <__aeabi_uldivmod>
 800403a:	4603      	mov	r3, r0
 800403c:	460c      	mov	r4, r1
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e049      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b30      	ldr	r3, [pc, #192]	; (8004104 <HAL_RCC_GetSysClockFreq+0x158>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	f04f 0400 	mov.w	r4, #0
 800404c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	ea03 0501 	and.w	r5, r3, r1
 8004058:	ea04 0602 	and.w	r6, r4, r2
 800405c:	4629      	mov	r1, r5
 800405e:	4632      	mov	r2, r6
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	f04f 0400 	mov.w	r4, #0
 8004068:	0154      	lsls	r4, r2, #5
 800406a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800406e:	014b      	lsls	r3, r1, #5
 8004070:	4619      	mov	r1, r3
 8004072:	4622      	mov	r2, r4
 8004074:	1b49      	subs	r1, r1, r5
 8004076:	eb62 0206 	sbc.w	r2, r2, r6
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	f04f 0400 	mov.w	r4, #0
 8004082:	0194      	lsls	r4, r2, #6
 8004084:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004088:	018b      	lsls	r3, r1, #6
 800408a:	1a5b      	subs	r3, r3, r1
 800408c:	eb64 0402 	sbc.w	r4, r4, r2
 8004090:	f04f 0100 	mov.w	r1, #0
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	00e2      	lsls	r2, r4, #3
 800409a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800409e:	00d9      	lsls	r1, r3, #3
 80040a0:	460b      	mov	r3, r1
 80040a2:	4614      	mov	r4, r2
 80040a4:	195b      	adds	r3, r3, r5
 80040a6:	eb44 0406 	adc.w	r4, r4, r6
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	02a2      	lsls	r2, r4, #10
 80040b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040b8:	0299      	lsls	r1, r3, #10
 80040ba:	460b      	mov	r3, r1
 80040bc:	4614      	mov	r4, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	4621      	mov	r1, r4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f04f 0400 	mov.w	r4, #0
 80040c8:	461a      	mov	r2, r3
 80040ca:	4623      	mov	r3, r4
 80040cc:	f7fc fde4 	bl	8000c98 <__aeabi_uldivmod>
 80040d0:	4603      	mov	r3, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_GetSysClockFreq+0x158>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	3301      	adds	r3, #1
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	60bb      	str	r3, [r7, #8]
      break;
 80040f0:	e002      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetSysClockFreq+0x15c>)
 80040f4:	60bb      	str	r3, [r7, #8]
      break;
 80040f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f8:	68bb      	ldr	r3, [r7, #8]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	00f42400 	.word	0x00f42400
 800410c:	017d7840 	.word	0x017d7840

08004110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCC_GetHCLKFreq+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000000 	.word	0x20000000

08004128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e01d      	b.n	8004176 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd fe12 	bl	8001d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f000 fae4 	bl	8004734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e01d      	b.n	80041cc <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d106      	bne.n	80041aa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f815 	bl	80041d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f000 fab9 	bl	8004734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e01d      	b.n	8004236 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f815 	bl	800423e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f000 fa84 	bl	8004734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e083      	b.n	800436e <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd fd9e 	bl	8001dbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004296:	f023 0307 	bic.w	r3, r3, #7
 800429a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f000 fa44 	bl	8004734 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d4:	f023 0303 	bic.w	r3, r3, #3
 80042d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	4313      	orrs	r3, r2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042f2:	f023 030c 	bic.w	r3, r3, #12
 80042f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	4313      	orrs	r3, r2
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	011a      	lsls	r2, r3, #4
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	031b      	lsls	r3, r3, #12
 8004322:	4313      	orrs	r3, r2
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004330:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004338:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	4313      	orrs	r3, r2
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_TIM_OC_ConfigChannel+0x1a>
 800438e:	2302      	movs	r3, #2
 8004390:	e04e      	b.n	8004430 <HAL_TIM_OC_ConfigChannel+0xb8>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b0c      	cmp	r3, #12
 80043a6:	d839      	bhi.n	800441c <HAL_TIM_OC_ConfigChannel+0xa4>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <HAL_TIM_OC_ConfigChannel+0x38>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043e5 	.word	0x080043e5
 80043b4:	0800441d 	.word	0x0800441d
 80043b8:	0800441d 	.word	0x0800441d
 80043bc:	0800441d 	.word	0x0800441d
 80043c0:	080043f3 	.word	0x080043f3
 80043c4:	0800441d 	.word	0x0800441d
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	0800441d 	.word	0x0800441d
 80043d0:	08004401 	.word	0x08004401
 80043d4:	0800441d 	.word	0x0800441d
 80043d8:	0800441d 	.word	0x0800441d
 80043dc:	0800441d 	.word	0x0800441d
 80043e0:	0800440f 	.word	0x0800440f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fa22 	bl	8004834 <TIM_OC1_SetConfig>
      break;
 80043f0:	e015      	b.n	800441e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fa81 	bl	8004900 <TIM_OC2_SetConfig>
      break;
 80043fe:	e00e      	b.n	800441e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fae6 	bl	80049d8 <TIM_OC3_SetConfig>
      break;
 800440c:	e007      	b.n	800441e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fb49 	bl	8004aac <TIM_OC4_SetConfig>
      break;
 800441a:	e000      	b.n	800441e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800441c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800444e:	2302      	movs	r3, #2
 8004450:	e0b4      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	f200 809f 	bhi.w	80045a8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800446a:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	080044a5 	.word	0x080044a5
 8004474:	080045a9 	.word	0x080045a9
 8004478:	080045a9 	.word	0x080045a9
 800447c:	080045a9 	.word	0x080045a9
 8004480:	080044e5 	.word	0x080044e5
 8004484:	080045a9 	.word	0x080045a9
 8004488:	080045a9 	.word	0x080045a9
 800448c:	080045a9 	.word	0x080045a9
 8004490:	08004527 	.word	0x08004527
 8004494:	080045a9 	.word	0x080045a9
 8004498:	080045a9 	.word	0x080045a9
 800449c:	080045a9 	.word	0x080045a9
 80044a0:	08004567 	.word	0x08004567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f9c2 	bl	8004834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0208 	orr.w	r2, r2, #8
 80044be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0204 	bic.w	r2, r2, #4
 80044ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6999      	ldr	r1, [r3, #24]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	619a      	str	r2, [r3, #24]
      break;
 80044e2:	e062      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fa08 	bl	8004900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6999      	ldr	r1, [r3, #24]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	021a      	lsls	r2, r3, #8
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	619a      	str	r2, [r3, #24]
      break;
 8004524:	e041      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fa53 	bl	80049d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0208 	orr.w	r2, r2, #8
 8004540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0204 	bic.w	r2, r2, #4
 8004550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69d9      	ldr	r1, [r3, #28]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	61da      	str	r2, [r3, #28]
      break;
 8004564:	e021      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fa9d 	bl	8004aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69d9      	ldr	r1, [r3, #28]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	021a      	lsls	r2, r3, #8
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	61da      	str	r2, [r3, #28]
      break;
 80045a6:	e000      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80045a8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_TIM_ConfigClockSource+0x18>
 80045d8:	2302      	movs	r3, #2
 80045da:	e0a6      	b.n	800472a <HAL_TIM_ConfigClockSource+0x166>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004602:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	d067      	beq.n	80046e4 <HAL_TIM_ConfigClockSource+0x120>
 8004614:	2b40      	cmp	r3, #64	; 0x40
 8004616:	d80b      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x6c>
 8004618:	2b10      	cmp	r3, #16
 800461a:	d073      	beq.n	8004704 <HAL_TIM_ConfigClockSource+0x140>
 800461c:	2b10      	cmp	r3, #16
 800461e:	d802      	bhi.n	8004626 <HAL_TIM_ConfigClockSource+0x62>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d06f      	beq.n	8004704 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004624:	e078      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004626:	2b20      	cmp	r3, #32
 8004628:	d06c      	beq.n	8004704 <HAL_TIM_ConfigClockSource+0x140>
 800462a:	2b30      	cmp	r3, #48	; 0x30
 800462c:	d06a      	beq.n	8004704 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800462e:	e073      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004630:	2b70      	cmp	r3, #112	; 0x70
 8004632:	d00d      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0x8c>
 8004634:	2b70      	cmp	r3, #112	; 0x70
 8004636:	d804      	bhi.n	8004642 <HAL_TIM_ConfigClockSource+0x7e>
 8004638:	2b50      	cmp	r3, #80	; 0x50
 800463a:	d033      	beq.n	80046a4 <HAL_TIM_ConfigClockSource+0xe0>
 800463c:	2b60      	cmp	r3, #96	; 0x60
 800463e:	d041      	beq.n	80046c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004640:	e06a      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004646:	d066      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x152>
 8004648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464c:	d017      	beq.n	800467e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800464e:	e063      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6899      	ldr	r1, [r3, #8]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f000 faee 	bl	8004c40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004672:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	609a      	str	r2, [r3, #8]
      break;
 800467c:	e04c      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6899      	ldr	r1, [r3, #8]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f000 fad7 	bl	8004c40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046a0:	609a      	str	r2, [r3, #8]
      break;
 80046a2:	e039      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6859      	ldr	r1, [r3, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	461a      	mov	r2, r3
 80046b2:	f000 fa4b 	bl	8004b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2150      	movs	r1, #80	; 0x50
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 faa4 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 80046c2:	e029      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	6859      	ldr	r1, [r3, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	461a      	mov	r2, r3
 80046d2:	f000 fa6a 	bl	8004baa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2160      	movs	r1, #96	; 0x60
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fa94 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 80046e2:	e019      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	461a      	mov	r2, r3
 80046f2:	f000 fa2b 	bl	8004b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2140      	movs	r1, #64	; 0x40
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fa84 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 8004702:	e009      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f000 fa7b 	bl	8004c0a <TIM_ITRx_SetConfig>
      break;
 8004714:	e000      	b.n	8004718 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a34      	ldr	r2, [pc, #208]	; (8004818 <TIM_Base_SetConfig+0xe4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00f      	beq.n	800476c <TIM_Base_SetConfig+0x38>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004752:	d00b      	beq.n	800476c <TIM_Base_SetConfig+0x38>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a31      	ldr	r2, [pc, #196]	; (800481c <TIM_Base_SetConfig+0xe8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d007      	beq.n	800476c <TIM_Base_SetConfig+0x38>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a30      	ldr	r2, [pc, #192]	; (8004820 <TIM_Base_SetConfig+0xec>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0x38>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a2f      	ldr	r2, [pc, #188]	; (8004824 <TIM_Base_SetConfig+0xf0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d108      	bne.n	800477e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a25      	ldr	r2, [pc, #148]	; (8004818 <TIM_Base_SetConfig+0xe4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01b      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d017      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a22      	ldr	r2, [pc, #136]	; (800481c <TIM_Base_SetConfig+0xe8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a21      	ldr	r2, [pc, #132]	; (8004820 <TIM_Base_SetConfig+0xec>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00f      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a20      	ldr	r2, [pc, #128]	; (8004824 <TIM_Base_SetConfig+0xf0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00b      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <TIM_Base_SetConfig+0xf4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d007      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1e      	ldr	r2, [pc, #120]	; (800482c <TIM_Base_SetConfig+0xf8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <TIM_Base_SetConfig+0x8a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <TIM_Base_SetConfig+0xfc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d108      	bne.n	80047d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <TIM_Base_SetConfig+0xe4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d103      	bne.n	8004804 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	615a      	str	r2, [r3, #20]
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40010000 	.word	0x40010000
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40000c00 	.word	0x40000c00
 8004828:	40014000 	.word	0x40014000
 800482c:	40014400 	.word	0x40014400
 8004830:	40014800 	.word	0x40014800

08004834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0201 	bic.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 0302 	bic.w	r3, r3, #2
 800487c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <TIM_OC1_SetConfig+0xc8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10c      	bne.n	80048aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f023 0308 	bic.w	r3, r3, #8
 8004896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a13      	ldr	r2, [pc, #76]	; (80048fc <TIM_OC1_SetConfig+0xc8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d111      	bne.n	80048d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	621a      	str	r2, [r3, #32]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40010000 	.word	0x40010000

08004900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	f023 0210 	bic.w	r2, r3, #16
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0320 	bic.w	r3, r3, #32
 800494a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a1e      	ldr	r2, [pc, #120]	; (80049d4 <TIM_OC2_SetConfig+0xd4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d10d      	bne.n	800497c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <TIM_OC2_SetConfig+0xd4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d113      	bne.n	80049ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800498a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40010000 	.word	0x40010000

080049d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0303 	bic.w	r3, r3, #3
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <TIM_OC3_SetConfig+0xd0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10d      	bne.n	8004a52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <TIM_OC3_SetConfig+0xd0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d113      	bne.n	8004a82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40010000 	.word	0x40010000

08004aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	031b      	lsls	r3, r3, #12
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <TIM_OC4_SetConfig+0x9c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d109      	bne.n	8004b20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000

08004b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0201 	bic.w	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f023 030a 	bic.w	r3, r3, #10
 8004b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b087      	sub	sp, #28
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0210 	bic.w	r2, r3, #16
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	031b      	lsls	r3, r3, #12
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004be6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f043 0307 	orr.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	609a      	str	r2, [r3, #8]
}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	021a      	lsls	r2, r3, #8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	609a      	str	r2, [r3, #8]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e050      	b.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d018      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce4:	d013      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00e      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d009      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d004      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d10c      	bne.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40000400 	.word	0x40000400
 8004d50:	40000800 	.word	0x40000800
 8004d54:	40000c00 	.word	0x40000c00
 8004d58:	40014000 	.word	0x40014000

08004d5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e03d      	b.n	8004df4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e00:	b084      	sub	sp, #16
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	f107 001c 	add.w	r0, r7, #28
 8004e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d122      	bne.n	8004e5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d105      	bne.n	8004e52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f001 fac6 	bl	80063e4 <USB_CoreReset>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	73fb      	strb	r3, [r7, #15]
 8004e5c:	e01a      	b.n	8004e94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f001 faba 	bl	80063e4 <USB_CoreReset>
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
 8004e86:	e005      	b.n	8004e94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10b      	bne.n	8004eb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f043 0206 	orr.w	r2, r3, #6
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ebe:	b004      	add	sp, #16
 8004ec0:	4770      	bx	lr
	...

08004ec4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d165      	bne.n	8004fa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a41      	ldr	r2, [pc, #260]	; (8004fe0 <USB_SetTurnaroundTime+0x11c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d906      	bls.n	8004eee <USB_SetTurnaroundTime+0x2a>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4a40      	ldr	r2, [pc, #256]	; (8004fe4 <USB_SetTurnaroundTime+0x120>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d802      	bhi.n	8004eee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ee8:	230f      	movs	r3, #15
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e062      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a3c      	ldr	r2, [pc, #240]	; (8004fe4 <USB_SetTurnaroundTime+0x120>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d906      	bls.n	8004f04 <USB_SetTurnaroundTime+0x40>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4a3b      	ldr	r2, [pc, #236]	; (8004fe8 <USB_SetTurnaroundTime+0x124>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d802      	bhi.n	8004f04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004efe:	230e      	movs	r3, #14
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e057      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a38      	ldr	r2, [pc, #224]	; (8004fe8 <USB_SetTurnaroundTime+0x124>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d906      	bls.n	8004f1a <USB_SetTurnaroundTime+0x56>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4a37      	ldr	r2, [pc, #220]	; (8004fec <USB_SetTurnaroundTime+0x128>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d802      	bhi.n	8004f1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f14:	230d      	movs	r3, #13
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	e04c      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a33      	ldr	r2, [pc, #204]	; (8004fec <USB_SetTurnaroundTime+0x128>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d906      	bls.n	8004f30 <USB_SetTurnaroundTime+0x6c>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4a32      	ldr	r2, [pc, #200]	; (8004ff0 <USB_SetTurnaroundTime+0x12c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d802      	bhi.n	8004f30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e041      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4a2f      	ldr	r2, [pc, #188]	; (8004ff0 <USB_SetTurnaroundTime+0x12c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d906      	bls.n	8004f46 <USB_SetTurnaroundTime+0x82>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4a2e      	ldr	r2, [pc, #184]	; (8004ff4 <USB_SetTurnaroundTime+0x130>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d802      	bhi.n	8004f46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f40:	230b      	movs	r3, #11
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e036      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4a2a      	ldr	r2, [pc, #168]	; (8004ff4 <USB_SetTurnaroundTime+0x130>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d906      	bls.n	8004f5c <USB_SetTurnaroundTime+0x98>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4a29      	ldr	r2, [pc, #164]	; (8004ff8 <USB_SetTurnaroundTime+0x134>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d802      	bhi.n	8004f5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f56:	230a      	movs	r3, #10
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e02b      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <USB_SetTurnaroundTime+0x134>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d906      	bls.n	8004f72 <USB_SetTurnaroundTime+0xae>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4a25      	ldr	r2, [pc, #148]	; (8004ffc <USB_SetTurnaroundTime+0x138>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d802      	bhi.n	8004f72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f6c:	2309      	movs	r3, #9
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e020      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <USB_SetTurnaroundTime+0x138>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d906      	bls.n	8004f88 <USB_SetTurnaroundTime+0xc4>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4a20      	ldr	r2, [pc, #128]	; (8005000 <USB_SetTurnaroundTime+0x13c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d802      	bhi.n	8004f88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f82:	2308      	movs	r3, #8
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e015      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <USB_SetTurnaroundTime+0x13c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d906      	bls.n	8004f9e <USB_SetTurnaroundTime+0xda>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <USB_SetTurnaroundTime+0x140>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d802      	bhi.n	8004f9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f98:	2307      	movs	r3, #7
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	e00a      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f9e:	2306      	movs	r3, #6
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e007      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004faa:	2309      	movs	r3, #9
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e001      	b.n	8004fb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fb0:	2309      	movs	r3, #9
 8004fb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	029b      	lsls	r3, r3, #10
 8004fc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	00d8acbf 	.word	0x00d8acbf
 8004fe4:	00e4e1bf 	.word	0x00e4e1bf
 8004fe8:	00f423ff 	.word	0x00f423ff
 8004fec:	0106737f 	.word	0x0106737f
 8004ff0:	011a499f 	.word	0x011a499f
 8004ff4:	01312cff 	.word	0x01312cff
 8004ff8:	014ca43f 	.word	0x014ca43f
 8004ffc:	016e35ff 	.word	0x016e35ff
 8005000:	01a6ab1f 	.word	0x01a6ab1f
 8005004:	01e847ff 	.word	0x01e847ff

08005008 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f043 0201 	orr.w	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d106      	bne.n	8005078 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	e00b      	b.n	8005090 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	e001      	b.n	8005090 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e003      	b.n	8005098 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005090:	2032      	movs	r0, #50	; 0x32
 8005092:	f7fc ffe3 	bl	800205c <HAL_Delay>

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a0:	b084      	sub	sp, #16
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b086      	sub	sp, #24
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	e009      	b.n	80050d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3340      	adds	r3, #64	; 0x40
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	2200      	movs	r2, #0
 80050cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	3301      	adds	r3, #1
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b0e      	cmp	r3, #14
 80050d8:	d9f2      	bls.n	80050c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11c      	bne.n	800511a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ee:	f043 0302 	orr.w	r3, r3, #2
 80050f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38
 8005118:	e00b      	b.n	8005132 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005138:	461a      	mov	r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005144:	4619      	mov	r1, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514c:	461a      	mov	r2, r3
 800514e:	680b      	ldr	r3, [r1, #0]
 8005150:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	2b01      	cmp	r3, #1
 8005156:	d10c      	bne.n	8005172 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800515e:	2100      	movs	r1, #0
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f949 	bl	80053f8 <USB_SetDevSpeed>
 8005166:	e008      	b.n	800517a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005168:	2101      	movs	r1, #1
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f944 	bl	80053f8 <USB_SetDevSpeed>
 8005170:	e003      	b.n	800517a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005172:	2103      	movs	r1, #3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f93f 	bl	80053f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800517a:	2110      	movs	r1, #16
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f8f3 	bl	8005368 <USB_FlushTxFifo>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f911 	bl	80053b4 <USB_FlushRxFifo>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a2:	461a      	mov	r2, r3
 80051a4:	2300      	movs	r3, #0
 80051a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	461a      	mov	r2, r3
 80051b0:	2300      	movs	r3, #0
 80051b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ba:	461a      	mov	r2, r3
 80051bc:	2300      	movs	r3, #0
 80051be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c0:	2300      	movs	r3, #0
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	e043      	b.n	800524e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051dc:	d118      	bne.n	8005210 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	461a      	mov	r2, r3
 80051f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e013      	b.n	8005222 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	461a      	mov	r2, r3
 8005208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e008      	b.n	8005222 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	461a      	mov	r2, r3
 800521e:	2300      	movs	r3, #0
 8005220:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522e:	461a      	mov	r2, r3
 8005230:	2300      	movs	r3, #0
 8005232:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	461a      	mov	r2, r3
 8005242:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005246:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	3301      	adds	r3, #1
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	429a      	cmp	r2, r3
 8005254:	d3b7      	bcc.n	80051c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005256:	2300      	movs	r3, #0
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	e043      	b.n	80052e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800526e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005272:	d118      	bne.n	80052a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	461a      	mov	r2, r3
 8005288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e013      	b.n	80052b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	461a      	mov	r2, r3
 800529e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	e008      	b.n	80052b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	461a      	mov	r2, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	461a      	mov	r2, r3
 80052c6:	2300      	movs	r3, #0
 80052c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	461a      	mov	r2, r3
 80052d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	3301      	adds	r3, #1
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3b7      	bcc.n	800525c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800530c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f043 0210 	orr.w	r2, r3, #16
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <USB_DevInit+0x2c4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800532c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f043 0208 	orr.w	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800533e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d107      	bne.n	8005354 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005354:	7dfb      	ldrb	r3, [r7, #23]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005360:	b004      	add	sp, #16
 8005362:	4770      	bx	lr
 8005364:	803c3800 	.word	0x803c3800

08005368 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	019b      	lsls	r3, r3, #6
 800537a:	f043 0220 	orr.w	r2, r3, #32
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <USB_FlushTxFifo+0x48>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d901      	bls.n	8005394 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e006      	b.n	80053a2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b20      	cmp	r3, #32
 800539e:	d0f0      	beq.n	8005382 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	00030d40 	.word	0x00030d40

080053b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2210      	movs	r2, #16
 80053c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3301      	adds	r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <USB_FlushRxFifo+0x40>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d901      	bls.n	80053d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e006      	b.n	80053e6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d0f0      	beq.n	80053c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	00030d40 	.word	0x00030d40

080053f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800542a:	b480      	push	{r7}
 800542c:	b087      	sub	sp, #28
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0306 	and.w	r3, r3, #6
 8005442:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]
 800544e:	e00a      	b.n	8005466 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d002      	beq.n	800545c <USB_GetDevSpeed+0x32>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b06      	cmp	r3, #6
 800545a:	d102      	bne.n	8005462 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800545c:	2302      	movs	r3, #2
 800545e:	75fb      	strb	r3, [r7, #23]
 8005460:	e001      	b.n	8005466 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005462:	230f      	movs	r3, #15
 8005464:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005466:	7dfb      	ldrb	r3, [r7, #23]
}
 8005468:	4618      	mov	r0, r3
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d13a      	bne.n	8005506 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	2101      	movs	r1, #1
 80054a2:	fa01 f303 	lsl.w	r3, r1, r3
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	68f9      	ldr	r1, [r7, #12]
 80054aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ae:	4313      	orrs	r3, r2
 80054b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d155      	bne.n	8005574 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	78db      	ldrb	r3, [r3, #3]
 80054e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	059b      	lsls	r3, r3, #22
 80054ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054ec:	4313      	orrs	r3, r2
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	e036      	b.n	8005574 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	2101      	movs	r1, #1
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	68f9      	ldr	r1, [r7, #12]
 8005520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005524:	4313      	orrs	r3, r2
 8005526:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d11a      	bne.n	8005574 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	78db      	ldrb	r3, [r3, #3]
 8005558:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800555a:	430b      	orrs	r3, r1
 800555c:	4313      	orrs	r3, r2
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d161      	bne.n	8005664 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b6:	d11f      	bne.n	80055f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f303 	lsl.w	r3, r1, r3
 800560e:	b29b      	uxth	r3, r3
 8005610:	43db      	mvns	r3, r3
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005618:	4013      	ands	r3, r2
 800561a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f303 	lsl.w	r3, r1, r3
 8005632:	b29b      	uxth	r3, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800563c:	4013      	ands	r3, r2
 800563e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	0159      	lsls	r1, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	440b      	add	r3, r1
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	4619      	mov	r1, r3
 800565c:	4b35      	ldr	r3, [pc, #212]	; (8005734 <USB_DeactivateEndpoint+0x1b0>)
 800565e:	4013      	ands	r3, r2
 8005660:	600b      	str	r3, [r1, #0]
 8005662:	e060      	b.n	8005726 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567a:	d11f      	bne.n	80056bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	440a      	add	r2, r1
 8005692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800569a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	2101      	movs	r1, #1
 80056ce:	fa01 f303 	lsl.w	r3, r1, r3
 80056d2:	041b      	lsls	r3, r3, #16
 80056d4:	43db      	mvns	r3, r3
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056dc:	4013      	ands	r3, r2
 80056de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f303 	lsl.w	r3, r1, r3
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	43db      	mvns	r3, r3
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005700:	4013      	ands	r3, r2
 8005702:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	0159      	lsls	r1, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	440b      	add	r3, r1
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	4619      	mov	r1, r3
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <USB_DeactivateEndpoint+0x1b4>)
 8005722:	4013      	ands	r3, r2
 8005724:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	ec337800 	.word	0xec337800
 8005738:	eff37800 	.word	0xeff37800

0800573c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	; 0x28
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2b01      	cmp	r3, #1
 800575a:	f040 815c 	bne.w	8005a16 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d132      	bne.n	80057cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005780:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005784:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	0cdb      	lsrs	r3, r3, #19
 80057c6:	04db      	lsls	r3, r3, #19
 80057c8:	6113      	str	r3, [r2, #16]
 80057ca:	e074      	b.n	80058b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	0cdb      	lsrs	r3, r3, #19
 80057e8:	04db      	lsls	r3, r3, #19
 80057ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005806:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800580a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800580e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	6959      	ldr	r1, [r3, #20]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	440b      	add	r3, r1
 8005828:	1e59      	subs	r1, r3, #1
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005832:	04d9      	lsls	r1, r3, #19
 8005834:	4b9d      	ldr	r3, [pc, #628]	; (8005aac <USB_EPStartXfer+0x370>)
 8005836:	400b      	ands	r3, r1
 8005838:	69b9      	ldr	r1, [r7, #24]
 800583a:	0148      	lsls	r0, r1, #5
 800583c:	69f9      	ldr	r1, [r7, #28]
 800583e:	4401      	add	r1, r0
 8005840:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005844:	4313      	orrs	r3, r2
 8005846:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585e:	69b9      	ldr	r1, [r7, #24]
 8005860:	0148      	lsls	r0, r1, #5
 8005862:	69f9      	ldr	r1, [r7, #28]
 8005864:	4401      	add	r1, r0
 8005866:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800586a:	4313      	orrs	r3, r2
 800586c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	78db      	ldrb	r3, [r3, #3]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d11f      	bne.n	80058b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005890:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005894:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d14b      	bne.n	8005954 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	461a      	mov	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	78db      	ldrb	r3, [r3, #3]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d128      	bne.n	8005932 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d110      	bne.n	8005912 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	e00f      	b.n	8005932 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005930:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e12f      	b.n	8005bb4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005972:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	78db      	ldrb	r3, [r3, #3]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d015      	beq.n	80059a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8117 	beq.w	8005bb4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	2101      	movs	r1, #1
 8005998:	fa01 f303 	lsl.w	r3, r1, r3
 800599c:	69f9      	ldr	r1, [r7, #28]
 800599e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a2:	4313      	orrs	r3, r2
 80059a4:	634b      	str	r3, [r1, #52]	; 0x34
 80059a6:	e105      	b.n	8005bb4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d110      	bne.n	80059da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	e00f      	b.n	80059fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	68d9      	ldr	r1, [r3, #12]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781a      	ldrb	r2, [r3, #0]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	b298      	uxth	r0, r3
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fa2b 	bl	8005e6a <USB_WritePacket>
 8005a14:	e0ce      	b.n	8005bb4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a30:	0cdb      	lsrs	r3, r3, #19
 8005a32:	04db      	lsls	r3, r3, #19
 8005a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d126      	bne.n	8005ab0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a78:	69b9      	ldr	r1, [r7, #24]
 8005a7a:	0148      	lsls	r0, r1, #5
 8005a7c:	69f9      	ldr	r1, [r7, #28]
 8005a7e:	4401      	add	r1, r0
 8005a80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a84:	4313      	orrs	r3, r2
 8005a86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aa6:	6113      	str	r3, [r2, #16]
 8005aa8:	e036      	b.n	8005b18 <USB_EPStartXfer+0x3dc>
 8005aaa:	bf00      	nop
 8005aac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	695a      	ldr	r2, [r3, #20]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	4413      	add	r3, r2
 8005aba:	1e5a      	subs	r2, r3, #1
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	8afb      	ldrh	r3, [r7, #22]
 8005ad6:	04d9      	lsls	r1, r3, #19
 8005ad8:	4b39      	ldr	r3, [pc, #228]	; (8005bc0 <USB_EPStartXfer+0x484>)
 8005ada:	400b      	ands	r3, r1
 8005adc:	69b9      	ldr	r1, [r7, #24]
 8005ade:	0148      	lsls	r0, r1, #5
 8005ae0:	69f9      	ldr	r1, [r7, #28]
 8005ae2:	4401      	add	r1, r0
 8005ae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	8af9      	ldrh	r1, [r7, #22]
 8005b00:	fb01 f303 	mul.w	r3, r1, r3
 8005b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b08:	69b9      	ldr	r1, [r7, #24]
 8005b0a:	0148      	lsls	r0, r1, #5
 8005b0c:	69f9      	ldr	r1, [r7, #28]
 8005b0e:	4401      	add	r1, r0
 8005b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b14:	4313      	orrs	r3, r2
 8005b16:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d10d      	bne.n	8005b3a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	68d9      	ldr	r1, [r3, #12]
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b36:	460a      	mov	r2, r1
 8005b38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	78db      	ldrb	r3, [r3, #3]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d128      	bne.n	8005b94 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d110      	bne.n	8005b74 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	e00f      	b.n	8005b94 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3720      	adds	r7, #32
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	1ff80000 	.word	0x1ff80000

08005bc4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	f040 80cd 	bne.w	8005d80 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d132      	bne.n	8005c54 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4c:	0cdb      	lsrs	r3, r3, #19
 8005c4e:	04db      	lsls	r3, r3, #19
 8005c50:	6113      	str	r3, [r2, #16]
 8005c52:	e04e      	b.n	8005cf2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6e:	0cdb      	lsrs	r3, r3, #19
 8005c70:	04db      	lsls	r3, r3, #19
 8005c72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	695a      	ldr	r2, [r3, #20]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d903      	bls.n	8005cac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce2:	6939      	ldr	r1, [r7, #16]
 8005ce4:	0148      	lsls	r0, r1, #5
 8005ce6:	6979      	ldr	r1, [r7, #20]
 8005ce8:	4401      	add	r1, r0
 8005cea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d11e      	bne.n	8005d36 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d009      	beq.n	8005d14 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	e092      	b.n	8005e5c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d54:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d07e      	beq.n	8005e5c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	2101      	movs	r1, #1
 8005d70:	fa01 f303 	lsl.w	r3, r1, r3
 8005d74:	6979      	ldr	r1, [r7, #20]
 8005d76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	634b      	str	r3, [r1, #52]	; 0x34
 8005d7e:	e06d      	b.n	8005e5c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9a:	0cdb      	lsrs	r3, r3, #19
 8005d9c:	04db      	lsls	r3, r3, #19
 8005d9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dc2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005df2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e0a:	6939      	ldr	r1, [r7, #16]
 8005e0c:	0148      	lsls	r0, r1, #5
 8005e0e:	6979      	ldr	r1, [r7, #20]
 8005e10:	4401      	add	r1, r0
 8005e12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e16:	4313      	orrs	r3, r2
 8005e18:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d10d      	bne.n	8005e3c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d009      	beq.n	8005e3c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	68d9      	ldr	r1, [r3, #12]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e38:	460a      	mov	r2, r1
 8005e3a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b089      	sub	sp, #36	; 0x24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	4611      	mov	r1, r2
 8005e76:	461a      	mov	r2, r3
 8005e78:	460b      	mov	r3, r1
 8005e7a:	71fb      	strb	r3, [r7, #7]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005e88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11a      	bne.n	8005ec6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e90:	88bb      	ldrh	r3, [r7, #4]
 8005e92:	3303      	adds	r3, #3
 8005e94:	089b      	lsrs	r3, r3, #2
 8005e96:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	e00f      	b.n	8005ebe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	031a      	lsls	r2, r3, #12
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eaa:	461a      	mov	r2, r3
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3eb      	bcc.n	8005e9e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3724      	adds	r7, #36	; 0x24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b089      	sub	sp, #36	; 0x24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	3303      	adds	r3, #3
 8005eee:	089b      	lsrs	r3, r3, #2
 8005ef0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	e00b      	b.n	8005f10 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3304      	adds	r3, #4
 8005f08:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	61bb      	str	r3, [r7, #24]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d3ef      	bcc.n	8005ef8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005f18:	69fb      	ldr	r3, [r7, #28]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3724      	adds	r7, #36	; 0x24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	785b      	ldrb	r3, [r3, #1]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d12c      	bne.n	8005f9c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	db12      	blt.n	8005f7a <USB_EPSetStall+0x54>
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00f      	beq.n	8005f7a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f78:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	e02b      	b.n	8005ff4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	db12      	blt.n	8005fd4 <USB_EPSetStall+0xae>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00f      	beq.n	8005fd4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fd2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d128      	bne.n	8006070 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006038:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800603c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	78db      	ldrb	r3, [r3, #3]
 8006042:	2b03      	cmp	r3, #3
 8006044:	d003      	beq.n	800604e <USB_EPClearStall+0x4c>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	78db      	ldrb	r3, [r3, #3]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d138      	bne.n	80060c0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e027      	b.n	80060c0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800608a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800608e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	78db      	ldrb	r3, [r3, #3]
 8006094:	2b03      	cmp	r3, #3
 8006096:	d003      	beq.n	80060a0 <USB_EPClearStall+0x9e>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	78db      	ldrb	r3, [r3, #3]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d10f      	bne.n	80060c0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060be:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b085      	sub	sp, #20
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	460b      	mov	r3, r1
 80060d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060f0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006102:	68f9      	ldr	r1, [r7, #12]
 8006104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006108:	4313      	orrs	r3, r2
 800610a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006134:	f023 0303 	bic.w	r3, r3, #3
 8006138:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006148:	f023 0302 	bic.w	r3, r3, #2
 800614c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006176:	f023 0303 	bic.w	r3, r3, #3
 800617a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800618a:	f043 0302 	orr.w	r3, r3, #2
 800618e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4013      	ands	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061b6:	68fb      	ldr	r3, [r7, #12]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	4013      	ands	r3, r2
 80061e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	0c1b      	lsrs	r3, r3, #16
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	4013      	ands	r3, r2
 800621a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	b29b      	uxth	r3, r3
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	4013      	ands	r3, r2
 8006258:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800625a:	68bb      	ldr	r3, [r7, #8]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
 8006298:	01db      	lsls	r3, r3, #7
 800629a:	b2db      	uxtb	r3, r3
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4013      	ands	r3, r2
 80062b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062b6:	68bb      	ldr	r3, [r7, #8]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	f003 0301 	and.w	r3, r3, #1
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062fe:	f023 0307 	bic.w	r3, r3, #7
 8006302:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006316:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	460b      	mov	r3, r1
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	333c      	adds	r3, #60	; 0x3c
 800633e:	3304      	adds	r3, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4a26      	ldr	r2, [pc, #152]	; (80063e0 <USB_EP0_OutStart+0xb8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d90a      	bls.n	8006362 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800635c:	d101      	bne.n	8006362 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e037      	b.n	80063d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006368:	461a      	mov	r2, r3
 800636a:	2300      	movs	r3, #0
 800636c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006390:	f043 0318 	orr.w	r3, r3, #24
 8006394:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80063a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d10f      	bne.n	80063d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80063ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	4f54300a 	.word	0x4f54300a

080063e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3301      	adds	r3, #1
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4a13      	ldr	r2, [pc, #76]	; (8006448 <USB_CoreReset+0x64>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e01b      	b.n	800643a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	daf2      	bge.n	80063f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f043 0201 	orr.w	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a09      	ldr	r2, [pc, #36]	; (8006448 <USB_CoreReset+0x64>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d901      	bls.n	800642c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e006      	b.n	800643a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b01      	cmp	r3, #1
 8006436:	d0f0      	beq.n	800641a <USB_CoreReset+0x36>

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	00030d40 	.word	0x00030d40

0800644c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006458:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800645c:	f002 f93e 	bl	80086dc <malloc>
 8006460:	4603      	mov	r3, r0
 8006462:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d105      	bne.n	8006476 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006472:	2302      	movs	r3, #2
 8006474:	e066      	b.n	8006544 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	7c1b      	ldrb	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d119      	bne.n	80064ba <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800648a:	2202      	movs	r2, #2
 800648c:	2181      	movs	r1, #129	; 0x81
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 ffab 	bl	80083ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800649a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800649e:	2202      	movs	r2, #2
 80064a0:	2101      	movs	r1, #1
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 ffa1 	bl	80083ea <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2210      	movs	r2, #16
 80064b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80064b8:	e016      	b.n	80064e8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	2202      	movs	r2, #2
 80064be:	2181      	movs	r1, #129	; 0x81
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 ff92 	bl	80083ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064cc:	2340      	movs	r3, #64	; 0x40
 80064ce:	2202      	movs	r2, #2
 80064d0:	2101      	movs	r1, #1
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 ff89 	bl	80083ea <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2210      	movs	r2, #16
 80064e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064e8:	2308      	movs	r3, #8
 80064ea:	2203      	movs	r2, #3
 80064ec:	2182      	movs	r1, #130	; 0x82
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 ff7b 	bl	80083ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	7c1b      	ldrb	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006528:	2101      	movs	r1, #1
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f002 f84c 	bl	80085c8 <USBD_LL_PrepareReceive>
 8006530:	e007      	b.n	8006542 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006538:	2340      	movs	r3, #64	; 0x40
 800653a:	2101      	movs	r1, #1
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f002 f843 	bl	80085c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800655c:	2181      	movs	r1, #129	; 0x81
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f001 ff69 	bl	8008436 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800656a:	2101      	movs	r1, #1
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 ff62 	bl	8008436 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800657a:	2182      	movs	r1, #130	; 0x82
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 ff5a 	bl	8008436 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00e      	beq.n	80065ba <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065ac:	4618      	mov	r0, r3
 80065ae:	f002 f89d 	bl	80086ec <free>
    pdev->pClassData = NULL;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d03a      	beq.n	8006664 <USBD_CDC_Setup+0xa0>
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	f040 8097 	bne.w	8006722 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	88db      	ldrh	r3, [r3, #6]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d029      	beq.n	8006650 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	b25b      	sxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	da11      	bge.n	800662a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006612:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	88d2      	ldrh	r2, [r2, #6]
 8006618:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800661a:	6939      	ldr	r1, [r7, #16]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	88db      	ldrh	r3, [r3, #6]
 8006620:	461a      	mov	r2, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 fa9d 	bl	8007b62 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006628:	e082      	b.n	8006730 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	785a      	ldrb	r2, [r3, #1]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	88db      	ldrh	r3, [r3, #6]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006640:	6939      	ldr	r1, [r7, #16]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	88db      	ldrh	r3, [r3, #6]
 8006646:	461a      	mov	r2, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fab6 	bl	8007bba <USBD_CtlPrepareRx>
    break;
 800664e:	e06f      	b.n	8006730 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	7850      	ldrb	r0, [r2, #1]
 800665c:	2200      	movs	r2, #0
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	4798      	blx	r3
    break;
 8006662:	e065      	b.n	8006730 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b0b      	cmp	r3, #11
 800666a:	d84f      	bhi.n	800670c <USBD_CDC_Setup+0x148>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <USBD_CDC_Setup+0xb0>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	080066a5 	.word	0x080066a5
 8006678:	0800671b 	.word	0x0800671b
 800667c:	0800670d 	.word	0x0800670d
 8006680:	0800670d 	.word	0x0800670d
 8006684:	0800670d 	.word	0x0800670d
 8006688:	0800670d 	.word	0x0800670d
 800668c:	0800670d 	.word	0x0800670d
 8006690:	0800670d 	.word	0x0800670d
 8006694:	0800670d 	.word	0x0800670d
 8006698:	0800670d 	.word	0x0800670d
 800669c:	080066cd 	.word	0x080066cd
 80066a0:	080066f5 	.word	0x080066f5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d107      	bne.n	80066be <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80066ae:	f107 030c 	add.w	r3, r7, #12
 80066b2:	2202      	movs	r2, #2
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 fa53 	bl	8007b62 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80066bc:	e030      	b.n	8006720 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 f9dd 	bl	8007a80 <USBD_CtlError>
        ret = USBD_FAIL;
 80066c6:	2303      	movs	r3, #3
 80066c8:	75fb      	strb	r3, [r7, #23]
      break;
 80066ca:	e029      	b.n	8006720 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d107      	bne.n	80066e6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80066d6:	f107 030f 	add.w	r3, r7, #15
 80066da:	2201      	movs	r2, #1
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 fa3f 	bl	8007b62 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80066e4:	e01c      	b.n	8006720 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 f9c9 	bl	8007a80 <USBD_CtlError>
        ret = USBD_FAIL;
 80066ee:	2303      	movs	r3, #3
 80066f0:	75fb      	strb	r3, [r7, #23]
      break;
 80066f2:	e015      	b.n	8006720 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d00f      	beq.n	800671e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 f9bd 	bl	8007a80 <USBD_CtlError>
        ret = USBD_FAIL;
 8006706:	2303      	movs	r3, #3
 8006708:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800670a:	e008      	b.n	800671e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 f9b6 	bl	8007a80 <USBD_CtlError>
      ret = USBD_FAIL;
 8006714:	2303      	movs	r3, #3
 8006716:	75fb      	strb	r3, [r7, #23]
      break;
 8006718:	e002      	b.n	8006720 <USBD_CDC_Setup+0x15c>
      break;
 800671a:	bf00      	nop
 800671c:	e008      	b.n	8006730 <USBD_CDC_Setup+0x16c>
      break;
 800671e:	bf00      	nop
    }
    break;
 8006720:	e006      	b.n	8006730 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 f9ab 	bl	8007a80 <USBD_CtlError>
    ret = USBD_FAIL;
 800672a:	2303      	movs	r3, #3
 800672c:	75fb      	strb	r3, [r7, #23]
    break;
 800672e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006730:	7dfb      	ldrb	r3, [r7, #23]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop

0800673c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800674e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800675a:	2303      	movs	r3, #3
 800675c:	e049      	b.n	80067f2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006764:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006766:	78fa      	ldrb	r2, [r7, #3]
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	440b      	add	r3, r1
 8006774:	3318      	adds	r3, #24
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d029      	beq.n	80067d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800677c:	78fa      	ldrb	r2, [r7, #3]
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	3318      	adds	r3, #24
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	78f9      	ldrb	r1, [r7, #3]
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	460b      	mov	r3, r1
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	1a5b      	subs	r3, r3, r1
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4403      	add	r3, r0
 800679c:	3344      	adds	r3, #68	; 0x44
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80067a4:	fb03 f301 	mul.w	r3, r3, r1
 80067a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d110      	bne.n	80067d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3318      	adds	r3, #24
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067c2:	78f9      	ldrb	r1, [r7, #3]
 80067c4:	2300      	movs	r3, #0
 80067c6:	2200      	movs	r2, #0
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fedc 	bl	8008586 <USBD_LL_Transmit>
 80067ce:	e00f      	b.n	80067f0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80067ec:	78fa      	ldrb	r2, [r7, #3]
 80067ee:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800680c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	e015      	b.n	8006848 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fef2 	bl	800860a <USBD_LL_GetRxDataSize>
 8006826:	4602      	mov	r2, r0
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006842:	4611      	mov	r1, r2
 8006844:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800685e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d015      	beq.n	8006896 <USBD_CDC_EP0_RxReady+0x46>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006870:	2bff      	cmp	r3, #255	; 0xff
 8006872:	d010      	beq.n	8006896 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006882:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800688a:	b292      	uxth	r2, r2
 800688c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	22ff      	movs	r2, #255	; 0xff
 8006892:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2243      	movs	r2, #67	; 0x43
 80068ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80068ae:	4b03      	ldr	r3, [pc, #12]	; (80068bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	20000094 	.word	0x20000094

080068c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2243      	movs	r2, #67	; 0x43
 80068cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80068ce:	4b03      	ldr	r3, [pc, #12]	; (80068dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	20000050 	.word	0x20000050

080068e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2243      	movs	r2, #67	; 0x43
 80068ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80068ee:	4b03      	ldr	r3, [pc, #12]	; (80068fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	200000d8 	.word	0x200000d8

08006900 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	220a      	movs	r2, #10
 800690c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800690e:	4b03      	ldr	r3, [pc, #12]	; (800691c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	2000000c 	.word	0x2000000c

08006920 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006930:	2303      	movs	r3, #3
 8006932:	e004      	b.n	800693e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800694a:	b480      	push	{r7}
 800694c:	b087      	sub	sp, #28
 800694e:	af00      	add	r7, sp, #0
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800695c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800698c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e01a      	b.n	80069fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d114      	bne.n	80069fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80069ee:	2181      	movs	r1, #129	; 0x81
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fdc8 	bl	8008586 <USBD_LL_Transmit>

    ret = USBD_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e016      	b.n	8006a50 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	7c1b      	ldrb	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a34:	2101      	movs	r1, #1
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fdc6 	bl	80085c8 <USBD_LL_PrepareReceive>
 8006a3c:	e007      	b.n	8006a4e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a44:	2340      	movs	r3, #64	; 0x40
 8006a46:	2101      	movs	r1, #1
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fdbd 	bl	80085c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	4613      	mov	r3, r2
 8006a64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e025      	b.n	8006abc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	79fa      	ldrb	r2, [r7, #7]
 8006aae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f001 fc33 	bl	800831c <USBD_LL_Init>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e010      	b.n	8006afe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	f107 020e 	add.w	r2, r7, #14
 8006af0:	4610      	mov	r0, r2
 8006af2:	4798      	blx	r3
 8006af4:	4602      	mov	r2, r0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fc50 	bl	80083b4 <USBD_LL_Start>
 8006b14:	4603      	mov	r3, r0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b40:	2303      	movs	r3, #3
 8006b42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	78fa      	ldrb	r2, [r7, #3]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4798      	blx	r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	78fa      	ldrb	r2, [r7, #3]
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
  }

  return USBD_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 ff2c 	bl	8007a0c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d00e      	beq.n	8006bf6 <USBD_LL_SetupStage+0x5a>
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d302      	bcc.n	8006be2 <USBD_LL_SetupStage+0x46>
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d014      	beq.n	8006c0a <USBD_LL_SetupStage+0x6e>
 8006be0:	e01d      	b.n	8006c1e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa18 	bl	8007020 <USBD_StdDevReq>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf4:	e020      	b.n	8006c38 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fa7c 	bl	80070fc <USBD_StdItfReq>
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]
      break;
 8006c08:	e016      	b.n	8006c38 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fab8 	bl	8007188 <USBD_StdEPReq>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1c:	e00c      	b.n	8006c38 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 fc21 	bl	8008474 <USBD_LL_StallEP>
 8006c32:	4603      	mov	r3, r0
 8006c34:	73fb      	strb	r3, [r7, #15]
      break;
 8006c36:	bf00      	nop
  }

  return ret;
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d137      	bne.n	8006cc6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d14a      	bne.n	8006cfe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d913      	bls.n	8006c9c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	1ad2      	subs	r2, r2, r3
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	bf28      	it	cs
 8006c8e:	4613      	movcs	r3, r2
 8006c90:	461a      	mov	r2, r3
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 ffad 	bl	8007bf4 <USBD_CtlContinueRx>
 8006c9a:	e030      	b.n	8006cfe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d105      	bne.n	8006cbe <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 ffa9 	bl	8007c16 <USBD_CtlSendStatus>
 8006cc4:	e01b      	b.n	8006cfe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d013      	beq.n	8006cfa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d10e      	bne.n	8006cfa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	7afa      	ldrb	r2, [r7, #11]
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	4798      	blx	r3
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	e002      	b.n	8006d00 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e000      	b.n	8006d00 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	460b      	mov	r3, r1
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d16:	7afb      	ldrb	r3, [r7, #11]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d16a      	bne.n	8006df2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3314      	adds	r3, #20
 8006d20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d155      	bne.n	8006dd8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d914      	bls.n	8006d62 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	1ad2      	subs	r2, r2, r3
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6879      	ldr	r1, [r7, #4]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 ff22 	bl	8007b98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d54:	2300      	movs	r3, #0
 8006d56:	2200      	movs	r2, #0
 8006d58:	2100      	movs	r1, #0
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f001 fc34 	bl	80085c8 <USBD_LL_PrepareReceive>
 8006d60:	e03a      	b.n	8006dd8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d11c      	bne.n	8006da8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d316      	bcc.n	8006da8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d20f      	bcs.n	8006da8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 ff03 	bl	8007b98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2100      	movs	r1, #0
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f001 fc11 	bl	80085c8 <USBD_LL_PrepareReceive>
 8006da6:	e017      	b.n	8006dd8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d105      	bne.n	8006dca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dca:	2180      	movs	r1, #128	; 0x80
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f001 fb51 	bl	8008474 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 ff32 	bl	8007c3c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d123      	bne.n	8006e2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7ff fe9b 	bl	8006b1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006df0:	e01b      	b.n	8006e2a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d013      	beq.n	8006e26 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d10e      	bne.n	8006e26 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	7afa      	ldrb	r2, [r7, #11]
 8006e12:	4611      	mov	r1, r2
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	4798      	blx	r3
 8006e18:	4603      	mov	r3, r0
 8006e1a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	e002      	b.n	8006e2c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e000      	b.n	8006e2c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6852      	ldr	r2, [r2, #4]
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	4611      	mov	r1, r2
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e78:	2340      	movs	r3, #64	; 0x40
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fab3 	bl	80083ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2240      	movs	r2, #64	; 0x40
 8006e90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e94:	2340      	movs	r3, #64	; 0x40
 8006e96:	2200      	movs	r2, #0
 8006e98:	2180      	movs	r1, #128	; 0x80
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 faa5 	bl	80083ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2240      	movs	r2, #64	; 0x40
 8006eaa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2204      	movs	r2, #4
 8006eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d105      	bne.n	8006f1e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d10b      	bne.n	8006f56 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6852      	ldr	r2, [r2, #4]
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
  }

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b087      	sub	sp, #28
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007000:	8a3b      	ldrh	r3, [r7, #16]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	b21a      	sxth	r2, r3
 8007006:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800700a:	4313      	orrs	r3, r2
 800700c:	b21b      	sxth	r3, r3
 800700e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007010:	89fb      	ldrh	r3, [r7, #14]
}
 8007012:	4618      	mov	r0, r3
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
	...

08007020 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007036:	2b20      	cmp	r3, #32
 8007038:	d004      	beq.n	8007044 <USBD_StdDevReq+0x24>
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d002      	beq.n	8007044 <USBD_StdDevReq+0x24>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <USBD_StdDevReq+0x38>
 8007042:	e050      	b.n	80070e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]
    break;
 8007056:	e04b      	b.n	80070f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b09      	cmp	r3, #9
 800705e:	d83c      	bhi.n	80070da <USBD_StdDevReq+0xba>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <USBD_StdDevReq+0x48>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	080070bd 	.word	0x080070bd
 800706c:	080070d1 	.word	0x080070d1
 8007070:	080070db 	.word	0x080070db
 8007074:	080070c7 	.word	0x080070c7
 8007078:	080070db 	.word	0x080070db
 800707c:	0800709b 	.word	0x0800709b
 8007080:	08007091 	.word	0x08007091
 8007084:	080070db 	.word	0x080070db
 8007088:	080070b3 	.word	0x080070b3
 800708c:	080070a5 	.word	0x080070a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9ce 	bl	8007434 <USBD_GetDescriptor>
      break;
 8007098:	e024      	b.n	80070e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fb33 	bl	8007708 <USBD_SetAddress>
      break;
 80070a2:	e01f      	b.n	80070e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fb70 	bl	800778c <USBD_SetConfig>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]
      break;
 80070b0:	e018      	b.n	80070e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fc0d 	bl	80078d4 <USBD_GetConfig>
      break;
 80070ba:	e013      	b.n	80070e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fc3c 	bl	800793c <USBD_GetStatus>
      break;
 80070c4:	e00e      	b.n	80070e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fc6a 	bl	80079a2 <USBD_SetFeature>
      break;
 80070ce:	e009      	b.n	80070e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fc79 	bl	80079ca <USBD_ClrFeature>
      break;
 80070d8:	e004      	b.n	80070e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fccf 	bl	8007a80 <USBD_CtlError>
      break;
 80070e2:	bf00      	nop
    }
    break;
 80070e4:	e004      	b.n	80070f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fcc9 	bl	8007a80 <USBD_CtlError>
    break;
 80070ee:	bf00      	nop
  }

  return ret;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop

080070fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007112:	2b20      	cmp	r3, #32
 8007114:	d003      	beq.n	800711e <USBD_StdItfReq+0x22>
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	d001      	beq.n	800711e <USBD_StdItfReq+0x22>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d12a      	bne.n	8007174 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	3b01      	subs	r3, #1
 8007126:	2b02      	cmp	r3, #2
 8007128:	d81d      	bhi.n	8007166 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	889b      	ldrh	r3, [r3, #4]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b01      	cmp	r3, #1
 8007132:	d813      	bhi.n	800715c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	88db      	ldrh	r3, [r3, #6]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d110      	bne.n	8007170 <USBD_StdItfReq+0x74>
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10d      	bne.n	8007170 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fd5e 	bl	8007c16 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800715a:	e009      	b.n	8007170 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fc8e 	bl	8007a80 <USBD_CtlError>
      break;
 8007164:	e004      	b.n	8007170 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fc89 	bl	8007a80 <USBD_CtlError>
      break;
 800716e:	e000      	b.n	8007172 <USBD_StdItfReq+0x76>
      break;
 8007170:	bf00      	nop
    }
    break;
 8007172:	e004      	b.n	800717e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fc82 	bl	8007a80 <USBD_CtlError>
    break;
 800717c:	bf00      	nop
  }

  return ret;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	889b      	ldrh	r3, [r3, #4]
 800719a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d004      	beq.n	80071b2 <USBD_StdEPReq+0x2a>
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d002      	beq.n	80071b2 <USBD_StdEPReq+0x2a>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <USBD_StdEPReq+0x3e>
 80071b0:	e135      	b.n	800741e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
 80071c0:	4603      	mov	r3, r0
 80071c2:	73fb      	strb	r3, [r7, #15]
    break;
 80071c4:	e130      	b.n	8007428 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d03e      	beq.n	800724c <USBD_StdEPReq+0xc4>
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d002      	beq.n	80071d8 <USBD_StdEPReq+0x50>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d077      	beq.n	80072c6 <USBD_StdEPReq+0x13e>
 80071d6:	e11c      	b.n	8007412 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d002      	beq.n	80071e8 <USBD_StdEPReq+0x60>
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d015      	beq.n	8007212 <USBD_StdEPReq+0x8a>
 80071e6:	e02b      	b.n	8007240 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00c      	beq.n	8007208 <USBD_StdEPReq+0x80>
 80071ee:	7bbb      	ldrb	r3, [r7, #14]
 80071f0:	2b80      	cmp	r3, #128	; 0x80
 80071f2:	d009      	beq.n	8007208 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 f93b 	bl	8008474 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071fe:	2180      	movs	r1, #128	; 0x80
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 f937 	bl	8008474 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007206:	e020      	b.n	800724a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fc38 	bl	8007a80 <USBD_CtlError>
        break;
 8007210:	e01b      	b.n	800724a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	885b      	ldrh	r3, [r3, #2]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10e      	bne.n	8007238 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <USBD_StdEPReq+0xb0>
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	2b80      	cmp	r3, #128	; 0x80
 8007224:	d008      	beq.n	8007238 <USBD_StdEPReq+0xb0>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	88db      	ldrh	r3, [r3, #6]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 f91e 	bl	8008474 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fcec 	bl	8007c16 <USBD_CtlSendStatus>

        break;
 800723e:	e004      	b.n	800724a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fc1c 	bl	8007a80 <USBD_CtlError>
        break;
 8007248:	bf00      	nop
      }
      break;
 800724a:	e0e7      	b.n	800741c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007252:	2b02      	cmp	r3, #2
 8007254:	d002      	beq.n	800725c <USBD_StdEPReq+0xd4>
 8007256:	2b03      	cmp	r3, #3
 8007258:	d015      	beq.n	8007286 <USBD_StdEPReq+0xfe>
 800725a:	e02d      	b.n	80072b8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00c      	beq.n	800727c <USBD_StdEPReq+0xf4>
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b80      	cmp	r3, #128	; 0x80
 8007266:	d009      	beq.n	800727c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 f901 	bl	8008474 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 f8fd 	bl	8008474 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800727a:	e023      	b.n	80072c4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fbfe 	bl	8007a80 <USBD_CtlError>
        break;
 8007284:	e01e      	b.n	80072c4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	885b      	ldrh	r3, [r3, #2]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d119      	bne.n	80072c2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 f908 	bl	80084b2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fcb7 	bl	8007c16 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
        }
        break;
 80072b6:	e004      	b.n	80072c2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fbe0 	bl	8007a80 <USBD_CtlError>
        break;
 80072c0:	e000      	b.n	80072c4 <USBD_StdEPReq+0x13c>
        break;
 80072c2:	bf00      	nop
      }
      break;
 80072c4:	e0aa      	b.n	800741c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d002      	beq.n	80072d6 <USBD_StdEPReq+0x14e>
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d032      	beq.n	800733a <USBD_StdEPReq+0x1b2>
 80072d4:	e097      	b.n	8007406 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <USBD_StdEPReq+0x164>
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	2b80      	cmp	r3, #128	; 0x80
 80072e0:	d004      	beq.n	80072ec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fbcb 	bl	8007a80 <USBD_CtlError>
          break;
 80072ea:	e091      	b.n	8007410 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	da0b      	bge.n	800730c <USBD_StdEPReq+0x184>
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	3310      	adds	r3, #16
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4413      	add	r3, r2
 8007308:	3304      	adds	r3, #4
 800730a:	e00b      	b.n	8007324 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	4413      	add	r3, r2
 8007322:	3304      	adds	r3, #4
 8007324:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2202      	movs	r2, #2
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fc15 	bl	8007b62 <USBD_CtlSendData>
        break;
 8007338:	e06a      	b.n	8007410 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800733a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800733e:	2b00      	cmp	r3, #0
 8007340:	da11      	bge.n	8007366 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	f003 020f 	and.w	r2, r3, #15
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	3324      	adds	r3, #36	; 0x24
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d117      	bne.n	800738c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fb8e 	bl	8007a80 <USBD_CtlError>
            break;
 8007364:	e054      	b.n	8007410 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	f003 020f 	and.w	r2, r3, #15
 800736c:	6879      	ldr	r1, [r7, #4]
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	440b      	add	r3, r1
 8007378:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d104      	bne.n	800738c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fb7b 	bl	8007a80 <USBD_CtlError>
            break;
 800738a:	e041      	b.n	8007410 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800738c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007390:	2b00      	cmp	r3, #0
 8007392:	da0b      	bge.n	80073ac <USBD_StdEPReq+0x224>
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	3310      	adds	r3, #16
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4413      	add	r3, r2
 80073a8:	3304      	adds	r3, #4
 80073aa:	e00b      	b.n	80073c4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	4413      	add	r3, r2
 80073c2:	3304      	adds	r3, #4
 80073c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <USBD_StdEPReq+0x24a>
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b80      	cmp	r3, #128	; 0x80
 80073d0:	d103      	bne.n	80073da <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	e00e      	b.n	80073f8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 f886 	bl	80084f0 <USBD_LL_IsStallEP>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2201      	movs	r2, #1
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e002      	b.n	80073f8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2202      	movs	r2, #2
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fbaf 	bl	8007b62 <USBD_CtlSendData>
          break;
 8007404:	e004      	b.n	8007410 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fb39 	bl	8007a80 <USBD_CtlError>
        break;
 800740e:	bf00      	nop
      }
      break;
 8007410:	e004      	b.n	800741c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fb33 	bl	8007a80 <USBD_CtlError>
      break;
 800741a:	bf00      	nop
    }
    break;
 800741c:	e004      	b.n	8007428 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fb2d 	bl	8007a80 <USBD_CtlError>
    break;
 8007426:	bf00      	nop
  }

  return ret;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	885b      	ldrh	r3, [r3, #2]
 800744e:	0a1b      	lsrs	r3, r3, #8
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	2b06      	cmp	r3, #6
 8007456:	f200 8128 	bhi.w	80076aa <USBD_GetDescriptor+0x276>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <USBD_GetDescriptor+0x2c>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	0800747d 	.word	0x0800747d
 8007464:	08007495 	.word	0x08007495
 8007468:	080074d5 	.word	0x080074d5
 800746c:	080076ab 	.word	0x080076ab
 8007470:	080076ab 	.word	0x080076ab
 8007474:	0800764b 	.word	0x0800764b
 8007478:	08007677 	.word	0x08007677
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	7c12      	ldrb	r2, [r2, #16]
 8007488:	f107 0108 	add.w	r1, r7, #8
 800748c:	4610      	mov	r0, r2
 800748e:	4798      	blx	r3
 8007490:	60f8      	str	r0, [r7, #12]
    break;
 8007492:	e112      	b.n	80076ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7c1b      	ldrb	r3, [r3, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10d      	bne.n	80074b8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	f107 0208 	add.w	r2, r7, #8
 80074a8:	4610      	mov	r0, r2
 80074aa:	4798      	blx	r3
 80074ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3301      	adds	r3, #1
 80074b2:	2202      	movs	r2, #2
 80074b4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80074b6:	e100      	b.n	80076ba <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	f107 0208 	add.w	r2, r7, #8
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	2202      	movs	r2, #2
 80074d0:	701a      	strb	r2, [r3, #0]
    break;
 80074d2:	e0f2      	b.n	80076ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	885b      	ldrh	r3, [r3, #2]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b05      	cmp	r3, #5
 80074dc:	f200 80ac 	bhi.w	8007638 <USBD_GetDescriptor+0x204>
 80074e0:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <USBD_GetDescriptor+0xb4>)
 80074e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e6:	bf00      	nop
 80074e8:	08007501 	.word	0x08007501
 80074ec:	08007535 	.word	0x08007535
 80074f0:	08007569 	.word	0x08007569
 80074f4:	0800759d 	.word	0x0800759d
 80074f8:	080075d1 	.word	0x080075d1
 80074fc:	08007605 	.word	0x08007605
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	7c12      	ldrb	r2, [r2, #16]
 8007518:	f107 0108 	add.w	r1, r7, #8
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
 8007520:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007522:	e091      	b.n	8007648 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 faaa 	bl	8007a80 <USBD_CtlError>
        err++;
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	3301      	adds	r3, #1
 8007530:	72fb      	strb	r3, [r7, #11]
      break;
 8007532:	e089      	b.n	8007648 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	7c12      	ldrb	r2, [r2, #16]
 800754c:	f107 0108 	add.w	r1, r7, #8
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
 8007554:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007556:	e077      	b.n	8007648 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa90 	bl	8007a80 <USBD_CtlError>
        err++;
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	3301      	adds	r3, #1
 8007564:	72fb      	strb	r3, [r7, #11]
      break;
 8007566:	e06f      	b.n	8007648 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7c12      	ldrb	r2, [r2, #16]
 8007580:	f107 0108 	add.w	r1, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800758a:	e05d      	b.n	8007648 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa76 	bl	8007a80 <USBD_CtlError>
        err++;
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	3301      	adds	r3, #1
 8007598:	72fb      	strb	r3, [r7, #11]
      break;
 800759a:	e055      	b.n	8007648 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	7c12      	ldrb	r2, [r2, #16]
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075be:	e043      	b.n	8007648 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa5c 	bl	8007a80 <USBD_CtlError>
        err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
      break;
 80075ce:	e03b      	b.n	8007648 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7c12      	ldrb	r2, [r2, #16]
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075f2:	e029      	b.n	8007648 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa42 	bl	8007a80 <USBD_CtlError>
        err++;
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	3301      	adds	r3, #1
 8007600:	72fb      	strb	r3, [r7, #11]
      break;
 8007602:	e021      	b.n	8007648 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007626:	e00f      	b.n	8007648 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa28 	bl	8007a80 <USBD_CtlError>
        err++;
 8007630:	7afb      	ldrb	r3, [r7, #11]
 8007632:	3301      	adds	r3, #1
 8007634:	72fb      	strb	r3, [r7, #11]
      break;
 8007636:	e007      	b.n	8007648 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fa20 	bl	8007a80 <USBD_CtlError>
      err++;
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	3301      	adds	r3, #1
 8007644:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007646:	bf00      	nop
    }
    break;
 8007648:	e037      	b.n	80076ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	7c1b      	ldrb	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765a:	f107 0208 	add.w	r2, r7, #8
 800765e:	4610      	mov	r0, r2
 8007660:	4798      	blx	r3
 8007662:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007664:	e029      	b.n	80076ba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fa09 	bl	8007a80 <USBD_CtlError>
      err++;
 800766e:	7afb      	ldrb	r3, [r7, #11]
 8007670:	3301      	adds	r3, #1
 8007672:	72fb      	strb	r3, [r7, #11]
    break;
 8007674:	e021      	b.n	80076ba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	7c1b      	ldrb	r3, [r3, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10d      	bne.n	800769a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007686:	f107 0208 	add.w	r2, r7, #8
 800768a:	4610      	mov	r0, r2
 800768c:	4798      	blx	r3
 800768e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3301      	adds	r3, #1
 8007694:	2207      	movs	r2, #7
 8007696:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007698:	e00f      	b.n	80076ba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f9ef 	bl	8007a80 <USBD_CtlError>
      err++;
 80076a2:	7afb      	ldrb	r3, [r7, #11]
 80076a4:	3301      	adds	r3, #1
 80076a6:	72fb      	strb	r3, [r7, #11]
    break;
 80076a8:	e007      	b.n	80076ba <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f9e7 	bl	8007a80 <USBD_CtlError>
    err++;
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	3301      	adds	r3, #1
 80076b6:	72fb      	strb	r3, [r7, #11]
    break;
 80076b8:	bf00      	nop
  }

  if (err != 0U)
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d11e      	bne.n	80076fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	88db      	ldrh	r3, [r3, #6]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d016      	beq.n	80076f6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80076c8:	893b      	ldrh	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00e      	beq.n	80076ec <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	88da      	ldrh	r2, [r3, #6]
 80076d2:	893b      	ldrh	r3, [r7, #8]
 80076d4:	4293      	cmp	r3, r2
 80076d6:	bf28      	it	cs
 80076d8:	4613      	movcs	r3, r2
 80076da:	b29b      	uxth	r3, r3
 80076dc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80076de:	893b      	ldrh	r3, [r7, #8]
 80076e0:	461a      	mov	r2, r3
 80076e2:	68f9      	ldr	r1, [r7, #12]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fa3c 	bl	8007b62 <USBD_CtlSendData>
 80076ea:	e009      	b.n	8007700 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9c6 	bl	8007a80 <USBD_CtlError>
 80076f4:	e004      	b.n	8007700 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fa8d 	bl	8007c16 <USBD_CtlSendStatus>
 80076fc:	e000      	b.n	8007700 <USBD_GetDescriptor+0x2cc>
    return;
 80076fe:	bf00      	nop
    }
  }
}
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop

08007708 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	889b      	ldrh	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d130      	bne.n	800777c <USBD_SetAddress+0x74>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	88db      	ldrh	r3, [r3, #6]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d12c      	bne.n	800777c <USBD_SetAddress+0x74>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	885b      	ldrh	r3, [r3, #2]
 8007726:	2b7f      	cmp	r3, #127	; 0x7f
 8007728:	d828      	bhi.n	800777c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	885b      	ldrh	r3, [r3, #2]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007734:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773c:	2b03      	cmp	r3, #3
 800773e:	d104      	bne.n	800774a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f99c 	bl	8007a80 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007748:	e01c      	b.n	8007784 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7bfa      	ldrb	r2, [r7, #15]
 800774e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fef6 	bl	8008548 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fa5a 	bl	8007c16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d004      	beq.n	8007772 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007770:	e008      	b.n	8007784 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777a:	e003      	b.n	8007784 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f97e 	bl	8007a80 <USBD_CtlError>
  }
}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	885b      	ldrh	r3, [r3, #2]
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	4b4b      	ldr	r3, [pc, #300]	; (80078d0 <USBD_SetConfig+0x144>)
 80077a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077a4:	4b4a      	ldr	r3, [pc, #296]	; (80078d0 <USBD_SetConfig+0x144>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d905      	bls.n	80077b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f966 	bl	8007a80 <USBD_CtlError>
    return USBD_FAIL;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e087      	b.n	80078c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d002      	beq.n	80077c8 <USBD_SetConfig+0x3c>
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d025      	beq.n	8007812 <USBD_SetConfig+0x86>
 80077c6:	e071      	b.n	80078ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80077c8:	4b41      	ldr	r3, [pc, #260]	; (80078d0 <USBD_SetConfig+0x144>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01c      	beq.n	800780a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80077d0:	4b3f      	ldr	r3, [pc, #252]	; (80078d0 <USBD_SetConfig+0x144>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80077da:	4b3d      	ldr	r3, [pc, #244]	; (80078d0 <USBD_SetConfig+0x144>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff f9a7 	bl	8006b34 <USBD_SetClassConfig>
 80077e6:	4603      	mov	r3, r0
 80077e8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d004      	beq.n	80077fa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f944 	bl	8007a80 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80077f8:	e065      	b.n	80078c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa0b 	bl	8007c16 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2203      	movs	r2, #3
 8007804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007808:	e05d      	b.n	80078c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa03 	bl	8007c16 <USBD_CtlSendStatus>
    break;
 8007810:	e059      	b.n	80078c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007812:	4b2f      	ldr	r3, [pc, #188]	; (80078d0 <USBD_SetConfig+0x144>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d112      	bne.n	8007840 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2202      	movs	r2, #2
 800781e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007822:	4b2b      	ldr	r3, [pc, #172]	; (80078d0 <USBD_SetConfig+0x144>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800782c:	4b28      	ldr	r3, [pc, #160]	; (80078d0 <USBD_SetConfig+0x144>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff f99a 	bl	8006b6c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f9ec 	bl	8007c16 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800783e:	e042      	b.n	80078c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007840:	4b23      	ldr	r3, [pc, #140]	; (80078d0 <USBD_SetConfig+0x144>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	429a      	cmp	r2, r3
 800784c:	d02a      	beq.n	80078a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff f988 	bl	8006b6c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800785c:	4b1c      	ldr	r3, [pc, #112]	; (80078d0 <USBD_SetConfig+0x144>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007866:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <USBD_SetConfig+0x144>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff f961 	bl	8006b34 <USBD_SetClassConfig>
 8007872:	4603      	mov	r3, r0
 8007874:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00f      	beq.n	800789c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f8fe 	bl	8007a80 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff f96d 	bl	8006b6c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2202      	movs	r2, #2
 8007896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800789a:	e014      	b.n	80078c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f9ba 	bl	8007c16 <USBD_CtlSendStatus>
    break;
 80078a2:	e010      	b.n	80078c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f9b6 	bl	8007c16 <USBD_CtlSendStatus>
    break;
 80078aa:	e00c      	b.n	80078c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8e6 	bl	8007a80 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078b4:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <USBD_SetConfig+0x144>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff f956 	bl	8006b6c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80078c0:	2303      	movs	r3, #3
 80078c2:	73fb      	strb	r3, [r7, #15]
    break;
 80078c4:	bf00      	nop
  }

  return ret;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20000378 	.word	0x20000378

080078d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	88db      	ldrh	r3, [r3, #6]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d004      	beq.n	80078f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f8c9 	bl	8007a80 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80078ee:	e021      	b.n	8007934 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	db17      	blt.n	800792a <USBD_GetConfig+0x56>
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	dd02      	ble.n	8007904 <USBD_GetConfig+0x30>
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d00b      	beq.n	800791a <USBD_GetConfig+0x46>
 8007902:	e012      	b.n	800792a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3308      	adds	r3, #8
 800790e:	2201      	movs	r2, #1
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f925 	bl	8007b62 <USBD_CtlSendData>
      break;
 8007918:	e00c      	b.n	8007934 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3304      	adds	r3, #4
 800791e:	2201      	movs	r2, #1
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f91d 	bl	8007b62 <USBD_CtlSendData>
      break;
 8007928:	e004      	b.n	8007934 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f8a7 	bl	8007a80 <USBD_CtlError>
      break;
 8007932:	bf00      	nop
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794c:	3b01      	subs	r3, #1
 800794e:	2b02      	cmp	r3, #2
 8007950:	d81e      	bhi.n	8007990 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	88db      	ldrh	r3, [r3, #6]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d004      	beq.n	8007964 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f88f 	bl	8007a80 <USBD_CtlError>
      break;
 8007962:	e01a      	b.n	800799a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f043 0202 	orr.w	r2, r3, #2
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	330c      	adds	r3, #12
 8007984:	2202      	movs	r2, #2
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f8ea 	bl	8007b62 <USBD_CtlSendData>
    break;
 800798e:	e004      	b.n	800799a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f874 	bl	8007a80 <USBD_CtlError>
    break;
 8007998:	bf00      	nop
  }
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	885b      	ldrh	r3, [r3, #2]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d106      	bne.n	80079c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f92a 	bl	8007c16 <USBD_CtlSendStatus>
  }
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079da:	3b01      	subs	r3, #1
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d80b      	bhi.n	80079f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	885b      	ldrh	r3, [r3, #2]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d10c      	bne.n	8007a02 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f910 	bl	8007c16 <USBD_CtlSendStatus>
      }
      break;
 80079f6:	e004      	b.n	8007a02 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f840 	bl	8007a80 <USBD_CtlError>
      break;
 8007a00:	e000      	b.n	8007a04 <USBD_ClrFeature+0x3a>
      break;
 8007a02:	bf00      	nop
  }
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	781a      	ldrb	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3301      	adds	r3, #1
 8007a26:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7ff fad3 	bl	8006fe2 <SWAPBYTE>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3301      	adds	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff fac6 	bl	8006fe2 <SWAPBYTE>
 8007a56:	4603      	mov	r3, r0
 8007a58:	461a      	mov	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3301      	adds	r3, #1
 8007a62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f7ff fab9 	bl	8006fe2 <SWAPBYTE>
 8007a70:	4603      	mov	r3, r0
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	80da      	strh	r2, [r3, #6]
}
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a8a:	2180      	movs	r1, #128	; 0x80
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fcf1 	bl	8008474 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a92:	2100      	movs	r1, #0
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fced 	bl	8008474 <USBD_LL_StallEP>
}
 8007a9a:	bf00      	nop
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b086      	sub	sp, #24
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	60f8      	str	r0, [r7, #12]
 8007aaa:	60b9      	str	r1, [r7, #8]
 8007aac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d036      	beq.n	8007b26 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007abc:	6938      	ldr	r0, [r7, #16]
 8007abe:	f000 f836 	bl	8007b2e <USBD_GetLen>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	7812      	ldrb	r2, [r2, #0]
 8007ada:	701a      	strb	r2, [r3, #0]
  idx++;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	2203      	movs	r2, #3
 8007aea:	701a      	strb	r2, [r3, #0]
  idx++;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	3301      	adds	r3, #1
 8007af0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007af2:	e013      	b.n	8007b1c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	4413      	add	r3, r2
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	7812      	ldrb	r2, [r2, #0]
 8007afe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	3301      	adds	r3, #1
 8007b04:	613b      	str	r3, [r7, #16]
    idx++;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4413      	add	r3, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e7      	bne.n	8007af4 <USBD_GetString+0x52>
 8007b24:	e000      	b.n	8007b28 <USBD_GetString+0x86>
    return;
 8007b26:	bf00      	nop
  }
}
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b3e:	e005      	b.n	8007b4c <USBD_GetLen+0x1e>
  {
    len++;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	3301      	adds	r3, #1
 8007b44:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1f5      	bne.n	8007b40 <USBD_GetLen+0x12>
  }

  return len;
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2202      	movs	r2, #2
 8007b72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	2100      	movs	r1, #0
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fcfc 	bl	8008586 <USBD_LL_Transmit>

  return USBD_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	2100      	movs	r1, #0
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 fceb 	bl	8008586 <USBD_LL_Transmit>

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2203      	movs	r2, #3
 8007bca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	2100      	movs	r1, #0
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fcef 	bl	80085c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	2100      	movs	r1, #0
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fcde 	bl	80085c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2204      	movs	r2, #4
 8007c22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c26:	2300      	movs	r3, #0
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fcaa 	bl	8008586 <USBD_LL_Transmit>

  return USBD_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2205      	movs	r2, #5
 8007c48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2100      	movs	r1, #0
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fcb8 	bl	80085c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4912      	ldr	r1, [pc, #72]	; (8007cb4 <MX_USB_DEVICE_Init+0x50>)
 8007c6c:	4812      	ldr	r0, [pc, #72]	; (8007cb8 <MX_USB_DEVICE_Init+0x54>)
 8007c6e:	f7fe fef3 	bl	8006a58 <USBD_Init>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c78:	f7f9 fd82 	bl	8001780 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c7c:	490f      	ldr	r1, [pc, #60]	; (8007cbc <MX_USB_DEVICE_Init+0x58>)
 8007c7e:	480e      	ldr	r0, [pc, #56]	; (8007cb8 <MX_USB_DEVICE_Init+0x54>)
 8007c80:	f7fe ff20 	bl	8006ac4 <USBD_RegisterClass>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c8a:	f7f9 fd79 	bl	8001780 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c8e:	490c      	ldr	r1, [pc, #48]	; (8007cc0 <MX_USB_DEVICE_Init+0x5c>)
 8007c90:	4809      	ldr	r0, [pc, #36]	; (8007cb8 <MX_USB_DEVICE_Init+0x54>)
 8007c92:	f7fe fe45 	bl	8006920 <USBD_CDC_RegisterInterface>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c9c:	f7f9 fd70 	bl	8001780 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ca0:	4805      	ldr	r0, [pc, #20]	; (8007cb8 <MX_USB_DEVICE_Init+0x54>)
 8007ca2:	f7fe ff30 	bl	8006b06 <USBD_Start>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007cac:	f7f9 fd68 	bl	8001780 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cb0:	bf00      	nop
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000130 	.word	0x20000130
 8007cb8:	200005cc 	.word	0x200005cc
 8007cbc:	20000018 	.word	0x20000018
 8007cc0:	2000011c 	.word	0x2000011c

08007cc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4905      	ldr	r1, [pc, #20]	; (8007ce0 <CDC_Init_FS+0x1c>)
 8007ccc:	4805      	ldr	r0, [pc, #20]	; (8007ce4 <CDC_Init_FS+0x20>)
 8007cce:	f7fe fe3c 	bl	800694a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cd2:	4905      	ldr	r1, [pc, #20]	; (8007ce8 <CDC_Init_FS+0x24>)
 8007cd4:	4803      	ldr	r0, [pc, #12]	; (8007ce4 <CDC_Init_FS+0x20>)
 8007cd6:	f7fe fe51 	bl	800697c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007cda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000900 	.word	0x20000900
 8007ce4:	200005cc 	.word	0x200005cc
 8007ce8:	2000089c 	.word	0x2000089c

08007cec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	6039      	str	r1, [r7, #0]
 8007d06:	71fb      	strb	r3, [r7, #7]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	2b23      	cmp	r3, #35	; 0x23
 8007d10:	d84a      	bhi.n	8007da8 <CDC_Control_FS+0xac>
 8007d12:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <CDC_Control_FS+0x1c>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007da9 	.word	0x08007da9
 8007d1c:	08007da9 	.word	0x08007da9
 8007d20:	08007da9 	.word	0x08007da9
 8007d24:	08007da9 	.word	0x08007da9
 8007d28:	08007da9 	.word	0x08007da9
 8007d2c:	08007da9 	.word	0x08007da9
 8007d30:	08007da9 	.word	0x08007da9
 8007d34:	08007da9 	.word	0x08007da9
 8007d38:	08007da9 	.word	0x08007da9
 8007d3c:	08007da9 	.word	0x08007da9
 8007d40:	08007da9 	.word	0x08007da9
 8007d44:	08007da9 	.word	0x08007da9
 8007d48:	08007da9 	.word	0x08007da9
 8007d4c:	08007da9 	.word	0x08007da9
 8007d50:	08007da9 	.word	0x08007da9
 8007d54:	08007da9 	.word	0x08007da9
 8007d58:	08007da9 	.word	0x08007da9
 8007d5c:	08007da9 	.word	0x08007da9
 8007d60:	08007da9 	.word	0x08007da9
 8007d64:	08007da9 	.word	0x08007da9
 8007d68:	08007da9 	.word	0x08007da9
 8007d6c:	08007da9 	.word	0x08007da9
 8007d70:	08007da9 	.word	0x08007da9
 8007d74:	08007da9 	.word	0x08007da9
 8007d78:	08007da9 	.word	0x08007da9
 8007d7c:	08007da9 	.word	0x08007da9
 8007d80:	08007da9 	.word	0x08007da9
 8007d84:	08007da9 	.word	0x08007da9
 8007d88:	08007da9 	.word	0x08007da9
 8007d8c:	08007da9 	.word	0x08007da9
 8007d90:	08007da9 	.word	0x08007da9
 8007d94:	08007da9 	.word	0x08007da9
 8007d98:	08007da9 	.word	0x08007da9
 8007d9c:	08007da9 	.word	0x08007da9
 8007da0:	08007da9 	.word	0x08007da9
 8007da4:	08007da9 	.word	0x08007da9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007da8:	bf00      	nop
  }

  return (USBD_OK);
 8007daa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	4811      	ldr	r0, [pc, #68]	; (8007e0c <CDC_Receive_FS+0x54>)
 8007dc6:	f7fe fdd9 	bl	800697c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dca:	4810      	ldr	r0, [pc, #64]	; (8007e0c <CDC_Receive_FS+0x54>)
 8007dcc:	f7fe fe1a 	bl	8006a04 <USBD_CDC_ReceivePacket>
	  extern uint8_t ReceivedData[100]; // Tablica przechowujaca odebrane dane
	  extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

	  // Wyczyszczenie tablicy odebranych danych
	  uint8_t iter;
	  for(iter = 0; iter<100; ++iter){
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
 8007dd4:	e006      	b.n	8007de4 <CDC_Receive_FS+0x2c>
		  ReceivedData[iter] = 0;
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	4a0d      	ldr	r2, [pc, #52]	; (8007e10 <CDC_Receive_FS+0x58>)
 8007dda:	2100      	movs	r1, #0
 8007ddc:	54d1      	strb	r1, [r2, r3]
	  for(iter = 0; iter<100; ++iter){
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	3301      	adds	r3, #1
 8007de2:	73fb      	strb	r3, [r7, #15]
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	2b63      	cmp	r3, #99	; 0x63
 8007de8:	d9f5      	bls.n	8007dd6 <CDC_Receive_FS+0x1e>
	  }

	  strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	461a      	mov	r2, r3
 8007df2:	6879      	ldr	r1, [r7, #4]
 8007df4:	4806      	ldr	r0, [pc, #24]	; (8007e10 <CDC_Receive_FS+0x58>)
 8007df6:	f001 fc90 	bl	800971a <strlcpy>
	  ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8007dfa:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <CDC_Receive_FS+0x5c>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	701a      	strb	r2, [r3, #0]

	  return (USBD_OK);
 8007e00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	200005cc 	.word	0x200005cc
 8007e10:	20000448 	.word	0x20000448
 8007e14:	20000370 	.word	0x20000370

08007e18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007e28:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <CDC_Transmit_FS+0x48>)
 8007e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e00b      	b.n	8007e56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e3e:	887b      	ldrh	r3, [r7, #2]
 8007e40:	461a      	mov	r2, r3
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	4806      	ldr	r0, [pc, #24]	; (8007e60 <CDC_Transmit_FS+0x48>)
 8007e46:	f7fe fd80 	bl	800694a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e4a:	4805      	ldr	r0, [pc, #20]	; (8007e60 <CDC_Transmit_FS+0x48>)
 8007e4c:	f7fe fdaa 	bl	80069a4 <USBD_CDC_TransmitPacket>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200005cc 	.word	0x200005cc

08007e64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2212      	movs	r2, #18
 8007e98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e9a:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	2000014c 	.word	0x2000014c

08007eac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2204      	movs	r2, #4
 8007ebc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ebe:	4b03      	ldr	r3, [pc, #12]	; (8007ecc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	20000160 	.word	0x20000160

08007ed0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	6039      	str	r1, [r7, #0]
 8007eda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d105      	bne.n	8007eee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4907      	ldr	r1, [pc, #28]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ee6:	4808      	ldr	r0, [pc, #32]	; (8007f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ee8:	f7ff fddb 	bl	8007aa2 <USBD_GetString>
 8007eec:	e004      	b.n	8007ef8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	4904      	ldr	r1, [pc, #16]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ef2:	4805      	ldr	r0, [pc, #20]	; (8007f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ef4:	f7ff fdd5 	bl	8007aa2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ef8:	4b02      	ldr	r3, [pc, #8]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000964 	.word	0x20000964
 8007f08:	08010018 	.word	0x08010018

08007f0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	6039      	str	r1, [r7, #0]
 8007f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	4904      	ldr	r1, [pc, #16]	; (8007f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f1c:	4804      	ldr	r0, [pc, #16]	; (8007f30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f1e:	f7ff fdc0 	bl	8007aa2 <USBD_GetString>
  return USBD_StrDesc;
 8007f22:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000964 	.word	0x20000964
 8007f30:	08010030 	.word	0x08010030

08007f34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	221a      	movs	r2, #26
 8007f44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f46:	f000 f843 	bl	8007fd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f4a:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000164 	.word	0x20000164

08007f58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4907      	ldr	r1, [pc, #28]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f6e:	4808      	ldr	r0, [pc, #32]	; (8007f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f70:	f7ff fd97 	bl	8007aa2 <USBD_GetString>
 8007f74:	e004      	b.n	8007f80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4904      	ldr	r1, [pc, #16]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f7a:	4805      	ldr	r0, [pc, #20]	; (8007f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f7c:	f7ff fd91 	bl	8007aa2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f80:	4b02      	ldr	r3, [pc, #8]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000964 	.word	0x20000964
 8007f90:	08010044 	.word	0x08010044

08007f94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d105      	bne.n	8007fb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	4907      	ldr	r1, [pc, #28]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007faa:	4808      	ldr	r0, [pc, #32]	; (8007fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fac:	f7ff fd79 	bl	8007aa2 <USBD_GetString>
 8007fb0:	e004      	b.n	8007fbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	4904      	ldr	r1, [pc, #16]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fb6:	4805      	ldr	r0, [pc, #20]	; (8007fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fb8:	f7ff fd73 	bl	8007aa2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fbc:	4b02      	ldr	r3, [pc, #8]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000964 	.word	0x20000964
 8007fcc:	08010050 	.word	0x08010050

08007fd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <Get_SerialNum+0x44>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <Get_SerialNum+0x48>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	; (800801c <Get_SerialNum+0x4c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	4909      	ldr	r1, [pc, #36]	; (8008020 <Get_SerialNum+0x50>)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f814 	bl	8008028 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008000:	2204      	movs	r2, #4
 8008002:	4908      	ldr	r1, [pc, #32]	; (8008024 <Get_SerialNum+0x54>)
 8008004:	68b8      	ldr	r0, [r7, #8]
 8008006:	f000 f80f 	bl	8008028 <IntToUnicode>
  }
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	1fff7a10 	.word	0x1fff7a10
 8008018:	1fff7a14 	.word	0x1fff7a14
 800801c:	1fff7a18 	.word	0x1fff7a18
 8008020:	20000166 	.word	0x20000166
 8008024:	20000176 	.word	0x20000176

08008028 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
 800803e:	e027      	b.n	8008090 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	0f1b      	lsrs	r3, r3, #28
 8008044:	2b09      	cmp	r3, #9
 8008046:	d80b      	bhi.n	8008060 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	0f1b      	lsrs	r3, r3, #28
 800804c:	b2da      	uxtb	r2, r3
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	4619      	mov	r1, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	440b      	add	r3, r1
 8008058:	3230      	adds	r2, #48	; 0x30
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e00a      	b.n	8008076 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	0f1b      	lsrs	r3, r3, #28
 8008064:	b2da      	uxtb	r2, r3
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	4619      	mov	r1, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	440b      	add	r3, r1
 8008070:	3237      	adds	r2, #55	; 0x37
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	3301      	adds	r3, #1
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	4413      	add	r3, r2
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	3301      	adds	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]
 8008090:	7dfa      	ldrb	r2, [r7, #23]
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	429a      	cmp	r2, r3
 8008096:	d3d3      	bcc.n	8008040 <IntToUnicode+0x18>
  }
}
 8008098:	bf00      	nop
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08a      	sub	sp, #40	; 0x28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080ac:	f107 0314 	add.w	r3, r7, #20
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	609a      	str	r2, [r3, #8]
 80080b8:	60da      	str	r2, [r3, #12]
 80080ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080c4:	d13a      	bne.n	800813c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080c6:	2300      	movs	r3, #0
 80080c8:	613b      	str	r3, [r7, #16]
 80080ca:	4b1e      	ldr	r3, [pc, #120]	; (8008144 <HAL_PCD_MspInit+0xa0>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	4a1d      	ldr	r2, [pc, #116]	; (8008144 <HAL_PCD_MspInit+0xa0>)
 80080d0:	f043 0301 	orr.w	r3, r3, #1
 80080d4:	6313      	str	r3, [r2, #48]	; 0x30
 80080d6:	4b1b      	ldr	r3, [pc, #108]	; (8008144 <HAL_PCD_MspInit+0xa0>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	613b      	str	r3, [r7, #16]
 80080e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80080e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e8:	2302      	movs	r3, #2
 80080ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ec:	2300      	movs	r3, #0
 80080ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080f0:	2303      	movs	r3, #3
 80080f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080f4:	230a      	movs	r3, #10
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080f8:	f107 0314 	add.w	r3, r7, #20
 80080fc:	4619      	mov	r1, r3
 80080fe:	4812      	ldr	r0, [pc, #72]	; (8008148 <HAL_PCD_MspInit+0xa4>)
 8008100:	f7fa f8e0 	bl	80022c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008104:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <HAL_PCD_MspInit+0xa0>)
 8008106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008108:	4a0e      	ldr	r2, [pc, #56]	; (8008144 <HAL_PCD_MspInit+0xa0>)
 800810a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810e:	6353      	str	r3, [r2, #52]	; 0x34
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <HAL_PCD_MspInit+0xa0>)
 8008116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008118:	4a0a      	ldr	r2, [pc, #40]	; (8008144 <HAL_PCD_MspInit+0xa0>)
 800811a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800811e:	6453      	str	r3, [r2, #68]	; 0x44
 8008120:	4b08      	ldr	r3, [pc, #32]	; (8008144 <HAL_PCD_MspInit+0xa0>)
 8008122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800812c:	2200      	movs	r2, #0
 800812e:	2100      	movs	r1, #0
 8008130:	2043      	movs	r0, #67	; 0x43
 8008132:	f7fa f890 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008136:	2043      	movs	r0, #67	; 0x43
 8008138:	f7fa f8a9 	bl	800228e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800813c:	bf00      	nop
 800813e:	3728      	adds	r7, #40	; 0x28
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	40023800 	.word	0x40023800
 8008148:	40020000 	.word	0x40020000

0800814c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008160:	4619      	mov	r1, r3
 8008162:	4610      	mov	r0, r2
 8008164:	f7fe fd1a 	bl	8006b9c <USBD_LL_SetupStage>
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	4613      	mov	r3, r2
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	1a9b      	subs	r3, r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	440b      	add	r3, r1
 8008190:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	78fb      	ldrb	r3, [r7, #3]
 8008198:	4619      	mov	r1, r3
 800819a:	f7fe fd52 	bl	8006c42 <USBD_LL_DataOutStage>
}
 800819e:	bf00      	nop
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	3348      	adds	r3, #72	; 0x48
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	78fb      	ldrb	r3, [r7, #3]
 80081cc:	4619      	mov	r1, r3
 80081ce:	f7fe fd9b 	bl	8006d08 <USBD_LL_DataInStage>
}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fe9f 	bl	8006f2c <USBD_LL_SOF>
}
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081fe:	2301      	movs	r3, #1
 8008200:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	2b02      	cmp	r3, #2
 8008208:	d001      	beq.n	800820e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800820a:	f7f9 fab9 	bl	8001780 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008214:	7bfa      	ldrb	r2, [r7, #15]
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe fe4c 	bl	8006eb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fe05 	bl	8006e34 <USBD_LL_Reset>
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe fe47 	bl	8006ed6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	6812      	ldr	r2, [r2, #0]
 8008256:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d005      	beq.n	8008274 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008268:	4b04      	ldr	r3, [pc, #16]	; (800827c <HAL_PCD_SuspendCallback+0x48>)
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	4a03      	ldr	r2, [pc, #12]	; (800827c <HAL_PCD_SuspendCallback+0x48>)
 800826e:	f043 0306 	orr.w	r3, r3, #6
 8008272:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	e000ed00 	.word	0xe000ed00

08008280 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fe36 	bl	8006f00 <USBD_LL_Resume>
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082ae:	78fa      	ldrb	r2, [r7, #3]
 80082b0:	4611      	mov	r1, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe fe61 	bl	8006f7a <USBD_LL_IsoOUTIncomplete>
}
 80082b8:	bf00      	nop
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082d2:	78fa      	ldrb	r2, [r7, #3]
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fe fe42 	bl	8006f60 <USBD_LL_IsoINIncomplete>
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fe4e 	bl	8006f94 <USBD_LL_DevConnected>
}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fe4b 	bl	8006faa <USBD_LL_DevDisconnected>
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d13c      	bne.n	80083a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800832c:	4a20      	ldr	r2, [pc, #128]	; (80083b0 <USBD_LL_Init+0x94>)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a1e      	ldr	r2, [pc, #120]	; (80083b0 <USBD_LL_Init+0x94>)
 8008338:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800833c:	4b1c      	ldr	r3, [pc, #112]	; (80083b0 <USBD_LL_Init+0x94>)
 800833e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008342:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008344:	4b1a      	ldr	r3, [pc, #104]	; (80083b0 <USBD_LL_Init+0x94>)
 8008346:	2204      	movs	r2, #4
 8008348:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800834a:	4b19      	ldr	r3, [pc, #100]	; (80083b0 <USBD_LL_Init+0x94>)
 800834c:	2202      	movs	r2, #2
 800834e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008350:	4b17      	ldr	r3, [pc, #92]	; (80083b0 <USBD_LL_Init+0x94>)
 8008352:	2200      	movs	r2, #0
 8008354:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008356:	4b16      	ldr	r3, [pc, #88]	; (80083b0 <USBD_LL_Init+0x94>)
 8008358:	2202      	movs	r2, #2
 800835a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800835c:	4b14      	ldr	r3, [pc, #80]	; (80083b0 <USBD_LL_Init+0x94>)
 800835e:	2200      	movs	r2, #0
 8008360:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008362:	4b13      	ldr	r3, [pc, #76]	; (80083b0 <USBD_LL_Init+0x94>)
 8008364:	2200      	movs	r2, #0
 8008366:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008368:	4b11      	ldr	r3, [pc, #68]	; (80083b0 <USBD_LL_Init+0x94>)
 800836a:	2200      	movs	r2, #0
 800836c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800836e:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <USBD_LL_Init+0x94>)
 8008370:	2200      	movs	r2, #0
 8008372:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008374:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <USBD_LL_Init+0x94>)
 8008376:	2200      	movs	r2, #0
 8008378:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800837a:	480d      	ldr	r0, [pc, #52]	; (80083b0 <USBD_LL_Init+0x94>)
 800837c:	f7fa f93d 	bl	80025fa <HAL_PCD_Init>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008386:	f7f9 f9fb 	bl	8001780 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800838a:	2180      	movs	r1, #128	; 0x80
 800838c:	4808      	ldr	r0, [pc, #32]	; (80083b0 <USBD_LL_Init+0x94>)
 800838e:	f7fb fa9a 	bl	80038c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008392:	2240      	movs	r2, #64	; 0x40
 8008394:	2100      	movs	r1, #0
 8008396:	4806      	ldr	r0, [pc, #24]	; (80083b0 <USBD_LL_Init+0x94>)
 8008398:	f7fb fa4e 	bl	8003838 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800839c:	2280      	movs	r2, #128	; 0x80
 800839e:	2101      	movs	r1, #1
 80083a0:	4803      	ldr	r0, [pc, #12]	; (80083b0 <USBD_LL_Init+0x94>)
 80083a2:	f7fb fa49 	bl	8003838 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20000b64 	.word	0x20000b64

080083b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fa fa32 	bl	8002834 <HAL_PCD_Start>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 f92a 	bl	8008630 <USBD_Get_USB_Status>
 80083dc:	4603      	mov	r3, r0
 80083de:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	4608      	mov	r0, r1
 80083f4:	4611      	mov	r1, r2
 80083f6:	461a      	mov	r2, r3
 80083f8:	4603      	mov	r3, r0
 80083fa:	70fb      	strb	r3, [r7, #3]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70bb      	strb	r3, [r7, #2]
 8008400:	4613      	mov	r3, r2
 8008402:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008412:	78bb      	ldrb	r3, [r7, #2]
 8008414:	883a      	ldrh	r2, [r7, #0]
 8008416:	78f9      	ldrb	r1, [r7, #3]
 8008418:	f7fa fe16 	bl	8003048 <HAL_PCD_EP_Open>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 f904 	bl	8008630 <USBD_Get_USB_Status>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800842c:	7bbb      	ldrb	r3, [r7, #14]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008450:	78fa      	ldrb	r2, [r7, #3]
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f7fa fe5f 	bl	8003118 <HAL_PCD_EP_Close>
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 f8e5 	bl	8008630 <USBD_Get_USB_Status>
 8008466:	4603      	mov	r3, r0
 8008468:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800846a:	7bbb      	ldrb	r3, [r7, #14]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	4611      	mov	r1, r2
 8008492:	4618      	mov	r0, r3
 8008494:	f7fa ff37 	bl	8003306 <HAL_PCD_EP_SetStall>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f8c6 	bl	8008630 <USBD_Get_USB_Status>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084cc:	78fa      	ldrb	r2, [r7, #3]
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fa ff7c 	bl	80033ce <HAL_PCD_EP_ClrStall>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 f8a7 	bl	8008630 <USBD_Get_USB_Status>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008502:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008508:	2b00      	cmp	r3, #0
 800850a:	da0b      	bge.n	8008524 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	4613      	mov	r3, r2
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	333e      	adds	r3, #62	; 0x3e
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	e00b      	b.n	800853c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	4613      	mov	r3, r2
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	440b      	add	r3, r1
 8008536:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800853a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008562:	78fa      	ldrb	r2, [r7, #3]
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f7fa fd49 	bl	8002ffe <HAL_PCD_SetAddress>
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f85c 	bl	8008630 <USBD_Get_USB_Status>
 8008578:	4603      	mov	r3, r0
 800857a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800857c:	7bbb      	ldrb	r3, [r7, #14]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b086      	sub	sp, #24
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	603b      	str	r3, [r7, #0]
 8008592:	460b      	mov	r3, r1
 8008594:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085a4:	7af9      	ldrb	r1, [r7, #11]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	f7fa fe62 	bl	8003272 <HAL_PCD_EP_Transmit>
 80085ae:	4603      	mov	r3, r0
 80085b0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 f83b 	bl	8008630 <USBD_Get_USB_Status>
 80085ba:	4603      	mov	r3, r0
 80085bc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80085be:	7dbb      	ldrb	r3, [r7, #22]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	607a      	str	r2, [r7, #4]
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	460b      	mov	r3, r1
 80085d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085e6:	7af9      	ldrb	r1, [r7, #11]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	f7fa fdde 	bl	80031ac <HAL_PCD_EP_Receive>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f81a 	bl	8008630 <USBD_Get_USB_Status>
 80085fc:	4603      	mov	r3, r0
 80085fe:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008600:	7dbb      	ldrb	r3, [r7, #22]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800861c:	78fa      	ldrb	r2, [r7, #3]
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f7fa fe0e 	bl	8003242 <HAL_PCD_EP_GetRxCount>
 8008626:	4603      	mov	r3, r0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	2b03      	cmp	r3, #3
 8008642:	d817      	bhi.n	8008674 <USBD_Get_USB_Status+0x44>
 8008644:	a201      	add	r2, pc, #4	; (adr r2, 800864c <USBD_Get_USB_Status+0x1c>)
 8008646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864a:	bf00      	nop
 800864c:	0800865d 	.word	0x0800865d
 8008650:	08008663 	.word	0x08008663
 8008654:	08008669 	.word	0x08008669
 8008658:	0800866f 	.word	0x0800866f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
    break;
 8008660:	e00b      	b.n	800867a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008662:	2303      	movs	r3, #3
 8008664:	73fb      	strb	r3, [r7, #15]
    break;
 8008666:	e008      	b.n	800867a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008668:	2301      	movs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
    break;
 800866c:	e005      	b.n	800867a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800866e:	2303      	movs	r3, #3
 8008670:	73fb      	strb	r3, [r7, #15]
    break;
 8008672:	e002      	b.n	800867a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008674:	2303      	movs	r3, #3
 8008676:	73fb      	strb	r3, [r7, #15]
    break;
 8008678:	bf00      	nop
  }
  return usb_status;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <__errno>:
 8008688:	4b01      	ldr	r3, [pc, #4]	; (8008690 <__errno+0x8>)
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20000180 	.word	0x20000180

08008694 <__libc_init_array>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	4e0d      	ldr	r6, [pc, #52]	; (80086cc <__libc_init_array+0x38>)
 8008698:	4c0d      	ldr	r4, [pc, #52]	; (80086d0 <__libc_init_array+0x3c>)
 800869a:	1ba4      	subs	r4, r4, r6
 800869c:	10a4      	asrs	r4, r4, #2
 800869e:	2500      	movs	r5, #0
 80086a0:	42a5      	cmp	r5, r4
 80086a2:	d109      	bne.n	80086b8 <__libc_init_array+0x24>
 80086a4:	4e0b      	ldr	r6, [pc, #44]	; (80086d4 <__libc_init_array+0x40>)
 80086a6:	4c0c      	ldr	r4, [pc, #48]	; (80086d8 <__libc_init_array+0x44>)
 80086a8:	f007 fc60 	bl	800ff6c <_init>
 80086ac:	1ba4      	subs	r4, r4, r6
 80086ae:	10a4      	asrs	r4, r4, #2
 80086b0:	2500      	movs	r5, #0
 80086b2:	42a5      	cmp	r5, r4
 80086b4:	d105      	bne.n	80086c2 <__libc_init_array+0x2e>
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086bc:	4798      	blx	r3
 80086be:	3501      	adds	r5, #1
 80086c0:	e7ee      	b.n	80086a0 <__libc_init_array+0xc>
 80086c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086c6:	4798      	blx	r3
 80086c8:	3501      	adds	r5, #1
 80086ca:	e7f2      	b.n	80086b2 <__libc_init_array+0x1e>
 80086cc:	08010620 	.word	0x08010620
 80086d0:	08010620 	.word	0x08010620
 80086d4:	08010620 	.word	0x08010620
 80086d8:	08010624 	.word	0x08010624

080086dc <malloc>:
 80086dc:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <malloc+0xc>)
 80086de:	4601      	mov	r1, r0
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	f000 b861 	b.w	80087a8 <_malloc_r>
 80086e6:	bf00      	nop
 80086e8:	20000180 	.word	0x20000180

080086ec <free>:
 80086ec:	4b02      	ldr	r3, [pc, #8]	; (80086f8 <free+0xc>)
 80086ee:	4601      	mov	r1, r0
 80086f0:	6818      	ldr	r0, [r3, #0]
 80086f2:	f000 b80b 	b.w	800870c <_free_r>
 80086f6:	bf00      	nop
 80086f8:	20000180 	.word	0x20000180

080086fc <memset>:
 80086fc:	4402      	add	r2, r0
 80086fe:	4603      	mov	r3, r0
 8008700:	4293      	cmp	r3, r2
 8008702:	d100      	bne.n	8008706 <memset+0xa>
 8008704:	4770      	bx	lr
 8008706:	f803 1b01 	strb.w	r1, [r3], #1
 800870a:	e7f9      	b.n	8008700 <memset+0x4>

0800870c <_free_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4605      	mov	r5, r0
 8008710:	2900      	cmp	r1, #0
 8008712:	d045      	beq.n	80087a0 <_free_r+0x94>
 8008714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008718:	1f0c      	subs	r4, r1, #4
 800871a:	2b00      	cmp	r3, #0
 800871c:	bfb8      	it	lt
 800871e:	18e4      	addlt	r4, r4, r3
 8008720:	f003 fb3b 	bl	800bd9a <__malloc_lock>
 8008724:	4a1f      	ldr	r2, [pc, #124]	; (80087a4 <_free_r+0x98>)
 8008726:	6813      	ldr	r3, [r2, #0]
 8008728:	4610      	mov	r0, r2
 800872a:	b933      	cbnz	r3, 800873a <_free_r+0x2e>
 800872c:	6063      	str	r3, [r4, #4]
 800872e:	6014      	str	r4, [r2, #0]
 8008730:	4628      	mov	r0, r5
 8008732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008736:	f003 bb31 	b.w	800bd9c <__malloc_unlock>
 800873a:	42a3      	cmp	r3, r4
 800873c:	d90c      	bls.n	8008758 <_free_r+0x4c>
 800873e:	6821      	ldr	r1, [r4, #0]
 8008740:	1862      	adds	r2, r4, r1
 8008742:	4293      	cmp	r3, r2
 8008744:	bf04      	itt	eq
 8008746:	681a      	ldreq	r2, [r3, #0]
 8008748:	685b      	ldreq	r3, [r3, #4]
 800874a:	6063      	str	r3, [r4, #4]
 800874c:	bf04      	itt	eq
 800874e:	1852      	addeq	r2, r2, r1
 8008750:	6022      	streq	r2, [r4, #0]
 8008752:	6004      	str	r4, [r0, #0]
 8008754:	e7ec      	b.n	8008730 <_free_r+0x24>
 8008756:	4613      	mov	r3, r2
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	b10a      	cbz	r2, 8008760 <_free_r+0x54>
 800875c:	42a2      	cmp	r2, r4
 800875e:	d9fa      	bls.n	8008756 <_free_r+0x4a>
 8008760:	6819      	ldr	r1, [r3, #0]
 8008762:	1858      	adds	r0, r3, r1
 8008764:	42a0      	cmp	r0, r4
 8008766:	d10b      	bne.n	8008780 <_free_r+0x74>
 8008768:	6820      	ldr	r0, [r4, #0]
 800876a:	4401      	add	r1, r0
 800876c:	1858      	adds	r0, r3, r1
 800876e:	4282      	cmp	r2, r0
 8008770:	6019      	str	r1, [r3, #0]
 8008772:	d1dd      	bne.n	8008730 <_free_r+0x24>
 8008774:	6810      	ldr	r0, [r2, #0]
 8008776:	6852      	ldr	r2, [r2, #4]
 8008778:	605a      	str	r2, [r3, #4]
 800877a:	4401      	add	r1, r0
 800877c:	6019      	str	r1, [r3, #0]
 800877e:	e7d7      	b.n	8008730 <_free_r+0x24>
 8008780:	d902      	bls.n	8008788 <_free_r+0x7c>
 8008782:	230c      	movs	r3, #12
 8008784:	602b      	str	r3, [r5, #0]
 8008786:	e7d3      	b.n	8008730 <_free_r+0x24>
 8008788:	6820      	ldr	r0, [r4, #0]
 800878a:	1821      	adds	r1, r4, r0
 800878c:	428a      	cmp	r2, r1
 800878e:	bf04      	itt	eq
 8008790:	6811      	ldreq	r1, [r2, #0]
 8008792:	6852      	ldreq	r2, [r2, #4]
 8008794:	6062      	str	r2, [r4, #4]
 8008796:	bf04      	itt	eq
 8008798:	1809      	addeq	r1, r1, r0
 800879a:	6021      	streq	r1, [r4, #0]
 800879c:	605c      	str	r4, [r3, #4]
 800879e:	e7c7      	b.n	8008730 <_free_r+0x24>
 80087a0:	bd38      	pop	{r3, r4, r5, pc}
 80087a2:	bf00      	nop
 80087a4:	2000037c 	.word	0x2000037c

080087a8 <_malloc_r>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	1ccd      	adds	r5, r1, #3
 80087ac:	f025 0503 	bic.w	r5, r5, #3
 80087b0:	3508      	adds	r5, #8
 80087b2:	2d0c      	cmp	r5, #12
 80087b4:	bf38      	it	cc
 80087b6:	250c      	movcc	r5, #12
 80087b8:	2d00      	cmp	r5, #0
 80087ba:	4606      	mov	r6, r0
 80087bc:	db01      	blt.n	80087c2 <_malloc_r+0x1a>
 80087be:	42a9      	cmp	r1, r5
 80087c0:	d903      	bls.n	80087ca <_malloc_r+0x22>
 80087c2:	230c      	movs	r3, #12
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	2000      	movs	r0, #0
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
 80087ca:	f003 fae6 	bl	800bd9a <__malloc_lock>
 80087ce:	4a21      	ldr	r2, [pc, #132]	; (8008854 <_malloc_r+0xac>)
 80087d0:	6814      	ldr	r4, [r2, #0]
 80087d2:	4621      	mov	r1, r4
 80087d4:	b991      	cbnz	r1, 80087fc <_malloc_r+0x54>
 80087d6:	4c20      	ldr	r4, [pc, #128]	; (8008858 <_malloc_r+0xb0>)
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	b91b      	cbnz	r3, 80087e4 <_malloc_r+0x3c>
 80087dc:	4630      	mov	r0, r6
 80087de:	f000 fef7 	bl	80095d0 <_sbrk_r>
 80087e2:	6020      	str	r0, [r4, #0]
 80087e4:	4629      	mov	r1, r5
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 fef2 	bl	80095d0 <_sbrk_r>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d124      	bne.n	800883a <_malloc_r+0x92>
 80087f0:	230c      	movs	r3, #12
 80087f2:	6033      	str	r3, [r6, #0]
 80087f4:	4630      	mov	r0, r6
 80087f6:	f003 fad1 	bl	800bd9c <__malloc_unlock>
 80087fa:	e7e4      	b.n	80087c6 <_malloc_r+0x1e>
 80087fc:	680b      	ldr	r3, [r1, #0]
 80087fe:	1b5b      	subs	r3, r3, r5
 8008800:	d418      	bmi.n	8008834 <_malloc_r+0x8c>
 8008802:	2b0b      	cmp	r3, #11
 8008804:	d90f      	bls.n	8008826 <_malloc_r+0x7e>
 8008806:	600b      	str	r3, [r1, #0]
 8008808:	50cd      	str	r5, [r1, r3]
 800880a:	18cc      	adds	r4, r1, r3
 800880c:	4630      	mov	r0, r6
 800880e:	f003 fac5 	bl	800bd9c <__malloc_unlock>
 8008812:	f104 000b 	add.w	r0, r4, #11
 8008816:	1d23      	adds	r3, r4, #4
 8008818:	f020 0007 	bic.w	r0, r0, #7
 800881c:	1ac3      	subs	r3, r0, r3
 800881e:	d0d3      	beq.n	80087c8 <_malloc_r+0x20>
 8008820:	425a      	negs	r2, r3
 8008822:	50e2      	str	r2, [r4, r3]
 8008824:	e7d0      	b.n	80087c8 <_malloc_r+0x20>
 8008826:	428c      	cmp	r4, r1
 8008828:	684b      	ldr	r3, [r1, #4]
 800882a:	bf16      	itet	ne
 800882c:	6063      	strne	r3, [r4, #4]
 800882e:	6013      	streq	r3, [r2, #0]
 8008830:	460c      	movne	r4, r1
 8008832:	e7eb      	b.n	800880c <_malloc_r+0x64>
 8008834:	460c      	mov	r4, r1
 8008836:	6849      	ldr	r1, [r1, #4]
 8008838:	e7cc      	b.n	80087d4 <_malloc_r+0x2c>
 800883a:	1cc4      	adds	r4, r0, #3
 800883c:	f024 0403 	bic.w	r4, r4, #3
 8008840:	42a0      	cmp	r0, r4
 8008842:	d005      	beq.n	8008850 <_malloc_r+0xa8>
 8008844:	1a21      	subs	r1, r4, r0
 8008846:	4630      	mov	r0, r6
 8008848:	f000 fec2 	bl	80095d0 <_sbrk_r>
 800884c:	3001      	adds	r0, #1
 800884e:	d0cf      	beq.n	80087f0 <_malloc_r+0x48>
 8008850:	6025      	str	r5, [r4, #0]
 8008852:	e7db      	b.n	800880c <_malloc_r+0x64>
 8008854:	2000037c 	.word	0x2000037c
 8008858:	20000380 	.word	0x20000380

0800885c <__cvt>:
 800885c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008860:	ec55 4b10 	vmov	r4, r5, d0
 8008864:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008866:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800886a:	2d00      	cmp	r5, #0
 800886c:	460e      	mov	r6, r1
 800886e:	4691      	mov	r9, r2
 8008870:	4619      	mov	r1, r3
 8008872:	bfb8      	it	lt
 8008874:	4622      	movlt	r2, r4
 8008876:	462b      	mov	r3, r5
 8008878:	f027 0720 	bic.w	r7, r7, #32
 800887c:	bfbb      	ittet	lt
 800887e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008882:	461d      	movlt	r5, r3
 8008884:	2300      	movge	r3, #0
 8008886:	232d      	movlt	r3, #45	; 0x2d
 8008888:	bfb8      	it	lt
 800888a:	4614      	movlt	r4, r2
 800888c:	2f46      	cmp	r7, #70	; 0x46
 800888e:	700b      	strb	r3, [r1, #0]
 8008890:	d004      	beq.n	800889c <__cvt+0x40>
 8008892:	2f45      	cmp	r7, #69	; 0x45
 8008894:	d100      	bne.n	8008898 <__cvt+0x3c>
 8008896:	3601      	adds	r6, #1
 8008898:	2102      	movs	r1, #2
 800889a:	e000      	b.n	800889e <__cvt+0x42>
 800889c:	2103      	movs	r1, #3
 800889e:	ab03      	add	r3, sp, #12
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	ab02      	add	r3, sp, #8
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	4632      	mov	r2, r6
 80088a8:	4653      	mov	r3, sl
 80088aa:	ec45 4b10 	vmov	d0, r4, r5
 80088ae:	f001 ff67 	bl	800a780 <_dtoa_r>
 80088b2:	2f47      	cmp	r7, #71	; 0x47
 80088b4:	4680      	mov	r8, r0
 80088b6:	d102      	bne.n	80088be <__cvt+0x62>
 80088b8:	f019 0f01 	tst.w	r9, #1
 80088bc:	d026      	beq.n	800890c <__cvt+0xb0>
 80088be:	2f46      	cmp	r7, #70	; 0x46
 80088c0:	eb08 0906 	add.w	r9, r8, r6
 80088c4:	d111      	bne.n	80088ea <__cvt+0x8e>
 80088c6:	f898 3000 	ldrb.w	r3, [r8]
 80088ca:	2b30      	cmp	r3, #48	; 0x30
 80088cc:	d10a      	bne.n	80088e4 <__cvt+0x88>
 80088ce:	2200      	movs	r2, #0
 80088d0:	2300      	movs	r3, #0
 80088d2:	4620      	mov	r0, r4
 80088d4:	4629      	mov	r1, r5
 80088d6:	f7f8 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80088da:	b918      	cbnz	r0, 80088e4 <__cvt+0x88>
 80088dc:	f1c6 0601 	rsb	r6, r6, #1
 80088e0:	f8ca 6000 	str.w	r6, [sl]
 80088e4:	f8da 3000 	ldr.w	r3, [sl]
 80088e8:	4499      	add	r9, r3
 80088ea:	2200      	movs	r2, #0
 80088ec:	2300      	movs	r3, #0
 80088ee:	4620      	mov	r0, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	f7f8 f8f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80088f6:	b938      	cbnz	r0, 8008908 <__cvt+0xac>
 80088f8:	2230      	movs	r2, #48	; 0x30
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	454b      	cmp	r3, r9
 80088fe:	d205      	bcs.n	800890c <__cvt+0xb0>
 8008900:	1c59      	adds	r1, r3, #1
 8008902:	9103      	str	r1, [sp, #12]
 8008904:	701a      	strb	r2, [r3, #0]
 8008906:	e7f8      	b.n	80088fa <__cvt+0x9e>
 8008908:	f8cd 900c 	str.w	r9, [sp, #12]
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008910:	eba3 0308 	sub.w	r3, r3, r8
 8008914:	4640      	mov	r0, r8
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	b004      	add	sp, #16
 800891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800891e <__exponent>:
 800891e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008920:	2900      	cmp	r1, #0
 8008922:	4604      	mov	r4, r0
 8008924:	bfba      	itte	lt
 8008926:	4249      	neglt	r1, r1
 8008928:	232d      	movlt	r3, #45	; 0x2d
 800892a:	232b      	movge	r3, #43	; 0x2b
 800892c:	2909      	cmp	r1, #9
 800892e:	f804 2b02 	strb.w	r2, [r4], #2
 8008932:	7043      	strb	r3, [r0, #1]
 8008934:	dd20      	ble.n	8008978 <__exponent+0x5a>
 8008936:	f10d 0307 	add.w	r3, sp, #7
 800893a:	461f      	mov	r7, r3
 800893c:	260a      	movs	r6, #10
 800893e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008942:	fb06 1115 	mls	r1, r6, r5, r1
 8008946:	3130      	adds	r1, #48	; 0x30
 8008948:	2d09      	cmp	r5, #9
 800894a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800894e:	f103 32ff 	add.w	r2, r3, #4294967295
 8008952:	4629      	mov	r1, r5
 8008954:	dc09      	bgt.n	800896a <__exponent+0x4c>
 8008956:	3130      	adds	r1, #48	; 0x30
 8008958:	3b02      	subs	r3, #2
 800895a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800895e:	42bb      	cmp	r3, r7
 8008960:	4622      	mov	r2, r4
 8008962:	d304      	bcc.n	800896e <__exponent+0x50>
 8008964:	1a10      	subs	r0, r2, r0
 8008966:	b003      	add	sp, #12
 8008968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800896a:	4613      	mov	r3, r2
 800896c:	e7e7      	b.n	800893e <__exponent+0x20>
 800896e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008972:	f804 2b01 	strb.w	r2, [r4], #1
 8008976:	e7f2      	b.n	800895e <__exponent+0x40>
 8008978:	2330      	movs	r3, #48	; 0x30
 800897a:	4419      	add	r1, r3
 800897c:	7083      	strb	r3, [r0, #2]
 800897e:	1d02      	adds	r2, r0, #4
 8008980:	70c1      	strb	r1, [r0, #3]
 8008982:	e7ef      	b.n	8008964 <__exponent+0x46>

08008984 <_printf_float>:
 8008984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	b08d      	sub	sp, #52	; 0x34
 800898a:	460c      	mov	r4, r1
 800898c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008990:	4616      	mov	r6, r2
 8008992:	461f      	mov	r7, r3
 8008994:	4605      	mov	r5, r0
 8008996:	f003 f95f 	bl	800bc58 <_localeconv_r>
 800899a:	6803      	ldr	r3, [r0, #0]
 800899c:	9304      	str	r3, [sp, #16]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7f7 fc1e 	bl	80001e0 <strlen>
 80089a4:	2300      	movs	r3, #0
 80089a6:	930a      	str	r3, [sp, #40]	; 0x28
 80089a8:	f8d8 3000 	ldr.w	r3, [r8]
 80089ac:	9005      	str	r0, [sp, #20]
 80089ae:	3307      	adds	r3, #7
 80089b0:	f023 0307 	bic.w	r3, r3, #7
 80089b4:	f103 0208 	add.w	r2, r3, #8
 80089b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089bc:	f8d4 b000 	ldr.w	fp, [r4]
 80089c0:	f8c8 2000 	str.w	r2, [r8]
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80089cc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80089d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089d4:	9307      	str	r3, [sp, #28]
 80089d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80089da:	f04f 32ff 	mov.w	r2, #4294967295
 80089de:	4ba7      	ldr	r3, [pc, #668]	; (8008c7c <_printf_float+0x2f8>)
 80089e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089e4:	f7f8 f8aa 	bl	8000b3c <__aeabi_dcmpun>
 80089e8:	bb70      	cbnz	r0, 8008a48 <_printf_float+0xc4>
 80089ea:	f04f 32ff 	mov.w	r2, #4294967295
 80089ee:	4ba3      	ldr	r3, [pc, #652]	; (8008c7c <_printf_float+0x2f8>)
 80089f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089f4:	f7f8 f884 	bl	8000b00 <__aeabi_dcmple>
 80089f8:	bb30      	cbnz	r0, 8008a48 <_printf_float+0xc4>
 80089fa:	2200      	movs	r2, #0
 80089fc:	2300      	movs	r3, #0
 80089fe:	4640      	mov	r0, r8
 8008a00:	4649      	mov	r1, r9
 8008a02:	f7f8 f873 	bl	8000aec <__aeabi_dcmplt>
 8008a06:	b110      	cbz	r0, 8008a0e <_printf_float+0x8a>
 8008a08:	232d      	movs	r3, #45	; 0x2d
 8008a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a0e:	4a9c      	ldr	r2, [pc, #624]	; (8008c80 <_printf_float+0x2fc>)
 8008a10:	4b9c      	ldr	r3, [pc, #624]	; (8008c84 <_printf_float+0x300>)
 8008a12:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008a16:	bf8c      	ite	hi
 8008a18:	4690      	movhi	r8, r2
 8008a1a:	4698      	movls	r8, r3
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	f02b 0204 	bic.w	r2, fp, #4
 8008a22:	6123      	str	r3, [r4, #16]
 8008a24:	6022      	str	r2, [r4, #0]
 8008a26:	f04f 0900 	mov.w	r9, #0
 8008a2a:	9700      	str	r7, [sp, #0]
 8008a2c:	4633      	mov	r3, r6
 8008a2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a30:	4621      	mov	r1, r4
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 f9e6 	bl	8008e04 <_printf_common>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	f040 808d 	bne.w	8008b58 <_printf_float+0x1d4>
 8008a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a42:	b00d      	add	sp, #52	; 0x34
 8008a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a48:	4642      	mov	r2, r8
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	4649      	mov	r1, r9
 8008a50:	f7f8 f874 	bl	8000b3c <__aeabi_dcmpun>
 8008a54:	b110      	cbz	r0, 8008a5c <_printf_float+0xd8>
 8008a56:	4a8c      	ldr	r2, [pc, #560]	; (8008c88 <_printf_float+0x304>)
 8008a58:	4b8c      	ldr	r3, [pc, #560]	; (8008c8c <_printf_float+0x308>)
 8008a5a:	e7da      	b.n	8008a12 <_printf_float+0x8e>
 8008a5c:	6861      	ldr	r1, [r4, #4]
 8008a5e:	1c4b      	adds	r3, r1, #1
 8008a60:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008a64:	a80a      	add	r0, sp, #40	; 0x28
 8008a66:	d13e      	bne.n	8008ae6 <_printf_float+0x162>
 8008a68:	2306      	movs	r3, #6
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008a72:	ab09      	add	r3, sp, #36	; 0x24
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	ec49 8b10 	vmov	d0, r8, r9
 8008a7a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	f8cd a004 	str.w	sl, [sp, #4]
 8008a84:	6861      	ldr	r1, [r4, #4]
 8008a86:	4628      	mov	r0, r5
 8008a88:	f7ff fee8 	bl	800885c <__cvt>
 8008a8c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008a90:	2b47      	cmp	r3, #71	; 0x47
 8008a92:	4680      	mov	r8, r0
 8008a94:	d109      	bne.n	8008aaa <_printf_float+0x126>
 8008a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a98:	1cd8      	adds	r0, r3, #3
 8008a9a:	db02      	blt.n	8008aa2 <_printf_float+0x11e>
 8008a9c:	6862      	ldr	r2, [r4, #4]
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	dd47      	ble.n	8008b32 <_printf_float+0x1ae>
 8008aa2:	f1aa 0a02 	sub.w	sl, sl, #2
 8008aa6:	fa5f fa8a 	uxtb.w	sl, sl
 8008aaa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008aae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ab0:	d824      	bhi.n	8008afc <_printf_float+0x178>
 8008ab2:	3901      	subs	r1, #1
 8008ab4:	4652      	mov	r2, sl
 8008ab6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008aba:	9109      	str	r1, [sp, #36]	; 0x24
 8008abc:	f7ff ff2f 	bl	800891e <__exponent>
 8008ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ac2:	1813      	adds	r3, r2, r0
 8008ac4:	2a01      	cmp	r2, #1
 8008ac6:	4681      	mov	r9, r0
 8008ac8:	6123      	str	r3, [r4, #16]
 8008aca:	dc02      	bgt.n	8008ad2 <_printf_float+0x14e>
 8008acc:	6822      	ldr	r2, [r4, #0]
 8008ace:	07d1      	lsls	r1, r2, #31
 8008ad0:	d501      	bpl.n	8008ad6 <_printf_float+0x152>
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	6123      	str	r3, [r4, #16]
 8008ad6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0a5      	beq.n	8008a2a <_printf_float+0xa6>
 8008ade:	232d      	movs	r3, #45	; 0x2d
 8008ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ae4:	e7a1      	b.n	8008a2a <_printf_float+0xa6>
 8008ae6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008aea:	f000 8177 	beq.w	8008ddc <_printf_float+0x458>
 8008aee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008af2:	d1bb      	bne.n	8008a6c <_printf_float+0xe8>
 8008af4:	2900      	cmp	r1, #0
 8008af6:	d1b9      	bne.n	8008a6c <_printf_float+0xe8>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e7b6      	b.n	8008a6a <_printf_float+0xe6>
 8008afc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008b00:	d119      	bne.n	8008b36 <_printf_float+0x1b2>
 8008b02:	2900      	cmp	r1, #0
 8008b04:	6863      	ldr	r3, [r4, #4]
 8008b06:	dd0c      	ble.n	8008b22 <_printf_float+0x19e>
 8008b08:	6121      	str	r1, [r4, #16]
 8008b0a:	b913      	cbnz	r3, 8008b12 <_printf_float+0x18e>
 8008b0c:	6822      	ldr	r2, [r4, #0]
 8008b0e:	07d2      	lsls	r2, r2, #31
 8008b10:	d502      	bpl.n	8008b18 <_printf_float+0x194>
 8008b12:	3301      	adds	r3, #1
 8008b14:	440b      	add	r3, r1
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1a:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b1c:	f04f 0900 	mov.w	r9, #0
 8008b20:	e7d9      	b.n	8008ad6 <_printf_float+0x152>
 8008b22:	b913      	cbnz	r3, 8008b2a <_printf_float+0x1a6>
 8008b24:	6822      	ldr	r2, [r4, #0]
 8008b26:	07d0      	lsls	r0, r2, #31
 8008b28:	d501      	bpl.n	8008b2e <_printf_float+0x1aa>
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	e7f3      	b.n	8008b16 <_printf_float+0x192>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e7f1      	b.n	8008b16 <_printf_float+0x192>
 8008b32:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008b36:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	db05      	blt.n	8008b4a <_printf_float+0x1c6>
 8008b3e:	6822      	ldr	r2, [r4, #0]
 8008b40:	6123      	str	r3, [r4, #16]
 8008b42:	07d1      	lsls	r1, r2, #31
 8008b44:	d5e8      	bpl.n	8008b18 <_printf_float+0x194>
 8008b46:	3301      	adds	r3, #1
 8008b48:	e7e5      	b.n	8008b16 <_printf_float+0x192>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	bfd4      	ite	le
 8008b4e:	f1c3 0302 	rsble	r3, r3, #2
 8008b52:	2301      	movgt	r3, #1
 8008b54:	4413      	add	r3, r2
 8008b56:	e7de      	b.n	8008b16 <_printf_float+0x192>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	055a      	lsls	r2, r3, #21
 8008b5c:	d407      	bmi.n	8008b6e <_printf_float+0x1ea>
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	4642      	mov	r2, r8
 8008b62:	4631      	mov	r1, r6
 8008b64:	4628      	mov	r0, r5
 8008b66:	47b8      	blx	r7
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d12b      	bne.n	8008bc4 <_printf_float+0x240>
 8008b6c:	e767      	b.n	8008a3e <_printf_float+0xba>
 8008b6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008b72:	f240 80dc 	bls.w	8008d2e <_printf_float+0x3aa>
 8008b76:	2200      	movs	r2, #0
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b7e:	f7f7 ffab 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d033      	beq.n	8008bee <_printf_float+0x26a>
 8008b86:	2301      	movs	r3, #1
 8008b88:	4a41      	ldr	r2, [pc, #260]	; (8008c90 <_printf_float+0x30c>)
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b8      	blx	r7
 8008b90:	3001      	adds	r0, #1
 8008b92:	f43f af54 	beq.w	8008a3e <_printf_float+0xba>
 8008b96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	db02      	blt.n	8008ba4 <_printf_float+0x220>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	07d8      	lsls	r0, r3, #31
 8008ba2:	d50f      	bpl.n	8008bc4 <_printf_float+0x240>
 8008ba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	f43f af45 	beq.w	8008a3e <_printf_float+0xba>
 8008bb4:	f04f 0800 	mov.w	r8, #0
 8008bb8:	f104 091a 	add.w	r9, r4, #26
 8008bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	4543      	cmp	r3, r8
 8008bc2:	dc09      	bgt.n	8008bd8 <_printf_float+0x254>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	079b      	lsls	r3, r3, #30
 8008bc8:	f100 8103 	bmi.w	8008dd2 <_printf_float+0x44e>
 8008bcc:	68e0      	ldr	r0, [r4, #12]
 8008bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd0:	4298      	cmp	r0, r3
 8008bd2:	bfb8      	it	lt
 8008bd4:	4618      	movlt	r0, r3
 8008bd6:	e734      	b.n	8008a42 <_printf_float+0xbe>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	464a      	mov	r2, r9
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f af2b 	beq.w	8008a3e <_printf_float+0xba>
 8008be8:	f108 0801 	add.w	r8, r8, #1
 8008bec:	e7e6      	b.n	8008bbc <_printf_float+0x238>
 8008bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dc2b      	bgt.n	8008c4c <_printf_float+0x2c8>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4a26      	ldr	r2, [pc, #152]	; (8008c90 <_printf_float+0x30c>)
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f af1d 	beq.w	8008a3e <_printf_float+0xba>
 8008c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c06:	b923      	cbnz	r3, 8008c12 <_printf_float+0x28e>
 8008c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c0a:	b913      	cbnz	r3, 8008c12 <_printf_float+0x28e>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	07d9      	lsls	r1, r3, #31
 8008c10:	d5d8      	bpl.n	8008bc4 <_printf_float+0x240>
 8008c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c16:	4631      	mov	r1, r6
 8008c18:	4628      	mov	r0, r5
 8008c1a:	47b8      	blx	r7
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	f43f af0e 	beq.w	8008a3e <_printf_float+0xba>
 8008c22:	f04f 0900 	mov.w	r9, #0
 8008c26:	f104 0a1a 	add.w	sl, r4, #26
 8008c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c2c:	425b      	negs	r3, r3
 8008c2e:	454b      	cmp	r3, r9
 8008c30:	dc01      	bgt.n	8008c36 <_printf_float+0x2b2>
 8008c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c34:	e794      	b.n	8008b60 <_printf_float+0x1dc>
 8008c36:	2301      	movs	r3, #1
 8008c38:	4652      	mov	r2, sl
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	47b8      	blx	r7
 8008c40:	3001      	adds	r0, #1
 8008c42:	f43f aefc 	beq.w	8008a3e <_printf_float+0xba>
 8008c46:	f109 0901 	add.w	r9, r9, #1
 8008c4a:	e7ee      	b.n	8008c2a <_printf_float+0x2a6>
 8008c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c50:	429a      	cmp	r2, r3
 8008c52:	bfa8      	it	ge
 8008c54:	461a      	movge	r2, r3
 8008c56:	2a00      	cmp	r2, #0
 8008c58:	4691      	mov	r9, r2
 8008c5a:	dd07      	ble.n	8008c6c <_printf_float+0x2e8>
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4642      	mov	r2, r8
 8008c62:	4628      	mov	r0, r5
 8008c64:	47b8      	blx	r7
 8008c66:	3001      	adds	r0, #1
 8008c68:	f43f aee9 	beq.w	8008a3e <_printf_float+0xba>
 8008c6c:	f104 031a 	add.w	r3, r4, #26
 8008c70:	f04f 0b00 	mov.w	fp, #0
 8008c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c78:	9306      	str	r3, [sp, #24]
 8008c7a:	e015      	b.n	8008ca8 <_printf_float+0x324>
 8008c7c:	7fefffff 	.word	0x7fefffff
 8008c80:	08010084 	.word	0x08010084
 8008c84:	08010080 	.word	0x08010080
 8008c88:	0801008c 	.word	0x0801008c
 8008c8c:	08010088 	.word	0x08010088
 8008c90:	080102ab 	.word	0x080102ab
 8008c94:	2301      	movs	r3, #1
 8008c96:	9a06      	ldr	r2, [sp, #24]
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	47b8      	blx	r7
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	f43f aecd 	beq.w	8008a3e <_printf_float+0xba>
 8008ca4:	f10b 0b01 	add.w	fp, fp, #1
 8008ca8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008cac:	ebaa 0309 	sub.w	r3, sl, r9
 8008cb0:	455b      	cmp	r3, fp
 8008cb2:	dcef      	bgt.n	8008c94 <_printf_float+0x310>
 8008cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	44d0      	add	r8, sl
 8008cbc:	db15      	blt.n	8008cea <_printf_float+0x366>
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	07da      	lsls	r2, r3, #31
 8008cc2:	d412      	bmi.n	8008cea <_printf_float+0x366>
 8008cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cc8:	eba3 020a 	sub.w	r2, r3, sl
 8008ccc:	eba3 0a01 	sub.w	sl, r3, r1
 8008cd0:	4592      	cmp	sl, r2
 8008cd2:	bfa8      	it	ge
 8008cd4:	4692      	movge	sl, r2
 8008cd6:	f1ba 0f00 	cmp.w	sl, #0
 8008cda:	dc0e      	bgt.n	8008cfa <_printf_float+0x376>
 8008cdc:	f04f 0800 	mov.w	r8, #0
 8008ce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ce4:	f104 091a 	add.w	r9, r4, #26
 8008ce8:	e019      	b.n	8008d1e <_printf_float+0x39a>
 8008cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	47b8      	blx	r7
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d1e5      	bne.n	8008cc4 <_printf_float+0x340>
 8008cf8:	e6a1      	b.n	8008a3e <_printf_float+0xba>
 8008cfa:	4653      	mov	r3, sl
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4628      	mov	r0, r5
 8008d02:	47b8      	blx	r7
 8008d04:	3001      	adds	r0, #1
 8008d06:	d1e9      	bne.n	8008cdc <_printf_float+0x358>
 8008d08:	e699      	b.n	8008a3e <_printf_float+0xba>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	464a      	mov	r2, r9
 8008d0e:	4631      	mov	r1, r6
 8008d10:	4628      	mov	r0, r5
 8008d12:	47b8      	blx	r7
 8008d14:	3001      	adds	r0, #1
 8008d16:	f43f ae92 	beq.w	8008a3e <_printf_float+0xba>
 8008d1a:	f108 0801 	add.w	r8, r8, #1
 8008d1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d22:	1a9b      	subs	r3, r3, r2
 8008d24:	eba3 030a 	sub.w	r3, r3, sl
 8008d28:	4543      	cmp	r3, r8
 8008d2a:	dcee      	bgt.n	8008d0a <_printf_float+0x386>
 8008d2c:	e74a      	b.n	8008bc4 <_printf_float+0x240>
 8008d2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d30:	2a01      	cmp	r2, #1
 8008d32:	dc01      	bgt.n	8008d38 <_printf_float+0x3b4>
 8008d34:	07db      	lsls	r3, r3, #31
 8008d36:	d53a      	bpl.n	8008dae <_printf_float+0x42a>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	4642      	mov	r2, r8
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4628      	mov	r0, r5
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	f43f ae7b 	beq.w	8008a3e <_printf_float+0xba>
 8008d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d4c:	4631      	mov	r1, r6
 8008d4e:	4628      	mov	r0, r5
 8008d50:	47b8      	blx	r7
 8008d52:	3001      	adds	r0, #1
 8008d54:	f108 0801 	add.w	r8, r8, #1
 8008d58:	f43f ae71 	beq.w	8008a3e <_printf_float+0xba>
 8008d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f103 3aff 	add.w	sl, r3, #4294967295
 8008d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f7f7 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d6e:	b9c8      	cbnz	r0, 8008da4 <_printf_float+0x420>
 8008d70:	4653      	mov	r3, sl
 8008d72:	4642      	mov	r2, r8
 8008d74:	4631      	mov	r1, r6
 8008d76:	4628      	mov	r0, r5
 8008d78:	47b8      	blx	r7
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d10e      	bne.n	8008d9c <_printf_float+0x418>
 8008d7e:	e65e      	b.n	8008a3e <_printf_float+0xba>
 8008d80:	2301      	movs	r3, #1
 8008d82:	4652      	mov	r2, sl
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f43f ae57 	beq.w	8008a3e <_printf_float+0xba>
 8008d90:	f108 0801 	add.w	r8, r8, #1
 8008d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d96:	3b01      	subs	r3, #1
 8008d98:	4543      	cmp	r3, r8
 8008d9a:	dcf1      	bgt.n	8008d80 <_printf_float+0x3fc>
 8008d9c:	464b      	mov	r3, r9
 8008d9e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008da2:	e6de      	b.n	8008b62 <_printf_float+0x1de>
 8008da4:	f04f 0800 	mov.w	r8, #0
 8008da8:	f104 0a1a 	add.w	sl, r4, #26
 8008dac:	e7f2      	b.n	8008d94 <_printf_float+0x410>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e7df      	b.n	8008d72 <_printf_float+0x3ee>
 8008db2:	2301      	movs	r3, #1
 8008db4:	464a      	mov	r2, r9
 8008db6:	4631      	mov	r1, r6
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b8      	blx	r7
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	f43f ae3e 	beq.w	8008a3e <_printf_float+0xba>
 8008dc2:	f108 0801 	add.w	r8, r8, #1
 8008dc6:	68e3      	ldr	r3, [r4, #12]
 8008dc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dca:	1a9b      	subs	r3, r3, r2
 8008dcc:	4543      	cmp	r3, r8
 8008dce:	dcf0      	bgt.n	8008db2 <_printf_float+0x42e>
 8008dd0:	e6fc      	b.n	8008bcc <_printf_float+0x248>
 8008dd2:	f04f 0800 	mov.w	r8, #0
 8008dd6:	f104 0919 	add.w	r9, r4, #25
 8008dda:	e7f4      	b.n	8008dc6 <_printf_float+0x442>
 8008ddc:	2900      	cmp	r1, #0
 8008dde:	f43f ae8b 	beq.w	8008af8 <_printf_float+0x174>
 8008de2:	2300      	movs	r3, #0
 8008de4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008de8:	ab09      	add	r3, sp, #36	; 0x24
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	ec49 8b10 	vmov	d0, r8, r9
 8008df0:	6022      	str	r2, [r4, #0]
 8008df2:	f8cd a004 	str.w	sl, [sp, #4]
 8008df6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f7ff fd2e 	bl	800885c <__cvt>
 8008e00:	4680      	mov	r8, r0
 8008e02:	e648      	b.n	8008a96 <_printf_float+0x112>

08008e04 <_printf_common>:
 8008e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e08:	4691      	mov	r9, r2
 8008e0a:	461f      	mov	r7, r3
 8008e0c:	688a      	ldr	r2, [r1, #8]
 8008e0e:	690b      	ldr	r3, [r1, #16]
 8008e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e14:	4293      	cmp	r3, r2
 8008e16:	bfb8      	it	lt
 8008e18:	4613      	movlt	r3, r2
 8008e1a:	f8c9 3000 	str.w	r3, [r9]
 8008e1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e22:	4606      	mov	r6, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	b112      	cbz	r2, 8008e2e <_printf_common+0x2a>
 8008e28:	3301      	adds	r3, #1
 8008e2a:	f8c9 3000 	str.w	r3, [r9]
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	0699      	lsls	r1, r3, #26
 8008e32:	bf42      	ittt	mi
 8008e34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e38:	3302      	addmi	r3, #2
 8008e3a:	f8c9 3000 	strmi.w	r3, [r9]
 8008e3e:	6825      	ldr	r5, [r4, #0]
 8008e40:	f015 0506 	ands.w	r5, r5, #6
 8008e44:	d107      	bne.n	8008e56 <_printf_common+0x52>
 8008e46:	f104 0a19 	add.w	sl, r4, #25
 8008e4a:	68e3      	ldr	r3, [r4, #12]
 8008e4c:	f8d9 2000 	ldr.w	r2, [r9]
 8008e50:	1a9b      	subs	r3, r3, r2
 8008e52:	42ab      	cmp	r3, r5
 8008e54:	dc28      	bgt.n	8008ea8 <_printf_common+0xa4>
 8008e56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008e5a:	6822      	ldr	r2, [r4, #0]
 8008e5c:	3300      	adds	r3, #0
 8008e5e:	bf18      	it	ne
 8008e60:	2301      	movne	r3, #1
 8008e62:	0692      	lsls	r2, r2, #26
 8008e64:	d42d      	bmi.n	8008ec2 <_printf_common+0xbe>
 8008e66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	47c0      	blx	r8
 8008e70:	3001      	adds	r0, #1
 8008e72:	d020      	beq.n	8008eb6 <_printf_common+0xb2>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	68e5      	ldr	r5, [r4, #12]
 8008e78:	f8d9 2000 	ldr.w	r2, [r9]
 8008e7c:	f003 0306 	and.w	r3, r3, #6
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	bf08      	it	eq
 8008e84:	1aad      	subeq	r5, r5, r2
 8008e86:	68a3      	ldr	r3, [r4, #8]
 8008e88:	6922      	ldr	r2, [r4, #16]
 8008e8a:	bf0c      	ite	eq
 8008e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e90:	2500      	movne	r5, #0
 8008e92:	4293      	cmp	r3, r2
 8008e94:	bfc4      	itt	gt
 8008e96:	1a9b      	subgt	r3, r3, r2
 8008e98:	18ed      	addgt	r5, r5, r3
 8008e9a:	f04f 0900 	mov.w	r9, #0
 8008e9e:	341a      	adds	r4, #26
 8008ea0:	454d      	cmp	r5, r9
 8008ea2:	d11a      	bne.n	8008eda <_printf_common+0xd6>
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	e008      	b.n	8008eba <_printf_common+0xb6>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	4652      	mov	r2, sl
 8008eac:	4639      	mov	r1, r7
 8008eae:	4630      	mov	r0, r6
 8008eb0:	47c0      	blx	r8
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	d103      	bne.n	8008ebe <_printf_common+0xba>
 8008eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ebe:	3501      	adds	r5, #1
 8008ec0:	e7c3      	b.n	8008e4a <_printf_common+0x46>
 8008ec2:	18e1      	adds	r1, r4, r3
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	2030      	movs	r0, #48	; 0x30
 8008ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ecc:	4422      	add	r2, r4
 8008ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ed2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ed6:	3302      	adds	r3, #2
 8008ed8:	e7c5      	b.n	8008e66 <_printf_common+0x62>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4622      	mov	r2, r4
 8008ede:	4639      	mov	r1, r7
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	47c0      	blx	r8
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d0e6      	beq.n	8008eb6 <_printf_common+0xb2>
 8008ee8:	f109 0901 	add.w	r9, r9, #1
 8008eec:	e7d8      	b.n	8008ea0 <_printf_common+0x9c>
	...

08008ef0 <_printf_i>:
 8008ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ef4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ef8:	460c      	mov	r4, r1
 8008efa:	7e09      	ldrb	r1, [r1, #24]
 8008efc:	b085      	sub	sp, #20
 8008efe:	296e      	cmp	r1, #110	; 0x6e
 8008f00:	4617      	mov	r7, r2
 8008f02:	4606      	mov	r6, r0
 8008f04:	4698      	mov	r8, r3
 8008f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f08:	f000 80b3 	beq.w	8009072 <_printf_i+0x182>
 8008f0c:	d822      	bhi.n	8008f54 <_printf_i+0x64>
 8008f0e:	2963      	cmp	r1, #99	; 0x63
 8008f10:	d036      	beq.n	8008f80 <_printf_i+0x90>
 8008f12:	d80a      	bhi.n	8008f2a <_printf_i+0x3a>
 8008f14:	2900      	cmp	r1, #0
 8008f16:	f000 80b9 	beq.w	800908c <_printf_i+0x19c>
 8008f1a:	2958      	cmp	r1, #88	; 0x58
 8008f1c:	f000 8083 	beq.w	8009026 <_printf_i+0x136>
 8008f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f28:	e032      	b.n	8008f90 <_printf_i+0xa0>
 8008f2a:	2964      	cmp	r1, #100	; 0x64
 8008f2c:	d001      	beq.n	8008f32 <_printf_i+0x42>
 8008f2e:	2969      	cmp	r1, #105	; 0x69
 8008f30:	d1f6      	bne.n	8008f20 <_printf_i+0x30>
 8008f32:	6820      	ldr	r0, [r4, #0]
 8008f34:	6813      	ldr	r3, [r2, #0]
 8008f36:	0605      	lsls	r5, r0, #24
 8008f38:	f103 0104 	add.w	r1, r3, #4
 8008f3c:	d52a      	bpl.n	8008f94 <_printf_i+0xa4>
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6011      	str	r1, [r2, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	da03      	bge.n	8008f4e <_printf_i+0x5e>
 8008f46:	222d      	movs	r2, #45	; 0x2d
 8008f48:	425b      	negs	r3, r3
 8008f4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008f4e:	486f      	ldr	r0, [pc, #444]	; (800910c <_printf_i+0x21c>)
 8008f50:	220a      	movs	r2, #10
 8008f52:	e039      	b.n	8008fc8 <_printf_i+0xd8>
 8008f54:	2973      	cmp	r1, #115	; 0x73
 8008f56:	f000 809d 	beq.w	8009094 <_printf_i+0x1a4>
 8008f5a:	d808      	bhi.n	8008f6e <_printf_i+0x7e>
 8008f5c:	296f      	cmp	r1, #111	; 0x6f
 8008f5e:	d020      	beq.n	8008fa2 <_printf_i+0xb2>
 8008f60:	2970      	cmp	r1, #112	; 0x70
 8008f62:	d1dd      	bne.n	8008f20 <_printf_i+0x30>
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	f043 0320 	orr.w	r3, r3, #32
 8008f6a:	6023      	str	r3, [r4, #0]
 8008f6c:	e003      	b.n	8008f76 <_printf_i+0x86>
 8008f6e:	2975      	cmp	r1, #117	; 0x75
 8008f70:	d017      	beq.n	8008fa2 <_printf_i+0xb2>
 8008f72:	2978      	cmp	r1, #120	; 0x78
 8008f74:	d1d4      	bne.n	8008f20 <_printf_i+0x30>
 8008f76:	2378      	movs	r3, #120	; 0x78
 8008f78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f7c:	4864      	ldr	r0, [pc, #400]	; (8009110 <_printf_i+0x220>)
 8008f7e:	e055      	b.n	800902c <_printf_i+0x13c>
 8008f80:	6813      	ldr	r3, [r2, #0]
 8008f82:	1d19      	adds	r1, r3, #4
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6011      	str	r1, [r2, #0]
 8008f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f90:	2301      	movs	r3, #1
 8008f92:	e08c      	b.n	80090ae <_printf_i+0x1be>
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6011      	str	r1, [r2, #0]
 8008f98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f9c:	bf18      	it	ne
 8008f9e:	b21b      	sxthne	r3, r3
 8008fa0:	e7cf      	b.n	8008f42 <_printf_i+0x52>
 8008fa2:	6813      	ldr	r3, [r2, #0]
 8008fa4:	6825      	ldr	r5, [r4, #0]
 8008fa6:	1d18      	adds	r0, r3, #4
 8008fa8:	6010      	str	r0, [r2, #0]
 8008faa:	0628      	lsls	r0, r5, #24
 8008fac:	d501      	bpl.n	8008fb2 <_printf_i+0xc2>
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	e002      	b.n	8008fb8 <_printf_i+0xc8>
 8008fb2:	0668      	lsls	r0, r5, #25
 8008fb4:	d5fb      	bpl.n	8008fae <_printf_i+0xbe>
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	4854      	ldr	r0, [pc, #336]	; (800910c <_printf_i+0x21c>)
 8008fba:	296f      	cmp	r1, #111	; 0x6f
 8008fbc:	bf14      	ite	ne
 8008fbe:	220a      	movne	r2, #10
 8008fc0:	2208      	moveq	r2, #8
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fc8:	6865      	ldr	r5, [r4, #4]
 8008fca:	60a5      	str	r5, [r4, #8]
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	f2c0 8095 	blt.w	80090fc <_printf_i+0x20c>
 8008fd2:	6821      	ldr	r1, [r4, #0]
 8008fd4:	f021 0104 	bic.w	r1, r1, #4
 8008fd8:	6021      	str	r1, [r4, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d13d      	bne.n	800905a <_printf_i+0x16a>
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	f040 808e 	bne.w	8009100 <_printf_i+0x210>
 8008fe4:	4665      	mov	r5, ip
 8008fe6:	2a08      	cmp	r2, #8
 8008fe8:	d10b      	bne.n	8009002 <_printf_i+0x112>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	07db      	lsls	r3, r3, #31
 8008fee:	d508      	bpl.n	8009002 <_printf_i+0x112>
 8008ff0:	6923      	ldr	r3, [r4, #16]
 8008ff2:	6862      	ldr	r2, [r4, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	bfde      	ittt	le
 8008ff8:	2330      	movle	r3, #48	; 0x30
 8008ffa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ffe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009002:	ebac 0305 	sub.w	r3, ip, r5
 8009006:	6123      	str	r3, [r4, #16]
 8009008:	f8cd 8000 	str.w	r8, [sp]
 800900c:	463b      	mov	r3, r7
 800900e:	aa03      	add	r2, sp, #12
 8009010:	4621      	mov	r1, r4
 8009012:	4630      	mov	r0, r6
 8009014:	f7ff fef6 	bl	8008e04 <_printf_common>
 8009018:	3001      	adds	r0, #1
 800901a:	d14d      	bne.n	80090b8 <_printf_i+0x1c8>
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	b005      	add	sp, #20
 8009022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009026:	4839      	ldr	r0, [pc, #228]	; (800910c <_printf_i+0x21c>)
 8009028:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800902c:	6813      	ldr	r3, [r2, #0]
 800902e:	6821      	ldr	r1, [r4, #0]
 8009030:	1d1d      	adds	r5, r3, #4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6015      	str	r5, [r2, #0]
 8009036:	060a      	lsls	r2, r1, #24
 8009038:	d50b      	bpl.n	8009052 <_printf_i+0x162>
 800903a:	07ca      	lsls	r2, r1, #31
 800903c:	bf44      	itt	mi
 800903e:	f041 0120 	orrmi.w	r1, r1, #32
 8009042:	6021      	strmi	r1, [r4, #0]
 8009044:	b91b      	cbnz	r3, 800904e <_printf_i+0x15e>
 8009046:	6822      	ldr	r2, [r4, #0]
 8009048:	f022 0220 	bic.w	r2, r2, #32
 800904c:	6022      	str	r2, [r4, #0]
 800904e:	2210      	movs	r2, #16
 8009050:	e7b7      	b.n	8008fc2 <_printf_i+0xd2>
 8009052:	064d      	lsls	r5, r1, #25
 8009054:	bf48      	it	mi
 8009056:	b29b      	uxthmi	r3, r3
 8009058:	e7ef      	b.n	800903a <_printf_i+0x14a>
 800905a:	4665      	mov	r5, ip
 800905c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009060:	fb02 3311 	mls	r3, r2, r1, r3
 8009064:	5cc3      	ldrb	r3, [r0, r3]
 8009066:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800906a:	460b      	mov	r3, r1
 800906c:	2900      	cmp	r1, #0
 800906e:	d1f5      	bne.n	800905c <_printf_i+0x16c>
 8009070:	e7b9      	b.n	8008fe6 <_printf_i+0xf6>
 8009072:	6813      	ldr	r3, [r2, #0]
 8009074:	6825      	ldr	r5, [r4, #0]
 8009076:	6961      	ldr	r1, [r4, #20]
 8009078:	1d18      	adds	r0, r3, #4
 800907a:	6010      	str	r0, [r2, #0]
 800907c:	0628      	lsls	r0, r5, #24
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	d501      	bpl.n	8009086 <_printf_i+0x196>
 8009082:	6019      	str	r1, [r3, #0]
 8009084:	e002      	b.n	800908c <_printf_i+0x19c>
 8009086:	066a      	lsls	r2, r5, #25
 8009088:	d5fb      	bpl.n	8009082 <_printf_i+0x192>
 800908a:	8019      	strh	r1, [r3, #0]
 800908c:	2300      	movs	r3, #0
 800908e:	6123      	str	r3, [r4, #16]
 8009090:	4665      	mov	r5, ip
 8009092:	e7b9      	b.n	8009008 <_printf_i+0x118>
 8009094:	6813      	ldr	r3, [r2, #0]
 8009096:	1d19      	adds	r1, r3, #4
 8009098:	6011      	str	r1, [r2, #0]
 800909a:	681d      	ldr	r5, [r3, #0]
 800909c:	6862      	ldr	r2, [r4, #4]
 800909e:	2100      	movs	r1, #0
 80090a0:	4628      	mov	r0, r5
 80090a2:	f7f7 f8a5 	bl	80001f0 <memchr>
 80090a6:	b108      	cbz	r0, 80090ac <_printf_i+0x1bc>
 80090a8:	1b40      	subs	r0, r0, r5
 80090aa:	6060      	str	r0, [r4, #4]
 80090ac:	6863      	ldr	r3, [r4, #4]
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	2300      	movs	r3, #0
 80090b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090b6:	e7a7      	b.n	8009008 <_printf_i+0x118>
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	462a      	mov	r2, r5
 80090bc:	4639      	mov	r1, r7
 80090be:	4630      	mov	r0, r6
 80090c0:	47c0      	blx	r8
 80090c2:	3001      	adds	r0, #1
 80090c4:	d0aa      	beq.n	800901c <_printf_i+0x12c>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	079b      	lsls	r3, r3, #30
 80090ca:	d413      	bmi.n	80090f4 <_printf_i+0x204>
 80090cc:	68e0      	ldr	r0, [r4, #12]
 80090ce:	9b03      	ldr	r3, [sp, #12]
 80090d0:	4298      	cmp	r0, r3
 80090d2:	bfb8      	it	lt
 80090d4:	4618      	movlt	r0, r3
 80090d6:	e7a3      	b.n	8009020 <_printf_i+0x130>
 80090d8:	2301      	movs	r3, #1
 80090da:	464a      	mov	r2, r9
 80090dc:	4639      	mov	r1, r7
 80090de:	4630      	mov	r0, r6
 80090e0:	47c0      	blx	r8
 80090e2:	3001      	adds	r0, #1
 80090e4:	d09a      	beq.n	800901c <_printf_i+0x12c>
 80090e6:	3501      	adds	r5, #1
 80090e8:	68e3      	ldr	r3, [r4, #12]
 80090ea:	9a03      	ldr	r2, [sp, #12]
 80090ec:	1a9b      	subs	r3, r3, r2
 80090ee:	42ab      	cmp	r3, r5
 80090f0:	dcf2      	bgt.n	80090d8 <_printf_i+0x1e8>
 80090f2:	e7eb      	b.n	80090cc <_printf_i+0x1dc>
 80090f4:	2500      	movs	r5, #0
 80090f6:	f104 0919 	add.w	r9, r4, #25
 80090fa:	e7f5      	b.n	80090e8 <_printf_i+0x1f8>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1ac      	bne.n	800905a <_printf_i+0x16a>
 8009100:	7803      	ldrb	r3, [r0, #0]
 8009102:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009106:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800910a:	e76c      	b.n	8008fe6 <_printf_i+0xf6>
 800910c:	08010090 	.word	0x08010090
 8009110:	080100a1 	.word	0x080100a1

08009114 <_scanf_float>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	469a      	mov	sl, r3
 800911a:	688b      	ldr	r3, [r1, #8]
 800911c:	4616      	mov	r6, r2
 800911e:	1e5a      	subs	r2, r3, #1
 8009120:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009124:	b087      	sub	sp, #28
 8009126:	bf83      	ittte	hi
 8009128:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800912c:	189b      	addhi	r3, r3, r2
 800912e:	9301      	strhi	r3, [sp, #4]
 8009130:	2300      	movls	r3, #0
 8009132:	bf86      	itte	hi
 8009134:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009138:	608b      	strhi	r3, [r1, #8]
 800913a:	9301      	strls	r3, [sp, #4]
 800913c:	680b      	ldr	r3, [r1, #0]
 800913e:	4688      	mov	r8, r1
 8009140:	f04f 0b00 	mov.w	fp, #0
 8009144:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009148:	f848 3b1c 	str.w	r3, [r8], #28
 800914c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009150:	4607      	mov	r7, r0
 8009152:	460c      	mov	r4, r1
 8009154:	4645      	mov	r5, r8
 8009156:	465a      	mov	r2, fp
 8009158:	46d9      	mov	r9, fp
 800915a:	f8cd b008 	str.w	fp, [sp, #8]
 800915e:	68a1      	ldr	r1, [r4, #8]
 8009160:	b181      	cbz	r1, 8009184 <_scanf_float+0x70>
 8009162:	6833      	ldr	r3, [r6, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b49      	cmp	r3, #73	; 0x49
 8009168:	d071      	beq.n	800924e <_scanf_float+0x13a>
 800916a:	d84d      	bhi.n	8009208 <_scanf_float+0xf4>
 800916c:	2b39      	cmp	r3, #57	; 0x39
 800916e:	d840      	bhi.n	80091f2 <_scanf_float+0xde>
 8009170:	2b31      	cmp	r3, #49	; 0x31
 8009172:	f080 8088 	bcs.w	8009286 <_scanf_float+0x172>
 8009176:	2b2d      	cmp	r3, #45	; 0x2d
 8009178:	f000 8090 	beq.w	800929c <_scanf_float+0x188>
 800917c:	d815      	bhi.n	80091aa <_scanf_float+0x96>
 800917e:	2b2b      	cmp	r3, #43	; 0x2b
 8009180:	f000 808c 	beq.w	800929c <_scanf_float+0x188>
 8009184:	f1b9 0f00 	cmp.w	r9, #0
 8009188:	d003      	beq.n	8009192 <_scanf_float+0x7e>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	3a01      	subs	r2, #1
 8009194:	2a01      	cmp	r2, #1
 8009196:	f200 80ea 	bhi.w	800936e <_scanf_float+0x25a>
 800919a:	4545      	cmp	r5, r8
 800919c:	f200 80dc 	bhi.w	8009358 <_scanf_float+0x244>
 80091a0:	2601      	movs	r6, #1
 80091a2:	4630      	mov	r0, r6
 80091a4:	b007      	add	sp, #28
 80091a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091aa:	2b2e      	cmp	r3, #46	; 0x2e
 80091ac:	f000 809f 	beq.w	80092ee <_scanf_float+0x1da>
 80091b0:	2b30      	cmp	r3, #48	; 0x30
 80091b2:	d1e7      	bne.n	8009184 <_scanf_float+0x70>
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80091ba:	d064      	beq.n	8009286 <_scanf_float+0x172>
 80091bc:	9b01      	ldr	r3, [sp, #4]
 80091be:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80091c2:	6020      	str	r0, [r4, #0]
 80091c4:	f109 0901 	add.w	r9, r9, #1
 80091c8:	b11b      	cbz	r3, 80091d2 <_scanf_float+0xbe>
 80091ca:	3b01      	subs	r3, #1
 80091cc:	3101      	adds	r1, #1
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	60a1      	str	r1, [r4, #8]
 80091d2:	68a3      	ldr	r3, [r4, #8]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	60a3      	str	r3, [r4, #8]
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	3301      	adds	r3, #1
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	6873      	ldr	r3, [r6, #4]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	6073      	str	r3, [r6, #4]
 80091e6:	f340 80ac 	ble.w	8009342 <_scanf_float+0x22e>
 80091ea:	6833      	ldr	r3, [r6, #0]
 80091ec:	3301      	adds	r3, #1
 80091ee:	6033      	str	r3, [r6, #0]
 80091f0:	e7b5      	b.n	800915e <_scanf_float+0x4a>
 80091f2:	2b45      	cmp	r3, #69	; 0x45
 80091f4:	f000 8085 	beq.w	8009302 <_scanf_float+0x1ee>
 80091f8:	2b46      	cmp	r3, #70	; 0x46
 80091fa:	d06a      	beq.n	80092d2 <_scanf_float+0x1be>
 80091fc:	2b41      	cmp	r3, #65	; 0x41
 80091fe:	d1c1      	bne.n	8009184 <_scanf_float+0x70>
 8009200:	2a01      	cmp	r2, #1
 8009202:	d1bf      	bne.n	8009184 <_scanf_float+0x70>
 8009204:	2202      	movs	r2, #2
 8009206:	e046      	b.n	8009296 <_scanf_float+0x182>
 8009208:	2b65      	cmp	r3, #101	; 0x65
 800920a:	d07a      	beq.n	8009302 <_scanf_float+0x1ee>
 800920c:	d818      	bhi.n	8009240 <_scanf_float+0x12c>
 800920e:	2b54      	cmp	r3, #84	; 0x54
 8009210:	d066      	beq.n	80092e0 <_scanf_float+0x1cc>
 8009212:	d811      	bhi.n	8009238 <_scanf_float+0x124>
 8009214:	2b4e      	cmp	r3, #78	; 0x4e
 8009216:	d1b5      	bne.n	8009184 <_scanf_float+0x70>
 8009218:	2a00      	cmp	r2, #0
 800921a:	d146      	bne.n	80092aa <_scanf_float+0x196>
 800921c:	f1b9 0f00 	cmp.w	r9, #0
 8009220:	d145      	bne.n	80092ae <_scanf_float+0x19a>
 8009222:	6821      	ldr	r1, [r4, #0]
 8009224:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009228:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800922c:	d13f      	bne.n	80092ae <_scanf_float+0x19a>
 800922e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009232:	6021      	str	r1, [r4, #0]
 8009234:	2201      	movs	r2, #1
 8009236:	e02e      	b.n	8009296 <_scanf_float+0x182>
 8009238:	2b59      	cmp	r3, #89	; 0x59
 800923a:	d01e      	beq.n	800927a <_scanf_float+0x166>
 800923c:	2b61      	cmp	r3, #97	; 0x61
 800923e:	e7de      	b.n	80091fe <_scanf_float+0xea>
 8009240:	2b6e      	cmp	r3, #110	; 0x6e
 8009242:	d0e9      	beq.n	8009218 <_scanf_float+0x104>
 8009244:	d815      	bhi.n	8009272 <_scanf_float+0x15e>
 8009246:	2b66      	cmp	r3, #102	; 0x66
 8009248:	d043      	beq.n	80092d2 <_scanf_float+0x1be>
 800924a:	2b69      	cmp	r3, #105	; 0x69
 800924c:	d19a      	bne.n	8009184 <_scanf_float+0x70>
 800924e:	f1bb 0f00 	cmp.w	fp, #0
 8009252:	d138      	bne.n	80092c6 <_scanf_float+0x1b2>
 8009254:	f1b9 0f00 	cmp.w	r9, #0
 8009258:	d197      	bne.n	800918a <_scanf_float+0x76>
 800925a:	6821      	ldr	r1, [r4, #0]
 800925c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009260:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009264:	d195      	bne.n	8009192 <_scanf_float+0x7e>
 8009266:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800926a:	6021      	str	r1, [r4, #0]
 800926c:	f04f 0b01 	mov.w	fp, #1
 8009270:	e011      	b.n	8009296 <_scanf_float+0x182>
 8009272:	2b74      	cmp	r3, #116	; 0x74
 8009274:	d034      	beq.n	80092e0 <_scanf_float+0x1cc>
 8009276:	2b79      	cmp	r3, #121	; 0x79
 8009278:	d184      	bne.n	8009184 <_scanf_float+0x70>
 800927a:	f1bb 0f07 	cmp.w	fp, #7
 800927e:	d181      	bne.n	8009184 <_scanf_float+0x70>
 8009280:	f04f 0b08 	mov.w	fp, #8
 8009284:	e007      	b.n	8009296 <_scanf_float+0x182>
 8009286:	eb12 0f0b 	cmn.w	r2, fp
 800928a:	f47f af7b 	bne.w	8009184 <_scanf_float+0x70>
 800928e:	6821      	ldr	r1, [r4, #0]
 8009290:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009294:	6021      	str	r1, [r4, #0]
 8009296:	702b      	strb	r3, [r5, #0]
 8009298:	3501      	adds	r5, #1
 800929a:	e79a      	b.n	80091d2 <_scanf_float+0xbe>
 800929c:	6821      	ldr	r1, [r4, #0]
 800929e:	0608      	lsls	r0, r1, #24
 80092a0:	f57f af70 	bpl.w	8009184 <_scanf_float+0x70>
 80092a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80092a8:	e7f4      	b.n	8009294 <_scanf_float+0x180>
 80092aa:	2a02      	cmp	r2, #2
 80092ac:	d047      	beq.n	800933e <_scanf_float+0x22a>
 80092ae:	f1bb 0f01 	cmp.w	fp, #1
 80092b2:	d003      	beq.n	80092bc <_scanf_float+0x1a8>
 80092b4:	f1bb 0f04 	cmp.w	fp, #4
 80092b8:	f47f af64 	bne.w	8009184 <_scanf_float+0x70>
 80092bc:	f10b 0b01 	add.w	fp, fp, #1
 80092c0:	fa5f fb8b 	uxtb.w	fp, fp
 80092c4:	e7e7      	b.n	8009296 <_scanf_float+0x182>
 80092c6:	f1bb 0f03 	cmp.w	fp, #3
 80092ca:	d0f7      	beq.n	80092bc <_scanf_float+0x1a8>
 80092cc:	f1bb 0f05 	cmp.w	fp, #5
 80092d0:	e7f2      	b.n	80092b8 <_scanf_float+0x1a4>
 80092d2:	f1bb 0f02 	cmp.w	fp, #2
 80092d6:	f47f af55 	bne.w	8009184 <_scanf_float+0x70>
 80092da:	f04f 0b03 	mov.w	fp, #3
 80092de:	e7da      	b.n	8009296 <_scanf_float+0x182>
 80092e0:	f1bb 0f06 	cmp.w	fp, #6
 80092e4:	f47f af4e 	bne.w	8009184 <_scanf_float+0x70>
 80092e8:	f04f 0b07 	mov.w	fp, #7
 80092ec:	e7d3      	b.n	8009296 <_scanf_float+0x182>
 80092ee:	6821      	ldr	r1, [r4, #0]
 80092f0:	0588      	lsls	r0, r1, #22
 80092f2:	f57f af47 	bpl.w	8009184 <_scanf_float+0x70>
 80092f6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80092fa:	6021      	str	r1, [r4, #0]
 80092fc:	f8cd 9008 	str.w	r9, [sp, #8]
 8009300:	e7c9      	b.n	8009296 <_scanf_float+0x182>
 8009302:	6821      	ldr	r1, [r4, #0]
 8009304:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009308:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800930c:	d006      	beq.n	800931c <_scanf_float+0x208>
 800930e:	0548      	lsls	r0, r1, #21
 8009310:	f57f af38 	bpl.w	8009184 <_scanf_float+0x70>
 8009314:	f1b9 0f00 	cmp.w	r9, #0
 8009318:	f43f af3b 	beq.w	8009192 <_scanf_float+0x7e>
 800931c:	0588      	lsls	r0, r1, #22
 800931e:	bf58      	it	pl
 8009320:	9802      	ldrpl	r0, [sp, #8]
 8009322:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009326:	bf58      	it	pl
 8009328:	eba9 0000 	subpl.w	r0, r9, r0
 800932c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009330:	bf58      	it	pl
 8009332:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009336:	6021      	str	r1, [r4, #0]
 8009338:	f04f 0900 	mov.w	r9, #0
 800933c:	e7ab      	b.n	8009296 <_scanf_float+0x182>
 800933e:	2203      	movs	r2, #3
 8009340:	e7a9      	b.n	8009296 <_scanf_float+0x182>
 8009342:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009346:	9205      	str	r2, [sp, #20]
 8009348:	4631      	mov	r1, r6
 800934a:	4638      	mov	r0, r7
 800934c:	4798      	blx	r3
 800934e:	9a05      	ldr	r2, [sp, #20]
 8009350:	2800      	cmp	r0, #0
 8009352:	f43f af04 	beq.w	800915e <_scanf_float+0x4a>
 8009356:	e715      	b.n	8009184 <_scanf_float+0x70>
 8009358:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800935c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009360:	4632      	mov	r2, r6
 8009362:	4638      	mov	r0, r7
 8009364:	4798      	blx	r3
 8009366:	6923      	ldr	r3, [r4, #16]
 8009368:	3b01      	subs	r3, #1
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	e715      	b.n	800919a <_scanf_float+0x86>
 800936e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009372:	2b06      	cmp	r3, #6
 8009374:	d80a      	bhi.n	800938c <_scanf_float+0x278>
 8009376:	f1bb 0f02 	cmp.w	fp, #2
 800937a:	d968      	bls.n	800944e <_scanf_float+0x33a>
 800937c:	f1ab 0b03 	sub.w	fp, fp, #3
 8009380:	fa5f fb8b 	uxtb.w	fp, fp
 8009384:	eba5 0b0b 	sub.w	fp, r5, fp
 8009388:	455d      	cmp	r5, fp
 800938a:	d14b      	bne.n	8009424 <_scanf_float+0x310>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	05da      	lsls	r2, r3, #23
 8009390:	d51f      	bpl.n	80093d2 <_scanf_float+0x2be>
 8009392:	055b      	lsls	r3, r3, #21
 8009394:	d468      	bmi.n	8009468 <_scanf_float+0x354>
 8009396:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800939a:	6923      	ldr	r3, [r4, #16]
 800939c:	2965      	cmp	r1, #101	; 0x65
 800939e:	f103 33ff 	add.w	r3, r3, #4294967295
 80093a2:	f105 3bff 	add.w	fp, r5, #4294967295
 80093a6:	6123      	str	r3, [r4, #16]
 80093a8:	d00d      	beq.n	80093c6 <_scanf_float+0x2b2>
 80093aa:	2945      	cmp	r1, #69	; 0x45
 80093ac:	d00b      	beq.n	80093c6 <_scanf_float+0x2b2>
 80093ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093b2:	4632      	mov	r2, r6
 80093b4:	4638      	mov	r0, r7
 80093b6:	4798      	blx	r3
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80093be:	3b01      	subs	r3, #1
 80093c0:	f1a5 0b02 	sub.w	fp, r5, #2
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093ca:	4632      	mov	r2, r6
 80093cc:	4638      	mov	r0, r7
 80093ce:	4798      	blx	r3
 80093d0:	465d      	mov	r5, fp
 80093d2:	6826      	ldr	r6, [r4, #0]
 80093d4:	f016 0610 	ands.w	r6, r6, #16
 80093d8:	d17a      	bne.n	80094d0 <_scanf_float+0x3bc>
 80093da:	702e      	strb	r6, [r5, #0]
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093e6:	d142      	bne.n	800946e <_scanf_float+0x35a>
 80093e8:	9b02      	ldr	r3, [sp, #8]
 80093ea:	eba9 0303 	sub.w	r3, r9, r3
 80093ee:	425a      	negs	r2, r3
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d149      	bne.n	8009488 <_scanf_float+0x374>
 80093f4:	2200      	movs	r2, #0
 80093f6:	4641      	mov	r1, r8
 80093f8:	4638      	mov	r0, r7
 80093fa:	f000 ffb5 	bl	800a368 <_strtod_r>
 80093fe:	6825      	ldr	r5, [r4, #0]
 8009400:	f8da 3000 	ldr.w	r3, [sl]
 8009404:	f015 0f02 	tst.w	r5, #2
 8009408:	f103 0204 	add.w	r2, r3, #4
 800940c:	ec59 8b10 	vmov	r8, r9, d0
 8009410:	f8ca 2000 	str.w	r2, [sl]
 8009414:	d043      	beq.n	800949e <_scanf_float+0x38a>
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	e9c3 8900 	strd	r8, r9, [r3]
 800941c:	68e3      	ldr	r3, [r4, #12]
 800941e:	3301      	adds	r3, #1
 8009420:	60e3      	str	r3, [r4, #12]
 8009422:	e6be      	b.n	80091a2 <_scanf_float+0x8e>
 8009424:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009428:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800942c:	4632      	mov	r2, r6
 800942e:	4638      	mov	r0, r7
 8009430:	4798      	blx	r3
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	3b01      	subs	r3, #1
 8009436:	6123      	str	r3, [r4, #16]
 8009438:	e7a6      	b.n	8009388 <_scanf_float+0x274>
 800943a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800943e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009442:	4632      	mov	r2, r6
 8009444:	4638      	mov	r0, r7
 8009446:	4798      	blx	r3
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	3b01      	subs	r3, #1
 800944c:	6123      	str	r3, [r4, #16]
 800944e:	4545      	cmp	r5, r8
 8009450:	d8f3      	bhi.n	800943a <_scanf_float+0x326>
 8009452:	e6a5      	b.n	80091a0 <_scanf_float+0x8c>
 8009454:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009458:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800945c:	4632      	mov	r2, r6
 800945e:	4638      	mov	r0, r7
 8009460:	4798      	blx	r3
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	3b01      	subs	r3, #1
 8009466:	6123      	str	r3, [r4, #16]
 8009468:	4545      	cmp	r5, r8
 800946a:	d8f3      	bhi.n	8009454 <_scanf_float+0x340>
 800946c:	e698      	b.n	80091a0 <_scanf_float+0x8c>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0bf      	beq.n	80093f4 <_scanf_float+0x2e0>
 8009474:	9904      	ldr	r1, [sp, #16]
 8009476:	230a      	movs	r3, #10
 8009478:	4632      	mov	r2, r6
 800947a:	3101      	adds	r1, #1
 800947c:	4638      	mov	r0, r7
 800947e:	f000 ffff 	bl	800a480 <_strtol_r>
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	9d04      	ldr	r5, [sp, #16]
 8009486:	1ac2      	subs	r2, r0, r3
 8009488:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800948c:	429d      	cmp	r5, r3
 800948e:	bf28      	it	cs
 8009490:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009494:	490f      	ldr	r1, [pc, #60]	; (80094d4 <_scanf_float+0x3c0>)
 8009496:	4628      	mov	r0, r5
 8009498:	f000 f8b0 	bl	80095fc <siprintf>
 800949c:	e7aa      	b.n	80093f4 <_scanf_float+0x2e0>
 800949e:	f015 0504 	ands.w	r5, r5, #4
 80094a2:	d1b8      	bne.n	8009416 <_scanf_float+0x302>
 80094a4:	681f      	ldr	r7, [r3, #0]
 80094a6:	ee10 2a10 	vmov	r2, s0
 80094aa:	464b      	mov	r3, r9
 80094ac:	ee10 0a10 	vmov	r0, s0
 80094b0:	4649      	mov	r1, r9
 80094b2:	f7f7 fb43 	bl	8000b3c <__aeabi_dcmpun>
 80094b6:	b128      	cbz	r0, 80094c4 <_scanf_float+0x3b0>
 80094b8:	4628      	mov	r0, r5
 80094ba:	f000 f899 	bl	80095f0 <nanf>
 80094be:	ed87 0a00 	vstr	s0, [r7]
 80094c2:	e7ab      	b.n	800941c <_scanf_float+0x308>
 80094c4:	4640      	mov	r0, r8
 80094c6:	4649      	mov	r1, r9
 80094c8:	f7f7 fb96 	bl	8000bf8 <__aeabi_d2f>
 80094cc:	6038      	str	r0, [r7, #0]
 80094ce:	e7a5      	b.n	800941c <_scanf_float+0x308>
 80094d0:	2600      	movs	r6, #0
 80094d2:	e666      	b.n	80091a2 <_scanf_float+0x8e>
 80094d4:	080100b2 	.word	0x080100b2

080094d8 <iprintf>:
 80094d8:	b40f      	push	{r0, r1, r2, r3}
 80094da:	4b0a      	ldr	r3, [pc, #40]	; (8009504 <iprintf+0x2c>)
 80094dc:	b513      	push	{r0, r1, r4, lr}
 80094de:	681c      	ldr	r4, [r3, #0]
 80094e0:	b124      	cbz	r4, 80094ec <iprintf+0x14>
 80094e2:	69a3      	ldr	r3, [r4, #24]
 80094e4:	b913      	cbnz	r3, 80094ec <iprintf+0x14>
 80094e6:	4620      	mov	r0, r4
 80094e8:	f001 fff2 	bl	800b4d0 <__sinit>
 80094ec:	ab05      	add	r3, sp, #20
 80094ee:	9a04      	ldr	r2, [sp, #16]
 80094f0:	68a1      	ldr	r1, [r4, #8]
 80094f2:	9301      	str	r3, [sp, #4]
 80094f4:	4620      	mov	r0, r4
 80094f6:	f003 fb85 	bl	800cc04 <_vfiprintf_r>
 80094fa:	b002      	add	sp, #8
 80094fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009500:	b004      	add	sp, #16
 8009502:	4770      	bx	lr
 8009504:	20000180 	.word	0x20000180

08009508 <_puts_r>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	460e      	mov	r6, r1
 800950c:	4605      	mov	r5, r0
 800950e:	b118      	cbz	r0, 8009518 <_puts_r+0x10>
 8009510:	6983      	ldr	r3, [r0, #24]
 8009512:	b90b      	cbnz	r3, 8009518 <_puts_r+0x10>
 8009514:	f001 ffdc 	bl	800b4d0 <__sinit>
 8009518:	69ab      	ldr	r3, [r5, #24]
 800951a:	68ac      	ldr	r4, [r5, #8]
 800951c:	b913      	cbnz	r3, 8009524 <_puts_r+0x1c>
 800951e:	4628      	mov	r0, r5
 8009520:	f001 ffd6 	bl	800b4d0 <__sinit>
 8009524:	4b23      	ldr	r3, [pc, #140]	; (80095b4 <_puts_r+0xac>)
 8009526:	429c      	cmp	r4, r3
 8009528:	d117      	bne.n	800955a <_puts_r+0x52>
 800952a:	686c      	ldr	r4, [r5, #4]
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	071b      	lsls	r3, r3, #28
 8009530:	d51d      	bpl.n	800956e <_puts_r+0x66>
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	b1db      	cbz	r3, 800956e <_puts_r+0x66>
 8009536:	3e01      	subs	r6, #1
 8009538:	68a3      	ldr	r3, [r4, #8]
 800953a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800953e:	3b01      	subs	r3, #1
 8009540:	60a3      	str	r3, [r4, #8]
 8009542:	b9e9      	cbnz	r1, 8009580 <_puts_r+0x78>
 8009544:	2b00      	cmp	r3, #0
 8009546:	da2e      	bge.n	80095a6 <_puts_r+0x9e>
 8009548:	4622      	mov	r2, r4
 800954a:	210a      	movs	r1, #10
 800954c:	4628      	mov	r0, r5
 800954e:	f000 ffa9 	bl	800a4a4 <__swbuf_r>
 8009552:	3001      	adds	r0, #1
 8009554:	d011      	beq.n	800957a <_puts_r+0x72>
 8009556:	200a      	movs	r0, #10
 8009558:	e011      	b.n	800957e <_puts_r+0x76>
 800955a:	4b17      	ldr	r3, [pc, #92]	; (80095b8 <_puts_r+0xb0>)
 800955c:	429c      	cmp	r4, r3
 800955e:	d101      	bne.n	8009564 <_puts_r+0x5c>
 8009560:	68ac      	ldr	r4, [r5, #8]
 8009562:	e7e3      	b.n	800952c <_puts_r+0x24>
 8009564:	4b15      	ldr	r3, [pc, #84]	; (80095bc <_puts_r+0xb4>)
 8009566:	429c      	cmp	r4, r3
 8009568:	bf08      	it	eq
 800956a:	68ec      	ldreq	r4, [r5, #12]
 800956c:	e7de      	b.n	800952c <_puts_r+0x24>
 800956e:	4621      	mov	r1, r4
 8009570:	4628      	mov	r0, r5
 8009572:	f000 fffb 	bl	800a56c <__swsetup_r>
 8009576:	2800      	cmp	r0, #0
 8009578:	d0dd      	beq.n	8009536 <_puts_r+0x2e>
 800957a:	f04f 30ff 	mov.w	r0, #4294967295
 800957e:	bd70      	pop	{r4, r5, r6, pc}
 8009580:	2b00      	cmp	r3, #0
 8009582:	da04      	bge.n	800958e <_puts_r+0x86>
 8009584:	69a2      	ldr	r2, [r4, #24]
 8009586:	429a      	cmp	r2, r3
 8009588:	dc06      	bgt.n	8009598 <_puts_r+0x90>
 800958a:	290a      	cmp	r1, #10
 800958c:	d004      	beq.n	8009598 <_puts_r+0x90>
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	6022      	str	r2, [r4, #0]
 8009594:	7019      	strb	r1, [r3, #0]
 8009596:	e7cf      	b.n	8009538 <_puts_r+0x30>
 8009598:	4622      	mov	r2, r4
 800959a:	4628      	mov	r0, r5
 800959c:	f000 ff82 	bl	800a4a4 <__swbuf_r>
 80095a0:	3001      	adds	r0, #1
 80095a2:	d1c9      	bne.n	8009538 <_puts_r+0x30>
 80095a4:	e7e9      	b.n	800957a <_puts_r+0x72>
 80095a6:	6823      	ldr	r3, [r4, #0]
 80095a8:	200a      	movs	r0, #10
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	6022      	str	r2, [r4, #0]
 80095ae:	7018      	strb	r0, [r3, #0]
 80095b0:	e7e5      	b.n	800957e <_puts_r+0x76>
 80095b2:	bf00      	nop
 80095b4:	08010138 	.word	0x08010138
 80095b8:	08010158 	.word	0x08010158
 80095bc:	08010118 	.word	0x08010118

080095c0 <puts>:
 80095c0:	4b02      	ldr	r3, [pc, #8]	; (80095cc <puts+0xc>)
 80095c2:	4601      	mov	r1, r0
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	f7ff bf9f 	b.w	8009508 <_puts_r>
 80095ca:	bf00      	nop
 80095cc:	20000180 	.word	0x20000180

080095d0 <_sbrk_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4c06      	ldr	r4, [pc, #24]	; (80095ec <_sbrk_r+0x1c>)
 80095d4:	2300      	movs	r3, #0
 80095d6:	4605      	mov	r5, r0
 80095d8:	4608      	mov	r0, r1
 80095da:	6023      	str	r3, [r4, #0]
 80095dc:	f7f8 fa2e 	bl	8001a3c <_sbrk>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d102      	bne.n	80095ea <_sbrk_r+0x1a>
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	b103      	cbz	r3, 80095ea <_sbrk_r+0x1a>
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	20000f6c 	.word	0x20000f6c

080095f0 <nanf>:
 80095f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80095f8 <nanf+0x8>
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	7fc00000 	.word	0x7fc00000

080095fc <siprintf>:
 80095fc:	b40e      	push	{r1, r2, r3}
 80095fe:	b500      	push	{lr}
 8009600:	b09c      	sub	sp, #112	; 0x70
 8009602:	ab1d      	add	r3, sp, #116	; 0x74
 8009604:	9002      	str	r0, [sp, #8]
 8009606:	9006      	str	r0, [sp, #24]
 8009608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800960c:	4809      	ldr	r0, [pc, #36]	; (8009634 <siprintf+0x38>)
 800960e:	9107      	str	r1, [sp, #28]
 8009610:	9104      	str	r1, [sp, #16]
 8009612:	4909      	ldr	r1, [pc, #36]	; (8009638 <siprintf+0x3c>)
 8009614:	f853 2b04 	ldr.w	r2, [r3], #4
 8009618:	9105      	str	r1, [sp, #20]
 800961a:	6800      	ldr	r0, [r0, #0]
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	a902      	add	r1, sp, #8
 8009620:	f003 f824 	bl	800c66c <_svfiprintf_r>
 8009624:	9b02      	ldr	r3, [sp, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	b01c      	add	sp, #112	; 0x70
 800962c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009630:	b003      	add	sp, #12
 8009632:	4770      	bx	lr
 8009634:	20000180 	.word	0x20000180
 8009638:	ffff0208 	.word	0xffff0208

0800963c <siscanf>:
 800963c:	b40e      	push	{r1, r2, r3}
 800963e:	b530      	push	{r4, r5, lr}
 8009640:	b09c      	sub	sp, #112	; 0x70
 8009642:	ac1f      	add	r4, sp, #124	; 0x7c
 8009644:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009648:	f854 5b04 	ldr.w	r5, [r4], #4
 800964c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009650:	9002      	str	r0, [sp, #8]
 8009652:	9006      	str	r0, [sp, #24]
 8009654:	f7f6 fdc4 	bl	80001e0 <strlen>
 8009658:	4b0b      	ldr	r3, [pc, #44]	; (8009688 <siscanf+0x4c>)
 800965a:	9003      	str	r0, [sp, #12]
 800965c:	9007      	str	r0, [sp, #28]
 800965e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009660:	480a      	ldr	r0, [pc, #40]	; (800968c <siscanf+0x50>)
 8009662:	9401      	str	r4, [sp, #4]
 8009664:	2300      	movs	r3, #0
 8009666:	930f      	str	r3, [sp, #60]	; 0x3c
 8009668:	9314      	str	r3, [sp, #80]	; 0x50
 800966a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800966e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009672:	462a      	mov	r2, r5
 8009674:	4623      	mov	r3, r4
 8009676:	a902      	add	r1, sp, #8
 8009678:	6800      	ldr	r0, [r0, #0]
 800967a:	f003 f949 	bl	800c910 <__ssvfiscanf_r>
 800967e:	b01c      	add	sp, #112	; 0x70
 8009680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009684:	b003      	add	sp, #12
 8009686:	4770      	bx	lr
 8009688:	080096b3 	.word	0x080096b3
 800968c:	20000180 	.word	0x20000180

08009690 <__sread>:
 8009690:	b510      	push	{r4, lr}
 8009692:	460c      	mov	r4, r1
 8009694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009698:	f003 fd22 	bl	800d0e0 <_read_r>
 800969c:	2800      	cmp	r0, #0
 800969e:	bfab      	itete	ge
 80096a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096a2:	89a3      	ldrhlt	r3, [r4, #12]
 80096a4:	181b      	addge	r3, r3, r0
 80096a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096aa:	bfac      	ite	ge
 80096ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80096ae:	81a3      	strhlt	r3, [r4, #12]
 80096b0:	bd10      	pop	{r4, pc}

080096b2 <__seofread>:
 80096b2:	2000      	movs	r0, #0
 80096b4:	4770      	bx	lr

080096b6 <__swrite>:
 80096b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ba:	461f      	mov	r7, r3
 80096bc:	898b      	ldrh	r3, [r1, #12]
 80096be:	05db      	lsls	r3, r3, #23
 80096c0:	4605      	mov	r5, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	4616      	mov	r6, r2
 80096c6:	d505      	bpl.n	80096d4 <__swrite+0x1e>
 80096c8:	2302      	movs	r3, #2
 80096ca:	2200      	movs	r2, #0
 80096cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d0:	f002 fad0 	bl	800bc74 <_lseek_r>
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	4632      	mov	r2, r6
 80096e2:	463b      	mov	r3, r7
 80096e4:	4628      	mov	r0, r5
 80096e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ea:	f000 bf2d 	b.w	800a548 <_write_r>

080096ee <__sseek>:
 80096ee:	b510      	push	{r4, lr}
 80096f0:	460c      	mov	r4, r1
 80096f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f6:	f002 fabd 	bl	800bc74 <_lseek_r>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	bf15      	itete	ne
 8009700:	6560      	strne	r0, [r4, #84]	; 0x54
 8009702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800970a:	81a3      	strheq	r3, [r4, #12]
 800970c:	bf18      	it	ne
 800970e:	81a3      	strhne	r3, [r4, #12]
 8009710:	bd10      	pop	{r4, pc}

08009712 <__sclose>:
 8009712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009716:	f000 bf97 	b.w	800a648 <_close_r>

0800971a <strlcpy>:
 800971a:	b510      	push	{r4, lr}
 800971c:	460b      	mov	r3, r1
 800971e:	b162      	cbz	r2, 800973a <strlcpy+0x20>
 8009720:	3a01      	subs	r2, #1
 8009722:	d008      	beq.n	8009736 <strlcpy+0x1c>
 8009724:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009728:	f800 4b01 	strb.w	r4, [r0], #1
 800972c:	2c00      	cmp	r4, #0
 800972e:	d1f7      	bne.n	8009720 <strlcpy+0x6>
 8009730:	1a58      	subs	r0, r3, r1
 8009732:	3801      	subs	r0, #1
 8009734:	bd10      	pop	{r4, pc}
 8009736:	2200      	movs	r2, #0
 8009738:	7002      	strb	r2, [r0, #0]
 800973a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800973e:	2a00      	cmp	r2, #0
 8009740:	d1fb      	bne.n	800973a <strlcpy+0x20>
 8009742:	e7f5      	b.n	8009730 <strlcpy+0x16>

08009744 <sulp>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	4604      	mov	r4, r0
 8009748:	460d      	mov	r5, r1
 800974a:	ec45 4b10 	vmov	d0, r4, r5
 800974e:	4616      	mov	r6, r2
 8009750:	f002 fdf0 	bl	800c334 <__ulp>
 8009754:	ec51 0b10 	vmov	r0, r1, d0
 8009758:	b17e      	cbz	r6, 800977a <sulp+0x36>
 800975a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800975e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009762:	2b00      	cmp	r3, #0
 8009764:	dd09      	ble.n	800977a <sulp+0x36>
 8009766:	051b      	lsls	r3, r3, #20
 8009768:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800976c:	2400      	movs	r4, #0
 800976e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009772:	4622      	mov	r2, r4
 8009774:	462b      	mov	r3, r5
 8009776:	f7f6 ff47 	bl	8000608 <__aeabi_dmul>
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	0000      	movs	r0, r0
	...

08009780 <_strtod_l>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	461f      	mov	r7, r3
 8009786:	b0a1      	sub	sp, #132	; 0x84
 8009788:	2300      	movs	r3, #0
 800978a:	4681      	mov	r9, r0
 800978c:	4638      	mov	r0, r7
 800978e:	460e      	mov	r6, r1
 8009790:	9217      	str	r2, [sp, #92]	; 0x5c
 8009792:	931c      	str	r3, [sp, #112]	; 0x70
 8009794:	f002 fa5e 	bl	800bc54 <__localeconv_l>
 8009798:	4680      	mov	r8, r0
 800979a:	6800      	ldr	r0, [r0, #0]
 800979c:	f7f6 fd20 	bl	80001e0 <strlen>
 80097a0:	f04f 0a00 	mov.w	sl, #0
 80097a4:	4604      	mov	r4, r0
 80097a6:	f04f 0b00 	mov.w	fp, #0
 80097aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80097ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097ae:	781a      	ldrb	r2, [r3, #0]
 80097b0:	2a0d      	cmp	r2, #13
 80097b2:	d832      	bhi.n	800981a <_strtod_l+0x9a>
 80097b4:	2a09      	cmp	r2, #9
 80097b6:	d236      	bcs.n	8009826 <_strtod_l+0xa6>
 80097b8:	2a00      	cmp	r2, #0
 80097ba:	d03e      	beq.n	800983a <_strtod_l+0xba>
 80097bc:	2300      	movs	r3, #0
 80097be:	930d      	str	r3, [sp, #52]	; 0x34
 80097c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80097c2:	782b      	ldrb	r3, [r5, #0]
 80097c4:	2b30      	cmp	r3, #48	; 0x30
 80097c6:	f040 80ac 	bne.w	8009922 <_strtod_l+0x1a2>
 80097ca:	786b      	ldrb	r3, [r5, #1]
 80097cc:	2b58      	cmp	r3, #88	; 0x58
 80097ce:	d001      	beq.n	80097d4 <_strtod_l+0x54>
 80097d0:	2b78      	cmp	r3, #120	; 0x78
 80097d2:	d167      	bne.n	80098a4 <_strtod_l+0x124>
 80097d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097d6:	9301      	str	r3, [sp, #4]
 80097d8:	ab1c      	add	r3, sp, #112	; 0x70
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	9702      	str	r7, [sp, #8]
 80097de:	ab1d      	add	r3, sp, #116	; 0x74
 80097e0:	4a88      	ldr	r2, [pc, #544]	; (8009a04 <_strtod_l+0x284>)
 80097e2:	a91b      	add	r1, sp, #108	; 0x6c
 80097e4:	4648      	mov	r0, r9
 80097e6:	f001 ff4c 	bl	800b682 <__gethex>
 80097ea:	f010 0407 	ands.w	r4, r0, #7
 80097ee:	4606      	mov	r6, r0
 80097f0:	d005      	beq.n	80097fe <_strtod_l+0x7e>
 80097f2:	2c06      	cmp	r4, #6
 80097f4:	d12b      	bne.n	800984e <_strtod_l+0xce>
 80097f6:	3501      	adds	r5, #1
 80097f8:	2300      	movs	r3, #0
 80097fa:	951b      	str	r5, [sp, #108]	; 0x6c
 80097fc:	930d      	str	r3, [sp, #52]	; 0x34
 80097fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009800:	2b00      	cmp	r3, #0
 8009802:	f040 859a 	bne.w	800a33a <_strtod_l+0xbba>
 8009806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009808:	b1e3      	cbz	r3, 8009844 <_strtod_l+0xc4>
 800980a:	4652      	mov	r2, sl
 800980c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009810:	ec43 2b10 	vmov	d0, r2, r3
 8009814:	b021      	add	sp, #132	; 0x84
 8009816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981a:	2a2b      	cmp	r2, #43	; 0x2b
 800981c:	d015      	beq.n	800984a <_strtod_l+0xca>
 800981e:	2a2d      	cmp	r2, #45	; 0x2d
 8009820:	d004      	beq.n	800982c <_strtod_l+0xac>
 8009822:	2a20      	cmp	r2, #32
 8009824:	d1ca      	bne.n	80097bc <_strtod_l+0x3c>
 8009826:	3301      	adds	r3, #1
 8009828:	931b      	str	r3, [sp, #108]	; 0x6c
 800982a:	e7bf      	b.n	80097ac <_strtod_l+0x2c>
 800982c:	2201      	movs	r2, #1
 800982e:	920d      	str	r2, [sp, #52]	; 0x34
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	921b      	str	r2, [sp, #108]	; 0x6c
 8009834:	785b      	ldrb	r3, [r3, #1]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1c2      	bne.n	80097c0 <_strtod_l+0x40>
 800983a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800983c:	961b      	str	r6, [sp, #108]	; 0x6c
 800983e:	2b00      	cmp	r3, #0
 8009840:	f040 8579 	bne.w	800a336 <_strtod_l+0xbb6>
 8009844:	4652      	mov	r2, sl
 8009846:	465b      	mov	r3, fp
 8009848:	e7e2      	b.n	8009810 <_strtod_l+0x90>
 800984a:	2200      	movs	r2, #0
 800984c:	e7ef      	b.n	800982e <_strtod_l+0xae>
 800984e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009850:	b13a      	cbz	r2, 8009862 <_strtod_l+0xe2>
 8009852:	2135      	movs	r1, #53	; 0x35
 8009854:	a81e      	add	r0, sp, #120	; 0x78
 8009856:	f002 fe65 	bl	800c524 <__copybits>
 800985a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800985c:	4648      	mov	r0, r9
 800985e:	f002 fad2 	bl	800be06 <_Bfree>
 8009862:	3c01      	subs	r4, #1
 8009864:	2c04      	cmp	r4, #4
 8009866:	d806      	bhi.n	8009876 <_strtod_l+0xf6>
 8009868:	e8df f004 	tbb	[pc, r4]
 800986c:	1714030a 	.word	0x1714030a
 8009870:	0a          	.byte	0x0a
 8009871:	00          	.byte	0x00
 8009872:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8009876:	0730      	lsls	r0, r6, #28
 8009878:	d5c1      	bpl.n	80097fe <_strtod_l+0x7e>
 800987a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800987e:	e7be      	b.n	80097fe <_strtod_l+0x7e>
 8009880:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8009884:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009886:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800988a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800988e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009892:	e7f0      	b.n	8009876 <_strtod_l+0xf6>
 8009894:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009a08 <_strtod_l+0x288>
 8009898:	e7ed      	b.n	8009876 <_strtod_l+0xf6>
 800989a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800989e:	f04f 3aff 	mov.w	sl, #4294967295
 80098a2:	e7e8      	b.n	8009876 <_strtod_l+0xf6>
 80098a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	2b30      	cmp	r3, #48	; 0x30
 80098ae:	d0f9      	beq.n	80098a4 <_strtod_l+0x124>
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0a4      	beq.n	80097fe <_strtod_l+0x7e>
 80098b4:	2301      	movs	r3, #1
 80098b6:	2500      	movs	r5, #0
 80098b8:	9306      	str	r3, [sp, #24]
 80098ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098bc:	9308      	str	r3, [sp, #32]
 80098be:	9507      	str	r5, [sp, #28]
 80098c0:	9505      	str	r5, [sp, #20]
 80098c2:	220a      	movs	r2, #10
 80098c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80098c6:	7807      	ldrb	r7, [r0, #0]
 80098c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80098cc:	b2d9      	uxtb	r1, r3
 80098ce:	2909      	cmp	r1, #9
 80098d0:	d929      	bls.n	8009926 <_strtod_l+0x1a6>
 80098d2:	4622      	mov	r2, r4
 80098d4:	f8d8 1000 	ldr.w	r1, [r8]
 80098d8:	f003 fc46 	bl	800d168 <strncmp>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d031      	beq.n	8009944 <_strtod_l+0x1c4>
 80098e0:	2000      	movs	r0, #0
 80098e2:	9c05      	ldr	r4, [sp, #20]
 80098e4:	9004      	str	r0, [sp, #16]
 80098e6:	463b      	mov	r3, r7
 80098e8:	4602      	mov	r2, r0
 80098ea:	2b65      	cmp	r3, #101	; 0x65
 80098ec:	d001      	beq.n	80098f2 <_strtod_l+0x172>
 80098ee:	2b45      	cmp	r3, #69	; 0x45
 80098f0:	d114      	bne.n	800991c <_strtod_l+0x19c>
 80098f2:	b924      	cbnz	r4, 80098fe <_strtod_l+0x17e>
 80098f4:	b910      	cbnz	r0, 80098fc <_strtod_l+0x17c>
 80098f6:	9b06      	ldr	r3, [sp, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d09e      	beq.n	800983a <_strtod_l+0xba>
 80098fc:	2400      	movs	r4, #0
 80098fe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009900:	1c73      	adds	r3, r6, #1
 8009902:	931b      	str	r3, [sp, #108]	; 0x6c
 8009904:	7873      	ldrb	r3, [r6, #1]
 8009906:	2b2b      	cmp	r3, #43	; 0x2b
 8009908:	d078      	beq.n	80099fc <_strtod_l+0x27c>
 800990a:	2b2d      	cmp	r3, #45	; 0x2d
 800990c:	d070      	beq.n	80099f0 <_strtod_l+0x270>
 800990e:	f04f 0c00 	mov.w	ip, #0
 8009912:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009916:	2f09      	cmp	r7, #9
 8009918:	d97c      	bls.n	8009a14 <_strtod_l+0x294>
 800991a:	961b      	str	r6, [sp, #108]	; 0x6c
 800991c:	f04f 0e00 	mov.w	lr, #0
 8009920:	e09a      	b.n	8009a58 <_strtod_l+0x2d8>
 8009922:	2300      	movs	r3, #0
 8009924:	e7c7      	b.n	80098b6 <_strtod_l+0x136>
 8009926:	9905      	ldr	r1, [sp, #20]
 8009928:	2908      	cmp	r1, #8
 800992a:	bfdd      	ittte	le
 800992c:	9907      	ldrle	r1, [sp, #28]
 800992e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009932:	9307      	strle	r3, [sp, #28]
 8009934:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009938:	9b05      	ldr	r3, [sp, #20]
 800993a:	3001      	adds	r0, #1
 800993c:	3301      	adds	r3, #1
 800993e:	9305      	str	r3, [sp, #20]
 8009940:	901b      	str	r0, [sp, #108]	; 0x6c
 8009942:	e7bf      	b.n	80098c4 <_strtod_l+0x144>
 8009944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009946:	191a      	adds	r2, r3, r4
 8009948:	921b      	str	r2, [sp, #108]	; 0x6c
 800994a:	9a05      	ldr	r2, [sp, #20]
 800994c:	5d1b      	ldrb	r3, [r3, r4]
 800994e:	2a00      	cmp	r2, #0
 8009950:	d037      	beq.n	80099c2 <_strtod_l+0x242>
 8009952:	9c05      	ldr	r4, [sp, #20]
 8009954:	4602      	mov	r2, r0
 8009956:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800995a:	2909      	cmp	r1, #9
 800995c:	d913      	bls.n	8009986 <_strtod_l+0x206>
 800995e:	2101      	movs	r1, #1
 8009960:	9104      	str	r1, [sp, #16]
 8009962:	e7c2      	b.n	80098ea <_strtod_l+0x16a>
 8009964:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009966:	1c5a      	adds	r2, r3, #1
 8009968:	921b      	str	r2, [sp, #108]	; 0x6c
 800996a:	785b      	ldrb	r3, [r3, #1]
 800996c:	3001      	adds	r0, #1
 800996e:	2b30      	cmp	r3, #48	; 0x30
 8009970:	d0f8      	beq.n	8009964 <_strtod_l+0x1e4>
 8009972:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009976:	2a08      	cmp	r2, #8
 8009978:	f200 84e4 	bhi.w	800a344 <_strtod_l+0xbc4>
 800997c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800997e:	9208      	str	r2, [sp, #32]
 8009980:	4602      	mov	r2, r0
 8009982:	2000      	movs	r0, #0
 8009984:	4604      	mov	r4, r0
 8009986:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800998a:	f100 0101 	add.w	r1, r0, #1
 800998e:	d012      	beq.n	80099b6 <_strtod_l+0x236>
 8009990:	440a      	add	r2, r1
 8009992:	eb00 0c04 	add.w	ip, r0, r4
 8009996:	4621      	mov	r1, r4
 8009998:	270a      	movs	r7, #10
 800999a:	458c      	cmp	ip, r1
 800999c:	d113      	bne.n	80099c6 <_strtod_l+0x246>
 800999e:	1821      	adds	r1, r4, r0
 80099a0:	2908      	cmp	r1, #8
 80099a2:	f104 0401 	add.w	r4, r4, #1
 80099a6:	4404      	add	r4, r0
 80099a8:	dc19      	bgt.n	80099de <_strtod_l+0x25e>
 80099aa:	9b07      	ldr	r3, [sp, #28]
 80099ac:	210a      	movs	r1, #10
 80099ae:	fb01 e303 	mla	r3, r1, r3, lr
 80099b2:	9307      	str	r3, [sp, #28]
 80099b4:	2100      	movs	r1, #0
 80099b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099b8:	1c58      	adds	r0, r3, #1
 80099ba:	901b      	str	r0, [sp, #108]	; 0x6c
 80099bc:	785b      	ldrb	r3, [r3, #1]
 80099be:	4608      	mov	r0, r1
 80099c0:	e7c9      	b.n	8009956 <_strtod_l+0x1d6>
 80099c2:	9805      	ldr	r0, [sp, #20]
 80099c4:	e7d3      	b.n	800996e <_strtod_l+0x1ee>
 80099c6:	2908      	cmp	r1, #8
 80099c8:	f101 0101 	add.w	r1, r1, #1
 80099cc:	dc03      	bgt.n	80099d6 <_strtod_l+0x256>
 80099ce:	9b07      	ldr	r3, [sp, #28]
 80099d0:	437b      	muls	r3, r7
 80099d2:	9307      	str	r3, [sp, #28]
 80099d4:	e7e1      	b.n	800999a <_strtod_l+0x21a>
 80099d6:	2910      	cmp	r1, #16
 80099d8:	bfd8      	it	le
 80099da:	437d      	mulle	r5, r7
 80099dc:	e7dd      	b.n	800999a <_strtod_l+0x21a>
 80099de:	2c10      	cmp	r4, #16
 80099e0:	bfdc      	itt	le
 80099e2:	210a      	movle	r1, #10
 80099e4:	fb01 e505 	mlale	r5, r1, r5, lr
 80099e8:	e7e4      	b.n	80099b4 <_strtod_l+0x234>
 80099ea:	2301      	movs	r3, #1
 80099ec:	9304      	str	r3, [sp, #16]
 80099ee:	e781      	b.n	80098f4 <_strtod_l+0x174>
 80099f0:	f04f 0c01 	mov.w	ip, #1
 80099f4:	1cb3      	adds	r3, r6, #2
 80099f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80099f8:	78b3      	ldrb	r3, [r6, #2]
 80099fa:	e78a      	b.n	8009912 <_strtod_l+0x192>
 80099fc:	f04f 0c00 	mov.w	ip, #0
 8009a00:	e7f8      	b.n	80099f4 <_strtod_l+0x274>
 8009a02:	bf00      	nop
 8009a04:	080100b8 	.word	0x080100b8
 8009a08:	7ff00000 	.word	0x7ff00000
 8009a0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a0e:	1c5f      	adds	r7, r3, #1
 8009a10:	971b      	str	r7, [sp, #108]	; 0x6c
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	2b30      	cmp	r3, #48	; 0x30
 8009a16:	d0f9      	beq.n	8009a0c <_strtod_l+0x28c>
 8009a18:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009a1c:	2f08      	cmp	r7, #8
 8009a1e:	f63f af7d 	bhi.w	800991c <_strtod_l+0x19c>
 8009a22:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009a26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a28:	930a      	str	r3, [sp, #40]	; 0x28
 8009a2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a2c:	1c5f      	adds	r7, r3, #1
 8009a2e:	971b      	str	r7, [sp, #108]	; 0x6c
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009a36:	f1b8 0f09 	cmp.w	r8, #9
 8009a3a:	d937      	bls.n	8009aac <_strtod_l+0x32c>
 8009a3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a3e:	1a7f      	subs	r7, r7, r1
 8009a40:	2f08      	cmp	r7, #8
 8009a42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009a46:	dc37      	bgt.n	8009ab8 <_strtod_l+0x338>
 8009a48:	45be      	cmp	lr, r7
 8009a4a:	bfa8      	it	ge
 8009a4c:	46be      	movge	lr, r7
 8009a4e:	f1bc 0f00 	cmp.w	ip, #0
 8009a52:	d001      	beq.n	8009a58 <_strtod_l+0x2d8>
 8009a54:	f1ce 0e00 	rsb	lr, lr, #0
 8009a58:	2c00      	cmp	r4, #0
 8009a5a:	d151      	bne.n	8009b00 <_strtod_l+0x380>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f47f aece 	bne.w	80097fe <_strtod_l+0x7e>
 8009a62:	9a06      	ldr	r2, [sp, #24]
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	f47f aeca 	bne.w	80097fe <_strtod_l+0x7e>
 8009a6a:	9a04      	ldr	r2, [sp, #16]
 8009a6c:	2a00      	cmp	r2, #0
 8009a6e:	f47f aee4 	bne.w	800983a <_strtod_l+0xba>
 8009a72:	2b4e      	cmp	r3, #78	; 0x4e
 8009a74:	d027      	beq.n	8009ac6 <_strtod_l+0x346>
 8009a76:	dc21      	bgt.n	8009abc <_strtod_l+0x33c>
 8009a78:	2b49      	cmp	r3, #73	; 0x49
 8009a7a:	f47f aede 	bne.w	800983a <_strtod_l+0xba>
 8009a7e:	49a0      	ldr	r1, [pc, #640]	; (8009d00 <_strtod_l+0x580>)
 8009a80:	a81b      	add	r0, sp, #108	; 0x6c
 8009a82:	f002 f831 	bl	800bae8 <__match>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f43f aed7 	beq.w	800983a <_strtod_l+0xba>
 8009a8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a8e:	499d      	ldr	r1, [pc, #628]	; (8009d04 <_strtod_l+0x584>)
 8009a90:	3b01      	subs	r3, #1
 8009a92:	a81b      	add	r0, sp, #108	; 0x6c
 8009a94:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a96:	f002 f827 	bl	800bae8 <__match>
 8009a9a:	b910      	cbnz	r0, 8009aa2 <_strtod_l+0x322>
 8009a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	931b      	str	r3, [sp, #108]	; 0x6c
 8009aa2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009d18 <_strtod_l+0x598>
 8009aa6:	f04f 0a00 	mov.w	sl, #0
 8009aaa:	e6a8      	b.n	80097fe <_strtod_l+0x7e>
 8009aac:	210a      	movs	r1, #10
 8009aae:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009ab2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009ab6:	e7b8      	b.n	8009a2a <_strtod_l+0x2aa>
 8009ab8:	46be      	mov	lr, r7
 8009aba:	e7c8      	b.n	8009a4e <_strtod_l+0x2ce>
 8009abc:	2b69      	cmp	r3, #105	; 0x69
 8009abe:	d0de      	beq.n	8009a7e <_strtod_l+0x2fe>
 8009ac0:	2b6e      	cmp	r3, #110	; 0x6e
 8009ac2:	f47f aeba 	bne.w	800983a <_strtod_l+0xba>
 8009ac6:	4990      	ldr	r1, [pc, #576]	; (8009d08 <_strtod_l+0x588>)
 8009ac8:	a81b      	add	r0, sp, #108	; 0x6c
 8009aca:	f002 f80d 	bl	800bae8 <__match>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	f43f aeb3 	beq.w	800983a <_strtod_l+0xba>
 8009ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2b28      	cmp	r3, #40	; 0x28
 8009ada:	d10e      	bne.n	8009afa <_strtod_l+0x37a>
 8009adc:	aa1e      	add	r2, sp, #120	; 0x78
 8009ade:	498b      	ldr	r1, [pc, #556]	; (8009d0c <_strtod_l+0x58c>)
 8009ae0:	a81b      	add	r0, sp, #108	; 0x6c
 8009ae2:	f002 f815 	bl	800bb10 <__hexnan>
 8009ae6:	2805      	cmp	r0, #5
 8009ae8:	d107      	bne.n	8009afa <_strtod_l+0x37a>
 8009aea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009aec:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009af0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009af4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009af8:	e681      	b.n	80097fe <_strtod_l+0x7e>
 8009afa:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009d20 <_strtod_l+0x5a0>
 8009afe:	e7d2      	b.n	8009aa6 <_strtod_l+0x326>
 8009b00:	ebae 0302 	sub.w	r3, lr, r2
 8009b04:	9306      	str	r3, [sp, #24]
 8009b06:	9b05      	ldr	r3, [sp, #20]
 8009b08:	9807      	ldr	r0, [sp, #28]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	bf08      	it	eq
 8009b0e:	4623      	moveq	r3, r4
 8009b10:	2c10      	cmp	r4, #16
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	46a0      	mov	r8, r4
 8009b16:	bfa8      	it	ge
 8009b18:	f04f 0810 	movge.w	r8, #16
 8009b1c:	f7f6 fcfa 	bl	8000514 <__aeabi_ui2d>
 8009b20:	2c09      	cmp	r4, #9
 8009b22:	4682      	mov	sl, r0
 8009b24:	468b      	mov	fp, r1
 8009b26:	dc13      	bgt.n	8009b50 <_strtod_l+0x3d0>
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f43f ae67 	beq.w	80097fe <_strtod_l+0x7e>
 8009b30:	9b06      	ldr	r3, [sp, #24]
 8009b32:	dd7a      	ble.n	8009c2a <_strtod_l+0x4aa>
 8009b34:	2b16      	cmp	r3, #22
 8009b36:	dc61      	bgt.n	8009bfc <_strtod_l+0x47c>
 8009b38:	4a75      	ldr	r2, [pc, #468]	; (8009d10 <_strtod_l+0x590>)
 8009b3a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009b3e:	e9de 0100 	ldrd	r0, r1, [lr]
 8009b42:	4652      	mov	r2, sl
 8009b44:	465b      	mov	r3, fp
 8009b46:	f7f6 fd5f 	bl	8000608 <__aeabi_dmul>
 8009b4a:	4682      	mov	sl, r0
 8009b4c:	468b      	mov	fp, r1
 8009b4e:	e656      	b.n	80097fe <_strtod_l+0x7e>
 8009b50:	4b6f      	ldr	r3, [pc, #444]	; (8009d10 <_strtod_l+0x590>)
 8009b52:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009b56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b5a:	f7f6 fd55 	bl	8000608 <__aeabi_dmul>
 8009b5e:	4606      	mov	r6, r0
 8009b60:	4628      	mov	r0, r5
 8009b62:	460f      	mov	r7, r1
 8009b64:	f7f6 fcd6 	bl	8000514 <__aeabi_ui2d>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	4639      	mov	r1, r7
 8009b70:	f7f6 fb94 	bl	800029c <__adddf3>
 8009b74:	2c0f      	cmp	r4, #15
 8009b76:	4682      	mov	sl, r0
 8009b78:	468b      	mov	fp, r1
 8009b7a:	ddd5      	ble.n	8009b28 <_strtod_l+0x3a8>
 8009b7c:	9b06      	ldr	r3, [sp, #24]
 8009b7e:	eba4 0808 	sub.w	r8, r4, r8
 8009b82:	4498      	add	r8, r3
 8009b84:	f1b8 0f00 	cmp.w	r8, #0
 8009b88:	f340 8096 	ble.w	8009cb8 <_strtod_l+0x538>
 8009b8c:	f018 030f 	ands.w	r3, r8, #15
 8009b90:	d00a      	beq.n	8009ba8 <_strtod_l+0x428>
 8009b92:	495f      	ldr	r1, [pc, #380]	; (8009d10 <_strtod_l+0x590>)
 8009b94:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b98:	4652      	mov	r2, sl
 8009b9a:	465b      	mov	r3, fp
 8009b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ba0:	f7f6 fd32 	bl	8000608 <__aeabi_dmul>
 8009ba4:	4682      	mov	sl, r0
 8009ba6:	468b      	mov	fp, r1
 8009ba8:	f038 080f 	bics.w	r8, r8, #15
 8009bac:	d073      	beq.n	8009c96 <_strtod_l+0x516>
 8009bae:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009bb2:	dd47      	ble.n	8009c44 <_strtod_l+0x4c4>
 8009bb4:	2400      	movs	r4, #0
 8009bb6:	46a0      	mov	r8, r4
 8009bb8:	9407      	str	r4, [sp, #28]
 8009bba:	9405      	str	r4, [sp, #20]
 8009bbc:	2322      	movs	r3, #34	; 0x22
 8009bbe:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009d18 <_strtod_l+0x598>
 8009bc2:	f8c9 3000 	str.w	r3, [r9]
 8009bc6:	f04f 0a00 	mov.w	sl, #0
 8009bca:	9b07      	ldr	r3, [sp, #28]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f43f ae16 	beq.w	80097fe <_strtod_l+0x7e>
 8009bd2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bd4:	4648      	mov	r0, r9
 8009bd6:	f002 f916 	bl	800be06 <_Bfree>
 8009bda:	9905      	ldr	r1, [sp, #20]
 8009bdc:	4648      	mov	r0, r9
 8009bde:	f002 f912 	bl	800be06 <_Bfree>
 8009be2:	4641      	mov	r1, r8
 8009be4:	4648      	mov	r0, r9
 8009be6:	f002 f90e 	bl	800be06 <_Bfree>
 8009bea:	9907      	ldr	r1, [sp, #28]
 8009bec:	4648      	mov	r0, r9
 8009bee:	f002 f90a 	bl	800be06 <_Bfree>
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4648      	mov	r0, r9
 8009bf6:	f002 f906 	bl	800be06 <_Bfree>
 8009bfa:	e600      	b.n	80097fe <_strtod_l+0x7e>
 8009bfc:	9a06      	ldr	r2, [sp, #24]
 8009bfe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009c02:	4293      	cmp	r3, r2
 8009c04:	dbba      	blt.n	8009b7c <_strtod_l+0x3fc>
 8009c06:	4d42      	ldr	r5, [pc, #264]	; (8009d10 <_strtod_l+0x590>)
 8009c08:	f1c4 040f 	rsb	r4, r4, #15
 8009c0c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009c10:	4652      	mov	r2, sl
 8009c12:	465b      	mov	r3, fp
 8009c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c18:	f7f6 fcf6 	bl	8000608 <__aeabi_dmul>
 8009c1c:	9b06      	ldr	r3, [sp, #24]
 8009c1e:	1b1c      	subs	r4, r3, r4
 8009c20:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009c24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c28:	e78d      	b.n	8009b46 <_strtod_l+0x3c6>
 8009c2a:	f113 0f16 	cmn.w	r3, #22
 8009c2e:	dba5      	blt.n	8009b7c <_strtod_l+0x3fc>
 8009c30:	4a37      	ldr	r2, [pc, #220]	; (8009d10 <_strtod_l+0x590>)
 8009c32:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009c36:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009c3a:	4650      	mov	r0, sl
 8009c3c:	4659      	mov	r1, fp
 8009c3e:	f7f6 fe0d 	bl	800085c <__aeabi_ddiv>
 8009c42:	e782      	b.n	8009b4a <_strtod_l+0x3ca>
 8009c44:	2300      	movs	r3, #0
 8009c46:	4e33      	ldr	r6, [pc, #204]	; (8009d14 <_strtod_l+0x594>)
 8009c48:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009c4c:	4650      	mov	r0, sl
 8009c4e:	4659      	mov	r1, fp
 8009c50:	461d      	mov	r5, r3
 8009c52:	f1b8 0f01 	cmp.w	r8, #1
 8009c56:	dc21      	bgt.n	8009c9c <_strtod_l+0x51c>
 8009c58:	b10b      	cbz	r3, 8009c5e <_strtod_l+0x4de>
 8009c5a:	4682      	mov	sl, r0
 8009c5c:	468b      	mov	fp, r1
 8009c5e:	4b2d      	ldr	r3, [pc, #180]	; (8009d14 <_strtod_l+0x594>)
 8009c60:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c64:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009c68:	4652      	mov	r2, sl
 8009c6a:	465b      	mov	r3, fp
 8009c6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009c70:	f7f6 fcca 	bl	8000608 <__aeabi_dmul>
 8009c74:	4b28      	ldr	r3, [pc, #160]	; (8009d18 <_strtod_l+0x598>)
 8009c76:	460a      	mov	r2, r1
 8009c78:	400b      	ands	r3, r1
 8009c7a:	4928      	ldr	r1, [pc, #160]	; (8009d1c <_strtod_l+0x59c>)
 8009c7c:	428b      	cmp	r3, r1
 8009c7e:	4682      	mov	sl, r0
 8009c80:	d898      	bhi.n	8009bb4 <_strtod_l+0x434>
 8009c82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c86:	428b      	cmp	r3, r1
 8009c88:	bf86      	itte	hi
 8009c8a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009d24 <_strtod_l+0x5a4>
 8009c8e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c92:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009c96:	2300      	movs	r3, #0
 8009c98:	9304      	str	r3, [sp, #16]
 8009c9a:	e077      	b.n	8009d8c <_strtod_l+0x60c>
 8009c9c:	f018 0f01 	tst.w	r8, #1
 8009ca0:	d006      	beq.n	8009cb0 <_strtod_l+0x530>
 8009ca2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f7f6 fcad 	bl	8000608 <__aeabi_dmul>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	3501      	adds	r5, #1
 8009cb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009cb6:	e7cc      	b.n	8009c52 <_strtod_l+0x4d2>
 8009cb8:	d0ed      	beq.n	8009c96 <_strtod_l+0x516>
 8009cba:	f1c8 0800 	rsb	r8, r8, #0
 8009cbe:	f018 020f 	ands.w	r2, r8, #15
 8009cc2:	d00a      	beq.n	8009cda <_strtod_l+0x55a>
 8009cc4:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <_strtod_l+0x590>)
 8009cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cca:	4650      	mov	r0, sl
 8009ccc:	4659      	mov	r1, fp
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fdc3 	bl	800085c <__aeabi_ddiv>
 8009cd6:	4682      	mov	sl, r0
 8009cd8:	468b      	mov	fp, r1
 8009cda:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009cde:	d0da      	beq.n	8009c96 <_strtod_l+0x516>
 8009ce0:	f1b8 0f1f 	cmp.w	r8, #31
 8009ce4:	dd20      	ble.n	8009d28 <_strtod_l+0x5a8>
 8009ce6:	2400      	movs	r4, #0
 8009ce8:	46a0      	mov	r8, r4
 8009cea:	9407      	str	r4, [sp, #28]
 8009cec:	9405      	str	r4, [sp, #20]
 8009cee:	2322      	movs	r3, #34	; 0x22
 8009cf0:	f04f 0a00 	mov.w	sl, #0
 8009cf4:	f04f 0b00 	mov.w	fp, #0
 8009cf8:	f8c9 3000 	str.w	r3, [r9]
 8009cfc:	e765      	b.n	8009bca <_strtod_l+0x44a>
 8009cfe:	bf00      	nop
 8009d00:	08010085 	.word	0x08010085
 8009d04:	0801010b 	.word	0x0801010b
 8009d08:	0801008d 	.word	0x0801008d
 8009d0c:	080100cc 	.word	0x080100cc
 8009d10:	080101b0 	.word	0x080101b0
 8009d14:	08010188 	.word	0x08010188
 8009d18:	7ff00000 	.word	0x7ff00000
 8009d1c:	7ca00000 	.word	0x7ca00000
 8009d20:	fff80000 	.word	0xfff80000
 8009d24:	7fefffff 	.word	0x7fefffff
 8009d28:	f018 0310 	ands.w	r3, r8, #16
 8009d2c:	bf18      	it	ne
 8009d2e:	236a      	movne	r3, #106	; 0x6a
 8009d30:	4da0      	ldr	r5, [pc, #640]	; (8009fb4 <_strtod_l+0x834>)
 8009d32:	9304      	str	r3, [sp, #16]
 8009d34:	4650      	mov	r0, sl
 8009d36:	4659      	mov	r1, fp
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f1b8 0f00 	cmp.w	r8, #0
 8009d3e:	f300 810a 	bgt.w	8009f56 <_strtod_l+0x7d6>
 8009d42:	b10b      	cbz	r3, 8009d48 <_strtod_l+0x5c8>
 8009d44:	4682      	mov	sl, r0
 8009d46:	468b      	mov	fp, r1
 8009d48:	9b04      	ldr	r3, [sp, #16]
 8009d4a:	b1bb      	cbz	r3, 8009d7c <_strtod_l+0x5fc>
 8009d4c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009d50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	4659      	mov	r1, fp
 8009d58:	dd10      	ble.n	8009d7c <_strtod_l+0x5fc>
 8009d5a:	2b1f      	cmp	r3, #31
 8009d5c:	f340 8107 	ble.w	8009f6e <_strtod_l+0x7ee>
 8009d60:	2b34      	cmp	r3, #52	; 0x34
 8009d62:	bfde      	ittt	le
 8009d64:	3b20      	suble	r3, #32
 8009d66:	f04f 32ff 	movle.w	r2, #4294967295
 8009d6a:	fa02 f303 	lslle.w	r3, r2, r3
 8009d6e:	f04f 0a00 	mov.w	sl, #0
 8009d72:	bfcc      	ite	gt
 8009d74:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009d78:	ea03 0b01 	andle.w	fp, r3, r1
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	4650      	mov	r0, sl
 8009d82:	4659      	mov	r1, fp
 8009d84:	f7f6 fea8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d1ac      	bne.n	8009ce6 <_strtod_l+0x566>
 8009d8c:	9b07      	ldr	r3, [sp, #28]
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	9a05      	ldr	r2, [sp, #20]
 8009d92:	9908      	ldr	r1, [sp, #32]
 8009d94:	4623      	mov	r3, r4
 8009d96:	4648      	mov	r0, r9
 8009d98:	f002 f887 	bl	800beaa <__s2b>
 8009d9c:	9007      	str	r0, [sp, #28]
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f43f af08 	beq.w	8009bb4 <_strtod_l+0x434>
 8009da4:	9a06      	ldr	r2, [sp, #24]
 8009da6:	9b06      	ldr	r3, [sp, #24]
 8009da8:	2a00      	cmp	r2, #0
 8009daa:	f1c3 0300 	rsb	r3, r3, #0
 8009dae:	bfa8      	it	ge
 8009db0:	2300      	movge	r3, #0
 8009db2:	930e      	str	r3, [sp, #56]	; 0x38
 8009db4:	2400      	movs	r4, #0
 8009db6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009dba:	9316      	str	r3, [sp, #88]	; 0x58
 8009dbc:	46a0      	mov	r8, r4
 8009dbe:	9b07      	ldr	r3, [sp, #28]
 8009dc0:	4648      	mov	r0, r9
 8009dc2:	6859      	ldr	r1, [r3, #4]
 8009dc4:	f001 ffeb 	bl	800bd9e <_Balloc>
 8009dc8:	9005      	str	r0, [sp, #20]
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	f43f aef6 	beq.w	8009bbc <_strtod_l+0x43c>
 8009dd0:	9b07      	ldr	r3, [sp, #28]
 8009dd2:	691a      	ldr	r2, [r3, #16]
 8009dd4:	3202      	adds	r2, #2
 8009dd6:	f103 010c 	add.w	r1, r3, #12
 8009dda:	0092      	lsls	r2, r2, #2
 8009ddc:	300c      	adds	r0, #12
 8009dde:	f001 ffd1 	bl	800bd84 <memcpy>
 8009de2:	aa1e      	add	r2, sp, #120	; 0x78
 8009de4:	a91d      	add	r1, sp, #116	; 0x74
 8009de6:	ec4b ab10 	vmov	d0, sl, fp
 8009dea:	4648      	mov	r0, r9
 8009dec:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009df0:	f002 fb16 	bl	800c420 <__d2b>
 8009df4:	901c      	str	r0, [sp, #112]	; 0x70
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f43f aee0 	beq.w	8009bbc <_strtod_l+0x43c>
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	4648      	mov	r0, r9
 8009e00:	f002 f8df 	bl	800bfc2 <__i2b>
 8009e04:	4680      	mov	r8, r0
 8009e06:	2800      	cmp	r0, #0
 8009e08:	f43f aed8 	beq.w	8009bbc <_strtod_l+0x43c>
 8009e0c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009e0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009e10:	2e00      	cmp	r6, #0
 8009e12:	bfab      	itete	ge
 8009e14:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009e16:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009e18:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009e1a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009e1c:	bfac      	ite	ge
 8009e1e:	18f7      	addge	r7, r6, r3
 8009e20:	1b9d      	sublt	r5, r3, r6
 8009e22:	9b04      	ldr	r3, [sp, #16]
 8009e24:	1af6      	subs	r6, r6, r3
 8009e26:	4416      	add	r6, r2
 8009e28:	4b63      	ldr	r3, [pc, #396]	; (8009fb8 <_strtod_l+0x838>)
 8009e2a:	3e01      	subs	r6, #1
 8009e2c:	429e      	cmp	r6, r3
 8009e2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e32:	f280 80af 	bge.w	8009f94 <_strtod_l+0x814>
 8009e36:	1b9b      	subs	r3, r3, r6
 8009e38:	2b1f      	cmp	r3, #31
 8009e3a:	eba2 0203 	sub.w	r2, r2, r3
 8009e3e:	f04f 0101 	mov.w	r1, #1
 8009e42:	f300 809b 	bgt.w	8009f7c <_strtod_l+0x7fc>
 8009e46:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e50:	18be      	adds	r6, r7, r2
 8009e52:	9b04      	ldr	r3, [sp, #16]
 8009e54:	42b7      	cmp	r7, r6
 8009e56:	4415      	add	r5, r2
 8009e58:	441d      	add	r5, r3
 8009e5a:	463b      	mov	r3, r7
 8009e5c:	bfa8      	it	ge
 8009e5e:	4633      	movge	r3, r6
 8009e60:	42ab      	cmp	r3, r5
 8009e62:	bfa8      	it	ge
 8009e64:	462b      	movge	r3, r5
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	bfc2      	ittt	gt
 8009e6a:	1af6      	subgt	r6, r6, r3
 8009e6c:	1aed      	subgt	r5, r5, r3
 8009e6e:	1aff      	subgt	r7, r7, r3
 8009e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e72:	b1bb      	cbz	r3, 8009ea4 <_strtod_l+0x724>
 8009e74:	4641      	mov	r1, r8
 8009e76:	461a      	mov	r2, r3
 8009e78:	4648      	mov	r0, r9
 8009e7a:	f002 f941 	bl	800c100 <__pow5mult>
 8009e7e:	4680      	mov	r8, r0
 8009e80:	2800      	cmp	r0, #0
 8009e82:	f43f ae9b 	beq.w	8009bbc <_strtod_l+0x43c>
 8009e86:	4601      	mov	r1, r0
 8009e88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e8a:	4648      	mov	r0, r9
 8009e8c:	f002 f8a2 	bl	800bfd4 <__multiply>
 8009e90:	900c      	str	r0, [sp, #48]	; 0x30
 8009e92:	2800      	cmp	r0, #0
 8009e94:	f43f ae92 	beq.w	8009bbc <_strtod_l+0x43c>
 8009e98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e9a:	4648      	mov	r0, r9
 8009e9c:	f001 ffb3 	bl	800be06 <_Bfree>
 8009ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ea2:	931c      	str	r3, [sp, #112]	; 0x70
 8009ea4:	2e00      	cmp	r6, #0
 8009ea6:	dc7a      	bgt.n	8009f9e <_strtod_l+0x81e>
 8009ea8:	9b06      	ldr	r3, [sp, #24]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	dd08      	ble.n	8009ec0 <_strtod_l+0x740>
 8009eae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009eb0:	9905      	ldr	r1, [sp, #20]
 8009eb2:	4648      	mov	r0, r9
 8009eb4:	f002 f924 	bl	800c100 <__pow5mult>
 8009eb8:	9005      	str	r0, [sp, #20]
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	f43f ae7e 	beq.w	8009bbc <_strtod_l+0x43c>
 8009ec0:	2d00      	cmp	r5, #0
 8009ec2:	dd08      	ble.n	8009ed6 <_strtod_l+0x756>
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	9905      	ldr	r1, [sp, #20]
 8009ec8:	4648      	mov	r0, r9
 8009eca:	f002 f967 	bl	800c19c <__lshift>
 8009ece:	9005      	str	r0, [sp, #20]
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	f43f ae73 	beq.w	8009bbc <_strtod_l+0x43c>
 8009ed6:	2f00      	cmp	r7, #0
 8009ed8:	dd08      	ble.n	8009eec <_strtod_l+0x76c>
 8009eda:	4641      	mov	r1, r8
 8009edc:	463a      	mov	r2, r7
 8009ede:	4648      	mov	r0, r9
 8009ee0:	f002 f95c 	bl	800c19c <__lshift>
 8009ee4:	4680      	mov	r8, r0
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	f43f ae68 	beq.w	8009bbc <_strtod_l+0x43c>
 8009eec:	9a05      	ldr	r2, [sp, #20]
 8009eee:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ef0:	4648      	mov	r0, r9
 8009ef2:	f002 f9c1 	bl	800c278 <__mdiff>
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	f43f ae5f 	beq.w	8009bbc <_strtod_l+0x43c>
 8009efe:	68c3      	ldr	r3, [r0, #12]
 8009f00:	930c      	str	r3, [sp, #48]	; 0x30
 8009f02:	2300      	movs	r3, #0
 8009f04:	60c3      	str	r3, [r0, #12]
 8009f06:	4641      	mov	r1, r8
 8009f08:	f002 f99c 	bl	800c244 <__mcmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	da55      	bge.n	8009fbc <_strtod_l+0x83c>
 8009f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f12:	b9e3      	cbnz	r3, 8009f4e <_strtod_l+0x7ce>
 8009f14:	f1ba 0f00 	cmp.w	sl, #0
 8009f18:	d119      	bne.n	8009f4e <_strtod_l+0x7ce>
 8009f1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f1e:	b9b3      	cbnz	r3, 8009f4e <_strtod_l+0x7ce>
 8009f20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f24:	0d1b      	lsrs	r3, r3, #20
 8009f26:	051b      	lsls	r3, r3, #20
 8009f28:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f2c:	d90f      	bls.n	8009f4e <_strtod_l+0x7ce>
 8009f2e:	6963      	ldr	r3, [r4, #20]
 8009f30:	b913      	cbnz	r3, 8009f38 <_strtod_l+0x7b8>
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	dd0a      	ble.n	8009f4e <_strtod_l+0x7ce>
 8009f38:	4621      	mov	r1, r4
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	4648      	mov	r0, r9
 8009f3e:	f002 f92d 	bl	800c19c <__lshift>
 8009f42:	4641      	mov	r1, r8
 8009f44:	4604      	mov	r4, r0
 8009f46:	f002 f97d 	bl	800c244 <__mcmp>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	dc67      	bgt.n	800a01e <_strtod_l+0x89e>
 8009f4e:	9b04      	ldr	r3, [sp, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d171      	bne.n	800a038 <_strtod_l+0x8b8>
 8009f54:	e63d      	b.n	8009bd2 <_strtod_l+0x452>
 8009f56:	f018 0f01 	tst.w	r8, #1
 8009f5a:	d004      	beq.n	8009f66 <_strtod_l+0x7e6>
 8009f5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f60:	f7f6 fb52 	bl	8000608 <__aeabi_dmul>
 8009f64:	2301      	movs	r3, #1
 8009f66:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009f6a:	3508      	adds	r5, #8
 8009f6c:	e6e5      	b.n	8009d3a <_strtod_l+0x5ba>
 8009f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f72:	fa02 f303 	lsl.w	r3, r2, r3
 8009f76:	ea03 0a0a 	and.w	sl, r3, sl
 8009f7a:	e6ff      	b.n	8009d7c <_strtod_l+0x5fc>
 8009f7c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009f80:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009f84:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009f88:	36e2      	adds	r6, #226	; 0xe2
 8009f8a:	fa01 f306 	lsl.w	r3, r1, r6
 8009f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f90:	910f      	str	r1, [sp, #60]	; 0x3c
 8009f92:	e75d      	b.n	8009e50 <_strtod_l+0x6d0>
 8009f94:	2300      	movs	r3, #0
 8009f96:	930a      	str	r3, [sp, #40]	; 0x28
 8009f98:	2301      	movs	r3, #1
 8009f9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f9c:	e758      	b.n	8009e50 <_strtod_l+0x6d0>
 8009f9e:	4632      	mov	r2, r6
 8009fa0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009fa2:	4648      	mov	r0, r9
 8009fa4:	f002 f8fa 	bl	800c19c <__lshift>
 8009fa8:	901c      	str	r0, [sp, #112]	; 0x70
 8009faa:	2800      	cmp	r0, #0
 8009fac:	f47f af7c 	bne.w	8009ea8 <_strtod_l+0x728>
 8009fb0:	e604      	b.n	8009bbc <_strtod_l+0x43c>
 8009fb2:	bf00      	nop
 8009fb4:	080100e0 	.word	0x080100e0
 8009fb8:	fffffc02 	.word	0xfffffc02
 8009fbc:	465d      	mov	r5, fp
 8009fbe:	f040 8086 	bne.w	800a0ce <_strtod_l+0x94e>
 8009fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fc8:	b32a      	cbz	r2, 800a016 <_strtod_l+0x896>
 8009fca:	4aaf      	ldr	r2, [pc, #700]	; (800a288 <_strtod_l+0xb08>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d153      	bne.n	800a078 <_strtod_l+0x8f8>
 8009fd0:	9b04      	ldr	r3, [sp, #16]
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	b1d3      	cbz	r3, 800a00c <_strtod_l+0x88c>
 8009fd6:	4aad      	ldr	r2, [pc, #692]	; (800a28c <_strtod_l+0xb0c>)
 8009fd8:	402a      	ands	r2, r5
 8009fda:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009fde:	f04f 31ff 	mov.w	r1, #4294967295
 8009fe2:	d816      	bhi.n	800a012 <_strtod_l+0x892>
 8009fe4:	0d12      	lsrs	r2, r2, #20
 8009fe6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009fea:	fa01 f303 	lsl.w	r3, r1, r3
 8009fee:	4298      	cmp	r0, r3
 8009ff0:	d142      	bne.n	800a078 <_strtod_l+0x8f8>
 8009ff2:	4ba7      	ldr	r3, [pc, #668]	; (800a290 <_strtod_l+0xb10>)
 8009ff4:	429d      	cmp	r5, r3
 8009ff6:	d102      	bne.n	8009ffe <_strtod_l+0x87e>
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	f43f addf 	beq.w	8009bbc <_strtod_l+0x43c>
 8009ffe:	4ba3      	ldr	r3, [pc, #652]	; (800a28c <_strtod_l+0xb0c>)
 800a000:	402b      	ands	r3, r5
 800a002:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a006:	f04f 0a00 	mov.w	sl, #0
 800a00a:	e7a0      	b.n	8009f4e <_strtod_l+0x7ce>
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295
 800a010:	e7ed      	b.n	8009fee <_strtod_l+0x86e>
 800a012:	460b      	mov	r3, r1
 800a014:	e7eb      	b.n	8009fee <_strtod_l+0x86e>
 800a016:	bb7b      	cbnz	r3, 800a078 <_strtod_l+0x8f8>
 800a018:	f1ba 0f00 	cmp.w	sl, #0
 800a01c:	d12c      	bne.n	800a078 <_strtod_l+0x8f8>
 800a01e:	9904      	ldr	r1, [sp, #16]
 800a020:	4a9a      	ldr	r2, [pc, #616]	; (800a28c <_strtod_l+0xb0c>)
 800a022:	465b      	mov	r3, fp
 800a024:	b1f1      	cbz	r1, 800a064 <_strtod_l+0x8e4>
 800a026:	ea02 010b 	and.w	r1, r2, fp
 800a02a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a02e:	dc19      	bgt.n	800a064 <_strtod_l+0x8e4>
 800a030:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a034:	f77f ae5b 	ble.w	8009cee <_strtod_l+0x56e>
 800a038:	4a96      	ldr	r2, [pc, #600]	; (800a294 <_strtod_l+0xb14>)
 800a03a:	2300      	movs	r3, #0
 800a03c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a040:	4650      	mov	r0, sl
 800a042:	4659      	mov	r1, fp
 800a044:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a048:	f7f6 fade 	bl	8000608 <__aeabi_dmul>
 800a04c:	4682      	mov	sl, r0
 800a04e:	468b      	mov	fp, r1
 800a050:	2900      	cmp	r1, #0
 800a052:	f47f adbe 	bne.w	8009bd2 <_strtod_l+0x452>
 800a056:	2800      	cmp	r0, #0
 800a058:	f47f adbb 	bne.w	8009bd2 <_strtod_l+0x452>
 800a05c:	2322      	movs	r3, #34	; 0x22
 800a05e:	f8c9 3000 	str.w	r3, [r9]
 800a062:	e5b6      	b.n	8009bd2 <_strtod_l+0x452>
 800a064:	4013      	ands	r3, r2
 800a066:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a06a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a06e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a072:	f04f 3aff 	mov.w	sl, #4294967295
 800a076:	e76a      	b.n	8009f4e <_strtod_l+0x7ce>
 800a078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07a:	b193      	cbz	r3, 800a0a2 <_strtod_l+0x922>
 800a07c:	422b      	tst	r3, r5
 800a07e:	f43f af66 	beq.w	8009f4e <_strtod_l+0x7ce>
 800a082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a084:	9a04      	ldr	r2, [sp, #16]
 800a086:	4650      	mov	r0, sl
 800a088:	4659      	mov	r1, fp
 800a08a:	b173      	cbz	r3, 800a0aa <_strtod_l+0x92a>
 800a08c:	f7ff fb5a 	bl	8009744 <sulp>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a098:	f7f6 f900 	bl	800029c <__adddf3>
 800a09c:	4682      	mov	sl, r0
 800a09e:	468b      	mov	fp, r1
 800a0a0:	e755      	b.n	8009f4e <_strtod_l+0x7ce>
 800a0a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0a4:	ea13 0f0a 	tst.w	r3, sl
 800a0a8:	e7e9      	b.n	800a07e <_strtod_l+0x8fe>
 800a0aa:	f7ff fb4b 	bl	8009744 <sulp>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0b6:	f7f6 f8ef 	bl	8000298 <__aeabi_dsub>
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4682      	mov	sl, r0
 800a0c0:	468b      	mov	fp, r1
 800a0c2:	f7f6 fd09 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f47f ae11 	bne.w	8009cee <_strtod_l+0x56e>
 800a0cc:	e73f      	b.n	8009f4e <_strtod_l+0x7ce>
 800a0ce:	4641      	mov	r1, r8
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f002 f9f4 	bl	800c4be <__ratio>
 800a0d6:	ec57 6b10 	vmov	r6, r7, d0
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0e0:	ee10 0a10 	vmov	r0, s0
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	f7f6 fd0b 	bl	8000b00 <__aeabi_dcmple>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d077      	beq.n	800a1de <_strtod_l+0xa5e>
 800a0ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d04a      	beq.n	800a18a <_strtod_l+0xa0a>
 800a0f4:	4b68      	ldr	r3, [pc, #416]	; (800a298 <_strtod_l+0xb18>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a0fc:	4f66      	ldr	r7, [pc, #408]	; (800a298 <_strtod_l+0xb18>)
 800a0fe:	2600      	movs	r6, #0
 800a100:	4b62      	ldr	r3, [pc, #392]	; (800a28c <_strtod_l+0xb0c>)
 800a102:	402b      	ands	r3, r5
 800a104:	930f      	str	r3, [sp, #60]	; 0x3c
 800a106:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a108:	4b64      	ldr	r3, [pc, #400]	; (800a29c <_strtod_l+0xb1c>)
 800a10a:	429a      	cmp	r2, r3
 800a10c:	f040 80ce 	bne.w	800a2ac <_strtod_l+0xb2c>
 800a110:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a114:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a118:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a11c:	ec4b ab10 	vmov	d0, sl, fp
 800a120:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a124:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a128:	f002 f904 	bl	800c334 <__ulp>
 800a12c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a130:	ec53 2b10 	vmov	r2, r3, d0
 800a134:	f7f6 fa68 	bl	8000608 <__aeabi_dmul>
 800a138:	4652      	mov	r2, sl
 800a13a:	465b      	mov	r3, fp
 800a13c:	f7f6 f8ae 	bl	800029c <__adddf3>
 800a140:	460b      	mov	r3, r1
 800a142:	4952      	ldr	r1, [pc, #328]	; (800a28c <_strtod_l+0xb0c>)
 800a144:	4a56      	ldr	r2, [pc, #344]	; (800a2a0 <_strtod_l+0xb20>)
 800a146:	4019      	ands	r1, r3
 800a148:	4291      	cmp	r1, r2
 800a14a:	4682      	mov	sl, r0
 800a14c:	d95b      	bls.n	800a206 <_strtod_l+0xa86>
 800a14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a150:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a154:	4293      	cmp	r3, r2
 800a156:	d103      	bne.n	800a160 <_strtod_l+0x9e0>
 800a158:	9b08      	ldr	r3, [sp, #32]
 800a15a:	3301      	adds	r3, #1
 800a15c:	f43f ad2e 	beq.w	8009bbc <_strtod_l+0x43c>
 800a160:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a290 <_strtod_l+0xb10>
 800a164:	f04f 3aff 	mov.w	sl, #4294967295
 800a168:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a16a:	4648      	mov	r0, r9
 800a16c:	f001 fe4b 	bl	800be06 <_Bfree>
 800a170:	9905      	ldr	r1, [sp, #20]
 800a172:	4648      	mov	r0, r9
 800a174:	f001 fe47 	bl	800be06 <_Bfree>
 800a178:	4641      	mov	r1, r8
 800a17a:	4648      	mov	r0, r9
 800a17c:	f001 fe43 	bl	800be06 <_Bfree>
 800a180:	4621      	mov	r1, r4
 800a182:	4648      	mov	r0, r9
 800a184:	f001 fe3f 	bl	800be06 <_Bfree>
 800a188:	e619      	b.n	8009dbe <_strtod_l+0x63e>
 800a18a:	f1ba 0f00 	cmp.w	sl, #0
 800a18e:	d11a      	bne.n	800a1c6 <_strtod_l+0xa46>
 800a190:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a194:	b9eb      	cbnz	r3, 800a1d2 <_strtod_l+0xa52>
 800a196:	2200      	movs	r2, #0
 800a198:	4b3f      	ldr	r3, [pc, #252]	; (800a298 <_strtod_l+0xb18>)
 800a19a:	4630      	mov	r0, r6
 800a19c:	4639      	mov	r1, r7
 800a19e:	f7f6 fca5 	bl	8000aec <__aeabi_dcmplt>
 800a1a2:	b9c8      	cbnz	r0, 800a1d8 <_strtod_l+0xa58>
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	4639      	mov	r1, r7
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	4b3e      	ldr	r3, [pc, #248]	; (800a2a4 <_strtod_l+0xb24>)
 800a1ac:	f7f6 fa2c 	bl	8000608 <__aeabi_dmul>
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	460f      	mov	r7, r1
 800a1b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a1b8:	9618      	str	r6, [sp, #96]	; 0x60
 800a1ba:	9319      	str	r3, [sp, #100]	; 0x64
 800a1bc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a1c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a1c4:	e79c      	b.n	800a100 <_strtod_l+0x980>
 800a1c6:	f1ba 0f01 	cmp.w	sl, #1
 800a1ca:	d102      	bne.n	800a1d2 <_strtod_l+0xa52>
 800a1cc:	2d00      	cmp	r5, #0
 800a1ce:	f43f ad8e 	beq.w	8009cee <_strtod_l+0x56e>
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	4b34      	ldr	r3, [pc, #208]	; (800a2a8 <_strtod_l+0xb28>)
 800a1d6:	e78f      	b.n	800a0f8 <_strtod_l+0x978>
 800a1d8:	2600      	movs	r6, #0
 800a1da:	4f32      	ldr	r7, [pc, #200]	; (800a2a4 <_strtod_l+0xb24>)
 800a1dc:	e7ea      	b.n	800a1b4 <_strtod_l+0xa34>
 800a1de:	4b31      	ldr	r3, [pc, #196]	; (800a2a4 <_strtod_l+0xb24>)
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f7f6 fa0f 	bl	8000608 <__aeabi_dmul>
 800a1ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	460f      	mov	r7, r1
 800a1f0:	b933      	cbnz	r3, 800a200 <_strtod_l+0xa80>
 800a1f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1f6:	9010      	str	r0, [sp, #64]	; 0x40
 800a1f8:	9311      	str	r3, [sp, #68]	; 0x44
 800a1fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1fe:	e7df      	b.n	800a1c0 <_strtod_l+0xa40>
 800a200:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a204:	e7f9      	b.n	800a1fa <_strtod_l+0xa7a>
 800a206:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a20a:	9b04      	ldr	r3, [sp, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1ab      	bne.n	800a168 <_strtod_l+0x9e8>
 800a210:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a214:	0d1b      	lsrs	r3, r3, #20
 800a216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a218:	051b      	lsls	r3, r3, #20
 800a21a:	429a      	cmp	r2, r3
 800a21c:	465d      	mov	r5, fp
 800a21e:	d1a3      	bne.n	800a168 <_strtod_l+0x9e8>
 800a220:	4639      	mov	r1, r7
 800a222:	4630      	mov	r0, r6
 800a224:	f7f6 fca0 	bl	8000b68 <__aeabi_d2iz>
 800a228:	f7f6 f984 	bl	8000534 <__aeabi_i2d>
 800a22c:	460b      	mov	r3, r1
 800a22e:	4602      	mov	r2, r0
 800a230:	4639      	mov	r1, r7
 800a232:	4630      	mov	r0, r6
 800a234:	f7f6 f830 	bl	8000298 <__aeabi_dsub>
 800a238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a23a:	4606      	mov	r6, r0
 800a23c:	460f      	mov	r7, r1
 800a23e:	b933      	cbnz	r3, 800a24e <_strtod_l+0xace>
 800a240:	f1ba 0f00 	cmp.w	sl, #0
 800a244:	d103      	bne.n	800a24e <_strtod_l+0xace>
 800a246:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a24a:	2d00      	cmp	r5, #0
 800a24c:	d06d      	beq.n	800a32a <_strtod_l+0xbaa>
 800a24e:	a30a      	add	r3, pc, #40	; (adr r3, 800a278 <_strtod_l+0xaf8>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	4630      	mov	r0, r6
 800a256:	4639      	mov	r1, r7
 800a258:	f7f6 fc48 	bl	8000aec <__aeabi_dcmplt>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	f47f acb8 	bne.w	8009bd2 <_strtod_l+0x452>
 800a262:	a307      	add	r3, pc, #28	; (adr r3, 800a280 <_strtod_l+0xb00>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	4630      	mov	r0, r6
 800a26a:	4639      	mov	r1, r7
 800a26c:	f7f6 fc5c 	bl	8000b28 <__aeabi_dcmpgt>
 800a270:	2800      	cmp	r0, #0
 800a272:	f43f af79 	beq.w	800a168 <_strtod_l+0x9e8>
 800a276:	e4ac      	b.n	8009bd2 <_strtod_l+0x452>
 800a278:	94a03595 	.word	0x94a03595
 800a27c:	3fdfffff 	.word	0x3fdfffff
 800a280:	35afe535 	.word	0x35afe535
 800a284:	3fe00000 	.word	0x3fe00000
 800a288:	000fffff 	.word	0x000fffff
 800a28c:	7ff00000 	.word	0x7ff00000
 800a290:	7fefffff 	.word	0x7fefffff
 800a294:	39500000 	.word	0x39500000
 800a298:	3ff00000 	.word	0x3ff00000
 800a29c:	7fe00000 	.word	0x7fe00000
 800a2a0:	7c9fffff 	.word	0x7c9fffff
 800a2a4:	3fe00000 	.word	0x3fe00000
 800a2a8:	bff00000 	.word	0xbff00000
 800a2ac:	9b04      	ldr	r3, [sp, #16]
 800a2ae:	b333      	cbz	r3, 800a2fe <_strtod_l+0xb7e>
 800a2b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2b2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2b6:	d822      	bhi.n	800a2fe <_strtod_l+0xb7e>
 800a2b8:	a327      	add	r3, pc, #156	; (adr r3, 800a358 <_strtod_l+0xbd8>)
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	4630      	mov	r0, r6
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	f7f6 fc1d 	bl	8000b00 <__aeabi_dcmple>
 800a2c6:	b1a0      	cbz	r0, 800a2f2 <_strtod_l+0xb72>
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7f6 fc74 	bl	8000bb8 <__aeabi_d2uiz>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	bf08      	it	eq
 800a2d4:	2001      	moveq	r0, #1
 800a2d6:	f7f6 f91d 	bl	8000514 <__aeabi_ui2d>
 800a2da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2dc:	4606      	mov	r6, r0
 800a2de:	460f      	mov	r7, r1
 800a2e0:	bb03      	cbnz	r3, 800a324 <_strtod_l+0xba4>
 800a2e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2e6:	9012      	str	r0, [sp, #72]	; 0x48
 800a2e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a2ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2f6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a2fa:	1a9b      	subs	r3, r3, r2
 800a2fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2fe:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a302:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a306:	f002 f815 	bl	800c334 <__ulp>
 800a30a:	4650      	mov	r0, sl
 800a30c:	ec53 2b10 	vmov	r2, r3, d0
 800a310:	4659      	mov	r1, fp
 800a312:	f7f6 f979 	bl	8000608 <__aeabi_dmul>
 800a316:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a31a:	f7f5 ffbf 	bl	800029c <__adddf3>
 800a31e:	4682      	mov	sl, r0
 800a320:	468b      	mov	fp, r1
 800a322:	e772      	b.n	800a20a <_strtod_l+0xa8a>
 800a324:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a328:	e7df      	b.n	800a2ea <_strtod_l+0xb6a>
 800a32a:	a30d      	add	r3, pc, #52	; (adr r3, 800a360 <_strtod_l+0xbe0>)
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	f7f6 fbdc 	bl	8000aec <__aeabi_dcmplt>
 800a334:	e79c      	b.n	800a270 <_strtod_l+0xaf0>
 800a336:	2300      	movs	r3, #0
 800a338:	930d      	str	r3, [sp, #52]	; 0x34
 800a33a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a33c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a33e:	6013      	str	r3, [r2, #0]
 800a340:	f7ff ba61 	b.w	8009806 <_strtod_l+0x86>
 800a344:	2b65      	cmp	r3, #101	; 0x65
 800a346:	f04f 0200 	mov.w	r2, #0
 800a34a:	f43f ab4e 	beq.w	80099ea <_strtod_l+0x26a>
 800a34e:	2101      	movs	r1, #1
 800a350:	4614      	mov	r4, r2
 800a352:	9104      	str	r1, [sp, #16]
 800a354:	f7ff bacb 	b.w	80098ee <_strtod_l+0x16e>
 800a358:	ffc00000 	.word	0xffc00000
 800a35c:	41dfffff 	.word	0x41dfffff
 800a360:	94a03595 	.word	0x94a03595
 800a364:	3fcfffff 	.word	0x3fcfffff

0800a368 <_strtod_r>:
 800a368:	4b05      	ldr	r3, [pc, #20]	; (800a380 <_strtod_r+0x18>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	b410      	push	{r4}
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	4c04      	ldr	r4, [pc, #16]	; (800a384 <_strtod_r+0x1c>)
 800a372:	2b00      	cmp	r3, #0
 800a374:	bf08      	it	eq
 800a376:	4623      	moveq	r3, r4
 800a378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a37c:	f7ff ba00 	b.w	8009780 <_strtod_l>
 800a380:	20000180 	.word	0x20000180
 800a384:	200001e4 	.word	0x200001e4

0800a388 <_strtol_l.isra.0>:
 800a388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a38c:	4680      	mov	r8, r0
 800a38e:	4689      	mov	r9, r1
 800a390:	4692      	mov	sl, r2
 800a392:	461e      	mov	r6, r3
 800a394:	460f      	mov	r7, r1
 800a396:	463d      	mov	r5, r7
 800a398:	9808      	ldr	r0, [sp, #32]
 800a39a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a39e:	f001 fc47 	bl	800bc30 <__locale_ctype_ptr_l>
 800a3a2:	4420      	add	r0, r4
 800a3a4:	7843      	ldrb	r3, [r0, #1]
 800a3a6:	f013 0308 	ands.w	r3, r3, #8
 800a3aa:	d132      	bne.n	800a412 <_strtol_l.isra.0+0x8a>
 800a3ac:	2c2d      	cmp	r4, #45	; 0x2d
 800a3ae:	d132      	bne.n	800a416 <_strtol_l.isra.0+0x8e>
 800a3b0:	787c      	ldrb	r4, [r7, #1]
 800a3b2:	1cbd      	adds	r5, r7, #2
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	2e00      	cmp	r6, #0
 800a3b8:	d05d      	beq.n	800a476 <_strtol_l.isra.0+0xee>
 800a3ba:	2e10      	cmp	r6, #16
 800a3bc:	d109      	bne.n	800a3d2 <_strtol_l.isra.0+0x4a>
 800a3be:	2c30      	cmp	r4, #48	; 0x30
 800a3c0:	d107      	bne.n	800a3d2 <_strtol_l.isra.0+0x4a>
 800a3c2:	782b      	ldrb	r3, [r5, #0]
 800a3c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a3c8:	2b58      	cmp	r3, #88	; 0x58
 800a3ca:	d14f      	bne.n	800a46c <_strtol_l.isra.0+0xe4>
 800a3cc:	786c      	ldrb	r4, [r5, #1]
 800a3ce:	2610      	movs	r6, #16
 800a3d0:	3502      	adds	r5, #2
 800a3d2:	2a00      	cmp	r2, #0
 800a3d4:	bf14      	ite	ne
 800a3d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a3da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a3de:	2700      	movs	r7, #0
 800a3e0:	fbb1 fcf6 	udiv	ip, r1, r6
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a3ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d817      	bhi.n	800a422 <_strtol_l.isra.0+0x9a>
 800a3f2:	461c      	mov	r4, r3
 800a3f4:	42a6      	cmp	r6, r4
 800a3f6:	dd23      	ble.n	800a440 <_strtol_l.isra.0+0xb8>
 800a3f8:	1c7b      	adds	r3, r7, #1
 800a3fa:	d007      	beq.n	800a40c <_strtol_l.isra.0+0x84>
 800a3fc:	4584      	cmp	ip, r0
 800a3fe:	d31c      	bcc.n	800a43a <_strtol_l.isra.0+0xb2>
 800a400:	d101      	bne.n	800a406 <_strtol_l.isra.0+0x7e>
 800a402:	45a6      	cmp	lr, r4
 800a404:	db19      	blt.n	800a43a <_strtol_l.isra.0+0xb2>
 800a406:	fb00 4006 	mla	r0, r0, r6, r4
 800a40a:	2701      	movs	r7, #1
 800a40c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a410:	e7eb      	b.n	800a3ea <_strtol_l.isra.0+0x62>
 800a412:	462f      	mov	r7, r5
 800a414:	e7bf      	b.n	800a396 <_strtol_l.isra.0+0xe>
 800a416:	2c2b      	cmp	r4, #43	; 0x2b
 800a418:	bf04      	itt	eq
 800a41a:	1cbd      	addeq	r5, r7, #2
 800a41c:	787c      	ldrbeq	r4, [r7, #1]
 800a41e:	461a      	mov	r2, r3
 800a420:	e7c9      	b.n	800a3b6 <_strtol_l.isra.0+0x2e>
 800a422:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a426:	2b19      	cmp	r3, #25
 800a428:	d801      	bhi.n	800a42e <_strtol_l.isra.0+0xa6>
 800a42a:	3c37      	subs	r4, #55	; 0x37
 800a42c:	e7e2      	b.n	800a3f4 <_strtol_l.isra.0+0x6c>
 800a42e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a432:	2b19      	cmp	r3, #25
 800a434:	d804      	bhi.n	800a440 <_strtol_l.isra.0+0xb8>
 800a436:	3c57      	subs	r4, #87	; 0x57
 800a438:	e7dc      	b.n	800a3f4 <_strtol_l.isra.0+0x6c>
 800a43a:	f04f 37ff 	mov.w	r7, #4294967295
 800a43e:	e7e5      	b.n	800a40c <_strtol_l.isra.0+0x84>
 800a440:	1c7b      	adds	r3, r7, #1
 800a442:	d108      	bne.n	800a456 <_strtol_l.isra.0+0xce>
 800a444:	2322      	movs	r3, #34	; 0x22
 800a446:	f8c8 3000 	str.w	r3, [r8]
 800a44a:	4608      	mov	r0, r1
 800a44c:	f1ba 0f00 	cmp.w	sl, #0
 800a450:	d107      	bne.n	800a462 <_strtol_l.isra.0+0xda>
 800a452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a456:	b102      	cbz	r2, 800a45a <_strtol_l.isra.0+0xd2>
 800a458:	4240      	negs	r0, r0
 800a45a:	f1ba 0f00 	cmp.w	sl, #0
 800a45e:	d0f8      	beq.n	800a452 <_strtol_l.isra.0+0xca>
 800a460:	b10f      	cbz	r7, 800a466 <_strtol_l.isra.0+0xde>
 800a462:	f105 39ff 	add.w	r9, r5, #4294967295
 800a466:	f8ca 9000 	str.w	r9, [sl]
 800a46a:	e7f2      	b.n	800a452 <_strtol_l.isra.0+0xca>
 800a46c:	2430      	movs	r4, #48	; 0x30
 800a46e:	2e00      	cmp	r6, #0
 800a470:	d1af      	bne.n	800a3d2 <_strtol_l.isra.0+0x4a>
 800a472:	2608      	movs	r6, #8
 800a474:	e7ad      	b.n	800a3d2 <_strtol_l.isra.0+0x4a>
 800a476:	2c30      	cmp	r4, #48	; 0x30
 800a478:	d0a3      	beq.n	800a3c2 <_strtol_l.isra.0+0x3a>
 800a47a:	260a      	movs	r6, #10
 800a47c:	e7a9      	b.n	800a3d2 <_strtol_l.isra.0+0x4a>
	...

0800a480 <_strtol_r>:
 800a480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a482:	4c06      	ldr	r4, [pc, #24]	; (800a49c <_strtol_r+0x1c>)
 800a484:	4d06      	ldr	r5, [pc, #24]	; (800a4a0 <_strtol_r+0x20>)
 800a486:	6824      	ldr	r4, [r4, #0]
 800a488:	6a24      	ldr	r4, [r4, #32]
 800a48a:	2c00      	cmp	r4, #0
 800a48c:	bf08      	it	eq
 800a48e:	462c      	moveq	r4, r5
 800a490:	9400      	str	r4, [sp, #0]
 800a492:	f7ff ff79 	bl	800a388 <_strtol_l.isra.0>
 800a496:	b003      	add	sp, #12
 800a498:	bd30      	pop	{r4, r5, pc}
 800a49a:	bf00      	nop
 800a49c:	20000180 	.word	0x20000180
 800a4a0:	200001e4 	.word	0x200001e4

0800a4a4 <__swbuf_r>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	460e      	mov	r6, r1
 800a4a8:	4614      	mov	r4, r2
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	b118      	cbz	r0, 800a4b6 <__swbuf_r+0x12>
 800a4ae:	6983      	ldr	r3, [r0, #24]
 800a4b0:	b90b      	cbnz	r3, 800a4b6 <__swbuf_r+0x12>
 800a4b2:	f001 f80d 	bl	800b4d0 <__sinit>
 800a4b6:	4b21      	ldr	r3, [pc, #132]	; (800a53c <__swbuf_r+0x98>)
 800a4b8:	429c      	cmp	r4, r3
 800a4ba:	d12a      	bne.n	800a512 <__swbuf_r+0x6e>
 800a4bc:	686c      	ldr	r4, [r5, #4]
 800a4be:	69a3      	ldr	r3, [r4, #24]
 800a4c0:	60a3      	str	r3, [r4, #8]
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	071a      	lsls	r2, r3, #28
 800a4c6:	d52e      	bpl.n	800a526 <__swbuf_r+0x82>
 800a4c8:	6923      	ldr	r3, [r4, #16]
 800a4ca:	b363      	cbz	r3, 800a526 <__swbuf_r+0x82>
 800a4cc:	6923      	ldr	r3, [r4, #16]
 800a4ce:	6820      	ldr	r0, [r4, #0]
 800a4d0:	1ac0      	subs	r0, r0, r3
 800a4d2:	6963      	ldr	r3, [r4, #20]
 800a4d4:	b2f6      	uxtb	r6, r6
 800a4d6:	4283      	cmp	r3, r0
 800a4d8:	4637      	mov	r7, r6
 800a4da:	dc04      	bgt.n	800a4e6 <__swbuf_r+0x42>
 800a4dc:	4621      	mov	r1, r4
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f000 ff8c 	bl	800b3fc <_fflush_r>
 800a4e4:	bb28      	cbnz	r0, 800a532 <__swbuf_r+0x8e>
 800a4e6:	68a3      	ldr	r3, [r4, #8]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	60a3      	str	r3, [r4, #8]
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	6022      	str	r2, [r4, #0]
 800a4f2:	701e      	strb	r6, [r3, #0]
 800a4f4:	6963      	ldr	r3, [r4, #20]
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	4283      	cmp	r3, r0
 800a4fa:	d004      	beq.n	800a506 <__swbuf_r+0x62>
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	07db      	lsls	r3, r3, #31
 800a500:	d519      	bpl.n	800a536 <__swbuf_r+0x92>
 800a502:	2e0a      	cmp	r6, #10
 800a504:	d117      	bne.n	800a536 <__swbuf_r+0x92>
 800a506:	4621      	mov	r1, r4
 800a508:	4628      	mov	r0, r5
 800a50a:	f000 ff77 	bl	800b3fc <_fflush_r>
 800a50e:	b190      	cbz	r0, 800a536 <__swbuf_r+0x92>
 800a510:	e00f      	b.n	800a532 <__swbuf_r+0x8e>
 800a512:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <__swbuf_r+0x9c>)
 800a514:	429c      	cmp	r4, r3
 800a516:	d101      	bne.n	800a51c <__swbuf_r+0x78>
 800a518:	68ac      	ldr	r4, [r5, #8]
 800a51a:	e7d0      	b.n	800a4be <__swbuf_r+0x1a>
 800a51c:	4b09      	ldr	r3, [pc, #36]	; (800a544 <__swbuf_r+0xa0>)
 800a51e:	429c      	cmp	r4, r3
 800a520:	bf08      	it	eq
 800a522:	68ec      	ldreq	r4, [r5, #12]
 800a524:	e7cb      	b.n	800a4be <__swbuf_r+0x1a>
 800a526:	4621      	mov	r1, r4
 800a528:	4628      	mov	r0, r5
 800a52a:	f000 f81f 	bl	800a56c <__swsetup_r>
 800a52e:	2800      	cmp	r0, #0
 800a530:	d0cc      	beq.n	800a4cc <__swbuf_r+0x28>
 800a532:	f04f 37ff 	mov.w	r7, #4294967295
 800a536:	4638      	mov	r0, r7
 800a538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a53a:	bf00      	nop
 800a53c:	08010138 	.word	0x08010138
 800a540:	08010158 	.word	0x08010158
 800a544:	08010118 	.word	0x08010118

0800a548 <_write_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4c07      	ldr	r4, [pc, #28]	; (800a568 <_write_r+0x20>)
 800a54c:	4605      	mov	r5, r0
 800a54e:	4608      	mov	r0, r1
 800a550:	4611      	mov	r1, r2
 800a552:	2200      	movs	r2, #0
 800a554:	6022      	str	r2, [r4, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	f7f6 fd7e 	bl	8001058 <_write>
 800a55c:	1c43      	adds	r3, r0, #1
 800a55e:	d102      	bne.n	800a566 <_write_r+0x1e>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	b103      	cbz	r3, 800a566 <_write_r+0x1e>
 800a564:	602b      	str	r3, [r5, #0]
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	20000f6c 	.word	0x20000f6c

0800a56c <__swsetup_r>:
 800a56c:	4b32      	ldr	r3, [pc, #200]	; (800a638 <__swsetup_r+0xcc>)
 800a56e:	b570      	push	{r4, r5, r6, lr}
 800a570:	681d      	ldr	r5, [r3, #0]
 800a572:	4606      	mov	r6, r0
 800a574:	460c      	mov	r4, r1
 800a576:	b125      	cbz	r5, 800a582 <__swsetup_r+0x16>
 800a578:	69ab      	ldr	r3, [r5, #24]
 800a57a:	b913      	cbnz	r3, 800a582 <__swsetup_r+0x16>
 800a57c:	4628      	mov	r0, r5
 800a57e:	f000 ffa7 	bl	800b4d0 <__sinit>
 800a582:	4b2e      	ldr	r3, [pc, #184]	; (800a63c <__swsetup_r+0xd0>)
 800a584:	429c      	cmp	r4, r3
 800a586:	d10f      	bne.n	800a5a8 <__swsetup_r+0x3c>
 800a588:	686c      	ldr	r4, [r5, #4]
 800a58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a58e:	b29a      	uxth	r2, r3
 800a590:	0715      	lsls	r5, r2, #28
 800a592:	d42c      	bmi.n	800a5ee <__swsetup_r+0x82>
 800a594:	06d0      	lsls	r0, r2, #27
 800a596:	d411      	bmi.n	800a5bc <__swsetup_r+0x50>
 800a598:	2209      	movs	r2, #9
 800a59a:	6032      	str	r2, [r6, #0]
 800a59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5a0:	81a3      	strh	r3, [r4, #12]
 800a5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a6:	e03e      	b.n	800a626 <__swsetup_r+0xba>
 800a5a8:	4b25      	ldr	r3, [pc, #148]	; (800a640 <__swsetup_r+0xd4>)
 800a5aa:	429c      	cmp	r4, r3
 800a5ac:	d101      	bne.n	800a5b2 <__swsetup_r+0x46>
 800a5ae:	68ac      	ldr	r4, [r5, #8]
 800a5b0:	e7eb      	b.n	800a58a <__swsetup_r+0x1e>
 800a5b2:	4b24      	ldr	r3, [pc, #144]	; (800a644 <__swsetup_r+0xd8>)
 800a5b4:	429c      	cmp	r4, r3
 800a5b6:	bf08      	it	eq
 800a5b8:	68ec      	ldreq	r4, [r5, #12]
 800a5ba:	e7e6      	b.n	800a58a <__swsetup_r+0x1e>
 800a5bc:	0751      	lsls	r1, r2, #29
 800a5be:	d512      	bpl.n	800a5e6 <__swsetup_r+0x7a>
 800a5c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5c2:	b141      	cbz	r1, 800a5d6 <__swsetup_r+0x6a>
 800a5c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5c8:	4299      	cmp	r1, r3
 800a5ca:	d002      	beq.n	800a5d2 <__swsetup_r+0x66>
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7fe f89d 	bl	800870c <_free_r>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5dc:	81a3      	strh	r3, [r4, #12]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6063      	str	r3, [r4, #4]
 800a5e2:	6923      	ldr	r3, [r4, #16]
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	89a3      	ldrh	r3, [r4, #12]
 800a5e8:	f043 0308 	orr.w	r3, r3, #8
 800a5ec:	81a3      	strh	r3, [r4, #12]
 800a5ee:	6923      	ldr	r3, [r4, #16]
 800a5f0:	b94b      	cbnz	r3, 800a606 <__swsetup_r+0x9a>
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5fc:	d003      	beq.n	800a606 <__swsetup_r+0x9a>
 800a5fe:	4621      	mov	r1, r4
 800a600:	4630      	mov	r0, r6
 800a602:	f001 fb6d 	bl	800bce0 <__smakebuf_r>
 800a606:	89a2      	ldrh	r2, [r4, #12]
 800a608:	f012 0301 	ands.w	r3, r2, #1
 800a60c:	d00c      	beq.n	800a628 <__swsetup_r+0xbc>
 800a60e:	2300      	movs	r3, #0
 800a610:	60a3      	str	r3, [r4, #8]
 800a612:	6963      	ldr	r3, [r4, #20]
 800a614:	425b      	negs	r3, r3
 800a616:	61a3      	str	r3, [r4, #24]
 800a618:	6923      	ldr	r3, [r4, #16]
 800a61a:	b953      	cbnz	r3, 800a632 <__swsetup_r+0xc6>
 800a61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a620:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a624:	d1ba      	bne.n	800a59c <__swsetup_r+0x30>
 800a626:	bd70      	pop	{r4, r5, r6, pc}
 800a628:	0792      	lsls	r2, r2, #30
 800a62a:	bf58      	it	pl
 800a62c:	6963      	ldrpl	r3, [r4, #20]
 800a62e:	60a3      	str	r3, [r4, #8]
 800a630:	e7f2      	b.n	800a618 <__swsetup_r+0xac>
 800a632:	2000      	movs	r0, #0
 800a634:	e7f7      	b.n	800a626 <__swsetup_r+0xba>
 800a636:	bf00      	nop
 800a638:	20000180 	.word	0x20000180
 800a63c:	08010138 	.word	0x08010138
 800a640:	08010158 	.word	0x08010158
 800a644:	08010118 	.word	0x08010118

0800a648 <_close_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4c06      	ldr	r4, [pc, #24]	; (800a664 <_close_r+0x1c>)
 800a64c:	2300      	movs	r3, #0
 800a64e:	4605      	mov	r5, r0
 800a650:	4608      	mov	r0, r1
 800a652:	6023      	str	r3, [r4, #0]
 800a654:	f7f7 f9bd 	bl	80019d2 <_close>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d102      	bne.n	800a662 <_close_r+0x1a>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	b103      	cbz	r3, 800a662 <_close_r+0x1a>
 800a660:	602b      	str	r3, [r5, #0]
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	20000f6c 	.word	0x20000f6c

0800a668 <quorem>:
 800a668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	6903      	ldr	r3, [r0, #16]
 800a66e:	690c      	ldr	r4, [r1, #16]
 800a670:	42a3      	cmp	r3, r4
 800a672:	4680      	mov	r8, r0
 800a674:	f2c0 8082 	blt.w	800a77c <quorem+0x114>
 800a678:	3c01      	subs	r4, #1
 800a67a:	f101 0714 	add.w	r7, r1, #20
 800a67e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a682:	f100 0614 	add.w	r6, r0, #20
 800a686:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a68a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a68e:	eb06 030c 	add.w	r3, r6, ip
 800a692:	3501      	adds	r5, #1
 800a694:	eb07 090c 	add.w	r9, r7, ip
 800a698:	9301      	str	r3, [sp, #4]
 800a69a:	fbb0 f5f5 	udiv	r5, r0, r5
 800a69e:	b395      	cbz	r5, 800a706 <quorem+0x9e>
 800a6a0:	f04f 0a00 	mov.w	sl, #0
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	46b6      	mov	lr, r6
 800a6a8:	46d3      	mov	fp, sl
 800a6aa:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6ae:	b293      	uxth	r3, r2
 800a6b0:	fb05 a303 	mla	r3, r5, r3, sl
 800a6b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	ebab 0303 	sub.w	r3, fp, r3
 800a6be:	0c12      	lsrs	r2, r2, #16
 800a6c0:	f8de b000 	ldr.w	fp, [lr]
 800a6c4:	fb05 a202 	mla	r2, r5, r2, sl
 800a6c8:	fa13 f38b 	uxtah	r3, r3, fp
 800a6cc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a6d0:	fa1f fb82 	uxth.w	fp, r2
 800a6d4:	f8de 2000 	ldr.w	r2, [lr]
 800a6d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a6dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6e6:	4581      	cmp	r9, r0
 800a6e8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a6ec:	f84e 3b04 	str.w	r3, [lr], #4
 800a6f0:	d2db      	bcs.n	800a6aa <quorem+0x42>
 800a6f2:	f856 300c 	ldr.w	r3, [r6, ip]
 800a6f6:	b933      	cbnz	r3, 800a706 <quorem+0x9e>
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	3b04      	subs	r3, #4
 800a6fc:	429e      	cmp	r6, r3
 800a6fe:	461a      	mov	r2, r3
 800a700:	d330      	bcc.n	800a764 <quorem+0xfc>
 800a702:	f8c8 4010 	str.w	r4, [r8, #16]
 800a706:	4640      	mov	r0, r8
 800a708:	f001 fd9c 	bl	800c244 <__mcmp>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	db25      	blt.n	800a75c <quorem+0xf4>
 800a710:	3501      	adds	r5, #1
 800a712:	4630      	mov	r0, r6
 800a714:	f04f 0c00 	mov.w	ip, #0
 800a718:	f857 2b04 	ldr.w	r2, [r7], #4
 800a71c:	f8d0 e000 	ldr.w	lr, [r0]
 800a720:	b293      	uxth	r3, r2
 800a722:	ebac 0303 	sub.w	r3, ip, r3
 800a726:	0c12      	lsrs	r2, r2, #16
 800a728:	fa13 f38e 	uxtah	r3, r3, lr
 800a72c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a734:	b29b      	uxth	r3, r3
 800a736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a73a:	45b9      	cmp	r9, r7
 800a73c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a740:	f840 3b04 	str.w	r3, [r0], #4
 800a744:	d2e8      	bcs.n	800a718 <quorem+0xb0>
 800a746:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a74a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a74e:	b92a      	cbnz	r2, 800a75c <quorem+0xf4>
 800a750:	3b04      	subs	r3, #4
 800a752:	429e      	cmp	r6, r3
 800a754:	461a      	mov	r2, r3
 800a756:	d30b      	bcc.n	800a770 <quorem+0x108>
 800a758:	f8c8 4010 	str.w	r4, [r8, #16]
 800a75c:	4628      	mov	r0, r5
 800a75e:	b003      	add	sp, #12
 800a760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a764:	6812      	ldr	r2, [r2, #0]
 800a766:	3b04      	subs	r3, #4
 800a768:	2a00      	cmp	r2, #0
 800a76a:	d1ca      	bne.n	800a702 <quorem+0x9a>
 800a76c:	3c01      	subs	r4, #1
 800a76e:	e7c5      	b.n	800a6fc <quorem+0x94>
 800a770:	6812      	ldr	r2, [r2, #0]
 800a772:	3b04      	subs	r3, #4
 800a774:	2a00      	cmp	r2, #0
 800a776:	d1ef      	bne.n	800a758 <quorem+0xf0>
 800a778:	3c01      	subs	r4, #1
 800a77a:	e7ea      	b.n	800a752 <quorem+0xea>
 800a77c:	2000      	movs	r0, #0
 800a77e:	e7ee      	b.n	800a75e <quorem+0xf6>

0800a780 <_dtoa_r>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	ec57 6b10 	vmov	r6, r7, d0
 800a788:	b097      	sub	sp, #92	; 0x5c
 800a78a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a78c:	9106      	str	r1, [sp, #24]
 800a78e:	4604      	mov	r4, r0
 800a790:	920b      	str	r2, [sp, #44]	; 0x2c
 800a792:	9312      	str	r3, [sp, #72]	; 0x48
 800a794:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a798:	e9cd 6700 	strd	r6, r7, [sp]
 800a79c:	b93d      	cbnz	r5, 800a7ae <_dtoa_r+0x2e>
 800a79e:	2010      	movs	r0, #16
 800a7a0:	f7fd ff9c 	bl	80086dc <malloc>
 800a7a4:	6260      	str	r0, [r4, #36]	; 0x24
 800a7a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7aa:	6005      	str	r5, [r0, #0]
 800a7ac:	60c5      	str	r5, [r0, #12]
 800a7ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7b0:	6819      	ldr	r1, [r3, #0]
 800a7b2:	b151      	cbz	r1, 800a7ca <_dtoa_r+0x4a>
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	604a      	str	r2, [r1, #4]
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	4093      	lsls	r3, r2
 800a7bc:	608b      	str	r3, [r1, #8]
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f001 fb21 	bl	800be06 <_Bfree>
 800a7c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	1e3b      	subs	r3, r7, #0
 800a7cc:	bfbb      	ittet	lt
 800a7ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7d2:	9301      	strlt	r3, [sp, #4]
 800a7d4:	2300      	movge	r3, #0
 800a7d6:	2201      	movlt	r2, #1
 800a7d8:	bfac      	ite	ge
 800a7da:	f8c8 3000 	strge.w	r3, [r8]
 800a7de:	f8c8 2000 	strlt.w	r2, [r8]
 800a7e2:	4baf      	ldr	r3, [pc, #700]	; (800aaa0 <_dtoa_r+0x320>)
 800a7e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a7e8:	ea33 0308 	bics.w	r3, r3, r8
 800a7ec:	d114      	bne.n	800a818 <_dtoa_r+0x98>
 800a7ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7f4:	6013      	str	r3, [r2, #0]
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	b923      	cbnz	r3, 800a804 <_dtoa_r+0x84>
 800a7fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f000 8542 	beq.w	800b288 <_dtoa_r+0xb08>
 800a804:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a806:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800aab4 <_dtoa_r+0x334>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f000 8544 	beq.w	800b298 <_dtoa_r+0xb18>
 800a810:	f10b 0303 	add.w	r3, fp, #3
 800a814:	f000 bd3e 	b.w	800b294 <_dtoa_r+0xb14>
 800a818:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a81c:	2200      	movs	r2, #0
 800a81e:	2300      	movs	r3, #0
 800a820:	4630      	mov	r0, r6
 800a822:	4639      	mov	r1, r7
 800a824:	f7f6 f958 	bl	8000ad8 <__aeabi_dcmpeq>
 800a828:	4681      	mov	r9, r0
 800a82a:	b168      	cbz	r0, 800a848 <_dtoa_r+0xc8>
 800a82c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a82e:	2301      	movs	r3, #1
 800a830:	6013      	str	r3, [r2, #0]
 800a832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 8524 	beq.w	800b282 <_dtoa_r+0xb02>
 800a83a:	4b9a      	ldr	r3, [pc, #616]	; (800aaa4 <_dtoa_r+0x324>)
 800a83c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a83e:	f103 3bff 	add.w	fp, r3, #4294967295
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	f000 bd28 	b.w	800b298 <_dtoa_r+0xb18>
 800a848:	aa14      	add	r2, sp, #80	; 0x50
 800a84a:	a915      	add	r1, sp, #84	; 0x54
 800a84c:	ec47 6b10 	vmov	d0, r6, r7
 800a850:	4620      	mov	r0, r4
 800a852:	f001 fde5 	bl	800c420 <__d2b>
 800a856:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a85a:	9004      	str	r0, [sp, #16]
 800a85c:	2d00      	cmp	r5, #0
 800a85e:	d07c      	beq.n	800a95a <_dtoa_r+0x1da>
 800a860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a864:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a868:	46b2      	mov	sl, r6
 800a86a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a86e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a872:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a876:	2200      	movs	r2, #0
 800a878:	4b8b      	ldr	r3, [pc, #556]	; (800aaa8 <_dtoa_r+0x328>)
 800a87a:	4650      	mov	r0, sl
 800a87c:	4659      	mov	r1, fp
 800a87e:	f7f5 fd0b 	bl	8000298 <__aeabi_dsub>
 800a882:	a381      	add	r3, pc, #516	; (adr r3, 800aa88 <_dtoa_r+0x308>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f7f5 febe 	bl	8000608 <__aeabi_dmul>
 800a88c:	a380      	add	r3, pc, #512	; (adr r3, 800aa90 <_dtoa_r+0x310>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	f7f5 fd03 	bl	800029c <__adddf3>
 800a896:	4606      	mov	r6, r0
 800a898:	4628      	mov	r0, r5
 800a89a:	460f      	mov	r7, r1
 800a89c:	f7f5 fe4a 	bl	8000534 <__aeabi_i2d>
 800a8a0:	a37d      	add	r3, pc, #500	; (adr r3, 800aa98 <_dtoa_r+0x318>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	f7f5 feaf 	bl	8000608 <__aeabi_dmul>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f5 fcf3 	bl	800029c <__adddf3>
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	460f      	mov	r7, r1
 800a8ba:	f7f6 f955 	bl	8000b68 <__aeabi_d2iz>
 800a8be:	2200      	movs	r2, #0
 800a8c0:	4682      	mov	sl, r0
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	f7f6 f910 	bl	8000aec <__aeabi_dcmplt>
 800a8cc:	b148      	cbz	r0, 800a8e2 <_dtoa_r+0x162>
 800a8ce:	4650      	mov	r0, sl
 800a8d0:	f7f5 fe30 	bl	8000534 <__aeabi_i2d>
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	f7f6 f8fe 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8dc:	b908      	cbnz	r0, 800a8e2 <_dtoa_r+0x162>
 800a8de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8e2:	f1ba 0f16 	cmp.w	sl, #22
 800a8e6:	d859      	bhi.n	800a99c <_dtoa_r+0x21c>
 800a8e8:	4970      	ldr	r1, [pc, #448]	; (800aaac <_dtoa_r+0x32c>)
 800a8ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a8ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f6:	f7f6 f917 	bl	8000b28 <__aeabi_dcmpgt>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d050      	beq.n	800a9a0 <_dtoa_r+0x220>
 800a8fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a902:	2300      	movs	r3, #0
 800a904:	930f      	str	r3, [sp, #60]	; 0x3c
 800a906:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a908:	1b5d      	subs	r5, r3, r5
 800a90a:	f1b5 0801 	subs.w	r8, r5, #1
 800a90e:	bf49      	itett	mi
 800a910:	f1c5 0301 	rsbmi	r3, r5, #1
 800a914:	2300      	movpl	r3, #0
 800a916:	9305      	strmi	r3, [sp, #20]
 800a918:	f04f 0800 	movmi.w	r8, #0
 800a91c:	bf58      	it	pl
 800a91e:	9305      	strpl	r3, [sp, #20]
 800a920:	f1ba 0f00 	cmp.w	sl, #0
 800a924:	db3e      	blt.n	800a9a4 <_dtoa_r+0x224>
 800a926:	2300      	movs	r3, #0
 800a928:	44d0      	add	r8, sl
 800a92a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a92e:	9307      	str	r3, [sp, #28]
 800a930:	9b06      	ldr	r3, [sp, #24]
 800a932:	2b09      	cmp	r3, #9
 800a934:	f200 8090 	bhi.w	800aa58 <_dtoa_r+0x2d8>
 800a938:	2b05      	cmp	r3, #5
 800a93a:	bfc4      	itt	gt
 800a93c:	3b04      	subgt	r3, #4
 800a93e:	9306      	strgt	r3, [sp, #24]
 800a940:	9b06      	ldr	r3, [sp, #24]
 800a942:	f1a3 0302 	sub.w	r3, r3, #2
 800a946:	bfcc      	ite	gt
 800a948:	2500      	movgt	r5, #0
 800a94a:	2501      	movle	r5, #1
 800a94c:	2b03      	cmp	r3, #3
 800a94e:	f200 808f 	bhi.w	800aa70 <_dtoa_r+0x2f0>
 800a952:	e8df f003 	tbb	[pc, r3]
 800a956:	7f7d      	.short	0x7f7d
 800a958:	7131      	.short	0x7131
 800a95a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a95e:	441d      	add	r5, r3
 800a960:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a964:	2820      	cmp	r0, #32
 800a966:	dd13      	ble.n	800a990 <_dtoa_r+0x210>
 800a968:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a96c:	9b00      	ldr	r3, [sp, #0]
 800a96e:	fa08 f800 	lsl.w	r8, r8, r0
 800a972:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a976:	fa23 f000 	lsr.w	r0, r3, r0
 800a97a:	ea48 0000 	orr.w	r0, r8, r0
 800a97e:	f7f5 fdc9 	bl	8000514 <__aeabi_ui2d>
 800a982:	2301      	movs	r3, #1
 800a984:	4682      	mov	sl, r0
 800a986:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a98a:	3d01      	subs	r5, #1
 800a98c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a98e:	e772      	b.n	800a876 <_dtoa_r+0xf6>
 800a990:	9b00      	ldr	r3, [sp, #0]
 800a992:	f1c0 0020 	rsb	r0, r0, #32
 800a996:	fa03 f000 	lsl.w	r0, r3, r0
 800a99a:	e7f0      	b.n	800a97e <_dtoa_r+0x1fe>
 800a99c:	2301      	movs	r3, #1
 800a99e:	e7b1      	b.n	800a904 <_dtoa_r+0x184>
 800a9a0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a9a2:	e7b0      	b.n	800a906 <_dtoa_r+0x186>
 800a9a4:	9b05      	ldr	r3, [sp, #20]
 800a9a6:	eba3 030a 	sub.w	r3, r3, sl
 800a9aa:	9305      	str	r3, [sp, #20]
 800a9ac:	f1ca 0300 	rsb	r3, sl, #0
 800a9b0:	9307      	str	r3, [sp, #28]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	930e      	str	r3, [sp, #56]	; 0x38
 800a9b6:	e7bb      	b.n	800a930 <_dtoa_r+0x1b0>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a9bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dd59      	ble.n	800aa76 <_dtoa_r+0x2f6>
 800a9c2:	9302      	str	r3, [sp, #8]
 800a9c4:	4699      	mov	r9, r3
 800a9c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	6072      	str	r2, [r6, #4]
 800a9cc:	2204      	movs	r2, #4
 800a9ce:	f102 0014 	add.w	r0, r2, #20
 800a9d2:	4298      	cmp	r0, r3
 800a9d4:	6871      	ldr	r1, [r6, #4]
 800a9d6:	d953      	bls.n	800aa80 <_dtoa_r+0x300>
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f001 f9e0 	bl	800bd9e <_Balloc>
 800a9de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9e0:	6030      	str	r0, [r6, #0]
 800a9e2:	f1b9 0f0e 	cmp.w	r9, #14
 800a9e6:	f8d3 b000 	ldr.w	fp, [r3]
 800a9ea:	f200 80e6 	bhi.w	800abba <_dtoa_r+0x43a>
 800a9ee:	2d00      	cmp	r5, #0
 800a9f0:	f000 80e3 	beq.w	800abba <_dtoa_r+0x43a>
 800a9f4:	ed9d 7b00 	vldr	d7, [sp]
 800a9f8:	f1ba 0f00 	cmp.w	sl, #0
 800a9fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800aa00:	dd74      	ble.n	800aaec <_dtoa_r+0x36c>
 800aa02:	4a2a      	ldr	r2, [pc, #168]	; (800aaac <_dtoa_r+0x32c>)
 800aa04:	f00a 030f 	and.w	r3, sl, #15
 800aa08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa0c:	ed93 7b00 	vldr	d7, [r3]
 800aa10:	ea4f 162a 	mov.w	r6, sl, asr #4
 800aa14:	06f0      	lsls	r0, r6, #27
 800aa16:	ed8d 7b08 	vstr	d7, [sp, #32]
 800aa1a:	d565      	bpl.n	800aae8 <_dtoa_r+0x368>
 800aa1c:	4b24      	ldr	r3, [pc, #144]	; (800aab0 <_dtoa_r+0x330>)
 800aa1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa26:	f7f5 ff19 	bl	800085c <__aeabi_ddiv>
 800aa2a:	e9cd 0100 	strd	r0, r1, [sp]
 800aa2e:	f006 060f 	and.w	r6, r6, #15
 800aa32:	2503      	movs	r5, #3
 800aa34:	4f1e      	ldr	r7, [pc, #120]	; (800aab0 <_dtoa_r+0x330>)
 800aa36:	e04c      	b.n	800aad2 <_dtoa_r+0x352>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	930a      	str	r3, [sp, #40]	; 0x28
 800aa3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa3e:	4453      	add	r3, sl
 800aa40:	f103 0901 	add.w	r9, r3, #1
 800aa44:	9302      	str	r3, [sp, #8]
 800aa46:	464b      	mov	r3, r9
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	bfb8      	it	lt
 800aa4c:	2301      	movlt	r3, #1
 800aa4e:	e7ba      	b.n	800a9c6 <_dtoa_r+0x246>
 800aa50:	2300      	movs	r3, #0
 800aa52:	e7b2      	b.n	800a9ba <_dtoa_r+0x23a>
 800aa54:	2300      	movs	r3, #0
 800aa56:	e7f0      	b.n	800aa3a <_dtoa_r+0x2ba>
 800aa58:	2501      	movs	r5, #1
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	9306      	str	r3, [sp, #24]
 800aa5e:	950a      	str	r5, [sp, #40]	; 0x28
 800aa60:	f04f 33ff 	mov.w	r3, #4294967295
 800aa64:	9302      	str	r3, [sp, #8]
 800aa66:	4699      	mov	r9, r3
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2312      	movs	r3, #18
 800aa6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800aa6e:	e7aa      	b.n	800a9c6 <_dtoa_r+0x246>
 800aa70:	2301      	movs	r3, #1
 800aa72:	930a      	str	r3, [sp, #40]	; 0x28
 800aa74:	e7f4      	b.n	800aa60 <_dtoa_r+0x2e0>
 800aa76:	2301      	movs	r3, #1
 800aa78:	9302      	str	r3, [sp, #8]
 800aa7a:	4699      	mov	r9, r3
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	e7f5      	b.n	800aa6c <_dtoa_r+0x2ec>
 800aa80:	3101      	adds	r1, #1
 800aa82:	6071      	str	r1, [r6, #4]
 800aa84:	0052      	lsls	r2, r2, #1
 800aa86:	e7a2      	b.n	800a9ce <_dtoa_r+0x24e>
 800aa88:	636f4361 	.word	0x636f4361
 800aa8c:	3fd287a7 	.word	0x3fd287a7
 800aa90:	8b60c8b3 	.word	0x8b60c8b3
 800aa94:	3fc68a28 	.word	0x3fc68a28
 800aa98:	509f79fb 	.word	0x509f79fb
 800aa9c:	3fd34413 	.word	0x3fd34413
 800aaa0:	7ff00000 	.word	0x7ff00000
 800aaa4:	080102ac 	.word	0x080102ac
 800aaa8:	3ff80000 	.word	0x3ff80000
 800aaac:	080101b0 	.word	0x080101b0
 800aab0:	08010188 	.word	0x08010188
 800aab4:	08010111 	.word	0x08010111
 800aab8:	07f1      	lsls	r1, r6, #31
 800aaba:	d508      	bpl.n	800aace <_dtoa_r+0x34e>
 800aabc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac4:	f7f5 fda0 	bl	8000608 <__aeabi_dmul>
 800aac8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aacc:	3501      	adds	r5, #1
 800aace:	1076      	asrs	r6, r6, #1
 800aad0:	3708      	adds	r7, #8
 800aad2:	2e00      	cmp	r6, #0
 800aad4:	d1f0      	bne.n	800aab8 <_dtoa_r+0x338>
 800aad6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aada:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aade:	f7f5 febd 	bl	800085c <__aeabi_ddiv>
 800aae2:	e9cd 0100 	strd	r0, r1, [sp]
 800aae6:	e01a      	b.n	800ab1e <_dtoa_r+0x39e>
 800aae8:	2502      	movs	r5, #2
 800aaea:	e7a3      	b.n	800aa34 <_dtoa_r+0x2b4>
 800aaec:	f000 80a0 	beq.w	800ac30 <_dtoa_r+0x4b0>
 800aaf0:	f1ca 0600 	rsb	r6, sl, #0
 800aaf4:	4b9f      	ldr	r3, [pc, #636]	; (800ad74 <_dtoa_r+0x5f4>)
 800aaf6:	4fa0      	ldr	r7, [pc, #640]	; (800ad78 <_dtoa_r+0x5f8>)
 800aaf8:	f006 020f 	and.w	r2, r6, #15
 800aafc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab08:	f7f5 fd7e 	bl	8000608 <__aeabi_dmul>
 800ab0c:	e9cd 0100 	strd	r0, r1, [sp]
 800ab10:	1136      	asrs	r6, r6, #4
 800ab12:	2300      	movs	r3, #0
 800ab14:	2502      	movs	r5, #2
 800ab16:	2e00      	cmp	r6, #0
 800ab18:	d17f      	bne.n	800ac1a <_dtoa_r+0x49a>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1e1      	bne.n	800aae2 <_dtoa_r+0x362>
 800ab1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 8087 	beq.w	800ac34 <_dtoa_r+0x4b4>
 800ab26:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	4b93      	ldr	r3, [pc, #588]	; (800ad7c <_dtoa_r+0x5fc>)
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	f7f5 ffdb 	bl	8000aec <__aeabi_dcmplt>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d07c      	beq.n	800ac34 <_dtoa_r+0x4b4>
 800ab3a:	f1b9 0f00 	cmp.w	r9, #0
 800ab3e:	d079      	beq.n	800ac34 <_dtoa_r+0x4b4>
 800ab40:	9b02      	ldr	r3, [sp, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	dd35      	ble.n	800abb2 <_dtoa_r+0x432>
 800ab46:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ab4a:	9308      	str	r3, [sp, #32]
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4b8b      	ldr	r3, [pc, #556]	; (800ad80 <_dtoa_r+0x600>)
 800ab52:	4630      	mov	r0, r6
 800ab54:	f7f5 fd58 	bl	8000608 <__aeabi_dmul>
 800ab58:	e9cd 0100 	strd	r0, r1, [sp]
 800ab5c:	9f02      	ldr	r7, [sp, #8]
 800ab5e:	3501      	adds	r5, #1
 800ab60:	4628      	mov	r0, r5
 800ab62:	f7f5 fce7 	bl	8000534 <__aeabi_i2d>
 800ab66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab6a:	f7f5 fd4d 	bl	8000608 <__aeabi_dmul>
 800ab6e:	2200      	movs	r2, #0
 800ab70:	4b84      	ldr	r3, [pc, #528]	; (800ad84 <_dtoa_r+0x604>)
 800ab72:	f7f5 fb93 	bl	800029c <__adddf3>
 800ab76:	4605      	mov	r5, r0
 800ab78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ab7c:	2f00      	cmp	r7, #0
 800ab7e:	d15d      	bne.n	800ac3c <_dtoa_r+0x4bc>
 800ab80:	2200      	movs	r2, #0
 800ab82:	4b81      	ldr	r3, [pc, #516]	; (800ad88 <_dtoa_r+0x608>)
 800ab84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab88:	f7f5 fb86 	bl	8000298 <__aeabi_dsub>
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	4633      	mov	r3, r6
 800ab90:	e9cd 0100 	strd	r0, r1, [sp]
 800ab94:	f7f5 ffc8 	bl	8000b28 <__aeabi_dcmpgt>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	f040 8288 	bne.w	800b0ae <_dtoa_r+0x92e>
 800ab9e:	462a      	mov	r2, r5
 800aba0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aba8:	f7f5 ffa0 	bl	8000aec <__aeabi_dcmplt>
 800abac:	2800      	cmp	r0, #0
 800abae:	f040 827c 	bne.w	800b0aa <_dtoa_r+0x92a>
 800abb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abb6:	e9cd 2300 	strd	r2, r3, [sp]
 800abba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f2c0 8150 	blt.w	800ae62 <_dtoa_r+0x6e2>
 800abc2:	f1ba 0f0e 	cmp.w	sl, #14
 800abc6:	f300 814c 	bgt.w	800ae62 <_dtoa_r+0x6e2>
 800abca:	4b6a      	ldr	r3, [pc, #424]	; (800ad74 <_dtoa_r+0x5f4>)
 800abcc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abd0:	ed93 7b00 	vldr	d7, [r3]
 800abd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abdc:	f280 80d8 	bge.w	800ad90 <_dtoa_r+0x610>
 800abe0:	f1b9 0f00 	cmp.w	r9, #0
 800abe4:	f300 80d4 	bgt.w	800ad90 <_dtoa_r+0x610>
 800abe8:	f040 825e 	bne.w	800b0a8 <_dtoa_r+0x928>
 800abec:	2200      	movs	r2, #0
 800abee:	4b66      	ldr	r3, [pc, #408]	; (800ad88 <_dtoa_r+0x608>)
 800abf0:	ec51 0b17 	vmov	r0, r1, d7
 800abf4:	f7f5 fd08 	bl	8000608 <__aeabi_dmul>
 800abf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abfc:	f7f5 ff8a 	bl	8000b14 <__aeabi_dcmpge>
 800ac00:	464f      	mov	r7, r9
 800ac02:	464e      	mov	r6, r9
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f040 8234 	bne.w	800b072 <_dtoa_r+0x8f2>
 800ac0a:	2331      	movs	r3, #49	; 0x31
 800ac0c:	f10b 0501 	add.w	r5, fp, #1
 800ac10:	f88b 3000 	strb.w	r3, [fp]
 800ac14:	f10a 0a01 	add.w	sl, sl, #1
 800ac18:	e22f      	b.n	800b07a <_dtoa_r+0x8fa>
 800ac1a:	07f2      	lsls	r2, r6, #31
 800ac1c:	d505      	bpl.n	800ac2a <_dtoa_r+0x4aa>
 800ac1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac22:	f7f5 fcf1 	bl	8000608 <__aeabi_dmul>
 800ac26:	3501      	adds	r5, #1
 800ac28:	2301      	movs	r3, #1
 800ac2a:	1076      	asrs	r6, r6, #1
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	e772      	b.n	800ab16 <_dtoa_r+0x396>
 800ac30:	2502      	movs	r5, #2
 800ac32:	e774      	b.n	800ab1e <_dtoa_r+0x39e>
 800ac34:	f8cd a020 	str.w	sl, [sp, #32]
 800ac38:	464f      	mov	r7, r9
 800ac3a:	e791      	b.n	800ab60 <_dtoa_r+0x3e0>
 800ac3c:	4b4d      	ldr	r3, [pc, #308]	; (800ad74 <_dtoa_r+0x5f4>)
 800ac3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ac46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d047      	beq.n	800acdc <_dtoa_r+0x55c>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	2000      	movs	r0, #0
 800ac52:	494e      	ldr	r1, [pc, #312]	; (800ad8c <_dtoa_r+0x60c>)
 800ac54:	f7f5 fe02 	bl	800085c <__aeabi_ddiv>
 800ac58:	462a      	mov	r2, r5
 800ac5a:	4633      	mov	r3, r6
 800ac5c:	f7f5 fb1c 	bl	8000298 <__aeabi_dsub>
 800ac60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ac64:	465d      	mov	r5, fp
 800ac66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac6a:	f7f5 ff7d 	bl	8000b68 <__aeabi_d2iz>
 800ac6e:	4606      	mov	r6, r0
 800ac70:	f7f5 fc60 	bl	8000534 <__aeabi_i2d>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac7c:	f7f5 fb0c 	bl	8000298 <__aeabi_dsub>
 800ac80:	3630      	adds	r6, #48	; 0x30
 800ac82:	f805 6b01 	strb.w	r6, [r5], #1
 800ac86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac8a:	e9cd 0100 	strd	r0, r1, [sp]
 800ac8e:	f7f5 ff2d 	bl	8000aec <__aeabi_dcmplt>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d163      	bne.n	800ad5e <_dtoa_r+0x5de>
 800ac96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	4937      	ldr	r1, [pc, #220]	; (800ad7c <_dtoa_r+0x5fc>)
 800ac9e:	f7f5 fafb 	bl	8000298 <__aeabi_dsub>
 800aca2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aca6:	f7f5 ff21 	bl	8000aec <__aeabi_dcmplt>
 800acaa:	2800      	cmp	r0, #0
 800acac:	f040 80b7 	bne.w	800ae1e <_dtoa_r+0x69e>
 800acb0:	eba5 030b 	sub.w	r3, r5, fp
 800acb4:	429f      	cmp	r7, r3
 800acb6:	f77f af7c 	ble.w	800abb2 <_dtoa_r+0x432>
 800acba:	2200      	movs	r2, #0
 800acbc:	4b30      	ldr	r3, [pc, #192]	; (800ad80 <_dtoa_r+0x600>)
 800acbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acc2:	f7f5 fca1 	bl	8000608 <__aeabi_dmul>
 800acc6:	2200      	movs	r2, #0
 800acc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800accc:	4b2c      	ldr	r3, [pc, #176]	; (800ad80 <_dtoa_r+0x600>)
 800acce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acd2:	f7f5 fc99 	bl	8000608 <__aeabi_dmul>
 800acd6:	e9cd 0100 	strd	r0, r1, [sp]
 800acda:	e7c4      	b.n	800ac66 <_dtoa_r+0x4e6>
 800acdc:	462a      	mov	r2, r5
 800acde:	4633      	mov	r3, r6
 800ace0:	f7f5 fc92 	bl	8000608 <__aeabi_dmul>
 800ace4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ace8:	eb0b 0507 	add.w	r5, fp, r7
 800acec:	465e      	mov	r6, fp
 800acee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acf2:	f7f5 ff39 	bl	8000b68 <__aeabi_d2iz>
 800acf6:	4607      	mov	r7, r0
 800acf8:	f7f5 fc1c 	bl	8000534 <__aeabi_i2d>
 800acfc:	3730      	adds	r7, #48	; 0x30
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad06:	f7f5 fac7 	bl	8000298 <__aeabi_dsub>
 800ad0a:	f806 7b01 	strb.w	r7, [r6], #1
 800ad0e:	42ae      	cmp	r6, r5
 800ad10:	e9cd 0100 	strd	r0, r1, [sp]
 800ad14:	f04f 0200 	mov.w	r2, #0
 800ad18:	d126      	bne.n	800ad68 <_dtoa_r+0x5e8>
 800ad1a:	4b1c      	ldr	r3, [pc, #112]	; (800ad8c <_dtoa_r+0x60c>)
 800ad1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad20:	f7f5 fabc 	bl	800029c <__adddf3>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad2c:	f7f5 fefc 	bl	8000b28 <__aeabi_dcmpgt>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d174      	bne.n	800ae1e <_dtoa_r+0x69e>
 800ad34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ad38:	2000      	movs	r0, #0
 800ad3a:	4914      	ldr	r1, [pc, #80]	; (800ad8c <_dtoa_r+0x60c>)
 800ad3c:	f7f5 faac 	bl	8000298 <__aeabi_dsub>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad48:	f7f5 fed0 	bl	8000aec <__aeabi_dcmplt>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	f43f af30 	beq.w	800abb2 <_dtoa_r+0x432>
 800ad52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad56:	2b30      	cmp	r3, #48	; 0x30
 800ad58:	f105 32ff 	add.w	r2, r5, #4294967295
 800ad5c:	d002      	beq.n	800ad64 <_dtoa_r+0x5e4>
 800ad5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ad62:	e04a      	b.n	800adfa <_dtoa_r+0x67a>
 800ad64:	4615      	mov	r5, r2
 800ad66:	e7f4      	b.n	800ad52 <_dtoa_r+0x5d2>
 800ad68:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <_dtoa_r+0x600>)
 800ad6a:	f7f5 fc4d 	bl	8000608 <__aeabi_dmul>
 800ad6e:	e9cd 0100 	strd	r0, r1, [sp]
 800ad72:	e7bc      	b.n	800acee <_dtoa_r+0x56e>
 800ad74:	080101b0 	.word	0x080101b0
 800ad78:	08010188 	.word	0x08010188
 800ad7c:	3ff00000 	.word	0x3ff00000
 800ad80:	40240000 	.word	0x40240000
 800ad84:	401c0000 	.word	0x401c0000
 800ad88:	40140000 	.word	0x40140000
 800ad8c:	3fe00000 	.word	0x3fe00000
 800ad90:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ad94:	465d      	mov	r5, fp
 800ad96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	f7f5 fd5d 	bl	800085c <__aeabi_ddiv>
 800ada2:	f7f5 fee1 	bl	8000b68 <__aeabi_d2iz>
 800ada6:	4680      	mov	r8, r0
 800ada8:	f7f5 fbc4 	bl	8000534 <__aeabi_i2d>
 800adac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adb0:	f7f5 fc2a 	bl	8000608 <__aeabi_dmul>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4630      	mov	r0, r6
 800adba:	4639      	mov	r1, r7
 800adbc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800adc0:	f7f5 fa6a 	bl	8000298 <__aeabi_dsub>
 800adc4:	f805 6b01 	strb.w	r6, [r5], #1
 800adc8:	eba5 060b 	sub.w	r6, r5, fp
 800adcc:	45b1      	cmp	r9, r6
 800adce:	4602      	mov	r2, r0
 800add0:	460b      	mov	r3, r1
 800add2:	d139      	bne.n	800ae48 <_dtoa_r+0x6c8>
 800add4:	f7f5 fa62 	bl	800029c <__adddf3>
 800add8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800addc:	4606      	mov	r6, r0
 800adde:	460f      	mov	r7, r1
 800ade0:	f7f5 fea2 	bl	8000b28 <__aeabi_dcmpgt>
 800ade4:	b9c8      	cbnz	r0, 800ae1a <_dtoa_r+0x69a>
 800ade6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adea:	4630      	mov	r0, r6
 800adec:	4639      	mov	r1, r7
 800adee:	f7f5 fe73 	bl	8000ad8 <__aeabi_dcmpeq>
 800adf2:	b110      	cbz	r0, 800adfa <_dtoa_r+0x67a>
 800adf4:	f018 0f01 	tst.w	r8, #1
 800adf8:	d10f      	bne.n	800ae1a <_dtoa_r+0x69a>
 800adfa:	9904      	ldr	r1, [sp, #16]
 800adfc:	4620      	mov	r0, r4
 800adfe:	f001 f802 	bl	800be06 <_Bfree>
 800ae02:	2300      	movs	r3, #0
 800ae04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae06:	702b      	strb	r3, [r5, #0]
 800ae08:	f10a 0301 	add.w	r3, sl, #1
 800ae0c:	6013      	str	r3, [r2, #0]
 800ae0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 8241 	beq.w	800b298 <_dtoa_r+0xb18>
 800ae16:	601d      	str	r5, [r3, #0]
 800ae18:	e23e      	b.n	800b298 <_dtoa_r+0xb18>
 800ae1a:	f8cd a020 	str.w	sl, [sp, #32]
 800ae1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae22:	2a39      	cmp	r2, #57	; 0x39
 800ae24:	f105 33ff 	add.w	r3, r5, #4294967295
 800ae28:	d108      	bne.n	800ae3c <_dtoa_r+0x6bc>
 800ae2a:	459b      	cmp	fp, r3
 800ae2c:	d10a      	bne.n	800ae44 <_dtoa_r+0x6c4>
 800ae2e:	9b08      	ldr	r3, [sp, #32]
 800ae30:	3301      	adds	r3, #1
 800ae32:	9308      	str	r3, [sp, #32]
 800ae34:	2330      	movs	r3, #48	; 0x30
 800ae36:	f88b 3000 	strb.w	r3, [fp]
 800ae3a:	465b      	mov	r3, fp
 800ae3c:	781a      	ldrb	r2, [r3, #0]
 800ae3e:	3201      	adds	r2, #1
 800ae40:	701a      	strb	r2, [r3, #0]
 800ae42:	e78c      	b.n	800ad5e <_dtoa_r+0x5de>
 800ae44:	461d      	mov	r5, r3
 800ae46:	e7ea      	b.n	800ae1e <_dtoa_r+0x69e>
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4b9b      	ldr	r3, [pc, #620]	; (800b0b8 <_dtoa_r+0x938>)
 800ae4c:	f7f5 fbdc 	bl	8000608 <__aeabi_dmul>
 800ae50:	2200      	movs	r2, #0
 800ae52:	2300      	movs	r3, #0
 800ae54:	4606      	mov	r6, r0
 800ae56:	460f      	mov	r7, r1
 800ae58:	f7f5 fe3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d09a      	beq.n	800ad96 <_dtoa_r+0x616>
 800ae60:	e7cb      	b.n	800adfa <_dtoa_r+0x67a>
 800ae62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae64:	2a00      	cmp	r2, #0
 800ae66:	f000 808b 	beq.w	800af80 <_dtoa_r+0x800>
 800ae6a:	9a06      	ldr	r2, [sp, #24]
 800ae6c:	2a01      	cmp	r2, #1
 800ae6e:	dc6e      	bgt.n	800af4e <_dtoa_r+0x7ce>
 800ae70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae72:	2a00      	cmp	r2, #0
 800ae74:	d067      	beq.n	800af46 <_dtoa_r+0x7c6>
 800ae76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae7a:	9f07      	ldr	r7, [sp, #28]
 800ae7c:	9d05      	ldr	r5, [sp, #20]
 800ae7e:	9a05      	ldr	r2, [sp, #20]
 800ae80:	2101      	movs	r1, #1
 800ae82:	441a      	add	r2, r3
 800ae84:	4620      	mov	r0, r4
 800ae86:	9205      	str	r2, [sp, #20]
 800ae88:	4498      	add	r8, r3
 800ae8a:	f001 f89a 	bl	800bfc2 <__i2b>
 800ae8e:	4606      	mov	r6, r0
 800ae90:	2d00      	cmp	r5, #0
 800ae92:	dd0c      	ble.n	800aeae <_dtoa_r+0x72e>
 800ae94:	f1b8 0f00 	cmp.w	r8, #0
 800ae98:	dd09      	ble.n	800aeae <_dtoa_r+0x72e>
 800ae9a:	4545      	cmp	r5, r8
 800ae9c:	9a05      	ldr	r2, [sp, #20]
 800ae9e:	462b      	mov	r3, r5
 800aea0:	bfa8      	it	ge
 800aea2:	4643      	movge	r3, r8
 800aea4:	1ad2      	subs	r2, r2, r3
 800aea6:	9205      	str	r2, [sp, #20]
 800aea8:	1aed      	subs	r5, r5, r3
 800aeaa:	eba8 0803 	sub.w	r8, r8, r3
 800aeae:	9b07      	ldr	r3, [sp, #28]
 800aeb0:	b1eb      	cbz	r3, 800aeee <_dtoa_r+0x76e>
 800aeb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d067      	beq.n	800af88 <_dtoa_r+0x808>
 800aeb8:	b18f      	cbz	r7, 800aede <_dtoa_r+0x75e>
 800aeba:	4631      	mov	r1, r6
 800aebc:	463a      	mov	r2, r7
 800aebe:	4620      	mov	r0, r4
 800aec0:	f001 f91e 	bl	800c100 <__pow5mult>
 800aec4:	9a04      	ldr	r2, [sp, #16]
 800aec6:	4601      	mov	r1, r0
 800aec8:	4606      	mov	r6, r0
 800aeca:	4620      	mov	r0, r4
 800aecc:	f001 f882 	bl	800bfd4 <__multiply>
 800aed0:	9904      	ldr	r1, [sp, #16]
 800aed2:	9008      	str	r0, [sp, #32]
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 ff96 	bl	800be06 <_Bfree>
 800aeda:	9b08      	ldr	r3, [sp, #32]
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	9b07      	ldr	r3, [sp, #28]
 800aee0:	1bda      	subs	r2, r3, r7
 800aee2:	d004      	beq.n	800aeee <_dtoa_r+0x76e>
 800aee4:	9904      	ldr	r1, [sp, #16]
 800aee6:	4620      	mov	r0, r4
 800aee8:	f001 f90a 	bl	800c100 <__pow5mult>
 800aeec:	9004      	str	r0, [sp, #16]
 800aeee:	2101      	movs	r1, #1
 800aef0:	4620      	mov	r0, r4
 800aef2:	f001 f866 	bl	800bfc2 <__i2b>
 800aef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aef8:	4607      	mov	r7, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f000 81d0 	beq.w	800b2a0 <_dtoa_r+0xb20>
 800af00:	461a      	mov	r2, r3
 800af02:	4601      	mov	r1, r0
 800af04:	4620      	mov	r0, r4
 800af06:	f001 f8fb 	bl	800c100 <__pow5mult>
 800af0a:	9b06      	ldr	r3, [sp, #24]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	4607      	mov	r7, r0
 800af10:	dc40      	bgt.n	800af94 <_dtoa_r+0x814>
 800af12:	9b00      	ldr	r3, [sp, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d139      	bne.n	800af8c <_dtoa_r+0x80c>
 800af18:	9b01      	ldr	r3, [sp, #4]
 800af1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d136      	bne.n	800af90 <_dtoa_r+0x810>
 800af22:	9b01      	ldr	r3, [sp, #4]
 800af24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af28:	0d1b      	lsrs	r3, r3, #20
 800af2a:	051b      	lsls	r3, r3, #20
 800af2c:	b12b      	cbz	r3, 800af3a <_dtoa_r+0x7ba>
 800af2e:	9b05      	ldr	r3, [sp, #20]
 800af30:	3301      	adds	r3, #1
 800af32:	9305      	str	r3, [sp, #20]
 800af34:	f108 0801 	add.w	r8, r8, #1
 800af38:	2301      	movs	r3, #1
 800af3a:	9307      	str	r3, [sp, #28]
 800af3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d12a      	bne.n	800af98 <_dtoa_r+0x818>
 800af42:	2001      	movs	r0, #1
 800af44:	e030      	b.n	800afa8 <_dtoa_r+0x828>
 800af46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af4c:	e795      	b.n	800ae7a <_dtoa_r+0x6fa>
 800af4e:	9b07      	ldr	r3, [sp, #28]
 800af50:	f109 37ff 	add.w	r7, r9, #4294967295
 800af54:	42bb      	cmp	r3, r7
 800af56:	bfbf      	itttt	lt
 800af58:	9b07      	ldrlt	r3, [sp, #28]
 800af5a:	9707      	strlt	r7, [sp, #28]
 800af5c:	1afa      	sublt	r2, r7, r3
 800af5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800af60:	bfbb      	ittet	lt
 800af62:	189b      	addlt	r3, r3, r2
 800af64:	930e      	strlt	r3, [sp, #56]	; 0x38
 800af66:	1bdf      	subge	r7, r3, r7
 800af68:	2700      	movlt	r7, #0
 800af6a:	f1b9 0f00 	cmp.w	r9, #0
 800af6e:	bfb5      	itete	lt
 800af70:	9b05      	ldrlt	r3, [sp, #20]
 800af72:	9d05      	ldrge	r5, [sp, #20]
 800af74:	eba3 0509 	sublt.w	r5, r3, r9
 800af78:	464b      	movge	r3, r9
 800af7a:	bfb8      	it	lt
 800af7c:	2300      	movlt	r3, #0
 800af7e:	e77e      	b.n	800ae7e <_dtoa_r+0x6fe>
 800af80:	9f07      	ldr	r7, [sp, #28]
 800af82:	9d05      	ldr	r5, [sp, #20]
 800af84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800af86:	e783      	b.n	800ae90 <_dtoa_r+0x710>
 800af88:	9a07      	ldr	r2, [sp, #28]
 800af8a:	e7ab      	b.n	800aee4 <_dtoa_r+0x764>
 800af8c:	2300      	movs	r3, #0
 800af8e:	e7d4      	b.n	800af3a <_dtoa_r+0x7ba>
 800af90:	9b00      	ldr	r3, [sp, #0]
 800af92:	e7d2      	b.n	800af3a <_dtoa_r+0x7ba>
 800af94:	2300      	movs	r3, #0
 800af96:	9307      	str	r3, [sp, #28]
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800af9e:	6918      	ldr	r0, [r3, #16]
 800afa0:	f000 ffc1 	bl	800bf26 <__hi0bits>
 800afa4:	f1c0 0020 	rsb	r0, r0, #32
 800afa8:	4440      	add	r0, r8
 800afaa:	f010 001f 	ands.w	r0, r0, #31
 800afae:	d047      	beq.n	800b040 <_dtoa_r+0x8c0>
 800afb0:	f1c0 0320 	rsb	r3, r0, #32
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	dd3b      	ble.n	800b030 <_dtoa_r+0x8b0>
 800afb8:	9b05      	ldr	r3, [sp, #20]
 800afba:	f1c0 001c 	rsb	r0, r0, #28
 800afbe:	4403      	add	r3, r0
 800afc0:	9305      	str	r3, [sp, #20]
 800afc2:	4405      	add	r5, r0
 800afc4:	4480      	add	r8, r0
 800afc6:	9b05      	ldr	r3, [sp, #20]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dd05      	ble.n	800afd8 <_dtoa_r+0x858>
 800afcc:	461a      	mov	r2, r3
 800afce:	9904      	ldr	r1, [sp, #16]
 800afd0:	4620      	mov	r0, r4
 800afd2:	f001 f8e3 	bl	800c19c <__lshift>
 800afd6:	9004      	str	r0, [sp, #16]
 800afd8:	f1b8 0f00 	cmp.w	r8, #0
 800afdc:	dd05      	ble.n	800afea <_dtoa_r+0x86a>
 800afde:	4639      	mov	r1, r7
 800afe0:	4642      	mov	r2, r8
 800afe2:	4620      	mov	r0, r4
 800afe4:	f001 f8da 	bl	800c19c <__lshift>
 800afe8:	4607      	mov	r7, r0
 800afea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afec:	b353      	cbz	r3, 800b044 <_dtoa_r+0x8c4>
 800afee:	4639      	mov	r1, r7
 800aff0:	9804      	ldr	r0, [sp, #16]
 800aff2:	f001 f927 	bl	800c244 <__mcmp>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	da24      	bge.n	800b044 <_dtoa_r+0x8c4>
 800affa:	2300      	movs	r3, #0
 800affc:	220a      	movs	r2, #10
 800affe:	9904      	ldr	r1, [sp, #16]
 800b000:	4620      	mov	r0, r4
 800b002:	f000 ff17 	bl	800be34 <__multadd>
 800b006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b008:	9004      	str	r0, [sp, #16]
 800b00a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 814d 	beq.w	800b2ae <_dtoa_r+0xb2e>
 800b014:	2300      	movs	r3, #0
 800b016:	4631      	mov	r1, r6
 800b018:	220a      	movs	r2, #10
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 ff0a 	bl	800be34 <__multadd>
 800b020:	9b02      	ldr	r3, [sp, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	4606      	mov	r6, r0
 800b026:	dc4f      	bgt.n	800b0c8 <_dtoa_r+0x948>
 800b028:	9b06      	ldr	r3, [sp, #24]
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	dd4c      	ble.n	800b0c8 <_dtoa_r+0x948>
 800b02e:	e011      	b.n	800b054 <_dtoa_r+0x8d4>
 800b030:	d0c9      	beq.n	800afc6 <_dtoa_r+0x846>
 800b032:	9a05      	ldr	r2, [sp, #20]
 800b034:	331c      	adds	r3, #28
 800b036:	441a      	add	r2, r3
 800b038:	9205      	str	r2, [sp, #20]
 800b03a:	441d      	add	r5, r3
 800b03c:	4498      	add	r8, r3
 800b03e:	e7c2      	b.n	800afc6 <_dtoa_r+0x846>
 800b040:	4603      	mov	r3, r0
 800b042:	e7f6      	b.n	800b032 <_dtoa_r+0x8b2>
 800b044:	f1b9 0f00 	cmp.w	r9, #0
 800b048:	dc38      	bgt.n	800b0bc <_dtoa_r+0x93c>
 800b04a:	9b06      	ldr	r3, [sp, #24]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	dd35      	ble.n	800b0bc <_dtoa_r+0x93c>
 800b050:	f8cd 9008 	str.w	r9, [sp, #8]
 800b054:	9b02      	ldr	r3, [sp, #8]
 800b056:	b963      	cbnz	r3, 800b072 <_dtoa_r+0x8f2>
 800b058:	4639      	mov	r1, r7
 800b05a:	2205      	movs	r2, #5
 800b05c:	4620      	mov	r0, r4
 800b05e:	f000 fee9 	bl	800be34 <__multadd>
 800b062:	4601      	mov	r1, r0
 800b064:	4607      	mov	r7, r0
 800b066:	9804      	ldr	r0, [sp, #16]
 800b068:	f001 f8ec 	bl	800c244 <__mcmp>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	f73f adcc 	bgt.w	800ac0a <_dtoa_r+0x48a>
 800b072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b074:	465d      	mov	r5, fp
 800b076:	ea6f 0a03 	mvn.w	sl, r3
 800b07a:	f04f 0900 	mov.w	r9, #0
 800b07e:	4639      	mov	r1, r7
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fec0 	bl	800be06 <_Bfree>
 800b086:	2e00      	cmp	r6, #0
 800b088:	f43f aeb7 	beq.w	800adfa <_dtoa_r+0x67a>
 800b08c:	f1b9 0f00 	cmp.w	r9, #0
 800b090:	d005      	beq.n	800b09e <_dtoa_r+0x91e>
 800b092:	45b1      	cmp	r9, r6
 800b094:	d003      	beq.n	800b09e <_dtoa_r+0x91e>
 800b096:	4649      	mov	r1, r9
 800b098:	4620      	mov	r0, r4
 800b09a:	f000 feb4 	bl	800be06 <_Bfree>
 800b09e:	4631      	mov	r1, r6
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f000 feb0 	bl	800be06 <_Bfree>
 800b0a6:	e6a8      	b.n	800adfa <_dtoa_r+0x67a>
 800b0a8:	2700      	movs	r7, #0
 800b0aa:	463e      	mov	r6, r7
 800b0ac:	e7e1      	b.n	800b072 <_dtoa_r+0x8f2>
 800b0ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b0b2:	463e      	mov	r6, r7
 800b0b4:	e5a9      	b.n	800ac0a <_dtoa_r+0x48a>
 800b0b6:	bf00      	nop
 800b0b8:	40240000 	.word	0x40240000
 800b0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0be:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 80fa 	beq.w	800b2bc <_dtoa_r+0xb3c>
 800b0c8:	2d00      	cmp	r5, #0
 800b0ca:	dd05      	ble.n	800b0d8 <_dtoa_r+0x958>
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	462a      	mov	r2, r5
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f001 f863 	bl	800c19c <__lshift>
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	9b07      	ldr	r3, [sp, #28]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d04c      	beq.n	800b178 <_dtoa_r+0x9f8>
 800b0de:	6871      	ldr	r1, [r6, #4]
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 fe5c 	bl	800bd9e <_Balloc>
 800b0e6:	6932      	ldr	r2, [r6, #16]
 800b0e8:	3202      	adds	r2, #2
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	0092      	lsls	r2, r2, #2
 800b0ee:	f106 010c 	add.w	r1, r6, #12
 800b0f2:	300c      	adds	r0, #12
 800b0f4:	f000 fe46 	bl	800bd84 <memcpy>
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f001 f84d 	bl	800c19c <__lshift>
 800b102:	9b00      	ldr	r3, [sp, #0]
 800b104:	f8cd b014 	str.w	fp, [sp, #20]
 800b108:	f003 0301 	and.w	r3, r3, #1
 800b10c:	46b1      	mov	r9, r6
 800b10e:	9307      	str	r3, [sp, #28]
 800b110:	4606      	mov	r6, r0
 800b112:	4639      	mov	r1, r7
 800b114:	9804      	ldr	r0, [sp, #16]
 800b116:	f7ff faa7 	bl	800a668 <quorem>
 800b11a:	4649      	mov	r1, r9
 800b11c:	4605      	mov	r5, r0
 800b11e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b122:	9804      	ldr	r0, [sp, #16]
 800b124:	f001 f88e 	bl	800c244 <__mcmp>
 800b128:	4632      	mov	r2, r6
 800b12a:	9000      	str	r0, [sp, #0]
 800b12c:	4639      	mov	r1, r7
 800b12e:	4620      	mov	r0, r4
 800b130:	f001 f8a2 	bl	800c278 <__mdiff>
 800b134:	68c3      	ldr	r3, [r0, #12]
 800b136:	4602      	mov	r2, r0
 800b138:	bb03      	cbnz	r3, 800b17c <_dtoa_r+0x9fc>
 800b13a:	4601      	mov	r1, r0
 800b13c:	9008      	str	r0, [sp, #32]
 800b13e:	9804      	ldr	r0, [sp, #16]
 800b140:	f001 f880 	bl	800c244 <__mcmp>
 800b144:	9a08      	ldr	r2, [sp, #32]
 800b146:	4603      	mov	r3, r0
 800b148:	4611      	mov	r1, r2
 800b14a:	4620      	mov	r0, r4
 800b14c:	9308      	str	r3, [sp, #32]
 800b14e:	f000 fe5a 	bl	800be06 <_Bfree>
 800b152:	9b08      	ldr	r3, [sp, #32]
 800b154:	b9a3      	cbnz	r3, 800b180 <_dtoa_r+0xa00>
 800b156:	9a06      	ldr	r2, [sp, #24]
 800b158:	b992      	cbnz	r2, 800b180 <_dtoa_r+0xa00>
 800b15a:	9a07      	ldr	r2, [sp, #28]
 800b15c:	b982      	cbnz	r2, 800b180 <_dtoa_r+0xa00>
 800b15e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b162:	d029      	beq.n	800b1b8 <_dtoa_r+0xa38>
 800b164:	9b00      	ldr	r3, [sp, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	dd01      	ble.n	800b16e <_dtoa_r+0x9ee>
 800b16a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b16e:	9b05      	ldr	r3, [sp, #20]
 800b170:	1c5d      	adds	r5, r3, #1
 800b172:	f883 8000 	strb.w	r8, [r3]
 800b176:	e782      	b.n	800b07e <_dtoa_r+0x8fe>
 800b178:	4630      	mov	r0, r6
 800b17a:	e7c2      	b.n	800b102 <_dtoa_r+0x982>
 800b17c:	2301      	movs	r3, #1
 800b17e:	e7e3      	b.n	800b148 <_dtoa_r+0x9c8>
 800b180:	9a00      	ldr	r2, [sp, #0]
 800b182:	2a00      	cmp	r2, #0
 800b184:	db04      	blt.n	800b190 <_dtoa_r+0xa10>
 800b186:	d125      	bne.n	800b1d4 <_dtoa_r+0xa54>
 800b188:	9a06      	ldr	r2, [sp, #24]
 800b18a:	bb1a      	cbnz	r2, 800b1d4 <_dtoa_r+0xa54>
 800b18c:	9a07      	ldr	r2, [sp, #28]
 800b18e:	bb0a      	cbnz	r2, 800b1d4 <_dtoa_r+0xa54>
 800b190:	2b00      	cmp	r3, #0
 800b192:	ddec      	ble.n	800b16e <_dtoa_r+0x9ee>
 800b194:	2201      	movs	r2, #1
 800b196:	9904      	ldr	r1, [sp, #16]
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 ffff 	bl	800c19c <__lshift>
 800b19e:	4639      	mov	r1, r7
 800b1a0:	9004      	str	r0, [sp, #16]
 800b1a2:	f001 f84f 	bl	800c244 <__mcmp>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	dc03      	bgt.n	800b1b2 <_dtoa_r+0xa32>
 800b1aa:	d1e0      	bne.n	800b16e <_dtoa_r+0x9ee>
 800b1ac:	f018 0f01 	tst.w	r8, #1
 800b1b0:	d0dd      	beq.n	800b16e <_dtoa_r+0x9ee>
 800b1b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b1b6:	d1d8      	bne.n	800b16a <_dtoa_r+0x9ea>
 800b1b8:	9b05      	ldr	r3, [sp, #20]
 800b1ba:	9a05      	ldr	r2, [sp, #20]
 800b1bc:	1c5d      	adds	r5, r3, #1
 800b1be:	2339      	movs	r3, #57	; 0x39
 800b1c0:	7013      	strb	r3, [r2, #0]
 800b1c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1c6:	2b39      	cmp	r3, #57	; 0x39
 800b1c8:	f105 32ff 	add.w	r2, r5, #4294967295
 800b1cc:	d04f      	beq.n	800b26e <_dtoa_r+0xaee>
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	7013      	strb	r3, [r2, #0]
 800b1d2:	e754      	b.n	800b07e <_dtoa_r+0x8fe>
 800b1d4:	9a05      	ldr	r2, [sp, #20]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f102 0501 	add.w	r5, r2, #1
 800b1dc:	dd06      	ble.n	800b1ec <_dtoa_r+0xa6c>
 800b1de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b1e2:	d0e9      	beq.n	800b1b8 <_dtoa_r+0xa38>
 800b1e4:	f108 0801 	add.w	r8, r8, #1
 800b1e8:	9b05      	ldr	r3, [sp, #20]
 800b1ea:	e7c2      	b.n	800b172 <_dtoa_r+0x9f2>
 800b1ec:	9a02      	ldr	r2, [sp, #8]
 800b1ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b1f2:	eba5 030b 	sub.w	r3, r5, fp
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d021      	beq.n	800b23e <_dtoa_r+0xabe>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	220a      	movs	r2, #10
 800b1fe:	9904      	ldr	r1, [sp, #16]
 800b200:	4620      	mov	r0, r4
 800b202:	f000 fe17 	bl	800be34 <__multadd>
 800b206:	45b1      	cmp	r9, r6
 800b208:	9004      	str	r0, [sp, #16]
 800b20a:	f04f 0300 	mov.w	r3, #0
 800b20e:	f04f 020a 	mov.w	r2, #10
 800b212:	4649      	mov	r1, r9
 800b214:	4620      	mov	r0, r4
 800b216:	d105      	bne.n	800b224 <_dtoa_r+0xaa4>
 800b218:	f000 fe0c 	bl	800be34 <__multadd>
 800b21c:	4681      	mov	r9, r0
 800b21e:	4606      	mov	r6, r0
 800b220:	9505      	str	r5, [sp, #20]
 800b222:	e776      	b.n	800b112 <_dtoa_r+0x992>
 800b224:	f000 fe06 	bl	800be34 <__multadd>
 800b228:	4631      	mov	r1, r6
 800b22a:	4681      	mov	r9, r0
 800b22c:	2300      	movs	r3, #0
 800b22e:	220a      	movs	r2, #10
 800b230:	4620      	mov	r0, r4
 800b232:	f000 fdff 	bl	800be34 <__multadd>
 800b236:	4606      	mov	r6, r0
 800b238:	e7f2      	b.n	800b220 <_dtoa_r+0xaa0>
 800b23a:	f04f 0900 	mov.w	r9, #0
 800b23e:	2201      	movs	r2, #1
 800b240:	9904      	ldr	r1, [sp, #16]
 800b242:	4620      	mov	r0, r4
 800b244:	f000 ffaa 	bl	800c19c <__lshift>
 800b248:	4639      	mov	r1, r7
 800b24a:	9004      	str	r0, [sp, #16]
 800b24c:	f000 fffa 	bl	800c244 <__mcmp>
 800b250:	2800      	cmp	r0, #0
 800b252:	dcb6      	bgt.n	800b1c2 <_dtoa_r+0xa42>
 800b254:	d102      	bne.n	800b25c <_dtoa_r+0xadc>
 800b256:	f018 0f01 	tst.w	r8, #1
 800b25a:	d1b2      	bne.n	800b1c2 <_dtoa_r+0xa42>
 800b25c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b260:	2b30      	cmp	r3, #48	; 0x30
 800b262:	f105 32ff 	add.w	r2, r5, #4294967295
 800b266:	f47f af0a 	bne.w	800b07e <_dtoa_r+0x8fe>
 800b26a:	4615      	mov	r5, r2
 800b26c:	e7f6      	b.n	800b25c <_dtoa_r+0xadc>
 800b26e:	4593      	cmp	fp, r2
 800b270:	d105      	bne.n	800b27e <_dtoa_r+0xafe>
 800b272:	2331      	movs	r3, #49	; 0x31
 800b274:	f10a 0a01 	add.w	sl, sl, #1
 800b278:	f88b 3000 	strb.w	r3, [fp]
 800b27c:	e6ff      	b.n	800b07e <_dtoa_r+0x8fe>
 800b27e:	4615      	mov	r5, r2
 800b280:	e79f      	b.n	800b1c2 <_dtoa_r+0xa42>
 800b282:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b2e8 <_dtoa_r+0xb68>
 800b286:	e007      	b.n	800b298 <_dtoa_r+0xb18>
 800b288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b28a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b2ec <_dtoa_r+0xb6c>
 800b28e:	b11b      	cbz	r3, 800b298 <_dtoa_r+0xb18>
 800b290:	f10b 0308 	add.w	r3, fp, #8
 800b294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b296:	6013      	str	r3, [r2, #0]
 800b298:	4658      	mov	r0, fp
 800b29a:	b017      	add	sp, #92	; 0x5c
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a0:	9b06      	ldr	r3, [sp, #24]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	f77f ae35 	ble.w	800af12 <_dtoa_r+0x792>
 800b2a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2aa:	9307      	str	r3, [sp, #28]
 800b2ac:	e649      	b.n	800af42 <_dtoa_r+0x7c2>
 800b2ae:	9b02      	ldr	r3, [sp, #8]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	dc03      	bgt.n	800b2bc <_dtoa_r+0xb3c>
 800b2b4:	9b06      	ldr	r3, [sp, #24]
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	f73f aecc 	bgt.w	800b054 <_dtoa_r+0x8d4>
 800b2bc:	465d      	mov	r5, fp
 800b2be:	4639      	mov	r1, r7
 800b2c0:	9804      	ldr	r0, [sp, #16]
 800b2c2:	f7ff f9d1 	bl	800a668 <quorem>
 800b2c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b2ca:	f805 8b01 	strb.w	r8, [r5], #1
 800b2ce:	9a02      	ldr	r2, [sp, #8]
 800b2d0:	eba5 030b 	sub.w	r3, r5, fp
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	ddb0      	ble.n	800b23a <_dtoa_r+0xaba>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	220a      	movs	r2, #10
 800b2dc:	9904      	ldr	r1, [sp, #16]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f000 fda8 	bl	800be34 <__multadd>
 800b2e4:	9004      	str	r0, [sp, #16]
 800b2e6:	e7ea      	b.n	800b2be <_dtoa_r+0xb3e>
 800b2e8:	080102ab 	.word	0x080102ab
 800b2ec:	08010108 	.word	0x08010108

0800b2f0 <__sflush_r>:
 800b2f0:	898a      	ldrh	r2, [r1, #12]
 800b2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	0710      	lsls	r0, r2, #28
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	d458      	bmi.n	800b3b0 <__sflush_r+0xc0>
 800b2fe:	684b      	ldr	r3, [r1, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	dc05      	bgt.n	800b310 <__sflush_r+0x20>
 800b304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b306:	2b00      	cmp	r3, #0
 800b308:	dc02      	bgt.n	800b310 <__sflush_r+0x20>
 800b30a:	2000      	movs	r0, #0
 800b30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b312:	2e00      	cmp	r6, #0
 800b314:	d0f9      	beq.n	800b30a <__sflush_r+0x1a>
 800b316:	2300      	movs	r3, #0
 800b318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b31c:	682f      	ldr	r7, [r5, #0]
 800b31e:	6a21      	ldr	r1, [r4, #32]
 800b320:	602b      	str	r3, [r5, #0]
 800b322:	d032      	beq.n	800b38a <__sflush_r+0x9a>
 800b324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	075a      	lsls	r2, r3, #29
 800b32a:	d505      	bpl.n	800b338 <__sflush_r+0x48>
 800b32c:	6863      	ldr	r3, [r4, #4]
 800b32e:	1ac0      	subs	r0, r0, r3
 800b330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b332:	b10b      	cbz	r3, 800b338 <__sflush_r+0x48>
 800b334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b336:	1ac0      	subs	r0, r0, r3
 800b338:	2300      	movs	r3, #0
 800b33a:	4602      	mov	r2, r0
 800b33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b33e:	6a21      	ldr	r1, [r4, #32]
 800b340:	4628      	mov	r0, r5
 800b342:	47b0      	blx	r6
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	89a3      	ldrh	r3, [r4, #12]
 800b348:	d106      	bne.n	800b358 <__sflush_r+0x68>
 800b34a:	6829      	ldr	r1, [r5, #0]
 800b34c:	291d      	cmp	r1, #29
 800b34e:	d848      	bhi.n	800b3e2 <__sflush_r+0xf2>
 800b350:	4a29      	ldr	r2, [pc, #164]	; (800b3f8 <__sflush_r+0x108>)
 800b352:	40ca      	lsrs	r2, r1
 800b354:	07d6      	lsls	r6, r2, #31
 800b356:	d544      	bpl.n	800b3e2 <__sflush_r+0xf2>
 800b358:	2200      	movs	r2, #0
 800b35a:	6062      	str	r2, [r4, #4]
 800b35c:	04d9      	lsls	r1, r3, #19
 800b35e:	6922      	ldr	r2, [r4, #16]
 800b360:	6022      	str	r2, [r4, #0]
 800b362:	d504      	bpl.n	800b36e <__sflush_r+0x7e>
 800b364:	1c42      	adds	r2, r0, #1
 800b366:	d101      	bne.n	800b36c <__sflush_r+0x7c>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	b903      	cbnz	r3, 800b36e <__sflush_r+0x7e>
 800b36c:	6560      	str	r0, [r4, #84]	; 0x54
 800b36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b370:	602f      	str	r7, [r5, #0]
 800b372:	2900      	cmp	r1, #0
 800b374:	d0c9      	beq.n	800b30a <__sflush_r+0x1a>
 800b376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b37a:	4299      	cmp	r1, r3
 800b37c:	d002      	beq.n	800b384 <__sflush_r+0x94>
 800b37e:	4628      	mov	r0, r5
 800b380:	f7fd f9c4 	bl	800870c <_free_r>
 800b384:	2000      	movs	r0, #0
 800b386:	6360      	str	r0, [r4, #52]	; 0x34
 800b388:	e7c0      	b.n	800b30c <__sflush_r+0x1c>
 800b38a:	2301      	movs	r3, #1
 800b38c:	4628      	mov	r0, r5
 800b38e:	47b0      	blx	r6
 800b390:	1c41      	adds	r1, r0, #1
 800b392:	d1c8      	bne.n	800b326 <__sflush_r+0x36>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d0c5      	beq.n	800b326 <__sflush_r+0x36>
 800b39a:	2b1d      	cmp	r3, #29
 800b39c:	d001      	beq.n	800b3a2 <__sflush_r+0xb2>
 800b39e:	2b16      	cmp	r3, #22
 800b3a0:	d101      	bne.n	800b3a6 <__sflush_r+0xb6>
 800b3a2:	602f      	str	r7, [r5, #0]
 800b3a4:	e7b1      	b.n	800b30a <__sflush_r+0x1a>
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ac:	81a3      	strh	r3, [r4, #12]
 800b3ae:	e7ad      	b.n	800b30c <__sflush_r+0x1c>
 800b3b0:	690f      	ldr	r7, [r1, #16]
 800b3b2:	2f00      	cmp	r7, #0
 800b3b4:	d0a9      	beq.n	800b30a <__sflush_r+0x1a>
 800b3b6:	0793      	lsls	r3, r2, #30
 800b3b8:	680e      	ldr	r6, [r1, #0]
 800b3ba:	bf08      	it	eq
 800b3bc:	694b      	ldreq	r3, [r1, #20]
 800b3be:	600f      	str	r7, [r1, #0]
 800b3c0:	bf18      	it	ne
 800b3c2:	2300      	movne	r3, #0
 800b3c4:	eba6 0807 	sub.w	r8, r6, r7
 800b3c8:	608b      	str	r3, [r1, #8]
 800b3ca:	f1b8 0f00 	cmp.w	r8, #0
 800b3ce:	dd9c      	ble.n	800b30a <__sflush_r+0x1a>
 800b3d0:	4643      	mov	r3, r8
 800b3d2:	463a      	mov	r2, r7
 800b3d4:	6a21      	ldr	r1, [r4, #32]
 800b3d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3d8:	4628      	mov	r0, r5
 800b3da:	47b0      	blx	r6
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	dc06      	bgt.n	800b3ee <__sflush_r+0xfe>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e6:	81a3      	strh	r3, [r4, #12]
 800b3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ec:	e78e      	b.n	800b30c <__sflush_r+0x1c>
 800b3ee:	4407      	add	r7, r0
 800b3f0:	eba8 0800 	sub.w	r8, r8, r0
 800b3f4:	e7e9      	b.n	800b3ca <__sflush_r+0xda>
 800b3f6:	bf00      	nop
 800b3f8:	20400001 	.word	0x20400001

0800b3fc <_fflush_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	690b      	ldr	r3, [r1, #16]
 800b400:	4605      	mov	r5, r0
 800b402:	460c      	mov	r4, r1
 800b404:	b1db      	cbz	r3, 800b43e <_fflush_r+0x42>
 800b406:	b118      	cbz	r0, 800b410 <_fflush_r+0x14>
 800b408:	6983      	ldr	r3, [r0, #24]
 800b40a:	b90b      	cbnz	r3, 800b410 <_fflush_r+0x14>
 800b40c:	f000 f860 	bl	800b4d0 <__sinit>
 800b410:	4b0c      	ldr	r3, [pc, #48]	; (800b444 <_fflush_r+0x48>)
 800b412:	429c      	cmp	r4, r3
 800b414:	d109      	bne.n	800b42a <_fflush_r+0x2e>
 800b416:	686c      	ldr	r4, [r5, #4]
 800b418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b41c:	b17b      	cbz	r3, 800b43e <_fflush_r+0x42>
 800b41e:	4621      	mov	r1, r4
 800b420:	4628      	mov	r0, r5
 800b422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b426:	f7ff bf63 	b.w	800b2f0 <__sflush_r>
 800b42a:	4b07      	ldr	r3, [pc, #28]	; (800b448 <_fflush_r+0x4c>)
 800b42c:	429c      	cmp	r4, r3
 800b42e:	d101      	bne.n	800b434 <_fflush_r+0x38>
 800b430:	68ac      	ldr	r4, [r5, #8]
 800b432:	e7f1      	b.n	800b418 <_fflush_r+0x1c>
 800b434:	4b05      	ldr	r3, [pc, #20]	; (800b44c <_fflush_r+0x50>)
 800b436:	429c      	cmp	r4, r3
 800b438:	bf08      	it	eq
 800b43a:	68ec      	ldreq	r4, [r5, #12]
 800b43c:	e7ec      	b.n	800b418 <_fflush_r+0x1c>
 800b43e:	2000      	movs	r0, #0
 800b440:	bd38      	pop	{r3, r4, r5, pc}
 800b442:	bf00      	nop
 800b444:	08010138 	.word	0x08010138
 800b448:	08010158 	.word	0x08010158
 800b44c:	08010118 	.word	0x08010118

0800b450 <std>:
 800b450:	2300      	movs	r3, #0
 800b452:	b510      	push	{r4, lr}
 800b454:	4604      	mov	r4, r0
 800b456:	e9c0 3300 	strd	r3, r3, [r0]
 800b45a:	6083      	str	r3, [r0, #8]
 800b45c:	8181      	strh	r1, [r0, #12]
 800b45e:	6643      	str	r3, [r0, #100]	; 0x64
 800b460:	81c2      	strh	r2, [r0, #14]
 800b462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b466:	6183      	str	r3, [r0, #24]
 800b468:	4619      	mov	r1, r3
 800b46a:	2208      	movs	r2, #8
 800b46c:	305c      	adds	r0, #92	; 0x5c
 800b46e:	f7fd f945 	bl	80086fc <memset>
 800b472:	4b05      	ldr	r3, [pc, #20]	; (800b488 <std+0x38>)
 800b474:	6263      	str	r3, [r4, #36]	; 0x24
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <std+0x3c>)
 800b478:	62a3      	str	r3, [r4, #40]	; 0x28
 800b47a:	4b05      	ldr	r3, [pc, #20]	; (800b490 <std+0x40>)
 800b47c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b47e:	4b05      	ldr	r3, [pc, #20]	; (800b494 <std+0x44>)
 800b480:	6224      	str	r4, [r4, #32]
 800b482:	6323      	str	r3, [r4, #48]	; 0x30
 800b484:	bd10      	pop	{r4, pc}
 800b486:	bf00      	nop
 800b488:	08009691 	.word	0x08009691
 800b48c:	080096b7 	.word	0x080096b7
 800b490:	080096ef 	.word	0x080096ef
 800b494:	08009713 	.word	0x08009713

0800b498 <_cleanup_r>:
 800b498:	4901      	ldr	r1, [pc, #4]	; (800b4a0 <_cleanup_r+0x8>)
 800b49a:	f000 b885 	b.w	800b5a8 <_fwalk_reent>
 800b49e:	bf00      	nop
 800b4a0:	0800b3fd 	.word	0x0800b3fd

0800b4a4 <__sfmoreglue>:
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	1e4a      	subs	r2, r1, #1
 800b4a8:	2568      	movs	r5, #104	; 0x68
 800b4aa:	4355      	muls	r5, r2
 800b4ac:	460e      	mov	r6, r1
 800b4ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4b2:	f7fd f979 	bl	80087a8 <_malloc_r>
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	b140      	cbz	r0, 800b4cc <__sfmoreglue+0x28>
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	e9c0 1600 	strd	r1, r6, [r0]
 800b4c0:	300c      	adds	r0, #12
 800b4c2:	60a0      	str	r0, [r4, #8]
 800b4c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4c8:	f7fd f918 	bl	80086fc <memset>
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	bd70      	pop	{r4, r5, r6, pc}

0800b4d0 <__sinit>:
 800b4d0:	6983      	ldr	r3, [r0, #24]
 800b4d2:	b510      	push	{r4, lr}
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	bb33      	cbnz	r3, 800b526 <__sinit+0x56>
 800b4d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b4dc:	6503      	str	r3, [r0, #80]	; 0x50
 800b4de:	4b12      	ldr	r3, [pc, #72]	; (800b528 <__sinit+0x58>)
 800b4e0:	4a12      	ldr	r2, [pc, #72]	; (800b52c <__sinit+0x5c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6282      	str	r2, [r0, #40]	; 0x28
 800b4e6:	4298      	cmp	r0, r3
 800b4e8:	bf04      	itt	eq
 800b4ea:	2301      	moveq	r3, #1
 800b4ec:	6183      	streq	r3, [r0, #24]
 800b4ee:	f000 f81f 	bl	800b530 <__sfp>
 800b4f2:	6060      	str	r0, [r4, #4]
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 f81b 	bl	800b530 <__sfp>
 800b4fa:	60a0      	str	r0, [r4, #8]
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f000 f817 	bl	800b530 <__sfp>
 800b502:	2200      	movs	r2, #0
 800b504:	60e0      	str	r0, [r4, #12]
 800b506:	2104      	movs	r1, #4
 800b508:	6860      	ldr	r0, [r4, #4]
 800b50a:	f7ff ffa1 	bl	800b450 <std>
 800b50e:	2201      	movs	r2, #1
 800b510:	2109      	movs	r1, #9
 800b512:	68a0      	ldr	r0, [r4, #8]
 800b514:	f7ff ff9c 	bl	800b450 <std>
 800b518:	2202      	movs	r2, #2
 800b51a:	2112      	movs	r1, #18
 800b51c:	68e0      	ldr	r0, [r4, #12]
 800b51e:	f7ff ff97 	bl	800b450 <std>
 800b522:	2301      	movs	r3, #1
 800b524:	61a3      	str	r3, [r4, #24]
 800b526:	bd10      	pop	{r4, pc}
 800b528:	0801007c 	.word	0x0801007c
 800b52c:	0800b499 	.word	0x0800b499

0800b530 <__sfp>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	4b1b      	ldr	r3, [pc, #108]	; (800b5a0 <__sfp+0x70>)
 800b534:	681e      	ldr	r6, [r3, #0]
 800b536:	69b3      	ldr	r3, [r6, #24]
 800b538:	4607      	mov	r7, r0
 800b53a:	b913      	cbnz	r3, 800b542 <__sfp+0x12>
 800b53c:	4630      	mov	r0, r6
 800b53e:	f7ff ffc7 	bl	800b4d0 <__sinit>
 800b542:	3648      	adds	r6, #72	; 0x48
 800b544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b548:	3b01      	subs	r3, #1
 800b54a:	d503      	bpl.n	800b554 <__sfp+0x24>
 800b54c:	6833      	ldr	r3, [r6, #0]
 800b54e:	b133      	cbz	r3, 800b55e <__sfp+0x2e>
 800b550:	6836      	ldr	r6, [r6, #0]
 800b552:	e7f7      	b.n	800b544 <__sfp+0x14>
 800b554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b558:	b16d      	cbz	r5, 800b576 <__sfp+0x46>
 800b55a:	3468      	adds	r4, #104	; 0x68
 800b55c:	e7f4      	b.n	800b548 <__sfp+0x18>
 800b55e:	2104      	movs	r1, #4
 800b560:	4638      	mov	r0, r7
 800b562:	f7ff ff9f 	bl	800b4a4 <__sfmoreglue>
 800b566:	6030      	str	r0, [r6, #0]
 800b568:	2800      	cmp	r0, #0
 800b56a:	d1f1      	bne.n	800b550 <__sfp+0x20>
 800b56c:	230c      	movs	r3, #12
 800b56e:	603b      	str	r3, [r7, #0]
 800b570:	4604      	mov	r4, r0
 800b572:	4620      	mov	r0, r4
 800b574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b576:	4b0b      	ldr	r3, [pc, #44]	; (800b5a4 <__sfp+0x74>)
 800b578:	6665      	str	r5, [r4, #100]	; 0x64
 800b57a:	e9c4 5500 	strd	r5, r5, [r4]
 800b57e:	60a5      	str	r5, [r4, #8]
 800b580:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b584:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b588:	2208      	movs	r2, #8
 800b58a:	4629      	mov	r1, r5
 800b58c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b590:	f7fd f8b4 	bl	80086fc <memset>
 800b594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b59c:	e7e9      	b.n	800b572 <__sfp+0x42>
 800b59e:	bf00      	nop
 800b5a0:	0801007c 	.word	0x0801007c
 800b5a4:	ffff0001 	.word	0xffff0001

0800b5a8 <_fwalk_reent>:
 800b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	4680      	mov	r8, r0
 800b5ae:	4689      	mov	r9, r1
 800b5b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5b4:	2600      	movs	r6, #0
 800b5b6:	b914      	cbnz	r4, 800b5be <_fwalk_reent+0x16>
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b5c2:	3f01      	subs	r7, #1
 800b5c4:	d501      	bpl.n	800b5ca <_fwalk_reent+0x22>
 800b5c6:	6824      	ldr	r4, [r4, #0]
 800b5c8:	e7f5      	b.n	800b5b6 <_fwalk_reent+0xe>
 800b5ca:	89ab      	ldrh	r3, [r5, #12]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d907      	bls.n	800b5e0 <_fwalk_reent+0x38>
 800b5d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	d003      	beq.n	800b5e0 <_fwalk_reent+0x38>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4640      	mov	r0, r8
 800b5dc:	47c8      	blx	r9
 800b5de:	4306      	orrs	r6, r0
 800b5e0:	3568      	adds	r5, #104	; 0x68
 800b5e2:	e7ee      	b.n	800b5c2 <_fwalk_reent+0x1a>

0800b5e4 <rshift>:
 800b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e6:	6906      	ldr	r6, [r0, #16]
 800b5e8:	114b      	asrs	r3, r1, #5
 800b5ea:	429e      	cmp	r6, r3
 800b5ec:	f100 0414 	add.w	r4, r0, #20
 800b5f0:	dd30      	ble.n	800b654 <rshift+0x70>
 800b5f2:	f011 011f 	ands.w	r1, r1, #31
 800b5f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b5fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b5fe:	d108      	bne.n	800b612 <rshift+0x2e>
 800b600:	4621      	mov	r1, r4
 800b602:	42b2      	cmp	r2, r6
 800b604:	460b      	mov	r3, r1
 800b606:	d211      	bcs.n	800b62c <rshift+0x48>
 800b608:	f852 3b04 	ldr.w	r3, [r2], #4
 800b60c:	f841 3b04 	str.w	r3, [r1], #4
 800b610:	e7f7      	b.n	800b602 <rshift+0x1e>
 800b612:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b616:	f1c1 0c20 	rsb	ip, r1, #32
 800b61a:	40cd      	lsrs	r5, r1
 800b61c:	3204      	adds	r2, #4
 800b61e:	4623      	mov	r3, r4
 800b620:	42b2      	cmp	r2, r6
 800b622:	4617      	mov	r7, r2
 800b624:	d30c      	bcc.n	800b640 <rshift+0x5c>
 800b626:	601d      	str	r5, [r3, #0]
 800b628:	b105      	cbz	r5, 800b62c <rshift+0x48>
 800b62a:	3304      	adds	r3, #4
 800b62c:	1b1a      	subs	r2, r3, r4
 800b62e:	42a3      	cmp	r3, r4
 800b630:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b634:	bf08      	it	eq
 800b636:	2300      	moveq	r3, #0
 800b638:	6102      	str	r2, [r0, #16]
 800b63a:	bf08      	it	eq
 800b63c:	6143      	streq	r3, [r0, #20]
 800b63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b640:	683f      	ldr	r7, [r7, #0]
 800b642:	fa07 f70c 	lsl.w	r7, r7, ip
 800b646:	433d      	orrs	r5, r7
 800b648:	f843 5b04 	str.w	r5, [r3], #4
 800b64c:	f852 5b04 	ldr.w	r5, [r2], #4
 800b650:	40cd      	lsrs	r5, r1
 800b652:	e7e5      	b.n	800b620 <rshift+0x3c>
 800b654:	4623      	mov	r3, r4
 800b656:	e7e9      	b.n	800b62c <rshift+0x48>

0800b658 <__hexdig_fun>:
 800b658:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b65c:	2b09      	cmp	r3, #9
 800b65e:	d802      	bhi.n	800b666 <__hexdig_fun+0xe>
 800b660:	3820      	subs	r0, #32
 800b662:	b2c0      	uxtb	r0, r0
 800b664:	4770      	bx	lr
 800b666:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b66a:	2b05      	cmp	r3, #5
 800b66c:	d801      	bhi.n	800b672 <__hexdig_fun+0x1a>
 800b66e:	3847      	subs	r0, #71	; 0x47
 800b670:	e7f7      	b.n	800b662 <__hexdig_fun+0xa>
 800b672:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b676:	2b05      	cmp	r3, #5
 800b678:	d801      	bhi.n	800b67e <__hexdig_fun+0x26>
 800b67a:	3827      	subs	r0, #39	; 0x27
 800b67c:	e7f1      	b.n	800b662 <__hexdig_fun+0xa>
 800b67e:	2000      	movs	r0, #0
 800b680:	4770      	bx	lr

0800b682 <__gethex>:
 800b682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b686:	b08b      	sub	sp, #44	; 0x2c
 800b688:	468a      	mov	sl, r1
 800b68a:	9002      	str	r0, [sp, #8]
 800b68c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b68e:	9306      	str	r3, [sp, #24]
 800b690:	4690      	mov	r8, r2
 800b692:	f000 fadf 	bl	800bc54 <__localeconv_l>
 800b696:	6803      	ldr	r3, [r0, #0]
 800b698:	9303      	str	r3, [sp, #12]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7f4 fda0 	bl	80001e0 <strlen>
 800b6a0:	9b03      	ldr	r3, [sp, #12]
 800b6a2:	9001      	str	r0, [sp, #4]
 800b6a4:	4403      	add	r3, r0
 800b6a6:	f04f 0b00 	mov.w	fp, #0
 800b6aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b6ae:	9307      	str	r3, [sp, #28]
 800b6b0:	f8da 3000 	ldr.w	r3, [sl]
 800b6b4:	3302      	adds	r3, #2
 800b6b6:	461f      	mov	r7, r3
 800b6b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b6bc:	2830      	cmp	r0, #48	; 0x30
 800b6be:	d06c      	beq.n	800b79a <__gethex+0x118>
 800b6c0:	f7ff ffca 	bl	800b658 <__hexdig_fun>
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d16a      	bne.n	800b7a0 <__gethex+0x11e>
 800b6ca:	9a01      	ldr	r2, [sp, #4]
 800b6cc:	9903      	ldr	r1, [sp, #12]
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	f001 fd4a 	bl	800d168 <strncmp>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d166      	bne.n	800b7a6 <__gethex+0x124>
 800b6d8:	9b01      	ldr	r3, [sp, #4]
 800b6da:	5cf8      	ldrb	r0, [r7, r3]
 800b6dc:	18fe      	adds	r6, r7, r3
 800b6de:	f7ff ffbb 	bl	800b658 <__hexdig_fun>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d062      	beq.n	800b7ac <__gethex+0x12a>
 800b6e6:	4633      	mov	r3, r6
 800b6e8:	7818      	ldrb	r0, [r3, #0]
 800b6ea:	2830      	cmp	r0, #48	; 0x30
 800b6ec:	461f      	mov	r7, r3
 800b6ee:	f103 0301 	add.w	r3, r3, #1
 800b6f2:	d0f9      	beq.n	800b6e8 <__gethex+0x66>
 800b6f4:	f7ff ffb0 	bl	800b658 <__hexdig_fun>
 800b6f8:	fab0 f580 	clz	r5, r0
 800b6fc:	096d      	lsrs	r5, r5, #5
 800b6fe:	4634      	mov	r4, r6
 800b700:	f04f 0b01 	mov.w	fp, #1
 800b704:	463a      	mov	r2, r7
 800b706:	4616      	mov	r6, r2
 800b708:	3201      	adds	r2, #1
 800b70a:	7830      	ldrb	r0, [r6, #0]
 800b70c:	f7ff ffa4 	bl	800b658 <__hexdig_fun>
 800b710:	2800      	cmp	r0, #0
 800b712:	d1f8      	bne.n	800b706 <__gethex+0x84>
 800b714:	9a01      	ldr	r2, [sp, #4]
 800b716:	9903      	ldr	r1, [sp, #12]
 800b718:	4630      	mov	r0, r6
 800b71a:	f001 fd25 	bl	800d168 <strncmp>
 800b71e:	b950      	cbnz	r0, 800b736 <__gethex+0xb4>
 800b720:	b954      	cbnz	r4, 800b738 <__gethex+0xb6>
 800b722:	9b01      	ldr	r3, [sp, #4]
 800b724:	18f4      	adds	r4, r6, r3
 800b726:	4622      	mov	r2, r4
 800b728:	4616      	mov	r6, r2
 800b72a:	3201      	adds	r2, #1
 800b72c:	7830      	ldrb	r0, [r6, #0]
 800b72e:	f7ff ff93 	bl	800b658 <__hexdig_fun>
 800b732:	2800      	cmp	r0, #0
 800b734:	d1f8      	bne.n	800b728 <__gethex+0xa6>
 800b736:	b10c      	cbz	r4, 800b73c <__gethex+0xba>
 800b738:	1ba4      	subs	r4, r4, r6
 800b73a:	00a4      	lsls	r4, r4, #2
 800b73c:	7833      	ldrb	r3, [r6, #0]
 800b73e:	2b50      	cmp	r3, #80	; 0x50
 800b740:	d001      	beq.n	800b746 <__gethex+0xc4>
 800b742:	2b70      	cmp	r3, #112	; 0x70
 800b744:	d140      	bne.n	800b7c8 <__gethex+0x146>
 800b746:	7873      	ldrb	r3, [r6, #1]
 800b748:	2b2b      	cmp	r3, #43	; 0x2b
 800b74a:	d031      	beq.n	800b7b0 <__gethex+0x12e>
 800b74c:	2b2d      	cmp	r3, #45	; 0x2d
 800b74e:	d033      	beq.n	800b7b8 <__gethex+0x136>
 800b750:	1c71      	adds	r1, r6, #1
 800b752:	f04f 0900 	mov.w	r9, #0
 800b756:	7808      	ldrb	r0, [r1, #0]
 800b758:	f7ff ff7e 	bl	800b658 <__hexdig_fun>
 800b75c:	1e43      	subs	r3, r0, #1
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b18      	cmp	r3, #24
 800b762:	d831      	bhi.n	800b7c8 <__gethex+0x146>
 800b764:	f1a0 0210 	sub.w	r2, r0, #16
 800b768:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b76c:	f7ff ff74 	bl	800b658 <__hexdig_fun>
 800b770:	1e43      	subs	r3, r0, #1
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b18      	cmp	r3, #24
 800b776:	d922      	bls.n	800b7be <__gethex+0x13c>
 800b778:	f1b9 0f00 	cmp.w	r9, #0
 800b77c:	d000      	beq.n	800b780 <__gethex+0xfe>
 800b77e:	4252      	negs	r2, r2
 800b780:	4414      	add	r4, r2
 800b782:	f8ca 1000 	str.w	r1, [sl]
 800b786:	b30d      	cbz	r5, 800b7cc <__gethex+0x14a>
 800b788:	f1bb 0f00 	cmp.w	fp, #0
 800b78c:	bf0c      	ite	eq
 800b78e:	2706      	moveq	r7, #6
 800b790:	2700      	movne	r7, #0
 800b792:	4638      	mov	r0, r7
 800b794:	b00b      	add	sp, #44	; 0x2c
 800b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79a:	f10b 0b01 	add.w	fp, fp, #1
 800b79e:	e78a      	b.n	800b6b6 <__gethex+0x34>
 800b7a0:	2500      	movs	r5, #0
 800b7a2:	462c      	mov	r4, r5
 800b7a4:	e7ae      	b.n	800b704 <__gethex+0x82>
 800b7a6:	463e      	mov	r6, r7
 800b7a8:	2501      	movs	r5, #1
 800b7aa:	e7c7      	b.n	800b73c <__gethex+0xba>
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	e7fb      	b.n	800b7a8 <__gethex+0x126>
 800b7b0:	f04f 0900 	mov.w	r9, #0
 800b7b4:	1cb1      	adds	r1, r6, #2
 800b7b6:	e7ce      	b.n	800b756 <__gethex+0xd4>
 800b7b8:	f04f 0901 	mov.w	r9, #1
 800b7bc:	e7fa      	b.n	800b7b4 <__gethex+0x132>
 800b7be:	230a      	movs	r3, #10
 800b7c0:	fb03 0202 	mla	r2, r3, r2, r0
 800b7c4:	3a10      	subs	r2, #16
 800b7c6:	e7cf      	b.n	800b768 <__gethex+0xe6>
 800b7c8:	4631      	mov	r1, r6
 800b7ca:	e7da      	b.n	800b782 <__gethex+0x100>
 800b7cc:	1bf3      	subs	r3, r6, r7
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	2b07      	cmp	r3, #7
 800b7d4:	dc49      	bgt.n	800b86a <__gethex+0x1e8>
 800b7d6:	9802      	ldr	r0, [sp, #8]
 800b7d8:	f000 fae1 	bl	800bd9e <_Balloc>
 800b7dc:	9b01      	ldr	r3, [sp, #4]
 800b7de:	f100 0914 	add.w	r9, r0, #20
 800b7e2:	f04f 0b00 	mov.w	fp, #0
 800b7e6:	f1c3 0301 	rsb	r3, r3, #1
 800b7ea:	4605      	mov	r5, r0
 800b7ec:	f8cd 9010 	str.w	r9, [sp, #16]
 800b7f0:	46da      	mov	sl, fp
 800b7f2:	9308      	str	r3, [sp, #32]
 800b7f4:	42b7      	cmp	r7, r6
 800b7f6:	d33b      	bcc.n	800b870 <__gethex+0x1ee>
 800b7f8:	9804      	ldr	r0, [sp, #16]
 800b7fa:	f840 ab04 	str.w	sl, [r0], #4
 800b7fe:	eba0 0009 	sub.w	r0, r0, r9
 800b802:	1080      	asrs	r0, r0, #2
 800b804:	6128      	str	r0, [r5, #16]
 800b806:	0147      	lsls	r7, r0, #5
 800b808:	4650      	mov	r0, sl
 800b80a:	f000 fb8c 	bl	800bf26 <__hi0bits>
 800b80e:	f8d8 6000 	ldr.w	r6, [r8]
 800b812:	1a3f      	subs	r7, r7, r0
 800b814:	42b7      	cmp	r7, r6
 800b816:	dd64      	ble.n	800b8e2 <__gethex+0x260>
 800b818:	1bbf      	subs	r7, r7, r6
 800b81a:	4639      	mov	r1, r7
 800b81c:	4628      	mov	r0, r5
 800b81e:	f000 fe9b 	bl	800c558 <__any_on>
 800b822:	4682      	mov	sl, r0
 800b824:	b178      	cbz	r0, 800b846 <__gethex+0x1c4>
 800b826:	1e7b      	subs	r3, r7, #1
 800b828:	1159      	asrs	r1, r3, #5
 800b82a:	f003 021f 	and.w	r2, r3, #31
 800b82e:	f04f 0a01 	mov.w	sl, #1
 800b832:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b836:	fa0a f202 	lsl.w	r2, sl, r2
 800b83a:	420a      	tst	r2, r1
 800b83c:	d003      	beq.n	800b846 <__gethex+0x1c4>
 800b83e:	4553      	cmp	r3, sl
 800b840:	dc46      	bgt.n	800b8d0 <__gethex+0x24e>
 800b842:	f04f 0a02 	mov.w	sl, #2
 800b846:	4639      	mov	r1, r7
 800b848:	4628      	mov	r0, r5
 800b84a:	f7ff fecb 	bl	800b5e4 <rshift>
 800b84e:	443c      	add	r4, r7
 800b850:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b854:	42a3      	cmp	r3, r4
 800b856:	da52      	bge.n	800b8fe <__gethex+0x27c>
 800b858:	4629      	mov	r1, r5
 800b85a:	9802      	ldr	r0, [sp, #8]
 800b85c:	f000 fad3 	bl	800be06 <_Bfree>
 800b860:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b862:	2300      	movs	r3, #0
 800b864:	6013      	str	r3, [r2, #0]
 800b866:	27a3      	movs	r7, #163	; 0xa3
 800b868:	e793      	b.n	800b792 <__gethex+0x110>
 800b86a:	3101      	adds	r1, #1
 800b86c:	105b      	asrs	r3, r3, #1
 800b86e:	e7b0      	b.n	800b7d2 <__gethex+0x150>
 800b870:	1e73      	subs	r3, r6, #1
 800b872:	9305      	str	r3, [sp, #20]
 800b874:	9a07      	ldr	r2, [sp, #28]
 800b876:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d018      	beq.n	800b8b0 <__gethex+0x22e>
 800b87e:	f1bb 0f20 	cmp.w	fp, #32
 800b882:	d107      	bne.n	800b894 <__gethex+0x212>
 800b884:	9b04      	ldr	r3, [sp, #16]
 800b886:	f8c3 a000 	str.w	sl, [r3]
 800b88a:	3304      	adds	r3, #4
 800b88c:	f04f 0a00 	mov.w	sl, #0
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	46d3      	mov	fp, sl
 800b894:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b898:	f7ff fede 	bl	800b658 <__hexdig_fun>
 800b89c:	f000 000f 	and.w	r0, r0, #15
 800b8a0:	fa00 f00b 	lsl.w	r0, r0, fp
 800b8a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800b8a8:	f10b 0b04 	add.w	fp, fp, #4
 800b8ac:	9b05      	ldr	r3, [sp, #20]
 800b8ae:	e00d      	b.n	800b8cc <__gethex+0x24a>
 800b8b0:	9b05      	ldr	r3, [sp, #20]
 800b8b2:	9a08      	ldr	r2, [sp, #32]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	42bb      	cmp	r3, r7
 800b8b8:	d3e1      	bcc.n	800b87e <__gethex+0x1fc>
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	9a01      	ldr	r2, [sp, #4]
 800b8be:	9903      	ldr	r1, [sp, #12]
 800b8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c2:	f001 fc51 	bl	800d168 <strncmp>
 800b8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d1d8      	bne.n	800b87e <__gethex+0x1fc>
 800b8cc:	461e      	mov	r6, r3
 800b8ce:	e791      	b.n	800b7f4 <__gethex+0x172>
 800b8d0:	1eb9      	subs	r1, r7, #2
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f000 fe40 	bl	800c558 <__any_on>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d0b2      	beq.n	800b842 <__gethex+0x1c0>
 800b8dc:	f04f 0a03 	mov.w	sl, #3
 800b8e0:	e7b1      	b.n	800b846 <__gethex+0x1c4>
 800b8e2:	da09      	bge.n	800b8f8 <__gethex+0x276>
 800b8e4:	1bf7      	subs	r7, r6, r7
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	463a      	mov	r2, r7
 800b8ea:	9802      	ldr	r0, [sp, #8]
 800b8ec:	f000 fc56 	bl	800c19c <__lshift>
 800b8f0:	1be4      	subs	r4, r4, r7
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	f100 0914 	add.w	r9, r0, #20
 800b8f8:	f04f 0a00 	mov.w	sl, #0
 800b8fc:	e7a8      	b.n	800b850 <__gethex+0x1ce>
 800b8fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b902:	42a0      	cmp	r0, r4
 800b904:	dd6a      	ble.n	800b9dc <__gethex+0x35a>
 800b906:	1b04      	subs	r4, r0, r4
 800b908:	42a6      	cmp	r6, r4
 800b90a:	dc2e      	bgt.n	800b96a <__gethex+0x2e8>
 800b90c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b910:	2b02      	cmp	r3, #2
 800b912:	d022      	beq.n	800b95a <__gethex+0x2d8>
 800b914:	2b03      	cmp	r3, #3
 800b916:	d024      	beq.n	800b962 <__gethex+0x2e0>
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d115      	bne.n	800b948 <__gethex+0x2c6>
 800b91c:	42a6      	cmp	r6, r4
 800b91e:	d113      	bne.n	800b948 <__gethex+0x2c6>
 800b920:	2e01      	cmp	r6, #1
 800b922:	dc0b      	bgt.n	800b93c <__gethex+0x2ba>
 800b924:	9a06      	ldr	r2, [sp, #24]
 800b926:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b92a:	6013      	str	r3, [r2, #0]
 800b92c:	2301      	movs	r3, #1
 800b92e:	612b      	str	r3, [r5, #16]
 800b930:	f8c9 3000 	str.w	r3, [r9]
 800b934:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b936:	2762      	movs	r7, #98	; 0x62
 800b938:	601d      	str	r5, [r3, #0]
 800b93a:	e72a      	b.n	800b792 <__gethex+0x110>
 800b93c:	1e71      	subs	r1, r6, #1
 800b93e:	4628      	mov	r0, r5
 800b940:	f000 fe0a 	bl	800c558 <__any_on>
 800b944:	2800      	cmp	r0, #0
 800b946:	d1ed      	bne.n	800b924 <__gethex+0x2a2>
 800b948:	4629      	mov	r1, r5
 800b94a:	9802      	ldr	r0, [sp, #8]
 800b94c:	f000 fa5b 	bl	800be06 <_Bfree>
 800b950:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b952:	2300      	movs	r3, #0
 800b954:	6013      	str	r3, [r2, #0]
 800b956:	2750      	movs	r7, #80	; 0x50
 800b958:	e71b      	b.n	800b792 <__gethex+0x110>
 800b95a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d0e1      	beq.n	800b924 <__gethex+0x2a2>
 800b960:	e7f2      	b.n	800b948 <__gethex+0x2c6>
 800b962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1dd      	bne.n	800b924 <__gethex+0x2a2>
 800b968:	e7ee      	b.n	800b948 <__gethex+0x2c6>
 800b96a:	1e67      	subs	r7, r4, #1
 800b96c:	f1ba 0f00 	cmp.w	sl, #0
 800b970:	d131      	bne.n	800b9d6 <__gethex+0x354>
 800b972:	b127      	cbz	r7, 800b97e <__gethex+0x2fc>
 800b974:	4639      	mov	r1, r7
 800b976:	4628      	mov	r0, r5
 800b978:	f000 fdee 	bl	800c558 <__any_on>
 800b97c:	4682      	mov	sl, r0
 800b97e:	117a      	asrs	r2, r7, #5
 800b980:	2301      	movs	r3, #1
 800b982:	f007 071f 	and.w	r7, r7, #31
 800b986:	fa03 f707 	lsl.w	r7, r3, r7
 800b98a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b98e:	4621      	mov	r1, r4
 800b990:	421f      	tst	r7, r3
 800b992:	4628      	mov	r0, r5
 800b994:	bf18      	it	ne
 800b996:	f04a 0a02 	orrne.w	sl, sl, #2
 800b99a:	1b36      	subs	r6, r6, r4
 800b99c:	f7ff fe22 	bl	800b5e4 <rshift>
 800b9a0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b9a4:	2702      	movs	r7, #2
 800b9a6:	f1ba 0f00 	cmp.w	sl, #0
 800b9aa:	d048      	beq.n	800ba3e <__gethex+0x3bc>
 800b9ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d015      	beq.n	800b9e0 <__gethex+0x35e>
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d017      	beq.n	800b9e8 <__gethex+0x366>
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d109      	bne.n	800b9d0 <__gethex+0x34e>
 800b9bc:	f01a 0f02 	tst.w	sl, #2
 800b9c0:	d006      	beq.n	800b9d0 <__gethex+0x34e>
 800b9c2:	f8d9 3000 	ldr.w	r3, [r9]
 800b9c6:	ea4a 0a03 	orr.w	sl, sl, r3
 800b9ca:	f01a 0f01 	tst.w	sl, #1
 800b9ce:	d10e      	bne.n	800b9ee <__gethex+0x36c>
 800b9d0:	f047 0710 	orr.w	r7, r7, #16
 800b9d4:	e033      	b.n	800ba3e <__gethex+0x3bc>
 800b9d6:	f04f 0a01 	mov.w	sl, #1
 800b9da:	e7d0      	b.n	800b97e <__gethex+0x2fc>
 800b9dc:	2701      	movs	r7, #1
 800b9de:	e7e2      	b.n	800b9a6 <__gethex+0x324>
 800b9e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9e2:	f1c3 0301 	rsb	r3, r3, #1
 800b9e6:	9315      	str	r3, [sp, #84]	; 0x54
 800b9e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d0f0      	beq.n	800b9d0 <__gethex+0x34e>
 800b9ee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b9f2:	f105 0314 	add.w	r3, r5, #20
 800b9f6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b9fa:	eb03 010a 	add.w	r1, r3, sl
 800b9fe:	f04f 0c00 	mov.w	ip, #0
 800ba02:	4618      	mov	r0, r3
 800ba04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba08:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba0c:	d01c      	beq.n	800ba48 <__gethex+0x3c6>
 800ba0e:	3201      	adds	r2, #1
 800ba10:	6002      	str	r2, [r0, #0]
 800ba12:	2f02      	cmp	r7, #2
 800ba14:	f105 0314 	add.w	r3, r5, #20
 800ba18:	d138      	bne.n	800ba8c <__gethex+0x40a>
 800ba1a:	f8d8 2000 	ldr.w	r2, [r8]
 800ba1e:	3a01      	subs	r2, #1
 800ba20:	42b2      	cmp	r2, r6
 800ba22:	d10a      	bne.n	800ba3a <__gethex+0x3b8>
 800ba24:	1171      	asrs	r1, r6, #5
 800ba26:	2201      	movs	r2, #1
 800ba28:	f006 061f 	and.w	r6, r6, #31
 800ba2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba30:	fa02 f606 	lsl.w	r6, r2, r6
 800ba34:	421e      	tst	r6, r3
 800ba36:	bf18      	it	ne
 800ba38:	4617      	movne	r7, r2
 800ba3a:	f047 0720 	orr.w	r7, r7, #32
 800ba3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba40:	601d      	str	r5, [r3, #0]
 800ba42:	9b06      	ldr	r3, [sp, #24]
 800ba44:	601c      	str	r4, [r3, #0]
 800ba46:	e6a4      	b.n	800b792 <__gethex+0x110>
 800ba48:	4299      	cmp	r1, r3
 800ba4a:	f843 cc04 	str.w	ip, [r3, #-4]
 800ba4e:	d8d8      	bhi.n	800ba02 <__gethex+0x380>
 800ba50:	68ab      	ldr	r3, [r5, #8]
 800ba52:	4599      	cmp	r9, r3
 800ba54:	db12      	blt.n	800ba7c <__gethex+0x3fa>
 800ba56:	6869      	ldr	r1, [r5, #4]
 800ba58:	9802      	ldr	r0, [sp, #8]
 800ba5a:	3101      	adds	r1, #1
 800ba5c:	f000 f99f 	bl	800bd9e <_Balloc>
 800ba60:	692a      	ldr	r2, [r5, #16]
 800ba62:	3202      	adds	r2, #2
 800ba64:	f105 010c 	add.w	r1, r5, #12
 800ba68:	4683      	mov	fp, r0
 800ba6a:	0092      	lsls	r2, r2, #2
 800ba6c:	300c      	adds	r0, #12
 800ba6e:	f000 f989 	bl	800bd84 <memcpy>
 800ba72:	4629      	mov	r1, r5
 800ba74:	9802      	ldr	r0, [sp, #8]
 800ba76:	f000 f9c6 	bl	800be06 <_Bfree>
 800ba7a:	465d      	mov	r5, fp
 800ba7c:	692b      	ldr	r3, [r5, #16]
 800ba7e:	1c5a      	adds	r2, r3, #1
 800ba80:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ba84:	612a      	str	r2, [r5, #16]
 800ba86:	2201      	movs	r2, #1
 800ba88:	615a      	str	r2, [r3, #20]
 800ba8a:	e7c2      	b.n	800ba12 <__gethex+0x390>
 800ba8c:	692a      	ldr	r2, [r5, #16]
 800ba8e:	454a      	cmp	r2, r9
 800ba90:	dd0b      	ble.n	800baaa <__gethex+0x428>
 800ba92:	2101      	movs	r1, #1
 800ba94:	4628      	mov	r0, r5
 800ba96:	f7ff fda5 	bl	800b5e4 <rshift>
 800ba9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba9e:	3401      	adds	r4, #1
 800baa0:	42a3      	cmp	r3, r4
 800baa2:	f6ff aed9 	blt.w	800b858 <__gethex+0x1d6>
 800baa6:	2701      	movs	r7, #1
 800baa8:	e7c7      	b.n	800ba3a <__gethex+0x3b8>
 800baaa:	f016 061f 	ands.w	r6, r6, #31
 800baae:	d0fa      	beq.n	800baa6 <__gethex+0x424>
 800bab0:	449a      	add	sl, r3
 800bab2:	f1c6 0620 	rsb	r6, r6, #32
 800bab6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800baba:	f000 fa34 	bl	800bf26 <__hi0bits>
 800babe:	42b0      	cmp	r0, r6
 800bac0:	dbe7      	blt.n	800ba92 <__gethex+0x410>
 800bac2:	e7f0      	b.n	800baa6 <__gethex+0x424>

0800bac4 <L_shift>:
 800bac4:	f1c2 0208 	rsb	r2, r2, #8
 800bac8:	0092      	lsls	r2, r2, #2
 800baca:	b570      	push	{r4, r5, r6, lr}
 800bacc:	f1c2 0620 	rsb	r6, r2, #32
 800bad0:	6843      	ldr	r3, [r0, #4]
 800bad2:	6804      	ldr	r4, [r0, #0]
 800bad4:	fa03 f506 	lsl.w	r5, r3, r6
 800bad8:	432c      	orrs	r4, r5
 800bada:	40d3      	lsrs	r3, r2
 800badc:	6004      	str	r4, [r0, #0]
 800bade:	f840 3f04 	str.w	r3, [r0, #4]!
 800bae2:	4288      	cmp	r0, r1
 800bae4:	d3f4      	bcc.n	800bad0 <L_shift+0xc>
 800bae6:	bd70      	pop	{r4, r5, r6, pc}

0800bae8 <__match>:
 800bae8:	b530      	push	{r4, r5, lr}
 800baea:	6803      	ldr	r3, [r0, #0]
 800baec:	3301      	adds	r3, #1
 800baee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf2:	b914      	cbnz	r4, 800bafa <__match+0x12>
 800baf4:	6003      	str	r3, [r0, #0]
 800baf6:	2001      	movs	r0, #1
 800baf8:	bd30      	pop	{r4, r5, pc}
 800bafa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bafe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb02:	2d19      	cmp	r5, #25
 800bb04:	bf98      	it	ls
 800bb06:	3220      	addls	r2, #32
 800bb08:	42a2      	cmp	r2, r4
 800bb0a:	d0f0      	beq.n	800baee <__match+0x6>
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	e7f3      	b.n	800baf8 <__match+0x10>

0800bb10 <__hexnan>:
 800bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb14:	680b      	ldr	r3, [r1, #0]
 800bb16:	6801      	ldr	r1, [r0, #0]
 800bb18:	115f      	asrs	r7, r3, #5
 800bb1a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800bb1e:	f013 031f 	ands.w	r3, r3, #31
 800bb22:	b087      	sub	sp, #28
 800bb24:	bf18      	it	ne
 800bb26:	3704      	addne	r7, #4
 800bb28:	2500      	movs	r5, #0
 800bb2a:	1f3e      	subs	r6, r7, #4
 800bb2c:	4682      	mov	sl, r0
 800bb2e:	4690      	mov	r8, r2
 800bb30:	9301      	str	r3, [sp, #4]
 800bb32:	f847 5c04 	str.w	r5, [r7, #-4]
 800bb36:	46b1      	mov	r9, r6
 800bb38:	4634      	mov	r4, r6
 800bb3a:	9502      	str	r5, [sp, #8]
 800bb3c:	46ab      	mov	fp, r5
 800bb3e:	784a      	ldrb	r2, [r1, #1]
 800bb40:	1c4b      	adds	r3, r1, #1
 800bb42:	9303      	str	r3, [sp, #12]
 800bb44:	b342      	cbz	r2, 800bb98 <__hexnan+0x88>
 800bb46:	4610      	mov	r0, r2
 800bb48:	9105      	str	r1, [sp, #20]
 800bb4a:	9204      	str	r2, [sp, #16]
 800bb4c:	f7ff fd84 	bl	800b658 <__hexdig_fun>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d143      	bne.n	800bbdc <__hexnan+0xcc>
 800bb54:	9a04      	ldr	r2, [sp, #16]
 800bb56:	9905      	ldr	r1, [sp, #20]
 800bb58:	2a20      	cmp	r2, #32
 800bb5a:	d818      	bhi.n	800bb8e <__hexnan+0x7e>
 800bb5c:	9b02      	ldr	r3, [sp, #8]
 800bb5e:	459b      	cmp	fp, r3
 800bb60:	dd13      	ble.n	800bb8a <__hexnan+0x7a>
 800bb62:	454c      	cmp	r4, r9
 800bb64:	d206      	bcs.n	800bb74 <__hexnan+0x64>
 800bb66:	2d07      	cmp	r5, #7
 800bb68:	dc04      	bgt.n	800bb74 <__hexnan+0x64>
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f7ff ffa8 	bl	800bac4 <L_shift>
 800bb74:	4544      	cmp	r4, r8
 800bb76:	d944      	bls.n	800bc02 <__hexnan+0xf2>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f1a4 0904 	sub.w	r9, r4, #4
 800bb7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb82:	f8cd b008 	str.w	fp, [sp, #8]
 800bb86:	464c      	mov	r4, r9
 800bb88:	461d      	mov	r5, r3
 800bb8a:	9903      	ldr	r1, [sp, #12]
 800bb8c:	e7d7      	b.n	800bb3e <__hexnan+0x2e>
 800bb8e:	2a29      	cmp	r2, #41	; 0x29
 800bb90:	d14a      	bne.n	800bc28 <__hexnan+0x118>
 800bb92:	3102      	adds	r1, #2
 800bb94:	f8ca 1000 	str.w	r1, [sl]
 800bb98:	f1bb 0f00 	cmp.w	fp, #0
 800bb9c:	d044      	beq.n	800bc28 <__hexnan+0x118>
 800bb9e:	454c      	cmp	r4, r9
 800bba0:	d206      	bcs.n	800bbb0 <__hexnan+0xa0>
 800bba2:	2d07      	cmp	r5, #7
 800bba4:	dc04      	bgt.n	800bbb0 <__hexnan+0xa0>
 800bba6:	462a      	mov	r2, r5
 800bba8:	4649      	mov	r1, r9
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f7ff ff8a 	bl	800bac4 <L_shift>
 800bbb0:	4544      	cmp	r4, r8
 800bbb2:	d928      	bls.n	800bc06 <__hexnan+0xf6>
 800bbb4:	4643      	mov	r3, r8
 800bbb6:	f854 2b04 	ldr.w	r2, [r4], #4
 800bbba:	f843 2b04 	str.w	r2, [r3], #4
 800bbbe:	42a6      	cmp	r6, r4
 800bbc0:	d2f9      	bcs.n	800bbb6 <__hexnan+0xa6>
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f843 2b04 	str.w	r2, [r3], #4
 800bbc8:	429e      	cmp	r6, r3
 800bbca:	d2fb      	bcs.n	800bbc4 <__hexnan+0xb4>
 800bbcc:	6833      	ldr	r3, [r6, #0]
 800bbce:	b91b      	cbnz	r3, 800bbd8 <__hexnan+0xc8>
 800bbd0:	4546      	cmp	r6, r8
 800bbd2:	d127      	bne.n	800bc24 <__hexnan+0x114>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	6033      	str	r3, [r6, #0]
 800bbd8:	2005      	movs	r0, #5
 800bbda:	e026      	b.n	800bc2a <__hexnan+0x11a>
 800bbdc:	3501      	adds	r5, #1
 800bbde:	2d08      	cmp	r5, #8
 800bbe0:	f10b 0b01 	add.w	fp, fp, #1
 800bbe4:	dd06      	ble.n	800bbf4 <__hexnan+0xe4>
 800bbe6:	4544      	cmp	r4, r8
 800bbe8:	d9cf      	bls.n	800bb8a <__hexnan+0x7a>
 800bbea:	2300      	movs	r3, #0
 800bbec:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbf0:	2501      	movs	r5, #1
 800bbf2:	3c04      	subs	r4, #4
 800bbf4:	6822      	ldr	r2, [r4, #0]
 800bbf6:	f000 000f 	and.w	r0, r0, #15
 800bbfa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bbfe:	6020      	str	r0, [r4, #0]
 800bc00:	e7c3      	b.n	800bb8a <__hexnan+0x7a>
 800bc02:	2508      	movs	r5, #8
 800bc04:	e7c1      	b.n	800bb8a <__hexnan+0x7a>
 800bc06:	9b01      	ldr	r3, [sp, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d0df      	beq.n	800bbcc <__hexnan+0xbc>
 800bc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc10:	f1c3 0320 	rsb	r3, r3, #32
 800bc14:	fa22 f303 	lsr.w	r3, r2, r3
 800bc18:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800bc1c:	401a      	ands	r2, r3
 800bc1e:	f847 2c04 	str.w	r2, [r7, #-4]
 800bc22:	e7d3      	b.n	800bbcc <__hexnan+0xbc>
 800bc24:	3e04      	subs	r6, #4
 800bc26:	e7d1      	b.n	800bbcc <__hexnan+0xbc>
 800bc28:	2004      	movs	r0, #4
 800bc2a:	b007      	add	sp, #28
 800bc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc30 <__locale_ctype_ptr_l>:
 800bc30:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800bc34:	4770      	bx	lr
	...

0800bc38 <__locale_ctype_ptr>:
 800bc38:	4b04      	ldr	r3, [pc, #16]	; (800bc4c <__locale_ctype_ptr+0x14>)
 800bc3a:	4a05      	ldr	r2, [pc, #20]	; (800bc50 <__locale_ctype_ptr+0x18>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6a1b      	ldr	r3, [r3, #32]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	bf08      	it	eq
 800bc44:	4613      	moveq	r3, r2
 800bc46:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800bc4a:	4770      	bx	lr
 800bc4c:	20000180 	.word	0x20000180
 800bc50:	200001e4 	.word	0x200001e4

0800bc54 <__localeconv_l>:
 800bc54:	30f0      	adds	r0, #240	; 0xf0
 800bc56:	4770      	bx	lr

0800bc58 <_localeconv_r>:
 800bc58:	4b04      	ldr	r3, [pc, #16]	; (800bc6c <_localeconv_r+0x14>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	6a18      	ldr	r0, [r3, #32]
 800bc5e:	4b04      	ldr	r3, [pc, #16]	; (800bc70 <_localeconv_r+0x18>)
 800bc60:	2800      	cmp	r0, #0
 800bc62:	bf08      	it	eq
 800bc64:	4618      	moveq	r0, r3
 800bc66:	30f0      	adds	r0, #240	; 0xf0
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	20000180 	.word	0x20000180
 800bc70:	200001e4 	.word	0x200001e4

0800bc74 <_lseek_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	4c07      	ldr	r4, [pc, #28]	; (800bc94 <_lseek_r+0x20>)
 800bc78:	4605      	mov	r5, r0
 800bc7a:	4608      	mov	r0, r1
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	2200      	movs	r2, #0
 800bc80:	6022      	str	r2, [r4, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	f7f5 fecc 	bl	8001a20 <_lseek>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_lseek_r+0x1e>
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_lseek_r+0x1e>
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	20000f6c 	.word	0x20000f6c

0800bc98 <__swhatbuf_r>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	460e      	mov	r6, r1
 800bc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca0:	2900      	cmp	r1, #0
 800bca2:	b096      	sub	sp, #88	; 0x58
 800bca4:	4614      	mov	r4, r2
 800bca6:	461d      	mov	r5, r3
 800bca8:	da07      	bge.n	800bcba <__swhatbuf_r+0x22>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	602b      	str	r3, [r5, #0]
 800bcae:	89b3      	ldrh	r3, [r6, #12]
 800bcb0:	061a      	lsls	r2, r3, #24
 800bcb2:	d410      	bmi.n	800bcd6 <__swhatbuf_r+0x3e>
 800bcb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcb8:	e00e      	b.n	800bcd8 <__swhatbuf_r+0x40>
 800bcba:	466a      	mov	r2, sp
 800bcbc:	f001 fb3a 	bl	800d334 <_fstat_r>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	dbf2      	blt.n	800bcaa <__swhatbuf_r+0x12>
 800bcc4:	9a01      	ldr	r2, [sp, #4]
 800bcc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bcca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bcce:	425a      	negs	r2, r3
 800bcd0:	415a      	adcs	r2, r3
 800bcd2:	602a      	str	r2, [r5, #0]
 800bcd4:	e7ee      	b.n	800bcb4 <__swhatbuf_r+0x1c>
 800bcd6:	2340      	movs	r3, #64	; 0x40
 800bcd8:	2000      	movs	r0, #0
 800bcda:	6023      	str	r3, [r4, #0]
 800bcdc:	b016      	add	sp, #88	; 0x58
 800bcde:	bd70      	pop	{r4, r5, r6, pc}

0800bce0 <__smakebuf_r>:
 800bce0:	898b      	ldrh	r3, [r1, #12]
 800bce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bce4:	079d      	lsls	r5, r3, #30
 800bce6:	4606      	mov	r6, r0
 800bce8:	460c      	mov	r4, r1
 800bcea:	d507      	bpl.n	800bcfc <__smakebuf_r+0x1c>
 800bcec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	6123      	str	r3, [r4, #16]
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	6163      	str	r3, [r4, #20]
 800bcf8:	b002      	add	sp, #8
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	ab01      	add	r3, sp, #4
 800bcfe:	466a      	mov	r2, sp
 800bd00:	f7ff ffca 	bl	800bc98 <__swhatbuf_r>
 800bd04:	9900      	ldr	r1, [sp, #0]
 800bd06:	4605      	mov	r5, r0
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7fc fd4d 	bl	80087a8 <_malloc_r>
 800bd0e:	b948      	cbnz	r0, 800bd24 <__smakebuf_r+0x44>
 800bd10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd14:	059a      	lsls	r2, r3, #22
 800bd16:	d4ef      	bmi.n	800bcf8 <__smakebuf_r+0x18>
 800bd18:	f023 0303 	bic.w	r3, r3, #3
 800bd1c:	f043 0302 	orr.w	r3, r3, #2
 800bd20:	81a3      	strh	r3, [r4, #12]
 800bd22:	e7e3      	b.n	800bcec <__smakebuf_r+0xc>
 800bd24:	4b0d      	ldr	r3, [pc, #52]	; (800bd5c <__smakebuf_r+0x7c>)
 800bd26:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	6020      	str	r0, [r4, #0]
 800bd2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd30:	81a3      	strh	r3, [r4, #12]
 800bd32:	9b00      	ldr	r3, [sp, #0]
 800bd34:	6163      	str	r3, [r4, #20]
 800bd36:	9b01      	ldr	r3, [sp, #4]
 800bd38:	6120      	str	r0, [r4, #16]
 800bd3a:	b15b      	cbz	r3, 800bd54 <__smakebuf_r+0x74>
 800bd3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd40:	4630      	mov	r0, r6
 800bd42:	f001 fb09 	bl	800d358 <_isatty_r>
 800bd46:	b128      	cbz	r0, 800bd54 <__smakebuf_r+0x74>
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	f023 0303 	bic.w	r3, r3, #3
 800bd4e:	f043 0301 	orr.w	r3, r3, #1
 800bd52:	81a3      	strh	r3, [r4, #12]
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	431d      	orrs	r5, r3
 800bd58:	81a5      	strh	r5, [r4, #12]
 800bd5a:	e7cd      	b.n	800bcf8 <__smakebuf_r+0x18>
 800bd5c:	0800b499 	.word	0x0800b499

0800bd60 <__ascii_mbtowc>:
 800bd60:	b082      	sub	sp, #8
 800bd62:	b901      	cbnz	r1, 800bd66 <__ascii_mbtowc+0x6>
 800bd64:	a901      	add	r1, sp, #4
 800bd66:	b142      	cbz	r2, 800bd7a <__ascii_mbtowc+0x1a>
 800bd68:	b14b      	cbz	r3, 800bd7e <__ascii_mbtowc+0x1e>
 800bd6a:	7813      	ldrb	r3, [r2, #0]
 800bd6c:	600b      	str	r3, [r1, #0]
 800bd6e:	7812      	ldrb	r2, [r2, #0]
 800bd70:	1c10      	adds	r0, r2, #0
 800bd72:	bf18      	it	ne
 800bd74:	2001      	movne	r0, #1
 800bd76:	b002      	add	sp, #8
 800bd78:	4770      	bx	lr
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	e7fb      	b.n	800bd76 <__ascii_mbtowc+0x16>
 800bd7e:	f06f 0001 	mvn.w	r0, #1
 800bd82:	e7f8      	b.n	800bd76 <__ascii_mbtowc+0x16>

0800bd84 <memcpy>:
 800bd84:	b510      	push	{r4, lr}
 800bd86:	1e43      	subs	r3, r0, #1
 800bd88:	440a      	add	r2, r1
 800bd8a:	4291      	cmp	r1, r2
 800bd8c:	d100      	bne.n	800bd90 <memcpy+0xc>
 800bd8e:	bd10      	pop	{r4, pc}
 800bd90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd98:	e7f7      	b.n	800bd8a <memcpy+0x6>

0800bd9a <__malloc_lock>:
 800bd9a:	4770      	bx	lr

0800bd9c <__malloc_unlock>:
 800bd9c:	4770      	bx	lr

0800bd9e <_Balloc>:
 800bd9e:	b570      	push	{r4, r5, r6, lr}
 800bda0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bda2:	4604      	mov	r4, r0
 800bda4:	460e      	mov	r6, r1
 800bda6:	b93d      	cbnz	r5, 800bdb8 <_Balloc+0x1a>
 800bda8:	2010      	movs	r0, #16
 800bdaa:	f7fc fc97 	bl	80086dc <malloc>
 800bdae:	6260      	str	r0, [r4, #36]	; 0x24
 800bdb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bdb4:	6005      	str	r5, [r0, #0]
 800bdb6:	60c5      	str	r5, [r0, #12]
 800bdb8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bdba:	68eb      	ldr	r3, [r5, #12]
 800bdbc:	b183      	cbz	r3, 800bde0 <_Balloc+0x42>
 800bdbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bdc6:	b9b8      	cbnz	r0, 800bdf8 <_Balloc+0x5a>
 800bdc8:	2101      	movs	r1, #1
 800bdca:	fa01 f506 	lsl.w	r5, r1, r6
 800bdce:	1d6a      	adds	r2, r5, #5
 800bdd0:	0092      	lsls	r2, r2, #2
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f000 fbe1 	bl	800c59a <_calloc_r>
 800bdd8:	b160      	cbz	r0, 800bdf4 <_Balloc+0x56>
 800bdda:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bdde:	e00e      	b.n	800bdfe <_Balloc+0x60>
 800bde0:	2221      	movs	r2, #33	; 0x21
 800bde2:	2104      	movs	r1, #4
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 fbd8 	bl	800c59a <_calloc_r>
 800bdea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdec:	60e8      	str	r0, [r5, #12]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1e4      	bne.n	800bdbe <_Balloc+0x20>
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	6802      	ldr	r2, [r0, #0]
 800bdfa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bdfe:	2300      	movs	r3, #0
 800be00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be04:	e7f7      	b.n	800bdf6 <_Balloc+0x58>

0800be06 <_Bfree>:
 800be06:	b570      	push	{r4, r5, r6, lr}
 800be08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800be0a:	4606      	mov	r6, r0
 800be0c:	460d      	mov	r5, r1
 800be0e:	b93c      	cbnz	r4, 800be20 <_Bfree+0x1a>
 800be10:	2010      	movs	r0, #16
 800be12:	f7fc fc63 	bl	80086dc <malloc>
 800be16:	6270      	str	r0, [r6, #36]	; 0x24
 800be18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be1c:	6004      	str	r4, [r0, #0]
 800be1e:	60c4      	str	r4, [r0, #12]
 800be20:	b13d      	cbz	r5, 800be32 <_Bfree+0x2c>
 800be22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800be24:	686a      	ldr	r2, [r5, #4]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be2c:	6029      	str	r1, [r5, #0]
 800be2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800be32:	bd70      	pop	{r4, r5, r6, pc}

0800be34 <__multadd>:
 800be34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be38:	690d      	ldr	r5, [r1, #16]
 800be3a:	461f      	mov	r7, r3
 800be3c:	4606      	mov	r6, r0
 800be3e:	460c      	mov	r4, r1
 800be40:	f101 0c14 	add.w	ip, r1, #20
 800be44:	2300      	movs	r3, #0
 800be46:	f8dc 0000 	ldr.w	r0, [ip]
 800be4a:	b281      	uxth	r1, r0
 800be4c:	fb02 7101 	mla	r1, r2, r1, r7
 800be50:	0c0f      	lsrs	r7, r1, #16
 800be52:	0c00      	lsrs	r0, r0, #16
 800be54:	fb02 7000 	mla	r0, r2, r0, r7
 800be58:	b289      	uxth	r1, r1
 800be5a:	3301      	adds	r3, #1
 800be5c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800be60:	429d      	cmp	r5, r3
 800be62:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800be66:	f84c 1b04 	str.w	r1, [ip], #4
 800be6a:	dcec      	bgt.n	800be46 <__multadd+0x12>
 800be6c:	b1d7      	cbz	r7, 800bea4 <__multadd+0x70>
 800be6e:	68a3      	ldr	r3, [r4, #8]
 800be70:	42ab      	cmp	r3, r5
 800be72:	dc12      	bgt.n	800be9a <__multadd+0x66>
 800be74:	6861      	ldr	r1, [r4, #4]
 800be76:	4630      	mov	r0, r6
 800be78:	3101      	adds	r1, #1
 800be7a:	f7ff ff90 	bl	800bd9e <_Balloc>
 800be7e:	6922      	ldr	r2, [r4, #16]
 800be80:	3202      	adds	r2, #2
 800be82:	f104 010c 	add.w	r1, r4, #12
 800be86:	4680      	mov	r8, r0
 800be88:	0092      	lsls	r2, r2, #2
 800be8a:	300c      	adds	r0, #12
 800be8c:	f7ff ff7a 	bl	800bd84 <memcpy>
 800be90:	4621      	mov	r1, r4
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff ffb7 	bl	800be06 <_Bfree>
 800be98:	4644      	mov	r4, r8
 800be9a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be9e:	3501      	adds	r5, #1
 800bea0:	615f      	str	r7, [r3, #20]
 800bea2:	6125      	str	r5, [r4, #16]
 800bea4:	4620      	mov	r0, r4
 800bea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800beaa <__s2b>:
 800beaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beae:	460c      	mov	r4, r1
 800beb0:	4615      	mov	r5, r2
 800beb2:	461f      	mov	r7, r3
 800beb4:	2209      	movs	r2, #9
 800beb6:	3308      	adds	r3, #8
 800beb8:	4606      	mov	r6, r0
 800beba:	fb93 f3f2 	sdiv	r3, r3, r2
 800bebe:	2100      	movs	r1, #0
 800bec0:	2201      	movs	r2, #1
 800bec2:	429a      	cmp	r2, r3
 800bec4:	db20      	blt.n	800bf08 <__s2b+0x5e>
 800bec6:	4630      	mov	r0, r6
 800bec8:	f7ff ff69 	bl	800bd9e <_Balloc>
 800becc:	9b08      	ldr	r3, [sp, #32]
 800bece:	6143      	str	r3, [r0, #20]
 800bed0:	2d09      	cmp	r5, #9
 800bed2:	f04f 0301 	mov.w	r3, #1
 800bed6:	6103      	str	r3, [r0, #16]
 800bed8:	dd19      	ble.n	800bf0e <__s2b+0x64>
 800beda:	f104 0809 	add.w	r8, r4, #9
 800bede:	46c1      	mov	r9, r8
 800bee0:	442c      	add	r4, r5
 800bee2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800bee6:	4601      	mov	r1, r0
 800bee8:	3b30      	subs	r3, #48	; 0x30
 800beea:	220a      	movs	r2, #10
 800beec:	4630      	mov	r0, r6
 800beee:	f7ff ffa1 	bl	800be34 <__multadd>
 800bef2:	45a1      	cmp	r9, r4
 800bef4:	d1f5      	bne.n	800bee2 <__s2b+0x38>
 800bef6:	eb08 0405 	add.w	r4, r8, r5
 800befa:	3c08      	subs	r4, #8
 800befc:	1b2d      	subs	r5, r5, r4
 800befe:	1963      	adds	r3, r4, r5
 800bf00:	42bb      	cmp	r3, r7
 800bf02:	db07      	blt.n	800bf14 <__s2b+0x6a>
 800bf04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf08:	0052      	lsls	r2, r2, #1
 800bf0a:	3101      	adds	r1, #1
 800bf0c:	e7d9      	b.n	800bec2 <__s2b+0x18>
 800bf0e:	340a      	adds	r4, #10
 800bf10:	2509      	movs	r5, #9
 800bf12:	e7f3      	b.n	800befc <__s2b+0x52>
 800bf14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf18:	4601      	mov	r1, r0
 800bf1a:	3b30      	subs	r3, #48	; 0x30
 800bf1c:	220a      	movs	r2, #10
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7ff ff88 	bl	800be34 <__multadd>
 800bf24:	e7eb      	b.n	800befe <__s2b+0x54>

0800bf26 <__hi0bits>:
 800bf26:	0c02      	lsrs	r2, r0, #16
 800bf28:	0412      	lsls	r2, r2, #16
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	b9b2      	cbnz	r2, 800bf5c <__hi0bits+0x36>
 800bf2e:	0403      	lsls	r3, r0, #16
 800bf30:	2010      	movs	r0, #16
 800bf32:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bf36:	bf04      	itt	eq
 800bf38:	021b      	lsleq	r3, r3, #8
 800bf3a:	3008      	addeq	r0, #8
 800bf3c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bf40:	bf04      	itt	eq
 800bf42:	011b      	lsleq	r3, r3, #4
 800bf44:	3004      	addeq	r0, #4
 800bf46:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bf4a:	bf04      	itt	eq
 800bf4c:	009b      	lsleq	r3, r3, #2
 800bf4e:	3002      	addeq	r0, #2
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	db06      	blt.n	800bf62 <__hi0bits+0x3c>
 800bf54:	005b      	lsls	r3, r3, #1
 800bf56:	d503      	bpl.n	800bf60 <__hi0bits+0x3a>
 800bf58:	3001      	adds	r0, #1
 800bf5a:	4770      	bx	lr
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	e7e8      	b.n	800bf32 <__hi0bits+0xc>
 800bf60:	2020      	movs	r0, #32
 800bf62:	4770      	bx	lr

0800bf64 <__lo0bits>:
 800bf64:	6803      	ldr	r3, [r0, #0]
 800bf66:	f013 0207 	ands.w	r2, r3, #7
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	d00b      	beq.n	800bf86 <__lo0bits+0x22>
 800bf6e:	07da      	lsls	r2, r3, #31
 800bf70:	d423      	bmi.n	800bfba <__lo0bits+0x56>
 800bf72:	0798      	lsls	r0, r3, #30
 800bf74:	bf49      	itett	mi
 800bf76:	085b      	lsrmi	r3, r3, #1
 800bf78:	089b      	lsrpl	r3, r3, #2
 800bf7a:	2001      	movmi	r0, #1
 800bf7c:	600b      	strmi	r3, [r1, #0]
 800bf7e:	bf5c      	itt	pl
 800bf80:	600b      	strpl	r3, [r1, #0]
 800bf82:	2002      	movpl	r0, #2
 800bf84:	4770      	bx	lr
 800bf86:	b298      	uxth	r0, r3
 800bf88:	b9a8      	cbnz	r0, 800bfb6 <__lo0bits+0x52>
 800bf8a:	0c1b      	lsrs	r3, r3, #16
 800bf8c:	2010      	movs	r0, #16
 800bf8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bf92:	bf04      	itt	eq
 800bf94:	0a1b      	lsreq	r3, r3, #8
 800bf96:	3008      	addeq	r0, #8
 800bf98:	071a      	lsls	r2, r3, #28
 800bf9a:	bf04      	itt	eq
 800bf9c:	091b      	lsreq	r3, r3, #4
 800bf9e:	3004      	addeq	r0, #4
 800bfa0:	079a      	lsls	r2, r3, #30
 800bfa2:	bf04      	itt	eq
 800bfa4:	089b      	lsreq	r3, r3, #2
 800bfa6:	3002      	addeq	r0, #2
 800bfa8:	07da      	lsls	r2, r3, #31
 800bfaa:	d402      	bmi.n	800bfb2 <__lo0bits+0x4e>
 800bfac:	085b      	lsrs	r3, r3, #1
 800bfae:	d006      	beq.n	800bfbe <__lo0bits+0x5a>
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	600b      	str	r3, [r1, #0]
 800bfb4:	4770      	bx	lr
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	e7e9      	b.n	800bf8e <__lo0bits+0x2a>
 800bfba:	2000      	movs	r0, #0
 800bfbc:	4770      	bx	lr
 800bfbe:	2020      	movs	r0, #32
 800bfc0:	4770      	bx	lr

0800bfc2 <__i2b>:
 800bfc2:	b510      	push	{r4, lr}
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	f7ff fee9 	bl	800bd9e <_Balloc>
 800bfcc:	2201      	movs	r2, #1
 800bfce:	6144      	str	r4, [r0, #20]
 800bfd0:	6102      	str	r2, [r0, #16]
 800bfd2:	bd10      	pop	{r4, pc}

0800bfd4 <__multiply>:
 800bfd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	4614      	mov	r4, r2
 800bfda:	690a      	ldr	r2, [r1, #16]
 800bfdc:	6923      	ldr	r3, [r4, #16]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	bfb8      	it	lt
 800bfe2:	460b      	movlt	r3, r1
 800bfe4:	4688      	mov	r8, r1
 800bfe6:	bfbc      	itt	lt
 800bfe8:	46a0      	movlt	r8, r4
 800bfea:	461c      	movlt	r4, r3
 800bfec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bff0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bff4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bff8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bffc:	eb07 0609 	add.w	r6, r7, r9
 800c000:	42b3      	cmp	r3, r6
 800c002:	bfb8      	it	lt
 800c004:	3101      	addlt	r1, #1
 800c006:	f7ff feca 	bl	800bd9e <_Balloc>
 800c00a:	f100 0514 	add.w	r5, r0, #20
 800c00e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c012:	462b      	mov	r3, r5
 800c014:	2200      	movs	r2, #0
 800c016:	4573      	cmp	r3, lr
 800c018:	d316      	bcc.n	800c048 <__multiply+0x74>
 800c01a:	f104 0214 	add.w	r2, r4, #20
 800c01e:	f108 0114 	add.w	r1, r8, #20
 800c022:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c026:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	9b00      	ldr	r3, [sp, #0]
 800c02e:	9201      	str	r2, [sp, #4]
 800c030:	4293      	cmp	r3, r2
 800c032:	d80c      	bhi.n	800c04e <__multiply+0x7a>
 800c034:	2e00      	cmp	r6, #0
 800c036:	dd03      	ble.n	800c040 <__multiply+0x6c>
 800c038:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d05d      	beq.n	800c0fc <__multiply+0x128>
 800c040:	6106      	str	r6, [r0, #16]
 800c042:	b003      	add	sp, #12
 800c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c048:	f843 2b04 	str.w	r2, [r3], #4
 800c04c:	e7e3      	b.n	800c016 <__multiply+0x42>
 800c04e:	f8b2 b000 	ldrh.w	fp, [r2]
 800c052:	f1bb 0f00 	cmp.w	fp, #0
 800c056:	d023      	beq.n	800c0a0 <__multiply+0xcc>
 800c058:	4689      	mov	r9, r1
 800c05a:	46ac      	mov	ip, r5
 800c05c:	f04f 0800 	mov.w	r8, #0
 800c060:	f859 4b04 	ldr.w	r4, [r9], #4
 800c064:	f8dc a000 	ldr.w	sl, [ip]
 800c068:	b2a3      	uxth	r3, r4
 800c06a:	fa1f fa8a 	uxth.w	sl, sl
 800c06e:	fb0b a303 	mla	r3, fp, r3, sl
 800c072:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c076:	f8dc 4000 	ldr.w	r4, [ip]
 800c07a:	4443      	add	r3, r8
 800c07c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c080:	fb0b 840a 	mla	r4, fp, sl, r8
 800c084:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c088:	46e2      	mov	sl, ip
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c090:	454f      	cmp	r7, r9
 800c092:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c096:	f84a 3b04 	str.w	r3, [sl], #4
 800c09a:	d82b      	bhi.n	800c0f4 <__multiply+0x120>
 800c09c:	f8cc 8004 	str.w	r8, [ip, #4]
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c0a6:	3204      	adds	r2, #4
 800c0a8:	f1ba 0f00 	cmp.w	sl, #0
 800c0ac:	d020      	beq.n	800c0f0 <__multiply+0x11c>
 800c0ae:	682b      	ldr	r3, [r5, #0]
 800c0b0:	4689      	mov	r9, r1
 800c0b2:	46a8      	mov	r8, r5
 800c0b4:	f04f 0b00 	mov.w	fp, #0
 800c0b8:	f8b9 c000 	ldrh.w	ip, [r9]
 800c0bc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c0c0:	fb0a 440c 	mla	r4, sl, ip, r4
 800c0c4:	445c      	add	r4, fp
 800c0c6:	46c4      	mov	ip, r8
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c0ce:	f84c 3b04 	str.w	r3, [ip], #4
 800c0d2:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0d6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c0da:	0c1b      	lsrs	r3, r3, #16
 800c0dc:	fb0a b303 	mla	r3, sl, r3, fp
 800c0e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c0e4:	454f      	cmp	r7, r9
 800c0e6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c0ea:	d805      	bhi.n	800c0f8 <__multiply+0x124>
 800c0ec:	f8c8 3004 	str.w	r3, [r8, #4]
 800c0f0:	3504      	adds	r5, #4
 800c0f2:	e79b      	b.n	800c02c <__multiply+0x58>
 800c0f4:	46d4      	mov	ip, sl
 800c0f6:	e7b3      	b.n	800c060 <__multiply+0x8c>
 800c0f8:	46e0      	mov	r8, ip
 800c0fa:	e7dd      	b.n	800c0b8 <__multiply+0xe4>
 800c0fc:	3e01      	subs	r6, #1
 800c0fe:	e799      	b.n	800c034 <__multiply+0x60>

0800c100 <__pow5mult>:
 800c100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c104:	4615      	mov	r5, r2
 800c106:	f012 0203 	ands.w	r2, r2, #3
 800c10a:	4606      	mov	r6, r0
 800c10c:	460f      	mov	r7, r1
 800c10e:	d007      	beq.n	800c120 <__pow5mult+0x20>
 800c110:	3a01      	subs	r2, #1
 800c112:	4c21      	ldr	r4, [pc, #132]	; (800c198 <__pow5mult+0x98>)
 800c114:	2300      	movs	r3, #0
 800c116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c11a:	f7ff fe8b 	bl	800be34 <__multadd>
 800c11e:	4607      	mov	r7, r0
 800c120:	10ad      	asrs	r5, r5, #2
 800c122:	d035      	beq.n	800c190 <__pow5mult+0x90>
 800c124:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c126:	b93c      	cbnz	r4, 800c138 <__pow5mult+0x38>
 800c128:	2010      	movs	r0, #16
 800c12a:	f7fc fad7 	bl	80086dc <malloc>
 800c12e:	6270      	str	r0, [r6, #36]	; 0x24
 800c130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c134:	6004      	str	r4, [r0, #0]
 800c136:	60c4      	str	r4, [r0, #12]
 800c138:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c13c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c140:	b94c      	cbnz	r4, 800c156 <__pow5mult+0x56>
 800c142:	f240 2171 	movw	r1, #625	; 0x271
 800c146:	4630      	mov	r0, r6
 800c148:	f7ff ff3b 	bl	800bfc2 <__i2b>
 800c14c:	2300      	movs	r3, #0
 800c14e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c152:	4604      	mov	r4, r0
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	f04f 0800 	mov.w	r8, #0
 800c15a:	07eb      	lsls	r3, r5, #31
 800c15c:	d50a      	bpl.n	800c174 <__pow5mult+0x74>
 800c15e:	4639      	mov	r1, r7
 800c160:	4622      	mov	r2, r4
 800c162:	4630      	mov	r0, r6
 800c164:	f7ff ff36 	bl	800bfd4 <__multiply>
 800c168:	4639      	mov	r1, r7
 800c16a:	4681      	mov	r9, r0
 800c16c:	4630      	mov	r0, r6
 800c16e:	f7ff fe4a 	bl	800be06 <_Bfree>
 800c172:	464f      	mov	r7, r9
 800c174:	106d      	asrs	r5, r5, #1
 800c176:	d00b      	beq.n	800c190 <__pow5mult+0x90>
 800c178:	6820      	ldr	r0, [r4, #0]
 800c17a:	b938      	cbnz	r0, 800c18c <__pow5mult+0x8c>
 800c17c:	4622      	mov	r2, r4
 800c17e:	4621      	mov	r1, r4
 800c180:	4630      	mov	r0, r6
 800c182:	f7ff ff27 	bl	800bfd4 <__multiply>
 800c186:	6020      	str	r0, [r4, #0]
 800c188:	f8c0 8000 	str.w	r8, [r0]
 800c18c:	4604      	mov	r4, r0
 800c18e:	e7e4      	b.n	800c15a <__pow5mult+0x5a>
 800c190:	4638      	mov	r0, r7
 800c192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c196:	bf00      	nop
 800c198:	08010278 	.word	0x08010278

0800c19c <__lshift>:
 800c19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1a6:	6923      	ldr	r3, [r4, #16]
 800c1a8:	6849      	ldr	r1, [r1, #4]
 800c1aa:	eb0a 0903 	add.w	r9, sl, r3
 800c1ae:	68a3      	ldr	r3, [r4, #8]
 800c1b0:	4607      	mov	r7, r0
 800c1b2:	4616      	mov	r6, r2
 800c1b4:	f109 0501 	add.w	r5, r9, #1
 800c1b8:	42ab      	cmp	r3, r5
 800c1ba:	db32      	blt.n	800c222 <__lshift+0x86>
 800c1bc:	4638      	mov	r0, r7
 800c1be:	f7ff fdee 	bl	800bd9e <_Balloc>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4680      	mov	r8, r0
 800c1c6:	f100 0114 	add.w	r1, r0, #20
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	4553      	cmp	r3, sl
 800c1ce:	db2b      	blt.n	800c228 <__lshift+0x8c>
 800c1d0:	6920      	ldr	r0, [r4, #16]
 800c1d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1d6:	f104 0314 	add.w	r3, r4, #20
 800c1da:	f016 021f 	ands.w	r2, r6, #31
 800c1de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1e6:	d025      	beq.n	800c234 <__lshift+0x98>
 800c1e8:	f1c2 0e20 	rsb	lr, r2, #32
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	681e      	ldr	r6, [r3, #0]
 800c1f0:	468a      	mov	sl, r1
 800c1f2:	4096      	lsls	r6, r2
 800c1f4:	4330      	orrs	r0, r6
 800c1f6:	f84a 0b04 	str.w	r0, [sl], #4
 800c1fa:	f853 0b04 	ldr.w	r0, [r3], #4
 800c1fe:	459c      	cmp	ip, r3
 800c200:	fa20 f00e 	lsr.w	r0, r0, lr
 800c204:	d814      	bhi.n	800c230 <__lshift+0x94>
 800c206:	6048      	str	r0, [r1, #4]
 800c208:	b108      	cbz	r0, 800c20e <__lshift+0x72>
 800c20a:	f109 0502 	add.w	r5, r9, #2
 800c20e:	3d01      	subs	r5, #1
 800c210:	4638      	mov	r0, r7
 800c212:	f8c8 5010 	str.w	r5, [r8, #16]
 800c216:	4621      	mov	r1, r4
 800c218:	f7ff fdf5 	bl	800be06 <_Bfree>
 800c21c:	4640      	mov	r0, r8
 800c21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c222:	3101      	adds	r1, #1
 800c224:	005b      	lsls	r3, r3, #1
 800c226:	e7c7      	b.n	800c1b8 <__lshift+0x1c>
 800c228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c22c:	3301      	adds	r3, #1
 800c22e:	e7cd      	b.n	800c1cc <__lshift+0x30>
 800c230:	4651      	mov	r1, sl
 800c232:	e7dc      	b.n	800c1ee <__lshift+0x52>
 800c234:	3904      	subs	r1, #4
 800c236:	f853 2b04 	ldr.w	r2, [r3], #4
 800c23a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c23e:	459c      	cmp	ip, r3
 800c240:	d8f9      	bhi.n	800c236 <__lshift+0x9a>
 800c242:	e7e4      	b.n	800c20e <__lshift+0x72>

0800c244 <__mcmp>:
 800c244:	6903      	ldr	r3, [r0, #16]
 800c246:	690a      	ldr	r2, [r1, #16]
 800c248:	1a9b      	subs	r3, r3, r2
 800c24a:	b530      	push	{r4, r5, lr}
 800c24c:	d10c      	bne.n	800c268 <__mcmp+0x24>
 800c24e:	0092      	lsls	r2, r2, #2
 800c250:	3014      	adds	r0, #20
 800c252:	3114      	adds	r1, #20
 800c254:	1884      	adds	r4, r0, r2
 800c256:	4411      	add	r1, r2
 800c258:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c25c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c260:	4295      	cmp	r5, r2
 800c262:	d003      	beq.n	800c26c <__mcmp+0x28>
 800c264:	d305      	bcc.n	800c272 <__mcmp+0x2e>
 800c266:	2301      	movs	r3, #1
 800c268:	4618      	mov	r0, r3
 800c26a:	bd30      	pop	{r4, r5, pc}
 800c26c:	42a0      	cmp	r0, r4
 800c26e:	d3f3      	bcc.n	800c258 <__mcmp+0x14>
 800c270:	e7fa      	b.n	800c268 <__mcmp+0x24>
 800c272:	f04f 33ff 	mov.w	r3, #4294967295
 800c276:	e7f7      	b.n	800c268 <__mcmp+0x24>

0800c278 <__mdiff>:
 800c278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c27c:	460d      	mov	r5, r1
 800c27e:	4607      	mov	r7, r0
 800c280:	4611      	mov	r1, r2
 800c282:	4628      	mov	r0, r5
 800c284:	4614      	mov	r4, r2
 800c286:	f7ff ffdd 	bl	800c244 <__mcmp>
 800c28a:	1e06      	subs	r6, r0, #0
 800c28c:	d108      	bne.n	800c2a0 <__mdiff+0x28>
 800c28e:	4631      	mov	r1, r6
 800c290:	4638      	mov	r0, r7
 800c292:	f7ff fd84 	bl	800bd9e <_Balloc>
 800c296:	2301      	movs	r3, #1
 800c298:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a0:	bfa4      	itt	ge
 800c2a2:	4623      	movge	r3, r4
 800c2a4:	462c      	movge	r4, r5
 800c2a6:	4638      	mov	r0, r7
 800c2a8:	6861      	ldr	r1, [r4, #4]
 800c2aa:	bfa6      	itte	ge
 800c2ac:	461d      	movge	r5, r3
 800c2ae:	2600      	movge	r6, #0
 800c2b0:	2601      	movlt	r6, #1
 800c2b2:	f7ff fd74 	bl	800bd9e <_Balloc>
 800c2b6:	692b      	ldr	r3, [r5, #16]
 800c2b8:	60c6      	str	r6, [r0, #12]
 800c2ba:	6926      	ldr	r6, [r4, #16]
 800c2bc:	f105 0914 	add.w	r9, r5, #20
 800c2c0:	f104 0214 	add.w	r2, r4, #20
 800c2c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c2c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c2cc:	f100 0514 	add.w	r5, r0, #20
 800c2d0:	f04f 0e00 	mov.w	lr, #0
 800c2d4:	f852 ab04 	ldr.w	sl, [r2], #4
 800c2d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800c2dc:	fa1e f18a 	uxtah	r1, lr, sl
 800c2e0:	b2a3      	uxth	r3, r4
 800c2e2:	1ac9      	subs	r1, r1, r3
 800c2e4:	0c23      	lsrs	r3, r4, #16
 800c2e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c2ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c2ee:	b289      	uxth	r1, r1
 800c2f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c2f4:	45c8      	cmp	r8, r9
 800c2f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c2fa:	4694      	mov	ip, r2
 800c2fc:	f845 3b04 	str.w	r3, [r5], #4
 800c300:	d8e8      	bhi.n	800c2d4 <__mdiff+0x5c>
 800c302:	45bc      	cmp	ip, r7
 800c304:	d304      	bcc.n	800c310 <__mdiff+0x98>
 800c306:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c30a:	b183      	cbz	r3, 800c32e <__mdiff+0xb6>
 800c30c:	6106      	str	r6, [r0, #16]
 800c30e:	e7c5      	b.n	800c29c <__mdiff+0x24>
 800c310:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c314:	fa1e f381 	uxtah	r3, lr, r1
 800c318:	141a      	asrs	r2, r3, #16
 800c31a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c31e:	b29b      	uxth	r3, r3
 800c320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c324:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c328:	f845 3b04 	str.w	r3, [r5], #4
 800c32c:	e7e9      	b.n	800c302 <__mdiff+0x8a>
 800c32e:	3e01      	subs	r6, #1
 800c330:	e7e9      	b.n	800c306 <__mdiff+0x8e>
	...

0800c334 <__ulp>:
 800c334:	4b12      	ldr	r3, [pc, #72]	; (800c380 <__ulp+0x4c>)
 800c336:	ee10 2a90 	vmov	r2, s1
 800c33a:	401a      	ands	r2, r3
 800c33c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c340:	2b00      	cmp	r3, #0
 800c342:	dd04      	ble.n	800c34e <__ulp+0x1a>
 800c344:	2000      	movs	r0, #0
 800c346:	4619      	mov	r1, r3
 800c348:	ec41 0b10 	vmov	d0, r0, r1
 800c34c:	4770      	bx	lr
 800c34e:	425b      	negs	r3, r3
 800c350:	151b      	asrs	r3, r3, #20
 800c352:	2b13      	cmp	r3, #19
 800c354:	f04f 0000 	mov.w	r0, #0
 800c358:	f04f 0100 	mov.w	r1, #0
 800c35c:	dc04      	bgt.n	800c368 <__ulp+0x34>
 800c35e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c362:	fa42 f103 	asr.w	r1, r2, r3
 800c366:	e7ef      	b.n	800c348 <__ulp+0x14>
 800c368:	3b14      	subs	r3, #20
 800c36a:	2b1e      	cmp	r3, #30
 800c36c:	f04f 0201 	mov.w	r2, #1
 800c370:	bfda      	itte	le
 800c372:	f1c3 031f 	rsble	r3, r3, #31
 800c376:	fa02 f303 	lslle.w	r3, r2, r3
 800c37a:	4613      	movgt	r3, r2
 800c37c:	4618      	mov	r0, r3
 800c37e:	e7e3      	b.n	800c348 <__ulp+0x14>
 800c380:	7ff00000 	.word	0x7ff00000

0800c384 <__b2d>:
 800c384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c386:	6905      	ldr	r5, [r0, #16]
 800c388:	f100 0714 	add.w	r7, r0, #20
 800c38c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c390:	1f2e      	subs	r6, r5, #4
 800c392:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c396:	4620      	mov	r0, r4
 800c398:	f7ff fdc5 	bl	800bf26 <__hi0bits>
 800c39c:	f1c0 0320 	rsb	r3, r0, #32
 800c3a0:	280a      	cmp	r0, #10
 800c3a2:	600b      	str	r3, [r1, #0]
 800c3a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c41c <__b2d+0x98>
 800c3a8:	dc14      	bgt.n	800c3d4 <__b2d+0x50>
 800c3aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800c3ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800c3b2:	42b7      	cmp	r7, r6
 800c3b4:	ea41 030c 	orr.w	r3, r1, ip
 800c3b8:	bf34      	ite	cc
 800c3ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c3be:	2100      	movcs	r1, #0
 800c3c0:	3015      	adds	r0, #21
 800c3c2:	fa04 f000 	lsl.w	r0, r4, r0
 800c3c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800c3ca:	ea40 0201 	orr.w	r2, r0, r1
 800c3ce:	ec43 2b10 	vmov	d0, r2, r3
 800c3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3d4:	42b7      	cmp	r7, r6
 800c3d6:	bf3a      	itte	cc
 800c3d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800c3dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c3e0:	2100      	movcs	r1, #0
 800c3e2:	380b      	subs	r0, #11
 800c3e4:	d015      	beq.n	800c412 <__b2d+0x8e>
 800c3e6:	4084      	lsls	r4, r0
 800c3e8:	f1c0 0520 	rsb	r5, r0, #32
 800c3ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c3f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c3f4:	42be      	cmp	r6, r7
 800c3f6:	fa21 fc05 	lsr.w	ip, r1, r5
 800c3fa:	ea44 030c 	orr.w	r3, r4, ip
 800c3fe:	bf8c      	ite	hi
 800c400:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c404:	2400      	movls	r4, #0
 800c406:	fa01 f000 	lsl.w	r0, r1, r0
 800c40a:	40ec      	lsrs	r4, r5
 800c40c:	ea40 0204 	orr.w	r2, r0, r4
 800c410:	e7dd      	b.n	800c3ce <__b2d+0x4a>
 800c412:	ea44 030c 	orr.w	r3, r4, ip
 800c416:	460a      	mov	r2, r1
 800c418:	e7d9      	b.n	800c3ce <__b2d+0x4a>
 800c41a:	bf00      	nop
 800c41c:	3ff00000 	.word	0x3ff00000

0800c420 <__d2b>:
 800c420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c424:	460e      	mov	r6, r1
 800c426:	2101      	movs	r1, #1
 800c428:	ec59 8b10 	vmov	r8, r9, d0
 800c42c:	4615      	mov	r5, r2
 800c42e:	f7ff fcb6 	bl	800bd9e <_Balloc>
 800c432:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c436:	4607      	mov	r7, r0
 800c438:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c43c:	bb34      	cbnz	r4, 800c48c <__d2b+0x6c>
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	f1b8 0300 	subs.w	r3, r8, #0
 800c444:	d027      	beq.n	800c496 <__d2b+0x76>
 800c446:	a802      	add	r0, sp, #8
 800c448:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c44c:	f7ff fd8a 	bl	800bf64 <__lo0bits>
 800c450:	9900      	ldr	r1, [sp, #0]
 800c452:	b1f0      	cbz	r0, 800c492 <__d2b+0x72>
 800c454:	9a01      	ldr	r2, [sp, #4]
 800c456:	f1c0 0320 	rsb	r3, r0, #32
 800c45a:	fa02 f303 	lsl.w	r3, r2, r3
 800c45e:	430b      	orrs	r3, r1
 800c460:	40c2      	lsrs	r2, r0
 800c462:	617b      	str	r3, [r7, #20]
 800c464:	9201      	str	r2, [sp, #4]
 800c466:	9b01      	ldr	r3, [sp, #4]
 800c468:	61bb      	str	r3, [r7, #24]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	bf14      	ite	ne
 800c46e:	2102      	movne	r1, #2
 800c470:	2101      	moveq	r1, #1
 800c472:	6139      	str	r1, [r7, #16]
 800c474:	b1c4      	cbz	r4, 800c4a8 <__d2b+0x88>
 800c476:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c47a:	4404      	add	r4, r0
 800c47c:	6034      	str	r4, [r6, #0]
 800c47e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c482:	6028      	str	r0, [r5, #0]
 800c484:	4638      	mov	r0, r7
 800c486:	b003      	add	sp, #12
 800c488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c48c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c490:	e7d5      	b.n	800c43e <__d2b+0x1e>
 800c492:	6179      	str	r1, [r7, #20]
 800c494:	e7e7      	b.n	800c466 <__d2b+0x46>
 800c496:	a801      	add	r0, sp, #4
 800c498:	f7ff fd64 	bl	800bf64 <__lo0bits>
 800c49c:	9b01      	ldr	r3, [sp, #4]
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	6139      	str	r1, [r7, #16]
 800c4a4:	3020      	adds	r0, #32
 800c4a6:	e7e5      	b.n	800c474 <__d2b+0x54>
 800c4a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c4ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c4b0:	6030      	str	r0, [r6, #0]
 800c4b2:	6918      	ldr	r0, [r3, #16]
 800c4b4:	f7ff fd37 	bl	800bf26 <__hi0bits>
 800c4b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c4bc:	e7e1      	b.n	800c482 <__d2b+0x62>

0800c4be <__ratio>:
 800c4be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c2:	4688      	mov	r8, r1
 800c4c4:	4669      	mov	r1, sp
 800c4c6:	4681      	mov	r9, r0
 800c4c8:	f7ff ff5c 	bl	800c384 <__b2d>
 800c4cc:	a901      	add	r1, sp, #4
 800c4ce:	4640      	mov	r0, r8
 800c4d0:	ec57 6b10 	vmov	r6, r7, d0
 800c4d4:	f7ff ff56 	bl	800c384 <__b2d>
 800c4d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c4e0:	eba3 0c02 	sub.w	ip, r3, r2
 800c4e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c4e8:	1a9b      	subs	r3, r3, r2
 800c4ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c4ee:	ec5b ab10 	vmov	sl, fp, d0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	bfce      	itee	gt
 800c4f6:	463a      	movgt	r2, r7
 800c4f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c4fc:	465a      	movle	r2, fp
 800c4fe:	4659      	mov	r1, fp
 800c500:	463d      	mov	r5, r7
 800c502:	bfd4      	ite	le
 800c504:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c508:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c50c:	4630      	mov	r0, r6
 800c50e:	ee10 2a10 	vmov	r2, s0
 800c512:	460b      	mov	r3, r1
 800c514:	4629      	mov	r1, r5
 800c516:	f7f4 f9a1 	bl	800085c <__aeabi_ddiv>
 800c51a:	ec41 0b10 	vmov	d0, r0, r1
 800c51e:	b003      	add	sp, #12
 800c520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c524 <__copybits>:
 800c524:	3901      	subs	r1, #1
 800c526:	b510      	push	{r4, lr}
 800c528:	1149      	asrs	r1, r1, #5
 800c52a:	6914      	ldr	r4, [r2, #16]
 800c52c:	3101      	adds	r1, #1
 800c52e:	f102 0314 	add.w	r3, r2, #20
 800c532:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c536:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c53a:	42a3      	cmp	r3, r4
 800c53c:	4602      	mov	r2, r0
 800c53e:	d303      	bcc.n	800c548 <__copybits+0x24>
 800c540:	2300      	movs	r3, #0
 800c542:	428a      	cmp	r2, r1
 800c544:	d305      	bcc.n	800c552 <__copybits+0x2e>
 800c546:	bd10      	pop	{r4, pc}
 800c548:	f853 2b04 	ldr.w	r2, [r3], #4
 800c54c:	f840 2b04 	str.w	r2, [r0], #4
 800c550:	e7f3      	b.n	800c53a <__copybits+0x16>
 800c552:	f842 3b04 	str.w	r3, [r2], #4
 800c556:	e7f4      	b.n	800c542 <__copybits+0x1e>

0800c558 <__any_on>:
 800c558:	f100 0214 	add.w	r2, r0, #20
 800c55c:	6900      	ldr	r0, [r0, #16]
 800c55e:	114b      	asrs	r3, r1, #5
 800c560:	4298      	cmp	r0, r3
 800c562:	b510      	push	{r4, lr}
 800c564:	db11      	blt.n	800c58a <__any_on+0x32>
 800c566:	dd0a      	ble.n	800c57e <__any_on+0x26>
 800c568:	f011 011f 	ands.w	r1, r1, #31
 800c56c:	d007      	beq.n	800c57e <__any_on+0x26>
 800c56e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c572:	fa24 f001 	lsr.w	r0, r4, r1
 800c576:	fa00 f101 	lsl.w	r1, r0, r1
 800c57a:	428c      	cmp	r4, r1
 800c57c:	d10b      	bne.n	800c596 <__any_on+0x3e>
 800c57e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c582:	4293      	cmp	r3, r2
 800c584:	d803      	bhi.n	800c58e <__any_on+0x36>
 800c586:	2000      	movs	r0, #0
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	4603      	mov	r3, r0
 800c58c:	e7f7      	b.n	800c57e <__any_on+0x26>
 800c58e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c592:	2900      	cmp	r1, #0
 800c594:	d0f5      	beq.n	800c582 <__any_on+0x2a>
 800c596:	2001      	movs	r0, #1
 800c598:	e7f6      	b.n	800c588 <__any_on+0x30>

0800c59a <_calloc_r>:
 800c59a:	b538      	push	{r3, r4, r5, lr}
 800c59c:	fb02 f401 	mul.w	r4, r2, r1
 800c5a0:	4621      	mov	r1, r4
 800c5a2:	f7fc f901 	bl	80087a8 <_malloc_r>
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	b118      	cbz	r0, 800c5b2 <_calloc_r+0x18>
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	f7fc f8a5 	bl	80086fc <memset>
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	bd38      	pop	{r3, r4, r5, pc}

0800c5b6 <__ssputs_r>:
 800c5b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ba:	688e      	ldr	r6, [r1, #8]
 800c5bc:	429e      	cmp	r6, r3
 800c5be:	4682      	mov	sl, r0
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	4690      	mov	r8, r2
 800c5c4:	4699      	mov	r9, r3
 800c5c6:	d837      	bhi.n	800c638 <__ssputs_r+0x82>
 800c5c8:	898a      	ldrh	r2, [r1, #12]
 800c5ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5ce:	d031      	beq.n	800c634 <__ssputs_r+0x7e>
 800c5d0:	6825      	ldr	r5, [r4, #0]
 800c5d2:	6909      	ldr	r1, [r1, #16]
 800c5d4:	1a6f      	subs	r7, r5, r1
 800c5d6:	6965      	ldr	r5, [r4, #20]
 800c5d8:	2302      	movs	r3, #2
 800c5da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5de:	fb95 f5f3 	sdiv	r5, r5, r3
 800c5e2:	f109 0301 	add.w	r3, r9, #1
 800c5e6:	443b      	add	r3, r7
 800c5e8:	429d      	cmp	r5, r3
 800c5ea:	bf38      	it	cc
 800c5ec:	461d      	movcc	r5, r3
 800c5ee:	0553      	lsls	r3, r2, #21
 800c5f0:	d530      	bpl.n	800c654 <__ssputs_r+0x9e>
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	f7fc f8d8 	bl	80087a8 <_malloc_r>
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	b950      	cbnz	r0, 800c612 <__ssputs_r+0x5c>
 800c5fc:	230c      	movs	r3, #12
 800c5fe:	f8ca 3000 	str.w	r3, [sl]
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	f04f 30ff 	mov.w	r0, #4294967295
 800c60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c612:	463a      	mov	r2, r7
 800c614:	6921      	ldr	r1, [r4, #16]
 800c616:	f7ff fbb5 	bl	800bd84 <memcpy>
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c624:	81a3      	strh	r3, [r4, #12]
 800c626:	6126      	str	r6, [r4, #16]
 800c628:	6165      	str	r5, [r4, #20]
 800c62a:	443e      	add	r6, r7
 800c62c:	1bed      	subs	r5, r5, r7
 800c62e:	6026      	str	r6, [r4, #0]
 800c630:	60a5      	str	r5, [r4, #8]
 800c632:	464e      	mov	r6, r9
 800c634:	454e      	cmp	r6, r9
 800c636:	d900      	bls.n	800c63a <__ssputs_r+0x84>
 800c638:	464e      	mov	r6, r9
 800c63a:	4632      	mov	r2, r6
 800c63c:	4641      	mov	r1, r8
 800c63e:	6820      	ldr	r0, [r4, #0]
 800c640:	f000 fe9a 	bl	800d378 <memmove>
 800c644:	68a3      	ldr	r3, [r4, #8]
 800c646:	1b9b      	subs	r3, r3, r6
 800c648:	60a3      	str	r3, [r4, #8]
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	441e      	add	r6, r3
 800c64e:	6026      	str	r6, [r4, #0]
 800c650:	2000      	movs	r0, #0
 800c652:	e7dc      	b.n	800c60e <__ssputs_r+0x58>
 800c654:	462a      	mov	r2, r5
 800c656:	f000 fea8 	bl	800d3aa <_realloc_r>
 800c65a:	4606      	mov	r6, r0
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d1e2      	bne.n	800c626 <__ssputs_r+0x70>
 800c660:	6921      	ldr	r1, [r4, #16]
 800c662:	4650      	mov	r0, sl
 800c664:	f7fc f852 	bl	800870c <_free_r>
 800c668:	e7c8      	b.n	800c5fc <__ssputs_r+0x46>
	...

0800c66c <_svfiprintf_r>:
 800c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c670:	461d      	mov	r5, r3
 800c672:	898b      	ldrh	r3, [r1, #12]
 800c674:	061f      	lsls	r7, r3, #24
 800c676:	b09d      	sub	sp, #116	; 0x74
 800c678:	4680      	mov	r8, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	4616      	mov	r6, r2
 800c67e:	d50f      	bpl.n	800c6a0 <_svfiprintf_r+0x34>
 800c680:	690b      	ldr	r3, [r1, #16]
 800c682:	b96b      	cbnz	r3, 800c6a0 <_svfiprintf_r+0x34>
 800c684:	2140      	movs	r1, #64	; 0x40
 800c686:	f7fc f88f 	bl	80087a8 <_malloc_r>
 800c68a:	6020      	str	r0, [r4, #0]
 800c68c:	6120      	str	r0, [r4, #16]
 800c68e:	b928      	cbnz	r0, 800c69c <_svfiprintf_r+0x30>
 800c690:	230c      	movs	r3, #12
 800c692:	f8c8 3000 	str.w	r3, [r8]
 800c696:	f04f 30ff 	mov.w	r0, #4294967295
 800c69a:	e0c8      	b.n	800c82e <_svfiprintf_r+0x1c2>
 800c69c:	2340      	movs	r3, #64	; 0x40
 800c69e:	6163      	str	r3, [r4, #20]
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a4:	2320      	movs	r3, #32
 800c6a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6aa:	2330      	movs	r3, #48	; 0x30
 800c6ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6b0:	9503      	str	r5, [sp, #12]
 800c6b2:	f04f 0b01 	mov.w	fp, #1
 800c6b6:	4637      	mov	r7, r6
 800c6b8:	463d      	mov	r5, r7
 800c6ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c6be:	b10b      	cbz	r3, 800c6c4 <_svfiprintf_r+0x58>
 800c6c0:	2b25      	cmp	r3, #37	; 0x25
 800c6c2:	d13e      	bne.n	800c742 <_svfiprintf_r+0xd6>
 800c6c4:	ebb7 0a06 	subs.w	sl, r7, r6
 800c6c8:	d00b      	beq.n	800c6e2 <_svfiprintf_r+0x76>
 800c6ca:	4653      	mov	r3, sl
 800c6cc:	4632      	mov	r2, r6
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	f7ff ff70 	bl	800c5b6 <__ssputs_r>
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	f000 80a4 	beq.w	800c824 <_svfiprintf_r+0x1b8>
 800c6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6de:	4453      	add	r3, sl
 800c6e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e2:	783b      	ldrb	r3, [r7, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 809d 	beq.w	800c824 <_svfiprintf_r+0x1b8>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6f4:	9304      	str	r3, [sp, #16]
 800c6f6:	9307      	str	r3, [sp, #28]
 800c6f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c6fe:	462f      	mov	r7, r5
 800c700:	2205      	movs	r2, #5
 800c702:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c706:	4850      	ldr	r0, [pc, #320]	; (800c848 <_svfiprintf_r+0x1dc>)
 800c708:	f7f3 fd72 	bl	80001f0 <memchr>
 800c70c:	9b04      	ldr	r3, [sp, #16]
 800c70e:	b9d0      	cbnz	r0, 800c746 <_svfiprintf_r+0xda>
 800c710:	06d9      	lsls	r1, r3, #27
 800c712:	bf44      	itt	mi
 800c714:	2220      	movmi	r2, #32
 800c716:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c71a:	071a      	lsls	r2, r3, #28
 800c71c:	bf44      	itt	mi
 800c71e:	222b      	movmi	r2, #43	; 0x2b
 800c720:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c724:	782a      	ldrb	r2, [r5, #0]
 800c726:	2a2a      	cmp	r2, #42	; 0x2a
 800c728:	d015      	beq.n	800c756 <_svfiprintf_r+0xea>
 800c72a:	9a07      	ldr	r2, [sp, #28]
 800c72c:	462f      	mov	r7, r5
 800c72e:	2000      	movs	r0, #0
 800c730:	250a      	movs	r5, #10
 800c732:	4639      	mov	r1, r7
 800c734:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c738:	3b30      	subs	r3, #48	; 0x30
 800c73a:	2b09      	cmp	r3, #9
 800c73c:	d94d      	bls.n	800c7da <_svfiprintf_r+0x16e>
 800c73e:	b1b8      	cbz	r0, 800c770 <_svfiprintf_r+0x104>
 800c740:	e00f      	b.n	800c762 <_svfiprintf_r+0xf6>
 800c742:	462f      	mov	r7, r5
 800c744:	e7b8      	b.n	800c6b8 <_svfiprintf_r+0x4c>
 800c746:	4a40      	ldr	r2, [pc, #256]	; (800c848 <_svfiprintf_r+0x1dc>)
 800c748:	1a80      	subs	r0, r0, r2
 800c74a:	fa0b f000 	lsl.w	r0, fp, r0
 800c74e:	4318      	orrs	r0, r3
 800c750:	9004      	str	r0, [sp, #16]
 800c752:	463d      	mov	r5, r7
 800c754:	e7d3      	b.n	800c6fe <_svfiprintf_r+0x92>
 800c756:	9a03      	ldr	r2, [sp, #12]
 800c758:	1d11      	adds	r1, r2, #4
 800c75a:	6812      	ldr	r2, [r2, #0]
 800c75c:	9103      	str	r1, [sp, #12]
 800c75e:	2a00      	cmp	r2, #0
 800c760:	db01      	blt.n	800c766 <_svfiprintf_r+0xfa>
 800c762:	9207      	str	r2, [sp, #28]
 800c764:	e004      	b.n	800c770 <_svfiprintf_r+0x104>
 800c766:	4252      	negs	r2, r2
 800c768:	f043 0302 	orr.w	r3, r3, #2
 800c76c:	9207      	str	r2, [sp, #28]
 800c76e:	9304      	str	r3, [sp, #16]
 800c770:	783b      	ldrb	r3, [r7, #0]
 800c772:	2b2e      	cmp	r3, #46	; 0x2e
 800c774:	d10c      	bne.n	800c790 <_svfiprintf_r+0x124>
 800c776:	787b      	ldrb	r3, [r7, #1]
 800c778:	2b2a      	cmp	r3, #42	; 0x2a
 800c77a:	d133      	bne.n	800c7e4 <_svfiprintf_r+0x178>
 800c77c:	9b03      	ldr	r3, [sp, #12]
 800c77e:	1d1a      	adds	r2, r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	9203      	str	r2, [sp, #12]
 800c784:	2b00      	cmp	r3, #0
 800c786:	bfb8      	it	lt
 800c788:	f04f 33ff 	movlt.w	r3, #4294967295
 800c78c:	3702      	adds	r7, #2
 800c78e:	9305      	str	r3, [sp, #20]
 800c790:	4d2e      	ldr	r5, [pc, #184]	; (800c84c <_svfiprintf_r+0x1e0>)
 800c792:	7839      	ldrb	r1, [r7, #0]
 800c794:	2203      	movs	r2, #3
 800c796:	4628      	mov	r0, r5
 800c798:	f7f3 fd2a 	bl	80001f0 <memchr>
 800c79c:	b138      	cbz	r0, 800c7ae <_svfiprintf_r+0x142>
 800c79e:	2340      	movs	r3, #64	; 0x40
 800c7a0:	1b40      	subs	r0, r0, r5
 800c7a2:	fa03 f000 	lsl.w	r0, r3, r0
 800c7a6:	9b04      	ldr	r3, [sp, #16]
 800c7a8:	4303      	orrs	r3, r0
 800c7aa:	3701      	adds	r7, #1
 800c7ac:	9304      	str	r3, [sp, #16]
 800c7ae:	7839      	ldrb	r1, [r7, #0]
 800c7b0:	4827      	ldr	r0, [pc, #156]	; (800c850 <_svfiprintf_r+0x1e4>)
 800c7b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7b6:	2206      	movs	r2, #6
 800c7b8:	1c7e      	adds	r6, r7, #1
 800c7ba:	f7f3 fd19 	bl	80001f0 <memchr>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d038      	beq.n	800c834 <_svfiprintf_r+0x1c8>
 800c7c2:	4b24      	ldr	r3, [pc, #144]	; (800c854 <_svfiprintf_r+0x1e8>)
 800c7c4:	bb13      	cbnz	r3, 800c80c <_svfiprintf_r+0x1a0>
 800c7c6:	9b03      	ldr	r3, [sp, #12]
 800c7c8:	3307      	adds	r3, #7
 800c7ca:	f023 0307 	bic.w	r3, r3, #7
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	9303      	str	r3, [sp, #12]
 800c7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d4:	444b      	add	r3, r9
 800c7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d8:	e76d      	b.n	800c6b6 <_svfiprintf_r+0x4a>
 800c7da:	fb05 3202 	mla	r2, r5, r2, r3
 800c7de:	2001      	movs	r0, #1
 800c7e0:	460f      	mov	r7, r1
 800c7e2:	e7a6      	b.n	800c732 <_svfiprintf_r+0xc6>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	3701      	adds	r7, #1
 800c7e8:	9305      	str	r3, [sp, #20]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	250a      	movs	r5, #10
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7f4:	3a30      	subs	r2, #48	; 0x30
 800c7f6:	2a09      	cmp	r2, #9
 800c7f8:	d903      	bls.n	800c802 <_svfiprintf_r+0x196>
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d0c8      	beq.n	800c790 <_svfiprintf_r+0x124>
 800c7fe:	9105      	str	r1, [sp, #20]
 800c800:	e7c6      	b.n	800c790 <_svfiprintf_r+0x124>
 800c802:	fb05 2101 	mla	r1, r5, r1, r2
 800c806:	2301      	movs	r3, #1
 800c808:	4607      	mov	r7, r0
 800c80a:	e7f0      	b.n	800c7ee <_svfiprintf_r+0x182>
 800c80c:	ab03      	add	r3, sp, #12
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	4622      	mov	r2, r4
 800c812:	4b11      	ldr	r3, [pc, #68]	; (800c858 <_svfiprintf_r+0x1ec>)
 800c814:	a904      	add	r1, sp, #16
 800c816:	4640      	mov	r0, r8
 800c818:	f7fc f8b4 	bl	8008984 <_printf_float>
 800c81c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c820:	4681      	mov	r9, r0
 800c822:	d1d6      	bne.n	800c7d2 <_svfiprintf_r+0x166>
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	065b      	lsls	r3, r3, #25
 800c828:	f53f af35 	bmi.w	800c696 <_svfiprintf_r+0x2a>
 800c82c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c82e:	b01d      	add	sp, #116	; 0x74
 800c830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c834:	ab03      	add	r3, sp, #12
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	4622      	mov	r2, r4
 800c83a:	4b07      	ldr	r3, [pc, #28]	; (800c858 <_svfiprintf_r+0x1ec>)
 800c83c:	a904      	add	r1, sp, #16
 800c83e:	4640      	mov	r0, r8
 800c840:	f7fc fb56 	bl	8008ef0 <_printf_i>
 800c844:	e7ea      	b.n	800c81c <_svfiprintf_r+0x1b0>
 800c846:	bf00      	nop
 800c848:	08010284 	.word	0x08010284
 800c84c:	0801028a 	.word	0x0801028a
 800c850:	0801028e 	.word	0x0801028e
 800c854:	08008985 	.word	0x08008985
 800c858:	0800c5b7 	.word	0x0800c5b7

0800c85c <_sungetc_r>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	1c4b      	adds	r3, r1, #1
 800c860:	4614      	mov	r4, r2
 800c862:	d103      	bne.n	800c86c <_sungetc_r+0x10>
 800c864:	f04f 35ff 	mov.w	r5, #4294967295
 800c868:	4628      	mov	r0, r5
 800c86a:	bd38      	pop	{r3, r4, r5, pc}
 800c86c:	8993      	ldrh	r3, [r2, #12]
 800c86e:	f023 0320 	bic.w	r3, r3, #32
 800c872:	8193      	strh	r3, [r2, #12]
 800c874:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c876:	6852      	ldr	r2, [r2, #4]
 800c878:	b2cd      	uxtb	r5, r1
 800c87a:	b18b      	cbz	r3, 800c8a0 <_sungetc_r+0x44>
 800c87c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c87e:	4293      	cmp	r3, r2
 800c880:	dd08      	ble.n	800c894 <_sungetc_r+0x38>
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	1e5a      	subs	r2, r3, #1
 800c886:	6022      	str	r2, [r4, #0]
 800c888:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c88c:	6863      	ldr	r3, [r4, #4]
 800c88e:	3301      	adds	r3, #1
 800c890:	6063      	str	r3, [r4, #4]
 800c892:	e7e9      	b.n	800c868 <_sungetc_r+0xc>
 800c894:	4621      	mov	r1, r4
 800c896:	f000 fd05 	bl	800d2a4 <__submore>
 800c89a:	2800      	cmp	r0, #0
 800c89c:	d0f1      	beq.n	800c882 <_sungetc_r+0x26>
 800c89e:	e7e1      	b.n	800c864 <_sungetc_r+0x8>
 800c8a0:	6921      	ldr	r1, [r4, #16]
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	b151      	cbz	r1, 800c8bc <_sungetc_r+0x60>
 800c8a6:	4299      	cmp	r1, r3
 800c8a8:	d208      	bcs.n	800c8bc <_sungetc_r+0x60>
 800c8aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c8ae:	42a9      	cmp	r1, r5
 800c8b0:	d104      	bne.n	800c8bc <_sungetc_r+0x60>
 800c8b2:	3b01      	subs	r3, #1
 800c8b4:	3201      	adds	r2, #1
 800c8b6:	6023      	str	r3, [r4, #0]
 800c8b8:	6062      	str	r2, [r4, #4]
 800c8ba:	e7d5      	b.n	800c868 <_sungetc_r+0xc>
 800c8bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c8c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c8c6:	2303      	movs	r3, #3
 800c8c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800c8ca:	4623      	mov	r3, r4
 800c8cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e7dc      	b.n	800c890 <_sungetc_r+0x34>

0800c8d6 <__ssrefill_r>:
 800c8d6:	b510      	push	{r4, lr}
 800c8d8:	460c      	mov	r4, r1
 800c8da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c8dc:	b169      	cbz	r1, 800c8fa <__ssrefill_r+0x24>
 800c8de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8e2:	4299      	cmp	r1, r3
 800c8e4:	d001      	beq.n	800c8ea <__ssrefill_r+0x14>
 800c8e6:	f7fb ff11 	bl	800870c <_free_r>
 800c8ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8ec:	6063      	str	r3, [r4, #4]
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	6360      	str	r0, [r4, #52]	; 0x34
 800c8f2:	b113      	cbz	r3, 800c8fa <__ssrefill_r+0x24>
 800c8f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c8f6:	6023      	str	r3, [r4, #0]
 800c8f8:	bd10      	pop	{r4, pc}
 800c8fa:	6923      	ldr	r3, [r4, #16]
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	2300      	movs	r3, #0
 800c900:	6063      	str	r3, [r4, #4]
 800c902:	89a3      	ldrh	r3, [r4, #12]
 800c904:	f043 0320 	orr.w	r3, r3, #32
 800c908:	81a3      	strh	r3, [r4, #12]
 800c90a:	f04f 30ff 	mov.w	r0, #4294967295
 800c90e:	e7f3      	b.n	800c8f8 <__ssrefill_r+0x22>

0800c910 <__ssvfiscanf_r>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c918:	460c      	mov	r4, r1
 800c91a:	2100      	movs	r1, #0
 800c91c:	9144      	str	r1, [sp, #272]	; 0x110
 800c91e:	9145      	str	r1, [sp, #276]	; 0x114
 800c920:	499f      	ldr	r1, [pc, #636]	; (800cba0 <__ssvfiscanf_r+0x290>)
 800c922:	91a0      	str	r1, [sp, #640]	; 0x280
 800c924:	f10d 0804 	add.w	r8, sp, #4
 800c928:	499e      	ldr	r1, [pc, #632]	; (800cba4 <__ssvfiscanf_r+0x294>)
 800c92a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800cba8 <__ssvfiscanf_r+0x298>
 800c92e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c932:	4606      	mov	r6, r0
 800c934:	4692      	mov	sl, r2
 800c936:	91a1      	str	r1, [sp, #644]	; 0x284
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	270a      	movs	r7, #10
 800c93c:	f89a 3000 	ldrb.w	r3, [sl]
 800c940:	2b00      	cmp	r3, #0
 800c942:	f000 812a 	beq.w	800cb9a <__ssvfiscanf_r+0x28a>
 800c946:	4655      	mov	r5, sl
 800c948:	f7ff f976 	bl	800bc38 <__locale_ctype_ptr>
 800c94c:	f815 bb01 	ldrb.w	fp, [r5], #1
 800c950:	4458      	add	r0, fp
 800c952:	7843      	ldrb	r3, [r0, #1]
 800c954:	f013 0308 	ands.w	r3, r3, #8
 800c958:	d01c      	beq.n	800c994 <__ssvfiscanf_r+0x84>
 800c95a:	6863      	ldr	r3, [r4, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	dd12      	ble.n	800c986 <__ssvfiscanf_r+0x76>
 800c960:	f7ff f96a 	bl	800bc38 <__locale_ctype_ptr>
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	781a      	ldrb	r2, [r3, #0]
 800c968:	4410      	add	r0, r2
 800c96a:	7842      	ldrb	r2, [r0, #1]
 800c96c:	0712      	lsls	r2, r2, #28
 800c96e:	d401      	bmi.n	800c974 <__ssvfiscanf_r+0x64>
 800c970:	46aa      	mov	sl, r5
 800c972:	e7e3      	b.n	800c93c <__ssvfiscanf_r+0x2c>
 800c974:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c976:	3201      	adds	r2, #1
 800c978:	9245      	str	r2, [sp, #276]	; 0x114
 800c97a:	6862      	ldr	r2, [r4, #4]
 800c97c:	3301      	adds	r3, #1
 800c97e:	3a01      	subs	r2, #1
 800c980:	6062      	str	r2, [r4, #4]
 800c982:	6023      	str	r3, [r4, #0]
 800c984:	e7e9      	b.n	800c95a <__ssvfiscanf_r+0x4a>
 800c986:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c988:	4621      	mov	r1, r4
 800c98a:	4630      	mov	r0, r6
 800c98c:	4798      	blx	r3
 800c98e:	2800      	cmp	r0, #0
 800c990:	d0e6      	beq.n	800c960 <__ssvfiscanf_r+0x50>
 800c992:	e7ed      	b.n	800c970 <__ssvfiscanf_r+0x60>
 800c994:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800c998:	f040 8082 	bne.w	800caa0 <__ssvfiscanf_r+0x190>
 800c99c:	9343      	str	r3, [sp, #268]	; 0x10c
 800c99e:	9341      	str	r3, [sp, #260]	; 0x104
 800c9a0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800c9a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9a6:	d103      	bne.n	800c9b0 <__ssvfiscanf_r+0xa0>
 800c9a8:	2310      	movs	r3, #16
 800c9aa:	9341      	str	r3, [sp, #260]	; 0x104
 800c9ac:	f10a 0502 	add.w	r5, sl, #2
 800c9b0:	46aa      	mov	sl, r5
 800c9b2:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c9b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c9ba:	2a09      	cmp	r2, #9
 800c9bc:	d922      	bls.n	800ca04 <__ssvfiscanf_r+0xf4>
 800c9be:	2203      	movs	r2, #3
 800c9c0:	4879      	ldr	r0, [pc, #484]	; (800cba8 <__ssvfiscanf_r+0x298>)
 800c9c2:	f7f3 fc15 	bl	80001f0 <memchr>
 800c9c6:	b138      	cbz	r0, 800c9d8 <__ssvfiscanf_r+0xc8>
 800c9c8:	eba0 0309 	sub.w	r3, r0, r9
 800c9cc:	2001      	movs	r0, #1
 800c9ce:	4098      	lsls	r0, r3
 800c9d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c9d2:	4318      	orrs	r0, r3
 800c9d4:	9041      	str	r0, [sp, #260]	; 0x104
 800c9d6:	46aa      	mov	sl, r5
 800c9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c9dc:	2b67      	cmp	r3, #103	; 0x67
 800c9de:	f10a 0501 	add.w	r5, sl, #1
 800c9e2:	d82b      	bhi.n	800ca3c <__ssvfiscanf_r+0x12c>
 800c9e4:	2b65      	cmp	r3, #101	; 0x65
 800c9e6:	f080 809f 	bcs.w	800cb28 <__ssvfiscanf_r+0x218>
 800c9ea:	2b47      	cmp	r3, #71	; 0x47
 800c9ec:	d810      	bhi.n	800ca10 <__ssvfiscanf_r+0x100>
 800c9ee:	2b45      	cmp	r3, #69	; 0x45
 800c9f0:	f080 809a 	bcs.w	800cb28 <__ssvfiscanf_r+0x218>
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d06c      	beq.n	800cad2 <__ssvfiscanf_r+0x1c2>
 800c9f8:	2b25      	cmp	r3, #37	; 0x25
 800c9fa:	d051      	beq.n	800caa0 <__ssvfiscanf_r+0x190>
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca00:	9742      	str	r7, [sp, #264]	; 0x108
 800ca02:	e027      	b.n	800ca54 <__ssvfiscanf_r+0x144>
 800ca04:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ca06:	fb07 1303 	mla	r3, r7, r3, r1
 800ca0a:	3b30      	subs	r3, #48	; 0x30
 800ca0c:	9343      	str	r3, [sp, #268]	; 0x10c
 800ca0e:	e7cf      	b.n	800c9b0 <__ssvfiscanf_r+0xa0>
 800ca10:	2b5b      	cmp	r3, #91	; 0x5b
 800ca12:	d06a      	beq.n	800caea <__ssvfiscanf_r+0x1da>
 800ca14:	d80c      	bhi.n	800ca30 <__ssvfiscanf_r+0x120>
 800ca16:	2b58      	cmp	r3, #88	; 0x58
 800ca18:	d1f0      	bne.n	800c9fc <__ssvfiscanf_r+0xec>
 800ca1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ca1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca20:	9241      	str	r2, [sp, #260]	; 0x104
 800ca22:	2210      	movs	r2, #16
 800ca24:	9242      	str	r2, [sp, #264]	; 0x108
 800ca26:	2b6e      	cmp	r3, #110	; 0x6e
 800ca28:	bf8c      	ite	hi
 800ca2a:	2304      	movhi	r3, #4
 800ca2c:	2303      	movls	r3, #3
 800ca2e:	e010      	b.n	800ca52 <__ssvfiscanf_r+0x142>
 800ca30:	2b63      	cmp	r3, #99	; 0x63
 800ca32:	d065      	beq.n	800cb00 <__ssvfiscanf_r+0x1f0>
 800ca34:	2b64      	cmp	r3, #100	; 0x64
 800ca36:	d1e1      	bne.n	800c9fc <__ssvfiscanf_r+0xec>
 800ca38:	9742      	str	r7, [sp, #264]	; 0x108
 800ca3a:	e7f4      	b.n	800ca26 <__ssvfiscanf_r+0x116>
 800ca3c:	2b70      	cmp	r3, #112	; 0x70
 800ca3e:	d04b      	beq.n	800cad8 <__ssvfiscanf_r+0x1c8>
 800ca40:	d826      	bhi.n	800ca90 <__ssvfiscanf_r+0x180>
 800ca42:	2b6e      	cmp	r3, #110	; 0x6e
 800ca44:	d062      	beq.n	800cb0c <__ssvfiscanf_r+0x1fc>
 800ca46:	d84c      	bhi.n	800cae2 <__ssvfiscanf_r+0x1d2>
 800ca48:	2b69      	cmp	r3, #105	; 0x69
 800ca4a:	d1d7      	bne.n	800c9fc <__ssvfiscanf_r+0xec>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9342      	str	r3, [sp, #264]	; 0x108
 800ca50:	2303      	movs	r3, #3
 800ca52:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca54:	6863      	ldr	r3, [r4, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	dd68      	ble.n	800cb2c <__ssvfiscanf_r+0x21c>
 800ca5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca5c:	0659      	lsls	r1, r3, #25
 800ca5e:	d407      	bmi.n	800ca70 <__ssvfiscanf_r+0x160>
 800ca60:	f7ff f8ea 	bl	800bc38 <__locale_ctype_ptr>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	781a      	ldrb	r2, [r3, #0]
 800ca68:	4410      	add	r0, r2
 800ca6a:	7842      	ldrb	r2, [r0, #1]
 800ca6c:	0712      	lsls	r2, r2, #28
 800ca6e:	d464      	bmi.n	800cb3a <__ssvfiscanf_r+0x22a>
 800ca70:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	dc73      	bgt.n	800cb5e <__ssvfiscanf_r+0x24e>
 800ca76:	466b      	mov	r3, sp
 800ca78:	4622      	mov	r2, r4
 800ca7a:	a941      	add	r1, sp, #260	; 0x104
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	f000 f9d7 	bl	800ce30 <_scanf_chars>
 800ca82:	2801      	cmp	r0, #1
 800ca84:	f000 8089 	beq.w	800cb9a <__ssvfiscanf_r+0x28a>
 800ca88:	2802      	cmp	r0, #2
 800ca8a:	f47f af71 	bne.w	800c970 <__ssvfiscanf_r+0x60>
 800ca8e:	e01d      	b.n	800cacc <__ssvfiscanf_r+0x1bc>
 800ca90:	2b75      	cmp	r3, #117	; 0x75
 800ca92:	d0d1      	beq.n	800ca38 <__ssvfiscanf_r+0x128>
 800ca94:	2b78      	cmp	r3, #120	; 0x78
 800ca96:	d0c0      	beq.n	800ca1a <__ssvfiscanf_r+0x10a>
 800ca98:	2b73      	cmp	r3, #115	; 0x73
 800ca9a:	d1af      	bne.n	800c9fc <__ssvfiscanf_r+0xec>
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e7d8      	b.n	800ca52 <__ssvfiscanf_r+0x142>
 800caa0:	6863      	ldr	r3, [r4, #4]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	dd0c      	ble.n	800cac0 <__ssvfiscanf_r+0x1b0>
 800caa6:	6823      	ldr	r3, [r4, #0]
 800caa8:	781a      	ldrb	r2, [r3, #0]
 800caaa:	455a      	cmp	r2, fp
 800caac:	d175      	bne.n	800cb9a <__ssvfiscanf_r+0x28a>
 800caae:	3301      	adds	r3, #1
 800cab0:	6862      	ldr	r2, [r4, #4]
 800cab2:	6023      	str	r3, [r4, #0]
 800cab4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cab6:	3a01      	subs	r2, #1
 800cab8:	3301      	adds	r3, #1
 800caba:	6062      	str	r2, [r4, #4]
 800cabc:	9345      	str	r3, [sp, #276]	; 0x114
 800cabe:	e757      	b.n	800c970 <__ssvfiscanf_r+0x60>
 800cac0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cac2:	4621      	mov	r1, r4
 800cac4:	4630      	mov	r0, r6
 800cac6:	4798      	blx	r3
 800cac8:	2800      	cmp	r0, #0
 800caca:	d0ec      	beq.n	800caa6 <__ssvfiscanf_r+0x196>
 800cacc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cace:	2800      	cmp	r0, #0
 800cad0:	d159      	bne.n	800cb86 <__ssvfiscanf_r+0x276>
 800cad2:	f04f 30ff 	mov.w	r0, #4294967295
 800cad6:	e05c      	b.n	800cb92 <__ssvfiscanf_r+0x282>
 800cad8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cada:	f042 0220 	orr.w	r2, r2, #32
 800cade:	9241      	str	r2, [sp, #260]	; 0x104
 800cae0:	e79b      	b.n	800ca1a <__ssvfiscanf_r+0x10a>
 800cae2:	2308      	movs	r3, #8
 800cae4:	9342      	str	r3, [sp, #264]	; 0x108
 800cae6:	2304      	movs	r3, #4
 800cae8:	e7b3      	b.n	800ca52 <__ssvfiscanf_r+0x142>
 800caea:	4629      	mov	r1, r5
 800caec:	4640      	mov	r0, r8
 800caee:	f000 fb09 	bl	800d104 <__sccl>
 800caf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800caf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caf8:	9341      	str	r3, [sp, #260]	; 0x104
 800cafa:	4605      	mov	r5, r0
 800cafc:	2301      	movs	r3, #1
 800cafe:	e7a8      	b.n	800ca52 <__ssvfiscanf_r+0x142>
 800cb00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cb02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb06:	9341      	str	r3, [sp, #260]	; 0x104
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e7a2      	b.n	800ca52 <__ssvfiscanf_r+0x142>
 800cb0c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cb0e:	06c3      	lsls	r3, r0, #27
 800cb10:	f53f af2e 	bmi.w	800c970 <__ssvfiscanf_r+0x60>
 800cb14:	9b00      	ldr	r3, [sp, #0]
 800cb16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb18:	1d19      	adds	r1, r3, #4
 800cb1a:	9100      	str	r1, [sp, #0]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	07c0      	lsls	r0, r0, #31
 800cb20:	bf4c      	ite	mi
 800cb22:	801a      	strhmi	r2, [r3, #0]
 800cb24:	601a      	strpl	r2, [r3, #0]
 800cb26:	e723      	b.n	800c970 <__ssvfiscanf_r+0x60>
 800cb28:	2305      	movs	r3, #5
 800cb2a:	e792      	b.n	800ca52 <__ssvfiscanf_r+0x142>
 800cb2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb2e:	4621      	mov	r1, r4
 800cb30:	4630      	mov	r0, r6
 800cb32:	4798      	blx	r3
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d090      	beq.n	800ca5a <__ssvfiscanf_r+0x14a>
 800cb38:	e7c8      	b.n	800cacc <__ssvfiscanf_r+0x1bc>
 800cb3a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb3c:	3201      	adds	r2, #1
 800cb3e:	9245      	str	r2, [sp, #276]	; 0x114
 800cb40:	6862      	ldr	r2, [r4, #4]
 800cb42:	3a01      	subs	r2, #1
 800cb44:	2a00      	cmp	r2, #0
 800cb46:	6062      	str	r2, [r4, #4]
 800cb48:	dd02      	ble.n	800cb50 <__ssvfiscanf_r+0x240>
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	e787      	b.n	800ca60 <__ssvfiscanf_r+0x150>
 800cb50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb52:	4621      	mov	r1, r4
 800cb54:	4630      	mov	r0, r6
 800cb56:	4798      	blx	r3
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d081      	beq.n	800ca60 <__ssvfiscanf_r+0x150>
 800cb5c:	e7b6      	b.n	800cacc <__ssvfiscanf_r+0x1bc>
 800cb5e:	2b04      	cmp	r3, #4
 800cb60:	dc06      	bgt.n	800cb70 <__ssvfiscanf_r+0x260>
 800cb62:	466b      	mov	r3, sp
 800cb64:	4622      	mov	r2, r4
 800cb66:	a941      	add	r1, sp, #260	; 0x104
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f000 f9c5 	bl	800cef8 <_scanf_i>
 800cb6e:	e788      	b.n	800ca82 <__ssvfiscanf_r+0x172>
 800cb70:	4b0e      	ldr	r3, [pc, #56]	; (800cbac <__ssvfiscanf_r+0x29c>)
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f43f aefc 	beq.w	800c970 <__ssvfiscanf_r+0x60>
 800cb78:	466b      	mov	r3, sp
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	a941      	add	r1, sp, #260	; 0x104
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f7fc fac8 	bl	8009114 <_scanf_float>
 800cb84:	e77d      	b.n	800ca82 <__ssvfiscanf_r+0x172>
 800cb86:	89a3      	ldrh	r3, [r4, #12]
 800cb88:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cb8c:	bf18      	it	ne
 800cb8e:	f04f 30ff 	movne.w	r0, #4294967295
 800cb92:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800cb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb9a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cb9c:	e7f9      	b.n	800cb92 <__ssvfiscanf_r+0x282>
 800cb9e:	bf00      	nop
 800cba0:	0800c85d 	.word	0x0800c85d
 800cba4:	0800c8d7 	.word	0x0800c8d7
 800cba8:	0801028a 	.word	0x0801028a
 800cbac:	08009115 	.word	0x08009115

0800cbb0 <__sfputc_r>:
 800cbb0:	6893      	ldr	r3, [r2, #8]
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	b410      	push	{r4}
 800cbb8:	6093      	str	r3, [r2, #8]
 800cbba:	da08      	bge.n	800cbce <__sfputc_r+0x1e>
 800cbbc:	6994      	ldr	r4, [r2, #24]
 800cbbe:	42a3      	cmp	r3, r4
 800cbc0:	db01      	blt.n	800cbc6 <__sfputc_r+0x16>
 800cbc2:	290a      	cmp	r1, #10
 800cbc4:	d103      	bne.n	800cbce <__sfputc_r+0x1e>
 800cbc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbca:	f7fd bc6b 	b.w	800a4a4 <__swbuf_r>
 800cbce:	6813      	ldr	r3, [r2, #0]
 800cbd0:	1c58      	adds	r0, r3, #1
 800cbd2:	6010      	str	r0, [r2, #0]
 800cbd4:	7019      	strb	r1, [r3, #0]
 800cbd6:	4608      	mov	r0, r1
 800cbd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbdc:	4770      	bx	lr

0800cbde <__sfputs_r>:
 800cbde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe0:	4606      	mov	r6, r0
 800cbe2:	460f      	mov	r7, r1
 800cbe4:	4614      	mov	r4, r2
 800cbe6:	18d5      	adds	r5, r2, r3
 800cbe8:	42ac      	cmp	r4, r5
 800cbea:	d101      	bne.n	800cbf0 <__sfputs_r+0x12>
 800cbec:	2000      	movs	r0, #0
 800cbee:	e007      	b.n	800cc00 <__sfputs_r+0x22>
 800cbf0:	463a      	mov	r2, r7
 800cbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f7ff ffda 	bl	800cbb0 <__sfputc_r>
 800cbfc:	1c43      	adds	r3, r0, #1
 800cbfe:	d1f3      	bne.n	800cbe8 <__sfputs_r+0xa>
 800cc00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc04 <_vfiprintf_r>:
 800cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	460c      	mov	r4, r1
 800cc0a:	b09d      	sub	sp, #116	; 0x74
 800cc0c:	4617      	mov	r7, r2
 800cc0e:	461d      	mov	r5, r3
 800cc10:	4606      	mov	r6, r0
 800cc12:	b118      	cbz	r0, 800cc1c <_vfiprintf_r+0x18>
 800cc14:	6983      	ldr	r3, [r0, #24]
 800cc16:	b90b      	cbnz	r3, 800cc1c <_vfiprintf_r+0x18>
 800cc18:	f7fe fc5a 	bl	800b4d0 <__sinit>
 800cc1c:	4b7c      	ldr	r3, [pc, #496]	; (800ce10 <_vfiprintf_r+0x20c>)
 800cc1e:	429c      	cmp	r4, r3
 800cc20:	d158      	bne.n	800ccd4 <_vfiprintf_r+0xd0>
 800cc22:	6874      	ldr	r4, [r6, #4]
 800cc24:	89a3      	ldrh	r3, [r4, #12]
 800cc26:	0718      	lsls	r0, r3, #28
 800cc28:	d55e      	bpl.n	800cce8 <_vfiprintf_r+0xe4>
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d05b      	beq.n	800cce8 <_vfiprintf_r+0xe4>
 800cc30:	2300      	movs	r3, #0
 800cc32:	9309      	str	r3, [sp, #36]	; 0x24
 800cc34:	2320      	movs	r3, #32
 800cc36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc3a:	2330      	movs	r3, #48	; 0x30
 800cc3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc40:	9503      	str	r5, [sp, #12]
 800cc42:	f04f 0b01 	mov.w	fp, #1
 800cc46:	46b8      	mov	r8, r7
 800cc48:	4645      	mov	r5, r8
 800cc4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cc4e:	b10b      	cbz	r3, 800cc54 <_vfiprintf_r+0x50>
 800cc50:	2b25      	cmp	r3, #37	; 0x25
 800cc52:	d154      	bne.n	800ccfe <_vfiprintf_r+0xfa>
 800cc54:	ebb8 0a07 	subs.w	sl, r8, r7
 800cc58:	d00b      	beq.n	800cc72 <_vfiprintf_r+0x6e>
 800cc5a:	4653      	mov	r3, sl
 800cc5c:	463a      	mov	r2, r7
 800cc5e:	4621      	mov	r1, r4
 800cc60:	4630      	mov	r0, r6
 800cc62:	f7ff ffbc 	bl	800cbde <__sfputs_r>
 800cc66:	3001      	adds	r0, #1
 800cc68:	f000 80c2 	beq.w	800cdf0 <_vfiprintf_r+0x1ec>
 800cc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc6e:	4453      	add	r3, sl
 800cc70:	9309      	str	r3, [sp, #36]	; 0x24
 800cc72:	f898 3000 	ldrb.w	r3, [r8]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f000 80ba 	beq.w	800cdf0 <_vfiprintf_r+0x1ec>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc86:	9304      	str	r3, [sp, #16]
 800cc88:	9307      	str	r3, [sp, #28]
 800cc8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc8e:	931a      	str	r3, [sp, #104]	; 0x68
 800cc90:	46a8      	mov	r8, r5
 800cc92:	2205      	movs	r2, #5
 800cc94:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cc98:	485e      	ldr	r0, [pc, #376]	; (800ce14 <_vfiprintf_r+0x210>)
 800cc9a:	f7f3 faa9 	bl	80001f0 <memchr>
 800cc9e:	9b04      	ldr	r3, [sp, #16]
 800cca0:	bb78      	cbnz	r0, 800cd02 <_vfiprintf_r+0xfe>
 800cca2:	06d9      	lsls	r1, r3, #27
 800cca4:	bf44      	itt	mi
 800cca6:	2220      	movmi	r2, #32
 800cca8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ccac:	071a      	lsls	r2, r3, #28
 800ccae:	bf44      	itt	mi
 800ccb0:	222b      	movmi	r2, #43	; 0x2b
 800ccb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ccb6:	782a      	ldrb	r2, [r5, #0]
 800ccb8:	2a2a      	cmp	r2, #42	; 0x2a
 800ccba:	d02a      	beq.n	800cd12 <_vfiprintf_r+0x10e>
 800ccbc:	9a07      	ldr	r2, [sp, #28]
 800ccbe:	46a8      	mov	r8, r5
 800ccc0:	2000      	movs	r0, #0
 800ccc2:	250a      	movs	r5, #10
 800ccc4:	4641      	mov	r1, r8
 800ccc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccca:	3b30      	subs	r3, #48	; 0x30
 800cccc:	2b09      	cmp	r3, #9
 800ccce:	d969      	bls.n	800cda4 <_vfiprintf_r+0x1a0>
 800ccd0:	b360      	cbz	r0, 800cd2c <_vfiprintf_r+0x128>
 800ccd2:	e024      	b.n	800cd1e <_vfiprintf_r+0x11a>
 800ccd4:	4b50      	ldr	r3, [pc, #320]	; (800ce18 <_vfiprintf_r+0x214>)
 800ccd6:	429c      	cmp	r4, r3
 800ccd8:	d101      	bne.n	800ccde <_vfiprintf_r+0xda>
 800ccda:	68b4      	ldr	r4, [r6, #8]
 800ccdc:	e7a2      	b.n	800cc24 <_vfiprintf_r+0x20>
 800ccde:	4b4f      	ldr	r3, [pc, #316]	; (800ce1c <_vfiprintf_r+0x218>)
 800cce0:	429c      	cmp	r4, r3
 800cce2:	bf08      	it	eq
 800cce4:	68f4      	ldreq	r4, [r6, #12]
 800cce6:	e79d      	b.n	800cc24 <_vfiprintf_r+0x20>
 800cce8:	4621      	mov	r1, r4
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7fd fc3e 	bl	800a56c <__swsetup_r>
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d09d      	beq.n	800cc30 <_vfiprintf_r+0x2c>
 800ccf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf8:	b01d      	add	sp, #116	; 0x74
 800ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfe:	46a8      	mov	r8, r5
 800cd00:	e7a2      	b.n	800cc48 <_vfiprintf_r+0x44>
 800cd02:	4a44      	ldr	r2, [pc, #272]	; (800ce14 <_vfiprintf_r+0x210>)
 800cd04:	1a80      	subs	r0, r0, r2
 800cd06:	fa0b f000 	lsl.w	r0, fp, r0
 800cd0a:	4318      	orrs	r0, r3
 800cd0c:	9004      	str	r0, [sp, #16]
 800cd0e:	4645      	mov	r5, r8
 800cd10:	e7be      	b.n	800cc90 <_vfiprintf_r+0x8c>
 800cd12:	9a03      	ldr	r2, [sp, #12]
 800cd14:	1d11      	adds	r1, r2, #4
 800cd16:	6812      	ldr	r2, [r2, #0]
 800cd18:	9103      	str	r1, [sp, #12]
 800cd1a:	2a00      	cmp	r2, #0
 800cd1c:	db01      	blt.n	800cd22 <_vfiprintf_r+0x11e>
 800cd1e:	9207      	str	r2, [sp, #28]
 800cd20:	e004      	b.n	800cd2c <_vfiprintf_r+0x128>
 800cd22:	4252      	negs	r2, r2
 800cd24:	f043 0302 	orr.w	r3, r3, #2
 800cd28:	9207      	str	r2, [sp, #28]
 800cd2a:	9304      	str	r3, [sp, #16]
 800cd2c:	f898 3000 	ldrb.w	r3, [r8]
 800cd30:	2b2e      	cmp	r3, #46	; 0x2e
 800cd32:	d10e      	bne.n	800cd52 <_vfiprintf_r+0x14e>
 800cd34:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cd38:	2b2a      	cmp	r3, #42	; 0x2a
 800cd3a:	d138      	bne.n	800cdae <_vfiprintf_r+0x1aa>
 800cd3c:	9b03      	ldr	r3, [sp, #12]
 800cd3e:	1d1a      	adds	r2, r3, #4
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	9203      	str	r2, [sp, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	bfb8      	it	lt
 800cd48:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd4c:	f108 0802 	add.w	r8, r8, #2
 800cd50:	9305      	str	r3, [sp, #20]
 800cd52:	4d33      	ldr	r5, [pc, #204]	; (800ce20 <_vfiprintf_r+0x21c>)
 800cd54:	f898 1000 	ldrb.w	r1, [r8]
 800cd58:	2203      	movs	r2, #3
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	f7f3 fa48 	bl	80001f0 <memchr>
 800cd60:	b140      	cbz	r0, 800cd74 <_vfiprintf_r+0x170>
 800cd62:	2340      	movs	r3, #64	; 0x40
 800cd64:	1b40      	subs	r0, r0, r5
 800cd66:	fa03 f000 	lsl.w	r0, r3, r0
 800cd6a:	9b04      	ldr	r3, [sp, #16]
 800cd6c:	4303      	orrs	r3, r0
 800cd6e:	f108 0801 	add.w	r8, r8, #1
 800cd72:	9304      	str	r3, [sp, #16]
 800cd74:	f898 1000 	ldrb.w	r1, [r8]
 800cd78:	482a      	ldr	r0, [pc, #168]	; (800ce24 <_vfiprintf_r+0x220>)
 800cd7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd7e:	2206      	movs	r2, #6
 800cd80:	f108 0701 	add.w	r7, r8, #1
 800cd84:	f7f3 fa34 	bl	80001f0 <memchr>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d037      	beq.n	800cdfc <_vfiprintf_r+0x1f8>
 800cd8c:	4b26      	ldr	r3, [pc, #152]	; (800ce28 <_vfiprintf_r+0x224>)
 800cd8e:	bb1b      	cbnz	r3, 800cdd8 <_vfiprintf_r+0x1d4>
 800cd90:	9b03      	ldr	r3, [sp, #12]
 800cd92:	3307      	adds	r3, #7
 800cd94:	f023 0307 	bic.w	r3, r3, #7
 800cd98:	3308      	adds	r3, #8
 800cd9a:	9303      	str	r3, [sp, #12]
 800cd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9e:	444b      	add	r3, r9
 800cda0:	9309      	str	r3, [sp, #36]	; 0x24
 800cda2:	e750      	b.n	800cc46 <_vfiprintf_r+0x42>
 800cda4:	fb05 3202 	mla	r2, r5, r2, r3
 800cda8:	2001      	movs	r0, #1
 800cdaa:	4688      	mov	r8, r1
 800cdac:	e78a      	b.n	800ccc4 <_vfiprintf_r+0xc0>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	f108 0801 	add.w	r8, r8, #1
 800cdb4:	9305      	str	r3, [sp, #20]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	250a      	movs	r5, #10
 800cdba:	4640      	mov	r0, r8
 800cdbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdc0:	3a30      	subs	r2, #48	; 0x30
 800cdc2:	2a09      	cmp	r2, #9
 800cdc4:	d903      	bls.n	800cdce <_vfiprintf_r+0x1ca>
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d0c3      	beq.n	800cd52 <_vfiprintf_r+0x14e>
 800cdca:	9105      	str	r1, [sp, #20]
 800cdcc:	e7c1      	b.n	800cd52 <_vfiprintf_r+0x14e>
 800cdce:	fb05 2101 	mla	r1, r5, r1, r2
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	e7f0      	b.n	800cdba <_vfiprintf_r+0x1b6>
 800cdd8:	ab03      	add	r3, sp, #12
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	4622      	mov	r2, r4
 800cdde:	4b13      	ldr	r3, [pc, #76]	; (800ce2c <_vfiprintf_r+0x228>)
 800cde0:	a904      	add	r1, sp, #16
 800cde2:	4630      	mov	r0, r6
 800cde4:	f7fb fdce 	bl	8008984 <_printf_float>
 800cde8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cdec:	4681      	mov	r9, r0
 800cdee:	d1d5      	bne.n	800cd9c <_vfiprintf_r+0x198>
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	065b      	lsls	r3, r3, #25
 800cdf4:	f53f af7e 	bmi.w	800ccf4 <_vfiprintf_r+0xf0>
 800cdf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdfa:	e77d      	b.n	800ccf8 <_vfiprintf_r+0xf4>
 800cdfc:	ab03      	add	r3, sp, #12
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	4622      	mov	r2, r4
 800ce02:	4b0a      	ldr	r3, [pc, #40]	; (800ce2c <_vfiprintf_r+0x228>)
 800ce04:	a904      	add	r1, sp, #16
 800ce06:	4630      	mov	r0, r6
 800ce08:	f7fc f872 	bl	8008ef0 <_printf_i>
 800ce0c:	e7ec      	b.n	800cde8 <_vfiprintf_r+0x1e4>
 800ce0e:	bf00      	nop
 800ce10:	08010138 	.word	0x08010138
 800ce14:	08010284 	.word	0x08010284
 800ce18:	08010158 	.word	0x08010158
 800ce1c:	08010118 	.word	0x08010118
 800ce20:	0801028a 	.word	0x0801028a
 800ce24:	0801028e 	.word	0x0801028e
 800ce28:	08008985 	.word	0x08008985
 800ce2c:	0800cbdf 	.word	0x0800cbdf

0800ce30 <_scanf_chars>:
 800ce30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce34:	4615      	mov	r5, r2
 800ce36:	688a      	ldr	r2, [r1, #8]
 800ce38:	4680      	mov	r8, r0
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	b932      	cbnz	r2, 800ce4c <_scanf_chars+0x1c>
 800ce3e:	698a      	ldr	r2, [r1, #24]
 800ce40:	2a00      	cmp	r2, #0
 800ce42:	bf14      	ite	ne
 800ce44:	f04f 32ff 	movne.w	r2, #4294967295
 800ce48:	2201      	moveq	r2, #1
 800ce4a:	608a      	str	r2, [r1, #8]
 800ce4c:	6822      	ldr	r2, [r4, #0]
 800ce4e:	06d1      	lsls	r1, r2, #27
 800ce50:	bf5f      	itttt	pl
 800ce52:	681a      	ldrpl	r2, [r3, #0]
 800ce54:	1d11      	addpl	r1, r2, #4
 800ce56:	6019      	strpl	r1, [r3, #0]
 800ce58:	6817      	ldrpl	r7, [r2, #0]
 800ce5a:	2600      	movs	r6, #0
 800ce5c:	69a3      	ldr	r3, [r4, #24]
 800ce5e:	b1db      	cbz	r3, 800ce98 <_scanf_chars+0x68>
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d107      	bne.n	800ce74 <_scanf_chars+0x44>
 800ce64:	682b      	ldr	r3, [r5, #0]
 800ce66:	6962      	ldr	r2, [r4, #20]
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	5cd3      	ldrb	r3, [r2, r3]
 800ce6c:	b9a3      	cbnz	r3, 800ce98 <_scanf_chars+0x68>
 800ce6e:	2e00      	cmp	r6, #0
 800ce70:	d132      	bne.n	800ced8 <_scanf_chars+0xa8>
 800ce72:	e006      	b.n	800ce82 <_scanf_chars+0x52>
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d007      	beq.n	800ce88 <_scanf_chars+0x58>
 800ce78:	2e00      	cmp	r6, #0
 800ce7a:	d12d      	bne.n	800ced8 <_scanf_chars+0xa8>
 800ce7c:	69a3      	ldr	r3, [r4, #24]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d12a      	bne.n	800ced8 <_scanf_chars+0xa8>
 800ce82:	2001      	movs	r0, #1
 800ce84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce88:	f7fe fed6 	bl	800bc38 <__locale_ctype_ptr>
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	4418      	add	r0, r3
 800ce92:	7843      	ldrb	r3, [r0, #1]
 800ce94:	071b      	lsls	r3, r3, #28
 800ce96:	d4ef      	bmi.n	800ce78 <_scanf_chars+0x48>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	06da      	lsls	r2, r3, #27
 800ce9c:	bf5e      	ittt	pl
 800ce9e:	682b      	ldrpl	r3, [r5, #0]
 800cea0:	781b      	ldrbpl	r3, [r3, #0]
 800cea2:	703b      	strbpl	r3, [r7, #0]
 800cea4:	682a      	ldr	r2, [r5, #0]
 800cea6:	686b      	ldr	r3, [r5, #4]
 800cea8:	f102 0201 	add.w	r2, r2, #1
 800ceac:	602a      	str	r2, [r5, #0]
 800ceae:	68a2      	ldr	r2, [r4, #8]
 800ceb0:	f103 33ff 	add.w	r3, r3, #4294967295
 800ceb4:	f102 32ff 	add.w	r2, r2, #4294967295
 800ceb8:	606b      	str	r3, [r5, #4]
 800ceba:	f106 0601 	add.w	r6, r6, #1
 800cebe:	bf58      	it	pl
 800cec0:	3701      	addpl	r7, #1
 800cec2:	60a2      	str	r2, [r4, #8]
 800cec4:	b142      	cbz	r2, 800ced8 <_scanf_chars+0xa8>
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	dcc8      	bgt.n	800ce5c <_scanf_chars+0x2c>
 800ceca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cece:	4629      	mov	r1, r5
 800ced0:	4640      	mov	r0, r8
 800ced2:	4798      	blx	r3
 800ced4:	2800      	cmp	r0, #0
 800ced6:	d0c1      	beq.n	800ce5c <_scanf_chars+0x2c>
 800ced8:	6823      	ldr	r3, [r4, #0]
 800ceda:	f013 0310 	ands.w	r3, r3, #16
 800cede:	d105      	bne.n	800ceec <_scanf_chars+0xbc>
 800cee0:	68e2      	ldr	r2, [r4, #12]
 800cee2:	3201      	adds	r2, #1
 800cee4:	60e2      	str	r2, [r4, #12]
 800cee6:	69a2      	ldr	r2, [r4, #24]
 800cee8:	b102      	cbz	r2, 800ceec <_scanf_chars+0xbc>
 800ceea:	703b      	strb	r3, [r7, #0]
 800ceec:	6923      	ldr	r3, [r4, #16]
 800ceee:	441e      	add	r6, r3
 800cef0:	6126      	str	r6, [r4, #16]
 800cef2:	2000      	movs	r0, #0
 800cef4:	e7c6      	b.n	800ce84 <_scanf_chars+0x54>
	...

0800cef8 <_scanf_i>:
 800cef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	469a      	mov	sl, r3
 800cefe:	4b74      	ldr	r3, [pc, #464]	; (800d0d0 <_scanf_i+0x1d8>)
 800cf00:	460c      	mov	r4, r1
 800cf02:	4683      	mov	fp, r0
 800cf04:	4616      	mov	r6, r2
 800cf06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	ab03      	add	r3, sp, #12
 800cf0e:	68a7      	ldr	r7, [r4, #8]
 800cf10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf14:	4b6f      	ldr	r3, [pc, #444]	; (800d0d4 <_scanf_i+0x1dc>)
 800cf16:	69a1      	ldr	r1, [r4, #24]
 800cf18:	4a6f      	ldr	r2, [pc, #444]	; (800d0d8 <_scanf_i+0x1e0>)
 800cf1a:	2903      	cmp	r1, #3
 800cf1c:	bf08      	it	eq
 800cf1e:	461a      	moveq	r2, r3
 800cf20:	1e7b      	subs	r3, r7, #1
 800cf22:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800cf26:	bf84      	itt	hi
 800cf28:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf2c:	60a3      	strhi	r3, [r4, #8]
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	9200      	str	r2, [sp, #0]
 800cf32:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cf36:	bf88      	it	hi
 800cf38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf3c:	f104 091c 	add.w	r9, r4, #28
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	bf8c      	ite	hi
 800cf44:	197f      	addhi	r7, r7, r5
 800cf46:	2700      	movls	r7, #0
 800cf48:	464b      	mov	r3, r9
 800cf4a:	f04f 0800 	mov.w	r8, #0
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	6831      	ldr	r1, [r6, #0]
 800cf52:	ab03      	add	r3, sp, #12
 800cf54:	2202      	movs	r2, #2
 800cf56:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cf5a:	7809      	ldrb	r1, [r1, #0]
 800cf5c:	f7f3 f948 	bl	80001f0 <memchr>
 800cf60:	9b01      	ldr	r3, [sp, #4]
 800cf62:	b330      	cbz	r0, 800cfb2 <_scanf_i+0xba>
 800cf64:	f1b8 0f01 	cmp.w	r8, #1
 800cf68:	d15a      	bne.n	800d020 <_scanf_i+0x128>
 800cf6a:	6862      	ldr	r2, [r4, #4]
 800cf6c:	b92a      	cbnz	r2, 800cf7a <_scanf_i+0x82>
 800cf6e:	6822      	ldr	r2, [r4, #0]
 800cf70:	2108      	movs	r1, #8
 800cf72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf76:	6061      	str	r1, [r4, #4]
 800cf78:	6022      	str	r2, [r4, #0]
 800cf7a:	6822      	ldr	r2, [r4, #0]
 800cf7c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cf80:	6022      	str	r2, [r4, #0]
 800cf82:	68a2      	ldr	r2, [r4, #8]
 800cf84:	1e51      	subs	r1, r2, #1
 800cf86:	60a1      	str	r1, [r4, #8]
 800cf88:	b19a      	cbz	r2, 800cfb2 <_scanf_i+0xba>
 800cf8a:	6832      	ldr	r2, [r6, #0]
 800cf8c:	1c51      	adds	r1, r2, #1
 800cf8e:	6031      	str	r1, [r6, #0]
 800cf90:	7812      	ldrb	r2, [r2, #0]
 800cf92:	701a      	strb	r2, [r3, #0]
 800cf94:	1c5d      	adds	r5, r3, #1
 800cf96:	6873      	ldr	r3, [r6, #4]
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	6073      	str	r3, [r6, #4]
 800cf9e:	dc07      	bgt.n	800cfb0 <_scanf_i+0xb8>
 800cfa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	4658      	mov	r0, fp
 800cfa8:	4798      	blx	r3
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	f040 8086 	bne.w	800d0bc <_scanf_i+0x1c4>
 800cfb0:	462b      	mov	r3, r5
 800cfb2:	f108 0801 	add.w	r8, r8, #1
 800cfb6:	f1b8 0f03 	cmp.w	r8, #3
 800cfba:	d1c8      	bne.n	800cf4e <_scanf_i+0x56>
 800cfbc:	6862      	ldr	r2, [r4, #4]
 800cfbe:	b90a      	cbnz	r2, 800cfc4 <_scanf_i+0xcc>
 800cfc0:	220a      	movs	r2, #10
 800cfc2:	6062      	str	r2, [r4, #4]
 800cfc4:	6862      	ldr	r2, [r4, #4]
 800cfc6:	4945      	ldr	r1, [pc, #276]	; (800d0dc <_scanf_i+0x1e4>)
 800cfc8:	6960      	ldr	r0, [r4, #20]
 800cfca:	9301      	str	r3, [sp, #4]
 800cfcc:	1a89      	subs	r1, r1, r2
 800cfce:	f000 f899 	bl	800d104 <__sccl>
 800cfd2:	9b01      	ldr	r3, [sp, #4]
 800cfd4:	f04f 0800 	mov.w	r8, #0
 800cfd8:	461d      	mov	r5, r3
 800cfda:	68a3      	ldr	r3, [r4, #8]
 800cfdc:	6822      	ldr	r2, [r4, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d03a      	beq.n	800d058 <_scanf_i+0x160>
 800cfe2:	6831      	ldr	r1, [r6, #0]
 800cfe4:	6960      	ldr	r0, [r4, #20]
 800cfe6:	f891 c000 	ldrb.w	ip, [r1]
 800cfea:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d032      	beq.n	800d058 <_scanf_i+0x160>
 800cff2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cff6:	d121      	bne.n	800d03c <_scanf_i+0x144>
 800cff8:	0510      	lsls	r0, r2, #20
 800cffa:	d51f      	bpl.n	800d03c <_scanf_i+0x144>
 800cffc:	f108 0801 	add.w	r8, r8, #1
 800d000:	b117      	cbz	r7, 800d008 <_scanf_i+0x110>
 800d002:	3301      	adds	r3, #1
 800d004:	3f01      	subs	r7, #1
 800d006:	60a3      	str	r3, [r4, #8]
 800d008:	6873      	ldr	r3, [r6, #4]
 800d00a:	3b01      	subs	r3, #1
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	6073      	str	r3, [r6, #4]
 800d010:	dd1b      	ble.n	800d04a <_scanf_i+0x152>
 800d012:	6833      	ldr	r3, [r6, #0]
 800d014:	3301      	adds	r3, #1
 800d016:	6033      	str	r3, [r6, #0]
 800d018:	68a3      	ldr	r3, [r4, #8]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	60a3      	str	r3, [r4, #8]
 800d01e:	e7dc      	b.n	800cfda <_scanf_i+0xe2>
 800d020:	f1b8 0f02 	cmp.w	r8, #2
 800d024:	d1ad      	bne.n	800cf82 <_scanf_i+0x8a>
 800d026:	6822      	ldr	r2, [r4, #0]
 800d028:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d02c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d030:	d1bf      	bne.n	800cfb2 <_scanf_i+0xba>
 800d032:	2110      	movs	r1, #16
 800d034:	6061      	str	r1, [r4, #4]
 800d036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d03a:	e7a1      	b.n	800cf80 <_scanf_i+0x88>
 800d03c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d040:	6022      	str	r2, [r4, #0]
 800d042:	780b      	ldrb	r3, [r1, #0]
 800d044:	702b      	strb	r3, [r5, #0]
 800d046:	3501      	adds	r5, #1
 800d048:	e7de      	b.n	800d008 <_scanf_i+0x110>
 800d04a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d04e:	4631      	mov	r1, r6
 800d050:	4658      	mov	r0, fp
 800d052:	4798      	blx	r3
 800d054:	2800      	cmp	r0, #0
 800d056:	d0df      	beq.n	800d018 <_scanf_i+0x120>
 800d058:	6823      	ldr	r3, [r4, #0]
 800d05a:	05d9      	lsls	r1, r3, #23
 800d05c:	d50c      	bpl.n	800d078 <_scanf_i+0x180>
 800d05e:	454d      	cmp	r5, r9
 800d060:	d908      	bls.n	800d074 <_scanf_i+0x17c>
 800d062:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d066:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d06a:	4632      	mov	r2, r6
 800d06c:	4658      	mov	r0, fp
 800d06e:	4798      	blx	r3
 800d070:	1e6f      	subs	r7, r5, #1
 800d072:	463d      	mov	r5, r7
 800d074:	454d      	cmp	r5, r9
 800d076:	d029      	beq.n	800d0cc <_scanf_i+0x1d4>
 800d078:	6822      	ldr	r2, [r4, #0]
 800d07a:	f012 0210 	ands.w	r2, r2, #16
 800d07e:	d113      	bne.n	800d0a8 <_scanf_i+0x1b0>
 800d080:	702a      	strb	r2, [r5, #0]
 800d082:	6863      	ldr	r3, [r4, #4]
 800d084:	9e00      	ldr	r6, [sp, #0]
 800d086:	4649      	mov	r1, r9
 800d088:	4658      	mov	r0, fp
 800d08a:	47b0      	blx	r6
 800d08c:	f8da 3000 	ldr.w	r3, [sl]
 800d090:	6821      	ldr	r1, [r4, #0]
 800d092:	1d1a      	adds	r2, r3, #4
 800d094:	f8ca 2000 	str.w	r2, [sl]
 800d098:	f011 0f20 	tst.w	r1, #32
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	d010      	beq.n	800d0c2 <_scanf_i+0x1ca>
 800d0a0:	6018      	str	r0, [r3, #0]
 800d0a2:	68e3      	ldr	r3, [r4, #12]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	60e3      	str	r3, [r4, #12]
 800d0a8:	eba5 0509 	sub.w	r5, r5, r9
 800d0ac:	44a8      	add	r8, r5
 800d0ae:	6925      	ldr	r5, [r4, #16]
 800d0b0:	4445      	add	r5, r8
 800d0b2:	6125      	str	r5, [r4, #16]
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	b007      	add	sp, #28
 800d0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0bc:	f04f 0800 	mov.w	r8, #0
 800d0c0:	e7ca      	b.n	800d058 <_scanf_i+0x160>
 800d0c2:	07ca      	lsls	r2, r1, #31
 800d0c4:	bf4c      	ite	mi
 800d0c6:	8018      	strhmi	r0, [r3, #0]
 800d0c8:	6018      	strpl	r0, [r3, #0]
 800d0ca:	e7ea      	b.n	800d0a2 <_scanf_i+0x1aa>
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	e7f2      	b.n	800d0b6 <_scanf_i+0x1be>
 800d0d0:	08010060 	.word	0x08010060
 800d0d4:	0800a481 	.word	0x0800a481
 800d0d8:	0800d281 	.word	0x0800d281
 800d0dc:	080102a5 	.word	0x080102a5

0800d0e0 <_read_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4c07      	ldr	r4, [pc, #28]	; (800d100 <_read_r+0x20>)
 800d0e4:	4605      	mov	r5, r0
 800d0e6:	4608      	mov	r0, r1
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	6022      	str	r2, [r4, #0]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	f7f4 fc52 	bl	8001998 <_read>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	d102      	bne.n	800d0fe <_read_r+0x1e>
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	b103      	cbz	r3, 800d0fe <_read_r+0x1e>
 800d0fc:	602b      	str	r3, [r5, #0]
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	20000f6c 	.word	0x20000f6c

0800d104 <__sccl>:
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	780b      	ldrb	r3, [r1, #0]
 800d108:	2b5e      	cmp	r3, #94	; 0x5e
 800d10a:	bf13      	iteet	ne
 800d10c:	1c4a      	addne	r2, r1, #1
 800d10e:	1c8a      	addeq	r2, r1, #2
 800d110:	784b      	ldrbeq	r3, [r1, #1]
 800d112:	2100      	movne	r1, #0
 800d114:	bf08      	it	eq
 800d116:	2101      	moveq	r1, #1
 800d118:	1e44      	subs	r4, r0, #1
 800d11a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800d11e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800d122:	42ac      	cmp	r4, r5
 800d124:	d1fb      	bne.n	800d11e <__sccl+0x1a>
 800d126:	b913      	cbnz	r3, 800d12e <__sccl+0x2a>
 800d128:	3a01      	subs	r2, #1
 800d12a:	4610      	mov	r0, r2
 800d12c:	bd70      	pop	{r4, r5, r6, pc}
 800d12e:	f081 0401 	eor.w	r4, r1, #1
 800d132:	54c4      	strb	r4, [r0, r3]
 800d134:	1c51      	adds	r1, r2, #1
 800d136:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800d13a:	2d2d      	cmp	r5, #45	; 0x2d
 800d13c:	f101 36ff 	add.w	r6, r1, #4294967295
 800d140:	460a      	mov	r2, r1
 800d142:	d006      	beq.n	800d152 <__sccl+0x4e>
 800d144:	2d5d      	cmp	r5, #93	; 0x5d
 800d146:	d0f0      	beq.n	800d12a <__sccl+0x26>
 800d148:	b90d      	cbnz	r5, 800d14e <__sccl+0x4a>
 800d14a:	4632      	mov	r2, r6
 800d14c:	e7ed      	b.n	800d12a <__sccl+0x26>
 800d14e:	462b      	mov	r3, r5
 800d150:	e7ef      	b.n	800d132 <__sccl+0x2e>
 800d152:	780e      	ldrb	r6, [r1, #0]
 800d154:	2e5d      	cmp	r6, #93	; 0x5d
 800d156:	d0fa      	beq.n	800d14e <__sccl+0x4a>
 800d158:	42b3      	cmp	r3, r6
 800d15a:	dcf8      	bgt.n	800d14e <__sccl+0x4a>
 800d15c:	3301      	adds	r3, #1
 800d15e:	429e      	cmp	r6, r3
 800d160:	54c4      	strb	r4, [r0, r3]
 800d162:	dcfb      	bgt.n	800d15c <__sccl+0x58>
 800d164:	3102      	adds	r1, #2
 800d166:	e7e6      	b.n	800d136 <__sccl+0x32>

0800d168 <strncmp>:
 800d168:	b510      	push	{r4, lr}
 800d16a:	b16a      	cbz	r2, 800d188 <strncmp+0x20>
 800d16c:	3901      	subs	r1, #1
 800d16e:	1884      	adds	r4, r0, r2
 800d170:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d174:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d178:	4293      	cmp	r3, r2
 800d17a:	d103      	bne.n	800d184 <strncmp+0x1c>
 800d17c:	42a0      	cmp	r0, r4
 800d17e:	d001      	beq.n	800d184 <strncmp+0x1c>
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1f5      	bne.n	800d170 <strncmp+0x8>
 800d184:	1a98      	subs	r0, r3, r2
 800d186:	bd10      	pop	{r4, pc}
 800d188:	4610      	mov	r0, r2
 800d18a:	e7fc      	b.n	800d186 <strncmp+0x1e>

0800d18c <_strtoul_l.isra.0>:
 800d18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d190:	4680      	mov	r8, r0
 800d192:	4689      	mov	r9, r1
 800d194:	4692      	mov	sl, r2
 800d196:	461e      	mov	r6, r3
 800d198:	460f      	mov	r7, r1
 800d19a:	463d      	mov	r5, r7
 800d19c:	9808      	ldr	r0, [sp, #32]
 800d19e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1a2:	f7fe fd45 	bl	800bc30 <__locale_ctype_ptr_l>
 800d1a6:	4420      	add	r0, r4
 800d1a8:	7843      	ldrb	r3, [r0, #1]
 800d1aa:	f013 0308 	ands.w	r3, r3, #8
 800d1ae:	d130      	bne.n	800d212 <_strtoul_l.isra.0+0x86>
 800d1b0:	2c2d      	cmp	r4, #45	; 0x2d
 800d1b2:	d130      	bne.n	800d216 <_strtoul_l.isra.0+0x8a>
 800d1b4:	787c      	ldrb	r4, [r7, #1]
 800d1b6:	1cbd      	adds	r5, r7, #2
 800d1b8:	2101      	movs	r1, #1
 800d1ba:	2e00      	cmp	r6, #0
 800d1bc:	d05c      	beq.n	800d278 <_strtoul_l.isra.0+0xec>
 800d1be:	2e10      	cmp	r6, #16
 800d1c0:	d109      	bne.n	800d1d6 <_strtoul_l.isra.0+0x4a>
 800d1c2:	2c30      	cmp	r4, #48	; 0x30
 800d1c4:	d107      	bne.n	800d1d6 <_strtoul_l.isra.0+0x4a>
 800d1c6:	782b      	ldrb	r3, [r5, #0]
 800d1c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d1cc:	2b58      	cmp	r3, #88	; 0x58
 800d1ce:	d14e      	bne.n	800d26e <_strtoul_l.isra.0+0xe2>
 800d1d0:	786c      	ldrb	r4, [r5, #1]
 800d1d2:	2610      	movs	r6, #16
 800d1d4:	3502      	adds	r5, #2
 800d1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1da:	2300      	movs	r3, #0
 800d1dc:	fbb2 f2f6 	udiv	r2, r2, r6
 800d1e0:	fb06 fc02 	mul.w	ip, r6, r2
 800d1e4:	ea6f 0c0c 	mvn.w	ip, ip
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d1ee:	2f09      	cmp	r7, #9
 800d1f0:	d817      	bhi.n	800d222 <_strtoul_l.isra.0+0x96>
 800d1f2:	463c      	mov	r4, r7
 800d1f4:	42a6      	cmp	r6, r4
 800d1f6:	dd23      	ble.n	800d240 <_strtoul_l.isra.0+0xb4>
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	db1e      	blt.n	800d23a <_strtoul_l.isra.0+0xae>
 800d1fc:	4282      	cmp	r2, r0
 800d1fe:	d31c      	bcc.n	800d23a <_strtoul_l.isra.0+0xae>
 800d200:	d101      	bne.n	800d206 <_strtoul_l.isra.0+0x7a>
 800d202:	45a4      	cmp	ip, r4
 800d204:	db19      	blt.n	800d23a <_strtoul_l.isra.0+0xae>
 800d206:	fb00 4006 	mla	r0, r0, r6, r4
 800d20a:	2301      	movs	r3, #1
 800d20c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d210:	e7eb      	b.n	800d1ea <_strtoul_l.isra.0+0x5e>
 800d212:	462f      	mov	r7, r5
 800d214:	e7c1      	b.n	800d19a <_strtoul_l.isra.0+0xe>
 800d216:	2c2b      	cmp	r4, #43	; 0x2b
 800d218:	bf04      	itt	eq
 800d21a:	1cbd      	addeq	r5, r7, #2
 800d21c:	787c      	ldrbeq	r4, [r7, #1]
 800d21e:	4619      	mov	r1, r3
 800d220:	e7cb      	b.n	800d1ba <_strtoul_l.isra.0+0x2e>
 800d222:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d226:	2f19      	cmp	r7, #25
 800d228:	d801      	bhi.n	800d22e <_strtoul_l.isra.0+0xa2>
 800d22a:	3c37      	subs	r4, #55	; 0x37
 800d22c:	e7e2      	b.n	800d1f4 <_strtoul_l.isra.0+0x68>
 800d22e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d232:	2f19      	cmp	r7, #25
 800d234:	d804      	bhi.n	800d240 <_strtoul_l.isra.0+0xb4>
 800d236:	3c57      	subs	r4, #87	; 0x57
 800d238:	e7dc      	b.n	800d1f4 <_strtoul_l.isra.0+0x68>
 800d23a:	f04f 33ff 	mov.w	r3, #4294967295
 800d23e:	e7e5      	b.n	800d20c <_strtoul_l.isra.0+0x80>
 800d240:	2b00      	cmp	r3, #0
 800d242:	da09      	bge.n	800d258 <_strtoul_l.isra.0+0xcc>
 800d244:	2322      	movs	r3, #34	; 0x22
 800d246:	f8c8 3000 	str.w	r3, [r8]
 800d24a:	f04f 30ff 	mov.w	r0, #4294967295
 800d24e:	f1ba 0f00 	cmp.w	sl, #0
 800d252:	d107      	bne.n	800d264 <_strtoul_l.isra.0+0xd8>
 800d254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d258:	b101      	cbz	r1, 800d25c <_strtoul_l.isra.0+0xd0>
 800d25a:	4240      	negs	r0, r0
 800d25c:	f1ba 0f00 	cmp.w	sl, #0
 800d260:	d0f8      	beq.n	800d254 <_strtoul_l.isra.0+0xc8>
 800d262:	b10b      	cbz	r3, 800d268 <_strtoul_l.isra.0+0xdc>
 800d264:	f105 39ff 	add.w	r9, r5, #4294967295
 800d268:	f8ca 9000 	str.w	r9, [sl]
 800d26c:	e7f2      	b.n	800d254 <_strtoul_l.isra.0+0xc8>
 800d26e:	2430      	movs	r4, #48	; 0x30
 800d270:	2e00      	cmp	r6, #0
 800d272:	d1b0      	bne.n	800d1d6 <_strtoul_l.isra.0+0x4a>
 800d274:	2608      	movs	r6, #8
 800d276:	e7ae      	b.n	800d1d6 <_strtoul_l.isra.0+0x4a>
 800d278:	2c30      	cmp	r4, #48	; 0x30
 800d27a:	d0a4      	beq.n	800d1c6 <_strtoul_l.isra.0+0x3a>
 800d27c:	260a      	movs	r6, #10
 800d27e:	e7aa      	b.n	800d1d6 <_strtoul_l.isra.0+0x4a>

0800d280 <_strtoul_r>:
 800d280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d282:	4c06      	ldr	r4, [pc, #24]	; (800d29c <_strtoul_r+0x1c>)
 800d284:	4d06      	ldr	r5, [pc, #24]	; (800d2a0 <_strtoul_r+0x20>)
 800d286:	6824      	ldr	r4, [r4, #0]
 800d288:	6a24      	ldr	r4, [r4, #32]
 800d28a:	2c00      	cmp	r4, #0
 800d28c:	bf08      	it	eq
 800d28e:	462c      	moveq	r4, r5
 800d290:	9400      	str	r4, [sp, #0]
 800d292:	f7ff ff7b 	bl	800d18c <_strtoul_l.isra.0>
 800d296:	b003      	add	sp, #12
 800d298:	bd30      	pop	{r4, r5, pc}
 800d29a:	bf00      	nop
 800d29c:	20000180 	.word	0x20000180
 800d2a0:	200001e4 	.word	0x200001e4

0800d2a4 <__submore>:
 800d2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d2ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2b0:	4299      	cmp	r1, r3
 800d2b2:	d11d      	bne.n	800d2f0 <__submore+0x4c>
 800d2b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d2b8:	f7fb fa76 	bl	80087a8 <_malloc_r>
 800d2bc:	b918      	cbnz	r0, 800d2c6 <__submore+0x22>
 800d2be:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2ca:	63a3      	str	r3, [r4, #56]	; 0x38
 800d2cc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d2d0:	6360      	str	r0, [r4, #52]	; 0x34
 800d2d2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d2d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d2da:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d2de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d2e2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d2e6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d2ea:	6020      	str	r0, [r4, #0]
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	e7e8      	b.n	800d2c2 <__submore+0x1e>
 800d2f0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d2f2:	0077      	lsls	r7, r6, #1
 800d2f4:	463a      	mov	r2, r7
 800d2f6:	f000 f858 	bl	800d3aa <_realloc_r>
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d0de      	beq.n	800d2be <__submore+0x1a>
 800d300:	eb00 0806 	add.w	r8, r0, r6
 800d304:	4601      	mov	r1, r0
 800d306:	4632      	mov	r2, r6
 800d308:	4640      	mov	r0, r8
 800d30a:	f7fe fd3b 	bl	800bd84 <memcpy>
 800d30e:	f8c4 8000 	str.w	r8, [r4]
 800d312:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d316:	e7e9      	b.n	800d2ec <__submore+0x48>

0800d318 <__ascii_wctomb>:
 800d318:	b149      	cbz	r1, 800d32e <__ascii_wctomb+0x16>
 800d31a:	2aff      	cmp	r2, #255	; 0xff
 800d31c:	bf85      	ittet	hi
 800d31e:	238a      	movhi	r3, #138	; 0x8a
 800d320:	6003      	strhi	r3, [r0, #0]
 800d322:	700a      	strbls	r2, [r1, #0]
 800d324:	f04f 30ff 	movhi.w	r0, #4294967295
 800d328:	bf98      	it	ls
 800d32a:	2001      	movls	r0, #1
 800d32c:	4770      	bx	lr
 800d32e:	4608      	mov	r0, r1
 800d330:	4770      	bx	lr
	...

0800d334 <_fstat_r>:
 800d334:	b538      	push	{r3, r4, r5, lr}
 800d336:	4c07      	ldr	r4, [pc, #28]	; (800d354 <_fstat_r+0x20>)
 800d338:	2300      	movs	r3, #0
 800d33a:	4605      	mov	r5, r0
 800d33c:	4608      	mov	r0, r1
 800d33e:	4611      	mov	r1, r2
 800d340:	6023      	str	r3, [r4, #0]
 800d342:	f7f4 fb52 	bl	80019ea <_fstat>
 800d346:	1c43      	adds	r3, r0, #1
 800d348:	d102      	bne.n	800d350 <_fstat_r+0x1c>
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	b103      	cbz	r3, 800d350 <_fstat_r+0x1c>
 800d34e:	602b      	str	r3, [r5, #0]
 800d350:	bd38      	pop	{r3, r4, r5, pc}
 800d352:	bf00      	nop
 800d354:	20000f6c 	.word	0x20000f6c

0800d358 <_isatty_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4c06      	ldr	r4, [pc, #24]	; (800d374 <_isatty_r+0x1c>)
 800d35c:	2300      	movs	r3, #0
 800d35e:	4605      	mov	r5, r0
 800d360:	4608      	mov	r0, r1
 800d362:	6023      	str	r3, [r4, #0]
 800d364:	f7f4 fb51 	bl	8001a0a <_isatty>
 800d368:	1c43      	adds	r3, r0, #1
 800d36a:	d102      	bne.n	800d372 <_isatty_r+0x1a>
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	b103      	cbz	r3, 800d372 <_isatty_r+0x1a>
 800d370:	602b      	str	r3, [r5, #0]
 800d372:	bd38      	pop	{r3, r4, r5, pc}
 800d374:	20000f6c 	.word	0x20000f6c

0800d378 <memmove>:
 800d378:	4288      	cmp	r0, r1
 800d37a:	b510      	push	{r4, lr}
 800d37c:	eb01 0302 	add.w	r3, r1, r2
 800d380:	d807      	bhi.n	800d392 <memmove+0x1a>
 800d382:	1e42      	subs	r2, r0, #1
 800d384:	4299      	cmp	r1, r3
 800d386:	d00a      	beq.n	800d39e <memmove+0x26>
 800d388:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d38c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d390:	e7f8      	b.n	800d384 <memmove+0xc>
 800d392:	4283      	cmp	r3, r0
 800d394:	d9f5      	bls.n	800d382 <memmove+0xa>
 800d396:	1881      	adds	r1, r0, r2
 800d398:	1ad2      	subs	r2, r2, r3
 800d39a:	42d3      	cmn	r3, r2
 800d39c:	d100      	bne.n	800d3a0 <memmove+0x28>
 800d39e:	bd10      	pop	{r4, pc}
 800d3a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d3a8:	e7f7      	b.n	800d39a <memmove+0x22>

0800d3aa <_realloc_r>:
 800d3aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ac:	4607      	mov	r7, r0
 800d3ae:	4614      	mov	r4, r2
 800d3b0:	460e      	mov	r6, r1
 800d3b2:	b921      	cbnz	r1, 800d3be <_realloc_r+0x14>
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d3ba:	f7fb b9f5 	b.w	80087a8 <_malloc_r>
 800d3be:	b922      	cbnz	r2, 800d3ca <_realloc_r+0x20>
 800d3c0:	f7fb f9a4 	bl	800870c <_free_r>
 800d3c4:	4625      	mov	r5, r4
 800d3c6:	4628      	mov	r0, r5
 800d3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3ca:	f000 f814 	bl	800d3f6 <_malloc_usable_size_r>
 800d3ce:	42a0      	cmp	r0, r4
 800d3d0:	d20f      	bcs.n	800d3f2 <_realloc_r+0x48>
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	4638      	mov	r0, r7
 800d3d6:	f7fb f9e7 	bl	80087a8 <_malloc_r>
 800d3da:	4605      	mov	r5, r0
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	d0f2      	beq.n	800d3c6 <_realloc_r+0x1c>
 800d3e0:	4631      	mov	r1, r6
 800d3e2:	4622      	mov	r2, r4
 800d3e4:	f7fe fcce 	bl	800bd84 <memcpy>
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	4638      	mov	r0, r7
 800d3ec:	f7fb f98e 	bl	800870c <_free_r>
 800d3f0:	e7e9      	b.n	800d3c6 <_realloc_r+0x1c>
 800d3f2:	4635      	mov	r5, r6
 800d3f4:	e7e7      	b.n	800d3c6 <_realloc_r+0x1c>

0800d3f6 <_malloc_usable_size_r>:
 800d3f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3fa:	1f18      	subs	r0, r3, #4
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	bfbc      	itt	lt
 800d400:	580b      	ldrlt	r3, [r1, r0]
 800d402:	18c0      	addlt	r0, r0, r3
 800d404:	4770      	bx	lr
	...

0800d408 <cos>:
 800d408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d40a:	ec51 0b10 	vmov	r0, r1, d0
 800d40e:	4a1e      	ldr	r2, [pc, #120]	; (800d488 <cos+0x80>)
 800d410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d414:	4293      	cmp	r3, r2
 800d416:	dc06      	bgt.n	800d426 <cos+0x1e>
 800d418:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800d480 <cos+0x78>
 800d41c:	f001 fd94 	bl	800ef48 <__kernel_cos>
 800d420:	ec51 0b10 	vmov	r0, r1, d0
 800d424:	e007      	b.n	800d436 <cos+0x2e>
 800d426:	4a19      	ldr	r2, [pc, #100]	; (800d48c <cos+0x84>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	dd09      	ble.n	800d440 <cos+0x38>
 800d42c:	ee10 2a10 	vmov	r2, s0
 800d430:	460b      	mov	r3, r1
 800d432:	f7f2 ff31 	bl	8000298 <__aeabi_dsub>
 800d436:	ec41 0b10 	vmov	d0, r0, r1
 800d43a:	b005      	add	sp, #20
 800d43c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d440:	4668      	mov	r0, sp
 800d442:	f001 fadd 	bl	800ea00 <__ieee754_rem_pio2>
 800d446:	f000 0003 	and.w	r0, r0, #3
 800d44a:	2801      	cmp	r0, #1
 800d44c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d450:	ed9d 0b00 	vldr	d0, [sp]
 800d454:	d007      	beq.n	800d466 <cos+0x5e>
 800d456:	2802      	cmp	r0, #2
 800d458:	d00e      	beq.n	800d478 <cos+0x70>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d0de      	beq.n	800d41c <cos+0x14>
 800d45e:	2001      	movs	r0, #1
 800d460:	f002 f97a 	bl	800f758 <__kernel_sin>
 800d464:	e7dc      	b.n	800d420 <cos+0x18>
 800d466:	f002 f977 	bl	800f758 <__kernel_sin>
 800d46a:	ec53 2b10 	vmov	r2, r3, d0
 800d46e:	ee10 0a10 	vmov	r0, s0
 800d472:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d476:	e7de      	b.n	800d436 <cos+0x2e>
 800d478:	f001 fd66 	bl	800ef48 <__kernel_cos>
 800d47c:	e7f5      	b.n	800d46a <cos+0x62>
 800d47e:	bf00      	nop
	...
 800d488:	3fe921fb 	.word	0x3fe921fb
 800d48c:	7fefffff 	.word	0x7fefffff

0800d490 <sin>:
 800d490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d492:	ec51 0b10 	vmov	r0, r1, d0
 800d496:	4a20      	ldr	r2, [pc, #128]	; (800d518 <sin+0x88>)
 800d498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d49c:	4293      	cmp	r3, r2
 800d49e:	dc07      	bgt.n	800d4b0 <sin+0x20>
 800d4a0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800d510 <sin+0x80>
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	f002 f957 	bl	800f758 <__kernel_sin>
 800d4aa:	ec51 0b10 	vmov	r0, r1, d0
 800d4ae:	e007      	b.n	800d4c0 <sin+0x30>
 800d4b0:	4a1a      	ldr	r2, [pc, #104]	; (800d51c <sin+0x8c>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	dd09      	ble.n	800d4ca <sin+0x3a>
 800d4b6:	ee10 2a10 	vmov	r2, s0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	f7f2 feec 	bl	8000298 <__aeabi_dsub>
 800d4c0:	ec41 0b10 	vmov	d0, r0, r1
 800d4c4:	b005      	add	sp, #20
 800d4c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4ca:	4668      	mov	r0, sp
 800d4cc:	f001 fa98 	bl	800ea00 <__ieee754_rem_pio2>
 800d4d0:	f000 0003 	and.w	r0, r0, #3
 800d4d4:	2801      	cmp	r0, #1
 800d4d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d4da:	ed9d 0b00 	vldr	d0, [sp]
 800d4de:	d004      	beq.n	800d4ea <sin+0x5a>
 800d4e0:	2802      	cmp	r0, #2
 800d4e2:	d005      	beq.n	800d4f0 <sin+0x60>
 800d4e4:	b970      	cbnz	r0, 800d504 <sin+0x74>
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	e7dd      	b.n	800d4a6 <sin+0x16>
 800d4ea:	f001 fd2d 	bl	800ef48 <__kernel_cos>
 800d4ee:	e7dc      	b.n	800d4aa <sin+0x1a>
 800d4f0:	2001      	movs	r0, #1
 800d4f2:	f002 f931 	bl	800f758 <__kernel_sin>
 800d4f6:	ec53 2b10 	vmov	r2, r3, d0
 800d4fa:	ee10 0a10 	vmov	r0, s0
 800d4fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d502:	e7dd      	b.n	800d4c0 <sin+0x30>
 800d504:	f001 fd20 	bl	800ef48 <__kernel_cos>
 800d508:	e7f5      	b.n	800d4f6 <sin+0x66>
 800d50a:	bf00      	nop
 800d50c:	f3af 8000 	nop.w
	...
 800d518:	3fe921fb 	.word	0x3fe921fb
 800d51c:	7fefffff 	.word	0x7fefffff

0800d520 <acos>:
 800d520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d522:	ed2d 8b02 	vpush	{d8}
 800d526:	4e26      	ldr	r6, [pc, #152]	; (800d5c0 <acos+0xa0>)
 800d528:	b08b      	sub	sp, #44	; 0x2c
 800d52a:	ec55 4b10 	vmov	r4, r5, d0
 800d52e:	f000 fa1b 	bl	800d968 <__ieee754_acos>
 800d532:	f996 3000 	ldrsb.w	r3, [r6]
 800d536:	eeb0 8a40 	vmov.f32	s16, s0
 800d53a:	eef0 8a60 	vmov.f32	s17, s1
 800d53e:	3301      	adds	r3, #1
 800d540:	d036      	beq.n	800d5b0 <acos+0x90>
 800d542:	4622      	mov	r2, r4
 800d544:	462b      	mov	r3, r5
 800d546:	4620      	mov	r0, r4
 800d548:	4629      	mov	r1, r5
 800d54a:	f7f3 faf7 	bl	8000b3c <__aeabi_dcmpun>
 800d54e:	4607      	mov	r7, r0
 800d550:	bb70      	cbnz	r0, 800d5b0 <acos+0x90>
 800d552:	ec45 4b10 	vmov	d0, r4, r5
 800d556:	f002 fb5b 	bl	800fc10 <fabs>
 800d55a:	2200      	movs	r2, #0
 800d55c:	4b19      	ldr	r3, [pc, #100]	; (800d5c4 <acos+0xa4>)
 800d55e:	ec51 0b10 	vmov	r0, r1, d0
 800d562:	f7f3 fae1 	bl	8000b28 <__aeabi_dcmpgt>
 800d566:	b318      	cbz	r0, 800d5b0 <acos+0x90>
 800d568:	2301      	movs	r3, #1
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	4816      	ldr	r0, [pc, #88]	; (800d5c8 <acos+0xa8>)
 800d56e:	4b17      	ldr	r3, [pc, #92]	; (800d5cc <acos+0xac>)
 800d570:	9301      	str	r3, [sp, #4]
 800d572:	9708      	str	r7, [sp, #32]
 800d574:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d578:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d57c:	f002 fbe4 	bl	800fd48 <nan>
 800d580:	f996 3000 	ldrsb.w	r3, [r6]
 800d584:	2b02      	cmp	r3, #2
 800d586:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d58a:	d104      	bne.n	800d596 <acos+0x76>
 800d58c:	f7fb f87c 	bl	8008688 <__errno>
 800d590:	2321      	movs	r3, #33	; 0x21
 800d592:	6003      	str	r3, [r0, #0]
 800d594:	e004      	b.n	800d5a0 <acos+0x80>
 800d596:	4668      	mov	r0, sp
 800d598:	f002 fbd2 	bl	800fd40 <matherr>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d0f5      	beq.n	800d58c <acos+0x6c>
 800d5a0:	9b08      	ldr	r3, [sp, #32]
 800d5a2:	b11b      	cbz	r3, 800d5ac <acos+0x8c>
 800d5a4:	f7fb f870 	bl	8008688 <__errno>
 800d5a8:	9b08      	ldr	r3, [sp, #32]
 800d5aa:	6003      	str	r3, [r0, #0]
 800d5ac:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d5b0:	eeb0 0a48 	vmov.f32	s0, s16
 800d5b4:	eef0 0a68 	vmov.f32	s1, s17
 800d5b8:	b00b      	add	sp, #44	; 0x2c
 800d5ba:	ecbd 8b02 	vpop	{d8}
 800d5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5c0:	20000350 	.word	0x20000350
 800d5c4:	3ff00000 	.word	0x3ff00000
 800d5c8:	08010289 	.word	0x08010289
 800d5cc:	080103b1 	.word	0x080103b1

0800d5d0 <atan2>:
 800d5d0:	f000 bc26 	b.w	800de20 <__ieee754_atan2>

0800d5d4 <pow>:
 800d5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d8:	ed2d 8b04 	vpush	{d8-d9}
 800d5dc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800d8b0 <pow+0x2dc>
 800d5e0:	b08d      	sub	sp, #52	; 0x34
 800d5e2:	ec57 6b10 	vmov	r6, r7, d0
 800d5e6:	ec55 4b11 	vmov	r4, r5, d1
 800d5ea:	f000 fcf9 	bl	800dfe0 <__ieee754_pow>
 800d5ee:	f999 3000 	ldrsb.w	r3, [r9]
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	eeb0 8a40 	vmov.f32	s16, s0
 800d5fa:	eef0 8a60 	vmov.f32	s17, s1
 800d5fe:	46c8      	mov	r8, r9
 800d600:	d05f      	beq.n	800d6c2 <pow+0xee>
 800d602:	4622      	mov	r2, r4
 800d604:	462b      	mov	r3, r5
 800d606:	4620      	mov	r0, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	f7f3 fa97 	bl	8000b3c <__aeabi_dcmpun>
 800d60e:	4683      	mov	fp, r0
 800d610:	2800      	cmp	r0, #0
 800d612:	d156      	bne.n	800d6c2 <pow+0xee>
 800d614:	4632      	mov	r2, r6
 800d616:	463b      	mov	r3, r7
 800d618:	4630      	mov	r0, r6
 800d61a:	4639      	mov	r1, r7
 800d61c:	f7f3 fa8e 	bl	8000b3c <__aeabi_dcmpun>
 800d620:	9001      	str	r0, [sp, #4]
 800d622:	b1e8      	cbz	r0, 800d660 <pow+0x8c>
 800d624:	2200      	movs	r2, #0
 800d626:	2300      	movs	r3, #0
 800d628:	4620      	mov	r0, r4
 800d62a:	4629      	mov	r1, r5
 800d62c:	f7f3 fa54 	bl	8000ad8 <__aeabi_dcmpeq>
 800d630:	2800      	cmp	r0, #0
 800d632:	d046      	beq.n	800d6c2 <pow+0xee>
 800d634:	2301      	movs	r3, #1
 800d636:	9302      	str	r3, [sp, #8]
 800d638:	4b96      	ldr	r3, [pc, #600]	; (800d894 <pow+0x2c0>)
 800d63a:	9303      	str	r3, [sp, #12]
 800d63c:	4b96      	ldr	r3, [pc, #600]	; (800d898 <pow+0x2c4>)
 800d63e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d642:	2200      	movs	r2, #0
 800d644:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d648:	9b00      	ldr	r3, [sp, #0]
 800d64a:	2b02      	cmp	r3, #2
 800d64c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d650:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d654:	d033      	beq.n	800d6be <pow+0xea>
 800d656:	a802      	add	r0, sp, #8
 800d658:	f002 fb72 	bl	800fd40 <matherr>
 800d65c:	bb48      	cbnz	r0, 800d6b2 <pow+0xde>
 800d65e:	e05d      	b.n	800d71c <pow+0x148>
 800d660:	f04f 0a00 	mov.w	sl, #0
 800d664:	f04f 0b00 	mov.w	fp, #0
 800d668:	4652      	mov	r2, sl
 800d66a:	465b      	mov	r3, fp
 800d66c:	4630      	mov	r0, r6
 800d66e:	4639      	mov	r1, r7
 800d670:	f7f3 fa32 	bl	8000ad8 <__aeabi_dcmpeq>
 800d674:	ec4b ab19 	vmov	d9, sl, fp
 800d678:	2800      	cmp	r0, #0
 800d67a:	d054      	beq.n	800d726 <pow+0x152>
 800d67c:	4652      	mov	r2, sl
 800d67e:	465b      	mov	r3, fp
 800d680:	4620      	mov	r0, r4
 800d682:	4629      	mov	r1, r5
 800d684:	f7f3 fa28 	bl	8000ad8 <__aeabi_dcmpeq>
 800d688:	4680      	mov	r8, r0
 800d68a:	b318      	cbz	r0, 800d6d4 <pow+0x100>
 800d68c:	2301      	movs	r3, #1
 800d68e:	9302      	str	r3, [sp, #8]
 800d690:	4b80      	ldr	r3, [pc, #512]	; (800d894 <pow+0x2c0>)
 800d692:	9303      	str	r3, [sp, #12]
 800d694:	9b01      	ldr	r3, [sp, #4]
 800d696:	930a      	str	r3, [sp, #40]	; 0x28
 800d698:	9b00      	ldr	r3, [sp, #0]
 800d69a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d69e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d6a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d0d5      	beq.n	800d656 <pow+0x82>
 800d6aa:	4b7b      	ldr	r3, [pc, #492]	; (800d898 <pow+0x2c4>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d6b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6b4:	b11b      	cbz	r3, 800d6be <pow+0xea>
 800d6b6:	f7fa ffe7 	bl	8008688 <__errno>
 800d6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6bc:	6003      	str	r3, [r0, #0]
 800d6be:	ed9d 8b08 	vldr	d8, [sp, #32]
 800d6c2:	eeb0 0a48 	vmov.f32	s0, s16
 800d6c6:	eef0 0a68 	vmov.f32	s1, s17
 800d6ca:	b00d      	add	sp, #52	; 0x34
 800d6cc:	ecbd 8b04 	vpop	{d8-d9}
 800d6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d4:	ec45 4b10 	vmov	d0, r4, r5
 800d6d8:	f002 faa3 	bl	800fc22 <finite>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d0f0      	beq.n	800d6c2 <pow+0xee>
 800d6e0:	4652      	mov	r2, sl
 800d6e2:	465b      	mov	r3, fp
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	f7f3 fa00 	bl	8000aec <__aeabi_dcmplt>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d0e8      	beq.n	800d6c2 <pow+0xee>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	9302      	str	r3, [sp, #8]
 800d6f4:	4b67      	ldr	r3, [pc, #412]	; (800d894 <pow+0x2c0>)
 800d6f6:	9303      	str	r3, [sp, #12]
 800d6f8:	f999 3000 	ldrsb.w	r3, [r9]
 800d6fc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d700:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d704:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d708:	b913      	cbnz	r3, 800d710 <pow+0x13c>
 800d70a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d70e:	e7a2      	b.n	800d656 <pow+0x82>
 800d710:	4962      	ldr	r1, [pc, #392]	; (800d89c <pow+0x2c8>)
 800d712:	2000      	movs	r0, #0
 800d714:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d19c      	bne.n	800d656 <pow+0x82>
 800d71c:	f7fa ffb4 	bl	8008688 <__errno>
 800d720:	2321      	movs	r3, #33	; 0x21
 800d722:	6003      	str	r3, [r0, #0]
 800d724:	e7c5      	b.n	800d6b2 <pow+0xde>
 800d726:	eeb0 0a48 	vmov.f32	s0, s16
 800d72a:	eef0 0a68 	vmov.f32	s1, s17
 800d72e:	f002 fa78 	bl	800fc22 <finite>
 800d732:	9000      	str	r0, [sp, #0]
 800d734:	2800      	cmp	r0, #0
 800d736:	f040 8081 	bne.w	800d83c <pow+0x268>
 800d73a:	ec47 6b10 	vmov	d0, r6, r7
 800d73e:	f002 fa70 	bl	800fc22 <finite>
 800d742:	2800      	cmp	r0, #0
 800d744:	d07a      	beq.n	800d83c <pow+0x268>
 800d746:	ec45 4b10 	vmov	d0, r4, r5
 800d74a:	f002 fa6a 	bl	800fc22 <finite>
 800d74e:	2800      	cmp	r0, #0
 800d750:	d074      	beq.n	800d83c <pow+0x268>
 800d752:	ec53 2b18 	vmov	r2, r3, d8
 800d756:	ee18 0a10 	vmov	r0, s16
 800d75a:	4619      	mov	r1, r3
 800d75c:	f7f3 f9ee 	bl	8000b3c <__aeabi_dcmpun>
 800d760:	f999 9000 	ldrsb.w	r9, [r9]
 800d764:	4b4b      	ldr	r3, [pc, #300]	; (800d894 <pow+0x2c0>)
 800d766:	b1b0      	cbz	r0, 800d796 <pow+0x1c2>
 800d768:	2201      	movs	r2, #1
 800d76a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d76e:	9b00      	ldr	r3, [sp, #0]
 800d770:	930a      	str	r3, [sp, #40]	; 0x28
 800d772:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d776:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d77a:	f1b9 0f00 	cmp.w	r9, #0
 800d77e:	d0c4      	beq.n	800d70a <pow+0x136>
 800d780:	4652      	mov	r2, sl
 800d782:	465b      	mov	r3, fp
 800d784:	4650      	mov	r0, sl
 800d786:	4659      	mov	r1, fp
 800d788:	f7f3 f868 	bl	800085c <__aeabi_ddiv>
 800d78c:	f1b9 0f02 	cmp.w	r9, #2
 800d790:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d794:	e7c1      	b.n	800d71a <pow+0x146>
 800d796:	2203      	movs	r2, #3
 800d798:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d79c:	900a      	str	r0, [sp, #40]	; 0x28
 800d79e:	4629      	mov	r1, r5
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	4b3e      	ldr	r3, [pc, #248]	; (800d8a0 <pow+0x2cc>)
 800d7a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d7aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d7ae:	f7f2 ff2b 	bl	8000608 <__aeabi_dmul>
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	460d      	mov	r5, r1
 800d7b6:	f1b9 0f00 	cmp.w	r9, #0
 800d7ba:	d124      	bne.n	800d806 <pow+0x232>
 800d7bc:	4b39      	ldr	r3, [pc, #228]	; (800d8a4 <pow+0x2d0>)
 800d7be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d7c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	4652      	mov	r2, sl
 800d7ca:	465b      	mov	r3, fp
 800d7cc:	4639      	mov	r1, r7
 800d7ce:	f7f3 f98d 	bl	8000aec <__aeabi_dcmplt>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d056      	beq.n	800d884 <pow+0x2b0>
 800d7d6:	ec45 4b10 	vmov	d0, r4, r5
 800d7da:	f002 fabd 	bl	800fd58 <rint>
 800d7de:	4622      	mov	r2, r4
 800d7e0:	462b      	mov	r3, r5
 800d7e2:	ec51 0b10 	vmov	r0, r1, d0
 800d7e6:	f7f3 f977 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7ea:	b920      	cbnz	r0, 800d7f6 <pow+0x222>
 800d7ec:	4b2e      	ldr	r3, [pc, #184]	; (800d8a8 <pow+0x2d4>)
 800d7ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d7f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d7f6:	f998 3000 	ldrsb.w	r3, [r8]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d142      	bne.n	800d884 <pow+0x2b0>
 800d7fe:	f7fa ff43 	bl	8008688 <__errno>
 800d802:	2322      	movs	r3, #34	; 0x22
 800d804:	e78d      	b.n	800d722 <pow+0x14e>
 800d806:	4b29      	ldr	r3, [pc, #164]	; (800d8ac <pow+0x2d8>)
 800d808:	2200      	movs	r2, #0
 800d80a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d80e:	4630      	mov	r0, r6
 800d810:	4652      	mov	r2, sl
 800d812:	465b      	mov	r3, fp
 800d814:	4639      	mov	r1, r7
 800d816:	f7f3 f969 	bl	8000aec <__aeabi_dcmplt>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d0eb      	beq.n	800d7f6 <pow+0x222>
 800d81e:	ec45 4b10 	vmov	d0, r4, r5
 800d822:	f002 fa99 	bl	800fd58 <rint>
 800d826:	4622      	mov	r2, r4
 800d828:	462b      	mov	r3, r5
 800d82a:	ec51 0b10 	vmov	r0, r1, d0
 800d82e:	f7f3 f953 	bl	8000ad8 <__aeabi_dcmpeq>
 800d832:	2800      	cmp	r0, #0
 800d834:	d1df      	bne.n	800d7f6 <pow+0x222>
 800d836:	2200      	movs	r2, #0
 800d838:	4b18      	ldr	r3, [pc, #96]	; (800d89c <pow+0x2c8>)
 800d83a:	e7da      	b.n	800d7f2 <pow+0x21e>
 800d83c:	2200      	movs	r2, #0
 800d83e:	2300      	movs	r3, #0
 800d840:	ec51 0b18 	vmov	r0, r1, d8
 800d844:	f7f3 f948 	bl	8000ad8 <__aeabi_dcmpeq>
 800d848:	2800      	cmp	r0, #0
 800d84a:	f43f af3a 	beq.w	800d6c2 <pow+0xee>
 800d84e:	ec47 6b10 	vmov	d0, r6, r7
 800d852:	f002 f9e6 	bl	800fc22 <finite>
 800d856:	2800      	cmp	r0, #0
 800d858:	f43f af33 	beq.w	800d6c2 <pow+0xee>
 800d85c:	ec45 4b10 	vmov	d0, r4, r5
 800d860:	f002 f9df 	bl	800fc22 <finite>
 800d864:	2800      	cmp	r0, #0
 800d866:	f43f af2c 	beq.w	800d6c2 <pow+0xee>
 800d86a:	2304      	movs	r3, #4
 800d86c:	9302      	str	r3, [sp, #8]
 800d86e:	4b09      	ldr	r3, [pc, #36]	; (800d894 <pow+0x2c0>)
 800d870:	9303      	str	r3, [sp, #12]
 800d872:	2300      	movs	r3, #0
 800d874:	930a      	str	r3, [sp, #40]	; 0x28
 800d876:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d87a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d87e:	ed8d 9b08 	vstr	d9, [sp, #32]
 800d882:	e7b8      	b.n	800d7f6 <pow+0x222>
 800d884:	a802      	add	r0, sp, #8
 800d886:	f002 fa5b 	bl	800fd40 <matherr>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	f47f af11 	bne.w	800d6b2 <pow+0xde>
 800d890:	e7b5      	b.n	800d7fe <pow+0x22a>
 800d892:	bf00      	nop
 800d894:	080103b6 	.word	0x080103b6
 800d898:	3ff00000 	.word	0x3ff00000
 800d89c:	fff00000 	.word	0xfff00000
 800d8a0:	3fe00000 	.word	0x3fe00000
 800d8a4:	47efffff 	.word	0x47efffff
 800d8a8:	c7efffff 	.word	0xc7efffff
 800d8ac:	7ff00000 	.word	0x7ff00000
 800d8b0:	20000350 	.word	0x20000350

0800d8b4 <sqrt>:
 800d8b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8b8:	ed2d 8b02 	vpush	{d8}
 800d8bc:	b08b      	sub	sp, #44	; 0x2c
 800d8be:	ec55 4b10 	vmov	r4, r5, d0
 800d8c2:	f001 fa8f 	bl	800ede4 <__ieee754_sqrt>
 800d8c6:	4b26      	ldr	r3, [pc, #152]	; (800d960 <sqrt+0xac>)
 800d8c8:	eeb0 8a40 	vmov.f32	s16, s0
 800d8cc:	eef0 8a60 	vmov.f32	s17, s1
 800d8d0:	f993 6000 	ldrsb.w	r6, [r3]
 800d8d4:	1c73      	adds	r3, r6, #1
 800d8d6:	d02a      	beq.n	800d92e <sqrt+0x7a>
 800d8d8:	4622      	mov	r2, r4
 800d8da:	462b      	mov	r3, r5
 800d8dc:	4620      	mov	r0, r4
 800d8de:	4629      	mov	r1, r5
 800d8e0:	f7f3 f92c 	bl	8000b3c <__aeabi_dcmpun>
 800d8e4:	4607      	mov	r7, r0
 800d8e6:	bb10      	cbnz	r0, 800d92e <sqrt+0x7a>
 800d8e8:	f04f 0800 	mov.w	r8, #0
 800d8ec:	f04f 0900 	mov.w	r9, #0
 800d8f0:	4642      	mov	r2, r8
 800d8f2:	464b      	mov	r3, r9
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f7f3 f8f8 	bl	8000aec <__aeabi_dcmplt>
 800d8fc:	b1b8      	cbz	r0, 800d92e <sqrt+0x7a>
 800d8fe:	2301      	movs	r3, #1
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	4b18      	ldr	r3, [pc, #96]	; (800d964 <sqrt+0xb0>)
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	9708      	str	r7, [sp, #32]
 800d908:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d90c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d910:	b9b6      	cbnz	r6, 800d940 <sqrt+0x8c>
 800d912:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800d916:	4668      	mov	r0, sp
 800d918:	f002 fa12 	bl	800fd40 <matherr>
 800d91c:	b1d0      	cbz	r0, 800d954 <sqrt+0xa0>
 800d91e:	9b08      	ldr	r3, [sp, #32]
 800d920:	b11b      	cbz	r3, 800d92a <sqrt+0x76>
 800d922:	f7fa feb1 	bl	8008688 <__errno>
 800d926:	9b08      	ldr	r3, [sp, #32]
 800d928:	6003      	str	r3, [r0, #0]
 800d92a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d92e:	eeb0 0a48 	vmov.f32	s0, s16
 800d932:	eef0 0a68 	vmov.f32	s1, s17
 800d936:	b00b      	add	sp, #44	; 0x2c
 800d938:	ecbd 8b02 	vpop	{d8}
 800d93c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d940:	4642      	mov	r2, r8
 800d942:	464b      	mov	r3, r9
 800d944:	4640      	mov	r0, r8
 800d946:	4649      	mov	r1, r9
 800d948:	f7f2 ff88 	bl	800085c <__aeabi_ddiv>
 800d94c:	2e02      	cmp	r6, #2
 800d94e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d952:	d1e0      	bne.n	800d916 <sqrt+0x62>
 800d954:	f7fa fe98 	bl	8008688 <__errno>
 800d958:	2321      	movs	r3, #33	; 0x21
 800d95a:	6003      	str	r3, [r0, #0]
 800d95c:	e7df      	b.n	800d91e <sqrt+0x6a>
 800d95e:	bf00      	nop
 800d960:	20000350 	.word	0x20000350
 800d964:	080103ba 	.word	0x080103ba

0800d968 <__ieee754_acos>:
 800d968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96c:	ec55 4b10 	vmov	r4, r5, d0
 800d970:	49b7      	ldr	r1, [pc, #732]	; (800dc50 <__ieee754_acos+0x2e8>)
 800d972:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d976:	428b      	cmp	r3, r1
 800d978:	dd1b      	ble.n	800d9b2 <__ieee754_acos+0x4a>
 800d97a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d97e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d982:	4323      	orrs	r3, r4
 800d984:	d109      	bne.n	800d99a <__ieee754_acos+0x32>
 800d986:	2d00      	cmp	r5, #0
 800d988:	f300 8211 	bgt.w	800ddae <__ieee754_acos+0x446>
 800d98c:	a196      	add	r1, pc, #600	; (adr r1, 800dbe8 <__ieee754_acos+0x280>)
 800d98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d992:	ec41 0b10 	vmov	d0, r0, r1
 800d996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d99a:	ee10 2a10 	vmov	r2, s0
 800d99e:	462b      	mov	r3, r5
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	f7f2 fc78 	bl	8000298 <__aeabi_dsub>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	f7f2 ff56 	bl	800085c <__aeabi_ddiv>
 800d9b0:	e7ef      	b.n	800d992 <__ieee754_acos+0x2a>
 800d9b2:	49a8      	ldr	r1, [pc, #672]	; (800dc54 <__ieee754_acos+0x2ec>)
 800d9b4:	428b      	cmp	r3, r1
 800d9b6:	f300 8087 	bgt.w	800dac8 <__ieee754_acos+0x160>
 800d9ba:	4aa7      	ldr	r2, [pc, #668]	; (800dc58 <__ieee754_acos+0x2f0>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	f340 81f9 	ble.w	800ddb4 <__ieee754_acos+0x44c>
 800d9c2:	ee10 2a10 	vmov	r2, s0
 800d9c6:	ee10 0a10 	vmov	r0, s0
 800d9ca:	462b      	mov	r3, r5
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	f7f2 fe1b 	bl	8000608 <__aeabi_dmul>
 800d9d2:	a387      	add	r3, pc, #540	; (adr r3, 800dbf0 <__ieee754_acos+0x288>)
 800d9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d8:	4606      	mov	r6, r0
 800d9da:	460f      	mov	r7, r1
 800d9dc:	f7f2 fe14 	bl	8000608 <__aeabi_dmul>
 800d9e0:	a385      	add	r3, pc, #532	; (adr r3, 800dbf8 <__ieee754_acos+0x290>)
 800d9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e6:	f7f2 fc59 	bl	800029c <__adddf3>
 800d9ea:	4632      	mov	r2, r6
 800d9ec:	463b      	mov	r3, r7
 800d9ee:	f7f2 fe0b 	bl	8000608 <__aeabi_dmul>
 800d9f2:	a383      	add	r3, pc, #524	; (adr r3, 800dc00 <__ieee754_acos+0x298>)
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	f7f2 fc4e 	bl	8000298 <__aeabi_dsub>
 800d9fc:	4632      	mov	r2, r6
 800d9fe:	463b      	mov	r3, r7
 800da00:	f7f2 fe02 	bl	8000608 <__aeabi_dmul>
 800da04:	a380      	add	r3, pc, #512	; (adr r3, 800dc08 <__ieee754_acos+0x2a0>)
 800da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0a:	f7f2 fc47 	bl	800029c <__adddf3>
 800da0e:	4632      	mov	r2, r6
 800da10:	463b      	mov	r3, r7
 800da12:	f7f2 fdf9 	bl	8000608 <__aeabi_dmul>
 800da16:	a37e      	add	r3, pc, #504	; (adr r3, 800dc10 <__ieee754_acos+0x2a8>)
 800da18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1c:	f7f2 fc3c 	bl	8000298 <__aeabi_dsub>
 800da20:	4632      	mov	r2, r6
 800da22:	463b      	mov	r3, r7
 800da24:	f7f2 fdf0 	bl	8000608 <__aeabi_dmul>
 800da28:	a37b      	add	r3, pc, #492	; (adr r3, 800dc18 <__ieee754_acos+0x2b0>)
 800da2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2e:	f7f2 fc35 	bl	800029c <__adddf3>
 800da32:	4632      	mov	r2, r6
 800da34:	463b      	mov	r3, r7
 800da36:	f7f2 fde7 	bl	8000608 <__aeabi_dmul>
 800da3a:	a379      	add	r3, pc, #484	; (adr r3, 800dc20 <__ieee754_acos+0x2b8>)
 800da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da40:	4680      	mov	r8, r0
 800da42:	4689      	mov	r9, r1
 800da44:	4630      	mov	r0, r6
 800da46:	4639      	mov	r1, r7
 800da48:	f7f2 fdde 	bl	8000608 <__aeabi_dmul>
 800da4c:	a376      	add	r3, pc, #472	; (adr r3, 800dc28 <__ieee754_acos+0x2c0>)
 800da4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da52:	f7f2 fc21 	bl	8000298 <__aeabi_dsub>
 800da56:	4632      	mov	r2, r6
 800da58:	463b      	mov	r3, r7
 800da5a:	f7f2 fdd5 	bl	8000608 <__aeabi_dmul>
 800da5e:	a374      	add	r3, pc, #464	; (adr r3, 800dc30 <__ieee754_acos+0x2c8>)
 800da60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da64:	f7f2 fc1a 	bl	800029c <__adddf3>
 800da68:	4632      	mov	r2, r6
 800da6a:	463b      	mov	r3, r7
 800da6c:	f7f2 fdcc 	bl	8000608 <__aeabi_dmul>
 800da70:	a371      	add	r3, pc, #452	; (adr r3, 800dc38 <__ieee754_acos+0x2d0>)
 800da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da76:	f7f2 fc0f 	bl	8000298 <__aeabi_dsub>
 800da7a:	4632      	mov	r2, r6
 800da7c:	463b      	mov	r3, r7
 800da7e:	f7f2 fdc3 	bl	8000608 <__aeabi_dmul>
 800da82:	2200      	movs	r2, #0
 800da84:	4b75      	ldr	r3, [pc, #468]	; (800dc5c <__ieee754_acos+0x2f4>)
 800da86:	f7f2 fc09 	bl	800029c <__adddf3>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	4640      	mov	r0, r8
 800da90:	4649      	mov	r1, r9
 800da92:	f7f2 fee3 	bl	800085c <__aeabi_ddiv>
 800da96:	4622      	mov	r2, r4
 800da98:	462b      	mov	r3, r5
 800da9a:	f7f2 fdb5 	bl	8000608 <__aeabi_dmul>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	a167      	add	r1, pc, #412	; (adr r1, 800dc40 <__ieee754_acos+0x2d8>)
 800daa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daa8:	f7f2 fbf6 	bl	8000298 <__aeabi_dsub>
 800daac:	4602      	mov	r2, r0
 800daae:	460b      	mov	r3, r1
 800dab0:	4620      	mov	r0, r4
 800dab2:	4629      	mov	r1, r5
 800dab4:	f7f2 fbf0 	bl	8000298 <__aeabi_dsub>
 800dab8:	4602      	mov	r2, r0
 800daba:	460b      	mov	r3, r1
 800dabc:	a162      	add	r1, pc, #392	; (adr r1, 800dc48 <__ieee754_acos+0x2e0>)
 800dabe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dac2:	f7f2 fbe9 	bl	8000298 <__aeabi_dsub>
 800dac6:	e764      	b.n	800d992 <__ieee754_acos+0x2a>
 800dac8:	2d00      	cmp	r5, #0
 800daca:	f280 80cb 	bge.w	800dc64 <__ieee754_acos+0x2fc>
 800dace:	ee10 0a10 	vmov	r0, s0
 800dad2:	2200      	movs	r2, #0
 800dad4:	4b61      	ldr	r3, [pc, #388]	; (800dc5c <__ieee754_acos+0x2f4>)
 800dad6:	4629      	mov	r1, r5
 800dad8:	f7f2 fbe0 	bl	800029c <__adddf3>
 800dadc:	2200      	movs	r2, #0
 800dade:	4b60      	ldr	r3, [pc, #384]	; (800dc60 <__ieee754_acos+0x2f8>)
 800dae0:	f7f2 fd92 	bl	8000608 <__aeabi_dmul>
 800dae4:	a342      	add	r3, pc, #264	; (adr r3, 800dbf0 <__ieee754_acos+0x288>)
 800dae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daea:	4604      	mov	r4, r0
 800daec:	460d      	mov	r5, r1
 800daee:	f7f2 fd8b 	bl	8000608 <__aeabi_dmul>
 800daf2:	a341      	add	r3, pc, #260	; (adr r3, 800dbf8 <__ieee754_acos+0x290>)
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	f7f2 fbd0 	bl	800029c <__adddf3>
 800dafc:	4622      	mov	r2, r4
 800dafe:	462b      	mov	r3, r5
 800db00:	f7f2 fd82 	bl	8000608 <__aeabi_dmul>
 800db04:	a33e      	add	r3, pc, #248	; (adr r3, 800dc00 <__ieee754_acos+0x298>)
 800db06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0a:	f7f2 fbc5 	bl	8000298 <__aeabi_dsub>
 800db0e:	4622      	mov	r2, r4
 800db10:	462b      	mov	r3, r5
 800db12:	f7f2 fd79 	bl	8000608 <__aeabi_dmul>
 800db16:	a33c      	add	r3, pc, #240	; (adr r3, 800dc08 <__ieee754_acos+0x2a0>)
 800db18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1c:	f7f2 fbbe 	bl	800029c <__adddf3>
 800db20:	4622      	mov	r2, r4
 800db22:	462b      	mov	r3, r5
 800db24:	f7f2 fd70 	bl	8000608 <__aeabi_dmul>
 800db28:	a339      	add	r3, pc, #228	; (adr r3, 800dc10 <__ieee754_acos+0x2a8>)
 800db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2e:	f7f2 fbb3 	bl	8000298 <__aeabi_dsub>
 800db32:	4622      	mov	r2, r4
 800db34:	462b      	mov	r3, r5
 800db36:	f7f2 fd67 	bl	8000608 <__aeabi_dmul>
 800db3a:	a337      	add	r3, pc, #220	; (adr r3, 800dc18 <__ieee754_acos+0x2b0>)
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	f7f2 fbac 	bl	800029c <__adddf3>
 800db44:	4622      	mov	r2, r4
 800db46:	462b      	mov	r3, r5
 800db48:	f7f2 fd5e 	bl	8000608 <__aeabi_dmul>
 800db4c:	ec45 4b10 	vmov	d0, r4, r5
 800db50:	4680      	mov	r8, r0
 800db52:	4689      	mov	r9, r1
 800db54:	f001 f946 	bl	800ede4 <__ieee754_sqrt>
 800db58:	a331      	add	r3, pc, #196	; (adr r3, 800dc20 <__ieee754_acos+0x2b8>)
 800db5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5e:	4620      	mov	r0, r4
 800db60:	4629      	mov	r1, r5
 800db62:	ec57 6b10 	vmov	r6, r7, d0
 800db66:	f7f2 fd4f 	bl	8000608 <__aeabi_dmul>
 800db6a:	a32f      	add	r3, pc, #188	; (adr r3, 800dc28 <__ieee754_acos+0x2c0>)
 800db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db70:	f7f2 fb92 	bl	8000298 <__aeabi_dsub>
 800db74:	4622      	mov	r2, r4
 800db76:	462b      	mov	r3, r5
 800db78:	f7f2 fd46 	bl	8000608 <__aeabi_dmul>
 800db7c:	a32c      	add	r3, pc, #176	; (adr r3, 800dc30 <__ieee754_acos+0x2c8>)
 800db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db82:	f7f2 fb8b 	bl	800029c <__adddf3>
 800db86:	4622      	mov	r2, r4
 800db88:	462b      	mov	r3, r5
 800db8a:	f7f2 fd3d 	bl	8000608 <__aeabi_dmul>
 800db8e:	a32a      	add	r3, pc, #168	; (adr r3, 800dc38 <__ieee754_acos+0x2d0>)
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	f7f2 fb80 	bl	8000298 <__aeabi_dsub>
 800db98:	4622      	mov	r2, r4
 800db9a:	462b      	mov	r3, r5
 800db9c:	f7f2 fd34 	bl	8000608 <__aeabi_dmul>
 800dba0:	2200      	movs	r2, #0
 800dba2:	4b2e      	ldr	r3, [pc, #184]	; (800dc5c <__ieee754_acos+0x2f4>)
 800dba4:	f7f2 fb7a 	bl	800029c <__adddf3>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	460b      	mov	r3, r1
 800dbac:	4640      	mov	r0, r8
 800dbae:	4649      	mov	r1, r9
 800dbb0:	f7f2 fe54 	bl	800085c <__aeabi_ddiv>
 800dbb4:	4632      	mov	r2, r6
 800dbb6:	463b      	mov	r3, r7
 800dbb8:	f7f2 fd26 	bl	8000608 <__aeabi_dmul>
 800dbbc:	a320      	add	r3, pc, #128	; (adr r3, 800dc40 <__ieee754_acos+0x2d8>)
 800dbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc2:	f7f2 fb69 	bl	8000298 <__aeabi_dsub>
 800dbc6:	4632      	mov	r2, r6
 800dbc8:	463b      	mov	r3, r7
 800dbca:	f7f2 fb67 	bl	800029c <__adddf3>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	f7f2 fb63 	bl	800029c <__adddf3>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	a103      	add	r1, pc, #12	; (adr r1, 800dbe8 <__ieee754_acos+0x280>)
 800dbdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbe0:	e76f      	b.n	800dac2 <__ieee754_acos+0x15a>
 800dbe2:	bf00      	nop
 800dbe4:	f3af 8000 	nop.w
 800dbe8:	54442d18 	.word	0x54442d18
 800dbec:	400921fb 	.word	0x400921fb
 800dbf0:	0dfdf709 	.word	0x0dfdf709
 800dbf4:	3f023de1 	.word	0x3f023de1
 800dbf8:	7501b288 	.word	0x7501b288
 800dbfc:	3f49efe0 	.word	0x3f49efe0
 800dc00:	b5688f3b 	.word	0xb5688f3b
 800dc04:	3fa48228 	.word	0x3fa48228
 800dc08:	0e884455 	.word	0x0e884455
 800dc0c:	3fc9c155 	.word	0x3fc9c155
 800dc10:	03eb6f7d 	.word	0x03eb6f7d
 800dc14:	3fd4d612 	.word	0x3fd4d612
 800dc18:	55555555 	.word	0x55555555
 800dc1c:	3fc55555 	.word	0x3fc55555
 800dc20:	b12e9282 	.word	0xb12e9282
 800dc24:	3fb3b8c5 	.word	0x3fb3b8c5
 800dc28:	1b8d0159 	.word	0x1b8d0159
 800dc2c:	3fe6066c 	.word	0x3fe6066c
 800dc30:	9c598ac8 	.word	0x9c598ac8
 800dc34:	40002ae5 	.word	0x40002ae5
 800dc38:	1c8a2d4b 	.word	0x1c8a2d4b
 800dc3c:	40033a27 	.word	0x40033a27
 800dc40:	33145c07 	.word	0x33145c07
 800dc44:	3c91a626 	.word	0x3c91a626
 800dc48:	54442d18 	.word	0x54442d18
 800dc4c:	3ff921fb 	.word	0x3ff921fb
 800dc50:	3fefffff 	.word	0x3fefffff
 800dc54:	3fdfffff 	.word	0x3fdfffff
 800dc58:	3c600000 	.word	0x3c600000
 800dc5c:	3ff00000 	.word	0x3ff00000
 800dc60:	3fe00000 	.word	0x3fe00000
 800dc64:	ee10 2a10 	vmov	r2, s0
 800dc68:	462b      	mov	r3, r5
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	496a      	ldr	r1, [pc, #424]	; (800de18 <__ieee754_acos+0x4b0>)
 800dc6e:	f7f2 fb13 	bl	8000298 <__aeabi_dsub>
 800dc72:	2200      	movs	r2, #0
 800dc74:	4b69      	ldr	r3, [pc, #420]	; (800de1c <__ieee754_acos+0x4b4>)
 800dc76:	f7f2 fcc7 	bl	8000608 <__aeabi_dmul>
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	460d      	mov	r5, r1
 800dc7e:	ec45 4b10 	vmov	d0, r4, r5
 800dc82:	f001 f8af 	bl	800ede4 <__ieee754_sqrt>
 800dc86:	a34e      	add	r3, pc, #312	; (adr r3, 800ddc0 <__ieee754_acos+0x458>)
 800dc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	4629      	mov	r1, r5
 800dc90:	ec59 8b10 	vmov	r8, r9, d0
 800dc94:	f7f2 fcb8 	bl	8000608 <__aeabi_dmul>
 800dc98:	a34b      	add	r3, pc, #300	; (adr r3, 800ddc8 <__ieee754_acos+0x460>)
 800dc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9e:	f7f2 fafd 	bl	800029c <__adddf3>
 800dca2:	4622      	mov	r2, r4
 800dca4:	462b      	mov	r3, r5
 800dca6:	f7f2 fcaf 	bl	8000608 <__aeabi_dmul>
 800dcaa:	a349      	add	r3, pc, #292	; (adr r3, 800ddd0 <__ieee754_acos+0x468>)
 800dcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb0:	f7f2 faf2 	bl	8000298 <__aeabi_dsub>
 800dcb4:	4622      	mov	r2, r4
 800dcb6:	462b      	mov	r3, r5
 800dcb8:	f7f2 fca6 	bl	8000608 <__aeabi_dmul>
 800dcbc:	a346      	add	r3, pc, #280	; (adr r3, 800ddd8 <__ieee754_acos+0x470>)
 800dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc2:	f7f2 faeb 	bl	800029c <__adddf3>
 800dcc6:	4622      	mov	r2, r4
 800dcc8:	462b      	mov	r3, r5
 800dcca:	f7f2 fc9d 	bl	8000608 <__aeabi_dmul>
 800dcce:	a344      	add	r3, pc, #272	; (adr r3, 800dde0 <__ieee754_acos+0x478>)
 800dcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd4:	f7f2 fae0 	bl	8000298 <__aeabi_dsub>
 800dcd8:	4622      	mov	r2, r4
 800dcda:	462b      	mov	r3, r5
 800dcdc:	f7f2 fc94 	bl	8000608 <__aeabi_dmul>
 800dce0:	a341      	add	r3, pc, #260	; (adr r3, 800dde8 <__ieee754_acos+0x480>)
 800dce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce6:	f7f2 fad9 	bl	800029c <__adddf3>
 800dcea:	4622      	mov	r2, r4
 800dcec:	462b      	mov	r3, r5
 800dcee:	f7f2 fc8b 	bl	8000608 <__aeabi_dmul>
 800dcf2:	a33f      	add	r3, pc, #252	; (adr r3, 800ddf0 <__ieee754_acos+0x488>)
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	4682      	mov	sl, r0
 800dcfa:	468b      	mov	fp, r1
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f7f2 fc82 	bl	8000608 <__aeabi_dmul>
 800dd04:	a33c      	add	r3, pc, #240	; (adr r3, 800ddf8 <__ieee754_acos+0x490>)
 800dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0a:	f7f2 fac5 	bl	8000298 <__aeabi_dsub>
 800dd0e:	4622      	mov	r2, r4
 800dd10:	462b      	mov	r3, r5
 800dd12:	f7f2 fc79 	bl	8000608 <__aeabi_dmul>
 800dd16:	a33a      	add	r3, pc, #232	; (adr r3, 800de00 <__ieee754_acos+0x498>)
 800dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1c:	f7f2 fabe 	bl	800029c <__adddf3>
 800dd20:	4622      	mov	r2, r4
 800dd22:	462b      	mov	r3, r5
 800dd24:	f7f2 fc70 	bl	8000608 <__aeabi_dmul>
 800dd28:	a337      	add	r3, pc, #220	; (adr r3, 800de08 <__ieee754_acos+0x4a0>)
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	f7f2 fab3 	bl	8000298 <__aeabi_dsub>
 800dd32:	4622      	mov	r2, r4
 800dd34:	462b      	mov	r3, r5
 800dd36:	f7f2 fc67 	bl	8000608 <__aeabi_dmul>
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	4b36      	ldr	r3, [pc, #216]	; (800de18 <__ieee754_acos+0x4b0>)
 800dd3e:	f7f2 faad 	bl	800029c <__adddf3>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	4650      	mov	r0, sl
 800dd48:	4659      	mov	r1, fp
 800dd4a:	f7f2 fd87 	bl	800085c <__aeabi_ddiv>
 800dd4e:	4642      	mov	r2, r8
 800dd50:	464b      	mov	r3, r9
 800dd52:	f7f2 fc59 	bl	8000608 <__aeabi_dmul>
 800dd56:	2600      	movs	r6, #0
 800dd58:	4682      	mov	sl, r0
 800dd5a:	468b      	mov	fp, r1
 800dd5c:	4632      	mov	r2, r6
 800dd5e:	464b      	mov	r3, r9
 800dd60:	4630      	mov	r0, r6
 800dd62:	4649      	mov	r1, r9
 800dd64:	f7f2 fc50 	bl	8000608 <__aeabi_dmul>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	4629      	mov	r1, r5
 800dd70:	f7f2 fa92 	bl	8000298 <__aeabi_dsub>
 800dd74:	4632      	mov	r2, r6
 800dd76:	4604      	mov	r4, r0
 800dd78:	460d      	mov	r5, r1
 800dd7a:	464b      	mov	r3, r9
 800dd7c:	4640      	mov	r0, r8
 800dd7e:	4649      	mov	r1, r9
 800dd80:	f7f2 fa8c 	bl	800029c <__adddf3>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4620      	mov	r0, r4
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	f7f2 fd66 	bl	800085c <__aeabi_ddiv>
 800dd90:	4602      	mov	r2, r0
 800dd92:	460b      	mov	r3, r1
 800dd94:	4650      	mov	r0, sl
 800dd96:	4659      	mov	r1, fp
 800dd98:	f7f2 fa80 	bl	800029c <__adddf3>
 800dd9c:	4632      	mov	r2, r6
 800dd9e:	464b      	mov	r3, r9
 800dda0:	f7f2 fa7c 	bl	800029c <__adddf3>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	f7f2 fa78 	bl	800029c <__adddf3>
 800ddac:	e5f1      	b.n	800d992 <__ieee754_acos+0x2a>
 800ddae:	2000      	movs	r0, #0
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	e5ee      	b.n	800d992 <__ieee754_acos+0x2a>
 800ddb4:	a116      	add	r1, pc, #88	; (adr r1, 800de10 <__ieee754_acos+0x4a8>)
 800ddb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddba:	e5ea      	b.n	800d992 <__ieee754_acos+0x2a>
 800ddbc:	f3af 8000 	nop.w
 800ddc0:	0dfdf709 	.word	0x0dfdf709
 800ddc4:	3f023de1 	.word	0x3f023de1
 800ddc8:	7501b288 	.word	0x7501b288
 800ddcc:	3f49efe0 	.word	0x3f49efe0
 800ddd0:	b5688f3b 	.word	0xb5688f3b
 800ddd4:	3fa48228 	.word	0x3fa48228
 800ddd8:	0e884455 	.word	0x0e884455
 800dddc:	3fc9c155 	.word	0x3fc9c155
 800dde0:	03eb6f7d 	.word	0x03eb6f7d
 800dde4:	3fd4d612 	.word	0x3fd4d612
 800dde8:	55555555 	.word	0x55555555
 800ddec:	3fc55555 	.word	0x3fc55555
 800ddf0:	b12e9282 	.word	0xb12e9282
 800ddf4:	3fb3b8c5 	.word	0x3fb3b8c5
 800ddf8:	1b8d0159 	.word	0x1b8d0159
 800ddfc:	3fe6066c 	.word	0x3fe6066c
 800de00:	9c598ac8 	.word	0x9c598ac8
 800de04:	40002ae5 	.word	0x40002ae5
 800de08:	1c8a2d4b 	.word	0x1c8a2d4b
 800de0c:	40033a27 	.word	0x40033a27
 800de10:	54442d18 	.word	0x54442d18
 800de14:	3ff921fb 	.word	0x3ff921fb
 800de18:	3ff00000 	.word	0x3ff00000
 800de1c:	3fe00000 	.word	0x3fe00000

0800de20 <__ieee754_atan2>:
 800de20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de24:	ec57 6b11 	vmov	r6, r7, d1
 800de28:	4273      	negs	r3, r6
 800de2a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800de2e:	4333      	orrs	r3, r6
 800de30:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800dfd8 <__ieee754_atan2+0x1b8>
 800de34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800de38:	4573      	cmp	r3, lr
 800de3a:	ec51 0b10 	vmov	r0, r1, d0
 800de3e:	ee11 8a10 	vmov	r8, s2
 800de42:	d80a      	bhi.n	800de5a <__ieee754_atan2+0x3a>
 800de44:	4244      	negs	r4, r0
 800de46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de4a:	4304      	orrs	r4, r0
 800de4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800de50:	4574      	cmp	r4, lr
 800de52:	468c      	mov	ip, r1
 800de54:	ee10 9a10 	vmov	r9, s0
 800de58:	d907      	bls.n	800de6a <__ieee754_atan2+0x4a>
 800de5a:	4632      	mov	r2, r6
 800de5c:	463b      	mov	r3, r7
 800de5e:	f7f2 fa1d 	bl	800029c <__adddf3>
 800de62:	ec41 0b10 	vmov	d0, r0, r1
 800de66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800de6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800de72:	4334      	orrs	r4, r6
 800de74:	d103      	bne.n	800de7e <__ieee754_atan2+0x5e>
 800de76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de7a:	f001 bd29 	b.w	800f8d0 <atan>
 800de7e:	17bc      	asrs	r4, r7, #30
 800de80:	f004 0402 	and.w	r4, r4, #2
 800de84:	ea53 0909 	orrs.w	r9, r3, r9
 800de88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800de8c:	d107      	bne.n	800de9e <__ieee754_atan2+0x7e>
 800de8e:	2c02      	cmp	r4, #2
 800de90:	d073      	beq.n	800df7a <__ieee754_atan2+0x15a>
 800de92:	2c03      	cmp	r4, #3
 800de94:	d1e5      	bne.n	800de62 <__ieee754_atan2+0x42>
 800de96:	a13e      	add	r1, pc, #248	; (adr r1, 800df90 <__ieee754_atan2+0x170>)
 800de98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de9c:	e7e1      	b.n	800de62 <__ieee754_atan2+0x42>
 800de9e:	ea52 0808 	orrs.w	r8, r2, r8
 800dea2:	d106      	bne.n	800deb2 <__ieee754_atan2+0x92>
 800dea4:	f1bc 0f00 	cmp.w	ip, #0
 800dea8:	da6b      	bge.n	800df82 <__ieee754_atan2+0x162>
 800deaa:	a13b      	add	r1, pc, #236	; (adr r1, 800df98 <__ieee754_atan2+0x178>)
 800deac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deb0:	e7d7      	b.n	800de62 <__ieee754_atan2+0x42>
 800deb2:	4572      	cmp	r2, lr
 800deb4:	d120      	bne.n	800def8 <__ieee754_atan2+0xd8>
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d111      	bne.n	800dede <__ieee754_atan2+0xbe>
 800deba:	2c02      	cmp	r4, #2
 800debc:	d007      	beq.n	800dece <__ieee754_atan2+0xae>
 800debe:	2c03      	cmp	r4, #3
 800dec0:	d009      	beq.n	800ded6 <__ieee754_atan2+0xb6>
 800dec2:	2c01      	cmp	r4, #1
 800dec4:	d155      	bne.n	800df72 <__ieee754_atan2+0x152>
 800dec6:	a136      	add	r1, pc, #216	; (adr r1, 800dfa0 <__ieee754_atan2+0x180>)
 800dec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800decc:	e7c9      	b.n	800de62 <__ieee754_atan2+0x42>
 800dece:	a136      	add	r1, pc, #216	; (adr r1, 800dfa8 <__ieee754_atan2+0x188>)
 800ded0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ded4:	e7c5      	b.n	800de62 <__ieee754_atan2+0x42>
 800ded6:	a136      	add	r1, pc, #216	; (adr r1, 800dfb0 <__ieee754_atan2+0x190>)
 800ded8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dedc:	e7c1      	b.n	800de62 <__ieee754_atan2+0x42>
 800dede:	2c02      	cmp	r4, #2
 800dee0:	d04b      	beq.n	800df7a <__ieee754_atan2+0x15a>
 800dee2:	2c03      	cmp	r4, #3
 800dee4:	d0d7      	beq.n	800de96 <__ieee754_atan2+0x76>
 800dee6:	2c01      	cmp	r4, #1
 800dee8:	f04f 0000 	mov.w	r0, #0
 800deec:	d102      	bne.n	800def4 <__ieee754_atan2+0xd4>
 800deee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800def2:	e7b6      	b.n	800de62 <__ieee754_atan2+0x42>
 800def4:	2100      	movs	r1, #0
 800def6:	e7b4      	b.n	800de62 <__ieee754_atan2+0x42>
 800def8:	4573      	cmp	r3, lr
 800defa:	d0d3      	beq.n	800dea4 <__ieee754_atan2+0x84>
 800defc:	1a9b      	subs	r3, r3, r2
 800defe:	151b      	asrs	r3, r3, #20
 800df00:	2b3c      	cmp	r3, #60	; 0x3c
 800df02:	dc1e      	bgt.n	800df42 <__ieee754_atan2+0x122>
 800df04:	2f00      	cmp	r7, #0
 800df06:	da01      	bge.n	800df0c <__ieee754_atan2+0xec>
 800df08:	333c      	adds	r3, #60	; 0x3c
 800df0a:	db1e      	blt.n	800df4a <__ieee754_atan2+0x12a>
 800df0c:	4632      	mov	r2, r6
 800df0e:	463b      	mov	r3, r7
 800df10:	f7f2 fca4 	bl	800085c <__aeabi_ddiv>
 800df14:	ec41 0b10 	vmov	d0, r0, r1
 800df18:	f001 fe7a 	bl	800fc10 <fabs>
 800df1c:	f001 fcd8 	bl	800f8d0 <atan>
 800df20:	ec51 0b10 	vmov	r0, r1, d0
 800df24:	2c01      	cmp	r4, #1
 800df26:	d013      	beq.n	800df50 <__ieee754_atan2+0x130>
 800df28:	2c02      	cmp	r4, #2
 800df2a:	d015      	beq.n	800df58 <__ieee754_atan2+0x138>
 800df2c:	2c00      	cmp	r4, #0
 800df2e:	d098      	beq.n	800de62 <__ieee754_atan2+0x42>
 800df30:	a321      	add	r3, pc, #132	; (adr r3, 800dfb8 <__ieee754_atan2+0x198>)
 800df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df36:	f7f2 f9af 	bl	8000298 <__aeabi_dsub>
 800df3a:	a321      	add	r3, pc, #132	; (adr r3, 800dfc0 <__ieee754_atan2+0x1a0>)
 800df3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df40:	e014      	b.n	800df6c <__ieee754_atan2+0x14c>
 800df42:	a121      	add	r1, pc, #132	; (adr r1, 800dfc8 <__ieee754_atan2+0x1a8>)
 800df44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df48:	e7ec      	b.n	800df24 <__ieee754_atan2+0x104>
 800df4a:	2000      	movs	r0, #0
 800df4c:	2100      	movs	r1, #0
 800df4e:	e7e9      	b.n	800df24 <__ieee754_atan2+0x104>
 800df50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df54:	4619      	mov	r1, r3
 800df56:	e784      	b.n	800de62 <__ieee754_atan2+0x42>
 800df58:	a317      	add	r3, pc, #92	; (adr r3, 800dfb8 <__ieee754_atan2+0x198>)
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	f7f2 f99b 	bl	8000298 <__aeabi_dsub>
 800df62:	4602      	mov	r2, r0
 800df64:	460b      	mov	r3, r1
 800df66:	a116      	add	r1, pc, #88	; (adr r1, 800dfc0 <__ieee754_atan2+0x1a0>)
 800df68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df6c:	f7f2 f994 	bl	8000298 <__aeabi_dsub>
 800df70:	e777      	b.n	800de62 <__ieee754_atan2+0x42>
 800df72:	a117      	add	r1, pc, #92	; (adr r1, 800dfd0 <__ieee754_atan2+0x1b0>)
 800df74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df78:	e773      	b.n	800de62 <__ieee754_atan2+0x42>
 800df7a:	a111      	add	r1, pc, #68	; (adr r1, 800dfc0 <__ieee754_atan2+0x1a0>)
 800df7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df80:	e76f      	b.n	800de62 <__ieee754_atan2+0x42>
 800df82:	a111      	add	r1, pc, #68	; (adr r1, 800dfc8 <__ieee754_atan2+0x1a8>)
 800df84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df88:	e76b      	b.n	800de62 <__ieee754_atan2+0x42>
 800df8a:	bf00      	nop
 800df8c:	f3af 8000 	nop.w
 800df90:	54442d18 	.word	0x54442d18
 800df94:	c00921fb 	.word	0xc00921fb
 800df98:	54442d18 	.word	0x54442d18
 800df9c:	bff921fb 	.word	0xbff921fb
 800dfa0:	54442d18 	.word	0x54442d18
 800dfa4:	bfe921fb 	.word	0xbfe921fb
 800dfa8:	7f3321d2 	.word	0x7f3321d2
 800dfac:	4002d97c 	.word	0x4002d97c
 800dfb0:	7f3321d2 	.word	0x7f3321d2
 800dfb4:	c002d97c 	.word	0xc002d97c
 800dfb8:	33145c07 	.word	0x33145c07
 800dfbc:	3ca1a626 	.word	0x3ca1a626
 800dfc0:	54442d18 	.word	0x54442d18
 800dfc4:	400921fb 	.word	0x400921fb
 800dfc8:	54442d18 	.word	0x54442d18
 800dfcc:	3ff921fb 	.word	0x3ff921fb
 800dfd0:	54442d18 	.word	0x54442d18
 800dfd4:	3fe921fb 	.word	0x3fe921fb
 800dfd8:	7ff00000 	.word	0x7ff00000
 800dfdc:	00000000 	.word	0x00000000

0800dfe0 <__ieee754_pow>:
 800dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	b091      	sub	sp, #68	; 0x44
 800dfe6:	ed8d 1b00 	vstr	d1, [sp]
 800dfea:	e9dd 2900 	ldrd	r2, r9, [sp]
 800dfee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800dff2:	ea58 0302 	orrs.w	r3, r8, r2
 800dff6:	ec57 6b10 	vmov	r6, r7, d0
 800dffa:	f000 84be 	beq.w	800e97a <__ieee754_pow+0x99a>
 800dffe:	4b7a      	ldr	r3, [pc, #488]	; (800e1e8 <__ieee754_pow+0x208>)
 800e000:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e004:	429c      	cmp	r4, r3
 800e006:	463d      	mov	r5, r7
 800e008:	ee10 aa10 	vmov	sl, s0
 800e00c:	dc09      	bgt.n	800e022 <__ieee754_pow+0x42>
 800e00e:	d103      	bne.n	800e018 <__ieee754_pow+0x38>
 800e010:	b93e      	cbnz	r6, 800e022 <__ieee754_pow+0x42>
 800e012:	45a0      	cmp	r8, r4
 800e014:	dc0d      	bgt.n	800e032 <__ieee754_pow+0x52>
 800e016:	e001      	b.n	800e01c <__ieee754_pow+0x3c>
 800e018:	4598      	cmp	r8, r3
 800e01a:	dc02      	bgt.n	800e022 <__ieee754_pow+0x42>
 800e01c:	4598      	cmp	r8, r3
 800e01e:	d10e      	bne.n	800e03e <__ieee754_pow+0x5e>
 800e020:	b16a      	cbz	r2, 800e03e <__ieee754_pow+0x5e>
 800e022:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e026:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e02a:	ea54 030a 	orrs.w	r3, r4, sl
 800e02e:	f000 84a4 	beq.w	800e97a <__ieee754_pow+0x99a>
 800e032:	486e      	ldr	r0, [pc, #440]	; (800e1ec <__ieee754_pow+0x20c>)
 800e034:	b011      	add	sp, #68	; 0x44
 800e036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03a:	f001 be85 	b.w	800fd48 <nan>
 800e03e:	2d00      	cmp	r5, #0
 800e040:	da53      	bge.n	800e0ea <__ieee754_pow+0x10a>
 800e042:	4b6b      	ldr	r3, [pc, #428]	; (800e1f0 <__ieee754_pow+0x210>)
 800e044:	4598      	cmp	r8, r3
 800e046:	dc4d      	bgt.n	800e0e4 <__ieee754_pow+0x104>
 800e048:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e04c:	4598      	cmp	r8, r3
 800e04e:	dd4c      	ble.n	800e0ea <__ieee754_pow+0x10a>
 800e050:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e054:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e058:	2b14      	cmp	r3, #20
 800e05a:	dd26      	ble.n	800e0aa <__ieee754_pow+0xca>
 800e05c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e060:	fa22 f103 	lsr.w	r1, r2, r3
 800e064:	fa01 f303 	lsl.w	r3, r1, r3
 800e068:	4293      	cmp	r3, r2
 800e06a:	d13e      	bne.n	800e0ea <__ieee754_pow+0x10a>
 800e06c:	f001 0101 	and.w	r1, r1, #1
 800e070:	f1c1 0b02 	rsb	fp, r1, #2
 800e074:	2a00      	cmp	r2, #0
 800e076:	d15b      	bne.n	800e130 <__ieee754_pow+0x150>
 800e078:	4b5b      	ldr	r3, [pc, #364]	; (800e1e8 <__ieee754_pow+0x208>)
 800e07a:	4598      	cmp	r8, r3
 800e07c:	d124      	bne.n	800e0c8 <__ieee754_pow+0xe8>
 800e07e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e082:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e086:	ea53 030a 	orrs.w	r3, r3, sl
 800e08a:	f000 8476 	beq.w	800e97a <__ieee754_pow+0x99a>
 800e08e:	4b59      	ldr	r3, [pc, #356]	; (800e1f4 <__ieee754_pow+0x214>)
 800e090:	429c      	cmp	r4, r3
 800e092:	dd2d      	ble.n	800e0f0 <__ieee754_pow+0x110>
 800e094:	f1b9 0f00 	cmp.w	r9, #0
 800e098:	f280 8473 	bge.w	800e982 <__ieee754_pow+0x9a2>
 800e09c:	2000      	movs	r0, #0
 800e09e:	2100      	movs	r1, #0
 800e0a0:	ec41 0b10 	vmov	d0, r0, r1
 800e0a4:	b011      	add	sp, #68	; 0x44
 800e0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0aa:	2a00      	cmp	r2, #0
 800e0ac:	d13e      	bne.n	800e12c <__ieee754_pow+0x14c>
 800e0ae:	f1c3 0314 	rsb	r3, r3, #20
 800e0b2:	fa48 f103 	asr.w	r1, r8, r3
 800e0b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ba:	4543      	cmp	r3, r8
 800e0bc:	f040 8469 	bne.w	800e992 <__ieee754_pow+0x9b2>
 800e0c0:	f001 0101 	and.w	r1, r1, #1
 800e0c4:	f1c1 0b02 	rsb	fp, r1, #2
 800e0c8:	4b4b      	ldr	r3, [pc, #300]	; (800e1f8 <__ieee754_pow+0x218>)
 800e0ca:	4598      	cmp	r8, r3
 800e0cc:	d118      	bne.n	800e100 <__ieee754_pow+0x120>
 800e0ce:	f1b9 0f00 	cmp.w	r9, #0
 800e0d2:	f280 845a 	bge.w	800e98a <__ieee754_pow+0x9aa>
 800e0d6:	4948      	ldr	r1, [pc, #288]	; (800e1f8 <__ieee754_pow+0x218>)
 800e0d8:	4632      	mov	r2, r6
 800e0da:	463b      	mov	r3, r7
 800e0dc:	2000      	movs	r0, #0
 800e0de:	f7f2 fbbd 	bl	800085c <__aeabi_ddiv>
 800e0e2:	e7dd      	b.n	800e0a0 <__ieee754_pow+0xc0>
 800e0e4:	f04f 0b02 	mov.w	fp, #2
 800e0e8:	e7c4      	b.n	800e074 <__ieee754_pow+0x94>
 800e0ea:	f04f 0b00 	mov.w	fp, #0
 800e0ee:	e7c1      	b.n	800e074 <__ieee754_pow+0x94>
 800e0f0:	f1b9 0f00 	cmp.w	r9, #0
 800e0f4:	dad2      	bge.n	800e09c <__ieee754_pow+0xbc>
 800e0f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e0fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e0fe:	e7cf      	b.n	800e0a0 <__ieee754_pow+0xc0>
 800e100:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e104:	d106      	bne.n	800e114 <__ieee754_pow+0x134>
 800e106:	4632      	mov	r2, r6
 800e108:	463b      	mov	r3, r7
 800e10a:	4610      	mov	r0, r2
 800e10c:	4619      	mov	r1, r3
 800e10e:	f7f2 fa7b 	bl	8000608 <__aeabi_dmul>
 800e112:	e7c5      	b.n	800e0a0 <__ieee754_pow+0xc0>
 800e114:	4b39      	ldr	r3, [pc, #228]	; (800e1fc <__ieee754_pow+0x21c>)
 800e116:	4599      	cmp	r9, r3
 800e118:	d10a      	bne.n	800e130 <__ieee754_pow+0x150>
 800e11a:	2d00      	cmp	r5, #0
 800e11c:	db08      	blt.n	800e130 <__ieee754_pow+0x150>
 800e11e:	ec47 6b10 	vmov	d0, r6, r7
 800e122:	b011      	add	sp, #68	; 0x44
 800e124:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e128:	f000 be5c 	b.w	800ede4 <__ieee754_sqrt>
 800e12c:	f04f 0b00 	mov.w	fp, #0
 800e130:	ec47 6b10 	vmov	d0, r6, r7
 800e134:	f001 fd6c 	bl	800fc10 <fabs>
 800e138:	ec51 0b10 	vmov	r0, r1, d0
 800e13c:	f1ba 0f00 	cmp.w	sl, #0
 800e140:	d127      	bne.n	800e192 <__ieee754_pow+0x1b2>
 800e142:	b124      	cbz	r4, 800e14e <__ieee754_pow+0x16e>
 800e144:	4b2c      	ldr	r3, [pc, #176]	; (800e1f8 <__ieee754_pow+0x218>)
 800e146:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d121      	bne.n	800e192 <__ieee754_pow+0x1b2>
 800e14e:	f1b9 0f00 	cmp.w	r9, #0
 800e152:	da05      	bge.n	800e160 <__ieee754_pow+0x180>
 800e154:	4602      	mov	r2, r0
 800e156:	460b      	mov	r3, r1
 800e158:	2000      	movs	r0, #0
 800e15a:	4927      	ldr	r1, [pc, #156]	; (800e1f8 <__ieee754_pow+0x218>)
 800e15c:	f7f2 fb7e 	bl	800085c <__aeabi_ddiv>
 800e160:	2d00      	cmp	r5, #0
 800e162:	da9d      	bge.n	800e0a0 <__ieee754_pow+0xc0>
 800e164:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e168:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e16c:	ea54 030b 	orrs.w	r3, r4, fp
 800e170:	d108      	bne.n	800e184 <__ieee754_pow+0x1a4>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	4610      	mov	r0, r2
 800e178:	4619      	mov	r1, r3
 800e17a:	f7f2 f88d 	bl	8000298 <__aeabi_dsub>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	e7ac      	b.n	800e0de <__ieee754_pow+0xfe>
 800e184:	f1bb 0f01 	cmp.w	fp, #1
 800e188:	d18a      	bne.n	800e0a0 <__ieee754_pow+0xc0>
 800e18a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e18e:	4619      	mov	r1, r3
 800e190:	e786      	b.n	800e0a0 <__ieee754_pow+0xc0>
 800e192:	0fed      	lsrs	r5, r5, #31
 800e194:	1e6b      	subs	r3, r5, #1
 800e196:	930d      	str	r3, [sp, #52]	; 0x34
 800e198:	ea5b 0303 	orrs.w	r3, fp, r3
 800e19c:	d102      	bne.n	800e1a4 <__ieee754_pow+0x1c4>
 800e19e:	4632      	mov	r2, r6
 800e1a0:	463b      	mov	r3, r7
 800e1a2:	e7e8      	b.n	800e176 <__ieee754_pow+0x196>
 800e1a4:	4b16      	ldr	r3, [pc, #88]	; (800e200 <__ieee754_pow+0x220>)
 800e1a6:	4598      	cmp	r8, r3
 800e1a8:	f340 80fe 	ble.w	800e3a8 <__ieee754_pow+0x3c8>
 800e1ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e1b0:	4598      	cmp	r8, r3
 800e1b2:	dd0a      	ble.n	800e1ca <__ieee754_pow+0x1ea>
 800e1b4:	4b0f      	ldr	r3, [pc, #60]	; (800e1f4 <__ieee754_pow+0x214>)
 800e1b6:	429c      	cmp	r4, r3
 800e1b8:	dc0d      	bgt.n	800e1d6 <__ieee754_pow+0x1f6>
 800e1ba:	f1b9 0f00 	cmp.w	r9, #0
 800e1be:	f6bf af6d 	bge.w	800e09c <__ieee754_pow+0xbc>
 800e1c2:	a307      	add	r3, pc, #28	; (adr r3, 800e1e0 <__ieee754_pow+0x200>)
 800e1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c8:	e79f      	b.n	800e10a <__ieee754_pow+0x12a>
 800e1ca:	4b0e      	ldr	r3, [pc, #56]	; (800e204 <__ieee754_pow+0x224>)
 800e1cc:	429c      	cmp	r4, r3
 800e1ce:	ddf4      	ble.n	800e1ba <__ieee754_pow+0x1da>
 800e1d0:	4b09      	ldr	r3, [pc, #36]	; (800e1f8 <__ieee754_pow+0x218>)
 800e1d2:	429c      	cmp	r4, r3
 800e1d4:	dd18      	ble.n	800e208 <__ieee754_pow+0x228>
 800e1d6:	f1b9 0f00 	cmp.w	r9, #0
 800e1da:	dcf2      	bgt.n	800e1c2 <__ieee754_pow+0x1e2>
 800e1dc:	e75e      	b.n	800e09c <__ieee754_pow+0xbc>
 800e1de:	bf00      	nop
 800e1e0:	8800759c 	.word	0x8800759c
 800e1e4:	7e37e43c 	.word	0x7e37e43c
 800e1e8:	7ff00000 	.word	0x7ff00000
 800e1ec:	08010289 	.word	0x08010289
 800e1f0:	433fffff 	.word	0x433fffff
 800e1f4:	3fefffff 	.word	0x3fefffff
 800e1f8:	3ff00000 	.word	0x3ff00000
 800e1fc:	3fe00000 	.word	0x3fe00000
 800e200:	41e00000 	.word	0x41e00000
 800e204:	3feffffe 	.word	0x3feffffe
 800e208:	2200      	movs	r2, #0
 800e20a:	4b63      	ldr	r3, [pc, #396]	; (800e398 <__ieee754_pow+0x3b8>)
 800e20c:	f7f2 f844 	bl	8000298 <__aeabi_dsub>
 800e210:	a355      	add	r3, pc, #340	; (adr r3, 800e368 <__ieee754_pow+0x388>)
 800e212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e216:	4604      	mov	r4, r0
 800e218:	460d      	mov	r5, r1
 800e21a:	f7f2 f9f5 	bl	8000608 <__aeabi_dmul>
 800e21e:	a354      	add	r3, pc, #336	; (adr r3, 800e370 <__ieee754_pow+0x390>)
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	4606      	mov	r6, r0
 800e226:	460f      	mov	r7, r1
 800e228:	4620      	mov	r0, r4
 800e22a:	4629      	mov	r1, r5
 800e22c:	f7f2 f9ec 	bl	8000608 <__aeabi_dmul>
 800e230:	2200      	movs	r2, #0
 800e232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e236:	4b59      	ldr	r3, [pc, #356]	; (800e39c <__ieee754_pow+0x3bc>)
 800e238:	4620      	mov	r0, r4
 800e23a:	4629      	mov	r1, r5
 800e23c:	f7f2 f9e4 	bl	8000608 <__aeabi_dmul>
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	a14c      	add	r1, pc, #304	; (adr r1, 800e378 <__ieee754_pow+0x398>)
 800e246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e24a:	f7f2 f825 	bl	8000298 <__aeabi_dsub>
 800e24e:	4622      	mov	r2, r4
 800e250:	462b      	mov	r3, r5
 800e252:	f7f2 f9d9 	bl	8000608 <__aeabi_dmul>
 800e256:	4602      	mov	r2, r0
 800e258:	460b      	mov	r3, r1
 800e25a:	2000      	movs	r0, #0
 800e25c:	4950      	ldr	r1, [pc, #320]	; (800e3a0 <__ieee754_pow+0x3c0>)
 800e25e:	f7f2 f81b 	bl	8000298 <__aeabi_dsub>
 800e262:	4622      	mov	r2, r4
 800e264:	462b      	mov	r3, r5
 800e266:	4680      	mov	r8, r0
 800e268:	4689      	mov	r9, r1
 800e26a:	4620      	mov	r0, r4
 800e26c:	4629      	mov	r1, r5
 800e26e:	f7f2 f9cb 	bl	8000608 <__aeabi_dmul>
 800e272:	4602      	mov	r2, r0
 800e274:	460b      	mov	r3, r1
 800e276:	4640      	mov	r0, r8
 800e278:	4649      	mov	r1, r9
 800e27a:	f7f2 f9c5 	bl	8000608 <__aeabi_dmul>
 800e27e:	a340      	add	r3, pc, #256	; (adr r3, 800e380 <__ieee754_pow+0x3a0>)
 800e280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e284:	f7f2 f9c0 	bl	8000608 <__aeabi_dmul>
 800e288:	4602      	mov	r2, r0
 800e28a:	460b      	mov	r3, r1
 800e28c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e290:	f7f2 f802 	bl	8000298 <__aeabi_dsub>
 800e294:	4602      	mov	r2, r0
 800e296:	460b      	mov	r3, r1
 800e298:	4604      	mov	r4, r0
 800e29a:	460d      	mov	r5, r1
 800e29c:	4630      	mov	r0, r6
 800e29e:	4639      	mov	r1, r7
 800e2a0:	f7f1 fffc 	bl	800029c <__adddf3>
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2aa:	4632      	mov	r2, r6
 800e2ac:	463b      	mov	r3, r7
 800e2ae:	f7f1 fff3 	bl	8000298 <__aeabi_dsub>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	4629      	mov	r1, r5
 800e2ba:	f7f1 ffed 	bl	8000298 <__aeabi_dsub>
 800e2be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2c0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	460f      	mov	r7, r1
 800e2ca:	f040 81eb 	bne.w	800e6a4 <__ieee754_pow+0x6c4>
 800e2ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e388 <__ieee754_pow+0x3a8>
 800e2d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e2d6:	2400      	movs	r4, #0
 800e2d8:	4622      	mov	r2, r4
 800e2da:	462b      	mov	r3, r5
 800e2dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e2e4:	f7f1 ffd8 	bl	8000298 <__aeabi_dsub>
 800e2e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2ec:	f7f2 f98c 	bl	8000608 <__aeabi_dmul>
 800e2f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2f4:	4680      	mov	r8, r0
 800e2f6:	4689      	mov	r9, r1
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	4639      	mov	r1, r7
 800e2fc:	f7f2 f984 	bl	8000608 <__aeabi_dmul>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	4640      	mov	r0, r8
 800e306:	4649      	mov	r1, r9
 800e308:	f7f1 ffc8 	bl	800029c <__adddf3>
 800e30c:	4622      	mov	r2, r4
 800e30e:	462b      	mov	r3, r5
 800e310:	4680      	mov	r8, r0
 800e312:	4689      	mov	r9, r1
 800e314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e318:	f7f2 f976 	bl	8000608 <__aeabi_dmul>
 800e31c:	460b      	mov	r3, r1
 800e31e:	4604      	mov	r4, r0
 800e320:	460d      	mov	r5, r1
 800e322:	4602      	mov	r2, r0
 800e324:	4649      	mov	r1, r9
 800e326:	4640      	mov	r0, r8
 800e328:	e9cd 4500 	strd	r4, r5, [sp]
 800e32c:	f7f1 ffb6 	bl	800029c <__adddf3>
 800e330:	4b1c      	ldr	r3, [pc, #112]	; (800e3a4 <__ieee754_pow+0x3c4>)
 800e332:	4299      	cmp	r1, r3
 800e334:	4606      	mov	r6, r0
 800e336:	460f      	mov	r7, r1
 800e338:	468b      	mov	fp, r1
 800e33a:	f340 82f7 	ble.w	800e92c <__ieee754_pow+0x94c>
 800e33e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e342:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e346:	4303      	orrs	r3, r0
 800e348:	f000 81ea 	beq.w	800e720 <__ieee754_pow+0x740>
 800e34c:	a310      	add	r3, pc, #64	; (adr r3, 800e390 <__ieee754_pow+0x3b0>)
 800e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e356:	f7f2 f957 	bl	8000608 <__aeabi_dmul>
 800e35a:	a30d      	add	r3, pc, #52	; (adr r3, 800e390 <__ieee754_pow+0x3b0>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	e6d5      	b.n	800e10e <__ieee754_pow+0x12e>
 800e362:	bf00      	nop
 800e364:	f3af 8000 	nop.w
 800e368:	60000000 	.word	0x60000000
 800e36c:	3ff71547 	.word	0x3ff71547
 800e370:	f85ddf44 	.word	0xf85ddf44
 800e374:	3e54ae0b 	.word	0x3e54ae0b
 800e378:	55555555 	.word	0x55555555
 800e37c:	3fd55555 	.word	0x3fd55555
 800e380:	652b82fe 	.word	0x652b82fe
 800e384:	3ff71547 	.word	0x3ff71547
 800e388:	00000000 	.word	0x00000000
 800e38c:	bff00000 	.word	0xbff00000
 800e390:	8800759c 	.word	0x8800759c
 800e394:	7e37e43c 	.word	0x7e37e43c
 800e398:	3ff00000 	.word	0x3ff00000
 800e39c:	3fd00000 	.word	0x3fd00000
 800e3a0:	3fe00000 	.word	0x3fe00000
 800e3a4:	408fffff 	.word	0x408fffff
 800e3a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e3ac:	f04f 0200 	mov.w	r2, #0
 800e3b0:	da05      	bge.n	800e3be <__ieee754_pow+0x3de>
 800e3b2:	4bd3      	ldr	r3, [pc, #844]	; (800e700 <__ieee754_pow+0x720>)
 800e3b4:	f7f2 f928 	bl	8000608 <__aeabi_dmul>
 800e3b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e3bc:	460c      	mov	r4, r1
 800e3be:	1523      	asrs	r3, r4, #20
 800e3c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e3c4:	4413      	add	r3, r2
 800e3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3c8:	4bce      	ldr	r3, [pc, #824]	; (800e704 <__ieee754_pow+0x724>)
 800e3ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e3ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e3d2:	429c      	cmp	r4, r3
 800e3d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e3d8:	dd08      	ble.n	800e3ec <__ieee754_pow+0x40c>
 800e3da:	4bcb      	ldr	r3, [pc, #812]	; (800e708 <__ieee754_pow+0x728>)
 800e3dc:	429c      	cmp	r4, r3
 800e3de:	f340 815e 	ble.w	800e69e <__ieee754_pow+0x6be>
 800e3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e3ec:	f04f 0a00 	mov.w	sl, #0
 800e3f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e3f4:	930c      	str	r3, [sp, #48]	; 0x30
 800e3f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3f8:	4bc4      	ldr	r3, [pc, #784]	; (800e70c <__ieee754_pow+0x72c>)
 800e3fa:	4413      	add	r3, r2
 800e3fc:	ed93 7b00 	vldr	d7, [r3]
 800e400:	4629      	mov	r1, r5
 800e402:	ec53 2b17 	vmov	r2, r3, d7
 800e406:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e40a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e40e:	f7f1 ff43 	bl	8000298 <__aeabi_dsub>
 800e412:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e416:	4606      	mov	r6, r0
 800e418:	460f      	mov	r7, r1
 800e41a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e41e:	f7f1 ff3d 	bl	800029c <__adddf3>
 800e422:	4602      	mov	r2, r0
 800e424:	460b      	mov	r3, r1
 800e426:	2000      	movs	r0, #0
 800e428:	49b9      	ldr	r1, [pc, #740]	; (800e710 <__ieee754_pow+0x730>)
 800e42a:	f7f2 fa17 	bl	800085c <__aeabi_ddiv>
 800e42e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4630      	mov	r0, r6
 800e438:	4639      	mov	r1, r7
 800e43a:	f7f2 f8e5 	bl	8000608 <__aeabi_dmul>
 800e43e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e442:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e446:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e44a:	2300      	movs	r3, #0
 800e44c:	9302      	str	r3, [sp, #8]
 800e44e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e452:	106d      	asrs	r5, r5, #1
 800e454:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e458:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e45c:	2200      	movs	r2, #0
 800e45e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e462:	4640      	mov	r0, r8
 800e464:	4649      	mov	r1, r9
 800e466:	4614      	mov	r4, r2
 800e468:	461d      	mov	r5, r3
 800e46a:	f7f2 f8cd 	bl	8000608 <__aeabi_dmul>
 800e46e:	4602      	mov	r2, r0
 800e470:	460b      	mov	r3, r1
 800e472:	4630      	mov	r0, r6
 800e474:	4639      	mov	r1, r7
 800e476:	f7f1 ff0f 	bl	8000298 <__aeabi_dsub>
 800e47a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e47e:	4606      	mov	r6, r0
 800e480:	460f      	mov	r7, r1
 800e482:	4620      	mov	r0, r4
 800e484:	4629      	mov	r1, r5
 800e486:	f7f1 ff07 	bl	8000298 <__aeabi_dsub>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e492:	f7f1 ff01 	bl	8000298 <__aeabi_dsub>
 800e496:	4642      	mov	r2, r8
 800e498:	464b      	mov	r3, r9
 800e49a:	f7f2 f8b5 	bl	8000608 <__aeabi_dmul>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	f7f1 fef7 	bl	8000298 <__aeabi_dsub>
 800e4aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e4ae:	f7f2 f8ab 	bl	8000608 <__aeabi_dmul>
 800e4b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e4ba:	4610      	mov	r0, r2
 800e4bc:	4619      	mov	r1, r3
 800e4be:	f7f2 f8a3 	bl	8000608 <__aeabi_dmul>
 800e4c2:	a37b      	add	r3, pc, #492	; (adr r3, 800e6b0 <__ieee754_pow+0x6d0>)
 800e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	460d      	mov	r5, r1
 800e4cc:	f7f2 f89c 	bl	8000608 <__aeabi_dmul>
 800e4d0:	a379      	add	r3, pc, #484	; (adr r3, 800e6b8 <__ieee754_pow+0x6d8>)
 800e4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d6:	f7f1 fee1 	bl	800029c <__adddf3>
 800e4da:	4622      	mov	r2, r4
 800e4dc:	462b      	mov	r3, r5
 800e4de:	f7f2 f893 	bl	8000608 <__aeabi_dmul>
 800e4e2:	a377      	add	r3, pc, #476	; (adr r3, 800e6c0 <__ieee754_pow+0x6e0>)
 800e4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e8:	f7f1 fed8 	bl	800029c <__adddf3>
 800e4ec:	4622      	mov	r2, r4
 800e4ee:	462b      	mov	r3, r5
 800e4f0:	f7f2 f88a 	bl	8000608 <__aeabi_dmul>
 800e4f4:	a374      	add	r3, pc, #464	; (adr r3, 800e6c8 <__ieee754_pow+0x6e8>)
 800e4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fa:	f7f1 fecf 	bl	800029c <__adddf3>
 800e4fe:	4622      	mov	r2, r4
 800e500:	462b      	mov	r3, r5
 800e502:	f7f2 f881 	bl	8000608 <__aeabi_dmul>
 800e506:	a372      	add	r3, pc, #456	; (adr r3, 800e6d0 <__ieee754_pow+0x6f0>)
 800e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50c:	f7f1 fec6 	bl	800029c <__adddf3>
 800e510:	4622      	mov	r2, r4
 800e512:	462b      	mov	r3, r5
 800e514:	f7f2 f878 	bl	8000608 <__aeabi_dmul>
 800e518:	a36f      	add	r3, pc, #444	; (adr r3, 800e6d8 <__ieee754_pow+0x6f8>)
 800e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51e:	f7f1 febd 	bl	800029c <__adddf3>
 800e522:	4622      	mov	r2, r4
 800e524:	4606      	mov	r6, r0
 800e526:	460f      	mov	r7, r1
 800e528:	462b      	mov	r3, r5
 800e52a:	4620      	mov	r0, r4
 800e52c:	4629      	mov	r1, r5
 800e52e:	f7f2 f86b 	bl	8000608 <__aeabi_dmul>
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	4630      	mov	r0, r6
 800e538:	4639      	mov	r1, r7
 800e53a:	f7f2 f865 	bl	8000608 <__aeabi_dmul>
 800e53e:	4642      	mov	r2, r8
 800e540:	4604      	mov	r4, r0
 800e542:	460d      	mov	r5, r1
 800e544:	464b      	mov	r3, r9
 800e546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e54a:	f7f1 fea7 	bl	800029c <__adddf3>
 800e54e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e552:	f7f2 f859 	bl	8000608 <__aeabi_dmul>
 800e556:	4622      	mov	r2, r4
 800e558:	462b      	mov	r3, r5
 800e55a:	f7f1 fe9f 	bl	800029c <__adddf3>
 800e55e:	4642      	mov	r2, r8
 800e560:	4606      	mov	r6, r0
 800e562:	460f      	mov	r7, r1
 800e564:	464b      	mov	r3, r9
 800e566:	4640      	mov	r0, r8
 800e568:	4649      	mov	r1, r9
 800e56a:	f7f2 f84d 	bl	8000608 <__aeabi_dmul>
 800e56e:	2200      	movs	r2, #0
 800e570:	4b68      	ldr	r3, [pc, #416]	; (800e714 <__ieee754_pow+0x734>)
 800e572:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e576:	f7f1 fe91 	bl	800029c <__adddf3>
 800e57a:	4632      	mov	r2, r6
 800e57c:	463b      	mov	r3, r7
 800e57e:	f7f1 fe8d 	bl	800029c <__adddf3>
 800e582:	9802      	ldr	r0, [sp, #8]
 800e584:	460d      	mov	r5, r1
 800e586:	4604      	mov	r4, r0
 800e588:	4602      	mov	r2, r0
 800e58a:	460b      	mov	r3, r1
 800e58c:	4640      	mov	r0, r8
 800e58e:	4649      	mov	r1, r9
 800e590:	f7f2 f83a 	bl	8000608 <__aeabi_dmul>
 800e594:	2200      	movs	r2, #0
 800e596:	4680      	mov	r8, r0
 800e598:	4689      	mov	r9, r1
 800e59a:	4b5e      	ldr	r3, [pc, #376]	; (800e714 <__ieee754_pow+0x734>)
 800e59c:	4620      	mov	r0, r4
 800e59e:	4629      	mov	r1, r5
 800e5a0:	f7f1 fe7a 	bl	8000298 <__aeabi_dsub>
 800e5a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e5a8:	f7f1 fe76 	bl	8000298 <__aeabi_dsub>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	4639      	mov	r1, r7
 800e5b4:	f7f1 fe70 	bl	8000298 <__aeabi_dsub>
 800e5b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5bc:	f7f2 f824 	bl	8000608 <__aeabi_dmul>
 800e5c0:	4622      	mov	r2, r4
 800e5c2:	4606      	mov	r6, r0
 800e5c4:	460f      	mov	r7, r1
 800e5c6:	462b      	mov	r3, r5
 800e5c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5cc:	f7f2 f81c 	bl	8000608 <__aeabi_dmul>
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	f7f1 fe60 	bl	800029c <__adddf3>
 800e5dc:	4606      	mov	r6, r0
 800e5de:	460f      	mov	r7, r1
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4640      	mov	r0, r8
 800e5e6:	4649      	mov	r1, r9
 800e5e8:	f7f1 fe58 	bl	800029c <__adddf3>
 800e5ec:	9802      	ldr	r0, [sp, #8]
 800e5ee:	a33c      	add	r3, pc, #240	; (adr r3, 800e6e0 <__ieee754_pow+0x700>)
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	460d      	mov	r5, r1
 800e5f8:	f7f2 f806 	bl	8000608 <__aeabi_dmul>
 800e5fc:	4642      	mov	r2, r8
 800e5fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e602:	464b      	mov	r3, r9
 800e604:	4620      	mov	r0, r4
 800e606:	4629      	mov	r1, r5
 800e608:	f7f1 fe46 	bl	8000298 <__aeabi_dsub>
 800e60c:	4602      	mov	r2, r0
 800e60e:	460b      	mov	r3, r1
 800e610:	4630      	mov	r0, r6
 800e612:	4639      	mov	r1, r7
 800e614:	f7f1 fe40 	bl	8000298 <__aeabi_dsub>
 800e618:	a333      	add	r3, pc, #204	; (adr r3, 800e6e8 <__ieee754_pow+0x708>)
 800e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61e:	f7f1 fff3 	bl	8000608 <__aeabi_dmul>
 800e622:	a333      	add	r3, pc, #204	; (adr r3, 800e6f0 <__ieee754_pow+0x710>)
 800e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e628:	4606      	mov	r6, r0
 800e62a:	460f      	mov	r7, r1
 800e62c:	4620      	mov	r0, r4
 800e62e:	4629      	mov	r1, r5
 800e630:	f7f1 ffea 	bl	8000608 <__aeabi_dmul>
 800e634:	4602      	mov	r2, r0
 800e636:	460b      	mov	r3, r1
 800e638:	4630      	mov	r0, r6
 800e63a:	4639      	mov	r1, r7
 800e63c:	f7f1 fe2e 	bl	800029c <__adddf3>
 800e640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e642:	4b35      	ldr	r3, [pc, #212]	; (800e718 <__ieee754_pow+0x738>)
 800e644:	4413      	add	r3, r2
 800e646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64a:	f7f1 fe27 	bl	800029c <__adddf3>
 800e64e:	4604      	mov	r4, r0
 800e650:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e652:	460d      	mov	r5, r1
 800e654:	f7f1 ff6e 	bl	8000534 <__aeabi_i2d>
 800e658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e65a:	4b30      	ldr	r3, [pc, #192]	; (800e71c <__ieee754_pow+0x73c>)
 800e65c:	4413      	add	r3, r2
 800e65e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e662:	4606      	mov	r6, r0
 800e664:	460f      	mov	r7, r1
 800e666:	4622      	mov	r2, r4
 800e668:	462b      	mov	r3, r5
 800e66a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e66e:	f7f1 fe15 	bl	800029c <__adddf3>
 800e672:	4642      	mov	r2, r8
 800e674:	464b      	mov	r3, r9
 800e676:	f7f1 fe11 	bl	800029c <__adddf3>
 800e67a:	4632      	mov	r2, r6
 800e67c:	463b      	mov	r3, r7
 800e67e:	f7f1 fe0d 	bl	800029c <__adddf3>
 800e682:	9802      	ldr	r0, [sp, #8]
 800e684:	4632      	mov	r2, r6
 800e686:	463b      	mov	r3, r7
 800e688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e68c:	f7f1 fe04 	bl	8000298 <__aeabi_dsub>
 800e690:	4642      	mov	r2, r8
 800e692:	464b      	mov	r3, r9
 800e694:	f7f1 fe00 	bl	8000298 <__aeabi_dsub>
 800e698:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e69c:	e607      	b.n	800e2ae <__ieee754_pow+0x2ce>
 800e69e:	f04f 0a01 	mov.w	sl, #1
 800e6a2:	e6a5      	b.n	800e3f0 <__ieee754_pow+0x410>
 800e6a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e6f8 <__ieee754_pow+0x718>
 800e6a8:	e613      	b.n	800e2d2 <__ieee754_pow+0x2f2>
 800e6aa:	bf00      	nop
 800e6ac:	f3af 8000 	nop.w
 800e6b0:	4a454eef 	.word	0x4a454eef
 800e6b4:	3fca7e28 	.word	0x3fca7e28
 800e6b8:	93c9db65 	.word	0x93c9db65
 800e6bc:	3fcd864a 	.word	0x3fcd864a
 800e6c0:	a91d4101 	.word	0xa91d4101
 800e6c4:	3fd17460 	.word	0x3fd17460
 800e6c8:	518f264d 	.word	0x518f264d
 800e6cc:	3fd55555 	.word	0x3fd55555
 800e6d0:	db6fabff 	.word	0xdb6fabff
 800e6d4:	3fdb6db6 	.word	0x3fdb6db6
 800e6d8:	33333303 	.word	0x33333303
 800e6dc:	3fe33333 	.word	0x3fe33333
 800e6e0:	e0000000 	.word	0xe0000000
 800e6e4:	3feec709 	.word	0x3feec709
 800e6e8:	dc3a03fd 	.word	0xdc3a03fd
 800e6ec:	3feec709 	.word	0x3feec709
 800e6f0:	145b01f5 	.word	0x145b01f5
 800e6f4:	be3e2fe0 	.word	0xbe3e2fe0
 800e6f8:	00000000 	.word	0x00000000
 800e6fc:	3ff00000 	.word	0x3ff00000
 800e700:	43400000 	.word	0x43400000
 800e704:	0003988e 	.word	0x0003988e
 800e708:	000bb679 	.word	0x000bb679
 800e70c:	080103c0 	.word	0x080103c0
 800e710:	3ff00000 	.word	0x3ff00000
 800e714:	40080000 	.word	0x40080000
 800e718:	080103e0 	.word	0x080103e0
 800e71c:	080103d0 	.word	0x080103d0
 800e720:	a3b4      	add	r3, pc, #720	; (adr r3, 800e9f4 <__ieee754_pow+0xa14>)
 800e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e726:	4640      	mov	r0, r8
 800e728:	4649      	mov	r1, r9
 800e72a:	f7f1 fdb7 	bl	800029c <__adddf3>
 800e72e:	4622      	mov	r2, r4
 800e730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e734:	462b      	mov	r3, r5
 800e736:	4630      	mov	r0, r6
 800e738:	4639      	mov	r1, r7
 800e73a:	f7f1 fdad 	bl	8000298 <__aeabi_dsub>
 800e73e:	4602      	mov	r2, r0
 800e740:	460b      	mov	r3, r1
 800e742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e746:	f7f2 f9ef 	bl	8000b28 <__aeabi_dcmpgt>
 800e74a:	2800      	cmp	r0, #0
 800e74c:	f47f adfe 	bne.w	800e34c <__ieee754_pow+0x36c>
 800e750:	4aa3      	ldr	r2, [pc, #652]	; (800e9e0 <__ieee754_pow+0xa00>)
 800e752:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e756:	4293      	cmp	r3, r2
 800e758:	f340 810a 	ble.w	800e970 <__ieee754_pow+0x990>
 800e75c:	151b      	asrs	r3, r3, #20
 800e75e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e762:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e766:	fa4a f303 	asr.w	r3, sl, r3
 800e76a:	445b      	add	r3, fp
 800e76c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e770:	4e9c      	ldr	r6, [pc, #624]	; (800e9e4 <__ieee754_pow+0xa04>)
 800e772:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e776:	4116      	asrs	r6, r2
 800e778:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e77c:	2000      	movs	r0, #0
 800e77e:	ea23 0106 	bic.w	r1, r3, r6
 800e782:	f1c2 0214 	rsb	r2, r2, #20
 800e786:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e78a:	fa4a fa02 	asr.w	sl, sl, r2
 800e78e:	f1bb 0f00 	cmp.w	fp, #0
 800e792:	4602      	mov	r2, r0
 800e794:	460b      	mov	r3, r1
 800e796:	4620      	mov	r0, r4
 800e798:	4629      	mov	r1, r5
 800e79a:	bfb8      	it	lt
 800e79c:	f1ca 0a00 	rsblt	sl, sl, #0
 800e7a0:	f7f1 fd7a 	bl	8000298 <__aeabi_dsub>
 800e7a4:	e9cd 0100 	strd	r0, r1, [sp]
 800e7a8:	4642      	mov	r2, r8
 800e7aa:	464b      	mov	r3, r9
 800e7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7b0:	f7f1 fd74 	bl	800029c <__adddf3>
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	a378      	add	r3, pc, #480	; (adr r3, 800e998 <__ieee754_pow+0x9b8>)
 800e7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7bc:	4604      	mov	r4, r0
 800e7be:	460d      	mov	r5, r1
 800e7c0:	f7f1 ff22 	bl	8000608 <__aeabi_dmul>
 800e7c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7c8:	4606      	mov	r6, r0
 800e7ca:	460f      	mov	r7, r1
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	f7f1 fd62 	bl	8000298 <__aeabi_dsub>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	4640      	mov	r0, r8
 800e7da:	4649      	mov	r1, r9
 800e7dc:	f7f1 fd5c 	bl	8000298 <__aeabi_dsub>
 800e7e0:	a36f      	add	r3, pc, #444	; (adr r3, 800e9a0 <__ieee754_pow+0x9c0>)
 800e7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e6:	f7f1 ff0f 	bl	8000608 <__aeabi_dmul>
 800e7ea:	a36f      	add	r3, pc, #444	; (adr r3, 800e9a8 <__ieee754_pow+0x9c8>)
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	4680      	mov	r8, r0
 800e7f2:	4689      	mov	r9, r1
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	f7f1 ff06 	bl	8000608 <__aeabi_dmul>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	4640      	mov	r0, r8
 800e802:	4649      	mov	r1, r9
 800e804:	f7f1 fd4a 	bl	800029c <__adddf3>
 800e808:	4604      	mov	r4, r0
 800e80a:	460d      	mov	r5, r1
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	4630      	mov	r0, r6
 800e812:	4639      	mov	r1, r7
 800e814:	f7f1 fd42 	bl	800029c <__adddf3>
 800e818:	4632      	mov	r2, r6
 800e81a:	463b      	mov	r3, r7
 800e81c:	4680      	mov	r8, r0
 800e81e:	4689      	mov	r9, r1
 800e820:	f7f1 fd3a 	bl	8000298 <__aeabi_dsub>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	4620      	mov	r0, r4
 800e82a:	4629      	mov	r1, r5
 800e82c:	f7f1 fd34 	bl	8000298 <__aeabi_dsub>
 800e830:	4642      	mov	r2, r8
 800e832:	4606      	mov	r6, r0
 800e834:	460f      	mov	r7, r1
 800e836:	464b      	mov	r3, r9
 800e838:	4640      	mov	r0, r8
 800e83a:	4649      	mov	r1, r9
 800e83c:	f7f1 fee4 	bl	8000608 <__aeabi_dmul>
 800e840:	a35b      	add	r3, pc, #364	; (adr r3, 800e9b0 <__ieee754_pow+0x9d0>)
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	4604      	mov	r4, r0
 800e848:	460d      	mov	r5, r1
 800e84a:	f7f1 fedd 	bl	8000608 <__aeabi_dmul>
 800e84e:	a35a      	add	r3, pc, #360	; (adr r3, 800e9b8 <__ieee754_pow+0x9d8>)
 800e850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e854:	f7f1 fd20 	bl	8000298 <__aeabi_dsub>
 800e858:	4622      	mov	r2, r4
 800e85a:	462b      	mov	r3, r5
 800e85c:	f7f1 fed4 	bl	8000608 <__aeabi_dmul>
 800e860:	a357      	add	r3, pc, #348	; (adr r3, 800e9c0 <__ieee754_pow+0x9e0>)
 800e862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e866:	f7f1 fd19 	bl	800029c <__adddf3>
 800e86a:	4622      	mov	r2, r4
 800e86c:	462b      	mov	r3, r5
 800e86e:	f7f1 fecb 	bl	8000608 <__aeabi_dmul>
 800e872:	a355      	add	r3, pc, #340	; (adr r3, 800e9c8 <__ieee754_pow+0x9e8>)
 800e874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e878:	f7f1 fd0e 	bl	8000298 <__aeabi_dsub>
 800e87c:	4622      	mov	r2, r4
 800e87e:	462b      	mov	r3, r5
 800e880:	f7f1 fec2 	bl	8000608 <__aeabi_dmul>
 800e884:	a352      	add	r3, pc, #328	; (adr r3, 800e9d0 <__ieee754_pow+0x9f0>)
 800e886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88a:	f7f1 fd07 	bl	800029c <__adddf3>
 800e88e:	4622      	mov	r2, r4
 800e890:	462b      	mov	r3, r5
 800e892:	f7f1 feb9 	bl	8000608 <__aeabi_dmul>
 800e896:	4602      	mov	r2, r0
 800e898:	460b      	mov	r3, r1
 800e89a:	4640      	mov	r0, r8
 800e89c:	4649      	mov	r1, r9
 800e89e:	f7f1 fcfb 	bl	8000298 <__aeabi_dsub>
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	460d      	mov	r5, r1
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	4640      	mov	r0, r8
 800e8ac:	4649      	mov	r1, r9
 800e8ae:	f7f1 feab 	bl	8000608 <__aeabi_dmul>
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	e9cd 0100 	strd	r0, r1, [sp]
 800e8b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e8bc:	4620      	mov	r0, r4
 800e8be:	4629      	mov	r1, r5
 800e8c0:	f7f1 fcea 	bl	8000298 <__aeabi_dsub>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8cc:	f7f1 ffc6 	bl	800085c <__aeabi_ddiv>
 800e8d0:	4632      	mov	r2, r6
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	460d      	mov	r5, r1
 800e8d6:	463b      	mov	r3, r7
 800e8d8:	4640      	mov	r0, r8
 800e8da:	4649      	mov	r1, r9
 800e8dc:	f7f1 fe94 	bl	8000608 <__aeabi_dmul>
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	463b      	mov	r3, r7
 800e8e4:	f7f1 fcda 	bl	800029c <__adddf3>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	f7f1 fcd2 	bl	8000298 <__aeabi_dsub>
 800e8f4:	4642      	mov	r2, r8
 800e8f6:	464b      	mov	r3, r9
 800e8f8:	f7f1 fcce 	bl	8000298 <__aeabi_dsub>
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	460b      	mov	r3, r1
 800e900:	2000      	movs	r0, #0
 800e902:	4939      	ldr	r1, [pc, #228]	; (800e9e8 <__ieee754_pow+0xa08>)
 800e904:	f7f1 fcc8 	bl	8000298 <__aeabi_dsub>
 800e908:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800e90c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e910:	4602      	mov	r2, r0
 800e912:	460b      	mov	r3, r1
 800e914:	da2f      	bge.n	800e976 <__ieee754_pow+0x996>
 800e916:	4650      	mov	r0, sl
 800e918:	ec43 2b10 	vmov	d0, r2, r3
 800e91c:	f001 faa0 	bl	800fe60 <scalbn>
 800e920:	ec51 0b10 	vmov	r0, r1, d0
 800e924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e928:	f7ff bbf1 	b.w	800e10e <__ieee754_pow+0x12e>
 800e92c:	4b2f      	ldr	r3, [pc, #188]	; (800e9ec <__ieee754_pow+0xa0c>)
 800e92e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e932:	429e      	cmp	r6, r3
 800e934:	f77f af0c 	ble.w	800e750 <__ieee754_pow+0x770>
 800e938:	4b2d      	ldr	r3, [pc, #180]	; (800e9f0 <__ieee754_pow+0xa10>)
 800e93a:	440b      	add	r3, r1
 800e93c:	4303      	orrs	r3, r0
 800e93e:	d00b      	beq.n	800e958 <__ieee754_pow+0x978>
 800e940:	a325      	add	r3, pc, #148	; (adr r3, 800e9d8 <__ieee754_pow+0x9f8>)
 800e942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e94a:	f7f1 fe5d 	bl	8000608 <__aeabi_dmul>
 800e94e:	a322      	add	r3, pc, #136	; (adr r3, 800e9d8 <__ieee754_pow+0x9f8>)
 800e950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e954:	f7ff bbdb 	b.w	800e10e <__ieee754_pow+0x12e>
 800e958:	4622      	mov	r2, r4
 800e95a:	462b      	mov	r3, r5
 800e95c:	f7f1 fc9c 	bl	8000298 <__aeabi_dsub>
 800e960:	4642      	mov	r2, r8
 800e962:	464b      	mov	r3, r9
 800e964:	f7f2 f8d6 	bl	8000b14 <__aeabi_dcmpge>
 800e968:	2800      	cmp	r0, #0
 800e96a:	f43f aef1 	beq.w	800e750 <__ieee754_pow+0x770>
 800e96e:	e7e7      	b.n	800e940 <__ieee754_pow+0x960>
 800e970:	f04f 0a00 	mov.w	sl, #0
 800e974:	e718      	b.n	800e7a8 <__ieee754_pow+0x7c8>
 800e976:	4621      	mov	r1, r4
 800e978:	e7d4      	b.n	800e924 <__ieee754_pow+0x944>
 800e97a:	2000      	movs	r0, #0
 800e97c:	491a      	ldr	r1, [pc, #104]	; (800e9e8 <__ieee754_pow+0xa08>)
 800e97e:	f7ff bb8f 	b.w	800e0a0 <__ieee754_pow+0xc0>
 800e982:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e986:	f7ff bb8b 	b.w	800e0a0 <__ieee754_pow+0xc0>
 800e98a:	4630      	mov	r0, r6
 800e98c:	4639      	mov	r1, r7
 800e98e:	f7ff bb87 	b.w	800e0a0 <__ieee754_pow+0xc0>
 800e992:	4693      	mov	fp, r2
 800e994:	f7ff bb98 	b.w	800e0c8 <__ieee754_pow+0xe8>
 800e998:	00000000 	.word	0x00000000
 800e99c:	3fe62e43 	.word	0x3fe62e43
 800e9a0:	fefa39ef 	.word	0xfefa39ef
 800e9a4:	3fe62e42 	.word	0x3fe62e42
 800e9a8:	0ca86c39 	.word	0x0ca86c39
 800e9ac:	be205c61 	.word	0xbe205c61
 800e9b0:	72bea4d0 	.word	0x72bea4d0
 800e9b4:	3e663769 	.word	0x3e663769
 800e9b8:	c5d26bf1 	.word	0xc5d26bf1
 800e9bc:	3ebbbd41 	.word	0x3ebbbd41
 800e9c0:	af25de2c 	.word	0xaf25de2c
 800e9c4:	3f11566a 	.word	0x3f11566a
 800e9c8:	16bebd93 	.word	0x16bebd93
 800e9cc:	3f66c16c 	.word	0x3f66c16c
 800e9d0:	5555553e 	.word	0x5555553e
 800e9d4:	3fc55555 	.word	0x3fc55555
 800e9d8:	c2f8f359 	.word	0xc2f8f359
 800e9dc:	01a56e1f 	.word	0x01a56e1f
 800e9e0:	3fe00000 	.word	0x3fe00000
 800e9e4:	000fffff 	.word	0x000fffff
 800e9e8:	3ff00000 	.word	0x3ff00000
 800e9ec:	4090cbff 	.word	0x4090cbff
 800e9f0:	3f6f3400 	.word	0x3f6f3400
 800e9f4:	652b82fe 	.word	0x652b82fe
 800e9f8:	3c971547 	.word	0x3c971547
 800e9fc:	00000000 	.word	0x00000000

0800ea00 <__ieee754_rem_pio2>:
 800ea00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea04:	ec57 6b10 	vmov	r6, r7, d0
 800ea08:	4bc3      	ldr	r3, [pc, #780]	; (800ed18 <__ieee754_rem_pio2+0x318>)
 800ea0a:	b08d      	sub	sp, #52	; 0x34
 800ea0c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ea10:	4598      	cmp	r8, r3
 800ea12:	4604      	mov	r4, r0
 800ea14:	9704      	str	r7, [sp, #16]
 800ea16:	dc07      	bgt.n	800ea28 <__ieee754_rem_pio2+0x28>
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	ed84 0b00 	vstr	d0, [r4]
 800ea20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ea24:	2500      	movs	r5, #0
 800ea26:	e027      	b.n	800ea78 <__ieee754_rem_pio2+0x78>
 800ea28:	4bbc      	ldr	r3, [pc, #752]	; (800ed1c <__ieee754_rem_pio2+0x31c>)
 800ea2a:	4598      	cmp	r8, r3
 800ea2c:	dc75      	bgt.n	800eb1a <__ieee754_rem_pio2+0x11a>
 800ea2e:	9b04      	ldr	r3, [sp, #16]
 800ea30:	4dbb      	ldr	r5, [pc, #748]	; (800ed20 <__ieee754_rem_pio2+0x320>)
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	ee10 0a10 	vmov	r0, s0
 800ea38:	a3a9      	add	r3, pc, #676	; (adr r3, 800ece0 <__ieee754_rem_pio2+0x2e0>)
 800ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3e:	4639      	mov	r1, r7
 800ea40:	dd36      	ble.n	800eab0 <__ieee754_rem_pio2+0xb0>
 800ea42:	f7f1 fc29 	bl	8000298 <__aeabi_dsub>
 800ea46:	45a8      	cmp	r8, r5
 800ea48:	4606      	mov	r6, r0
 800ea4a:	460f      	mov	r7, r1
 800ea4c:	d018      	beq.n	800ea80 <__ieee754_rem_pio2+0x80>
 800ea4e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ece8 <__ieee754_rem_pio2+0x2e8>)
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	f7f1 fc20 	bl	8000298 <__aeabi_dsub>
 800ea58:	4602      	mov	r2, r0
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	e9c4 2300 	strd	r2, r3, [r4]
 800ea60:	4630      	mov	r0, r6
 800ea62:	4639      	mov	r1, r7
 800ea64:	f7f1 fc18 	bl	8000298 <__aeabi_dsub>
 800ea68:	a39f      	add	r3, pc, #636	; (adr r3, 800ece8 <__ieee754_rem_pio2+0x2e8>)
 800ea6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6e:	f7f1 fc13 	bl	8000298 <__aeabi_dsub>
 800ea72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea76:	2501      	movs	r5, #1
 800ea78:	4628      	mov	r0, r5
 800ea7a:	b00d      	add	sp, #52	; 0x34
 800ea7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea80:	a39b      	add	r3, pc, #620	; (adr r3, 800ecf0 <__ieee754_rem_pio2+0x2f0>)
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	f7f1 fc07 	bl	8000298 <__aeabi_dsub>
 800ea8a:	a39b      	add	r3, pc, #620	; (adr r3, 800ecf8 <__ieee754_rem_pio2+0x2f8>)
 800ea8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea90:	4606      	mov	r6, r0
 800ea92:	460f      	mov	r7, r1
 800ea94:	f7f1 fc00 	bl	8000298 <__aeabi_dsub>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	e9c4 2300 	strd	r2, r3, [r4]
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	4639      	mov	r1, r7
 800eaa4:	f7f1 fbf8 	bl	8000298 <__aeabi_dsub>
 800eaa8:	a393      	add	r3, pc, #588	; (adr r3, 800ecf8 <__ieee754_rem_pio2+0x2f8>)
 800eaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaae:	e7de      	b.n	800ea6e <__ieee754_rem_pio2+0x6e>
 800eab0:	f7f1 fbf4 	bl	800029c <__adddf3>
 800eab4:	45a8      	cmp	r8, r5
 800eab6:	4606      	mov	r6, r0
 800eab8:	460f      	mov	r7, r1
 800eaba:	d016      	beq.n	800eaea <__ieee754_rem_pio2+0xea>
 800eabc:	a38a      	add	r3, pc, #552	; (adr r3, 800ece8 <__ieee754_rem_pio2+0x2e8>)
 800eabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac2:	f7f1 fbeb 	bl	800029c <__adddf3>
 800eac6:	4602      	mov	r2, r0
 800eac8:	460b      	mov	r3, r1
 800eaca:	e9c4 2300 	strd	r2, r3, [r4]
 800eace:	4630      	mov	r0, r6
 800ead0:	4639      	mov	r1, r7
 800ead2:	f7f1 fbe1 	bl	8000298 <__aeabi_dsub>
 800ead6:	a384      	add	r3, pc, #528	; (adr r3, 800ece8 <__ieee754_rem_pio2+0x2e8>)
 800ead8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eadc:	f7f1 fbde 	bl	800029c <__adddf3>
 800eae0:	f04f 35ff 	mov.w	r5, #4294967295
 800eae4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eae8:	e7c6      	b.n	800ea78 <__ieee754_rem_pio2+0x78>
 800eaea:	a381      	add	r3, pc, #516	; (adr r3, 800ecf0 <__ieee754_rem_pio2+0x2f0>)
 800eaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf0:	f7f1 fbd4 	bl	800029c <__adddf3>
 800eaf4:	a380      	add	r3, pc, #512	; (adr r3, 800ecf8 <__ieee754_rem_pio2+0x2f8>)
 800eaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafa:	4606      	mov	r6, r0
 800eafc:	460f      	mov	r7, r1
 800eafe:	f7f1 fbcd 	bl	800029c <__adddf3>
 800eb02:	4602      	mov	r2, r0
 800eb04:	460b      	mov	r3, r1
 800eb06:	e9c4 2300 	strd	r2, r3, [r4]
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	4639      	mov	r1, r7
 800eb0e:	f7f1 fbc3 	bl	8000298 <__aeabi_dsub>
 800eb12:	a379      	add	r3, pc, #484	; (adr r3, 800ecf8 <__ieee754_rem_pio2+0x2f8>)
 800eb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb18:	e7e0      	b.n	800eadc <__ieee754_rem_pio2+0xdc>
 800eb1a:	4b82      	ldr	r3, [pc, #520]	; (800ed24 <__ieee754_rem_pio2+0x324>)
 800eb1c:	4598      	cmp	r8, r3
 800eb1e:	f300 80d0 	bgt.w	800ecc2 <__ieee754_rem_pio2+0x2c2>
 800eb22:	f001 f875 	bl	800fc10 <fabs>
 800eb26:	ec57 6b10 	vmov	r6, r7, d0
 800eb2a:	ee10 0a10 	vmov	r0, s0
 800eb2e:	a374      	add	r3, pc, #464	; (adr r3, 800ed00 <__ieee754_rem_pio2+0x300>)
 800eb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb34:	4639      	mov	r1, r7
 800eb36:	f7f1 fd67 	bl	8000608 <__aeabi_dmul>
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	4b7a      	ldr	r3, [pc, #488]	; (800ed28 <__ieee754_rem_pio2+0x328>)
 800eb3e:	f7f1 fbad 	bl	800029c <__adddf3>
 800eb42:	f7f2 f811 	bl	8000b68 <__aeabi_d2iz>
 800eb46:	4605      	mov	r5, r0
 800eb48:	f7f1 fcf4 	bl	8000534 <__aeabi_i2d>
 800eb4c:	a364      	add	r3, pc, #400	; (adr r3, 800ece0 <__ieee754_rem_pio2+0x2e0>)
 800eb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb56:	f7f1 fd57 	bl	8000608 <__aeabi_dmul>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	4630      	mov	r0, r6
 800eb60:	4639      	mov	r1, r7
 800eb62:	f7f1 fb99 	bl	8000298 <__aeabi_dsub>
 800eb66:	a360      	add	r3, pc, #384	; (adr r3, 800ece8 <__ieee754_rem_pio2+0x2e8>)
 800eb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6c:	4682      	mov	sl, r0
 800eb6e:	468b      	mov	fp, r1
 800eb70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb74:	f7f1 fd48 	bl	8000608 <__aeabi_dmul>
 800eb78:	2d1f      	cmp	r5, #31
 800eb7a:	4606      	mov	r6, r0
 800eb7c:	460f      	mov	r7, r1
 800eb7e:	dc0c      	bgt.n	800eb9a <__ieee754_rem_pio2+0x19a>
 800eb80:	1e6a      	subs	r2, r5, #1
 800eb82:	4b6a      	ldr	r3, [pc, #424]	; (800ed2c <__ieee754_rem_pio2+0x32c>)
 800eb84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb88:	4543      	cmp	r3, r8
 800eb8a:	d006      	beq.n	800eb9a <__ieee754_rem_pio2+0x19a>
 800eb8c:	4632      	mov	r2, r6
 800eb8e:	463b      	mov	r3, r7
 800eb90:	4650      	mov	r0, sl
 800eb92:	4659      	mov	r1, fp
 800eb94:	f7f1 fb80 	bl	8000298 <__aeabi_dsub>
 800eb98:	e00e      	b.n	800ebb8 <__ieee754_rem_pio2+0x1b8>
 800eb9a:	4632      	mov	r2, r6
 800eb9c:	463b      	mov	r3, r7
 800eb9e:	4650      	mov	r0, sl
 800eba0:	4659      	mov	r1, fp
 800eba2:	f7f1 fb79 	bl	8000298 <__aeabi_dsub>
 800eba6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ebaa:	9305      	str	r3, [sp, #20]
 800ebac:	9a05      	ldr	r2, [sp, #20]
 800ebae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	2b10      	cmp	r3, #16
 800ebb6:	dc02      	bgt.n	800ebbe <__ieee754_rem_pio2+0x1be>
 800ebb8:	e9c4 0100 	strd	r0, r1, [r4]
 800ebbc:	e039      	b.n	800ec32 <__ieee754_rem_pio2+0x232>
 800ebbe:	a34c      	add	r3, pc, #304	; (adr r3, 800ecf0 <__ieee754_rem_pio2+0x2f0>)
 800ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebc8:	f7f1 fd1e 	bl	8000608 <__aeabi_dmul>
 800ebcc:	4606      	mov	r6, r0
 800ebce:	460f      	mov	r7, r1
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	4650      	mov	r0, sl
 800ebd6:	4659      	mov	r1, fp
 800ebd8:	f7f1 fb5e 	bl	8000298 <__aeabi_dsub>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	460b      	mov	r3, r1
 800ebe0:	4680      	mov	r8, r0
 800ebe2:	4689      	mov	r9, r1
 800ebe4:	4650      	mov	r0, sl
 800ebe6:	4659      	mov	r1, fp
 800ebe8:	f7f1 fb56 	bl	8000298 <__aeabi_dsub>
 800ebec:	4632      	mov	r2, r6
 800ebee:	463b      	mov	r3, r7
 800ebf0:	f7f1 fb52 	bl	8000298 <__aeabi_dsub>
 800ebf4:	a340      	add	r3, pc, #256	; (adr r3, 800ecf8 <__ieee754_rem_pio2+0x2f8>)
 800ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	460f      	mov	r7, r1
 800ebfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec02:	f7f1 fd01 	bl	8000608 <__aeabi_dmul>
 800ec06:	4632      	mov	r2, r6
 800ec08:	463b      	mov	r3, r7
 800ec0a:	f7f1 fb45 	bl	8000298 <__aeabi_dsub>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	460b      	mov	r3, r1
 800ec12:	4606      	mov	r6, r0
 800ec14:	460f      	mov	r7, r1
 800ec16:	4640      	mov	r0, r8
 800ec18:	4649      	mov	r1, r9
 800ec1a:	f7f1 fb3d 	bl	8000298 <__aeabi_dsub>
 800ec1e:	9a05      	ldr	r2, [sp, #20]
 800ec20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ec24:	1ad3      	subs	r3, r2, r3
 800ec26:	2b31      	cmp	r3, #49	; 0x31
 800ec28:	dc20      	bgt.n	800ec6c <__ieee754_rem_pio2+0x26c>
 800ec2a:	e9c4 0100 	strd	r0, r1, [r4]
 800ec2e:	46c2      	mov	sl, r8
 800ec30:	46cb      	mov	fp, r9
 800ec32:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ec36:	4650      	mov	r0, sl
 800ec38:	4642      	mov	r2, r8
 800ec3a:	464b      	mov	r3, r9
 800ec3c:	4659      	mov	r1, fp
 800ec3e:	f7f1 fb2b 	bl	8000298 <__aeabi_dsub>
 800ec42:	463b      	mov	r3, r7
 800ec44:	4632      	mov	r2, r6
 800ec46:	f7f1 fb27 	bl	8000298 <__aeabi_dsub>
 800ec4a:	9b04      	ldr	r3, [sp, #16]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec52:	f6bf af11 	bge.w	800ea78 <__ieee754_rem_pio2+0x78>
 800ec56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ec5a:	6063      	str	r3, [r4, #4]
 800ec5c:	f8c4 8000 	str.w	r8, [r4]
 800ec60:	60a0      	str	r0, [r4, #8]
 800ec62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec66:	60e3      	str	r3, [r4, #12]
 800ec68:	426d      	negs	r5, r5
 800ec6a:	e705      	b.n	800ea78 <__ieee754_rem_pio2+0x78>
 800ec6c:	a326      	add	r3, pc, #152	; (adr r3, 800ed08 <__ieee754_rem_pio2+0x308>)
 800ec6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec76:	f7f1 fcc7 	bl	8000608 <__aeabi_dmul>
 800ec7a:	4606      	mov	r6, r0
 800ec7c:	460f      	mov	r7, r1
 800ec7e:	4602      	mov	r2, r0
 800ec80:	460b      	mov	r3, r1
 800ec82:	4640      	mov	r0, r8
 800ec84:	4649      	mov	r1, r9
 800ec86:	f7f1 fb07 	bl	8000298 <__aeabi_dsub>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	4682      	mov	sl, r0
 800ec90:	468b      	mov	fp, r1
 800ec92:	4640      	mov	r0, r8
 800ec94:	4649      	mov	r1, r9
 800ec96:	f7f1 faff 	bl	8000298 <__aeabi_dsub>
 800ec9a:	4632      	mov	r2, r6
 800ec9c:	463b      	mov	r3, r7
 800ec9e:	f7f1 fafb 	bl	8000298 <__aeabi_dsub>
 800eca2:	a31b      	add	r3, pc, #108	; (adr r3, 800ed10 <__ieee754_rem_pio2+0x310>)
 800eca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca8:	4606      	mov	r6, r0
 800ecaa:	460f      	mov	r7, r1
 800ecac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecb0:	f7f1 fcaa 	bl	8000608 <__aeabi_dmul>
 800ecb4:	4632      	mov	r2, r6
 800ecb6:	463b      	mov	r3, r7
 800ecb8:	f7f1 faee 	bl	8000298 <__aeabi_dsub>
 800ecbc:	4606      	mov	r6, r0
 800ecbe:	460f      	mov	r7, r1
 800ecc0:	e764      	b.n	800eb8c <__ieee754_rem_pio2+0x18c>
 800ecc2:	4b1b      	ldr	r3, [pc, #108]	; (800ed30 <__ieee754_rem_pio2+0x330>)
 800ecc4:	4598      	cmp	r8, r3
 800ecc6:	dd35      	ble.n	800ed34 <__ieee754_rem_pio2+0x334>
 800ecc8:	ee10 2a10 	vmov	r2, s0
 800eccc:	463b      	mov	r3, r7
 800ecce:	4630      	mov	r0, r6
 800ecd0:	4639      	mov	r1, r7
 800ecd2:	f7f1 fae1 	bl	8000298 <__aeabi_dsub>
 800ecd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ecda:	e9c4 0100 	strd	r0, r1, [r4]
 800ecde:	e6a1      	b.n	800ea24 <__ieee754_rem_pio2+0x24>
 800ece0:	54400000 	.word	0x54400000
 800ece4:	3ff921fb 	.word	0x3ff921fb
 800ece8:	1a626331 	.word	0x1a626331
 800ecec:	3dd0b461 	.word	0x3dd0b461
 800ecf0:	1a600000 	.word	0x1a600000
 800ecf4:	3dd0b461 	.word	0x3dd0b461
 800ecf8:	2e037073 	.word	0x2e037073
 800ecfc:	3ba3198a 	.word	0x3ba3198a
 800ed00:	6dc9c883 	.word	0x6dc9c883
 800ed04:	3fe45f30 	.word	0x3fe45f30
 800ed08:	2e000000 	.word	0x2e000000
 800ed0c:	3ba3198a 	.word	0x3ba3198a
 800ed10:	252049c1 	.word	0x252049c1
 800ed14:	397b839a 	.word	0x397b839a
 800ed18:	3fe921fb 	.word	0x3fe921fb
 800ed1c:	4002d97b 	.word	0x4002d97b
 800ed20:	3ff921fb 	.word	0x3ff921fb
 800ed24:	413921fb 	.word	0x413921fb
 800ed28:	3fe00000 	.word	0x3fe00000
 800ed2c:	080103f0 	.word	0x080103f0
 800ed30:	7fefffff 	.word	0x7fefffff
 800ed34:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ed38:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800ed3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ed40:	4630      	mov	r0, r6
 800ed42:	460f      	mov	r7, r1
 800ed44:	f7f1 ff10 	bl	8000b68 <__aeabi_d2iz>
 800ed48:	f7f1 fbf4 	bl	8000534 <__aeabi_i2d>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	460b      	mov	r3, r1
 800ed50:	4630      	mov	r0, r6
 800ed52:	4639      	mov	r1, r7
 800ed54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ed58:	f7f1 fa9e 	bl	8000298 <__aeabi_dsub>
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	4b1f      	ldr	r3, [pc, #124]	; (800eddc <__ieee754_rem_pio2+0x3dc>)
 800ed60:	f7f1 fc52 	bl	8000608 <__aeabi_dmul>
 800ed64:	460f      	mov	r7, r1
 800ed66:	4606      	mov	r6, r0
 800ed68:	f7f1 fefe 	bl	8000b68 <__aeabi_d2iz>
 800ed6c:	f7f1 fbe2 	bl	8000534 <__aeabi_i2d>
 800ed70:	4602      	mov	r2, r0
 800ed72:	460b      	mov	r3, r1
 800ed74:	4630      	mov	r0, r6
 800ed76:	4639      	mov	r1, r7
 800ed78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ed7c:	f7f1 fa8c 	bl	8000298 <__aeabi_dsub>
 800ed80:	2200      	movs	r2, #0
 800ed82:	4b16      	ldr	r3, [pc, #88]	; (800eddc <__ieee754_rem_pio2+0x3dc>)
 800ed84:	f7f1 fc40 	bl	8000608 <__aeabi_dmul>
 800ed88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ed8c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ed90:	f04f 0803 	mov.w	r8, #3
 800ed94:	2600      	movs	r6, #0
 800ed96:	2700      	movs	r7, #0
 800ed98:	4632      	mov	r2, r6
 800ed9a:	463b      	mov	r3, r7
 800ed9c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800eda0:	f108 3aff 	add.w	sl, r8, #4294967295
 800eda4:	f7f1 fe98 	bl	8000ad8 <__aeabi_dcmpeq>
 800eda8:	b9b0      	cbnz	r0, 800edd8 <__ieee754_rem_pio2+0x3d8>
 800edaa:	4b0d      	ldr	r3, [pc, #52]	; (800ede0 <__ieee754_rem_pio2+0x3e0>)
 800edac:	9301      	str	r3, [sp, #4]
 800edae:	2302      	movs	r3, #2
 800edb0:	9300      	str	r3, [sp, #0]
 800edb2:	462a      	mov	r2, r5
 800edb4:	4643      	mov	r3, r8
 800edb6:	4621      	mov	r1, r4
 800edb8:	a806      	add	r0, sp, #24
 800edba:	f000 f98d 	bl	800f0d8 <__kernel_rem_pio2>
 800edbe:	9b04      	ldr	r3, [sp, #16]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	4605      	mov	r5, r0
 800edc4:	f6bf ae58 	bge.w	800ea78 <__ieee754_rem_pio2+0x78>
 800edc8:	6863      	ldr	r3, [r4, #4]
 800edca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800edce:	6063      	str	r3, [r4, #4]
 800edd0:	68e3      	ldr	r3, [r4, #12]
 800edd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800edd6:	e746      	b.n	800ec66 <__ieee754_rem_pio2+0x266>
 800edd8:	46d0      	mov	r8, sl
 800edda:	e7dd      	b.n	800ed98 <__ieee754_rem_pio2+0x398>
 800eddc:	41700000 	.word	0x41700000
 800ede0:	08010470 	.word	0x08010470

0800ede4 <__ieee754_sqrt>:
 800ede4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ede8:	4955      	ldr	r1, [pc, #340]	; (800ef40 <__ieee754_sqrt+0x15c>)
 800edea:	ec55 4b10 	vmov	r4, r5, d0
 800edee:	43a9      	bics	r1, r5
 800edf0:	462b      	mov	r3, r5
 800edf2:	462a      	mov	r2, r5
 800edf4:	d112      	bne.n	800ee1c <__ieee754_sqrt+0x38>
 800edf6:	ee10 2a10 	vmov	r2, s0
 800edfa:	ee10 0a10 	vmov	r0, s0
 800edfe:	4629      	mov	r1, r5
 800ee00:	f7f1 fc02 	bl	8000608 <__aeabi_dmul>
 800ee04:	4602      	mov	r2, r0
 800ee06:	460b      	mov	r3, r1
 800ee08:	4620      	mov	r0, r4
 800ee0a:	4629      	mov	r1, r5
 800ee0c:	f7f1 fa46 	bl	800029c <__adddf3>
 800ee10:	4604      	mov	r4, r0
 800ee12:	460d      	mov	r5, r1
 800ee14:	ec45 4b10 	vmov	d0, r4, r5
 800ee18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee1c:	2d00      	cmp	r5, #0
 800ee1e:	ee10 0a10 	vmov	r0, s0
 800ee22:	4621      	mov	r1, r4
 800ee24:	dc0f      	bgt.n	800ee46 <__ieee754_sqrt+0x62>
 800ee26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ee2a:	4330      	orrs	r0, r6
 800ee2c:	d0f2      	beq.n	800ee14 <__ieee754_sqrt+0x30>
 800ee2e:	b155      	cbz	r5, 800ee46 <__ieee754_sqrt+0x62>
 800ee30:	ee10 2a10 	vmov	r2, s0
 800ee34:	4620      	mov	r0, r4
 800ee36:	4629      	mov	r1, r5
 800ee38:	f7f1 fa2e 	bl	8000298 <__aeabi_dsub>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	f7f1 fd0c 	bl	800085c <__aeabi_ddiv>
 800ee44:	e7e4      	b.n	800ee10 <__ieee754_sqrt+0x2c>
 800ee46:	151b      	asrs	r3, r3, #20
 800ee48:	d073      	beq.n	800ef32 <__ieee754_sqrt+0x14e>
 800ee4a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ee4e:	07dd      	lsls	r5, r3, #31
 800ee50:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ee54:	bf48      	it	mi
 800ee56:	0fc8      	lsrmi	r0, r1, #31
 800ee58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ee5c:	bf44      	itt	mi
 800ee5e:	0049      	lslmi	r1, r1, #1
 800ee60:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800ee64:	2500      	movs	r5, #0
 800ee66:	1058      	asrs	r0, r3, #1
 800ee68:	0fcb      	lsrs	r3, r1, #31
 800ee6a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ee6e:	0049      	lsls	r1, r1, #1
 800ee70:	2316      	movs	r3, #22
 800ee72:	462c      	mov	r4, r5
 800ee74:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ee78:	19a7      	adds	r7, r4, r6
 800ee7a:	4297      	cmp	r7, r2
 800ee7c:	bfde      	ittt	le
 800ee7e:	19bc      	addle	r4, r7, r6
 800ee80:	1bd2      	suble	r2, r2, r7
 800ee82:	19ad      	addle	r5, r5, r6
 800ee84:	0fcf      	lsrs	r7, r1, #31
 800ee86:	3b01      	subs	r3, #1
 800ee88:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800ee8c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ee90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ee94:	d1f0      	bne.n	800ee78 <__ieee754_sqrt+0x94>
 800ee96:	f04f 0c20 	mov.w	ip, #32
 800ee9a:	469e      	mov	lr, r3
 800ee9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800eea0:	42a2      	cmp	r2, r4
 800eea2:	eb06 070e 	add.w	r7, r6, lr
 800eea6:	dc02      	bgt.n	800eeae <__ieee754_sqrt+0xca>
 800eea8:	d112      	bne.n	800eed0 <__ieee754_sqrt+0xec>
 800eeaa:	428f      	cmp	r7, r1
 800eeac:	d810      	bhi.n	800eed0 <__ieee754_sqrt+0xec>
 800eeae:	2f00      	cmp	r7, #0
 800eeb0:	eb07 0e06 	add.w	lr, r7, r6
 800eeb4:	da42      	bge.n	800ef3c <__ieee754_sqrt+0x158>
 800eeb6:	f1be 0f00 	cmp.w	lr, #0
 800eeba:	db3f      	blt.n	800ef3c <__ieee754_sqrt+0x158>
 800eebc:	f104 0801 	add.w	r8, r4, #1
 800eec0:	1b12      	subs	r2, r2, r4
 800eec2:	428f      	cmp	r7, r1
 800eec4:	bf88      	it	hi
 800eec6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800eeca:	1bc9      	subs	r1, r1, r7
 800eecc:	4433      	add	r3, r6
 800eece:	4644      	mov	r4, r8
 800eed0:	0052      	lsls	r2, r2, #1
 800eed2:	f1bc 0c01 	subs.w	ip, ip, #1
 800eed6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800eeda:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800eede:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eee2:	d1dd      	bne.n	800eea0 <__ieee754_sqrt+0xbc>
 800eee4:	430a      	orrs	r2, r1
 800eee6:	d006      	beq.n	800eef6 <__ieee754_sqrt+0x112>
 800eee8:	1c5c      	adds	r4, r3, #1
 800eeea:	bf13      	iteet	ne
 800eeec:	3301      	addne	r3, #1
 800eeee:	3501      	addeq	r5, #1
 800eef0:	4663      	moveq	r3, ip
 800eef2:	f023 0301 	bicne.w	r3, r3, #1
 800eef6:	106a      	asrs	r2, r5, #1
 800eef8:	085b      	lsrs	r3, r3, #1
 800eefa:	07e9      	lsls	r1, r5, #31
 800eefc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ef00:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ef04:	bf48      	it	mi
 800ef06:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ef0a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800ef0e:	461c      	mov	r4, r3
 800ef10:	e780      	b.n	800ee14 <__ieee754_sqrt+0x30>
 800ef12:	0aca      	lsrs	r2, r1, #11
 800ef14:	3815      	subs	r0, #21
 800ef16:	0549      	lsls	r1, r1, #21
 800ef18:	2a00      	cmp	r2, #0
 800ef1a:	d0fa      	beq.n	800ef12 <__ieee754_sqrt+0x12e>
 800ef1c:	02d6      	lsls	r6, r2, #11
 800ef1e:	d50a      	bpl.n	800ef36 <__ieee754_sqrt+0x152>
 800ef20:	f1c3 0420 	rsb	r4, r3, #32
 800ef24:	fa21 f404 	lsr.w	r4, r1, r4
 800ef28:	1e5d      	subs	r5, r3, #1
 800ef2a:	4099      	lsls	r1, r3
 800ef2c:	4322      	orrs	r2, r4
 800ef2e:	1b43      	subs	r3, r0, r5
 800ef30:	e78b      	b.n	800ee4a <__ieee754_sqrt+0x66>
 800ef32:	4618      	mov	r0, r3
 800ef34:	e7f0      	b.n	800ef18 <__ieee754_sqrt+0x134>
 800ef36:	0052      	lsls	r2, r2, #1
 800ef38:	3301      	adds	r3, #1
 800ef3a:	e7ef      	b.n	800ef1c <__ieee754_sqrt+0x138>
 800ef3c:	46a0      	mov	r8, r4
 800ef3e:	e7bf      	b.n	800eec0 <__ieee754_sqrt+0xdc>
 800ef40:	7ff00000 	.word	0x7ff00000
 800ef44:	00000000 	.word	0x00000000

0800ef48 <__kernel_cos>:
 800ef48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4c:	ec59 8b10 	vmov	r8, r9, d0
 800ef50:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800ef54:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800ef58:	ed2d 8b02 	vpush	{d8}
 800ef5c:	eeb0 8a41 	vmov.f32	s16, s2
 800ef60:	eef0 8a61 	vmov.f32	s17, s3
 800ef64:	da07      	bge.n	800ef76 <__kernel_cos+0x2e>
 800ef66:	ee10 0a10 	vmov	r0, s0
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	f7f1 fdfc 	bl	8000b68 <__aeabi_d2iz>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	f000 8089 	beq.w	800f088 <__kernel_cos+0x140>
 800ef76:	4642      	mov	r2, r8
 800ef78:	464b      	mov	r3, r9
 800ef7a:	4640      	mov	r0, r8
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	f7f1 fb43 	bl	8000608 <__aeabi_dmul>
 800ef82:	2200      	movs	r2, #0
 800ef84:	4b4e      	ldr	r3, [pc, #312]	; (800f0c0 <__kernel_cos+0x178>)
 800ef86:	4604      	mov	r4, r0
 800ef88:	460d      	mov	r5, r1
 800ef8a:	f7f1 fb3d 	bl	8000608 <__aeabi_dmul>
 800ef8e:	a340      	add	r3, pc, #256	; (adr r3, 800f090 <__kernel_cos+0x148>)
 800ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef94:	4682      	mov	sl, r0
 800ef96:	468b      	mov	fp, r1
 800ef98:	4620      	mov	r0, r4
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	f7f1 fb34 	bl	8000608 <__aeabi_dmul>
 800efa0:	a33d      	add	r3, pc, #244	; (adr r3, 800f098 <__kernel_cos+0x150>)
 800efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa6:	f7f1 f979 	bl	800029c <__adddf3>
 800efaa:	4622      	mov	r2, r4
 800efac:	462b      	mov	r3, r5
 800efae:	f7f1 fb2b 	bl	8000608 <__aeabi_dmul>
 800efb2:	a33b      	add	r3, pc, #236	; (adr r3, 800f0a0 <__kernel_cos+0x158>)
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	f7f1 f96e 	bl	8000298 <__aeabi_dsub>
 800efbc:	4622      	mov	r2, r4
 800efbe:	462b      	mov	r3, r5
 800efc0:	f7f1 fb22 	bl	8000608 <__aeabi_dmul>
 800efc4:	a338      	add	r3, pc, #224	; (adr r3, 800f0a8 <__kernel_cos+0x160>)
 800efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efca:	f7f1 f967 	bl	800029c <__adddf3>
 800efce:	4622      	mov	r2, r4
 800efd0:	462b      	mov	r3, r5
 800efd2:	f7f1 fb19 	bl	8000608 <__aeabi_dmul>
 800efd6:	a336      	add	r3, pc, #216	; (adr r3, 800f0b0 <__kernel_cos+0x168>)
 800efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efdc:	f7f1 f95c 	bl	8000298 <__aeabi_dsub>
 800efe0:	4622      	mov	r2, r4
 800efe2:	462b      	mov	r3, r5
 800efe4:	f7f1 fb10 	bl	8000608 <__aeabi_dmul>
 800efe8:	a333      	add	r3, pc, #204	; (adr r3, 800f0b8 <__kernel_cos+0x170>)
 800efea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efee:	f7f1 f955 	bl	800029c <__adddf3>
 800eff2:	4622      	mov	r2, r4
 800eff4:	462b      	mov	r3, r5
 800eff6:	f7f1 fb07 	bl	8000608 <__aeabi_dmul>
 800effa:	4622      	mov	r2, r4
 800effc:	462b      	mov	r3, r5
 800effe:	f7f1 fb03 	bl	8000608 <__aeabi_dmul>
 800f002:	ec53 2b18 	vmov	r2, r3, d8
 800f006:	4604      	mov	r4, r0
 800f008:	460d      	mov	r5, r1
 800f00a:	4640      	mov	r0, r8
 800f00c:	4649      	mov	r1, r9
 800f00e:	f7f1 fafb 	bl	8000608 <__aeabi_dmul>
 800f012:	460b      	mov	r3, r1
 800f014:	4602      	mov	r2, r0
 800f016:	4629      	mov	r1, r5
 800f018:	4620      	mov	r0, r4
 800f01a:	f7f1 f93d 	bl	8000298 <__aeabi_dsub>
 800f01e:	4b29      	ldr	r3, [pc, #164]	; (800f0c4 <__kernel_cos+0x17c>)
 800f020:	429e      	cmp	r6, r3
 800f022:	4680      	mov	r8, r0
 800f024:	4689      	mov	r9, r1
 800f026:	dc11      	bgt.n	800f04c <__kernel_cos+0x104>
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	4650      	mov	r0, sl
 800f02e:	4659      	mov	r1, fp
 800f030:	f7f1 f932 	bl	8000298 <__aeabi_dsub>
 800f034:	460b      	mov	r3, r1
 800f036:	4924      	ldr	r1, [pc, #144]	; (800f0c8 <__kernel_cos+0x180>)
 800f038:	4602      	mov	r2, r0
 800f03a:	2000      	movs	r0, #0
 800f03c:	f7f1 f92c 	bl	8000298 <__aeabi_dsub>
 800f040:	ecbd 8b02 	vpop	{d8}
 800f044:	ec41 0b10 	vmov	d0, r0, r1
 800f048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04c:	4b1f      	ldr	r3, [pc, #124]	; (800f0cc <__kernel_cos+0x184>)
 800f04e:	491e      	ldr	r1, [pc, #120]	; (800f0c8 <__kernel_cos+0x180>)
 800f050:	429e      	cmp	r6, r3
 800f052:	bfcc      	ite	gt
 800f054:	4d1e      	ldrgt	r5, [pc, #120]	; (800f0d0 <__kernel_cos+0x188>)
 800f056:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800f05a:	2400      	movs	r4, #0
 800f05c:	4622      	mov	r2, r4
 800f05e:	462b      	mov	r3, r5
 800f060:	2000      	movs	r0, #0
 800f062:	f7f1 f919 	bl	8000298 <__aeabi_dsub>
 800f066:	4622      	mov	r2, r4
 800f068:	4606      	mov	r6, r0
 800f06a:	460f      	mov	r7, r1
 800f06c:	462b      	mov	r3, r5
 800f06e:	4650      	mov	r0, sl
 800f070:	4659      	mov	r1, fp
 800f072:	f7f1 f911 	bl	8000298 <__aeabi_dsub>
 800f076:	4642      	mov	r2, r8
 800f078:	464b      	mov	r3, r9
 800f07a:	f7f1 f90d 	bl	8000298 <__aeabi_dsub>
 800f07e:	4602      	mov	r2, r0
 800f080:	460b      	mov	r3, r1
 800f082:	4630      	mov	r0, r6
 800f084:	4639      	mov	r1, r7
 800f086:	e7d9      	b.n	800f03c <__kernel_cos+0xf4>
 800f088:	2000      	movs	r0, #0
 800f08a:	490f      	ldr	r1, [pc, #60]	; (800f0c8 <__kernel_cos+0x180>)
 800f08c:	e7d8      	b.n	800f040 <__kernel_cos+0xf8>
 800f08e:	bf00      	nop
 800f090:	be8838d4 	.word	0xbe8838d4
 800f094:	bda8fae9 	.word	0xbda8fae9
 800f098:	bdb4b1c4 	.word	0xbdb4b1c4
 800f09c:	3e21ee9e 	.word	0x3e21ee9e
 800f0a0:	809c52ad 	.word	0x809c52ad
 800f0a4:	3e927e4f 	.word	0x3e927e4f
 800f0a8:	19cb1590 	.word	0x19cb1590
 800f0ac:	3efa01a0 	.word	0x3efa01a0
 800f0b0:	16c15177 	.word	0x16c15177
 800f0b4:	3f56c16c 	.word	0x3f56c16c
 800f0b8:	5555554c 	.word	0x5555554c
 800f0bc:	3fa55555 	.word	0x3fa55555
 800f0c0:	3fe00000 	.word	0x3fe00000
 800f0c4:	3fd33332 	.word	0x3fd33332
 800f0c8:	3ff00000 	.word	0x3ff00000
 800f0cc:	3fe90000 	.word	0x3fe90000
 800f0d0:	3fd20000 	.word	0x3fd20000
 800f0d4:	00000000 	.word	0x00000000

0800f0d8 <__kernel_rem_pio2>:
 800f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0dc:	ed2d 8b02 	vpush	{d8}
 800f0e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f0e4:	1ed4      	subs	r4, r2, #3
 800f0e6:	9308      	str	r3, [sp, #32]
 800f0e8:	9101      	str	r1, [sp, #4]
 800f0ea:	4bc5      	ldr	r3, [pc, #788]	; (800f400 <__kernel_rem_pio2+0x328>)
 800f0ec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f0ee:	9009      	str	r0, [sp, #36]	; 0x24
 800f0f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0f4:	9304      	str	r3, [sp, #16]
 800f0f6:	9b08      	ldr	r3, [sp, #32]
 800f0f8:	3b01      	subs	r3, #1
 800f0fa:	9307      	str	r3, [sp, #28]
 800f0fc:	2318      	movs	r3, #24
 800f0fe:	fb94 f4f3 	sdiv	r4, r4, r3
 800f102:	f06f 0317 	mvn.w	r3, #23
 800f106:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800f10a:	fb04 3303 	mla	r3, r4, r3, r3
 800f10e:	eb03 0a02 	add.w	sl, r3, r2
 800f112:	9b04      	ldr	r3, [sp, #16]
 800f114:	9a07      	ldr	r2, [sp, #28]
 800f116:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f3f0 <__kernel_rem_pio2+0x318>
 800f11a:	eb03 0802 	add.w	r8, r3, r2
 800f11e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f120:	1aa7      	subs	r7, r4, r2
 800f122:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f126:	ae22      	add	r6, sp, #136	; 0x88
 800f128:	2500      	movs	r5, #0
 800f12a:	4545      	cmp	r5, r8
 800f12c:	dd13      	ble.n	800f156 <__kernel_rem_pio2+0x7e>
 800f12e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800f3f0 <__kernel_rem_pio2+0x318>
 800f132:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f136:	2600      	movs	r6, #0
 800f138:	9b04      	ldr	r3, [sp, #16]
 800f13a:	429e      	cmp	r6, r3
 800f13c:	dc32      	bgt.n	800f1a4 <__kernel_rem_pio2+0xcc>
 800f13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f140:	9302      	str	r3, [sp, #8]
 800f142:	9b08      	ldr	r3, [sp, #32]
 800f144:	199d      	adds	r5, r3, r6
 800f146:	ab22      	add	r3, sp, #136	; 0x88
 800f148:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f14c:	9306      	str	r3, [sp, #24]
 800f14e:	ec59 8b18 	vmov	r8, r9, d8
 800f152:	2700      	movs	r7, #0
 800f154:	e01f      	b.n	800f196 <__kernel_rem_pio2+0xbe>
 800f156:	42ef      	cmn	r7, r5
 800f158:	d407      	bmi.n	800f16a <__kernel_rem_pio2+0x92>
 800f15a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f15e:	f7f1 f9e9 	bl	8000534 <__aeabi_i2d>
 800f162:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f166:	3501      	adds	r5, #1
 800f168:	e7df      	b.n	800f12a <__kernel_rem_pio2+0x52>
 800f16a:	ec51 0b18 	vmov	r0, r1, d8
 800f16e:	e7f8      	b.n	800f162 <__kernel_rem_pio2+0x8a>
 800f170:	9906      	ldr	r1, [sp, #24]
 800f172:	9d02      	ldr	r5, [sp, #8]
 800f174:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800f178:	9106      	str	r1, [sp, #24]
 800f17a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800f17e:	9502      	str	r5, [sp, #8]
 800f180:	f7f1 fa42 	bl	8000608 <__aeabi_dmul>
 800f184:	4602      	mov	r2, r0
 800f186:	460b      	mov	r3, r1
 800f188:	4640      	mov	r0, r8
 800f18a:	4649      	mov	r1, r9
 800f18c:	f7f1 f886 	bl	800029c <__adddf3>
 800f190:	3701      	adds	r7, #1
 800f192:	4680      	mov	r8, r0
 800f194:	4689      	mov	r9, r1
 800f196:	9b07      	ldr	r3, [sp, #28]
 800f198:	429f      	cmp	r7, r3
 800f19a:	dde9      	ble.n	800f170 <__kernel_rem_pio2+0x98>
 800f19c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800f1a0:	3601      	adds	r6, #1
 800f1a2:	e7c9      	b.n	800f138 <__kernel_rem_pio2+0x60>
 800f1a4:	9b04      	ldr	r3, [sp, #16]
 800f1a6:	aa0e      	add	r2, sp, #56	; 0x38
 800f1a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1ac:	930c      	str	r3, [sp, #48]	; 0x30
 800f1ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f1b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f1b4:	9c04      	ldr	r4, [sp, #16]
 800f1b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1b8:	ab9a      	add	r3, sp, #616	; 0x268
 800f1ba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800f1be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1c6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800f1ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800f1ce:	ab9a      	add	r3, sp, #616	; 0x268
 800f1d0:	445b      	add	r3, fp
 800f1d2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800f1d6:	2500      	movs	r5, #0
 800f1d8:	1b63      	subs	r3, r4, r5
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	dc78      	bgt.n	800f2d0 <__kernel_rem_pio2+0x1f8>
 800f1de:	4650      	mov	r0, sl
 800f1e0:	ec49 8b10 	vmov	d0, r8, r9
 800f1e4:	f000 fe3c 	bl	800fe60 <scalbn>
 800f1e8:	ec57 6b10 	vmov	r6, r7, d0
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f1f2:	ee10 0a10 	vmov	r0, s0
 800f1f6:	4639      	mov	r1, r7
 800f1f8:	f7f1 fa06 	bl	8000608 <__aeabi_dmul>
 800f1fc:	ec41 0b10 	vmov	d0, r0, r1
 800f200:	f000 fd1a 	bl	800fc38 <floor>
 800f204:	2200      	movs	r2, #0
 800f206:	ec51 0b10 	vmov	r0, r1, d0
 800f20a:	4b7e      	ldr	r3, [pc, #504]	; (800f404 <__kernel_rem_pio2+0x32c>)
 800f20c:	f7f1 f9fc 	bl	8000608 <__aeabi_dmul>
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	4630      	mov	r0, r6
 800f216:	4639      	mov	r1, r7
 800f218:	f7f1 f83e 	bl	8000298 <__aeabi_dsub>
 800f21c:	460f      	mov	r7, r1
 800f21e:	4606      	mov	r6, r0
 800f220:	f7f1 fca2 	bl	8000b68 <__aeabi_d2iz>
 800f224:	9006      	str	r0, [sp, #24]
 800f226:	f7f1 f985 	bl	8000534 <__aeabi_i2d>
 800f22a:	4602      	mov	r2, r0
 800f22c:	460b      	mov	r3, r1
 800f22e:	4630      	mov	r0, r6
 800f230:	4639      	mov	r1, r7
 800f232:	f7f1 f831 	bl	8000298 <__aeabi_dsub>
 800f236:	f1ba 0f00 	cmp.w	sl, #0
 800f23a:	4606      	mov	r6, r0
 800f23c:	460f      	mov	r7, r1
 800f23e:	dd6c      	ble.n	800f31a <__kernel_rem_pio2+0x242>
 800f240:	1e62      	subs	r2, r4, #1
 800f242:	ab0e      	add	r3, sp, #56	; 0x38
 800f244:	f1ca 0118 	rsb	r1, sl, #24
 800f248:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f24c:	9d06      	ldr	r5, [sp, #24]
 800f24e:	fa40 f301 	asr.w	r3, r0, r1
 800f252:	441d      	add	r5, r3
 800f254:	408b      	lsls	r3, r1
 800f256:	1ac0      	subs	r0, r0, r3
 800f258:	ab0e      	add	r3, sp, #56	; 0x38
 800f25a:	9506      	str	r5, [sp, #24]
 800f25c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f260:	f1ca 0317 	rsb	r3, sl, #23
 800f264:	fa40 f303 	asr.w	r3, r0, r3
 800f268:	9302      	str	r3, [sp, #8]
 800f26a:	9b02      	ldr	r3, [sp, #8]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	dd62      	ble.n	800f336 <__kernel_rem_pio2+0x25e>
 800f270:	9b06      	ldr	r3, [sp, #24]
 800f272:	2200      	movs	r2, #0
 800f274:	3301      	adds	r3, #1
 800f276:	9306      	str	r3, [sp, #24]
 800f278:	4615      	mov	r5, r2
 800f27a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f27e:	4294      	cmp	r4, r2
 800f280:	f300 8095 	bgt.w	800f3ae <__kernel_rem_pio2+0x2d6>
 800f284:	f1ba 0f00 	cmp.w	sl, #0
 800f288:	dd07      	ble.n	800f29a <__kernel_rem_pio2+0x1c2>
 800f28a:	f1ba 0f01 	cmp.w	sl, #1
 800f28e:	f000 80a2 	beq.w	800f3d6 <__kernel_rem_pio2+0x2fe>
 800f292:	f1ba 0f02 	cmp.w	sl, #2
 800f296:	f000 80c1 	beq.w	800f41c <__kernel_rem_pio2+0x344>
 800f29a:	9b02      	ldr	r3, [sp, #8]
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	d14a      	bne.n	800f336 <__kernel_rem_pio2+0x25e>
 800f2a0:	4632      	mov	r2, r6
 800f2a2:	463b      	mov	r3, r7
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	4958      	ldr	r1, [pc, #352]	; (800f408 <__kernel_rem_pio2+0x330>)
 800f2a8:	f7f0 fff6 	bl	8000298 <__aeabi_dsub>
 800f2ac:	4606      	mov	r6, r0
 800f2ae:	460f      	mov	r7, r1
 800f2b0:	2d00      	cmp	r5, #0
 800f2b2:	d040      	beq.n	800f336 <__kernel_rem_pio2+0x25e>
 800f2b4:	4650      	mov	r0, sl
 800f2b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f3f8 <__kernel_rem_pio2+0x320>
 800f2ba:	f000 fdd1 	bl	800fe60 <scalbn>
 800f2be:	4630      	mov	r0, r6
 800f2c0:	4639      	mov	r1, r7
 800f2c2:	ec53 2b10 	vmov	r2, r3, d0
 800f2c6:	f7f0 ffe7 	bl	8000298 <__aeabi_dsub>
 800f2ca:	4606      	mov	r6, r0
 800f2cc:	460f      	mov	r7, r1
 800f2ce:	e032      	b.n	800f336 <__kernel_rem_pio2+0x25e>
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	4b4e      	ldr	r3, [pc, #312]	; (800f40c <__kernel_rem_pio2+0x334>)
 800f2d4:	4640      	mov	r0, r8
 800f2d6:	4649      	mov	r1, r9
 800f2d8:	f7f1 f996 	bl	8000608 <__aeabi_dmul>
 800f2dc:	f7f1 fc44 	bl	8000b68 <__aeabi_d2iz>
 800f2e0:	f7f1 f928 	bl	8000534 <__aeabi_i2d>
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	4b4a      	ldr	r3, [pc, #296]	; (800f410 <__kernel_rem_pio2+0x338>)
 800f2e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2ec:	f7f1 f98c 	bl	8000608 <__aeabi_dmul>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	4640      	mov	r0, r8
 800f2f6:	4649      	mov	r1, r9
 800f2f8:	f7f0 ffce 	bl	8000298 <__aeabi_dsub>
 800f2fc:	f7f1 fc34 	bl	8000b68 <__aeabi_d2iz>
 800f300:	ab0e      	add	r3, sp, #56	; 0x38
 800f302:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f306:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f30a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f30e:	f7f0 ffc5 	bl	800029c <__adddf3>
 800f312:	3501      	adds	r5, #1
 800f314:	4680      	mov	r8, r0
 800f316:	4689      	mov	r9, r1
 800f318:	e75e      	b.n	800f1d8 <__kernel_rem_pio2+0x100>
 800f31a:	d105      	bne.n	800f328 <__kernel_rem_pio2+0x250>
 800f31c:	1e63      	subs	r3, r4, #1
 800f31e:	aa0e      	add	r2, sp, #56	; 0x38
 800f320:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f324:	15c3      	asrs	r3, r0, #23
 800f326:	e79f      	b.n	800f268 <__kernel_rem_pio2+0x190>
 800f328:	2200      	movs	r2, #0
 800f32a:	4b3a      	ldr	r3, [pc, #232]	; (800f414 <__kernel_rem_pio2+0x33c>)
 800f32c:	f7f1 fbf2 	bl	8000b14 <__aeabi_dcmpge>
 800f330:	2800      	cmp	r0, #0
 800f332:	d139      	bne.n	800f3a8 <__kernel_rem_pio2+0x2d0>
 800f334:	9002      	str	r0, [sp, #8]
 800f336:	2200      	movs	r2, #0
 800f338:	2300      	movs	r3, #0
 800f33a:	4630      	mov	r0, r6
 800f33c:	4639      	mov	r1, r7
 800f33e:	f7f1 fbcb 	bl	8000ad8 <__aeabi_dcmpeq>
 800f342:	2800      	cmp	r0, #0
 800f344:	f000 80c7 	beq.w	800f4d6 <__kernel_rem_pio2+0x3fe>
 800f348:	1e65      	subs	r5, r4, #1
 800f34a:	462b      	mov	r3, r5
 800f34c:	2200      	movs	r2, #0
 800f34e:	9904      	ldr	r1, [sp, #16]
 800f350:	428b      	cmp	r3, r1
 800f352:	da6a      	bge.n	800f42a <__kernel_rem_pio2+0x352>
 800f354:	2a00      	cmp	r2, #0
 800f356:	f000 8088 	beq.w	800f46a <__kernel_rem_pio2+0x392>
 800f35a:	ab0e      	add	r3, sp, #56	; 0x38
 800f35c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f360:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f364:	2b00      	cmp	r3, #0
 800f366:	f000 80b4 	beq.w	800f4d2 <__kernel_rem_pio2+0x3fa>
 800f36a:	4650      	mov	r0, sl
 800f36c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800f3f8 <__kernel_rem_pio2+0x320>
 800f370:	f000 fd76 	bl	800fe60 <scalbn>
 800f374:	00ec      	lsls	r4, r5, #3
 800f376:	ab72      	add	r3, sp, #456	; 0x1c8
 800f378:	191e      	adds	r6, r3, r4
 800f37a:	ec59 8b10 	vmov	r8, r9, d0
 800f37e:	f106 0a08 	add.w	sl, r6, #8
 800f382:	462f      	mov	r7, r5
 800f384:	2f00      	cmp	r7, #0
 800f386:	f280 80df 	bge.w	800f548 <__kernel_rem_pio2+0x470>
 800f38a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800f3f0 <__kernel_rem_pio2+0x318>
 800f38e:	f04f 0a00 	mov.w	sl, #0
 800f392:	eba5 030a 	sub.w	r3, r5, sl
 800f396:	2b00      	cmp	r3, #0
 800f398:	f2c0 810a 	blt.w	800f5b0 <__kernel_rem_pio2+0x4d8>
 800f39c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800f418 <__kernel_rem_pio2+0x340>
 800f3a0:	ec59 8b18 	vmov	r8, r9, d8
 800f3a4:	2700      	movs	r7, #0
 800f3a6:	e0f5      	b.n	800f594 <__kernel_rem_pio2+0x4bc>
 800f3a8:	2302      	movs	r3, #2
 800f3aa:	9302      	str	r3, [sp, #8]
 800f3ac:	e760      	b.n	800f270 <__kernel_rem_pio2+0x198>
 800f3ae:	ab0e      	add	r3, sp, #56	; 0x38
 800f3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3b4:	b94d      	cbnz	r5, 800f3ca <__kernel_rem_pio2+0x2f2>
 800f3b6:	b12b      	cbz	r3, 800f3c4 <__kernel_rem_pio2+0x2ec>
 800f3b8:	a80e      	add	r0, sp, #56	; 0x38
 800f3ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f3be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	3201      	adds	r2, #1
 800f3c6:	461d      	mov	r5, r3
 800f3c8:	e759      	b.n	800f27e <__kernel_rem_pio2+0x1a6>
 800f3ca:	a80e      	add	r0, sp, #56	; 0x38
 800f3cc:	1acb      	subs	r3, r1, r3
 800f3ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f3d2:	462b      	mov	r3, r5
 800f3d4:	e7f6      	b.n	800f3c4 <__kernel_rem_pio2+0x2ec>
 800f3d6:	1e62      	subs	r2, r4, #1
 800f3d8:	ab0e      	add	r3, sp, #56	; 0x38
 800f3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f3e2:	a90e      	add	r1, sp, #56	; 0x38
 800f3e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f3e8:	e757      	b.n	800f29a <__kernel_rem_pio2+0x1c2>
 800f3ea:	bf00      	nop
 800f3ec:	f3af 8000 	nop.w
	...
 800f3fc:	3ff00000 	.word	0x3ff00000
 800f400:	080105b8 	.word	0x080105b8
 800f404:	40200000 	.word	0x40200000
 800f408:	3ff00000 	.word	0x3ff00000
 800f40c:	3e700000 	.word	0x3e700000
 800f410:	41700000 	.word	0x41700000
 800f414:	3fe00000 	.word	0x3fe00000
 800f418:	08010578 	.word	0x08010578
 800f41c:	1e62      	subs	r2, r4, #1
 800f41e:	ab0e      	add	r3, sp, #56	; 0x38
 800f420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f424:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f428:	e7db      	b.n	800f3e2 <__kernel_rem_pio2+0x30a>
 800f42a:	a90e      	add	r1, sp, #56	; 0x38
 800f42c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f430:	3b01      	subs	r3, #1
 800f432:	430a      	orrs	r2, r1
 800f434:	e78b      	b.n	800f34e <__kernel_rem_pio2+0x276>
 800f436:	3301      	adds	r3, #1
 800f438:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f43c:	2900      	cmp	r1, #0
 800f43e:	d0fa      	beq.n	800f436 <__kernel_rem_pio2+0x35e>
 800f440:	9a08      	ldr	r2, [sp, #32]
 800f442:	4422      	add	r2, r4
 800f444:	00d2      	lsls	r2, r2, #3
 800f446:	a922      	add	r1, sp, #136	; 0x88
 800f448:	18e3      	adds	r3, r4, r3
 800f44a:	9206      	str	r2, [sp, #24]
 800f44c:	440a      	add	r2, r1
 800f44e:	9302      	str	r3, [sp, #8]
 800f450:	f10b 0108 	add.w	r1, fp, #8
 800f454:	f102 0308 	add.w	r3, r2, #8
 800f458:	1c66      	adds	r6, r4, #1
 800f45a:	910a      	str	r1, [sp, #40]	; 0x28
 800f45c:	2500      	movs	r5, #0
 800f45e:	930d      	str	r3, [sp, #52]	; 0x34
 800f460:	9b02      	ldr	r3, [sp, #8]
 800f462:	42b3      	cmp	r3, r6
 800f464:	da04      	bge.n	800f470 <__kernel_rem_pio2+0x398>
 800f466:	461c      	mov	r4, r3
 800f468:	e6a6      	b.n	800f1b8 <__kernel_rem_pio2+0xe0>
 800f46a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f46c:	2301      	movs	r3, #1
 800f46e:	e7e3      	b.n	800f438 <__kernel_rem_pio2+0x360>
 800f470:	9b06      	ldr	r3, [sp, #24]
 800f472:	18ef      	adds	r7, r5, r3
 800f474:	ab22      	add	r3, sp, #136	; 0x88
 800f476:	441f      	add	r7, r3
 800f478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f47a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f47e:	f7f1 f859 	bl	8000534 <__aeabi_i2d>
 800f482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f484:	461c      	mov	r4, r3
 800f486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f488:	e9c7 0100 	strd	r0, r1, [r7]
 800f48c:	eb03 0b05 	add.w	fp, r3, r5
 800f490:	2700      	movs	r7, #0
 800f492:	f04f 0800 	mov.w	r8, #0
 800f496:	f04f 0900 	mov.w	r9, #0
 800f49a:	9b07      	ldr	r3, [sp, #28]
 800f49c:	429f      	cmp	r7, r3
 800f49e:	dd08      	ble.n	800f4b2 <__kernel_rem_pio2+0x3da>
 800f4a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4a2:	aa72      	add	r2, sp, #456	; 0x1c8
 800f4a4:	18eb      	adds	r3, r5, r3
 800f4a6:	4413      	add	r3, r2
 800f4a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800f4ac:	3601      	adds	r6, #1
 800f4ae:	3508      	adds	r5, #8
 800f4b0:	e7d6      	b.n	800f460 <__kernel_rem_pio2+0x388>
 800f4b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f4b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f4ba:	f7f1 f8a5 	bl	8000608 <__aeabi_dmul>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	4640      	mov	r0, r8
 800f4c4:	4649      	mov	r1, r9
 800f4c6:	f7f0 fee9 	bl	800029c <__adddf3>
 800f4ca:	3701      	adds	r7, #1
 800f4cc:	4680      	mov	r8, r0
 800f4ce:	4689      	mov	r9, r1
 800f4d0:	e7e3      	b.n	800f49a <__kernel_rem_pio2+0x3c2>
 800f4d2:	3d01      	subs	r5, #1
 800f4d4:	e741      	b.n	800f35a <__kernel_rem_pio2+0x282>
 800f4d6:	f1ca 0000 	rsb	r0, sl, #0
 800f4da:	ec47 6b10 	vmov	d0, r6, r7
 800f4de:	f000 fcbf 	bl	800fe60 <scalbn>
 800f4e2:	ec57 6b10 	vmov	r6, r7, d0
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	4b99      	ldr	r3, [pc, #612]	; (800f750 <__kernel_rem_pio2+0x678>)
 800f4ea:	ee10 0a10 	vmov	r0, s0
 800f4ee:	4639      	mov	r1, r7
 800f4f0:	f7f1 fb10 	bl	8000b14 <__aeabi_dcmpge>
 800f4f4:	b1f8      	cbz	r0, 800f536 <__kernel_rem_pio2+0x45e>
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	4b96      	ldr	r3, [pc, #600]	; (800f754 <__kernel_rem_pio2+0x67c>)
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	4639      	mov	r1, r7
 800f4fe:	f7f1 f883 	bl	8000608 <__aeabi_dmul>
 800f502:	f7f1 fb31 	bl	8000b68 <__aeabi_d2iz>
 800f506:	4680      	mov	r8, r0
 800f508:	f7f1 f814 	bl	8000534 <__aeabi_i2d>
 800f50c:	2200      	movs	r2, #0
 800f50e:	4b90      	ldr	r3, [pc, #576]	; (800f750 <__kernel_rem_pio2+0x678>)
 800f510:	f7f1 f87a 	bl	8000608 <__aeabi_dmul>
 800f514:	460b      	mov	r3, r1
 800f516:	4602      	mov	r2, r0
 800f518:	4639      	mov	r1, r7
 800f51a:	4630      	mov	r0, r6
 800f51c:	f7f0 febc 	bl	8000298 <__aeabi_dsub>
 800f520:	f7f1 fb22 	bl	8000b68 <__aeabi_d2iz>
 800f524:	1c65      	adds	r5, r4, #1
 800f526:	ab0e      	add	r3, sp, #56	; 0x38
 800f528:	f10a 0a18 	add.w	sl, sl, #24
 800f52c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f530:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f534:	e719      	b.n	800f36a <__kernel_rem_pio2+0x292>
 800f536:	4630      	mov	r0, r6
 800f538:	4639      	mov	r1, r7
 800f53a:	f7f1 fb15 	bl	8000b68 <__aeabi_d2iz>
 800f53e:	ab0e      	add	r3, sp, #56	; 0x38
 800f540:	4625      	mov	r5, r4
 800f542:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f546:	e710      	b.n	800f36a <__kernel_rem_pio2+0x292>
 800f548:	ab0e      	add	r3, sp, #56	; 0x38
 800f54a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f54e:	f7f0 fff1 	bl	8000534 <__aeabi_i2d>
 800f552:	4642      	mov	r2, r8
 800f554:	464b      	mov	r3, r9
 800f556:	f7f1 f857 	bl	8000608 <__aeabi_dmul>
 800f55a:	2200      	movs	r2, #0
 800f55c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f560:	4b7c      	ldr	r3, [pc, #496]	; (800f754 <__kernel_rem_pio2+0x67c>)
 800f562:	4640      	mov	r0, r8
 800f564:	4649      	mov	r1, r9
 800f566:	f7f1 f84f 	bl	8000608 <__aeabi_dmul>
 800f56a:	3f01      	subs	r7, #1
 800f56c:	4680      	mov	r8, r0
 800f56e:	4689      	mov	r9, r1
 800f570:	e708      	b.n	800f384 <__kernel_rem_pio2+0x2ac>
 800f572:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800f576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800f57e:	f7f1 f843 	bl	8000608 <__aeabi_dmul>
 800f582:	4602      	mov	r2, r0
 800f584:	460b      	mov	r3, r1
 800f586:	4640      	mov	r0, r8
 800f588:	4649      	mov	r1, r9
 800f58a:	f7f0 fe87 	bl	800029c <__adddf3>
 800f58e:	3701      	adds	r7, #1
 800f590:	4680      	mov	r8, r0
 800f592:	4689      	mov	r9, r1
 800f594:	9b04      	ldr	r3, [sp, #16]
 800f596:	429f      	cmp	r7, r3
 800f598:	dc01      	bgt.n	800f59e <__kernel_rem_pio2+0x4c6>
 800f59a:	45ba      	cmp	sl, r7
 800f59c:	dae9      	bge.n	800f572 <__kernel_rem_pio2+0x49a>
 800f59e:	ab4a      	add	r3, sp, #296	; 0x128
 800f5a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f5a4:	e9c3 8900 	strd	r8, r9, [r3]
 800f5a8:	f10a 0a01 	add.w	sl, sl, #1
 800f5ac:	3e08      	subs	r6, #8
 800f5ae:	e6f0      	b.n	800f392 <__kernel_rem_pio2+0x2ba>
 800f5b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f5b2:	2b03      	cmp	r3, #3
 800f5b4:	d85b      	bhi.n	800f66e <__kernel_rem_pio2+0x596>
 800f5b6:	e8df f003 	tbb	[pc, r3]
 800f5ba:	264a      	.short	0x264a
 800f5bc:	0226      	.short	0x0226
 800f5be:	ab9a      	add	r3, sp, #616	; 0x268
 800f5c0:	441c      	add	r4, r3
 800f5c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f5c6:	46a2      	mov	sl, r4
 800f5c8:	46ab      	mov	fp, r5
 800f5ca:	f1bb 0f00 	cmp.w	fp, #0
 800f5ce:	dc6c      	bgt.n	800f6aa <__kernel_rem_pio2+0x5d2>
 800f5d0:	46a2      	mov	sl, r4
 800f5d2:	46ab      	mov	fp, r5
 800f5d4:	f1bb 0f01 	cmp.w	fp, #1
 800f5d8:	f300 8086 	bgt.w	800f6e8 <__kernel_rem_pio2+0x610>
 800f5dc:	2000      	movs	r0, #0
 800f5de:	2100      	movs	r1, #0
 800f5e0:	2d01      	cmp	r5, #1
 800f5e2:	f300 80a0 	bgt.w	800f726 <__kernel_rem_pio2+0x64e>
 800f5e6:	9b02      	ldr	r3, [sp, #8]
 800f5e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f5ec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f040 809e 	bne.w	800f732 <__kernel_rem_pio2+0x65a>
 800f5f6:	9b01      	ldr	r3, [sp, #4]
 800f5f8:	e9c3 7800 	strd	r7, r8, [r3]
 800f5fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f600:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f604:	e033      	b.n	800f66e <__kernel_rem_pio2+0x596>
 800f606:	3408      	adds	r4, #8
 800f608:	ab4a      	add	r3, sp, #296	; 0x128
 800f60a:	441c      	add	r4, r3
 800f60c:	462e      	mov	r6, r5
 800f60e:	2000      	movs	r0, #0
 800f610:	2100      	movs	r1, #0
 800f612:	2e00      	cmp	r6, #0
 800f614:	da3a      	bge.n	800f68c <__kernel_rem_pio2+0x5b4>
 800f616:	9b02      	ldr	r3, [sp, #8]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d03d      	beq.n	800f698 <__kernel_rem_pio2+0x5c0>
 800f61c:	4602      	mov	r2, r0
 800f61e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f622:	9c01      	ldr	r4, [sp, #4]
 800f624:	e9c4 2300 	strd	r2, r3, [r4]
 800f628:	4602      	mov	r2, r0
 800f62a:	460b      	mov	r3, r1
 800f62c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f630:	f7f0 fe32 	bl	8000298 <__aeabi_dsub>
 800f634:	ae4c      	add	r6, sp, #304	; 0x130
 800f636:	2401      	movs	r4, #1
 800f638:	42a5      	cmp	r5, r4
 800f63a:	da30      	bge.n	800f69e <__kernel_rem_pio2+0x5c6>
 800f63c:	9b02      	ldr	r3, [sp, #8]
 800f63e:	b113      	cbz	r3, 800f646 <__kernel_rem_pio2+0x56e>
 800f640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f644:	4619      	mov	r1, r3
 800f646:	9b01      	ldr	r3, [sp, #4]
 800f648:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f64c:	e00f      	b.n	800f66e <__kernel_rem_pio2+0x596>
 800f64e:	ab9a      	add	r3, sp, #616	; 0x268
 800f650:	441c      	add	r4, r3
 800f652:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f656:	2000      	movs	r0, #0
 800f658:	2100      	movs	r1, #0
 800f65a:	2d00      	cmp	r5, #0
 800f65c:	da10      	bge.n	800f680 <__kernel_rem_pio2+0x5a8>
 800f65e:	9b02      	ldr	r3, [sp, #8]
 800f660:	b113      	cbz	r3, 800f668 <__kernel_rem_pio2+0x590>
 800f662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f666:	4619      	mov	r1, r3
 800f668:	9b01      	ldr	r3, [sp, #4]
 800f66a:	e9c3 0100 	strd	r0, r1, [r3]
 800f66e:	9b06      	ldr	r3, [sp, #24]
 800f670:	f003 0007 	and.w	r0, r3, #7
 800f674:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f678:	ecbd 8b02 	vpop	{d8}
 800f67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f680:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f684:	f7f0 fe0a 	bl	800029c <__adddf3>
 800f688:	3d01      	subs	r5, #1
 800f68a:	e7e6      	b.n	800f65a <__kernel_rem_pio2+0x582>
 800f68c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f690:	f7f0 fe04 	bl	800029c <__adddf3>
 800f694:	3e01      	subs	r6, #1
 800f696:	e7bc      	b.n	800f612 <__kernel_rem_pio2+0x53a>
 800f698:	4602      	mov	r2, r0
 800f69a:	460b      	mov	r3, r1
 800f69c:	e7c1      	b.n	800f622 <__kernel_rem_pio2+0x54a>
 800f69e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f6a2:	f7f0 fdfb 	bl	800029c <__adddf3>
 800f6a6:	3401      	adds	r4, #1
 800f6a8:	e7c6      	b.n	800f638 <__kernel_rem_pio2+0x560>
 800f6aa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800f6ae:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f6b2:	4640      	mov	r0, r8
 800f6b4:	ec53 2b17 	vmov	r2, r3, d7
 800f6b8:	4649      	mov	r1, r9
 800f6ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f6be:	f7f0 fded 	bl	800029c <__adddf3>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	4606      	mov	r6, r0
 800f6c8:	460f      	mov	r7, r1
 800f6ca:	4640      	mov	r0, r8
 800f6cc:	4649      	mov	r1, r9
 800f6ce:	f7f0 fde3 	bl	8000298 <__aeabi_dsub>
 800f6d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6d6:	f7f0 fde1 	bl	800029c <__adddf3>
 800f6da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f6de:	e9ca 0100 	strd	r0, r1, [sl]
 800f6e2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800f6e6:	e770      	b.n	800f5ca <__kernel_rem_pio2+0x4f2>
 800f6e8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800f6ec:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	ec53 2b17 	vmov	r2, r3, d7
 800f6f6:	4639      	mov	r1, r7
 800f6f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f6fc:	f7f0 fdce 	bl	800029c <__adddf3>
 800f700:	4602      	mov	r2, r0
 800f702:	460b      	mov	r3, r1
 800f704:	4680      	mov	r8, r0
 800f706:	4689      	mov	r9, r1
 800f708:	4630      	mov	r0, r6
 800f70a:	4639      	mov	r1, r7
 800f70c:	f7f0 fdc4 	bl	8000298 <__aeabi_dsub>
 800f710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f714:	f7f0 fdc2 	bl	800029c <__adddf3>
 800f718:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f71c:	e9ca 0100 	strd	r0, r1, [sl]
 800f720:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800f724:	e756      	b.n	800f5d4 <__kernel_rem_pio2+0x4fc>
 800f726:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f72a:	f7f0 fdb7 	bl	800029c <__adddf3>
 800f72e:	3d01      	subs	r5, #1
 800f730:	e756      	b.n	800f5e0 <__kernel_rem_pio2+0x508>
 800f732:	9b01      	ldr	r3, [sp, #4]
 800f734:	9a01      	ldr	r2, [sp, #4]
 800f736:	601f      	str	r7, [r3, #0]
 800f738:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f73c:	605c      	str	r4, [r3, #4]
 800f73e:	609d      	str	r5, [r3, #8]
 800f740:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f744:	60d3      	str	r3, [r2, #12]
 800f746:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f74a:	6110      	str	r0, [r2, #16]
 800f74c:	6153      	str	r3, [r2, #20]
 800f74e:	e78e      	b.n	800f66e <__kernel_rem_pio2+0x596>
 800f750:	41700000 	.word	0x41700000
 800f754:	3e700000 	.word	0x3e700000

0800f758 <__kernel_sin>:
 800f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	ec55 4b10 	vmov	r4, r5, d0
 800f760:	b085      	sub	sp, #20
 800f762:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f766:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f76a:	ed8d 1b00 	vstr	d1, [sp]
 800f76e:	9002      	str	r0, [sp, #8]
 800f770:	da06      	bge.n	800f780 <__kernel_sin+0x28>
 800f772:	ee10 0a10 	vmov	r0, s0
 800f776:	4629      	mov	r1, r5
 800f778:	f7f1 f9f6 	bl	8000b68 <__aeabi_d2iz>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d051      	beq.n	800f824 <__kernel_sin+0xcc>
 800f780:	4622      	mov	r2, r4
 800f782:	462b      	mov	r3, r5
 800f784:	4620      	mov	r0, r4
 800f786:	4629      	mov	r1, r5
 800f788:	f7f0 ff3e 	bl	8000608 <__aeabi_dmul>
 800f78c:	4682      	mov	sl, r0
 800f78e:	468b      	mov	fp, r1
 800f790:	4602      	mov	r2, r0
 800f792:	460b      	mov	r3, r1
 800f794:	4620      	mov	r0, r4
 800f796:	4629      	mov	r1, r5
 800f798:	f7f0 ff36 	bl	8000608 <__aeabi_dmul>
 800f79c:	a341      	add	r3, pc, #260	; (adr r3, 800f8a4 <__kernel_sin+0x14c>)
 800f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a2:	4680      	mov	r8, r0
 800f7a4:	4689      	mov	r9, r1
 800f7a6:	4650      	mov	r0, sl
 800f7a8:	4659      	mov	r1, fp
 800f7aa:	f7f0 ff2d 	bl	8000608 <__aeabi_dmul>
 800f7ae:	a33f      	add	r3, pc, #252	; (adr r3, 800f8ac <__kernel_sin+0x154>)
 800f7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b4:	f7f0 fd70 	bl	8000298 <__aeabi_dsub>
 800f7b8:	4652      	mov	r2, sl
 800f7ba:	465b      	mov	r3, fp
 800f7bc:	f7f0 ff24 	bl	8000608 <__aeabi_dmul>
 800f7c0:	a33c      	add	r3, pc, #240	; (adr r3, 800f8b4 <__kernel_sin+0x15c>)
 800f7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c6:	f7f0 fd69 	bl	800029c <__adddf3>
 800f7ca:	4652      	mov	r2, sl
 800f7cc:	465b      	mov	r3, fp
 800f7ce:	f7f0 ff1b 	bl	8000608 <__aeabi_dmul>
 800f7d2:	a33a      	add	r3, pc, #232	; (adr r3, 800f8bc <__kernel_sin+0x164>)
 800f7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d8:	f7f0 fd5e 	bl	8000298 <__aeabi_dsub>
 800f7dc:	4652      	mov	r2, sl
 800f7de:	465b      	mov	r3, fp
 800f7e0:	f7f0 ff12 	bl	8000608 <__aeabi_dmul>
 800f7e4:	a337      	add	r3, pc, #220	; (adr r3, 800f8c4 <__kernel_sin+0x16c>)
 800f7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ea:	f7f0 fd57 	bl	800029c <__adddf3>
 800f7ee:	9b02      	ldr	r3, [sp, #8]
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	460f      	mov	r7, r1
 800f7f4:	b9db      	cbnz	r3, 800f82e <__kernel_sin+0xd6>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	4650      	mov	r0, sl
 800f7fc:	4659      	mov	r1, fp
 800f7fe:	f7f0 ff03 	bl	8000608 <__aeabi_dmul>
 800f802:	a325      	add	r3, pc, #148	; (adr r3, 800f898 <__kernel_sin+0x140>)
 800f804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f808:	f7f0 fd46 	bl	8000298 <__aeabi_dsub>
 800f80c:	4642      	mov	r2, r8
 800f80e:	464b      	mov	r3, r9
 800f810:	f7f0 fefa 	bl	8000608 <__aeabi_dmul>
 800f814:	4602      	mov	r2, r0
 800f816:	460b      	mov	r3, r1
 800f818:	4620      	mov	r0, r4
 800f81a:	4629      	mov	r1, r5
 800f81c:	f7f0 fd3e 	bl	800029c <__adddf3>
 800f820:	4604      	mov	r4, r0
 800f822:	460d      	mov	r5, r1
 800f824:	ec45 4b10 	vmov	d0, r4, r5
 800f828:	b005      	add	sp, #20
 800f82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82e:	2200      	movs	r2, #0
 800f830:	4b1b      	ldr	r3, [pc, #108]	; (800f8a0 <__kernel_sin+0x148>)
 800f832:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f836:	f7f0 fee7 	bl	8000608 <__aeabi_dmul>
 800f83a:	4632      	mov	r2, r6
 800f83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f840:	463b      	mov	r3, r7
 800f842:	4640      	mov	r0, r8
 800f844:	4649      	mov	r1, r9
 800f846:	f7f0 fedf 	bl	8000608 <__aeabi_dmul>
 800f84a:	4602      	mov	r2, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f852:	f7f0 fd21 	bl	8000298 <__aeabi_dsub>
 800f856:	4652      	mov	r2, sl
 800f858:	465b      	mov	r3, fp
 800f85a:	f7f0 fed5 	bl	8000608 <__aeabi_dmul>
 800f85e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f862:	f7f0 fd19 	bl	8000298 <__aeabi_dsub>
 800f866:	a30c      	add	r3, pc, #48	; (adr r3, 800f898 <__kernel_sin+0x140>)
 800f868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86c:	4606      	mov	r6, r0
 800f86e:	460f      	mov	r7, r1
 800f870:	4640      	mov	r0, r8
 800f872:	4649      	mov	r1, r9
 800f874:	f7f0 fec8 	bl	8000608 <__aeabi_dmul>
 800f878:	4602      	mov	r2, r0
 800f87a:	460b      	mov	r3, r1
 800f87c:	4630      	mov	r0, r6
 800f87e:	4639      	mov	r1, r7
 800f880:	f7f0 fd0c 	bl	800029c <__adddf3>
 800f884:	4602      	mov	r2, r0
 800f886:	460b      	mov	r3, r1
 800f888:	4620      	mov	r0, r4
 800f88a:	4629      	mov	r1, r5
 800f88c:	f7f0 fd04 	bl	8000298 <__aeabi_dsub>
 800f890:	e7c6      	b.n	800f820 <__kernel_sin+0xc8>
 800f892:	bf00      	nop
 800f894:	f3af 8000 	nop.w
 800f898:	55555549 	.word	0x55555549
 800f89c:	3fc55555 	.word	0x3fc55555
 800f8a0:	3fe00000 	.word	0x3fe00000
 800f8a4:	5acfd57c 	.word	0x5acfd57c
 800f8a8:	3de5d93a 	.word	0x3de5d93a
 800f8ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800f8b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f8b4:	57b1fe7d 	.word	0x57b1fe7d
 800f8b8:	3ec71de3 	.word	0x3ec71de3
 800f8bc:	19c161d5 	.word	0x19c161d5
 800f8c0:	3f2a01a0 	.word	0x3f2a01a0
 800f8c4:	1110f8a6 	.word	0x1110f8a6
 800f8c8:	3f811111 	.word	0x3f811111
 800f8cc:	00000000 	.word	0x00000000

0800f8d0 <atan>:
 800f8d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d4:	ec55 4b10 	vmov	r4, r5, d0
 800f8d8:	4bc3      	ldr	r3, [pc, #780]	; (800fbe8 <atan+0x318>)
 800f8da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f8de:	429e      	cmp	r6, r3
 800f8e0:	46ab      	mov	fp, r5
 800f8e2:	dd18      	ble.n	800f916 <atan+0x46>
 800f8e4:	4bc1      	ldr	r3, [pc, #772]	; (800fbec <atan+0x31c>)
 800f8e6:	429e      	cmp	r6, r3
 800f8e8:	dc01      	bgt.n	800f8ee <atan+0x1e>
 800f8ea:	d109      	bne.n	800f900 <atan+0x30>
 800f8ec:	b144      	cbz	r4, 800f900 <atan+0x30>
 800f8ee:	4622      	mov	r2, r4
 800f8f0:	462b      	mov	r3, r5
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	4629      	mov	r1, r5
 800f8f6:	f7f0 fcd1 	bl	800029c <__adddf3>
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	460d      	mov	r5, r1
 800f8fe:	e006      	b.n	800f90e <atan+0x3e>
 800f900:	f1bb 0f00 	cmp.w	fp, #0
 800f904:	f340 8131 	ble.w	800fb6a <atan+0x29a>
 800f908:	a59b      	add	r5, pc, #620	; (adr r5, 800fb78 <atan+0x2a8>)
 800f90a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f90e:	ec45 4b10 	vmov	d0, r4, r5
 800f912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f916:	4bb6      	ldr	r3, [pc, #728]	; (800fbf0 <atan+0x320>)
 800f918:	429e      	cmp	r6, r3
 800f91a:	dc14      	bgt.n	800f946 <atan+0x76>
 800f91c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f920:	429e      	cmp	r6, r3
 800f922:	dc0d      	bgt.n	800f940 <atan+0x70>
 800f924:	a396      	add	r3, pc, #600	; (adr r3, 800fb80 <atan+0x2b0>)
 800f926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92a:	ee10 0a10 	vmov	r0, s0
 800f92e:	4629      	mov	r1, r5
 800f930:	f7f0 fcb4 	bl	800029c <__adddf3>
 800f934:	2200      	movs	r2, #0
 800f936:	4baf      	ldr	r3, [pc, #700]	; (800fbf4 <atan+0x324>)
 800f938:	f7f1 f8f6 	bl	8000b28 <__aeabi_dcmpgt>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d1e6      	bne.n	800f90e <atan+0x3e>
 800f940:	f04f 3aff 	mov.w	sl, #4294967295
 800f944:	e02b      	b.n	800f99e <atan+0xce>
 800f946:	f000 f963 	bl	800fc10 <fabs>
 800f94a:	4bab      	ldr	r3, [pc, #684]	; (800fbf8 <atan+0x328>)
 800f94c:	429e      	cmp	r6, r3
 800f94e:	ec55 4b10 	vmov	r4, r5, d0
 800f952:	f300 80bf 	bgt.w	800fad4 <atan+0x204>
 800f956:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f95a:	429e      	cmp	r6, r3
 800f95c:	f300 80a0 	bgt.w	800faa0 <atan+0x1d0>
 800f960:	ee10 2a10 	vmov	r2, s0
 800f964:	ee10 0a10 	vmov	r0, s0
 800f968:	462b      	mov	r3, r5
 800f96a:	4629      	mov	r1, r5
 800f96c:	f7f0 fc96 	bl	800029c <__adddf3>
 800f970:	2200      	movs	r2, #0
 800f972:	4ba0      	ldr	r3, [pc, #640]	; (800fbf4 <atan+0x324>)
 800f974:	f7f0 fc90 	bl	8000298 <__aeabi_dsub>
 800f978:	2200      	movs	r2, #0
 800f97a:	4606      	mov	r6, r0
 800f97c:	460f      	mov	r7, r1
 800f97e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f982:	4620      	mov	r0, r4
 800f984:	4629      	mov	r1, r5
 800f986:	f7f0 fc89 	bl	800029c <__adddf3>
 800f98a:	4602      	mov	r2, r0
 800f98c:	460b      	mov	r3, r1
 800f98e:	4630      	mov	r0, r6
 800f990:	4639      	mov	r1, r7
 800f992:	f7f0 ff63 	bl	800085c <__aeabi_ddiv>
 800f996:	f04f 0a00 	mov.w	sl, #0
 800f99a:	4604      	mov	r4, r0
 800f99c:	460d      	mov	r5, r1
 800f99e:	4622      	mov	r2, r4
 800f9a0:	462b      	mov	r3, r5
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	4629      	mov	r1, r5
 800f9a6:	f7f0 fe2f 	bl	8000608 <__aeabi_dmul>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	4680      	mov	r8, r0
 800f9b0:	4689      	mov	r9, r1
 800f9b2:	f7f0 fe29 	bl	8000608 <__aeabi_dmul>
 800f9b6:	a374      	add	r3, pc, #464	; (adr r3, 800fb88 <atan+0x2b8>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	4606      	mov	r6, r0
 800f9be:	460f      	mov	r7, r1
 800f9c0:	f7f0 fe22 	bl	8000608 <__aeabi_dmul>
 800f9c4:	a372      	add	r3, pc, #456	; (adr r3, 800fb90 <atan+0x2c0>)
 800f9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ca:	f7f0 fc67 	bl	800029c <__adddf3>
 800f9ce:	4632      	mov	r2, r6
 800f9d0:	463b      	mov	r3, r7
 800f9d2:	f7f0 fe19 	bl	8000608 <__aeabi_dmul>
 800f9d6:	a370      	add	r3, pc, #448	; (adr r3, 800fb98 <atan+0x2c8>)
 800f9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9dc:	f7f0 fc5e 	bl	800029c <__adddf3>
 800f9e0:	4632      	mov	r2, r6
 800f9e2:	463b      	mov	r3, r7
 800f9e4:	f7f0 fe10 	bl	8000608 <__aeabi_dmul>
 800f9e8:	a36d      	add	r3, pc, #436	; (adr r3, 800fba0 <atan+0x2d0>)
 800f9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ee:	f7f0 fc55 	bl	800029c <__adddf3>
 800f9f2:	4632      	mov	r2, r6
 800f9f4:	463b      	mov	r3, r7
 800f9f6:	f7f0 fe07 	bl	8000608 <__aeabi_dmul>
 800f9fa:	a36b      	add	r3, pc, #428	; (adr r3, 800fba8 <atan+0x2d8>)
 800f9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa00:	f7f0 fc4c 	bl	800029c <__adddf3>
 800fa04:	4632      	mov	r2, r6
 800fa06:	463b      	mov	r3, r7
 800fa08:	f7f0 fdfe 	bl	8000608 <__aeabi_dmul>
 800fa0c:	a368      	add	r3, pc, #416	; (adr r3, 800fbb0 <atan+0x2e0>)
 800fa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa12:	f7f0 fc43 	bl	800029c <__adddf3>
 800fa16:	4642      	mov	r2, r8
 800fa18:	464b      	mov	r3, r9
 800fa1a:	f7f0 fdf5 	bl	8000608 <__aeabi_dmul>
 800fa1e:	a366      	add	r3, pc, #408	; (adr r3, 800fbb8 <atan+0x2e8>)
 800fa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa24:	4680      	mov	r8, r0
 800fa26:	4689      	mov	r9, r1
 800fa28:	4630      	mov	r0, r6
 800fa2a:	4639      	mov	r1, r7
 800fa2c:	f7f0 fdec 	bl	8000608 <__aeabi_dmul>
 800fa30:	a363      	add	r3, pc, #396	; (adr r3, 800fbc0 <atan+0x2f0>)
 800fa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa36:	f7f0 fc2f 	bl	8000298 <__aeabi_dsub>
 800fa3a:	4632      	mov	r2, r6
 800fa3c:	463b      	mov	r3, r7
 800fa3e:	f7f0 fde3 	bl	8000608 <__aeabi_dmul>
 800fa42:	a361      	add	r3, pc, #388	; (adr r3, 800fbc8 <atan+0x2f8>)
 800fa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa48:	f7f0 fc26 	bl	8000298 <__aeabi_dsub>
 800fa4c:	4632      	mov	r2, r6
 800fa4e:	463b      	mov	r3, r7
 800fa50:	f7f0 fdda 	bl	8000608 <__aeabi_dmul>
 800fa54:	a35e      	add	r3, pc, #376	; (adr r3, 800fbd0 <atan+0x300>)
 800fa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5a:	f7f0 fc1d 	bl	8000298 <__aeabi_dsub>
 800fa5e:	4632      	mov	r2, r6
 800fa60:	463b      	mov	r3, r7
 800fa62:	f7f0 fdd1 	bl	8000608 <__aeabi_dmul>
 800fa66:	a35c      	add	r3, pc, #368	; (adr r3, 800fbd8 <atan+0x308>)
 800fa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6c:	f7f0 fc14 	bl	8000298 <__aeabi_dsub>
 800fa70:	4632      	mov	r2, r6
 800fa72:	463b      	mov	r3, r7
 800fa74:	f7f0 fdc8 	bl	8000608 <__aeabi_dmul>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	4640      	mov	r0, r8
 800fa7e:	4649      	mov	r1, r9
 800fa80:	f7f0 fc0c 	bl	800029c <__adddf3>
 800fa84:	4622      	mov	r2, r4
 800fa86:	462b      	mov	r3, r5
 800fa88:	f7f0 fdbe 	bl	8000608 <__aeabi_dmul>
 800fa8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fa90:	4602      	mov	r2, r0
 800fa92:	460b      	mov	r3, r1
 800fa94:	d14b      	bne.n	800fb2e <atan+0x25e>
 800fa96:	4620      	mov	r0, r4
 800fa98:	4629      	mov	r1, r5
 800fa9a:	f7f0 fbfd 	bl	8000298 <__aeabi_dsub>
 800fa9e:	e72c      	b.n	800f8fa <atan+0x2a>
 800faa0:	ee10 0a10 	vmov	r0, s0
 800faa4:	2200      	movs	r2, #0
 800faa6:	4b53      	ldr	r3, [pc, #332]	; (800fbf4 <atan+0x324>)
 800faa8:	4629      	mov	r1, r5
 800faaa:	f7f0 fbf5 	bl	8000298 <__aeabi_dsub>
 800faae:	2200      	movs	r2, #0
 800fab0:	4606      	mov	r6, r0
 800fab2:	460f      	mov	r7, r1
 800fab4:	4b4f      	ldr	r3, [pc, #316]	; (800fbf4 <atan+0x324>)
 800fab6:	4620      	mov	r0, r4
 800fab8:	4629      	mov	r1, r5
 800faba:	f7f0 fbef 	bl	800029c <__adddf3>
 800fabe:	4602      	mov	r2, r0
 800fac0:	460b      	mov	r3, r1
 800fac2:	4630      	mov	r0, r6
 800fac4:	4639      	mov	r1, r7
 800fac6:	f7f0 fec9 	bl	800085c <__aeabi_ddiv>
 800faca:	f04f 0a01 	mov.w	sl, #1
 800face:	4604      	mov	r4, r0
 800fad0:	460d      	mov	r5, r1
 800fad2:	e764      	b.n	800f99e <atan+0xce>
 800fad4:	4b49      	ldr	r3, [pc, #292]	; (800fbfc <atan+0x32c>)
 800fad6:	429e      	cmp	r6, r3
 800fad8:	dc1d      	bgt.n	800fb16 <atan+0x246>
 800fada:	ee10 0a10 	vmov	r0, s0
 800fade:	2200      	movs	r2, #0
 800fae0:	4b47      	ldr	r3, [pc, #284]	; (800fc00 <atan+0x330>)
 800fae2:	4629      	mov	r1, r5
 800fae4:	f7f0 fbd8 	bl	8000298 <__aeabi_dsub>
 800fae8:	2200      	movs	r2, #0
 800faea:	4606      	mov	r6, r0
 800faec:	460f      	mov	r7, r1
 800faee:	4b44      	ldr	r3, [pc, #272]	; (800fc00 <atan+0x330>)
 800faf0:	4620      	mov	r0, r4
 800faf2:	4629      	mov	r1, r5
 800faf4:	f7f0 fd88 	bl	8000608 <__aeabi_dmul>
 800faf8:	2200      	movs	r2, #0
 800fafa:	4b3e      	ldr	r3, [pc, #248]	; (800fbf4 <atan+0x324>)
 800fafc:	f7f0 fbce 	bl	800029c <__adddf3>
 800fb00:	4602      	mov	r2, r0
 800fb02:	460b      	mov	r3, r1
 800fb04:	4630      	mov	r0, r6
 800fb06:	4639      	mov	r1, r7
 800fb08:	f7f0 fea8 	bl	800085c <__aeabi_ddiv>
 800fb0c:	f04f 0a02 	mov.w	sl, #2
 800fb10:	4604      	mov	r4, r0
 800fb12:	460d      	mov	r5, r1
 800fb14:	e743      	b.n	800f99e <atan+0xce>
 800fb16:	462b      	mov	r3, r5
 800fb18:	ee10 2a10 	vmov	r2, s0
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	4939      	ldr	r1, [pc, #228]	; (800fc04 <atan+0x334>)
 800fb20:	f7f0 fe9c 	bl	800085c <__aeabi_ddiv>
 800fb24:	f04f 0a03 	mov.w	sl, #3
 800fb28:	4604      	mov	r4, r0
 800fb2a:	460d      	mov	r5, r1
 800fb2c:	e737      	b.n	800f99e <atan+0xce>
 800fb2e:	4b36      	ldr	r3, [pc, #216]	; (800fc08 <atan+0x338>)
 800fb30:	4e36      	ldr	r6, [pc, #216]	; (800fc0c <atan+0x33c>)
 800fb32:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800fb36:	4456      	add	r6, sl
 800fb38:	449a      	add	sl, r3
 800fb3a:	e9da 2300 	ldrd	r2, r3, [sl]
 800fb3e:	f7f0 fbab 	bl	8000298 <__aeabi_dsub>
 800fb42:	4622      	mov	r2, r4
 800fb44:	462b      	mov	r3, r5
 800fb46:	f7f0 fba7 	bl	8000298 <__aeabi_dsub>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fb52:	f7f0 fba1 	bl	8000298 <__aeabi_dsub>
 800fb56:	f1bb 0f00 	cmp.w	fp, #0
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	460d      	mov	r5, r1
 800fb5e:	f6bf aed6 	bge.w	800f90e <atan+0x3e>
 800fb62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb66:	461d      	mov	r5, r3
 800fb68:	e6d1      	b.n	800f90e <atan+0x3e>
 800fb6a:	a51d      	add	r5, pc, #116	; (adr r5, 800fbe0 <atan+0x310>)
 800fb6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fb70:	e6cd      	b.n	800f90e <atan+0x3e>
 800fb72:	bf00      	nop
 800fb74:	f3af 8000 	nop.w
 800fb78:	54442d18 	.word	0x54442d18
 800fb7c:	3ff921fb 	.word	0x3ff921fb
 800fb80:	8800759c 	.word	0x8800759c
 800fb84:	7e37e43c 	.word	0x7e37e43c
 800fb88:	e322da11 	.word	0xe322da11
 800fb8c:	3f90ad3a 	.word	0x3f90ad3a
 800fb90:	24760deb 	.word	0x24760deb
 800fb94:	3fa97b4b 	.word	0x3fa97b4b
 800fb98:	a0d03d51 	.word	0xa0d03d51
 800fb9c:	3fb10d66 	.word	0x3fb10d66
 800fba0:	c54c206e 	.word	0xc54c206e
 800fba4:	3fb745cd 	.word	0x3fb745cd
 800fba8:	920083ff 	.word	0x920083ff
 800fbac:	3fc24924 	.word	0x3fc24924
 800fbb0:	5555550d 	.word	0x5555550d
 800fbb4:	3fd55555 	.word	0x3fd55555
 800fbb8:	2c6a6c2f 	.word	0x2c6a6c2f
 800fbbc:	bfa2b444 	.word	0xbfa2b444
 800fbc0:	52defd9a 	.word	0x52defd9a
 800fbc4:	3fadde2d 	.word	0x3fadde2d
 800fbc8:	af749a6d 	.word	0xaf749a6d
 800fbcc:	3fb3b0f2 	.word	0x3fb3b0f2
 800fbd0:	fe231671 	.word	0xfe231671
 800fbd4:	3fbc71c6 	.word	0x3fbc71c6
 800fbd8:	9998ebc4 	.word	0x9998ebc4
 800fbdc:	3fc99999 	.word	0x3fc99999
 800fbe0:	54442d18 	.word	0x54442d18
 800fbe4:	bff921fb 	.word	0xbff921fb
 800fbe8:	440fffff 	.word	0x440fffff
 800fbec:	7ff00000 	.word	0x7ff00000
 800fbf0:	3fdbffff 	.word	0x3fdbffff
 800fbf4:	3ff00000 	.word	0x3ff00000
 800fbf8:	3ff2ffff 	.word	0x3ff2ffff
 800fbfc:	40037fff 	.word	0x40037fff
 800fc00:	3ff80000 	.word	0x3ff80000
 800fc04:	bff00000 	.word	0xbff00000
 800fc08:	080105e8 	.word	0x080105e8
 800fc0c:	080105c8 	.word	0x080105c8

0800fc10 <fabs>:
 800fc10:	ec51 0b10 	vmov	r0, r1, d0
 800fc14:	ee10 2a10 	vmov	r2, s0
 800fc18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc1c:	ec43 2b10 	vmov	d0, r2, r3
 800fc20:	4770      	bx	lr

0800fc22 <finite>:
 800fc22:	ee10 3a90 	vmov	r3, s1
 800fc26:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800fc2a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fc2e:	0fc0      	lsrs	r0, r0, #31
 800fc30:	4770      	bx	lr
 800fc32:	0000      	movs	r0, r0
 800fc34:	0000      	movs	r0, r0
	...

0800fc38 <floor>:
 800fc38:	ec51 0b10 	vmov	r0, r1, d0
 800fc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fc44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fc48:	2e13      	cmp	r6, #19
 800fc4a:	460c      	mov	r4, r1
 800fc4c:	ee10 5a10 	vmov	r5, s0
 800fc50:	4680      	mov	r8, r0
 800fc52:	dc34      	bgt.n	800fcbe <floor+0x86>
 800fc54:	2e00      	cmp	r6, #0
 800fc56:	da16      	bge.n	800fc86 <floor+0x4e>
 800fc58:	a335      	add	r3, pc, #212	; (adr r3, 800fd30 <floor+0xf8>)
 800fc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5e:	f7f0 fb1d 	bl	800029c <__adddf3>
 800fc62:	2200      	movs	r2, #0
 800fc64:	2300      	movs	r3, #0
 800fc66:	f7f0 ff5f 	bl	8000b28 <__aeabi_dcmpgt>
 800fc6a:	b148      	cbz	r0, 800fc80 <floor+0x48>
 800fc6c:	2c00      	cmp	r4, #0
 800fc6e:	da59      	bge.n	800fd24 <floor+0xec>
 800fc70:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fc74:	4a30      	ldr	r2, [pc, #192]	; (800fd38 <floor+0x100>)
 800fc76:	432b      	orrs	r3, r5
 800fc78:	2500      	movs	r5, #0
 800fc7a:	42ab      	cmp	r3, r5
 800fc7c:	bf18      	it	ne
 800fc7e:	4614      	movne	r4, r2
 800fc80:	4621      	mov	r1, r4
 800fc82:	4628      	mov	r0, r5
 800fc84:	e025      	b.n	800fcd2 <floor+0x9a>
 800fc86:	4f2d      	ldr	r7, [pc, #180]	; (800fd3c <floor+0x104>)
 800fc88:	4137      	asrs	r7, r6
 800fc8a:	ea01 0307 	and.w	r3, r1, r7
 800fc8e:	4303      	orrs	r3, r0
 800fc90:	d01f      	beq.n	800fcd2 <floor+0x9a>
 800fc92:	a327      	add	r3, pc, #156	; (adr r3, 800fd30 <floor+0xf8>)
 800fc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc98:	f7f0 fb00 	bl	800029c <__adddf3>
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	2300      	movs	r3, #0
 800fca0:	f7f0 ff42 	bl	8000b28 <__aeabi_dcmpgt>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d0eb      	beq.n	800fc80 <floor+0x48>
 800fca8:	2c00      	cmp	r4, #0
 800fcaa:	bfbe      	ittt	lt
 800fcac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fcb0:	fa43 f606 	asrlt.w	r6, r3, r6
 800fcb4:	19a4      	addlt	r4, r4, r6
 800fcb6:	ea24 0407 	bic.w	r4, r4, r7
 800fcba:	2500      	movs	r5, #0
 800fcbc:	e7e0      	b.n	800fc80 <floor+0x48>
 800fcbe:	2e33      	cmp	r6, #51	; 0x33
 800fcc0:	dd0b      	ble.n	800fcda <floor+0xa2>
 800fcc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fcc6:	d104      	bne.n	800fcd2 <floor+0x9a>
 800fcc8:	ee10 2a10 	vmov	r2, s0
 800fccc:	460b      	mov	r3, r1
 800fcce:	f7f0 fae5 	bl	800029c <__adddf3>
 800fcd2:	ec41 0b10 	vmov	d0, r0, r1
 800fcd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcda:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fcde:	f04f 33ff 	mov.w	r3, #4294967295
 800fce2:	fa23 f707 	lsr.w	r7, r3, r7
 800fce6:	4207      	tst	r7, r0
 800fce8:	d0f3      	beq.n	800fcd2 <floor+0x9a>
 800fcea:	a311      	add	r3, pc, #68	; (adr r3, 800fd30 <floor+0xf8>)
 800fcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf0:	f7f0 fad4 	bl	800029c <__adddf3>
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	f7f0 ff16 	bl	8000b28 <__aeabi_dcmpgt>
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	d0bf      	beq.n	800fc80 <floor+0x48>
 800fd00:	2c00      	cmp	r4, #0
 800fd02:	da02      	bge.n	800fd0a <floor+0xd2>
 800fd04:	2e14      	cmp	r6, #20
 800fd06:	d103      	bne.n	800fd10 <floor+0xd8>
 800fd08:	3401      	adds	r4, #1
 800fd0a:	ea25 0507 	bic.w	r5, r5, r7
 800fd0e:	e7b7      	b.n	800fc80 <floor+0x48>
 800fd10:	2301      	movs	r3, #1
 800fd12:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fd16:	fa03 f606 	lsl.w	r6, r3, r6
 800fd1a:	4435      	add	r5, r6
 800fd1c:	4545      	cmp	r5, r8
 800fd1e:	bf38      	it	cc
 800fd20:	18e4      	addcc	r4, r4, r3
 800fd22:	e7f2      	b.n	800fd0a <floor+0xd2>
 800fd24:	2500      	movs	r5, #0
 800fd26:	462c      	mov	r4, r5
 800fd28:	e7aa      	b.n	800fc80 <floor+0x48>
 800fd2a:	bf00      	nop
 800fd2c:	f3af 8000 	nop.w
 800fd30:	8800759c 	.word	0x8800759c
 800fd34:	7e37e43c 	.word	0x7e37e43c
 800fd38:	bff00000 	.word	0xbff00000
 800fd3c:	000fffff 	.word	0x000fffff

0800fd40 <matherr>:
 800fd40:	2000      	movs	r0, #0
 800fd42:	4770      	bx	lr
 800fd44:	0000      	movs	r0, r0
	...

0800fd48 <nan>:
 800fd48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fd50 <nan+0x8>
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	00000000 	.word	0x00000000
 800fd54:	7ff80000 	.word	0x7ff80000

0800fd58 <rint>:
 800fd58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd5a:	ec51 0b10 	vmov	r0, r1, d0
 800fd5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fd62:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fd66:	2e13      	cmp	r6, #19
 800fd68:	460b      	mov	r3, r1
 800fd6a:	ee10 4a10 	vmov	r4, s0
 800fd6e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800fd72:	dc56      	bgt.n	800fe22 <rint+0xca>
 800fd74:	2e00      	cmp	r6, #0
 800fd76:	da2b      	bge.n	800fdd0 <rint+0x78>
 800fd78:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800fd7c:	4302      	orrs	r2, r0
 800fd7e:	d023      	beq.n	800fdc8 <rint+0x70>
 800fd80:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800fd84:	4302      	orrs	r2, r0
 800fd86:	4254      	negs	r4, r2
 800fd88:	4314      	orrs	r4, r2
 800fd8a:	0c4b      	lsrs	r3, r1, #17
 800fd8c:	0b24      	lsrs	r4, r4, #12
 800fd8e:	045b      	lsls	r3, r3, #17
 800fd90:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800fd94:	ea44 0103 	orr.w	r1, r4, r3
 800fd98:	460b      	mov	r3, r1
 800fd9a:	492f      	ldr	r1, [pc, #188]	; (800fe58 <rint+0x100>)
 800fd9c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800fda0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800fda4:	4602      	mov	r2, r0
 800fda6:	4639      	mov	r1, r7
 800fda8:	4630      	mov	r0, r6
 800fdaa:	f7f0 fa77 	bl	800029c <__adddf3>
 800fdae:	e9cd 0100 	strd	r0, r1, [sp]
 800fdb2:	463b      	mov	r3, r7
 800fdb4:	4632      	mov	r2, r6
 800fdb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fdba:	f7f0 fa6d 	bl	8000298 <__aeabi_dsub>
 800fdbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fdc2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800fdc6:	4639      	mov	r1, r7
 800fdc8:	ec41 0b10 	vmov	d0, r0, r1
 800fdcc:	b003      	add	sp, #12
 800fdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdd0:	4a22      	ldr	r2, [pc, #136]	; (800fe5c <rint+0x104>)
 800fdd2:	4132      	asrs	r2, r6
 800fdd4:	ea01 0702 	and.w	r7, r1, r2
 800fdd8:	4307      	orrs	r7, r0
 800fdda:	d0f5      	beq.n	800fdc8 <rint+0x70>
 800fddc:	0852      	lsrs	r2, r2, #1
 800fdde:	4011      	ands	r1, r2
 800fde0:	430c      	orrs	r4, r1
 800fde2:	d00b      	beq.n	800fdfc <rint+0xa4>
 800fde4:	ea23 0202 	bic.w	r2, r3, r2
 800fde8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fdec:	2e13      	cmp	r6, #19
 800fdee:	fa43 f306 	asr.w	r3, r3, r6
 800fdf2:	bf0c      	ite	eq
 800fdf4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800fdf8:	2400      	movne	r4, #0
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	4916      	ldr	r1, [pc, #88]	; (800fe58 <rint+0x100>)
 800fdfe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fe02:	4622      	mov	r2, r4
 800fe04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe08:	4620      	mov	r0, r4
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	f7f0 fa46 	bl	800029c <__adddf3>
 800fe10:	e9cd 0100 	strd	r0, r1, [sp]
 800fe14:	4622      	mov	r2, r4
 800fe16:	462b      	mov	r3, r5
 800fe18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe1c:	f7f0 fa3c 	bl	8000298 <__aeabi_dsub>
 800fe20:	e7d2      	b.n	800fdc8 <rint+0x70>
 800fe22:	2e33      	cmp	r6, #51	; 0x33
 800fe24:	dd07      	ble.n	800fe36 <rint+0xde>
 800fe26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fe2a:	d1cd      	bne.n	800fdc8 <rint+0x70>
 800fe2c:	ee10 2a10 	vmov	r2, s0
 800fe30:	f7f0 fa34 	bl	800029c <__adddf3>
 800fe34:	e7c8      	b.n	800fdc8 <rint+0x70>
 800fe36:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800fe3a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe3e:	40f2      	lsrs	r2, r6
 800fe40:	4210      	tst	r0, r2
 800fe42:	d0c1      	beq.n	800fdc8 <rint+0x70>
 800fe44:	0852      	lsrs	r2, r2, #1
 800fe46:	4210      	tst	r0, r2
 800fe48:	bf1f      	itttt	ne
 800fe4a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800fe4e:	ea20 0202 	bicne.w	r2, r0, r2
 800fe52:	4134      	asrne	r4, r6
 800fe54:	4314      	orrne	r4, r2
 800fe56:	e7d1      	b.n	800fdfc <rint+0xa4>
 800fe58:	08010608 	.word	0x08010608
 800fe5c:	000fffff 	.word	0x000fffff

0800fe60 <scalbn>:
 800fe60:	b570      	push	{r4, r5, r6, lr}
 800fe62:	ec55 4b10 	vmov	r4, r5, d0
 800fe66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	462b      	mov	r3, r5
 800fe6e:	b9aa      	cbnz	r2, 800fe9c <scalbn+0x3c>
 800fe70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fe74:	4323      	orrs	r3, r4
 800fe76:	d03b      	beq.n	800fef0 <scalbn+0x90>
 800fe78:	4b31      	ldr	r3, [pc, #196]	; (800ff40 <scalbn+0xe0>)
 800fe7a:	4629      	mov	r1, r5
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	ee10 0a10 	vmov	r0, s0
 800fe82:	f7f0 fbc1 	bl	8000608 <__aeabi_dmul>
 800fe86:	4b2f      	ldr	r3, [pc, #188]	; (800ff44 <scalbn+0xe4>)
 800fe88:	429e      	cmp	r6, r3
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	da12      	bge.n	800feb6 <scalbn+0x56>
 800fe90:	a327      	add	r3, pc, #156	; (adr r3, 800ff30 <scalbn+0xd0>)
 800fe92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe96:	f7f0 fbb7 	bl	8000608 <__aeabi_dmul>
 800fe9a:	e009      	b.n	800feb0 <scalbn+0x50>
 800fe9c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fea0:	428a      	cmp	r2, r1
 800fea2:	d10c      	bne.n	800febe <scalbn+0x5e>
 800fea4:	ee10 2a10 	vmov	r2, s0
 800fea8:	4620      	mov	r0, r4
 800feaa:	4629      	mov	r1, r5
 800feac:	f7f0 f9f6 	bl	800029c <__adddf3>
 800feb0:	4604      	mov	r4, r0
 800feb2:	460d      	mov	r5, r1
 800feb4:	e01c      	b.n	800fef0 <scalbn+0x90>
 800feb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800feba:	460b      	mov	r3, r1
 800febc:	3a36      	subs	r2, #54	; 0x36
 800febe:	4432      	add	r2, r6
 800fec0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fec4:	428a      	cmp	r2, r1
 800fec6:	dd0b      	ble.n	800fee0 <scalbn+0x80>
 800fec8:	ec45 4b11 	vmov	d1, r4, r5
 800fecc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ff38 <scalbn+0xd8>
 800fed0:	f000 f83c 	bl	800ff4c <copysign>
 800fed4:	a318      	add	r3, pc, #96	; (adr r3, 800ff38 <scalbn+0xd8>)
 800fed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feda:	ec51 0b10 	vmov	r0, r1, d0
 800fede:	e7da      	b.n	800fe96 <scalbn+0x36>
 800fee0:	2a00      	cmp	r2, #0
 800fee2:	dd08      	ble.n	800fef6 <scalbn+0x96>
 800fee4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fee8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800feec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fef0:	ec45 4b10 	vmov	d0, r4, r5
 800fef4:	bd70      	pop	{r4, r5, r6, pc}
 800fef6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fefa:	da0d      	bge.n	800ff18 <scalbn+0xb8>
 800fefc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ff00:	429e      	cmp	r6, r3
 800ff02:	ec45 4b11 	vmov	d1, r4, r5
 800ff06:	dce1      	bgt.n	800fecc <scalbn+0x6c>
 800ff08:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ff30 <scalbn+0xd0>
 800ff0c:	f000 f81e 	bl	800ff4c <copysign>
 800ff10:	a307      	add	r3, pc, #28	; (adr r3, 800ff30 <scalbn+0xd0>)
 800ff12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff16:	e7e0      	b.n	800feda <scalbn+0x7a>
 800ff18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff1c:	3236      	adds	r2, #54	; 0x36
 800ff1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ff22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff26:	4620      	mov	r0, r4
 800ff28:	4629      	mov	r1, r5
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	4b06      	ldr	r3, [pc, #24]	; (800ff48 <scalbn+0xe8>)
 800ff2e:	e7b2      	b.n	800fe96 <scalbn+0x36>
 800ff30:	c2f8f359 	.word	0xc2f8f359
 800ff34:	01a56e1f 	.word	0x01a56e1f
 800ff38:	8800759c 	.word	0x8800759c
 800ff3c:	7e37e43c 	.word	0x7e37e43c
 800ff40:	43500000 	.word	0x43500000
 800ff44:	ffff3cb0 	.word	0xffff3cb0
 800ff48:	3c900000 	.word	0x3c900000

0800ff4c <copysign>:
 800ff4c:	ec51 0b10 	vmov	r0, r1, d0
 800ff50:	ee11 0a90 	vmov	r0, s3
 800ff54:	ee10 2a10 	vmov	r2, s0
 800ff58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ff5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ff60:	ea41 0300 	orr.w	r3, r1, r0
 800ff64:	ec43 2b10 	vmov	d0, r2, r3
 800ff68:	4770      	bx	lr
	...

0800ff6c <_init>:
 800ff6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6e:	bf00      	nop
 800ff70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff72:	bc08      	pop	{r3}
 800ff74:	469e      	mov	lr, r3
 800ff76:	4770      	bx	lr

0800ff78 <_fini>:
 800ff78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff7a:	bf00      	nop
 800ff7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff7e:	bc08      	pop	{r3}
 800ff80:	469e      	mov	lr, r3
 800ff82:	4770      	bx	lr
