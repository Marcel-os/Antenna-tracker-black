
Antenna tracker black.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010214  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  080103b8  080103b8  000203b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a48  08010a48  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  08010a48  08010a48  00020a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a50  08010a50  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a50  08010a50  00020a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a54  08010a54  00020a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  08010a58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c3c  20000360  08010db4  00030360  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f9c  08010db4  00030f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017de0  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000366a  00000000  00000000  0004816c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001180  00000000  00000000  0004b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd8  00000000  00000000  0004c958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a48c  00000000  00000000  0004d930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010be3  00000000  00000000  00067dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f9f0  00000000  00000000  0007899f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010838f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006200  00000000  00000000  0010840c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000360 	.word	0x20000360
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801039c 	.word	0x0801039c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000364 	.word	0x20000364
 80001dc:	0801039c 	.word	0x0801039c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a26      	ldr	r2, [pc, #152]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_GPIO_Init+0xb8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_GPIO_Init+0xb8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <MX_GPIO_Init+0xb8>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_GPIO_Init+0xb8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <MX_GPIO_Init+0xbc>)
 8001026:	f001 fbf5 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR22_Pin|MOTOR21_Pin|MOTOR12_Pin|MOTOR11_Pin;
 800102a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_GPIO_Init+0xbc>)
 8001044:	f001 fa64 	bl	8002510 <HAL_GPIO_Init>

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400

08001058 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
    CDC_Transmit_FS((uint8_t*)ptr, len);
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	68b8      	ldr	r0, [r7, #8]
 8001068:	f007 f8ee 	bl	8008248 <CDC_Transmit_FS>
    return len;
 800106c:	687b      	ldr	r3, [r7, #4]

}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <parse>:

void parse(){
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af04      	add	r7, sp, #16
  	char header[1];
  	int32_t PWM1, PWM2, DIR1, DIR2;

  	sscanf(ReceivedData, "%s %d %d %d %d", &header, &PWM1, &PWM2, &DIR1, &DIR2);
 800107e:	f107 0110 	add.w	r1, r7, #16
 8001082:	f107 0214 	add.w	r2, r7, #20
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	460b      	mov	r3, r1
 8001098:	494d      	ldr	r1, [pc, #308]	; (80011d0 <parse+0x158>)
 800109a:	484e      	ldr	r0, [pc, #312]	; (80011d4 <parse+0x15c>)
 800109c:	f008 fce6 	bl	8009a6c <siscanf>
  	if( header[0] == 'S' && PWM1 >= 0 && PWM1 < 65535 && PWM2 >= 0 && PWM2 < 65535 && (DIR1 == 1 || DIR1 == 0) && (DIR2 == 1 || DIR2 == 0) )
 80010a0:	7d3b      	ldrb	r3, [r7, #20]
 80010a2:	2b53      	cmp	r3, #83	; 0x53
 80010a4:	f040 808d 	bne.w	80011c2 <parse+0x14a>
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f2c0 8089 	blt.w	80011c2 <parse+0x14a>
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010b6:	4293      	cmp	r3, r2
 80010b8:	f300 8083 	bgt.w	80011c2 <parse+0x14a>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db7f      	blt.n	80011c2 <parse+0x14a>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010c8:	4293      	cmp	r3, r2
 80010ca:	dc7a      	bgt.n	80011c2 <parse+0x14a>
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d002      	beq.n	80010d8 <parse+0x60>
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d174      	bne.n	80011c2 <parse+0x14a>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d002      	beq.n	80010e4 <parse+0x6c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d16e      	bne.n	80011c2 <parse+0x14a>
  	{
  		send_json(PWM1, PWM2);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f87a 	bl	80011e4 <send_json>
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM1 );
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <parse+0x160>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2 );
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <parse+0x160>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38

  		if(DIR1 == 1){
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d10b      	bne.n	800111e <parse+0xa6>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110c:	4833      	ldr	r0, [pc, #204]	; (80011dc <parse+0x164>)
 800110e:	f001 fb81 	bl	8002814 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001118:	4830      	ldr	r0, [pc, #192]	; (80011dc <parse+0x164>)
 800111a:	f001 fb7b 	bl	8002814 <HAL_GPIO_WritePin>
  		}

  		if(DIR1 == 0){
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <parse+0xc4>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112a:	482c      	ldr	r0, [pc, #176]	; (80011dc <parse+0x164>)
 800112c:	f001 fb72 	bl	8002814 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001136:	4829      	ldr	r0, [pc, #164]	; (80011dc <parse+0x164>)
 8001138:	f001 fb6c 	bl	8002814 <HAL_GPIO_WritePin>
  		}

  		if(DIR2 == 1){
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d10b      	bne.n	800115a <parse+0xe2>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001148:	4824      	ldr	r0, [pc, #144]	; (80011dc <parse+0x164>)
 800114a:	f001 fb63 	bl	8002814 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001154:	4821      	ldr	r0, [pc, #132]	; (80011dc <parse+0x164>)
 8001156:	f001 fb5d 	bl	8002814 <HAL_GPIO_WritePin>
  		}

  		if(DIR2 == 0){
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10b      	bne.n	8001178 <parse+0x100>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001166:	481d      	ldr	r0, [pc, #116]	; (80011dc <parse+0x164>)
 8001168:	f001 fb54 	bl	8002814 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001172:	481a      	ldr	r0, [pc, #104]	; (80011dc <parse+0x164>)
 8001174:	f001 fb4e 	bl	8002814 <HAL_GPIO_WritePin>
  		}

  		if( PWM1 == 0 && PWM2 ==0 ){
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d11a      	bne.n	80011b4 <parse+0x13c>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d117      	bne.n	80011b4 <parse+0x13c>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118a:	4814      	ldr	r0, [pc, #80]	; (80011dc <parse+0x164>)
 800118c:	f001 fb42 	bl	8002814 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001196:	4811      	ldr	r0, [pc, #68]	; (80011dc <parse+0x164>)
 8001198:	f001 fb3c 	bl	8002814 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	480e      	ldr	r0, [pc, #56]	; (80011dc <parse+0x164>)
 80011a4:	f001 fb36 	bl	8002814 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <parse+0x164>)
 80011b0:	f001 fb30 	bl	8002814 <HAL_GPIO_WritePin>
  		}
  		send_json(PWM1, PWM2);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f812 	bl	80011e4 <send_json>
  	{
 80011c0:	e002      	b.n	80011c8 <parse+0x150>

//	  	sprintf(DataToSend, "%d %d %d %d \r\n", PWM1, PWM2, DIR1, DIR2);
//	  	printf(DataToSend);
  	}else printf("error - zle dane \r\n");
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <parse+0x168>)
 80011c4:	f008 fc14 	bl	80099f0 <puts>
}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	080103b8 	.word	0x080103b8
 80011d4:	20000468 	.word	0x20000468
 80011d8:	20000574 	.word	0x20000574
 80011dc:	40020400 	.word	0x40020400
 80011e0:	080103c8 	.word	0x080103c8

080011e4 <send_json>:

void send_json(int32_t Encoder1, int32_t Encoder2){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	printf("{\"enkoder1\":%d,\"enkoder2\":%d}\r\n", Encoder1, Encoder2);
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <send_json+0x1c>)
 80011f4:	f008 fb88 	bl	8009908 <iprintf>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	080103dc 	.word	0x080103dc

08001204 <send_json_ada>:

void send_json_ada(double azimuth, double altitude, double distance){
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b08b      	sub	sp, #44	; 0x2c
 8001208:	af04      	add	r7, sp, #16
 800120a:	ed87 0b04 	vstr	d0, [r7, #16]
 800120e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001212:	ed87 2b00 	vstr	d2, [r7]
	printf("{\"azimuth\":%f,\"altitude\":%f,\"distance\":%f}\r\n", azimuth, altitude, distance);
 8001216:	e9d7 3400 	ldrd	r3, r4, [r7]
 800121a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800121e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001222:	e9cd 3400 	strd	r3, r4, [sp]
 8001226:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <send_json_ada+0x54>)
 800122c:	f008 fb6c 	bl	8009908 <iprintf>
	g_azimuth = azimuth;
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <send_json_ada+0x58>)
 8001232:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001236:	e9c2 3400 	strd	r3, r4, [r2]
	g_altitude = altitude;
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <send_json_ada+0x5c>)
 800123c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001240:	e9c2 3400 	strd	r3, r4, [r2]
	g_distance = distance;
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <send_json_ada+0x60>)
 8001246:	e9d7 3400 	ldrd	r3, r4, [r7]
 800124a:	e9c2 3400 	strd	r3, r4, [r2]
}
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}
 8001256:	bf00      	nop
 8001258:	080103fc 	.word	0x080103fc
 800125c:	200003f0 	.word	0x200003f0
 8001260:	20000460 	.word	0x20000460
 8001264:	200004d0 	.word	0x200004d0

08001268 <calc_azimuth>:

void calc_azimuth(double Latitude1, double Longitude1, double Height1, double Latitude2, double Longitude2, double Height2, double *azimuth, double *distance, double *altitude){ //Latitude = φ Longitude = λ
 8001268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800126c:	ed2d 8b02 	vpush	{d8}
 8001270:	b09c      	sub	sp, #112	; 0x70
 8001272:	af00      	add	r7, sp, #0
 8001274:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001278:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 800127c:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8001280:	ed87 3b08 	vstr	d3, [r7, #32]
 8001284:	ed87 4b06 	vstr	d4, [r7, #24]
 8001288:	ed87 5b04 	vstr	d5, [r7, #16]
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]

	Latitude1 *= (M_PI/180);
 8001292:	a3e1      	add	r3, pc, #900	; (adr r3, 8001618 <calc_azimuth+0x3b0>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800129c:	f7ff f9b4 	bl	8000608 <__aeabi_dmul>
 80012a0:	4603      	mov	r3, r0
 80012a2:	460c      	mov	r4, r1
 80012a4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	Longitude1 *= (M_PI/180);
 80012a8:	a3db      	add	r3, pc, #876	; (adr r3, 8001618 <calc_azimuth+0x3b0>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012b2:	f7ff f9a9 	bl	8000608 <__aeabi_dmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	Latitude2 *= (M_PI/180);
 80012be:	a3d6      	add	r3, pc, #856	; (adr r3, 8001618 <calc_azimuth+0x3b0>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012c8:	f7ff f99e 	bl	8000608 <__aeabi_dmul>
 80012cc:	4603      	mov	r3, r0
 80012ce:	460c      	mov	r4, r1
 80012d0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	Longitude2 *= (M_PI/180);
 80012d4:	a3d0      	add	r3, pc, #832	; (adr r3, 8001618 <calc_azimuth+0x3b0>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012de:	f7ff f993 	bl	8000608 <__aeabi_dmul>
 80012e2:	4603      	mov	r3, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	Height1 /= 1000;
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4bc8      	ldr	r3, [pc, #800]	; (8001610 <calc_azimuth+0x3a8>)
 80012f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012f4:	f7ff fab2 	bl	800085c <__aeabi_ddiv>
 80012f8:	4603      	mov	r3, r0
 80012fa:	460c      	mov	r4, r1
 80012fc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	Height2 /= 1000;
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4bc2      	ldr	r3, [pc, #776]	; (8001610 <calc_azimuth+0x3a8>)
 8001306:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800130a:	f7ff faa7 	bl	800085c <__aeabi_ddiv>
 800130e:	4603      	mov	r3, r0
 8001310:	460c      	mov	r4, r1
 8001312:	e9c7 3404 	strd	r3, r4, [r7, #16]

	double delta_Latitude = (Latitude2 - Latitude1);
 8001316:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800131a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800131e:	f7fe ffbb 	bl	8000298 <__aeabi_dsub>
 8001322:	4603      	mov	r3, r0
 8001324:	460c      	mov	r4, r1
 8001326:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	double delta_Longitude = (Longitude2 - Longitude1);
 800132a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800132e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001332:	f7fe ffb1 	bl	8000298 <__aeabi_dsub>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	double delta_Height = Height2 - Height1;
 800133e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001342:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001346:	f7fe ffa7 	bl	8000298 <__aeabi_dsub>
 800134a:	4603      	mov	r3, r0
 800134c:	460c      	mov	r4, r1
 800134e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58



	//θ = atan2 [(sin Δλ * cos φ₂), (cos φ�? * sin φ₂ �?� sin φ�? * cos φ₂ *  cos Δλ)]
	*azimuth = atan2( ( sin(delta_Longitude) * cos(Latitude2) ) , ( (cos(Latitude1) * sin(Latitude2)) - (sin(Latitude1) * cos(Latitude2) * cos(delta_Longitude)) ) ) * (180/ M_PI );
 8001352:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001356:	f00c fab3 	bl	800d8c0 <sin>
 800135a:	ec55 4b10 	vmov	r4, r5, d0
 800135e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001362:	f00c fa69 	bl	800d838 <cos>
 8001366:	ec53 2b10 	vmov	r2, r3, d0
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7ff f94b 	bl	8000608 <__aeabi_dmul>
 8001372:	4603      	mov	r3, r0
 8001374:	460c      	mov	r4, r1
 8001376:	ec44 3b18 	vmov	d8, r3, r4
 800137a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800137e:	f00c fa5b 	bl	800d838 <cos>
 8001382:	ec55 4b10 	vmov	r4, r5, d0
 8001386:	ed97 0b08 	vldr	d0, [r7, #32]
 800138a:	f00c fa99 	bl	800d8c0 <sin>
 800138e:	ec53 2b10 	vmov	r2, r3, d0
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7ff f937 	bl	8000608 <__aeabi_dmul>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	4625      	mov	r5, r4
 80013a0:	461c      	mov	r4, r3
 80013a2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80013a6:	f00c fa8b 	bl	800d8c0 <sin>
 80013aa:	ec59 8b10 	vmov	r8, r9, d0
 80013ae:	ed97 0b08 	vldr	d0, [r7, #32]
 80013b2:	f00c fa41 	bl	800d838 <cos>
 80013b6:	ec53 2b10 	vmov	r2, r3, d0
 80013ba:	4640      	mov	r0, r8
 80013bc:	4649      	mov	r1, r9
 80013be:	f7ff f923 	bl	8000608 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4690      	mov	r8, r2
 80013c8:	4699      	mov	r9, r3
 80013ca:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80013ce:	f00c fa33 	bl	800d838 <cos>
 80013d2:	ec53 2b10 	vmov	r2, r3, d0
 80013d6:	4640      	mov	r0, r8
 80013d8:	4649      	mov	r1, r9
 80013da:	f7ff f915 	bl	8000608 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7fe ff57 	bl	8000298 <__aeabi_dsub>
 80013ea:	4603      	mov	r3, r0
 80013ec:	460c      	mov	r4, r1
 80013ee:	ec44 3b17 	vmov	d7, r3, r4
 80013f2:	eeb0 1a47 	vmov.f32	s2, s14
 80013f6:	eef0 1a67 	vmov.f32	s3, s15
 80013fa:	eeb0 0a48 	vmov.f32	s0, s16
 80013fe:	eef0 0a68 	vmov.f32	s1, s17
 8001402:	f00c fafd 	bl	800da00 <atan2>
 8001406:	ec51 0b10 	vmov	r0, r1, d0
 800140a:	a37b      	add	r3, pc, #492	; (adr r3, 80015f8 <calc_azimuth+0x390>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff f8fa 	bl	8000608 <__aeabi_dmul>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	e9c2 3400 	strd	r3, r4, [r2]
	//Haversine formula:
	//a = sin²(Δφ/2) + cos φ�? * cos φ₂ * sin²(Δλ/2)
	double a = pow( sin(delta_Latitude/2), 2.0 ) + (cos(Latitude1) * cos(Latitude2) * pow(sin(delta_Longitude/2), 2.0));
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800142a:	f7ff fa17 	bl	800085c <__aeabi_ddiv>
 800142e:	4603      	mov	r3, r0
 8001430:	460c      	mov	r4, r1
 8001432:	ec44 3b17 	vmov	d7, r3, r4
 8001436:	eeb0 0a47 	vmov.f32	s0, s14
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	f00c fa3f 	bl	800d8c0 <sin>
 8001442:	eeb0 7a40 	vmov.f32	s14, s0
 8001446:	eef0 7a60 	vmov.f32	s15, s1
 800144a:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8001600 <calc_azimuth+0x398>
 800144e:	eeb0 0a47 	vmov.f32	s0, s14
 8001452:	eef0 0a67 	vmov.f32	s1, s15
 8001456:	f00c fad5 	bl	800da04 <pow>
 800145a:	ec59 8b10 	vmov	r8, r9, d0
 800145e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001462:	f00c f9e9 	bl	800d838 <cos>
 8001466:	ec55 4b10 	vmov	r4, r5, d0
 800146a:	ed97 0b08 	vldr	d0, [r7, #32]
 800146e:	f00c f9e3 	bl	800d838 <cos>
 8001472:	ec53 2b10 	vmov	r2, r3, d0
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7ff f8c5 	bl	8000608 <__aeabi_dmul>
 800147e:	4603      	mov	r3, r0
 8001480:	460c      	mov	r4, r1
 8001482:	4625      	mov	r5, r4
 8001484:	461c      	mov	r4, r3
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800148e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001492:	f7ff f9e3 	bl	800085c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	ec43 2b17 	vmov	d7, r2, r3
 800149e:	eeb0 0a47 	vmov.f32	s0, s14
 80014a2:	eef0 0a67 	vmov.f32	s1, s15
 80014a6:	f00c fa0b 	bl	800d8c0 <sin>
 80014aa:	eeb0 7a40 	vmov.f32	s14, s0
 80014ae:	eef0 7a60 	vmov.f32	s15, s1
 80014b2:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8001600 <calc_azimuth+0x398>
 80014b6:	eeb0 0a47 	vmov.f32	s0, s14
 80014ba:	eef0 0a67 	vmov.f32	s1, s15
 80014be:	f00c faa1 	bl	800da04 <pow>
 80014c2:	ec53 2b10 	vmov	r2, r3, d0
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7ff f89d 	bl	8000608 <__aeabi_dmul>
 80014ce:	4603      	mov	r3, r0
 80014d0:	460c      	mov	r4, r1
 80014d2:	461a      	mov	r2, r3
 80014d4:	4623      	mov	r3, r4
 80014d6:	4640      	mov	r0, r8
 80014d8:	4649      	mov	r1, r9
 80014da:	f7fe fedf 	bl	800029c <__adddf3>
 80014de:	4603      	mov	r3, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	//c = 2 * atan2 [�?�a, �?�(1�?�a)]
	double c = 2.0 * atan2( sqrt(a), sqrt(1.0-a));
 80014e6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80014ea:	f00c fbfb 	bl	800dce4 <sqrt>
 80014ee:	eeb0 8a40 	vmov.f32	s16, s0
 80014f2:	eef0 8a60 	vmov.f32	s17, s1
 80014f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80014fa:	f04f 0000 	mov.w	r0, #0
 80014fe:	4945      	ldr	r1, [pc, #276]	; (8001614 <calc_azimuth+0x3ac>)
 8001500:	f7fe feca 	bl	8000298 <__aeabi_dsub>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	ec44 3b17 	vmov	d7, r3, r4
 800150c:	eeb0 0a47 	vmov.f32	s0, s14
 8001510:	eef0 0a67 	vmov.f32	s1, s15
 8001514:	f00c fbe6 	bl	800dce4 <sqrt>
 8001518:	eeb0 7a40 	vmov.f32	s14, s0
 800151c:	eef0 7a60 	vmov.f32	s15, s1
 8001520:	eeb0 1a47 	vmov.f32	s2, s14
 8001524:	eef0 1a67 	vmov.f32	s3, s15
 8001528:	eeb0 0a48 	vmov.f32	s0, s16
 800152c:	eef0 0a68 	vmov.f32	s1, s17
 8001530:	f00c fa66 	bl	800da00 <atan2>
 8001534:	ec51 0b10 	vmov	r0, r1, d0
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	f7fe feae 	bl	800029c <__adddf3>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	//d = R * c, R = 6371 km - radius of the Earth
	double sphere_distance = 6371.0 * c; // in km
 8001548:	a32f      	add	r3, pc, #188	; (adr r3, 8001608 <calc_azimuth+0x3a0>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001552:	f7ff f859 	bl	8000608 <__aeabi_dmul>
 8001556:	4603      	mov	r3, r0
 8001558:	460c      	mov	r4, r1
 800155a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	*distance = sqrt( pow(sphere_distance, 2.0) + pow(delta_Height, 2.0));// in km
 800155e:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001600 <calc_azimuth+0x398>
 8001562:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001566:	f00c fa4d 	bl	800da04 <pow>
 800156a:	ec55 4b10 	vmov	r4, r5, d0
 800156e:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8001600 <calc_azimuth+0x398>
 8001572:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8001576:	f00c fa45 	bl	800da04 <pow>
 800157a:	ec53 2b10 	vmov	r2, r3, d0
 800157e:	4620      	mov	r0, r4
 8001580:	4629      	mov	r1, r5
 8001582:	f7fe fe8b 	bl	800029c <__adddf3>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	ec44 3b17 	vmov	d7, r3, r4
 800158e:	eeb0 0a47 	vmov.f32	s0, s14
 8001592:	eef0 0a67 	vmov.f32	s1, s15
 8001596:	f00c fba5 	bl	800dce4 <sqrt>
 800159a:	eeb0 7a40 	vmov.f32	s14, s0
 800159e:	eef0 7a60 	vmov.f32	s15, s1
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	ed83 7b00 	vstr	d7, [r3]
	*altitude = acos(sphere_distance/ *distance)  * (180/M_PI);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015ae:	461a      	mov	r2, r3
 80015b0:	4623      	mov	r3, r4
 80015b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80015b6:	f7ff f951 	bl	800085c <__aeabi_ddiv>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	ec44 3b17 	vmov	d7, r3, r4
 80015c2:	eeb0 0a47 	vmov.f32	s0, s14
 80015c6:	eef0 0a67 	vmov.f32	s1, s15
 80015ca:	f00c f9c1 	bl	800d950 <acos>
 80015ce:	ec51 0b10 	vmov	r0, r1, d0
 80015d2:	a309      	add	r3, pc, #36	; (adr r3, 80015f8 <calc_azimuth+0x390>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f816 	bl	8000608 <__aeabi_dmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80015e6:	bf00      	nop
 80015e8:	3770      	adds	r7, #112	; 0x70
 80015ea:	46bd      	mov	sp, r7
 80015ec:	ecbd 8b02 	vpop	{d8}
 80015f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015f4:	f3af 8000 	nop.w
 80015f8:	1a63c1f8 	.word	0x1a63c1f8
 80015fc:	404ca5dc 	.word	0x404ca5dc
 8001600:	00000000 	.word	0x00000000
 8001604:	40000000 	.word	0x40000000
 8001608:	00000000 	.word	0x00000000
 800160c:	40b8e300 	.word	0x40b8e300
 8001610:	408f4000 	.word	0x408f4000
 8001614:	3ff00000 	.word	0x3ff00000
 8001618:	a2529d39 	.word	0xa2529d39
 800161c:	3f91df46 	.word	0x3f91df46

08001620 <parse_loc>:

void parse_loc(){
 8001620:	b580      	push	{r7, lr}
 8001622:	b09a      	sub	sp, #104	; 0x68
 8001624:	af06      	add	r7, sp, #24
  	char header[1];
  	double Latitude1, Longitude1, Height1, Latitude2, Longitude2, Height2, azimuth, distance, altitude;

  	sscanf(ReceivedData, "%s %lf %lf %lf %lf %lf %lf", &header, &Latitude1, &Longitude1, &Height1, &Latitude2, &Longitude2, &Height2);
 8001626:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800162a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800162e:	f107 0318 	add.w	r3, r7, #24
 8001632:	9304      	str	r3, [sp, #16]
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	9303      	str	r3, [sp, #12]
 800163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	460b      	mov	r3, r1
 800164e:	4920      	ldr	r1, [pc, #128]	; (80016d0 <parse_loc+0xb0>)
 8001650:	4820      	ldr	r0, [pc, #128]	; (80016d4 <parse_loc+0xb4>)
 8001652:	f008 fa0b 	bl	8009a6c <siscanf>
  	if( header[0] == 'G' )
 8001656:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800165a:	2b47      	cmp	r3, #71	; 0x47
 800165c:	d130      	bne.n	80016c0 <parse_loc+0xa0>
  	{
  		calc_azimuth( Latitude1,  Longitude1,  Height1,  Latitude2,  Longitude2,  Height2,  &azimuth,  &distance,  &altitude);
 800165e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001662:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8001666:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 800166a:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800166e:	ed97 4b08 	vldr	d4, [r7, #32]
 8001672:	ed97 5b06 	vldr	d5, [r7, #24]
 8001676:	463a      	mov	r2, r7
 8001678:	f107 0108 	add.w	r1, r7, #8
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4618      	mov	r0, r3
 8001682:	eeb0 1a46 	vmov.f32	s2, s12
 8001686:	eef0 1a66 	vmov.f32	s3, s13
 800168a:	eeb0 0a47 	vmov.f32	s0, s14
 800168e:	eef0 0a67 	vmov.f32	s1, s15
 8001692:	f7ff fde9 	bl	8001268 <calc_azimuth>
  		send_json_ada( azimuth, altitude, distance);
 8001696:	ed97 7b04 	vldr	d7, [r7, #16]
 800169a:	ed97 6b00 	vldr	d6, [r7]
 800169e:	ed97 5b02 	vldr	d5, [r7, #8]
 80016a2:	eeb0 2a45 	vmov.f32	s4, s10
 80016a6:	eef0 2a65 	vmov.f32	s5, s11
 80016aa:	eeb0 1a46 	vmov.f32	s2, s12
 80016ae:	eef0 1a66 	vmov.f32	s3, s13
 80016b2:	eeb0 0a47 	vmov.f32	s0, s14
 80016b6:	eef0 0a67 	vmov.f32	s1, s15
 80016ba:	f7ff fda3 	bl	8001204 <send_json_ada>

  	}else printf("error - zle dane \r\n");

}
 80016be:	e002      	b.n	80016c6 <parse_loc+0xa6>
  	}else printf("error - zle dane \r\n");
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <parse_loc+0xb8>)
 80016c2:	f008 f995 	bl	80099f0 <puts>
}
 80016c6:	bf00      	nop
 80016c8:	3750      	adds	r7, #80	; 0x50
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	0801042c 	.word	0x0801042c
 80016d4:	20000468 	.word	0x20000468
 80016d8:	080103c8 	.word	0x080103c8

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e0:	f000 fd70 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e4:	f000 f908 	bl	80018f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e8:	f7ff fc56 	bl	8000f98 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80016ec:	f006 fcbe 	bl	800806c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80016f0:	f000 fb0a 	bl	8001d08 <MX_TIM1_Init>
  MX_TIM2_Init();
 80016f4:	f000 fbbe 	bl	8001e74 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016f8:	f000 fc10 	bl	8001f1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	4870      	ldr	r0, [pc, #448]	; (80018c0 <main+0x1e4>)
 8001700:	f003 fc73 	bl	8004fea <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001704:	2104      	movs	r1, #4
 8001706:	486e      	ldr	r0, [pc, #440]	; (80018c0 <main+0x1e4>)
 8001708:	f003 fc6f 	bl	8004fea <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800170c:	213c      	movs	r1, #60	; 0x3c
 800170e:	486d      	ldr	r0, [pc, #436]	; (80018c4 <main+0x1e8>)
 8001710:	f002 ff8a 	bl	8004628 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001714:	213c      	movs	r1, #60	; 0x3c
 8001716:	486c      	ldr	r0, [pc, #432]	; (80018c8 <main+0x1ec>)
 8001718:	f002 ff86 	bl	8004628 <HAL_TIM_Encoder_Start>

  pid_init(&pid_azimuth, 150.0f, 50.0f, 0.005f, 10, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	210a      	movs	r1, #10
 8001720:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 80018cc <main+0x1f0>
 8001724:	eddf 0a6a 	vldr	s1, [pc, #424]	; 80018d0 <main+0x1f4>
 8001728:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 80018d4 <main+0x1f8>
 800172c:	486a      	ldr	r0, [pc, #424]	; (80018d8 <main+0x1fc>)
 800172e:	f000 f952 	bl	80019d6 <pid_init>
  pid_azimuth.p_max = pid_scale(&pid_azimuth, 4095);
 8001732:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 80018dc <main+0x200>
 8001736:	4868      	ldr	r0, [pc, #416]	; (80018d8 <main+0x1fc>)
 8001738:	f000 f9d8 	bl	8001aec <pid_scale>
 800173c:	4602      	mov	r2, r0
 800173e:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <main+0x1fc>)
 8001740:	619a      	str	r2, [r3, #24]
  pid_azimuth.p_min = pid_scale(&pid_azimuth, -4095);
 8001742:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80018e0 <main+0x204>
 8001746:	4864      	ldr	r0, [pc, #400]	; (80018d8 <main+0x1fc>)
 8001748:	f000 f9d0 	bl	8001aec <pid_scale>
 800174c:	4602      	mov	r2, r0
 800174e:	4b62      	ldr	r3, [pc, #392]	; (80018d8 <main+0x1fc>)
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  pid_azimuth.i_max = pid_scale(&pid_azimuth, 4095);
 8001752:	ed9f 0a62 	vldr	s0, [pc, #392]	; 80018dc <main+0x200>
 8001756:	4860      	ldr	r0, [pc, #384]	; (80018d8 <main+0x1fc>)
 8001758:	f000 f9c8 	bl	8001aec <pid_scale>
 800175c:	4602      	mov	r2, r0
 800175e:	4b5e      	ldr	r3, [pc, #376]	; (80018d8 <main+0x1fc>)
 8001760:	61da      	str	r2, [r3, #28]
  pid_azimuth.i_min = pid_scale(&pid_azimuth, -4095);
 8001762:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80018e0 <main+0x204>
 8001766:	485c      	ldr	r0, [pc, #368]	; (80018d8 <main+0x1fc>)
 8001768:	f000 f9c0 	bl	8001aec <pid_scale>
 800176c:	4602      	mov	r2, r0
 800176e:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <main+0x1fc>)
 8001770:	629a      	str	r2, [r3, #40]	; 0x28
  pid_azimuth.d_max = pid_scale(&pid_azimuth, 4095);
 8001772:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80018dc <main+0x200>
 8001776:	4858      	ldr	r0, [pc, #352]	; (80018d8 <main+0x1fc>)
 8001778:	f000 f9b8 	bl	8001aec <pid_scale>
 800177c:	4602      	mov	r2, r0
 800177e:	4b56      	ldr	r3, [pc, #344]	; (80018d8 <main+0x1fc>)
 8001780:	621a      	str	r2, [r3, #32]
  pid_azimuth.d_min = pid_scale(&pid_azimuth, -4095);
 8001782:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80018e0 <main+0x204>
 8001786:	4854      	ldr	r0, [pc, #336]	; (80018d8 <main+0x1fc>)
 8001788:	f000 f9b0 	bl	8001aec <pid_scale>
 800178c:	4602      	mov	r2, r0
 800178e:	4b52      	ldr	r3, [pc, #328]	; (80018d8 <main+0x1fc>)
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_azimuth.total_max = pid_scale(&pid_azimuth, 4095);
 8001792:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80018dc <main+0x200>
 8001796:	4850      	ldr	r0, [pc, #320]	; (80018d8 <main+0x1fc>)
 8001798:	f000 f9a8 	bl	8001aec <pid_scale>
 800179c:	4602      	mov	r2, r0
 800179e:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <main+0x1fc>)
 80017a0:	649a      	str	r2, [r3, #72]	; 0x48
  pid_azimuth.total_min = pid_scale(&pid_azimuth, 0);
 80017a2:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80018e4 <main+0x208>
 80017a6:	484c      	ldr	r0, [pc, #304]	; (80018d8 <main+0x1fc>)
 80017a8:	f000 f9a0 	bl	8001aec <pid_scale>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <main+0x1fc>)
 80017b0:	64da      	str	r2, [r3, #76]	; 0x4c

  pid_init(&pid_height, 150.0f, 50.0f, 0.005f, 10, 1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	210a      	movs	r1, #10
 80017b6:	ed9f 1a45 	vldr	s2, [pc, #276]	; 80018cc <main+0x1f0>
 80017ba:	eddf 0a45 	vldr	s1, [pc, #276]	; 80018d0 <main+0x1f4>
 80017be:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80018d4 <main+0x1f8>
 80017c2:	4849      	ldr	r0, [pc, #292]	; (80018e8 <main+0x20c>)
 80017c4:	f000 f907 	bl	80019d6 <pid_init>
  pid_height.p_max = pid_scale(&pid_height, 4095);
 80017c8:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80018dc <main+0x200>
 80017cc:	4846      	ldr	r0, [pc, #280]	; (80018e8 <main+0x20c>)
 80017ce:	f000 f98d 	bl	8001aec <pid_scale>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <main+0x20c>)
 80017d6:	619a      	str	r2, [r3, #24]
  pid_height.p_min = pid_scale(&pid_height, -4095);
 80017d8:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80018e0 <main+0x204>
 80017dc:	4842      	ldr	r0, [pc, #264]	; (80018e8 <main+0x20c>)
 80017de:	f000 f985 	bl	8001aec <pid_scale>
 80017e2:	4602      	mov	r2, r0
 80017e4:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <main+0x20c>)
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
  pid_height.i_max = pid_scale(&pid_height, 4095);
 80017e8:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80018dc <main+0x200>
 80017ec:	483e      	ldr	r0, [pc, #248]	; (80018e8 <main+0x20c>)
 80017ee:	f000 f97d 	bl	8001aec <pid_scale>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <main+0x20c>)
 80017f6:	61da      	str	r2, [r3, #28]
  pid_height.i_min = pid_scale(&pid_height, -4095);
 80017f8:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80018e0 <main+0x204>
 80017fc:	483a      	ldr	r0, [pc, #232]	; (80018e8 <main+0x20c>)
 80017fe:	f000 f975 	bl	8001aec <pid_scale>
 8001802:	4602      	mov	r2, r0
 8001804:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <main+0x20c>)
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
  pid_height.d_max = pid_scale(&pid_height, 4095);
 8001808:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80018dc <main+0x200>
 800180c:	4836      	ldr	r0, [pc, #216]	; (80018e8 <main+0x20c>)
 800180e:	f000 f96d 	bl	8001aec <pid_scale>
 8001812:	4602      	mov	r2, r0
 8001814:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <main+0x20c>)
 8001816:	621a      	str	r2, [r3, #32]
  pid_height.d_min = pid_scale(&pid_height, -4095);
 8001818:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80018e0 <main+0x204>
 800181c:	4832      	ldr	r0, [pc, #200]	; (80018e8 <main+0x20c>)
 800181e:	f000 f965 	bl	8001aec <pid_scale>
 8001822:	4602      	mov	r2, r0
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <main+0x20c>)
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_height.total_max = pid_scale(&pid_height, 4095);
 8001828:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80018dc <main+0x200>
 800182c:	482e      	ldr	r0, [pc, #184]	; (80018e8 <main+0x20c>)
 800182e:	f000 f95d 	bl	8001aec <pid_scale>
 8001832:	4602      	mov	r2, r0
 8001834:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <main+0x20c>)
 8001836:	649a      	str	r2, [r3, #72]	; 0x48
  pid_height.total_min = pid_scale(&pid_height, 0);
 8001838:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80018e4 <main+0x208>
 800183c:	482a      	ldr	r0, [pc, #168]	; (80018e8 <main+0x20c>)
 800183e:	f000 f955 	bl	8001aec <pid_scale>
 8001842:	4602      	mov	r2, r0
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <main+0x20c>)
 8001846:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <main+0x1e4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2200      	movs	r2, #0
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001850:	2100      	movs	r1, #0
 8001852:	481b      	ldr	r0, [pc, #108]	; (80018c0 <main+0x1e4>)
 8001854:	f002 fe24 	bl	80044a0 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <main+0x1e4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2200      	movs	r2, #0
 800185e:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001860:	2104      	movs	r1, #4
 8001862:	4817      	ldr	r0, [pc, #92]	; (80018c0 <main+0x1e4>)
 8001864:	f002 fe1c 	bl	80044a0 <HAL_TIM_PWM_Start>

		HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186e:	481f      	ldr	r0, [pc, #124]	; (80018ec <main+0x210>)
 8001870:	f000 ffd0 	bl	8002814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800187a:	481c      	ldr	r0, [pc, #112]	; (80018ec <main+0x210>)
 800187c:	f000 ffca 	bl	8002814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001886:	4819      	ldr	r0, [pc, #100]	; (80018ec <main+0x210>)
 8001888:	f000 ffc4 	bl	8002814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001892:	4816      	ldr	r0, [pc, #88]	; (80018ec <main+0x210>)
 8001894:	f000 ffbe 	bl	8002814 <HAL_GPIO_WritePin>
  while (1)
  {

	  if(ReceivedDataFlag == 1){
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <main+0x214>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d10b      	bne.n	80018b8 <main+0x1dc>
	  	ReceivedDataFlag = 0;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <main+0x214>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
	  	//parse();
	  	if(ReceivedData[0] == 'S') parse();
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <main+0x218>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b53      	cmp	r3, #83	; 0x53
 80018ac:	d102      	bne.n	80018b4 <main+0x1d8>
 80018ae:	f7ff fbe3 	bl	8001078 <parse>
 80018b2:	e001      	b.n	80018b8 <main+0x1dc>
	  	else parse_loc();
 80018b4:	f7ff feb4 	bl	8001620 <parse_loc>

	  }
	  HAL_Delay(100);
 80018b8:	2064      	movs	r0, #100	; 0x64
 80018ba:	f000 fcf5 	bl	80022a8 <HAL_Delay>
	  if(ReceivedDataFlag == 1){
 80018be:	e7eb      	b.n	8001898 <main+0x1bc>
 80018c0:	20000574 	.word	0x20000574
 80018c4:	200005b4 	.word	0x200005b4
 80018c8:	20000534 	.word	0x20000534
 80018cc:	3ba3d70a 	.word	0x3ba3d70a
 80018d0:	42480000 	.word	0x42480000
 80018d4:	43160000 	.word	0x43160000
 80018d8:	20000390 	.word	0x20000390
 80018dc:	457ff000 	.word	0x457ff000
 80018e0:	c57ff000 	.word	0xc57ff000
 80018e4:	00000000 	.word	0x00000000
 80018e8:	200004d8 	.word	0x200004d8
 80018ec:	40020400 	.word	0x40020400
 80018f0:	2000037c 	.word	0x2000037c
 80018f4:	20000468 	.word	0x20000468

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b094      	sub	sp, #80	; 0x50
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	2230      	movs	r2, #48	; 0x30
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f007 f910 	bl	8008b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <SystemClock_Config+0xc8>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	4a26      	ldr	r2, [pc, #152]	; (80019c0 <SystemClock_Config+0xc8>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192a:	6413      	str	r3, [r2, #64]	; 0x40
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <SystemClock_Config+0xc8>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <SystemClock_Config+0xcc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <SystemClock_Config+0xcc>)
 8001942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <SystemClock_Config+0xcc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001954:	2301      	movs	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195e:	2302      	movs	r3, #2
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001968:	2319      	movs	r3, #25
 800196a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800196c:	23c0      	movs	r3, #192	; 0xc0
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001970:	2302      	movs	r3, #2
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001974:	2304      	movs	r3, #4
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	4618      	mov	r0, r3
 800197e:	f002 f8e5 	bl	8003b4c <HAL_RCC_OscConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001988:	f000 f81e 	bl	80019c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198c:	230f      	movs	r3, #15
 800198e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001990:	2302      	movs	r3, #2
 8001992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	2103      	movs	r1, #3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fb3f 	bl	800402c <HAL_RCC_ClockConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019b4:	f000 f808 	bl	80019c8 <Error_Handler>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3750      	adds	r7, #80	; 0x50
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40007000 	.word	0x40007000

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <pid_init>:
 *
 * Created on: 09.03.2018
 * Author: Wojciech Domski
 */
#include "pid.h"
void pid_init(cpid_t *pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 80019d6:	b480      	push	{r7}
 80019d8:	b089      	sub	sp, #36	; 0x24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6178      	str	r0, [r7, #20]
 80019de:	ed87 0a04 	vstr	s0, [r7, #16]
 80019e2:	edc7 0a03 	vstr	s1, [r7, #12]
 80019e6:	ed87 1a02 	vstr	s2, [r7, #8]
 80019ea:	460b      	mov	r3, r1
 80019ec:	603a      	str	r2, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
	uint32_t k;
	pid->power = 1;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2201      	movs	r2, #1
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e007      	b.n	8001a0c <pid_init+0x36>
		pid->power = pid->power * 2;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a00:	005a      	lsls	r2, r3, #1
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d3f3      	bcc.n	80019fc <pid_init+0x26>
	}
	pid->f = f;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	79fa      	ldrb	r2, [r7, #7]
 8001a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pid->p = (int32_t) (p * pid->power);
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a34:	ee17 2a90 	vmov	r2, s15
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
	pid->i = (int32_t) (i * pid->power);
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a54:	ee17 2a90 	vmov	r2, s15
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	605a      	str	r2, [r3, #4]
	pid->d = (int32_t) (d * pid->power);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a68:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a74:	ee17 2a90 	vmov	r2, s15
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	609a      	str	r2, [r3, #8]
	pid->p_val = 0;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
	pid->i_val = 0;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
	pid->d_val = 0;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
	pid->p_max = INT32_MAX;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a94:	619a      	str	r2, [r3, #24]
	pid->p_min = INT32_MIN;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
	pid->i_max = INT32_MAX;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001aa4:	61da      	str	r2, [r3, #28]
	pid->i_min = INT32_MIN;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
	pid->d_max = INT32_MAX;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ab4:	621a      	str	r2, [r3, #32]
	pid->d_min = INT32_MIN;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_last = 0;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
	pid->sum = 0;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
	pid->total_max = INT32_MAX;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ad0:	649a      	str	r2, [r3, #72]	; 0x48
	pid->total_min = INT32_MIN;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ad8:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->dt_ms = dt_ms;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001ae0:	bf00      	nop
 8001ae2:	3724      	adds	r7, #36	; 0x24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <pid_scale>:
		total = pid->total_min;
	pid->control = total >> pid->f;
	pid->e_last = e;
	return pid->control;
}
int32_t pid_scale(cpid_t *pid, float v) {
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	ed87 0a00 	vstr	s0, [r7]
	return v * pid->power;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b04:	edd7 7a00 	vldr	s15, [r7]
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b10:	ee17 3a90 	vmov	r3, s15
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_MspInit+0x4c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc4:	f000 fb50 	bl	8002268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <OTG_FS_IRQHandler+0x10>)
 8001bd2:	f000 ff88 	bl	8002ae6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000b90 	.word	0x20000b90

08001be0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e00a      	b.n	8001c08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bf2:	f3af 8000 	nop.w
 8001bf6:	4601      	mov	r1, r0
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	60ba      	str	r2, [r7, #8]
 8001bfe:	b2ca      	uxtb	r2, r1
 8001c00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf0      	blt.n	8001bf2 <_read+0x12>
	}

return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return -1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c42:	605a      	str	r2, [r3, #4]
	return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_isatty>:

int _isatty(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	return 1;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x50>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x16>
		heap_end = &end;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <_sbrk+0x50>)
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <_sbrk+0x54>)
 8001c98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <_sbrk+0x50>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <_sbrk+0x50>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	466a      	mov	r2, sp
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d907      	bls.n	8001cbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001cae:	f006 ff03 	bl	8008ab8 <__errno>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbc:	e006      	b.n	8001ccc <_sbrk+0x48>
	}

	heap_end += incr;
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <_sbrk+0x50>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <_sbrk+0x50>)
 8001cc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000380 	.word	0x20000380
 8001cd8:	20000fa0 	.word	0x20000fa0

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <SystemInit+0x28>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <SystemInit+0x28>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <SystemInit+0x28>)
 8001cf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf6:	609a      	str	r2, [r3, #8]
#endif
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b096      	sub	sp, #88	; 0x58
 8001d0c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f006 fef3 	bl	8008b2c <memset>

  htim1.Instance = TIM1;
 8001d46:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001d48:	4a49      	ldr	r2, [pc, #292]	; (8001e70 <MX_TIM1_Init+0x168>)
 8001d4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96;
 8001d4c:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001d4e:	2260      	movs	r2, #96	; 0x60
 8001d50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001d58:	4b44      	ldr	r3, [pc, #272]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d60:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d66:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d72:	483e      	ldr	r0, [pc, #248]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001d74:	f002 fafe 	bl	8004374 <HAL_TIM_Base_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d7e:	f7ff fe23 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4837      	ldr	r0, [pc, #220]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001d90:	f002 fda8 	bl	80048e4 <HAL_TIM_ConfigClockSource>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d9a:	f7ff fe15 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d9e:	4833      	ldr	r0, [pc, #204]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001da0:	f002 fb48 	bl	8004434 <HAL_TIM_PWM_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001daa:	f7ff fe0d 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001dae:	482f      	ldr	r0, [pc, #188]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001db0:	f002 fb0b 	bl	80043ca <HAL_TIM_OC_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001dba:	f7ff fe05 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4827      	ldr	r0, [pc, #156]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001dce:	f003 f937 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001dd8:	f7ff fdf6 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ddc:	2360      	movs	r3, #96	; 0x60
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481a      	ldr	r0, [pc, #104]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001e02:	f002 fca9 	bl	8004758 <HAL_TIM_PWM_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001e0c:	f7ff fddc 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	2204      	movs	r2, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4813      	ldr	r0, [pc, #76]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001e1e:	f002 fc3b 	bl	8004698 <HAL_TIM_OC_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001e28:	f7ff fdce 	bl	80019c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4807      	ldr	r0, [pc, #28]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001e50:	f003 f964 	bl	800511c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8001e5a:	f7ff fdb5 	bl	80019c8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001e5e:	4803      	ldr	r0, [pc, #12]	; (8001e6c <MX_TIM1_Init+0x164>)
 8001e60:	f000 f94c 	bl	80020fc <HAL_TIM_MspPostInit>

}
 8001e64:	bf00      	nop
 8001e66:	3758      	adds	r7, #88	; 0x58
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000574 	.word	0x20000574
 8001e70:	40010000 	.word	0x40010000

08001e74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	; 0x30
 8001e78:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f006 fe52 	bl	8008b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <MX_TIM2_Init+0xa4>)
 8001e92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <MX_TIM2_Init+0xa4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <MX_TIM2_Init+0xa4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <MX_TIM2_Init+0xa4>)
 8001ea6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MX_TIM2_Init+0xa4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_TIM2_Init+0xa4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	480d      	ldr	r0, [pc, #52]	; (8001f18 <MX_TIM2_Init+0xa4>)
 8001ee4:	f002 fb0e 	bl	8004504 <HAL_TIM_Encoder_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001eee:	f7ff fd6b 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <MX_TIM2_Init+0xa4>)
 8001f00:	f003 f89e 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f0a:	f7ff fd5d 	bl	80019c8 <Error_Handler>
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3730      	adds	r7, #48	; 0x30
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200005b4 	.word	0x200005b4

08001f1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	2224      	movs	r2, #36	; 0x24
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f006 fdfe 	bl	8008b2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <MX_TIM3_Init+0xa0>)
 8001f3a:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <MX_TIM3_Init+0xa4>)
 8001f3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_TIM3_Init+0xa0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <MX_TIM3_Init+0xa0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <MX_TIM3_Init+0xa0>)
 8001f4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <MX_TIM3_Init+0xa0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_TIM3_Init+0xa0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f66:	2301      	movs	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f76:	2301      	movs	r3, #1
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4619      	mov	r1, r3
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <MX_TIM3_Init+0xa0>)
 8001f8a:	f002 fabb 	bl	8004504 <HAL_TIM_Encoder_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f94:	f7ff fd18 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_TIM3_Init+0xa0>)
 8001fa6:	f003 f84b 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001fb0:	f7ff fd0a 	bl	80019c8 <Error_Handler>
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3730      	adds	r7, #48	; 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000534 	.word	0x20000534
 8001fc0:	40000400 	.word	0x40000400

08001fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <HAL_TIM_Base_MspInit+0x3c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_TIM_Base_MspInit+0x40>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4a09      	ldr	r2, [pc, #36]	; (8002004 <HAL_TIM_Base_MspInit+0x40>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_TIM_Base_MspInit+0x40>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40010000 	.word	0x40010000
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	; 0x30
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d12c      	bne.n	8002084 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002062:	2303      	movs	r3, #3
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002072:	2301      	movs	r3, #1
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 031c 	add.w	r3, r7, #28
 800207a:	4619      	mov	r1, r3
 800207c:	481d      	ldr	r0, [pc, #116]	; (80020f4 <HAL_TIM_Encoder_MspInit+0xec>)
 800207e:	f000 fa47 	bl	8002510 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002082:	e030      	b.n	80020e6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d12b      	bne.n	80020e6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a0f      	ldr	r2, [pc, #60]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020d6:	2302      	movs	r3, #2
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <HAL_TIM_Encoder_MspInit+0xec>)
 80020e2:	f000 fa15 	bl	8002510 <HAL_GPIO_Init>
}
 80020e6:	bf00      	nop
 80020e8:	3730      	adds	r7, #48	; 0x30
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40000400 	.word	0x40000400

080020fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a12      	ldr	r2, [pc, #72]	; (8002164 <HAL_TIM_MspPostInit+0x68>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d11e      	bne.n	800215c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_TIM_MspPostInit+0x6c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_TIM_MspPostInit+0x6c>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_TIM_MspPostInit+0x6c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 800213a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800213e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800214c:	2301      	movs	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	4619      	mov	r1, r3
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <HAL_TIM_MspPostInit+0x70>)
 8002158:	f000 f9da 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800215c:	bf00      	nop
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40010000 	.word	0x40010000
 8002168:	40023800 	.word	0x40023800
 800216c:	40020000 	.word	0x40020000

08002170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002174:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002176:	e003      	b.n	8002180 <LoopCopyDataInit>

08002178 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800217a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800217c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800217e:	3104      	adds	r1, #4

08002180 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002184:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002186:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002188:	d3f6      	bcc.n	8002178 <CopyDataInit>
  ldr  r2, =_sbss
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800218c:	e002      	b.n	8002194 <LoopFillZerobss>

0800218e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800218e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002190:	f842 3b04 	str.w	r3, [r2], #4

08002194 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002196:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002198:	d3f9      	bcc.n	800218e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800219a:	f7ff fd9f 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219e:	f006 fc91 	bl	8008ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a2:	f7ff fa9b 	bl	80016dc <main>
  bx  lr    
 80021a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80021ac:	08010a58 	.word	0x08010a58
  ldr  r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021b4:	2000035c 	.word	0x2000035c
  ldr  r2, =_sbss
 80021b8:	20000360 	.word	0x20000360
  ldr  r3, = _ebss
 80021bc:	20000f9c 	.word	0x20000f9c

080021c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <HAL_Init+0x40>)
 80021ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_Init+0x40>)
 80021da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_Init+0x40>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 f94d 	bl	800248c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f000 f808 	bl	8002208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f8:	f7ff fc92 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023c00 	.word	0x40023c00

08002208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_InitTick+0x54>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_InitTick+0x58>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f965 	bl	80024f6 <HAL_SYSTICK_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00e      	b.n	8002254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d80a      	bhi.n	8002252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f000 f92d 	bl	80024a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002248:	4a06      	ldr	r2, [pc, #24]	; (8002264 <HAL_InitTick+0x5c>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000000 	.word	0x20000000
 8002260:	20000008 	.word	0x20000008
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x20>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x24>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4413      	add	r3, r2
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <HAL_IncTick+0x24>)
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008
 800228c:	200005f4 	.word	0x200005f4

08002290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_GetTick+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	200005f4 	.word	0x200005f4

080022a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff ffee 	bl	8002290 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d005      	beq.n	80022ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_Delay+0x40>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ce:	bf00      	nop
 80022d0:	f7ff ffde 	bl	8002290 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f7      	bhi.n	80022d0 <HAL_Delay+0x28>
  {
  }
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000008 	.word	0x20000008

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4907      	ldr	r1, [pc, #28]	; (8002388 <__NVIC_EnableIRQ+0x38>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002458:	d301      	bcc.n	800245e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245a:	2301      	movs	r3, #1
 800245c:	e00f      	b.n	800247e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <SysTick_Config+0x40>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002466:	210f      	movs	r1, #15
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f7ff ff8e 	bl	800238c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <SysTick_Config+0x40>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <SysTick_Config+0x40>)
 8002478:	2207      	movs	r2, #7
 800247a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000e010 	.word	0xe000e010

0800248c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff29 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b4:	f7ff ff3e 	bl	8002334 <__NVIC_GetPriorityGrouping>
 80024b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ff8e 	bl	80023e0 <NVIC_EncodePriority>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff5d 	bl	800238c <__NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff31 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ffa2 	bl	8002448 <SysTick_Config>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e159      	b.n	80027e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 8148 	bne.w	80027da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d00b      	beq.n	800256a <HAL_GPIO_Init+0x5a>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d007      	beq.n	800256a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800255e:	2b11      	cmp	r3, #17
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b12      	cmp	r3, #18
 8002568:	d130      	bne.n	80025cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0xfc>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b12      	cmp	r3, #18
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a2 	beq.w	80027da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <HAL_GPIO_Init+0x2e4>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4a55      	ldr	r2, [pc, #340]	; (80027f4 <HAL_GPIO_Init+0x2e4>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
 80026a6:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <HAL_GPIO_Init+0x2e4>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b2:	4a51      	ldr	r2, [pc, #324]	; (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a48      	ldr	r2, [pc, #288]	; (80027fc <HAL_GPIO_Init+0x2ec>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x202>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a47      	ldr	r2, [pc, #284]	; (8002800 <HAL_GPIO_Init+0x2f0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x1fe>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a46      	ldr	r2, [pc, #280]	; (8002804 <HAL_GPIO_Init+0x2f4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x1fa>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a45      	ldr	r2, [pc, #276]	; (8002808 <HAL_GPIO_Init+0x2f8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x1f6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a44      	ldr	r2, [pc, #272]	; (800280c <HAL_GPIO_Init+0x2fc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x1f2>
 80026fe:	2304      	movs	r3, #4
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002702:	2307      	movs	r3, #7
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002724:	4934      	ldr	r1, [pc, #208]	; (80027f8 <HAL_GPIO_Init+0x2e8>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_GPIO_Init+0x300>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002756:	4a2e      	ldr	r2, [pc, #184]	; (8002810 <HAL_GPIO_Init+0x300>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800275c:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <HAL_GPIO_Init+0x300>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <HAL_GPIO_Init+0x300>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002786:	4b22      	ldr	r3, [pc, #136]	; (8002810 <HAL_GPIO_Init+0x300>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027aa:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_GPIO_Init+0x300>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_GPIO_Init+0x300>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_GPIO_Init+0x300>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f aea2 	bls.w	800252c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	3724      	adds	r7, #36	; 0x24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40020000 	.word	0x40020000
 8002800:	40020400 	.word	0x40020400
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40021000 	.word	0x40021000
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002848:	b08f      	sub	sp, #60	; 0x3c
 800284a:	af0a      	add	r7, sp, #40	; 0x28
 800284c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e10f      	b.n	8002a78 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f005 fe2e 	bl	80084d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2203      	movs	r2, #3
 800287c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 fdcb 	bl	8005432 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	687e      	ldr	r6, [r7, #4]
 80028a4:	466d      	mov	r5, sp
 80028a6:	f106 0410 	add.w	r4, r6, #16
 80028aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ba:	1d33      	adds	r3, r6, #4
 80028bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028be:	6838      	ldr	r0, [r7, #0]
 80028c0:	f002 fca3 	bl	800520a <USB_CoreInit>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0d0      	b.n	8002a78 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f002 fdb9 	bl	8005454 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	e04a      	b.n	800297e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	333d      	adds	r3, #61	; 0x3d
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	333c      	adds	r3, #60	; 0x3c
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	b298      	uxth	r0, r3
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3342      	adds	r3, #66	; 0x42
 8002924:	4602      	mov	r2, r0
 8002926:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	333f      	adds	r3, #63	; 0x3f
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3344      	adds	r3, #68	; 0x44
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	3348      	adds	r3, #72	; 0x48
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3350      	adds	r3, #80	; 0x50
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	3301      	adds	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	d3af      	bcc.n	80028e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
 800298c:	e044      	b.n	8002a18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	3301      	adds	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d3b5      	bcc.n	800298e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	687e      	ldr	r6, [r7, #4]
 8002a2a:	466d      	mov	r5, sp
 8002a2c:	f106 0410 	add.w	r4, r6, #16
 8002a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a40:	1d33      	adds	r3, r6, #4
 8002a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a44:	6838      	ldr	r0, [r7, #0]
 8002a46:	f002 fd2f 	bl	80054a8 <USB_DevInit>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e00d      	b.n	8002a78 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fd77 	bl	8006564 <USB_DevDisconnect>

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_PCD_Start+0x1c>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e020      	b.n	8002ade <HAL_PCD_Start+0x5e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d109      	bne.n	8002ac0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d005      	beq.n	8002ac0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f002 fca3 	bl	8005410 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fd27 	bl	8006522 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ae6:	b590      	push	{r4, r7, lr}
 8002ae8:	b08d      	sub	sp, #52	; 0x34
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 fde5 	bl	80066cc <USB_GetMode>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f040 839d 	bne.w	8003244 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f003 fd49 	bl	80065a6 <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8393 	beq.w	8003242 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 fd40 	bl	80065a6 <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d107      	bne.n	8002b40 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f002 0202 	and.w	r2, r2, #2
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 fd2e 	bl	80065a6 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d161      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0210 	bic.w	r2, r2, #16
 8002b62:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f003 020f 	and.w	r2, r3, #15
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	3304      	adds	r3, #4
 8002b82:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	0c5b      	lsrs	r3, r3, #17
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d124      	bne.n	8002bda <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d035      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	6a38      	ldr	r0, [r7, #32]
 8002bb0:	f003 fb94 	bl	80062dc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc0:	441a      	add	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd2:	441a      	add	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	619a      	str	r2, [r3, #24]
 8002bd8:	e016      	b.n	8002c08 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	0c5b      	lsrs	r3, r3, #17
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d110      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bec:	2208      	movs	r2, #8
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6a38      	ldr	r0, [r7, #32]
 8002bf2:	f003 fb73 	bl	80062dc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c02:	441a      	add	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0210 	orr.w	r2, r2, #16
 8002c16:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 fcc2 	bl	80065a6 <USB_ReadInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c2c:	d16e      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fcc8 	bl	80065cc <USB_ReadDevAllOutEpInterrupt>
 8002c3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c3e:	e062      	b.n	8002d06 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d057      	beq.n	8002cfa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fced 	bl	8006634 <USB_ReadDevOutEPInterrupt>
 8002c5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00c      	beq.n	8002c80 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c72:	461a      	mov	r2, r3
 8002c74:	2301      	movs	r3, #1
 8002c76:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fdb0 	bl	80037e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00c      	beq.n	8002ca4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c96:	461a      	mov	r2, r3
 8002c98:	2308      	movs	r3, #8
 8002c9a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 feaa 	bl	80039f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2320      	movs	r3, #32
 8002cda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d199      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 fc48 	bl	80065a6 <USB_ReadInterrupts>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d20:	f040 80c0 	bne.w	8002ea4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 fc69 	bl	8006600 <USB_ReadDevAllInEpInterrupt>
 8002d2e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d34:	e0b2      	b.n	8002e9c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a7 	beq.w	8002e90 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 fc8f 	bl	8006670 <USB_ReadDevInEPInterrupt>
 8002d52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d057      	beq.n	8002e0e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	2201      	movs	r2, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69f9      	ldr	r1, [r7, #28]
 8002d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d7e:	4013      	ands	r3, r2
 8002d80:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2301      	movs	r3, #1
 8002d92:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d132      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3348      	adds	r3, #72	; 0x48
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4403      	add	r3, r0
 8002dbc:	3344      	adds	r3, #68	; 0x44
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4419      	add	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4403      	add	r3, r0
 8002dd0:	3348      	adds	r3, #72	; 0x48
 8002dd2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d113      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x31c>
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3350      	adds	r3, #80	; 0x50
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d108      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	f003 fc97 	bl	8006730 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f005 fbe4 	bl	80085d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e24:	461a      	mov	r2, r3
 8002e26:	2308      	movs	r3, #8
 8002e28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e40:	461a      	mov	r2, r3
 8002e42:	2310      	movs	r3, #16
 8002e44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2340      	movs	r3, #64	; 0x40
 8002e60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fc1b 	bl	80036c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	3301      	adds	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f47f af49 	bne.w	8002d36 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f003 fb7c 	bl	80065a6 <USB_ReadInterrupts>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eb8:	d122      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d108      	bne.n	8002eea <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fe26 	bl	8003b34 <HAL_PCDEx_LPM_Callback>
 8002ee8:	e002      	b.n	8002ef0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f005 fbe0 	bl	80086b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fb4e 	bl	80065a6 <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f14:	d112      	bne.n	8002f3c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d102      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f005 fb9c 	bl	8008664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f3a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 fb30 	bl	80065a6 <USB_ReadInterrupts>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	f040 80c7 	bne.w	80030e2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2110      	movs	r1, #16
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fbfe 	bl	8005770 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f78:	e056      	b.n	8003028 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f86:	461a      	mov	r2, r3
 8002f88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9e:	0151      	lsls	r1, r2, #5
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	440a      	add	r2, r1
 8002fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fbe:	0151      	lsls	r1, r2, #5
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	440a      	add	r2, r1
 8002fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fe0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff2:	0151      	lsls	r1, r2, #5
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	440a      	add	r2, r1
 8002ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003000:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003012:	0151      	lsls	r1, r2, #5
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	440a      	add	r2, r1
 8003018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800301c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003020:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	3301      	adds	r3, #1
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302e:	429a      	cmp	r2, r3
 8003030:	d3a3      	bcc.n	8002f7a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003040:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003044:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800305e:	f043 030b 	orr.w	r3, r3, #11
 8003062:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003074:	f043 030b 	orr.w	r3, r3, #11
 8003078:	6453      	str	r3, [r2, #68]	; 0x44
 800307a:	e015      	b.n	80030a8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800308e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003092:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a2:	f043 030b 	orr.w	r3, r3, #11
 80030a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80030ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030cc:	461a      	mov	r2, r3
 80030ce:	f003 fb2f 	bl	8006730 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fa5d 	bl	80065a6 <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f6:	d124      	bne.n	8003142 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 faf3 	bl	80066e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f002 fb93 	bl	8005832 <USB_GetDevSpeed>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681c      	ldr	r4, [r3, #0]
 8003118:	f001 f920 	bl	800435c <HAL_RCC_GetHCLKFreq>
 800311c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	4620      	mov	r0, r4
 8003128:	f002 f8d0 	bl	80052cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f005 fa7a 	bl	8008626 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003140:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fa2d 	bl	80065a6 <USB_ReadInterrupts>
 800314c:	4603      	mov	r3, r0
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b08      	cmp	r3, #8
 8003154:	d10a      	bne.n	800316c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f005 fa57 	bl	800860a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f002 0208 	and.w	r2, r2, #8
 800316a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f003 fa18 	bl	80065a6 <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003180:	d10f      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	b2db      	uxtb	r3, r3
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f005 faaf 	bl	80086f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80031a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 f9fd 	bl	80065a6 <USB_ReadInterrupts>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b6:	d10f      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f005 fa82 	bl	80086cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f003 f9e2 	bl	80065a6 <USB_ReadInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ec:	d10a      	bne.n	8003204 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f005 fa90 	bl	8008714 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 f9cc 	bl	80065a6 <USB_ReadInterrupts>
 800320e:	4603      	mov	r3, r0
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d115      	bne.n	8003244 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f005 fa80 	bl	8008730 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	e000      	b.n	8003244 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003242:	bf00      	nop
    }
  }
}
 8003244:	3734      	adds	r7, #52	; 0x34
 8003246:	46bd      	mov	sp, r7
 8003248:	bd90      	pop	{r4, r7, pc}

0800324a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_PCD_SetAddress+0x1a>
 8003260:	2302      	movs	r3, #2
 8003262:	e013      	b.n	800328c <HAL_PCD_SetAddress+0x42>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f003 f92a 	bl	80064d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	70fb      	strb	r3, [r7, #3]
 80032a6:	460b      	mov	r3, r1
 80032a8:	803b      	strh	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	da0f      	bge.n	80032da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	3338      	adds	r3, #56	; 0x38
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	705a      	strb	r2, [r3, #1]
 80032d8:	e00f      	b.n	80032fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003306:	883a      	ldrh	r2, [r7, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	78ba      	ldrb	r2, [r7, #2]
 8003310:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	785b      	ldrb	r3, [r3, #1]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d004      	beq.n	8003324 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003324:	78bb      	ldrb	r3, [r7, #2]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d102      	bne.n	8003330 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_PCD_EP_Open+0xaa>
 800333a:	2302      	movs	r3, #2
 800333c:	e00e      	b.n	800335c <HAL_PCD_EP_Open+0xc8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68f9      	ldr	r1, [r7, #12]
 800334c:	4618      	mov	r0, r3
 800334e:	f002 fa95 	bl	800587c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800335a:	7afb      	ldrb	r3, [r7, #11]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003374:	2b00      	cmp	r3, #0
 8003376:	da0f      	bge.n	8003398 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	3338      	adds	r3, #56	; 0x38
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	3304      	adds	r3, #4
 800338e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	705a      	strb	r2, [r3, #1]
 8003396:	e00f      	b.n	80033b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	3304      	adds	r3, #4
 80033b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_PCD_EP_Close+0x6e>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e00e      	b.n	80033f0 <HAL_PCD_EP_Close+0x8c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f002 fad3 	bl	800598c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	460b      	mov	r3, r1
 8003406:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003408:	7afb      	ldrb	r3, [r7, #11]
 800340a:	f003 020f 	and.w	r2, r3, #15
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	3304      	adds	r3, #4
 8003420:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2200      	movs	r2, #0
 8003438:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343a:	7afb      	ldrb	r3, [r7, #11]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	b2da      	uxtb	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003454:	7afb      	ldrb	r3, [r7, #11]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	6979      	ldr	r1, [r7, #20]
 800346c:	f002 fdae 	bl	8005fcc <USB_EP0StartXfer>
 8003470:	e008      	b.n	8003484 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	6979      	ldr	r1, [r7, #20]
 8003480:	f002 fb60 	bl	8005b44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034b0:	681b      	ldr	r3, [r3, #0]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	460b      	mov	r3, r1
 80034cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	f003 020f 	and.w	r2, r3, #15
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	3338      	adds	r3, #56	; 0x38
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	3304      	adds	r3, #4
 80034e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2201      	movs	r2, #1
 80034fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034fe:	7afb      	ldrb	r3, [r7, #11]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	b2da      	uxtb	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d102      	bne.n	8003518 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003518:	7afb      	ldrb	r3, [r7, #11]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	6979      	ldr	r1, [r7, #20]
 8003530:	f002 fd4c 	bl	8005fcc <USB_EP0StartXfer>
 8003534:	e008      	b.n	8003548 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	6979      	ldr	r1, [r7, #20]
 8003544:	f002 fafe 	bl	8005b44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	f003 020f 	and.w	r2, r3, #15
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d901      	bls.n	8003570 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e050      	b.n	8003612 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003574:	2b00      	cmp	r3, #0
 8003576:	da0f      	bge.n	8003598 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	f003 020f 	and.w	r2, r3, #15
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	3338      	adds	r3, #56	; 0x38
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	3304      	adds	r3, #4
 800358e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	705a      	strb	r2, [r3, #1]
 8003596:	e00d      	b.n	80035b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_PCD_EP_SetStall+0x82>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e01e      	b.n	8003612 <HAL_PCD_EP_SetStall+0xc0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f002 fea3 	bl	800632e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	b2d9      	uxtb	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003602:	461a      	mov	r2, r3
 8003604:	f003 f894 	bl	8006730 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 020f 	and.w	r2, r3, #15
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	d901      	bls.n	8003638 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e042      	b.n	80036be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800363c:	2b00      	cmp	r3, #0
 800363e:	da0f      	bge.n	8003660 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 020f 	and.w	r2, r3, #15
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	3338      	adds	r3, #56	; 0x38
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	705a      	strb	r2, [r3, #1]
 800365e:	e00f      	b.n	8003680 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	3304      	adds	r3, #4
 8003678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_PCD_EP_ClrStall+0x86>
 800369c:	2302      	movs	r3, #2
 800369e:	e00e      	b.n	80036be <HAL_PCD_EP_ClrStall+0xa4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68f9      	ldr	r1, [r7, #12]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 feab 	bl	800640a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b08a      	sub	sp, #40	; 0x28
 80036ca:	af02      	add	r7, sp, #8
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	3338      	adds	r3, #56	; 0x38
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	3304      	adds	r3, #4
 80036ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d901      	bls.n	80036fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e06c      	b.n	80037d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	429a      	cmp	r2, r3
 8003712:	d902      	bls.n	800371a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3303      	adds	r3, #3
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003722:	e02b      	b.n	800377c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	429a      	cmp	r2, r3
 8003738:	d902      	bls.n	8003740 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	3303      	adds	r3, #3
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	68d9      	ldr	r1, [r3, #12]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003758:	b2db      	uxtb	r3, r3
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4603      	mov	r3, r0
 800375e:	6978      	ldr	r0, [r7, #20]
 8003760:	f002 fd87 	bl	8006272 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	441a      	add	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	441a      	add	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	b29b      	uxth	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	429a      	cmp	r2, r3
 8003790:	d809      	bhi.n	80037a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800379a:	429a      	cmp	r2, r3
 800379c:	d203      	bcs.n	80037a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1be      	bne.n	8003724 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d811      	bhi.n	80037d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	2201      	movs	r2, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	6939      	ldr	r1, [r7, #16]
 80037ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037d2:	4013      	ands	r3, r2
 80037d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3720      	adds	r7, #32
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	333c      	adds	r3, #60	; 0x3c
 80037f8:	3304      	adds	r3, #4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b01      	cmp	r3, #1
 8003814:	f040 80a0 	bne.w	8003958 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d015      	beq.n	800384e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a72      	ldr	r2, [pc, #456]	; (80039f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f240 80dd 	bls.w	80039e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80d7 	beq.w	80039e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	461a      	mov	r2, r3
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	6093      	str	r3, [r2, #8]
 800384c:	e0cb      	b.n	80039e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d009      	beq.n	800386c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003864:	461a      	mov	r2, r3
 8003866:	2320      	movs	r3, #32
 8003868:	6093      	str	r3, [r2, #8]
 800386a:	e0bc      	b.n	80039e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 80b7 	bne.w	80039e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a5d      	ldr	r2, [pc, #372]	; (80039f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d90f      	bls.n	80038a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	461a      	mov	r2, r3
 8003898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389c:	6093      	str	r3, [r2, #8]
 800389e:	e0a2      	b.n	80039e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	0159      	lsls	r1, r3, #5
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	440b      	add	r3, r1
 80038bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80038c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4403      	add	r3, r0
 80038d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4403      	add	r3, r0
 80038fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4419      	add	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4403      	add	r3, r0
 8003914:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003918:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d114      	bne.n	800394a <PCD_EP_OutXfrComplete_int+0x16a>
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d108      	bne.n	800394a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003942:	461a      	mov	r2, r3
 8003944:	2101      	movs	r1, #1
 8003946:	f002 fef3 	bl	8006730 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f004 fe25 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
 8003956:	e046      	b.n	80039e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d124      	bne.n	80039aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003976:	461a      	mov	r2, r3
 8003978:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397c:	6093      	str	r3, [r2, #8]
 800397e:	e032      	b.n	80039e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	461a      	mov	r2, r3
 8003998:	2320      	movs	r3, #32
 800399a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	4619      	mov	r1, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f004 fdfc 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
 80039a8:	e01d      	b.n	80039e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d114      	bne.n	80039da <PCD_EP_OutXfrComplete_int+0x1fa>
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d108      	bne.n	80039da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039d2:	461a      	mov	r2, r3
 80039d4:	2100      	movs	r1, #0
 80039d6:	f002 feab 	bl	8006730 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f004 fddd 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	4f54300a 	.word	0x4f54300a
 80039f4:	4f54310a 	.word	0x4f54310a

080039f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	333c      	adds	r3, #60	; 0x3c
 8003a10:	3304      	adds	r3, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d90e      	bls.n	8003a4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	461a      	mov	r2, r3
 8003a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f004 fd95 	bl	800857c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d90c      	bls.n	8003a74 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d108      	bne.n	8003a74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2101      	movs	r1, #1
 8003a70:	f002 fe5e 	bl	8006730 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	4f54300a 	.word	0x4f54300a

08003a84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
 8003a90:	4613      	mov	r3, r2
 8003a92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d107      	bne.n	8003ab2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003aa2:	883b      	ldrh	r3, [r7, #0]
 8003aa4:	0419      	lsls	r1, r3, #16
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab0:	e028      	b.n	8003b04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	4413      	add	r3, r2
 8003abe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e00d      	b.n	8003ae2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	3340      	adds	r3, #64	; 0x40
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	4413      	add	r3, r2
 8003ada:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d3ec      	bcc.n	8003ac6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003aec:	883b      	ldrh	r3, [r7, #0]
 8003aee:	0418      	lsls	r0, r3, #16
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	4302      	orrs	r2, r0
 8003afc:	3340      	adds	r3, #64	; 0x40
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e25b      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d075      	beq.n	8003c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b6a:	4ba3      	ldr	r3, [pc, #652]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d00c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b76:	4ba0      	ldr	r3, [pc, #640]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d112      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b82:	4b9d      	ldr	r3, [pc, #628]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	4b99      	ldr	r3, [pc, #612]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d05b      	beq.n	8003c54 <HAL_RCC_OscConfig+0x108>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d157      	bne.n	8003c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e236      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x74>
 8003bb2:	4b91      	ldr	r3, [pc, #580]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a90      	ldr	r2, [pc, #576]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e01d      	b.n	8003bfc <HAL_RCC_OscConfig+0xb0>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x98>
 8003bca:	4b8b      	ldr	r3, [pc, #556]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a8a      	ldr	r2, [pc, #552]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b88      	ldr	r3, [pc, #544]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a87      	ldr	r2, [pc, #540]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e00b      	b.n	8003bfc <HAL_RCC_OscConfig+0xb0>
 8003be4:	4b84      	ldr	r3, [pc, #528]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a83      	ldr	r2, [pc, #524]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b81      	ldr	r3, [pc, #516]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a80      	ldr	r2, [pc, #512]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fe fb44 	bl	8002290 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fe fb40 	bl	8002290 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	; 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1fb      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0xc0>
 8003c2a:	e014      	b.n	8003c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fb30 	bl	8002290 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fe fb2c 	bl	8002290 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e1e7      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	4b6c      	ldr	r3, [pc, #432]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0xe8>
 8003c52:	e000      	b.n	8003c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d063      	beq.n	8003d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c62:	4b65      	ldr	r3, [pc, #404]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6e:	4b62      	ldr	r3, [pc, #392]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d11c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c7a:	4b5f      	ldr	r3, [pc, #380]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d116      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c86:	4b5c      	ldr	r3, [pc, #368]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <HAL_RCC_OscConfig+0x152>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d001      	beq.n	8003c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e1bb      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9e:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4952      	ldr	r1, [pc, #328]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	e03a      	b.n	8003d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d020      	beq.n	8003cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cbc:	4b4f      	ldr	r3, [pc, #316]	; (8003dfc <HAL_RCC_OscConfig+0x2b0>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7fe fae5 	bl	8002290 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cca:	f7fe fae1 	bl	8002290 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e19c      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cdc:	4b46      	ldr	r3, [pc, #280]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce8:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4940      	ldr	r1, [pc, #256]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]
 8003cfc:	e015      	b.n	8003d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfe:	4b3f      	ldr	r3, [pc, #252]	; (8003dfc <HAL_RCC_OscConfig+0x2b0>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe fac4 	bl	8002290 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0c:	f7fe fac0 	bl	8002290 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e17b      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1e:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d030      	beq.n	8003d98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3e:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <HAL_RCC_OscConfig+0x2b4>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fe faa4 	bl	8002290 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7fe faa0 	bl	8002290 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e15b      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5e:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x200>
 8003d6a:	e015      	b.n	8003d98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d6c:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <HAL_RCC_OscConfig+0x2b4>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d72:	f7fe fa8d 	bl	8002290 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d7a:	f7fe fa89 	bl	8002290 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e144      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8c:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80a0 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003daa:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10f      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_OscConfig+0x2b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d121      	bne.n	8003e26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <HAL_RCC_OscConfig+0x2b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a07      	ldr	r2, [pc, #28]	; (8003e04 <HAL_RCC_OscConfig+0x2b8>)
 8003de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dee:	f7fe fa4f 	bl	8002290 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	e011      	b.n	8003e1a <HAL_RCC_OscConfig+0x2ce>
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	42470000 	.word	0x42470000
 8003e00:	42470e80 	.word	0x42470e80
 8003e04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e08:	f7fe fa42 	bl	8002290 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0fd      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b81      	ldr	r3, [pc, #516]	; (8004020 <HAL_RCC_OscConfig+0x4d4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d106      	bne.n	8003e3c <HAL_RCC_OscConfig+0x2f0>
 8003e2e:	4b7d      	ldr	r3, [pc, #500]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a7c      	ldr	r2, [pc, #496]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3a:	e01c      	b.n	8003e76 <HAL_RCC_OscConfig+0x32a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b05      	cmp	r3, #5
 8003e42:	d10c      	bne.n	8003e5e <HAL_RCC_OscConfig+0x312>
 8003e44:	4b77      	ldr	r3, [pc, #476]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a76      	ldr	r2, [pc, #472]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e4a:	f043 0304 	orr.w	r3, r3, #4
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e50:	4b74      	ldr	r3, [pc, #464]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a73      	ldr	r2, [pc, #460]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5c:	e00b      	b.n	8003e76 <HAL_RCC_OscConfig+0x32a>
 8003e5e:	4b71      	ldr	r3, [pc, #452]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a70      	ldr	r2, [pc, #448]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6a:	4b6e      	ldr	r3, [pc, #440]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a6d      	ldr	r2, [pc, #436]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e70:	f023 0304 	bic.w	r3, r3, #4
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d015      	beq.n	8003eaa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fe fa07 	bl	8002290 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fe fa03 	bl	8002290 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e0bc      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9c:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0ee      	beq.n	8003e86 <HAL_RCC_OscConfig+0x33a>
 8003ea8:	e014      	b.n	8003ed4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eaa:	f7fe f9f1 	bl	8002290 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f7fe f9ed 	bl	8002290 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e0a6      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec8:	4b56      	ldr	r3, [pc, #344]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1ee      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d105      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eda:	4b52      	ldr	r3, [pc, #328]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	4a51      	ldr	r2, [pc, #324]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8092 	beq.w	8004014 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef0:	4b4c      	ldr	r3, [pc, #304]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d05c      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d141      	bne.n	8003f88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f04:	4b48      	ldr	r3, [pc, #288]	; (8004028 <HAL_RCC_OscConfig+0x4dc>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fe f9c1 	bl	8002290 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f12:	f7fe f9bd 	bl	8002290 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e078      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f24:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	019b      	lsls	r3, r3, #6
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	061b      	lsls	r3, r3, #24
 8003f54:	4933      	ldr	r1, [pc, #204]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f5a:	4b33      	ldr	r3, [pc, #204]	; (8004028 <HAL_RCC_OscConfig+0x4dc>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fe f996 	bl	8002290 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe f992 	bl	8002290 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e04d      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x41c>
 8003f86:	e045      	b.n	8004014 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <HAL_RCC_OscConfig+0x4dc>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7fe f97f 	bl	8002290 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fe f97b 	bl	8002290 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e036      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa8:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f0      	bne.n	8003f96 <HAL_RCC_OscConfig+0x44a>
 8003fb4:	e02e      	b.n	8004014 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e029      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fc2:	4b18      	ldr	r3, [pc, #96]	; (8004024 <HAL_RCC_OscConfig+0x4d8>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d11c      	bne.n	8004010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d115      	bne.n	8004010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fea:	4013      	ands	r3, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d10d      	bne.n	8004010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d106      	bne.n	8004010 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40007000 	.word	0x40007000
 8004024:	40023800 	.word	0x40023800
 8004028:	42470060 	.word	0x42470060

0800402c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0cc      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b68      	ldr	r3, [pc, #416]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d90c      	bls.n	8004068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0b8      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004080:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a58      	ldr	r2, [pc, #352]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800408a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004098:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a52      	ldr	r2, [pc, #328]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a4:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	494d      	ldr	r1, [pc, #308]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d044      	beq.n	800414c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d119      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e07f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ea:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e06f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e067      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410a:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 0203 	bic.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4934      	ldr	r1, [pc, #208]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800411c:	f7fe f8b8 	bl	8002290 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fe f8b4 	bl	8002290 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e04f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 020c 	and.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d1eb      	bne.n	8004124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800414c:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d20c      	bcs.n	8004174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e032      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4916      	ldr	r1, [pc, #88]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	490e      	ldr	r1, [pc, #56]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041b2:	f000 f821 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 80041b6:	4601      	mov	r1, r0
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	5cd3      	ldrb	r3, [r2, r3]
 80041c6:	fa21 f303 	lsr.w	r3, r1, r3
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ce:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe f818 	bl	8002208 <HAL_InitTick>

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023c00 	.word	0x40023c00
 80041e8:	40023800 	.word	0x40023800
 80041ec:	0801049c 	.word	0x0801049c
 80041f0:	20000000 	.word	0x20000000
 80041f4:	20000004 	.word	0x20000004

080041f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	2300      	movs	r3, #0
 8004208:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420e:	4b50      	ldr	r3, [pc, #320]	; (8004350 <HAL_RCC_GetSysClockFreq+0x158>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b04      	cmp	r3, #4
 8004218:	d007      	beq.n	800422a <HAL_RCC_GetSysClockFreq+0x32>
 800421a:	2b08      	cmp	r3, #8
 800421c:	d008      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x38>
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 808d 	bne.w	800433e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004224:	4b4b      	ldr	r3, [pc, #300]	; (8004354 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004226:	60bb      	str	r3, [r7, #8]
       break;
 8004228:	e08c      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800422a:	4b4b      	ldr	r3, [pc, #300]	; (8004358 <HAL_RCC_GetSysClockFreq+0x160>)
 800422c:	60bb      	str	r3, [r7, #8]
      break;
 800422e:	e089      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004230:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_GetSysClockFreq+0x158>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004238:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800423a:	4b45      	ldr	r3, [pc, #276]	; (8004350 <HAL_RCC_GetSysClockFreq+0x158>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d023      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004246:	4b42      	ldr	r3, [pc, #264]	; (8004350 <HAL_RCC_GetSysClockFreq+0x158>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	f04f 0400 	mov.w	r4, #0
 8004250:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	ea03 0501 	and.w	r5, r3, r1
 800425c:	ea04 0602 	and.w	r6, r4, r2
 8004260:	4a3d      	ldr	r2, [pc, #244]	; (8004358 <HAL_RCC_GetSysClockFreq+0x160>)
 8004262:	fb02 f106 	mul.w	r1, r2, r6
 8004266:	2200      	movs	r2, #0
 8004268:	fb02 f205 	mul.w	r2, r2, r5
 800426c:	440a      	add	r2, r1
 800426e:	493a      	ldr	r1, [pc, #232]	; (8004358 <HAL_RCC_GetSysClockFreq+0x160>)
 8004270:	fba5 0101 	umull	r0, r1, r5, r1
 8004274:	1853      	adds	r3, r2, r1
 8004276:	4619      	mov	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f04f 0400 	mov.w	r4, #0
 800427e:	461a      	mov	r2, r3
 8004280:	4623      	mov	r3, r4
 8004282:	f7fc fd09 	bl	8000c98 <__aeabi_uldivmod>
 8004286:	4603      	mov	r3, r0
 8004288:	460c      	mov	r4, r1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e049      	b.n	8004322 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b30      	ldr	r3, [pc, #192]	; (8004350 <HAL_RCC_GetSysClockFreq+0x158>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	f04f 0400 	mov.w	r4, #0
 8004298:	f240 11ff 	movw	r1, #511	; 0x1ff
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	ea03 0501 	and.w	r5, r3, r1
 80042a4:	ea04 0602 	and.w	r6, r4, r2
 80042a8:	4629      	mov	r1, r5
 80042aa:	4632      	mov	r2, r6
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	0154      	lsls	r4, r2, #5
 80042b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042ba:	014b      	lsls	r3, r1, #5
 80042bc:	4619      	mov	r1, r3
 80042be:	4622      	mov	r2, r4
 80042c0:	1b49      	subs	r1, r1, r5
 80042c2:	eb62 0206 	sbc.w	r2, r2, r6
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	0194      	lsls	r4, r2, #6
 80042d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042d4:	018b      	lsls	r3, r1, #6
 80042d6:	1a5b      	subs	r3, r3, r1
 80042d8:	eb64 0402 	sbc.w	r4, r4, r2
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	00e2      	lsls	r2, r4, #3
 80042e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042ea:	00d9      	lsls	r1, r3, #3
 80042ec:	460b      	mov	r3, r1
 80042ee:	4614      	mov	r4, r2
 80042f0:	195b      	adds	r3, r3, r5
 80042f2:	eb44 0406 	adc.w	r4, r4, r6
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	02a2      	lsls	r2, r4, #10
 8004300:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004304:	0299      	lsls	r1, r3, #10
 8004306:	460b      	mov	r3, r1
 8004308:	4614      	mov	r4, r2
 800430a:	4618      	mov	r0, r3
 800430c:	4621      	mov	r1, r4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 0400 	mov.w	r4, #0
 8004314:	461a      	mov	r2, r3
 8004316:	4623      	mov	r3, r4
 8004318:	f7fc fcbe 	bl	8000c98 <__aeabi_uldivmod>
 800431c:	4603      	mov	r3, r0
 800431e:	460c      	mov	r4, r1
 8004320:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_GetSysClockFreq+0x158>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	3301      	adds	r3, #1
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	fbb2 f3f3 	udiv	r3, r2, r3
 800433a:	60bb      	str	r3, [r7, #8]
      break;
 800433c:	e002      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004340:	60bb      	str	r3, [r7, #8]
      break;
 8004342:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004344:	68bb      	ldr	r3, [r7, #8]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
 8004354:	00f42400 	.word	0x00f42400
 8004358:	017d7840 	.word	0x017d7840

0800435c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <HAL_RCC_GetHCLKFreq+0x14>)
 8004362:	681b      	ldr	r3, [r3, #0]
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20000000 	.word	0x20000000

08004374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e01d      	b.n	80043c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd fe12 	bl	8001fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f000 fb4e 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e01d      	b.n	8004418 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f815 	bl	8004420 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f000 fb23 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e01d      	b.n	8004482 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f815 	bl	800448a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f000 faee 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2201      	movs	r2, #1
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fd74 	bl	8004fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a10      	ldr	r2, [pc, #64]	; (8004500 <HAL_TIM_PWM_Start+0x60>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d107      	bne.n	80044d2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d007      	beq.n	80044f4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40010000 	.word	0x40010000

08004504 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e083      	b.n	8004620 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7fd fd6b 	bl	8002008 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004548:	f023 0307 	bic.w	r3, r3, #7
 800454c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f000 fa7b 	bl	8004a54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	4313      	orrs	r3, r2
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045a4:	f023 030c 	bic.w	r3, r3, #12
 80045a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	4313      	orrs	r3, r2
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	011a      	lsls	r2, r3, #4
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	031b      	lsls	r3, r3, #12
 80045d4:	4313      	orrs	r3, r2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	4313      	orrs	r3, r2
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_TIM_Encoder_Start+0x16>
 8004638:	2b04      	cmp	r3, #4
 800463a:	d008      	beq.n	800464e <HAL_TIM_Encoder_Start+0x26>
 800463c:	e00f      	b.n	800465e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2201      	movs	r2, #1
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fcaa 	bl	8004fa0 <TIM_CCxChannelCmd>
      break;
 800464c:	e016      	b.n	800467c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2201      	movs	r2, #1
 8004654:	2104      	movs	r1, #4
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fca2 	bl	8004fa0 <TIM_CCxChannelCmd>
      break;
 800465c:	e00e      	b.n	800467c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2201      	movs	r2, #1
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fc9a 	bl	8004fa0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2201      	movs	r2, #1
 8004672:	2104      	movs	r1, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fc93 	bl	8004fa0 <TIM_CCxChannelCmd>
      break;
 800467a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e04e      	b.n	8004750 <HAL_TIM_OC_ConfigChannel+0xb8>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b0c      	cmp	r3, #12
 80046c6:	d839      	bhi.n	800473c <HAL_TIM_OC_ConfigChannel+0xa4>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <HAL_TIM_OC_ConfigChannel+0x38>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	08004705 	.word	0x08004705
 80046d4:	0800473d 	.word	0x0800473d
 80046d8:	0800473d 	.word	0x0800473d
 80046dc:	0800473d 	.word	0x0800473d
 80046e0:	08004713 	.word	0x08004713
 80046e4:	0800473d 	.word	0x0800473d
 80046e8:	0800473d 	.word	0x0800473d
 80046ec:	0800473d 	.word	0x0800473d
 80046f0:	08004721 	.word	0x08004721
 80046f4:	0800473d 	.word	0x0800473d
 80046f8:	0800473d 	.word	0x0800473d
 80046fc:	0800473d 	.word	0x0800473d
 8004700:	0800472f 	.word	0x0800472f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fa22 	bl	8004b54 <TIM_OC1_SetConfig>
      break;
 8004710:	e015      	b.n	800473e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fa81 	bl	8004c20 <TIM_OC2_SetConfig>
      break;
 800471e:	e00e      	b.n	800473e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fae6 	bl	8004cf8 <TIM_OC3_SetConfig>
      break;
 800472c:	e007      	b.n	800473e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fb49 	bl	8004dcc <TIM_OC4_SetConfig>
      break;
 800473a:	e000      	b.n	800473e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800473c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800476e:	2302      	movs	r3, #2
 8004770:	e0b4      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b0c      	cmp	r3, #12
 8004786:	f200 809f 	bhi.w	80048c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047c5 	.word	0x080047c5
 8004794:	080048c9 	.word	0x080048c9
 8004798:	080048c9 	.word	0x080048c9
 800479c:	080048c9 	.word	0x080048c9
 80047a0:	08004805 	.word	0x08004805
 80047a4:	080048c9 	.word	0x080048c9
 80047a8:	080048c9 	.word	0x080048c9
 80047ac:	080048c9 	.word	0x080048c9
 80047b0:	08004847 	.word	0x08004847
 80047b4:	080048c9 	.word	0x080048c9
 80047b8:	080048c9 	.word	0x080048c9
 80047bc:	080048c9 	.word	0x080048c9
 80047c0:	08004887 	.word	0x08004887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f9c2 	bl	8004b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0208 	orr.w	r2, r2, #8
 80047de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0204 	bic.w	r2, r2, #4
 80047ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	619a      	str	r2, [r3, #24]
      break;
 8004802:	e062      	b.n	80048ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fa08 	bl	8004c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6999      	ldr	r1, [r3, #24]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	021a      	lsls	r2, r3, #8
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	619a      	str	r2, [r3, #24]
      break;
 8004844:	e041      	b.n	80048ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fa53 	bl	8004cf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0208 	orr.w	r2, r2, #8
 8004860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0204 	bic.w	r2, r2, #4
 8004870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69d9      	ldr	r1, [r3, #28]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	61da      	str	r2, [r3, #28]
      break;
 8004884:	e021      	b.n	80048ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fa9d 	bl	8004dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69d9      	ldr	r1, [r3, #28]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	021a      	lsls	r2, r3, #8
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	61da      	str	r2, [r3, #28]
      break;
 80048c6:	e000      	b.n	80048ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80048c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_TIM_ConfigClockSource+0x18>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e0a6      	b.n	8004a4a <HAL_TIM_ConfigClockSource+0x166>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800491a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004922:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d067      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0x120>
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d80b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x6c>
 8004938:	2b10      	cmp	r3, #16
 800493a:	d073      	beq.n	8004a24 <HAL_TIM_ConfigClockSource+0x140>
 800493c:	2b10      	cmp	r3, #16
 800493e:	d802      	bhi.n	8004946 <HAL_TIM_ConfigClockSource+0x62>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d06f      	beq.n	8004a24 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004944:	e078      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004946:	2b20      	cmp	r3, #32
 8004948:	d06c      	beq.n	8004a24 <HAL_TIM_ConfigClockSource+0x140>
 800494a:	2b30      	cmp	r3, #48	; 0x30
 800494c:	d06a      	beq.n	8004a24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800494e:	e073      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004950:	2b70      	cmp	r3, #112	; 0x70
 8004952:	d00d      	beq.n	8004970 <HAL_TIM_ConfigClockSource+0x8c>
 8004954:	2b70      	cmp	r3, #112	; 0x70
 8004956:	d804      	bhi.n	8004962 <HAL_TIM_ConfigClockSource+0x7e>
 8004958:	2b50      	cmp	r3, #80	; 0x50
 800495a:	d033      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0xe0>
 800495c:	2b60      	cmp	r3, #96	; 0x60
 800495e:	d041      	beq.n	80049e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004960:	e06a      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	d066      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x152>
 8004968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496c:	d017      	beq.n	800499e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800496e:	e063      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	6899      	ldr	r1, [r3, #8]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f000 faee 	bl	8004f60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004992:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	609a      	str	r2, [r3, #8]
      break;
 800499c:	e04c      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f000 fad7 	bl	8004f60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049c0:	609a      	str	r2, [r3, #8]
      break;
 80049c2:	e039      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6859      	ldr	r1, [r3, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	461a      	mov	r2, r3
 80049d2:	f000 fa4b 	bl	8004e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2150      	movs	r1, #80	; 0x50
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 faa4 	bl	8004f2a <TIM_ITRx_SetConfig>
      break;
 80049e2:	e029      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	6859      	ldr	r1, [r3, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	461a      	mov	r2, r3
 80049f2:	f000 fa6a 	bl	8004eca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2160      	movs	r1, #96	; 0x60
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fa94 	bl	8004f2a <TIM_ITRx_SetConfig>
      break;
 8004a02:	e019      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	461a      	mov	r2, r3
 8004a12:	f000 fa2b 	bl	8004e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2140      	movs	r1, #64	; 0x40
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fa84 	bl	8004f2a <TIM_ITRx_SetConfig>
      break;
 8004a22:	e009      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 fa7b 	bl	8004f2a <TIM_ITRx_SetConfig>
      break;
 8004a34:	e000      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a34      	ldr	r2, [pc, #208]	; (8004b38 <TIM_Base_SetConfig+0xe4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00f      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a72:	d00b      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a31      	ldr	r2, [pc, #196]	; (8004b3c <TIM_Base_SetConfig+0xe8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a30      	ldr	r2, [pc, #192]	; (8004b40 <TIM_Base_SetConfig+0xec>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <TIM_Base_SetConfig+0xf0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d108      	bne.n	8004a9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a25      	ldr	r2, [pc, #148]	; (8004b38 <TIM_Base_SetConfig+0xe4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01b      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aac:	d017      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <TIM_Base_SetConfig+0xe8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <TIM_Base_SetConfig+0xec>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00f      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a20      	ldr	r2, [pc, #128]	; (8004b44 <TIM_Base_SetConfig+0xf0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00b      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1f      	ldr	r2, [pc, #124]	; (8004b48 <TIM_Base_SetConfig+0xf4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d007      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1e      	ldr	r2, [pc, #120]	; (8004b4c <TIM_Base_SetConfig+0xf8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1d      	ldr	r2, [pc, #116]	; (8004b50 <TIM_Base_SetConfig+0xfc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d108      	bne.n	8004af0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <TIM_Base_SetConfig+0xe4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d103      	bne.n	8004b24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	615a      	str	r2, [r3, #20]
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800

08004b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0201 	bic.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f023 0302 	bic.w	r3, r3, #2
 8004b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <TIM_OC1_SetConfig+0xc8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10c      	bne.n	8004bca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0308 	bic.w	r3, r3, #8
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <TIM_OC1_SetConfig+0xc8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d111      	bne.n	8004bf6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	621a      	str	r2, [r3, #32]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40010000 	.word	0x40010000

08004c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0210 	bic.w	r2, r3, #16
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0320 	bic.w	r3, r3, #32
 8004c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <TIM_OC2_SetConfig+0xd4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10d      	bne.n	8004c9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <TIM_OC2_SetConfig+0xd4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d113      	bne.n	8004ccc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000

08004cf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1d      	ldr	r2, [pc, #116]	; (8004dc8 <TIM_OC3_SetConfig+0xd0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10d      	bne.n	8004d72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <TIM_OC3_SetConfig+0xd0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d113      	bne.n	8004da2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	621a      	str	r2, [r3, #32]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40010000 	.word	0x40010000

08004dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	031b      	lsls	r3, r3, #12
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <TIM_OC4_SetConfig+0x9c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d109      	bne.n	8004e40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	019b      	lsls	r3, r3, #6
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000

08004e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0201 	bic.w	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f023 030a 	bic.w	r3, r3, #10
 8004ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b087      	sub	sp, #28
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f023 0210 	bic.w	r2, r3, #16
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	031b      	lsls	r3, r3, #12
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b085      	sub	sp, #20
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f043 0307 	orr.w	r3, r3, #7
 8004f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	609a      	str	r2, [r3, #8]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	021a      	lsls	r2, r3, #8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	609a      	str	r2, [r3, #8]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	401a      	ands	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f8df 	bl	80051c0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005010:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b06      	cmp	r3, #6
 8005022:	d007      	beq.n	8005034 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e050      	b.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d018      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a4:	d013      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a18      	ldr	r2, [pc, #96]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00e      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a16      	ldr	r2, [pc, #88]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a15      	ldr	r2, [pc, #84]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a13      	ldr	r2, [pc, #76]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10c      	bne.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40014000 	.word	0x40014000

0800511c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005134:	2302      	movs	r3, #2
 8005136:	e03d      	b.n	80051b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	2204      	movs	r2, #4
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a1a      	ldr	r2, [r3, #32]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	43db      	mvns	r3, r3
 80051e2:	401a      	ands	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1a      	ldr	r2, [r3, #32]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	fa01 f303 	lsl.w	r3, r1, r3
 80051f8:	431a      	orrs	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800520a:	b084      	sub	sp, #16
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	f107 001c 	add.w	r0, r7, #28
 8005218:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	2b01      	cmp	r3, #1
 8005220:	d122      	bne.n	8005268 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800524a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524c:	2b01      	cmp	r3, #1
 800524e:	d105      	bne.n	800525c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 fac5 	bl	80067ec <USB_CoreReset>
 8005262:	4603      	mov	r3, r0
 8005264:	73fb      	strb	r3, [r7, #15]
 8005266:	e01a      	b.n	800529e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f001 fab9 	bl	80067ec <USB_CoreReset>
 800527a:	4603      	mov	r3, r0
 800527c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800527e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
 8005290:	e005      	b.n	800529e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d10b      	bne.n	80052bc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f043 0206 	orr.w	r2, r3, #6
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c8:	b004      	add	sp, #16
 80052ca:	4770      	bx	lr

080052cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d165      	bne.n	80053ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a41      	ldr	r2, [pc, #260]	; (80053e8 <USB_SetTurnaroundTime+0x11c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d906      	bls.n	80052f6 <USB_SetTurnaroundTime+0x2a>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a40      	ldr	r2, [pc, #256]	; (80053ec <USB_SetTurnaroundTime+0x120>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d802      	bhi.n	80052f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052f0:	230f      	movs	r3, #15
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e062      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a3c      	ldr	r2, [pc, #240]	; (80053ec <USB_SetTurnaroundTime+0x120>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d906      	bls.n	800530c <USB_SetTurnaroundTime+0x40>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a3b      	ldr	r2, [pc, #236]	; (80053f0 <USB_SetTurnaroundTime+0x124>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d802      	bhi.n	800530c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005306:	230e      	movs	r3, #14
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e057      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4a38      	ldr	r2, [pc, #224]	; (80053f0 <USB_SetTurnaroundTime+0x124>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d906      	bls.n	8005322 <USB_SetTurnaroundTime+0x56>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4a37      	ldr	r2, [pc, #220]	; (80053f4 <USB_SetTurnaroundTime+0x128>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d802      	bhi.n	8005322 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800531c:	230d      	movs	r3, #13
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e04c      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4a33      	ldr	r2, [pc, #204]	; (80053f4 <USB_SetTurnaroundTime+0x128>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d906      	bls.n	8005338 <USB_SetTurnaroundTime+0x6c>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4a32      	ldr	r2, [pc, #200]	; (80053f8 <USB_SetTurnaroundTime+0x12c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d802      	bhi.n	8005338 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005332:	230c      	movs	r3, #12
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e041      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4a2f      	ldr	r2, [pc, #188]	; (80053f8 <USB_SetTurnaroundTime+0x12c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d906      	bls.n	800534e <USB_SetTurnaroundTime+0x82>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a2e      	ldr	r2, [pc, #184]	; (80053fc <USB_SetTurnaroundTime+0x130>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d802      	bhi.n	800534e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005348:	230b      	movs	r3, #11
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e036      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a2a      	ldr	r2, [pc, #168]	; (80053fc <USB_SetTurnaroundTime+0x130>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d906      	bls.n	8005364 <USB_SetTurnaroundTime+0x98>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a29      	ldr	r2, [pc, #164]	; (8005400 <USB_SetTurnaroundTime+0x134>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d802      	bhi.n	8005364 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800535e:	230a      	movs	r3, #10
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e02b      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a26      	ldr	r2, [pc, #152]	; (8005400 <USB_SetTurnaroundTime+0x134>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d906      	bls.n	800537a <USB_SetTurnaroundTime+0xae>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a25      	ldr	r2, [pc, #148]	; (8005404 <USB_SetTurnaroundTime+0x138>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d802      	bhi.n	800537a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005374:	2309      	movs	r3, #9
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e020      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4a21      	ldr	r2, [pc, #132]	; (8005404 <USB_SetTurnaroundTime+0x138>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d906      	bls.n	8005390 <USB_SetTurnaroundTime+0xc4>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4a20      	ldr	r2, [pc, #128]	; (8005408 <USB_SetTurnaroundTime+0x13c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d802      	bhi.n	8005390 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800538a:	2308      	movs	r3, #8
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e015      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <USB_SetTurnaroundTime+0x13c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d906      	bls.n	80053a6 <USB_SetTurnaroundTime+0xda>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a1c      	ldr	r2, [pc, #112]	; (800540c <USB_SetTurnaroundTime+0x140>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d802      	bhi.n	80053a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053a0:	2307      	movs	r3, #7
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e00a      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053a6:	2306      	movs	r3, #6
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	e007      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053b2:	2309      	movs	r3, #9
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e001      	b.n	80053bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053b8:	2309      	movs	r3, #9
 80053ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	029b      	lsls	r3, r3, #10
 80053d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053d4:	431a      	orrs	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	00d8acbf 	.word	0x00d8acbf
 80053ec:	00e4e1bf 	.word	0x00e4e1bf
 80053f0:	00f423ff 	.word	0x00f423ff
 80053f4:	0106737f 	.word	0x0106737f
 80053f8:	011a499f 	.word	0x011a499f
 80053fc:	01312cff 	.word	0x01312cff
 8005400:	014ca43f 	.word	0x014ca43f
 8005404:	016e35ff 	.word	0x016e35ff
 8005408:	01a6ab1f 	.word	0x01a6ab1f
 800540c:	01e847ff 	.word	0x01e847ff

08005410 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f043 0201 	orr.w	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d106      	bne.n	8005480 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]
 800547e:	e00b      	b.n	8005498 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60da      	str	r2, [r3, #12]
 8005492:	e001      	b.n	8005498 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e003      	b.n	80054a0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005498:	2032      	movs	r0, #50	; 0x32
 800549a:	f7fc ff05 	bl	80022a8 <HAL_Delay>

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a8:	b084      	sub	sp, #16
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b086      	sub	sp, #24
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	e009      	b.n	80054dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	3340      	adds	r3, #64	; 0x40
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	2200      	movs	r2, #0
 80054d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3301      	adds	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b0e      	cmp	r3, #14
 80054e0:	d9f2      	bls.n	80054c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d11c      	bne.n	8005522 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f6:	f043 0302 	orr.w	r3, r3, #2
 80054fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	; 0x38
 8005520:	e00b      	b.n	800553a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005540:	461a      	mov	r2, r3
 8005542:	2300      	movs	r3, #0
 8005544:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	4619      	mov	r1, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005554:	461a      	mov	r2, r3
 8005556:	680b      	ldr	r3, [r1, #0]
 8005558:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10c      	bne.n	800557a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005566:	2100      	movs	r1, #0
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f949 	bl	8005800 <USB_SetDevSpeed>
 800556e:	e008      	b.n	8005582 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005570:	2101      	movs	r1, #1
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f944 	bl	8005800 <USB_SetDevSpeed>
 8005578:	e003      	b.n	8005582 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800557a:	2103      	movs	r1, #3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f93f 	bl	8005800 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005582:	2110      	movs	r1, #16
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f8f3 	bl	8005770 <USB_FlushTxFifo>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f911 	bl	80057bc <USB_FlushRxFifo>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	461a      	mov	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	461a      	mov	r2, r3
 80055b8:	2300      	movs	r3, #0
 80055ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	461a      	mov	r2, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	e043      	b.n	8005656 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e4:	d118      	bne.n	8005618 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	461a      	mov	r2, r3
 80055fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	e013      	b.n	800562a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	461a      	mov	r2, r3
 8005610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e008      	b.n	800562a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	2300      	movs	r3, #0
 8005628:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800564e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	3301      	adds	r3, #1
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	429a      	cmp	r2, r3
 800565c:	d3b7      	bcc.n	80055ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e043      	b.n	80056ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567a:	d118      	bne.n	80056ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	461a      	mov	r2, r3
 8005690:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	e013      	b.n	80056c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	461a      	mov	r2, r3
 80056a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e008      	b.n	80056c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	2300      	movs	r3, #0
 80056be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	461a      	mov	r2, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	461a      	mov	r2, r3
 80056e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3301      	adds	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d3b7      	bcc.n	8005664 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005706:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005714:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f043 0210 	orr.w	r2, r3, #16
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <USB_DevInit+0x2c4>)
 800572e:	4313      	orrs	r3, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f043 0208 	orr.w	r2, r3, #8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d107      	bne.n	800575c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005754:	f043 0304 	orr.w	r3, r3, #4
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800575c:	7dfb      	ldrb	r3, [r7, #23]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005768:	b004      	add	sp, #16
 800576a:	4770      	bx	lr
 800576c:	803c3800 	.word	0x803c3800

08005770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	019b      	lsls	r3, r3, #6
 8005782:	f043 0220 	orr.w	r2, r3, #32
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <USB_FlushTxFifo+0x48>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d901      	bls.n	800579c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e006      	b.n	80057aa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d0f0      	beq.n	800578a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	00030d40 	.word	0x00030d40

080057bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2210      	movs	r2, #16
 80057cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3301      	adds	r3, #1
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4a09      	ldr	r2, [pc, #36]	; (80057fc <USB_FlushRxFifo+0x40>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d901      	bls.n	80057e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e006      	b.n	80057ee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d0f0      	beq.n	80057ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	00030d40 	.word	0x00030d40

08005800 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005820:	4313      	orrs	r3, r2
 8005822:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005832:	b480      	push	{r7}
 8005834:	b087      	sub	sp, #28
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0306 	and.w	r3, r3, #6
 800584a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
 8005856:	e00a      	b.n	800586e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d002      	beq.n	8005864 <USB_GetDevSpeed+0x32>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b06      	cmp	r3, #6
 8005862:	d102      	bne.n	800586a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005864:	2302      	movs	r3, #2
 8005866:	75fb      	strb	r3, [r7, #23]
 8005868:	e001      	b.n	800586e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800586a:	230f      	movs	r3, #15
 800586c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005870:	4618      	mov	r0, r3
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d13a      	bne.n	800590e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	2101      	movs	r1, #1
 80058aa:	fa01 f303 	lsl.w	r3, r1, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	68f9      	ldr	r1, [r7, #12]
 80058b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d155      	bne.n	800597c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	78db      	ldrb	r3, [r3, #3]
 80058ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	059b      	lsls	r3, r3, #22
 80058f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058f4:	4313      	orrs	r3, r2
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	0151      	lsls	r1, r2, #5
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	440a      	add	r2, r1
 80058fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e036      	b.n	800597c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005914:	69da      	ldr	r2, [r3, #28]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	2101      	movs	r1, #1
 8005920:	fa01 f303 	lsl.w	r3, r1, r3
 8005924:	041b      	lsls	r3, r3, #16
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800592c:	4313      	orrs	r3, r2
 800592e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d11a      	bne.n	800597c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	78db      	ldrb	r3, [r3, #3]
 8005960:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005962:	430b      	orrs	r3, r1
 8005964:	4313      	orrs	r3, r2
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	440a      	add	r2, r1
 800596e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d161      	bne.n	8005a6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059be:	d11f      	bne.n	8005a00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	2101      	movs	r1, #1
 8005a12:	fa01 f303 	lsl.w	r3, r1, r3
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a20:	4013      	ands	r3, r2
 8005a22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	2101      	movs	r1, #1
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a44:	4013      	ands	r3, r2
 8005a46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	0159      	lsls	r1, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	440b      	add	r3, r1
 8005a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a62:	4619      	mov	r1, r3
 8005a64:	4b35      	ldr	r3, [pc, #212]	; (8005b3c <USB_DeactivateEndpoint+0x1b0>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]
 8005a6a:	e060      	b.n	8005b2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a82:	d11f      	bne.n	8005ac4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005aa2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ada:	041b      	lsls	r3, r3, #16
 8005adc:	43db      	mvns	r3, r3
 8005ade:	68f9      	ldr	r1, [r7, #12]
 8005ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	2101      	movs	r1, #1
 8005afa:	fa01 f303 	lsl.w	r3, r1, r3
 8005afe:	041b      	lsls	r3, r3, #16
 8005b00:	43db      	mvns	r3, r3
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	0159      	lsls	r1, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	440b      	add	r3, r1
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	4619      	mov	r1, r3
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <USB_DeactivateEndpoint+0x1b4>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	ec337800 	.word	0xec337800
 8005b40:	eff37800 	.word	0xeff37800

08005b44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	; 0x28
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	f040 815c 	bne.w	8005e1e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d132      	bne.n	8005bd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bcc:	0cdb      	lsrs	r3, r3, #19
 8005bce:	04db      	lsls	r3, r3, #19
 8005bd0:	6113      	str	r3, [r2, #16]
 8005bd2:	e074      	b.n	8005cbe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bee:	0cdb      	lsrs	r3, r3, #19
 8005bf0:	04db      	lsls	r3, r3, #19
 8005bf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6959      	ldr	r1, [r3, #20]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	440b      	add	r3, r1
 8005c30:	1e59      	subs	r1, r3, #1
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c3a:	04d9      	lsls	r1, r3, #19
 8005c3c:	4b9d      	ldr	r3, [pc, #628]	; (8005eb4 <USB_EPStartXfer+0x370>)
 8005c3e:	400b      	ands	r3, r1
 8005c40:	69b9      	ldr	r1, [r7, #24]
 8005c42:	0148      	lsls	r0, r1, #5
 8005c44:	69f9      	ldr	r1, [r7, #28]
 8005c46:	4401      	add	r1, r0
 8005c48:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c66:	69b9      	ldr	r1, [r7, #24]
 8005c68:	0148      	lsls	r0, r1, #5
 8005c6a:	69f9      	ldr	r1, [r7, #28]
 8005c6c:	4401      	add	r1, r0
 8005c6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c72:	4313      	orrs	r3, r2
 8005c74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	78db      	ldrb	r3, [r3, #3]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d11f      	bne.n	8005cbe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cbc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d14b      	bne.n	8005d5c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	78db      	ldrb	r3, [r3, #3]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d128      	bne.n	8005d3a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d110      	bne.n	8005d1a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	e00f      	b.n	8005d3a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d38:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e12f      	b.n	8005fbc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d7a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	78db      	ldrb	r3, [r3, #3]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d015      	beq.n	8005db0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8117 	beq.w	8005fbc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	2101      	movs	r1, #1
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	69f9      	ldr	r1, [r7, #28]
 8005da6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005daa:	4313      	orrs	r3, r2
 8005dac:	634b      	str	r3, [r1, #52]	; 0x34
 8005dae:	e105      	b.n	8005fbc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d110      	bne.n	8005de2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	e00f      	b.n	8005e02 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e00:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	68d9      	ldr	r1, [r3, #12]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	b298      	uxth	r0, r3
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	4603      	mov	r3, r0
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fa2b 	bl	8006272 <USB_WritePacket>
 8005e1c:	e0ce      	b.n	8005fbc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e38:	0cdb      	lsrs	r3, r3, #19
 8005e3a:	04db      	lsls	r3, r3, #19
 8005e3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d126      	bne.n	8005eb8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e80:	69b9      	ldr	r1, [r7, #24]
 8005e82:	0148      	lsls	r0, r1, #5
 8005e84:	69f9      	ldr	r1, [r7, #28]
 8005e86:	4401      	add	r1, r0
 8005e88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eae:	6113      	str	r3, [r2, #16]
 8005eb0:	e036      	b.n	8005f20 <USB_EPStartXfer+0x3dc>
 8005eb2:	bf00      	nop
 8005eb4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	1e5a      	subs	r2, r3, #1
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	8afb      	ldrh	r3, [r7, #22]
 8005ede:	04d9      	lsls	r1, r3, #19
 8005ee0:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <USB_EPStartXfer+0x484>)
 8005ee2:	400b      	ands	r3, r1
 8005ee4:	69b9      	ldr	r1, [r7, #24]
 8005ee6:	0148      	lsls	r0, r1, #5
 8005ee8:	69f9      	ldr	r1, [r7, #28]
 8005eea:	4401      	add	r1, r0
 8005eec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	8af9      	ldrh	r1, [r7, #22]
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f10:	69b9      	ldr	r1, [r7, #24]
 8005f12:	0148      	lsls	r0, r1, #5
 8005f14:	69f9      	ldr	r1, [r7, #28]
 8005f16:	4401      	add	r1, r0
 8005f18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d10d      	bne.n	8005f42 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	68d9      	ldr	r1, [r3, #12]
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	460a      	mov	r2, r1
 8005f40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	78db      	ldrb	r3, [r3, #3]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d128      	bne.n	8005f9c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d110      	bne.n	8005f7c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e00f      	b.n	8005f9c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	1ff80000 	.word	0x1ff80000

08005fcc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	f040 80cd 	bne.w	8006188 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d132      	bne.n	800605c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	440a      	add	r2, r1
 800600c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	0cdb      	lsrs	r3, r3, #19
 8006056:	04db      	lsls	r3, r3, #19
 8006058:	6113      	str	r3, [r2, #16]
 800605a:	e04e      	b.n	80060fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006076:	0cdb      	lsrs	r3, r3, #19
 8006078:	04db      	lsls	r3, r3, #19
 800607a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006096:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800609a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800609e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d903      	bls.n	80060b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ea:	6939      	ldr	r1, [r7, #16]
 80060ec:	0148      	lsls	r0, r1, #5
 80060ee:	6979      	ldr	r1, [r7, #20]
 80060f0:	4401      	add	r1, r0
 80060f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060f6:	4313      	orrs	r3, r2
 80060f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d11e      	bne.n	800613e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	461a      	mov	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006136:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	e092      	b.n	8006264 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	0151      	lsls	r1, r2, #5
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	440a      	add	r2, r1
 8006154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006158:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800615c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d07e      	beq.n	8006264 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	2101      	movs	r1, #1
 8006178:	fa01 f303 	lsl.w	r3, r1, r3
 800617c:	6979      	ldr	r1, [r7, #20]
 800617e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006182:	4313      	orrs	r3, r2
 8006184:	634b      	str	r3, [r1, #52]	; 0x34
 8006186:	e06d      	b.n	8006264 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a2:	0cdb      	lsrs	r3, r3, #19
 80061a4:	04db      	lsls	r3, r3, #19
 80061a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061ca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006212:	6939      	ldr	r1, [r7, #16]
 8006214:	0148      	lsls	r0, r1, #5
 8006216:	6979      	ldr	r1, [r7, #20]
 8006218:	4401      	add	r1, r0
 800621a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800621e:	4313      	orrs	r3, r2
 8006220:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d10d      	bne.n	8006244 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d009      	beq.n	8006244 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	68d9      	ldr	r1, [r3, #12]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	460a      	mov	r2, r1
 8006242:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	440a      	add	r2, r1
 800625a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800625e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006262:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006272:	b480      	push	{r7}
 8006274:	b089      	sub	sp, #36	; 0x24
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	4611      	mov	r1, r2
 800627e:	461a      	mov	r2, r3
 8006280:	460b      	mov	r3, r1
 8006282:	71fb      	strb	r3, [r7, #7]
 8006284:	4613      	mov	r3, r2
 8006286:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006290:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	d11a      	bne.n	80062ce <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006298:	88bb      	ldrh	r3, [r7, #4]
 800629a:	3303      	adds	r3, #3
 800629c:	089b      	lsrs	r3, r3, #2
 800629e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062a0:	2300      	movs	r3, #0
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	e00f      	b.n	80062c6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	031a      	lsls	r2, r3, #12
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b2:	461a      	mov	r2, r3
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	3304      	adds	r3, #4
 80062be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	3301      	adds	r3, #1
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d3eb      	bcc.n	80062a6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3724      	adds	r7, #36	; 0x24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062dc:	b480      	push	{r7}
 80062de:	b089      	sub	sp, #36	; 0x24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	3303      	adds	r3, #3
 80062f6:	089b      	lsrs	r3, r3, #2
 80062f8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80062fa:	2300      	movs	r3, #0
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	e00b      	b.n	8006318 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	601a      	str	r2, [r3, #0]
    pDest++;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	3304      	adds	r3, #4
 8006310:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	3301      	adds	r3, #1
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	429a      	cmp	r2, r3
 800631e:	d3ef      	bcc.n	8006300 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006320:	69fb      	ldr	r3, [r7, #28]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3724      	adds	r7, #36	; 0x24
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d12c      	bne.n	80063a4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	db12      	blt.n	8006382 <USB_EPSetStall+0x54>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00f      	beq.n	8006382 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	440a      	add	r2, r1
 8006378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006380:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	440a      	add	r2, r1
 8006398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e02b      	b.n	80063fc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	db12      	blt.n	80063dc <USB_EPSetStall+0xae>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00f      	beq.n	80063dc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063da:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d128      	bne.n	8006478 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	440a      	add	r2, r1
 800643c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006440:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006444:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	78db      	ldrb	r3, [r3, #3]
 800644a:	2b03      	cmp	r3, #3
 800644c:	d003      	beq.n	8006456 <USB_EPClearStall+0x4c>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	78db      	ldrb	r3, [r3, #3]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d138      	bne.n	80064c8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	0151      	lsls	r1, r2, #5
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	440a      	add	r2, r1
 800646c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	e027      	b.n	80064c8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	440a      	add	r2, r1
 800648e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006496:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	78db      	ldrb	r3, [r3, #3]
 800649c:	2b03      	cmp	r3, #3
 800649e:	d003      	beq.n	80064a8 <USB_EPClearStall+0x9e>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	78db      	ldrb	r3, [r3, #3]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d10f      	bne.n	80064c8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	0151      	lsls	r1, r2, #5
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	440a      	add	r2, r1
 80064be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	460b      	mov	r3, r1
 80064e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064f8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800650a:	68f9      	ldr	r1, [r7, #12]
 800650c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006510:	4313      	orrs	r3, r2
 8006512:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800653c:	f023 0303 	bic.w	r3, r3, #3
 8006540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006550:	f023 0302 	bic.w	r3, r3, #2
 8006554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800657e:	f023 0303 	bic.w	r3, r3, #3
 8006582:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006592:	f043 0302 	orr.w	r3, r3, #2
 8006596:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4013      	ands	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	4013      	ands	r3, r2
 80065ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	0c1b      	lsrs	r3, r3, #16
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4013      	ands	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	b29b      	uxth	r3, r3
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	4013      	ands	r3, r2
 8006660:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006662:	68bb      	ldr	r3, [r7, #8]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006692:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	01db      	lsls	r3, r3, #7
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4013      	ands	r3, r2
 80066bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066be:	68bb      	ldr	r3, [r7, #8]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	f003 0301 	and.w	r3, r3, #1
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006702:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006706:	f023 0307 	bic.w	r3, r3, #7
 800670a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800671a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
	...

08006730 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	460b      	mov	r3, r1
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	333c      	adds	r3, #60	; 0x3c
 8006746:	3304      	adds	r3, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4a26      	ldr	r2, [pc, #152]	; (80067e8 <USB_EP0_OutStart+0xb8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d90a      	bls.n	800676a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006764:	d101      	bne.n	800676a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e037      	b.n	80067da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	461a      	mov	r2, r3
 8006772:	2300      	movs	r3, #0
 8006774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006798:	f043 0318 	orr.w	r3, r3, #24
 800679c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067b2:	7afb      	ldrb	r3, [r7, #11]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d10f      	bne.n	80067d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	4f54300a 	.word	0x4f54300a

080067ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4a13      	ldr	r2, [pc, #76]	; (8006850 <USB_CoreReset+0x64>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d901      	bls.n	800680a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e01b      	b.n	8006842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	daf2      	bge.n	80067f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f043 0201 	orr.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3301      	adds	r3, #1
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4a09      	ldr	r2, [pc, #36]	; (8006850 <USB_CoreReset+0x64>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e006      	b.n	8006842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b01      	cmp	r3, #1
 800683e:	d0f0      	beq.n	8006822 <USB_CoreReset+0x36>

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	00030d40 	.word	0x00030d40

08006854 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006860:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006864:	f002 f952 	bl	8008b0c <malloc>
 8006868:	4603      	mov	r3, r0
 800686a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800687a:	2302      	movs	r3, #2
 800687c:	e066      	b.n	800694c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	7c1b      	ldrb	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d119      	bne.n	80068c2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800688e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006892:	2202      	movs	r2, #2
 8006894:	2181      	movs	r1, #129	; 0x81
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 ffbf 	bl	800881a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068a6:	2202      	movs	r2, #2
 80068a8:	2101      	movs	r1, #1
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f001 ffb5 	bl	800881a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2210      	movs	r2, #16
 80068bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80068c0:	e016      	b.n	80068f0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068c2:	2340      	movs	r3, #64	; 0x40
 80068c4:	2202      	movs	r2, #2
 80068c6:	2181      	movs	r1, #129	; 0x81
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 ffa6 	bl	800881a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068d4:	2340      	movs	r3, #64	; 0x40
 80068d6:	2202      	movs	r2, #2
 80068d8:	2101      	movs	r1, #1
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 ff9d 	bl	800881a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2210      	movs	r2, #16
 80068ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068f0:	2308      	movs	r3, #8
 80068f2:	2203      	movs	r2, #3
 80068f4:	2182      	movs	r1, #130	; 0x82
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 ff8f 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	7c1b      	ldrb	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800692c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006930:	2101      	movs	r1, #1
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f002 f860 	bl	80089f8 <USBD_LL_PrepareReceive>
 8006938:	e007      	b.n	800694a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006940:	2340      	movs	r3, #64	; 0x40
 8006942:	2101      	movs	r1, #1
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f002 f857 	bl	80089f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006964:	2181      	movs	r1, #129	; 0x81
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 ff7d 	bl	8008866 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006972:	2101      	movs	r1, #1
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 ff76 	bl	8008866 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006982:	2182      	movs	r1, #130	; 0x82
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 ff6e 	bl	8008866 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00e      	beq.n	80069c2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b4:	4618      	mov	r0, r3
 80069b6:	f002 f8b1 	bl	8008b1c <free>
    pdev->pClassData = NULL;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069dc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d03a      	beq.n	8006a6c <USBD_CDC_Setup+0xa0>
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	f040 8097 	bne.w	8006b2a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	88db      	ldrh	r3, [r3, #6]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d029      	beq.n	8006a58 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	b25b      	sxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	da11      	bge.n	8006a32 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006a1a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	88d2      	ldrh	r2, [r2, #6]
 8006a20:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a22:	6939      	ldr	r1, [r7, #16]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	88db      	ldrh	r3, [r3, #6]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fa9d 	bl	8007f6a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006a30:	e082      	b.n	8006b38 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	785a      	ldrb	r2, [r3, #1]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	88db      	ldrh	r3, [r3, #6]
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a48:	6939      	ldr	r1, [r7, #16]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	88db      	ldrh	r3, [r3, #6]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fab6 	bl	8007fc2 <USBD_CtlPrepareRx>
    break;
 8006a56:	e06f      	b.n	8006b38 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	7850      	ldrb	r0, [r2, #1]
 8006a64:	2200      	movs	r2, #0
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	4798      	blx	r3
    break;
 8006a6a:	e065      	b.n	8006b38 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	785b      	ldrb	r3, [r3, #1]
 8006a70:	2b0b      	cmp	r3, #11
 8006a72:	d84f      	bhi.n	8006b14 <USBD_CDC_Setup+0x148>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <USBD_CDC_Setup+0xb0>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006aad 	.word	0x08006aad
 8006a80:	08006b23 	.word	0x08006b23
 8006a84:	08006b15 	.word	0x08006b15
 8006a88:	08006b15 	.word	0x08006b15
 8006a8c:	08006b15 	.word	0x08006b15
 8006a90:	08006b15 	.word	0x08006b15
 8006a94:	08006b15 	.word	0x08006b15
 8006a98:	08006b15 	.word	0x08006b15
 8006a9c:	08006b15 	.word	0x08006b15
 8006aa0:	08006b15 	.word	0x08006b15
 8006aa4:	08006ad5 	.word	0x08006ad5
 8006aa8:	08006afd 	.word	0x08006afd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d107      	bne.n	8006ac6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ab6:	f107 030c 	add.w	r3, r7, #12
 8006aba:	2202      	movs	r2, #2
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 fa53 	bl	8007f6a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ac4:	e030      	b.n	8006b28 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 f9dd 	bl	8007e88 <USBD_CtlError>
        ret = USBD_FAIL;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad2:	e029      	b.n	8006b28 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d107      	bne.n	8006aee <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ade:	f107 030f 	add.w	r3, r7, #15
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fa3f 	bl	8007f6a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006aec:	e01c      	b.n	8006b28 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 f9c9 	bl	8007e88 <USBD_CtlError>
        ret = USBD_FAIL;
 8006af6:	2303      	movs	r3, #3
 8006af8:	75fb      	strb	r3, [r7, #23]
      break;
 8006afa:	e015      	b.n	8006b28 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d00f      	beq.n	8006b26 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 f9bd 	bl	8007e88 <USBD_CtlError>
        ret = USBD_FAIL;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006b12:	e008      	b.n	8006b26 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 f9b6 	bl	8007e88 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b20:	e002      	b.n	8006b28 <USBD_CDC_Setup+0x15c>
      break;
 8006b22:	bf00      	nop
 8006b24:	e008      	b.n	8006b38 <USBD_CDC_Setup+0x16c>
      break;
 8006b26:	bf00      	nop
    }
    break;
 8006b28:	e006      	b.n	8006b38 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 f9ab 	bl	8007e88 <USBD_CtlError>
    ret = USBD_FAIL;
 8006b32:	2303      	movs	r3, #3
 8006b34:	75fb      	strb	r3, [r7, #23]
    break;
 8006b36:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop

08006b44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e049      	b.n	8006bfa <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	3318      	adds	r3, #24
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d029      	beq.n	8006bd8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b84:	78fa      	ldrb	r2, [r7, #3]
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	440b      	add	r3, r1
 8006b92:	3318      	adds	r3, #24
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	78f9      	ldrb	r1, [r7, #3]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	1a5b      	subs	r3, r3, r1
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4403      	add	r3, r0
 8006ba4:	3344      	adds	r3, #68	; 0x44
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bac:	fb03 f301 	mul.w	r3, r3, r1
 8006bb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d110      	bne.n	8006bd8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	3318      	adds	r3, #24
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bca:	78f9      	ldrb	r1, [r7, #3]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	2200      	movs	r2, #0
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 fef0 	bl	80089b6 <USBD_LL_Transmit>
 8006bd6:	e00f      	b.n	8006bf8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006bf4:	78fa      	ldrb	r2, [r7, #3]
 8006bf6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e015      	b.n	8006c50 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 ff06 	bl	8008a3a <USBD_LL_GetRxDataSize>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c66:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d015      	beq.n	8006c9e <USBD_CDC_EP0_RxReady+0x46>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c78:	2bff      	cmp	r3, #255	; 0xff
 8006c7a:	d010      	beq.n	8006c9e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006c8a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c92:	b292      	uxth	r2, r2
 8006c94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	22ff      	movs	r2, #255	; 0xff
 8006c9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2243      	movs	r2, #67	; 0x43
 8006cb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006cb6:	4b03      	ldr	r3, [pc, #12]	; (8006cc4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	20000094 	.word	0x20000094

08006cc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2243      	movs	r2, #67	; 0x43
 8006cd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006cd6:	4b03      	ldr	r3, [pc, #12]	; (8006ce4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	20000050 	.word	0x20000050

08006ce8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2243      	movs	r2, #67	; 0x43
 8006cf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006cf6:	4b03      	ldr	r3, [pc, #12]	; (8006d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	200000d8 	.word	0x200000d8

08006d08 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	220a      	movs	r2, #10
 8006d14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d16:	4b03      	ldr	r3, [pc, #12]	; (8006d24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	2000000c 	.word	0x2000000c

08006d28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e004      	b.n	8006d46 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b087      	sub	sp, #28
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d64:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d94:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e01a      	b.n	8006e04 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d114      	bne.n	8006e02 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006df6:	2181      	movs	r1, #129	; 0x81
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fddc 	bl	80089b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e016      	b.n	8006e58 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	7c1b      	ldrb	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 fdda 	bl	80089f8 <USBD_LL_PrepareReceive>
 8006e44:	e007      	b.n	8006e56 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	2101      	movs	r1, #1
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fdd1 	bl	80089f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e025      	b.n	8006ec4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	79fa      	ldrb	r2, [r7, #7]
 8006eb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f001 fc47 	bl	800874c <USBD_LL_Init>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e010      	b.n	8006f06 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	f107 020e 	add.w	r2, r7, #14
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4798      	blx	r3
 8006efc:	4602      	mov	r2, r0
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f001 fc64 	bl	80087e4 <USBD_LL_Start>
 8006f1c:	4603      	mov	r3, r0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d009      	beq.n	8006f6a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	78fa      	ldrb	r2, [r7, #3]
 8006f60:	4611      	mov	r1, r2
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
 8006f66:	4603      	mov	r3, r0
 8006f68:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	4611      	mov	r1, r2
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
  }

  return USBD_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 ff2c 	bl	8007e14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d00e      	beq.n	8006ffe <USBD_LL_SetupStage+0x5a>
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d302      	bcc.n	8006fea <USBD_LL_SetupStage+0x46>
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d014      	beq.n	8007012 <USBD_LL_SetupStage+0x6e>
 8006fe8:	e01d      	b.n	8007026 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa18 	bl	8007428 <USBD_StdDevReq>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffc:	e020      	b.n	8007040 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fa7c 	bl	8007504 <USBD_StdItfReq>
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]
      break;
 8007010:	e016      	b.n	8007040 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fab8 	bl	8007590 <USBD_StdEPReq>
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]
      break;
 8007024:	e00c      	b.n	8007040 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800702c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007030:	b2db      	uxtb	r3, r3
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fc35 	bl	80088a4 <USBD_LL_StallEP>
 800703a:	4603      	mov	r3, r0
 800703c:	73fb      	strb	r3, [r7, #15]
      break;
 800703e:	bf00      	nop
  }

  return ret;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b086      	sub	sp, #24
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	460b      	mov	r3, r1
 8007054:	607a      	str	r2, [r7, #4]
 8007056:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007058:	7afb      	ldrb	r3, [r7, #11]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d137      	bne.n	80070ce <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007064:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800706c:	2b03      	cmp	r3, #3
 800706e:	d14a      	bne.n	8007106 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	429a      	cmp	r2, r3
 800707a:	d913      	bls.n	80070a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	1ad2      	subs	r2, r2, r3
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	4293      	cmp	r3, r2
 8007094:	bf28      	it	cs
 8007096:	4613      	movcs	r3, r2
 8007098:	461a      	mov	r2, r3
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 ffad 	bl	8007ffc <USBD_CtlContinueRx>
 80070a2:	e030      	b.n	8007106 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d105      	bne.n	80070c6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 ffa9 	bl	800801e <USBD_CtlSendStatus>
 80070cc:	e01b      	b.n	8007106 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d013      	beq.n	8007102 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d10e      	bne.n	8007102 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	7afa      	ldrb	r2, [r7, #11]
 80070ee:	4611      	mov	r1, r2
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	4798      	blx	r3
 80070f4:	4603      	mov	r3, r0
 80070f6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	e002      	b.n	8007108 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007102:	2303      	movs	r3, #3
 8007104:	e000      	b.n	8007108 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	460b      	mov	r3, r1
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800711e:	7afb      	ldrb	r3, [r7, #11]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d16a      	bne.n	80071fa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3314      	adds	r3, #20
 8007128:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007130:	2b02      	cmp	r3, #2
 8007132:	d155      	bne.n	80071e0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	429a      	cmp	r2, r3
 800713e:	d914      	bls.n	800716a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	1ad2      	subs	r2, r2, r3
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	461a      	mov	r2, r3
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 ff22 	bl	8007fa0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800715c:	2300      	movs	r3, #0
 800715e:	2200      	movs	r2, #0
 8007160:	2100      	movs	r1, #0
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f001 fc48 	bl	80089f8 <USBD_LL_PrepareReceive>
 8007168:	e03a      	b.n	80071e0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	429a      	cmp	r2, r3
 8007174:	d11c      	bne.n	80071b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800717e:	429a      	cmp	r2, r3
 8007180:	d316      	bcc.n	80071b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800718c:	429a      	cmp	r2, r3
 800718e:	d20f      	bcs.n	80071b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007190:	2200      	movs	r2, #0
 8007192:	2100      	movs	r1, #0
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 ff03 	bl	8007fa0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071a2:	2300      	movs	r3, #0
 80071a4:	2200      	movs	r2, #0
 80071a6:	2100      	movs	r1, #0
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f001 fc25 	bl	80089f8 <USBD_LL_PrepareReceive>
 80071ae:	e017      	b.n	80071e0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d105      	bne.n	80071d2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071d2:	2180      	movs	r1, #128	; 0x80
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f001 fb65 	bl	80088a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 ff32 	bl	8008044 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d123      	bne.n	8007232 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f7ff fe9b 	bl	8006f26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071f8:	e01b      	b.n	8007232 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d013      	beq.n	800722e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800720c:	2b03      	cmp	r3, #3
 800720e:	d10e      	bne.n	800722e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	7afa      	ldrb	r2, [r7, #11]
 800721a:	4611      	mov	r1, r2
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	4798      	blx	r3
 8007220:	4603      	mov	r3, r0
 8007222:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	e002      	b.n	8007234 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	e000      	b.n	8007234 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007268:	2b00      	cmp	r3, #0
 800726a:	d009      	beq.n	8007280 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6852      	ldr	r2, [r2, #4]
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	4611      	mov	r1, r2
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	2200      	movs	r2, #0
 8007284:	2100      	movs	r1, #0
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 fac7 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2240      	movs	r2, #64	; 0x40
 8007298:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800729c:	2340      	movs	r3, #64	; 0x40
 800729e:	2200      	movs	r2, #0
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fab9 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2240      	movs	r2, #64	; 0x40
 80072b2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	460b      	mov	r3, r1
 80072c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	78fa      	ldrb	r2, [r7, #3]
 80072ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2204      	movs	r2, #4
 80072f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007316:	2b04      	cmp	r3, #4
 8007318:	d105      	bne.n	8007326 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007342:	2b03      	cmp	r3, #3
 8007344:	d10b      	bne.n	800735e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d005      	beq.n	800735e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d009      	beq.n	80073e0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6852      	ldr	r2, [r2, #4]
 80073d8:	b2d2      	uxtb	r2, r2
 80073da:	4611      	mov	r1, r2
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
  }

  return USBD_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b087      	sub	sp, #28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	3301      	adds	r3, #1
 8007400:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007408:	8a3b      	ldrh	r3, [r7, #16]
 800740a:	021b      	lsls	r3, r3, #8
 800740c:	b21a      	sxth	r2, r3
 800740e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007412:	4313      	orrs	r3, r2
 8007414:	b21b      	sxth	r3, r3
 8007416:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007418:	89fb      	ldrh	r3, [r7, #14]
}
 800741a:	4618      	mov	r0, r3
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
	...

08007428 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800743e:	2b20      	cmp	r3, #32
 8007440:	d004      	beq.n	800744c <USBD_StdDevReq+0x24>
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d002      	beq.n	800744c <USBD_StdDevReq+0x24>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <USBD_StdDevReq+0x38>
 800744a:	e050      	b.n	80074ee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]
    break;
 800745e:	e04b      	b.n	80074f8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	2b09      	cmp	r3, #9
 8007466:	d83c      	bhi.n	80074e2 <USBD_StdDevReq+0xba>
 8007468:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <USBD_StdDevReq+0x48>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	080074c5 	.word	0x080074c5
 8007474:	080074d9 	.word	0x080074d9
 8007478:	080074e3 	.word	0x080074e3
 800747c:	080074cf 	.word	0x080074cf
 8007480:	080074e3 	.word	0x080074e3
 8007484:	080074a3 	.word	0x080074a3
 8007488:	08007499 	.word	0x08007499
 800748c:	080074e3 	.word	0x080074e3
 8007490:	080074bb 	.word	0x080074bb
 8007494:	080074ad 	.word	0x080074ad
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f9ce 	bl	800783c <USBD_GetDescriptor>
      break;
 80074a0:	e024      	b.n	80074ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fb33 	bl	8007b10 <USBD_SetAddress>
      break;
 80074aa:	e01f      	b.n	80074ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fb70 	bl	8007b94 <USBD_SetConfig>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]
      break;
 80074b8:	e018      	b.n	80074ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc0d 	bl	8007cdc <USBD_GetConfig>
      break;
 80074c2:	e013      	b.n	80074ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fc3c 	bl	8007d44 <USBD_GetStatus>
      break;
 80074cc:	e00e      	b.n	80074ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fc6a 	bl	8007daa <USBD_SetFeature>
      break;
 80074d6:	e009      	b.n	80074ec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fc79 	bl	8007dd2 <USBD_ClrFeature>
      break;
 80074e0:	e004      	b.n	80074ec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fccf 	bl	8007e88 <USBD_CtlError>
      break;
 80074ea:	bf00      	nop
    }
    break;
 80074ec:	e004      	b.n	80074f8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fcc9 	bl	8007e88 <USBD_CtlError>
    break;
 80074f6:	bf00      	nop
  }

  return ret;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop

08007504 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800751a:	2b20      	cmp	r3, #32
 800751c:	d003      	beq.n	8007526 <USBD_StdItfReq+0x22>
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	d001      	beq.n	8007526 <USBD_StdItfReq+0x22>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d12a      	bne.n	800757c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800752c:	3b01      	subs	r3, #1
 800752e:	2b02      	cmp	r3, #2
 8007530:	d81d      	bhi.n	800756e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	889b      	ldrh	r3, [r3, #4]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b01      	cmp	r3, #1
 800753a:	d813      	bhi.n	8007564 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	4798      	blx	r3
 800754a:	4603      	mov	r3, r0
 800754c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	88db      	ldrh	r3, [r3, #6]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d110      	bne.n	8007578 <USBD_StdItfReq+0x74>
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fd5e 	bl	800801e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007562:	e009      	b.n	8007578 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fc8e 	bl	8007e88 <USBD_CtlError>
      break;
 800756c:	e004      	b.n	8007578 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fc89 	bl	8007e88 <USBD_CtlError>
      break;
 8007576:	e000      	b.n	800757a <USBD_StdItfReq+0x76>
      break;
 8007578:	bf00      	nop
    }
    break;
 800757a:	e004      	b.n	8007586 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fc82 	bl	8007e88 <USBD_CtlError>
    break;
 8007584:	bf00      	nop
  }

  return ret;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	889b      	ldrh	r3, [r3, #4]
 80075a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	d004      	beq.n	80075ba <USBD_StdEPReq+0x2a>
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d002      	beq.n	80075ba <USBD_StdEPReq+0x2a>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <USBD_StdEPReq+0x3e>
 80075b8:	e135      	b.n	8007826 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
 80075c8:	4603      	mov	r3, r0
 80075ca:	73fb      	strb	r3, [r7, #15]
    break;
 80075cc:	e130      	b.n	8007830 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	785b      	ldrb	r3, [r3, #1]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d03e      	beq.n	8007654 <USBD_StdEPReq+0xc4>
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d002      	beq.n	80075e0 <USBD_StdEPReq+0x50>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d077      	beq.n	80076ce <USBD_StdEPReq+0x13e>
 80075de:	e11c      	b.n	800781a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d002      	beq.n	80075f0 <USBD_StdEPReq+0x60>
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d015      	beq.n	800761a <USBD_StdEPReq+0x8a>
 80075ee:	e02b      	b.n	8007648 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00c      	beq.n	8007610 <USBD_StdEPReq+0x80>
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	2b80      	cmp	r3, #128	; 0x80
 80075fa:	d009      	beq.n	8007610 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 f94f 	bl	80088a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007606:	2180      	movs	r1, #128	; 0x80
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 f94b 	bl	80088a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800760e:	e020      	b.n	8007652 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fc38 	bl	8007e88 <USBD_CtlError>
        break;
 8007618:	e01b      	b.n	8007652 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	885b      	ldrh	r3, [r3, #2]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10e      	bne.n	8007640 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <USBD_StdEPReq+0xb0>
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b80      	cmp	r3, #128	; 0x80
 800762c:	d008      	beq.n	8007640 <USBD_StdEPReq+0xb0>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	88db      	ldrh	r3, [r3, #6]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d104      	bne.n	8007640 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 f932 	bl	80088a4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fcec 	bl	800801e <USBD_CtlSendStatus>

        break;
 8007646:	e004      	b.n	8007652 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fc1c 	bl	8007e88 <USBD_CtlError>
        break;
 8007650:	bf00      	nop
      }
      break;
 8007652:	e0e7      	b.n	8007824 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765a:	2b02      	cmp	r3, #2
 800765c:	d002      	beq.n	8007664 <USBD_StdEPReq+0xd4>
 800765e:	2b03      	cmp	r3, #3
 8007660:	d015      	beq.n	800768e <USBD_StdEPReq+0xfe>
 8007662:	e02d      	b.n	80076c0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00c      	beq.n	8007684 <USBD_StdEPReq+0xf4>
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	2b80      	cmp	r3, #128	; 0x80
 800766e:	d009      	beq.n	8007684 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 f915 	bl	80088a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800767a:	2180      	movs	r1, #128	; 0x80
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 f911 	bl	80088a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007682:	e023      	b.n	80076cc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fbfe 	bl	8007e88 <USBD_CtlError>
        break;
 800768c:	e01e      	b.n	80076cc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	885b      	ldrh	r3, [r3, #2]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d119      	bne.n	80076ca <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 f91c 	bl	80088e2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fcb7 	bl	800801e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
        }
        break;
 80076be:	e004      	b.n	80076ca <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fbe0 	bl	8007e88 <USBD_CtlError>
        break;
 80076c8:	e000      	b.n	80076cc <USBD_StdEPReq+0x13c>
        break;
 80076ca:	bf00      	nop
      }
      break;
 80076cc:	e0aa      	b.n	8007824 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d002      	beq.n	80076de <USBD_StdEPReq+0x14e>
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d032      	beq.n	8007742 <USBD_StdEPReq+0x1b2>
 80076dc:	e097      	b.n	800780e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <USBD_StdEPReq+0x164>
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b80      	cmp	r3, #128	; 0x80
 80076e8:	d004      	beq.n	80076f4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fbcb 	bl	8007e88 <USBD_CtlError>
          break;
 80076f2:	e091      	b.n	8007818 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	da0b      	bge.n	8007714 <USBD_StdEPReq+0x184>
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	3310      	adds	r3, #16
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	4413      	add	r3, r2
 8007710:	3304      	adds	r3, #4
 8007712:	e00b      	b.n	800772c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	4413      	add	r3, r2
 800772a:	3304      	adds	r3, #4
 800772c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2202      	movs	r2, #2
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fc15 	bl	8007f6a <USBD_CtlSendData>
        break;
 8007740:	e06a      	b.n	8007818 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007746:	2b00      	cmp	r3, #0
 8007748:	da11      	bge.n	800776e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	f003 020f 	and.w	r2, r3, #15
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	3324      	adds	r3, #36	; 0x24
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d117      	bne.n	8007794 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fb8e 	bl	8007e88 <USBD_CtlError>
            break;
 800776c:	e054      	b.n	8007818 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	f003 020f 	and.w	r2, r3, #15
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d104      	bne.n	8007794 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fb7b 	bl	8007e88 <USBD_CtlError>
            break;
 8007792:	e041      	b.n	8007818 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007798:	2b00      	cmp	r3, #0
 800779a:	da0b      	bge.n	80077b4 <USBD_StdEPReq+0x224>
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	3310      	adds	r3, #16
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	4413      	add	r3, r2
 80077b0:	3304      	adds	r3, #4
 80077b2:	e00b      	b.n	80077cc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	4413      	add	r3, r2
 80077ca:	3304      	adds	r3, #4
 80077cc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <USBD_StdEPReq+0x24a>
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b80      	cmp	r3, #128	; 0x80
 80077d8:	d103      	bne.n	80077e2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	e00e      	b.n	8007800 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 f89a 	bl	8008920 <USBD_LL_IsStallEP>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2201      	movs	r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e002      	b.n	8007800 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2202      	movs	r2, #2
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fbaf 	bl	8007f6a <USBD_CtlSendData>
          break;
 800780c:	e004      	b.n	8007818 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fb39 	bl	8007e88 <USBD_CtlError>
        break;
 8007816:	bf00      	nop
      }
      break;
 8007818:	e004      	b.n	8007824 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fb33 	bl	8007e88 <USBD_CtlError>
      break;
 8007822:	bf00      	nop
    }
    break;
 8007824:	e004      	b.n	8007830 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fb2d 	bl	8007e88 <USBD_CtlError>
    break;
 800782e:	bf00      	nop
  }

  return ret;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	885b      	ldrh	r3, [r3, #2]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	2b06      	cmp	r3, #6
 800785e:	f200 8128 	bhi.w	8007ab2 <USBD_GetDescriptor+0x276>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <USBD_GetDescriptor+0x2c>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007885 	.word	0x08007885
 800786c:	0800789d 	.word	0x0800789d
 8007870:	080078dd 	.word	0x080078dd
 8007874:	08007ab3 	.word	0x08007ab3
 8007878:	08007ab3 	.word	0x08007ab3
 800787c:	08007a53 	.word	0x08007a53
 8007880:	08007a7f 	.word	0x08007a7f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	7c12      	ldrb	r2, [r2, #16]
 8007890:	f107 0108 	add.w	r1, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
    break;
 800789a:	e112      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7c1b      	ldrb	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10d      	bne.n	80078c0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	f107 0208 	add.w	r2, r7, #8
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	2202      	movs	r2, #2
 80078bc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80078be:	e100      	b.n	8007ac2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	f107 0208 	add.w	r2, r7, #8
 80078cc:	4610      	mov	r0, r2
 80078ce:	4798      	blx	r3
 80078d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	2202      	movs	r2, #2
 80078d8:	701a      	strb	r2, [r3, #0]
    break;
 80078da:	e0f2      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	885b      	ldrh	r3, [r3, #2]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	f200 80ac 	bhi.w	8007a40 <USBD_GetDescriptor+0x204>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <USBD_GetDescriptor+0xb4>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007909 	.word	0x08007909
 80078f4:	0800793d 	.word	0x0800793d
 80078f8:	08007971 	.word	0x08007971
 80078fc:	080079a5 	.word	0x080079a5
 8007900:	080079d9 	.word	0x080079d9
 8007904:	08007a0d 	.word	0x08007a0d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800792a:	e091      	b.n	8007a50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 faaa 	bl	8007e88 <USBD_CtlError>
        err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
      break;
 800793a:	e089      	b.n	8007a50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	7c12      	ldrb	r2, [r2, #16]
 8007954:	f107 0108 	add.w	r1, r7, #8
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800795e:	e077      	b.n	8007a50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa90 	bl	8007e88 <USBD_CtlError>
        err++;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3301      	adds	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]
      break;
 800796e:	e06f      	b.n	8007a50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007992:	e05d      	b.n	8007a50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa76 	bl	8007e88 <USBD_CtlError>
        err++;
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	3301      	adds	r3, #1
 80079a0:	72fb      	strb	r3, [r7, #11]
      break;
 80079a2:	e055      	b.n	8007a50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079c6:	e043      	b.n	8007a50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa5c 	bl	8007e88 <USBD_CtlError>
        err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
      break;
 80079d6:	e03b      	b.n	8007a50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079fa:	e029      	b.n	8007a50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa42 	bl	8007e88 <USBD_CtlError>
        err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
      break;
 8007a0a:	e021      	b.n	8007a50 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a2e:	e00f      	b.n	8007a50 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa28 	bl	8007e88 <USBD_CtlError>
        err++;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	72fb      	strb	r3, [r7, #11]
      break;
 8007a3e:	e007      	b.n	8007a50 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa20 	bl	8007e88 <USBD_CtlError>
      err++;
 8007a48:	7afb      	ldrb	r3, [r7, #11]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007a4e:	bf00      	nop
    }
    break;
 8007a50:	e037      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7c1b      	ldrb	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	f107 0208 	add.w	r2, r7, #8
 8007a66:	4610      	mov	r0, r2
 8007a68:	4798      	blx	r3
 8007a6a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007a6c:	e029      	b.n	8007ac2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fa09 	bl	8007e88 <USBD_CtlError>
      err++;
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	72fb      	strb	r3, [r7, #11]
    break;
 8007a7c:	e021      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	7c1b      	ldrb	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10d      	bne.n	8007aa2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	f107 0208 	add.w	r2, r7, #8
 8007a92:	4610      	mov	r0, r2
 8007a94:	4798      	blx	r3
 8007a96:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	2207      	movs	r2, #7
 8007a9e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007aa0:	e00f      	b.n	8007ac2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f9ef 	bl	8007e88 <USBD_CtlError>
      err++;
 8007aaa:	7afb      	ldrb	r3, [r7, #11]
 8007aac:	3301      	adds	r3, #1
 8007aae:	72fb      	strb	r3, [r7, #11]
    break;
 8007ab0:	e007      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f9e7 	bl	8007e88 <USBD_CtlError>
    err++;
 8007aba:	7afb      	ldrb	r3, [r7, #11]
 8007abc:	3301      	adds	r3, #1
 8007abe:	72fb      	strb	r3, [r7, #11]
    break;
 8007ac0:	bf00      	nop
  }

  if (err != 0U)
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11e      	bne.n	8007b06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	88db      	ldrh	r3, [r3, #6]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d016      	beq.n	8007afe <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007ad0:	893b      	ldrh	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	88da      	ldrh	r2, [r3, #6]
 8007ada:	893b      	ldrh	r3, [r7, #8]
 8007adc:	4293      	cmp	r3, r2
 8007ade:	bf28      	it	cs
 8007ae0:	4613      	movcs	r3, r2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ae6:	893b      	ldrh	r3, [r7, #8]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	68f9      	ldr	r1, [r7, #12]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fa3c 	bl	8007f6a <USBD_CtlSendData>
 8007af2:	e009      	b.n	8007b08 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f9c6 	bl	8007e88 <USBD_CtlError>
 8007afc:	e004      	b.n	8007b08 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa8d 	bl	800801e <USBD_CtlSendStatus>
 8007b04:	e000      	b.n	8007b08 <USBD_GetDescriptor+0x2cc>
    return;
 8007b06:	bf00      	nop
    }
  }
}
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop

08007b10 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	889b      	ldrh	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d130      	bne.n	8007b84 <USBD_SetAddress+0x74>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	88db      	ldrh	r3, [r3, #6]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d12c      	bne.n	8007b84 <USBD_SetAddress+0x74>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b30:	d828      	bhi.n	8007b84 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	885b      	ldrh	r3, [r3, #2]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b44:	2b03      	cmp	r3, #3
 8007b46:	d104      	bne.n	8007b52 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f99c 	bl	8007e88 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b50:	e01c      	b.n	8007b8c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	7bfa      	ldrb	r2, [r7, #15]
 8007b56:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 ff0a 	bl	8008978 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fa5a 	bl	800801e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d004      	beq.n	8007b7a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b78:	e008      	b.n	8007b8c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b82:	e003      	b.n	8007b8c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f97e 	bl	8007e88 <USBD_CtlError>
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	885b      	ldrh	r3, [r3, #2]
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	4b4b      	ldr	r3, [pc, #300]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007baa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bac:	4b4a      	ldr	r3, [pc, #296]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d905      	bls.n	8007bc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f966 	bl	8007e88 <USBD_CtlError>
    return USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e087      	b.n	8007cd0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d002      	beq.n	8007bd0 <USBD_SetConfig+0x3c>
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d025      	beq.n	8007c1a <USBD_SetConfig+0x86>
 8007bce:	e071      	b.n	8007cb4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007bd0:	4b41      	ldr	r3, [pc, #260]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01c      	beq.n	8007c12 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007bd8:	4b3f      	ldr	r3, [pc, #252]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007be2:	4b3d      	ldr	r3, [pc, #244]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff f9a7 	bl	8006f3c <USBD_SetClassConfig>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d004      	beq.n	8007c02 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f944 	bl	8007e88 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007c00:	e065      	b.n	8007cce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fa0b 	bl	800801e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007c10:	e05d      	b.n	8007cce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa03 	bl	800801e <USBD_CtlSendStatus>
    break;
 8007c18:	e059      	b.n	8007cce <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007c1a:	4b2f      	ldr	r3, [pc, #188]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d112      	bne.n	8007c48 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007c2a:	4b2b      	ldr	r3, [pc, #172]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c34:	4b28      	ldr	r3, [pc, #160]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff f99a 	bl	8006f74 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9ec 	bl	800801e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007c46:	e042      	b.n	8007cce <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007c48:	4b23      	ldr	r3, [pc, #140]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d02a      	beq.n	8007cac <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff f988 	bl	8006f74 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007c64:	4b1c      	ldr	r3, [pc, #112]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c6e:	4b1a      	ldr	r3, [pc, #104]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff f961 	bl	8006f3c <USBD_SetClassConfig>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00f      	beq.n	8007ca4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f8fe 	bl	8007e88 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff f96d 	bl	8006f74 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007ca2:	e014      	b.n	8007cce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f9ba 	bl	800801e <USBD_CtlSendStatus>
    break;
 8007caa:	e010      	b.n	8007cce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f9b6 	bl	800801e <USBD_CtlSendStatus>
    break;
 8007cb2:	e00c      	b.n	8007cce <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f8e6 	bl	8007e88 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cbc:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <USBD_SetConfig+0x144>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff f956 	bl	8006f74 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	73fb      	strb	r3, [r7, #15]
    break;
 8007ccc:	bf00      	nop
  }

  return ret;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20000384 	.word	0x20000384

08007cdc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	88db      	ldrh	r3, [r3, #6]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d004      	beq.n	8007cf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f8c9 	bl	8007e88 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007cf6:	e021      	b.n	8007d3c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	db17      	blt.n	8007d32 <USBD_GetConfig+0x56>
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	dd02      	ble.n	8007d0c <USBD_GetConfig+0x30>
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d00b      	beq.n	8007d22 <USBD_GetConfig+0x46>
 8007d0a:	e012      	b.n	8007d32 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3308      	adds	r3, #8
 8007d16:	2201      	movs	r2, #1
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f925 	bl	8007f6a <USBD_CtlSendData>
      break;
 8007d20:	e00c      	b.n	8007d3c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3304      	adds	r3, #4
 8007d26:	2201      	movs	r2, #1
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f91d 	bl	8007f6a <USBD_CtlSendData>
      break;
 8007d30:	e004      	b.n	8007d3c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f8a7 	bl	8007e88 <USBD_CtlError>
      break;
 8007d3a:	bf00      	nop
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d54:	3b01      	subs	r3, #1
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d81e      	bhi.n	8007d98 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	88db      	ldrh	r3, [r3, #6]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d004      	beq.n	8007d6c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f88f 	bl	8007e88 <USBD_CtlError>
      break;
 8007d6a:	e01a      	b.n	8007da2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f043 0202 	orr.w	r2, r3, #2
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	330c      	adds	r3, #12
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f8ea 	bl	8007f6a <USBD_CtlSendData>
    break;
 8007d96:	e004      	b.n	8007da2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f874 	bl	8007e88 <USBD_CtlError>
    break;
 8007da0:	bf00      	nop
  }
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	885b      	ldrh	r3, [r3, #2]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d106      	bne.n	8007dca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f92a 	bl	800801e <USBD_CtlSendStatus>
  }
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de2:	3b01      	subs	r3, #1
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d80b      	bhi.n	8007e00 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	885b      	ldrh	r3, [r3, #2]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d10c      	bne.n	8007e0a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f910 	bl	800801e <USBD_CtlSendStatus>
      }
      break;
 8007dfe:	e004      	b.n	8007e0a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f840 	bl	8007e88 <USBD_CtlError>
      break;
 8007e08:	e000      	b.n	8007e0c <USBD_ClrFeature+0x3a>
      break;
 8007e0a:	bf00      	nop
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	781a      	ldrb	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff fad3 	bl	80073ea <SWAPBYTE>
 8007e44:	4603      	mov	r3, r0
 8007e46:	461a      	mov	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f7ff fac6 	bl	80073ea <SWAPBYTE>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	461a      	mov	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7ff fab9 	bl	80073ea <SWAPBYTE>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	80da      	strh	r2, [r3, #6]
}
 8007e80:	bf00      	nop
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e92:	2180      	movs	r1, #128	; 0x80
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fd05 	bl	80088a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fd01 	bl	80088a4 <USBD_LL_StallEP>
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b086      	sub	sp, #24
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d036      	beq.n	8007f2e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ec4:	6938      	ldr	r0, [r7, #16]
 8007ec6:	f000 f836 	bl	8007f36 <USBD_GetLen>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	3301      	adds	r3, #1
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	7812      	ldrb	r2, [r2, #0]
 8007ee2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	4413      	add	r3, r2
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007efa:	e013      	b.n	8007f24 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	4413      	add	r3, r2
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	7812      	ldrb	r2, [r2, #0]
 8007f06:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	613b      	str	r3, [r7, #16]
    idx++;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	3301      	adds	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	4413      	add	r3, r2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	3301      	adds	r3, #1
 8007f22:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e7      	bne.n	8007efc <USBD_GetString+0x52>
 8007f2c:	e000      	b.n	8007f30 <USBD_GetString+0x86>
    return;
 8007f2e:	bf00      	nop
  }
}
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b085      	sub	sp, #20
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f46:	e005      	b.n	8007f54 <USBD_GetLen+0x1e>
  {
    len++;
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	3301      	adds	r3, #1
 8007f52:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1f5      	bne.n	8007f48 <USBD_GetLen+0x12>
  }

  return len;
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	2100      	movs	r1, #0
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fd10 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 fcff 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	2100      	movs	r1, #0
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 fd03 	bl	80089f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	2100      	movs	r1, #0
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 fcf2 	bl	80089f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2204      	movs	r2, #4
 800802a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800802e:	2300      	movs	r3, #0
 8008030:	2200      	movs	r2, #0
 8008032:	2100      	movs	r1, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fcbe 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2205      	movs	r2, #5
 8008050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008054:	2300      	movs	r3, #0
 8008056:	2200      	movs	r2, #0
 8008058:	2100      	movs	r1, #0
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fccc 	bl	80089f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008070:	2200      	movs	r2, #0
 8008072:	4912      	ldr	r1, [pc, #72]	; (80080bc <MX_USB_DEVICE_Init+0x50>)
 8008074:	4812      	ldr	r0, [pc, #72]	; (80080c0 <MX_USB_DEVICE_Init+0x54>)
 8008076:	f7fe fef3 	bl	8006e60 <USBD_Init>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008080:	f7f9 fca2 	bl	80019c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008084:	490f      	ldr	r1, [pc, #60]	; (80080c4 <MX_USB_DEVICE_Init+0x58>)
 8008086:	480e      	ldr	r0, [pc, #56]	; (80080c0 <MX_USB_DEVICE_Init+0x54>)
 8008088:	f7fe ff20 	bl	8006ecc <USBD_RegisterClass>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008092:	f7f9 fc99 	bl	80019c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008096:	490c      	ldr	r1, [pc, #48]	; (80080c8 <MX_USB_DEVICE_Init+0x5c>)
 8008098:	4809      	ldr	r0, [pc, #36]	; (80080c0 <MX_USB_DEVICE_Init+0x54>)
 800809a:	f7fe fe45 	bl	8006d28 <USBD_CDC_RegisterInterface>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080a4:	f7f9 fc90 	bl	80019c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080a8:	4805      	ldr	r0, [pc, #20]	; (80080c0 <MX_USB_DEVICE_Init+0x54>)
 80080aa:	f7fe ff30 	bl	8006f0e <USBD_Start>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080b4:	f7f9 fc88 	bl	80019c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080b8:	bf00      	nop
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20000138 	.word	0x20000138
 80080c0:	200005f8 	.word	0x200005f8
 80080c4:	20000018 	.word	0x20000018
 80080c8:	2000011c 	.word	0x2000011c

080080cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080d0:	2200      	movs	r2, #0
 80080d2:	4905      	ldr	r1, [pc, #20]	; (80080e8 <CDC_Init_FS+0x1c>)
 80080d4:	4805      	ldr	r0, [pc, #20]	; (80080ec <CDC_Init_FS+0x20>)
 80080d6:	f7fe fe3c 	bl	8006d52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080da:	4905      	ldr	r1, [pc, #20]	; (80080f0 <CDC_Init_FS+0x24>)
 80080dc:	4803      	ldr	r0, [pc, #12]	; (80080ec <CDC_Init_FS+0x20>)
 80080de:	f7fe fe51 	bl	8006d84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	2000092c 	.word	0x2000092c
 80080ec:	200005f8 	.word	0x200005f8
 80080f0:	200008c8 	.word	0x200008c8

080080f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
 8008110:	4613      	mov	r3, r2
 8008112:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint8_t lineCoding[7] = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 }; // 115200bps, 1stop, no parity, 8bit

  switch(cmd)
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	2b23      	cmp	r3, #35	; 0x23
 8008118:	d85c      	bhi.n	80081d4 <CDC_Control_FS+0xd0>
 800811a:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <CDC_Control_FS+0x1c>)
 800811c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008120:	080081d5 	.word	0x080081d5
 8008124:	080081d5 	.word	0x080081d5
 8008128:	080081d5 	.word	0x080081d5
 800812c:	080081d5 	.word	0x080081d5
 8008130:	080081d5 	.word	0x080081d5
 8008134:	080081d5 	.word	0x080081d5
 8008138:	080081d5 	.word	0x080081d5
 800813c:	080081d5 	.word	0x080081d5
 8008140:	080081d5 	.word	0x080081d5
 8008144:	080081d5 	.word	0x080081d5
 8008148:	080081d5 	.word	0x080081d5
 800814c:	080081d5 	.word	0x080081d5
 8008150:	080081d5 	.word	0x080081d5
 8008154:	080081d5 	.word	0x080081d5
 8008158:	080081d5 	.word	0x080081d5
 800815c:	080081d5 	.word	0x080081d5
 8008160:	080081d5 	.word	0x080081d5
 8008164:	080081d5 	.word	0x080081d5
 8008168:	080081d5 	.word	0x080081d5
 800816c:	080081d5 	.word	0x080081d5
 8008170:	080081d5 	.word	0x080081d5
 8008174:	080081d5 	.word	0x080081d5
 8008178:	080081d5 	.word	0x080081d5
 800817c:	080081d5 	.word	0x080081d5
 8008180:	080081d5 	.word	0x080081d5
 8008184:	080081d5 	.word	0x080081d5
 8008188:	080081d5 	.word	0x080081d5
 800818c:	080081d5 	.word	0x080081d5
 8008190:	080081d5 	.word	0x080081d5
 8008194:	080081d5 	.word	0x080081d5
 8008198:	080081d5 	.word	0x080081d5
 800819c:	080081d5 	.word	0x080081d5
 80081a0:	080081b1 	.word	0x080081b1
 80081a4:	080081c3 	.word	0x080081c3
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	080081d5 	.word	0x080081d5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80081b0:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <CDC_Control_FS+0xe0>)
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	6810      	ldr	r0, [r2, #0]
 80081b6:	6018      	str	r0, [r3, #0]
 80081b8:	8891      	ldrh	r1, [r2, #4]
 80081ba:	7992      	ldrb	r2, [r2, #6]
 80081bc:	8099      	strh	r1, [r3, #4]
 80081be:	719a      	strb	r2, [r3, #6]
    break;
 80081c0:	e009      	b.n	80081d6 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	4a07      	ldr	r2, [pc, #28]	; (80081e4 <CDC_Control_FS+0xe0>)
 80081c6:	6810      	ldr	r0, [r2, #0]
 80081c8:	6018      	str	r0, [r3, #0]
 80081ca:	8891      	ldrh	r1, [r2, #4]
 80081cc:	7992      	ldrb	r2, [r2, #6]
 80081ce:	8099      	strh	r1, [r3, #4]
 80081d0:	719a      	strb	r2, [r3, #6]
    break;
 80081d2:	e000      	b.n	80081d6 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081d4:	bf00      	nop
  }

  return (USBD_OK);
 80081d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	20000130 	.word	0x20000130

080081e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	4811      	ldr	r0, [pc, #68]	; (800823c <CDC_Receive_FS+0x54>)
 80081f6:	f7fe fdc5 	bl	8006d84 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081fa:	4810      	ldr	r0, [pc, #64]	; (800823c <CDC_Receive_FS+0x54>)
 80081fc:	f7fe fe06 	bl	8006e0c <USBD_CDC_ReceivePacket>
	  extern uint8_t ReceivedData[100]; // Tablica przechowujaca odebrane dane
	  extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

	  // Wyczyszczenie tablicy odebranych danych
	  uint8_t iter;
	  for(iter = 0; iter<100; ++iter){
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
 8008204:	e006      	b.n	8008214 <CDC_Receive_FS+0x2c>
		  ReceivedData[iter] = 0;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	4a0d      	ldr	r2, [pc, #52]	; (8008240 <CDC_Receive_FS+0x58>)
 800820a:	2100      	movs	r1, #0
 800820c:	54d1      	strb	r1, [r2, r3]
	  for(iter = 0; iter<100; ++iter){
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	3301      	adds	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	2b63      	cmp	r3, #99	; 0x63
 8008218:	d9f5      	bls.n	8008206 <CDC_Receive_FS+0x1e>
	  }

	  strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3301      	adds	r3, #1
 8008220:	461a      	mov	r2, r3
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	4806      	ldr	r0, [pc, #24]	; (8008240 <CDC_Receive_FS+0x58>)
 8008226:	f001 fc90 	bl	8009b4a <strlcpy>
	  ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <CDC_Receive_FS+0x5c>)
 800822c:	2201      	movs	r2, #1
 800822e:	701a      	strb	r2, [r3, #0]

	  return (USBD_OK);
 8008230:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200005f8 	.word	0x200005f8
 8008240:	20000468 	.word	0x20000468
 8008244:	2000037c 	.word	0x2000037c

08008248 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008258:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <CDC_Transmit_FS+0x48>)
 800825a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800825e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800826a:	2301      	movs	r3, #1
 800826c:	e00b      	b.n	8008286 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800826e:	887b      	ldrh	r3, [r7, #2]
 8008270:	461a      	mov	r2, r3
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4806      	ldr	r0, [pc, #24]	; (8008290 <CDC_Transmit_FS+0x48>)
 8008276:	f7fe fd6c 	bl	8006d52 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800827a:	4805      	ldr	r0, [pc, #20]	; (8008290 <CDC_Transmit_FS+0x48>)
 800827c:	f7fe fd96 	bl	8006dac <USBD_CDC_TransmitPacket>
 8008280:	4603      	mov	r3, r0
 8008282:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008284:	7bfb      	ldrb	r3, [r7, #15]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	200005f8 	.word	0x200005f8

08008294 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	4613      	mov	r3, r2
 80082a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80082a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
	...

080082b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2212      	movs	r2, #18
 80082c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082ca:	4b03      	ldr	r3, [pc, #12]	; (80082d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20000154 	.word	0x20000154

080082dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	6039      	str	r1, [r7, #0]
 80082e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2204      	movs	r2, #4
 80082ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082ee:	4b03      	ldr	r3, [pc, #12]	; (80082fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20000168 	.word	0x20000168

08008300 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d105      	bne.n	800831e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	4907      	ldr	r1, [pc, #28]	; (8008334 <USBD_FS_ProductStrDescriptor+0x34>)
 8008316:	4808      	ldr	r0, [pc, #32]	; (8008338 <USBD_FS_ProductStrDescriptor+0x38>)
 8008318:	f7ff fdc7 	bl	8007eaa <USBD_GetString>
 800831c:	e004      	b.n	8008328 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	4904      	ldr	r1, [pc, #16]	; (8008334 <USBD_FS_ProductStrDescriptor+0x34>)
 8008322:	4805      	ldr	r0, [pc, #20]	; (8008338 <USBD_FS_ProductStrDescriptor+0x38>)
 8008324:	f7ff fdc1 	bl	8007eaa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008328:	4b02      	ldr	r3, [pc, #8]	; (8008334 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20000990 	.word	0x20000990
 8008338:	08010448 	.word	0x08010448

0800833c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	6039      	str	r1, [r7, #0]
 8008346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	4904      	ldr	r1, [pc, #16]	; (800835c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800834c:	4804      	ldr	r0, [pc, #16]	; (8008360 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800834e:	f7ff fdac 	bl	8007eaa <USBD_GetString>
  return USBD_StrDesc;
 8008352:	4b02      	ldr	r3, [pc, #8]	; (800835c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	20000990 	.word	0x20000990
 8008360:	08010460 	.word	0x08010460

08008364 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	6039      	str	r1, [r7, #0]
 800836e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	221a      	movs	r2, #26
 8008374:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008376:	f000 f843 	bl	8008400 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800837a:	4b02      	ldr	r3, [pc, #8]	; (8008384 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	2000016c 	.word	0x2000016c

08008388 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	4603      	mov	r3, r0
 8008390:	6039      	str	r1, [r7, #0]
 8008392:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d105      	bne.n	80083a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	4907      	ldr	r1, [pc, #28]	; (80083bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800839e:	4808      	ldr	r0, [pc, #32]	; (80083c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083a0:	f7ff fd83 	bl	8007eaa <USBD_GetString>
 80083a4:	e004      	b.n	80083b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	4904      	ldr	r1, [pc, #16]	; (80083bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80083aa:	4805      	ldr	r0, [pc, #20]	; (80083c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083ac:	f7ff fd7d 	bl	8007eaa <USBD_GetString>
  }
  return USBD_StrDesc;
 80083b0:	4b02      	ldr	r3, [pc, #8]	; (80083bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20000990 	.word	0x20000990
 80083c0:	08010474 	.word	0x08010474

080083c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d105      	bne.n	80083e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	4907      	ldr	r1, [pc, #28]	; (80083f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083da:	4808      	ldr	r0, [pc, #32]	; (80083fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083dc:	f7ff fd65 	bl	8007eaa <USBD_GetString>
 80083e0:	e004      	b.n	80083ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	4904      	ldr	r1, [pc, #16]	; (80083f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083e6:	4805      	ldr	r0, [pc, #20]	; (80083fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083e8:	f7ff fd5f 	bl	8007eaa <USBD_GetString>
  }
  return USBD_StrDesc;
 80083ec:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000990 	.word	0x20000990
 80083fc:	08010480 	.word	0x08010480

08008400 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008406:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <Get_SerialNum+0x44>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800840c:	4b0e      	ldr	r3, [pc, #56]	; (8008448 <Get_SerialNum+0x48>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008412:	4b0e      	ldr	r3, [pc, #56]	; (800844c <Get_SerialNum+0x4c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d009      	beq.n	800843a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008426:	2208      	movs	r2, #8
 8008428:	4909      	ldr	r1, [pc, #36]	; (8008450 <Get_SerialNum+0x50>)
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 f814 	bl	8008458 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008430:	2204      	movs	r2, #4
 8008432:	4908      	ldr	r1, [pc, #32]	; (8008454 <Get_SerialNum+0x54>)
 8008434:	68b8      	ldr	r0, [r7, #8]
 8008436:	f000 f80f 	bl	8008458 <IntToUnicode>
  }
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	1fff7a10 	.word	0x1fff7a10
 8008448:	1fff7a14 	.word	0x1fff7a14
 800844c:	1fff7a18 	.word	0x1fff7a18
 8008450:	2000016e 	.word	0x2000016e
 8008454:	2000017e 	.word	0x2000017e

08008458 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800846a:	2300      	movs	r3, #0
 800846c:	75fb      	strb	r3, [r7, #23]
 800846e:	e027      	b.n	80084c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	0f1b      	lsrs	r3, r3, #28
 8008474:	2b09      	cmp	r3, #9
 8008476:	d80b      	bhi.n	8008490 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	0f1b      	lsrs	r3, r3, #28
 800847c:	b2da      	uxtb	r2, r3
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	4619      	mov	r1, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	440b      	add	r3, r1
 8008488:	3230      	adds	r2, #48	; 0x30
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]
 800848e:	e00a      	b.n	80084a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	0f1b      	lsrs	r3, r3, #28
 8008494:	b2da      	uxtb	r2, r3
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	4619      	mov	r1, r3
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	440b      	add	r3, r1
 80084a0:	3237      	adds	r2, #55	; 0x37
 80084a2:	b2d2      	uxtb	r2, r2
 80084a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	011b      	lsls	r3, r3, #4
 80084aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	3301      	adds	r3, #1
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	4413      	add	r3, r2
 80084b6:	2200      	movs	r2, #0
 80084b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	3301      	adds	r3, #1
 80084be:	75fb      	strb	r3, [r7, #23]
 80084c0:	7dfa      	ldrb	r2, [r7, #23]
 80084c2:	79fb      	ldrb	r3, [r7, #7]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d3d3      	bcc.n	8008470 <IntToUnicode+0x18>
  }
}
 80084c8:	bf00      	nop
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08a      	sub	sp, #40	; 0x28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084dc:	f107 0314 	add.w	r3, r7, #20
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	609a      	str	r2, [r3, #8]
 80084e8:	60da      	str	r2, [r3, #12]
 80084ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084f4:	d13a      	bne.n	800856c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084f6:	2300      	movs	r3, #0
 80084f8:	613b      	str	r3, [r7, #16]
 80084fa:	4b1e      	ldr	r3, [pc, #120]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 8008500:	f043 0301 	orr.w	r3, r3, #1
 8008504:	6313      	str	r3, [r2, #48]	; 0x30
 8008506:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 8008508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	613b      	str	r3, [r7, #16]
 8008510:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008512:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008518:	2302      	movs	r3, #2
 800851a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800851c:	2300      	movs	r3, #0
 800851e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008520:	2303      	movs	r3, #3
 8008522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008524:	230a      	movs	r3, #10
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008528:	f107 0314 	add.w	r3, r7, #20
 800852c:	4619      	mov	r1, r3
 800852e:	4812      	ldr	r0, [pc, #72]	; (8008578 <HAL_PCD_MspInit+0xa4>)
 8008530:	f7f9 ffee 	bl	8002510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008534:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 8008536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008538:	4a0e      	ldr	r2, [pc, #56]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 800853a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853e:	6353      	str	r3, [r2, #52]	; 0x34
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 8008546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008548:	4a0a      	ldr	r2, [pc, #40]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 800854a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800854e:	6453      	str	r3, [r2, #68]	; 0x44
 8008550:	4b08      	ldr	r3, [pc, #32]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 8008552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800855c:	2200      	movs	r2, #0
 800855e:	2100      	movs	r1, #0
 8008560:	2043      	movs	r0, #67	; 0x43
 8008562:	f7f9 ff9e 	bl	80024a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008566:	2043      	movs	r0, #67	; 0x43
 8008568:	f7f9 ffb7 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800856c:	bf00      	nop
 800856e:	3728      	adds	r7, #40	; 0x28
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40023800 	.word	0x40023800
 8008578:	40020000 	.word	0x40020000

0800857c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe fd06 	bl	8006fa4 <USBD_LL_SetupStage>
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80085b2:	78fa      	ldrb	r2, [r7, #3]
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	1a9b      	subs	r3, r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	440b      	add	r3, r1
 80085c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	4619      	mov	r1, r3
 80085ca:	f7fe fd3e 	bl	800704a <USBD_LL_DataOutStage>
}
 80085ce:	bf00      	nop
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	3348      	adds	r3, #72	; 0x48
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	4619      	mov	r1, r3
 80085fe:	f7fe fd87 	bl	8007110 <USBD_LL_DataInStage>
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fe8b 	bl	8007334 <USBD_LL_SOF>
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800862e:	2301      	movs	r3, #1
 8008630:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d001      	beq.n	800863e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800863a:	f7f9 f9c5 	bl	80019c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008644:	7bfa      	ldrb	r2, [r7, #15]
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe fe38 	bl	80072be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fdf1 	bl	800723c <USBD_LL_Reset>
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fe33 	bl	80072de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008698:	4b04      	ldr	r3, [pc, #16]	; (80086ac <HAL_PCD_SuspendCallback+0x48>)
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	4a03      	ldr	r2, [pc, #12]	; (80086ac <HAL_PCD_SuspendCallback+0x48>)
 800869e:	f043 0306 	orr.w	r3, r3, #6
 80086a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	e000ed00 	.word	0xe000ed00

080086b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fe22 	bl	8007308 <USBD_LL_Resume>
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fe4d 	bl	8007382 <USBD_LL_IsoOUTIncomplete>
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fe2e 	bl	8007368 <USBD_LL_IsoINIncomplete>
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fe3a 	bl	800739c <USBD_LL_DevConnected>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fe37 	bl	80073b2 <USBD_LL_DevDisconnected>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d13c      	bne.n	80087d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800875c:	4a20      	ldr	r2, [pc, #128]	; (80087e0 <USBD_LL_Init+0x94>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a1e      	ldr	r2, [pc, #120]	; (80087e0 <USBD_LL_Init+0x94>)
 8008768:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800876c:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <USBD_LL_Init+0x94>)
 800876e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008772:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008774:	4b1a      	ldr	r3, [pc, #104]	; (80087e0 <USBD_LL_Init+0x94>)
 8008776:	2204      	movs	r2, #4
 8008778:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800877a:	4b19      	ldr	r3, [pc, #100]	; (80087e0 <USBD_LL_Init+0x94>)
 800877c:	2202      	movs	r2, #2
 800877e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008780:	4b17      	ldr	r3, [pc, #92]	; (80087e0 <USBD_LL_Init+0x94>)
 8008782:	2200      	movs	r2, #0
 8008784:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008786:	4b16      	ldr	r3, [pc, #88]	; (80087e0 <USBD_LL_Init+0x94>)
 8008788:	2202      	movs	r2, #2
 800878a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800878c:	4b14      	ldr	r3, [pc, #80]	; (80087e0 <USBD_LL_Init+0x94>)
 800878e:	2200      	movs	r2, #0
 8008790:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008792:	4b13      	ldr	r3, [pc, #76]	; (80087e0 <USBD_LL_Init+0x94>)
 8008794:	2200      	movs	r2, #0
 8008796:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008798:	4b11      	ldr	r3, [pc, #68]	; (80087e0 <USBD_LL_Init+0x94>)
 800879a:	2200      	movs	r2, #0
 800879c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800879e:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <USBD_LL_Init+0x94>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087a4:	4b0e      	ldr	r3, [pc, #56]	; (80087e0 <USBD_LL_Init+0x94>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087aa:	480d      	ldr	r0, [pc, #52]	; (80087e0 <USBD_LL_Init+0x94>)
 80087ac:	f7fa f84b 	bl	8002846 <HAL_PCD_Init>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80087b6:	f7f9 f907 	bl	80019c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087ba:	2180      	movs	r1, #128	; 0x80
 80087bc:	4808      	ldr	r0, [pc, #32]	; (80087e0 <USBD_LL_Init+0x94>)
 80087be:	f7fb f9a8 	bl	8003b12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087c2:	2240      	movs	r2, #64	; 0x40
 80087c4:	2100      	movs	r1, #0
 80087c6:	4806      	ldr	r0, [pc, #24]	; (80087e0 <USBD_LL_Init+0x94>)
 80087c8:	f7fb f95c 	bl	8003a84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087cc:	2280      	movs	r2, #128	; 0x80
 80087ce:	2101      	movs	r1, #1
 80087d0:	4803      	ldr	r0, [pc, #12]	; (80087e0 <USBD_LL_Init+0x94>)
 80087d2:	f7fb f957 	bl	8003a84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20000b90 	.word	0x20000b90

080087e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fa f940 	bl	8002a80 <HAL_PCD_Start>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f92a 	bl	8008a60 <USBD_Get_USB_Status>
 800880c:	4603      	mov	r3, r0
 800880e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008810:	7bbb      	ldrb	r3, [r7, #14]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	4608      	mov	r0, r1
 8008824:	4611      	mov	r1, r2
 8008826:	461a      	mov	r2, r3
 8008828:	4603      	mov	r3, r0
 800882a:	70fb      	strb	r3, [r7, #3]
 800882c:	460b      	mov	r3, r1
 800882e:	70bb      	strb	r3, [r7, #2]
 8008830:	4613      	mov	r3, r2
 8008832:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008842:	78bb      	ldrb	r3, [r7, #2]
 8008844:	883a      	ldrh	r2, [r7, #0]
 8008846:	78f9      	ldrb	r1, [r7, #3]
 8008848:	f7fa fd24 	bl	8003294 <HAL_PCD_EP_Open>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f904 	bl	8008a60 <USBD_Get_USB_Status>
 8008858:	4603      	mov	r3, r0
 800885a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800885c:	7bbb      	ldrb	r3, [r7, #14]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7fa fd6d 	bl	8003364 <HAL_PCD_EP_Close>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f8e5 	bl	8008a60 <USBD_Get_USB_Status>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800889a:	7bbb      	ldrb	r3, [r7, #14]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fa fe45 	bl	8003552 <HAL_PCD_EP_SetStall>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f8c6 	bl	8008a60 <USBD_Get_USB_Status>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7fa fe8a 	bl	800361a <HAL_PCD_EP_ClrStall>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f8a7 	bl	8008a60 <USBD_Get_USB_Status>
 8008912:	4603      	mov	r3, r0
 8008914:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8008916:	7bbb      	ldrb	r3, [r7, #14]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008932:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008938:	2b00      	cmp	r3, #0
 800893a:	da0b      	bge.n	8008954 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	4613      	mov	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	1a9b      	subs	r3, r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	333e      	adds	r3, #62	; 0x3e
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	e00b      	b.n	800896c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800895a:	68f9      	ldr	r1, [r7, #12]
 800895c:	4613      	mov	r3, r2
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	1a9b      	subs	r3, r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800896a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008992:	78fa      	ldrb	r2, [r7, #3]
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f7fa fc57 	bl	800324a <HAL_PCD_SetAddress>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f85c 	bl	8008a60 <USBD_Get_USB_Status>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b086      	sub	sp, #24
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
 80089c2:	460b      	mov	r3, r1
 80089c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089d4:	7af9      	ldrb	r1, [r7, #11]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	f7fa fd70 	bl	80034be <HAL_PCD_EP_Transmit>
 80089de:	4603      	mov	r3, r0
 80089e0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 f83b 	bl	8008a60 <USBD_Get_USB_Status>
 80089ea:	4603      	mov	r3, r0
 80089ec:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80089ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	607a      	str	r2, [r7, #4]
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	460b      	mov	r3, r1
 8008a06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a16:	7af9      	ldrb	r1, [r7, #11]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	f7fa fcec 	bl	80033f8 <HAL_PCD_EP_Receive>
 8008a20:	4603      	mov	r3, r0
 8008a22:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 f81a 	bl	8008a60 <USBD_Get_USB_Status>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008a30:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	4611      	mov	r1, r2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fa fd1c 	bl	800348e <HAL_PCD_EP_GetRxCount>
 8008a56:	4603      	mov	r3, r0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d817      	bhi.n	8008aa4 <USBD_Get_USB_Status+0x44>
 8008a74:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <USBD_Get_USB_Status+0x1c>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a93 	.word	0x08008a93
 8008a84:	08008a99 	.word	0x08008a99
 8008a88:	08008a9f 	.word	0x08008a9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a90:	e00b      	b.n	8008aaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a92:	2303      	movs	r3, #3
 8008a94:	73fb      	strb	r3, [r7, #15]
    break;
 8008a96:	e008      	b.n	8008aaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a9c:	e005      	b.n	8008aaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa2:	e002      	b.n	8008aaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa8:	bf00      	nop
  }
  return usb_status;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <__errno>:
 8008ab8:	4b01      	ldr	r3, [pc, #4]	; (8008ac0 <__errno+0x8>)
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	20000188 	.word	0x20000188

08008ac4 <__libc_init_array>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	4e0d      	ldr	r6, [pc, #52]	; (8008afc <__libc_init_array+0x38>)
 8008ac8:	4c0d      	ldr	r4, [pc, #52]	; (8008b00 <__libc_init_array+0x3c>)
 8008aca:	1ba4      	subs	r4, r4, r6
 8008acc:	10a4      	asrs	r4, r4, #2
 8008ace:	2500      	movs	r5, #0
 8008ad0:	42a5      	cmp	r5, r4
 8008ad2:	d109      	bne.n	8008ae8 <__libc_init_array+0x24>
 8008ad4:	4e0b      	ldr	r6, [pc, #44]	; (8008b04 <__libc_init_array+0x40>)
 8008ad6:	4c0c      	ldr	r4, [pc, #48]	; (8008b08 <__libc_init_array+0x44>)
 8008ad8:	f007 fc60 	bl	801039c <_init>
 8008adc:	1ba4      	subs	r4, r4, r6
 8008ade:	10a4      	asrs	r4, r4, #2
 8008ae0:	2500      	movs	r5, #0
 8008ae2:	42a5      	cmp	r5, r4
 8008ae4:	d105      	bne.n	8008af2 <__libc_init_array+0x2e>
 8008ae6:	bd70      	pop	{r4, r5, r6, pc}
 8008ae8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aec:	4798      	blx	r3
 8008aee:	3501      	adds	r5, #1
 8008af0:	e7ee      	b.n	8008ad0 <__libc_init_array+0xc>
 8008af2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008af6:	4798      	blx	r3
 8008af8:	3501      	adds	r5, #1
 8008afa:	e7f2      	b.n	8008ae2 <__libc_init_array+0x1e>
 8008afc:	08010a50 	.word	0x08010a50
 8008b00:	08010a50 	.word	0x08010a50
 8008b04:	08010a50 	.word	0x08010a50
 8008b08:	08010a54 	.word	0x08010a54

08008b0c <malloc>:
 8008b0c:	4b02      	ldr	r3, [pc, #8]	; (8008b18 <malloc+0xc>)
 8008b0e:	4601      	mov	r1, r0
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	f000 b861 	b.w	8008bd8 <_malloc_r>
 8008b16:	bf00      	nop
 8008b18:	20000188 	.word	0x20000188

08008b1c <free>:
 8008b1c:	4b02      	ldr	r3, [pc, #8]	; (8008b28 <free+0xc>)
 8008b1e:	4601      	mov	r1, r0
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	f000 b80b 	b.w	8008b3c <_free_r>
 8008b26:	bf00      	nop
 8008b28:	20000188 	.word	0x20000188

08008b2c <memset>:
 8008b2c:	4402      	add	r2, r0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d100      	bne.n	8008b36 <memset+0xa>
 8008b34:	4770      	bx	lr
 8008b36:	f803 1b01 	strb.w	r1, [r3], #1
 8008b3a:	e7f9      	b.n	8008b30 <memset+0x4>

08008b3c <_free_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4605      	mov	r5, r0
 8008b40:	2900      	cmp	r1, #0
 8008b42:	d045      	beq.n	8008bd0 <_free_r+0x94>
 8008b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b48:	1f0c      	subs	r4, r1, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	bfb8      	it	lt
 8008b4e:	18e4      	addlt	r4, r4, r3
 8008b50:	f003 fb3b 	bl	800c1ca <__malloc_lock>
 8008b54:	4a1f      	ldr	r2, [pc, #124]	; (8008bd4 <_free_r+0x98>)
 8008b56:	6813      	ldr	r3, [r2, #0]
 8008b58:	4610      	mov	r0, r2
 8008b5a:	b933      	cbnz	r3, 8008b6a <_free_r+0x2e>
 8008b5c:	6063      	str	r3, [r4, #4]
 8008b5e:	6014      	str	r4, [r2, #0]
 8008b60:	4628      	mov	r0, r5
 8008b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b66:	f003 bb31 	b.w	800c1cc <__malloc_unlock>
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	d90c      	bls.n	8008b88 <_free_r+0x4c>
 8008b6e:	6821      	ldr	r1, [r4, #0]
 8008b70:	1862      	adds	r2, r4, r1
 8008b72:	4293      	cmp	r3, r2
 8008b74:	bf04      	itt	eq
 8008b76:	681a      	ldreq	r2, [r3, #0]
 8008b78:	685b      	ldreq	r3, [r3, #4]
 8008b7a:	6063      	str	r3, [r4, #4]
 8008b7c:	bf04      	itt	eq
 8008b7e:	1852      	addeq	r2, r2, r1
 8008b80:	6022      	streq	r2, [r4, #0]
 8008b82:	6004      	str	r4, [r0, #0]
 8008b84:	e7ec      	b.n	8008b60 <_free_r+0x24>
 8008b86:	4613      	mov	r3, r2
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	b10a      	cbz	r2, 8008b90 <_free_r+0x54>
 8008b8c:	42a2      	cmp	r2, r4
 8008b8e:	d9fa      	bls.n	8008b86 <_free_r+0x4a>
 8008b90:	6819      	ldr	r1, [r3, #0]
 8008b92:	1858      	adds	r0, r3, r1
 8008b94:	42a0      	cmp	r0, r4
 8008b96:	d10b      	bne.n	8008bb0 <_free_r+0x74>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	4401      	add	r1, r0
 8008b9c:	1858      	adds	r0, r3, r1
 8008b9e:	4282      	cmp	r2, r0
 8008ba0:	6019      	str	r1, [r3, #0]
 8008ba2:	d1dd      	bne.n	8008b60 <_free_r+0x24>
 8008ba4:	6810      	ldr	r0, [r2, #0]
 8008ba6:	6852      	ldr	r2, [r2, #4]
 8008ba8:	605a      	str	r2, [r3, #4]
 8008baa:	4401      	add	r1, r0
 8008bac:	6019      	str	r1, [r3, #0]
 8008bae:	e7d7      	b.n	8008b60 <_free_r+0x24>
 8008bb0:	d902      	bls.n	8008bb8 <_free_r+0x7c>
 8008bb2:	230c      	movs	r3, #12
 8008bb4:	602b      	str	r3, [r5, #0]
 8008bb6:	e7d3      	b.n	8008b60 <_free_r+0x24>
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	1821      	adds	r1, r4, r0
 8008bbc:	428a      	cmp	r2, r1
 8008bbe:	bf04      	itt	eq
 8008bc0:	6811      	ldreq	r1, [r2, #0]
 8008bc2:	6852      	ldreq	r2, [r2, #4]
 8008bc4:	6062      	str	r2, [r4, #4]
 8008bc6:	bf04      	itt	eq
 8008bc8:	1809      	addeq	r1, r1, r0
 8008bca:	6021      	streq	r1, [r4, #0]
 8008bcc:	605c      	str	r4, [r3, #4]
 8008bce:	e7c7      	b.n	8008b60 <_free_r+0x24>
 8008bd0:	bd38      	pop	{r3, r4, r5, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000388 	.word	0x20000388

08008bd8 <_malloc_r>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	1ccd      	adds	r5, r1, #3
 8008bdc:	f025 0503 	bic.w	r5, r5, #3
 8008be0:	3508      	adds	r5, #8
 8008be2:	2d0c      	cmp	r5, #12
 8008be4:	bf38      	it	cc
 8008be6:	250c      	movcc	r5, #12
 8008be8:	2d00      	cmp	r5, #0
 8008bea:	4606      	mov	r6, r0
 8008bec:	db01      	blt.n	8008bf2 <_malloc_r+0x1a>
 8008bee:	42a9      	cmp	r1, r5
 8008bf0:	d903      	bls.n	8008bfa <_malloc_r+0x22>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	6033      	str	r3, [r6, #0]
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	bd70      	pop	{r4, r5, r6, pc}
 8008bfa:	f003 fae6 	bl	800c1ca <__malloc_lock>
 8008bfe:	4a21      	ldr	r2, [pc, #132]	; (8008c84 <_malloc_r+0xac>)
 8008c00:	6814      	ldr	r4, [r2, #0]
 8008c02:	4621      	mov	r1, r4
 8008c04:	b991      	cbnz	r1, 8008c2c <_malloc_r+0x54>
 8008c06:	4c20      	ldr	r4, [pc, #128]	; (8008c88 <_malloc_r+0xb0>)
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	b91b      	cbnz	r3, 8008c14 <_malloc_r+0x3c>
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f000 fef7 	bl	8009a00 <_sbrk_r>
 8008c12:	6020      	str	r0, [r4, #0]
 8008c14:	4629      	mov	r1, r5
 8008c16:	4630      	mov	r0, r6
 8008c18:	f000 fef2 	bl	8009a00 <_sbrk_r>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d124      	bne.n	8008c6a <_malloc_r+0x92>
 8008c20:	230c      	movs	r3, #12
 8008c22:	6033      	str	r3, [r6, #0]
 8008c24:	4630      	mov	r0, r6
 8008c26:	f003 fad1 	bl	800c1cc <__malloc_unlock>
 8008c2a:	e7e4      	b.n	8008bf6 <_malloc_r+0x1e>
 8008c2c:	680b      	ldr	r3, [r1, #0]
 8008c2e:	1b5b      	subs	r3, r3, r5
 8008c30:	d418      	bmi.n	8008c64 <_malloc_r+0x8c>
 8008c32:	2b0b      	cmp	r3, #11
 8008c34:	d90f      	bls.n	8008c56 <_malloc_r+0x7e>
 8008c36:	600b      	str	r3, [r1, #0]
 8008c38:	50cd      	str	r5, [r1, r3]
 8008c3a:	18cc      	adds	r4, r1, r3
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f003 fac5 	bl	800c1cc <__malloc_unlock>
 8008c42:	f104 000b 	add.w	r0, r4, #11
 8008c46:	1d23      	adds	r3, r4, #4
 8008c48:	f020 0007 	bic.w	r0, r0, #7
 8008c4c:	1ac3      	subs	r3, r0, r3
 8008c4e:	d0d3      	beq.n	8008bf8 <_malloc_r+0x20>
 8008c50:	425a      	negs	r2, r3
 8008c52:	50e2      	str	r2, [r4, r3]
 8008c54:	e7d0      	b.n	8008bf8 <_malloc_r+0x20>
 8008c56:	428c      	cmp	r4, r1
 8008c58:	684b      	ldr	r3, [r1, #4]
 8008c5a:	bf16      	itet	ne
 8008c5c:	6063      	strne	r3, [r4, #4]
 8008c5e:	6013      	streq	r3, [r2, #0]
 8008c60:	460c      	movne	r4, r1
 8008c62:	e7eb      	b.n	8008c3c <_malloc_r+0x64>
 8008c64:	460c      	mov	r4, r1
 8008c66:	6849      	ldr	r1, [r1, #4]
 8008c68:	e7cc      	b.n	8008c04 <_malloc_r+0x2c>
 8008c6a:	1cc4      	adds	r4, r0, #3
 8008c6c:	f024 0403 	bic.w	r4, r4, #3
 8008c70:	42a0      	cmp	r0, r4
 8008c72:	d005      	beq.n	8008c80 <_malloc_r+0xa8>
 8008c74:	1a21      	subs	r1, r4, r0
 8008c76:	4630      	mov	r0, r6
 8008c78:	f000 fec2 	bl	8009a00 <_sbrk_r>
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d0cf      	beq.n	8008c20 <_malloc_r+0x48>
 8008c80:	6025      	str	r5, [r4, #0]
 8008c82:	e7db      	b.n	8008c3c <_malloc_r+0x64>
 8008c84:	20000388 	.word	0x20000388
 8008c88:	2000038c 	.word	0x2000038c

08008c8c <__cvt>:
 8008c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c90:	ec55 4b10 	vmov	r4, r5, d0
 8008c94:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008c96:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c9a:	2d00      	cmp	r5, #0
 8008c9c:	460e      	mov	r6, r1
 8008c9e:	4691      	mov	r9, r2
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	bfb8      	it	lt
 8008ca4:	4622      	movlt	r2, r4
 8008ca6:	462b      	mov	r3, r5
 8008ca8:	f027 0720 	bic.w	r7, r7, #32
 8008cac:	bfbb      	ittet	lt
 8008cae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008cb2:	461d      	movlt	r5, r3
 8008cb4:	2300      	movge	r3, #0
 8008cb6:	232d      	movlt	r3, #45	; 0x2d
 8008cb8:	bfb8      	it	lt
 8008cba:	4614      	movlt	r4, r2
 8008cbc:	2f46      	cmp	r7, #70	; 0x46
 8008cbe:	700b      	strb	r3, [r1, #0]
 8008cc0:	d004      	beq.n	8008ccc <__cvt+0x40>
 8008cc2:	2f45      	cmp	r7, #69	; 0x45
 8008cc4:	d100      	bne.n	8008cc8 <__cvt+0x3c>
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	2102      	movs	r1, #2
 8008cca:	e000      	b.n	8008cce <__cvt+0x42>
 8008ccc:	2103      	movs	r1, #3
 8008cce:	ab03      	add	r3, sp, #12
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	ab02      	add	r3, sp, #8
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	4632      	mov	r2, r6
 8008cd8:	4653      	mov	r3, sl
 8008cda:	ec45 4b10 	vmov	d0, r4, r5
 8008cde:	f001 ff67 	bl	800abb0 <_dtoa_r>
 8008ce2:	2f47      	cmp	r7, #71	; 0x47
 8008ce4:	4680      	mov	r8, r0
 8008ce6:	d102      	bne.n	8008cee <__cvt+0x62>
 8008ce8:	f019 0f01 	tst.w	r9, #1
 8008cec:	d026      	beq.n	8008d3c <__cvt+0xb0>
 8008cee:	2f46      	cmp	r7, #70	; 0x46
 8008cf0:	eb08 0906 	add.w	r9, r8, r6
 8008cf4:	d111      	bne.n	8008d1a <__cvt+0x8e>
 8008cf6:	f898 3000 	ldrb.w	r3, [r8]
 8008cfa:	2b30      	cmp	r3, #48	; 0x30
 8008cfc:	d10a      	bne.n	8008d14 <__cvt+0x88>
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2300      	movs	r3, #0
 8008d02:	4620      	mov	r0, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	f7f7 fee7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d0a:	b918      	cbnz	r0, 8008d14 <__cvt+0x88>
 8008d0c:	f1c6 0601 	rsb	r6, r6, #1
 8008d10:	f8ca 6000 	str.w	r6, [sl]
 8008d14:	f8da 3000 	ldr.w	r3, [sl]
 8008d18:	4499      	add	r9, r3
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4620      	mov	r0, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	f7f7 fed9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d26:	b938      	cbnz	r0, 8008d38 <__cvt+0xac>
 8008d28:	2230      	movs	r2, #48	; 0x30
 8008d2a:	9b03      	ldr	r3, [sp, #12]
 8008d2c:	454b      	cmp	r3, r9
 8008d2e:	d205      	bcs.n	8008d3c <__cvt+0xb0>
 8008d30:	1c59      	adds	r1, r3, #1
 8008d32:	9103      	str	r1, [sp, #12]
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	e7f8      	b.n	8008d2a <__cvt+0x9e>
 8008d38:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d40:	eba3 0308 	sub.w	r3, r3, r8
 8008d44:	4640      	mov	r0, r8
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	b004      	add	sp, #16
 8008d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008d4e <__exponent>:
 8008d4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d50:	2900      	cmp	r1, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	bfba      	itte	lt
 8008d56:	4249      	neglt	r1, r1
 8008d58:	232d      	movlt	r3, #45	; 0x2d
 8008d5a:	232b      	movge	r3, #43	; 0x2b
 8008d5c:	2909      	cmp	r1, #9
 8008d5e:	f804 2b02 	strb.w	r2, [r4], #2
 8008d62:	7043      	strb	r3, [r0, #1]
 8008d64:	dd20      	ble.n	8008da8 <__exponent+0x5a>
 8008d66:	f10d 0307 	add.w	r3, sp, #7
 8008d6a:	461f      	mov	r7, r3
 8008d6c:	260a      	movs	r6, #10
 8008d6e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008d72:	fb06 1115 	mls	r1, r6, r5, r1
 8008d76:	3130      	adds	r1, #48	; 0x30
 8008d78:	2d09      	cmp	r5, #9
 8008d7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d7e:	f103 32ff 	add.w	r2, r3, #4294967295
 8008d82:	4629      	mov	r1, r5
 8008d84:	dc09      	bgt.n	8008d9a <__exponent+0x4c>
 8008d86:	3130      	adds	r1, #48	; 0x30
 8008d88:	3b02      	subs	r3, #2
 8008d8a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008d8e:	42bb      	cmp	r3, r7
 8008d90:	4622      	mov	r2, r4
 8008d92:	d304      	bcc.n	8008d9e <__exponent+0x50>
 8008d94:	1a10      	subs	r0, r2, r0
 8008d96:	b003      	add	sp, #12
 8008d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	e7e7      	b.n	8008d6e <__exponent+0x20>
 8008d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008da2:	f804 2b01 	strb.w	r2, [r4], #1
 8008da6:	e7f2      	b.n	8008d8e <__exponent+0x40>
 8008da8:	2330      	movs	r3, #48	; 0x30
 8008daa:	4419      	add	r1, r3
 8008dac:	7083      	strb	r3, [r0, #2]
 8008dae:	1d02      	adds	r2, r0, #4
 8008db0:	70c1      	strb	r1, [r0, #3]
 8008db2:	e7ef      	b.n	8008d94 <__exponent+0x46>

08008db4 <_printf_float>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	b08d      	sub	sp, #52	; 0x34
 8008dba:	460c      	mov	r4, r1
 8008dbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008dc0:	4616      	mov	r6, r2
 8008dc2:	461f      	mov	r7, r3
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	f003 f95f 	bl	800c088 <_localeconv_r>
 8008dca:	6803      	ldr	r3, [r0, #0]
 8008dcc:	9304      	str	r3, [sp, #16]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7f7 fa06 	bl	80001e0 <strlen>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8008ddc:	9005      	str	r0, [sp, #20]
 8008dde:	3307      	adds	r3, #7
 8008de0:	f023 0307 	bic.w	r3, r3, #7
 8008de4:	f103 0208 	add.w	r2, r3, #8
 8008de8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008dec:	f8d4 b000 	ldr.w	fp, [r4]
 8008df0:	f8c8 2000 	str.w	r2, [r8]
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008dfc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008e00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e04:	9307      	str	r3, [sp, #28]
 8008e06:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	4ba7      	ldr	r3, [pc, #668]	; (80090ac <_printf_float+0x2f8>)
 8008e10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e14:	f7f7 fe92 	bl	8000b3c <__aeabi_dcmpun>
 8008e18:	bb70      	cbnz	r0, 8008e78 <_printf_float+0xc4>
 8008e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e1e:	4ba3      	ldr	r3, [pc, #652]	; (80090ac <_printf_float+0x2f8>)
 8008e20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e24:	f7f7 fe6c 	bl	8000b00 <__aeabi_dcmple>
 8008e28:	bb30      	cbnz	r0, 8008e78 <_printf_float+0xc4>
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fe5b 	bl	8000aec <__aeabi_dcmplt>
 8008e36:	b110      	cbz	r0, 8008e3e <_printf_float+0x8a>
 8008e38:	232d      	movs	r3, #45	; 0x2d
 8008e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e3e:	4a9c      	ldr	r2, [pc, #624]	; (80090b0 <_printf_float+0x2fc>)
 8008e40:	4b9c      	ldr	r3, [pc, #624]	; (80090b4 <_printf_float+0x300>)
 8008e42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008e46:	bf8c      	ite	hi
 8008e48:	4690      	movhi	r8, r2
 8008e4a:	4698      	movls	r8, r3
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	f02b 0204 	bic.w	r2, fp, #4
 8008e52:	6123      	str	r3, [r4, #16]
 8008e54:	6022      	str	r2, [r4, #0]
 8008e56:	f04f 0900 	mov.w	r9, #0
 8008e5a:	9700      	str	r7, [sp, #0]
 8008e5c:	4633      	mov	r3, r6
 8008e5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e60:	4621      	mov	r1, r4
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 f9e6 	bl	8009234 <_printf_common>
 8008e68:	3001      	adds	r0, #1
 8008e6a:	f040 808d 	bne.w	8008f88 <_printf_float+0x1d4>
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	b00d      	add	sp, #52	; 0x34
 8008e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e78:	4642      	mov	r2, r8
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	4649      	mov	r1, r9
 8008e80:	f7f7 fe5c 	bl	8000b3c <__aeabi_dcmpun>
 8008e84:	b110      	cbz	r0, 8008e8c <_printf_float+0xd8>
 8008e86:	4a8c      	ldr	r2, [pc, #560]	; (80090b8 <_printf_float+0x304>)
 8008e88:	4b8c      	ldr	r3, [pc, #560]	; (80090bc <_printf_float+0x308>)
 8008e8a:	e7da      	b.n	8008e42 <_printf_float+0x8e>
 8008e8c:	6861      	ldr	r1, [r4, #4]
 8008e8e:	1c4b      	adds	r3, r1, #1
 8008e90:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008e94:	a80a      	add	r0, sp, #40	; 0x28
 8008e96:	d13e      	bne.n	8008f16 <_printf_float+0x162>
 8008e98:	2306      	movs	r3, #6
 8008e9a:	6063      	str	r3, [r4, #4]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008ea2:	ab09      	add	r3, sp, #36	; 0x24
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	ec49 8b10 	vmov	d0, r8, r9
 8008eaa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008eae:	6022      	str	r2, [r4, #0]
 8008eb0:	f8cd a004 	str.w	sl, [sp, #4]
 8008eb4:	6861      	ldr	r1, [r4, #4]
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f7ff fee8 	bl	8008c8c <__cvt>
 8008ebc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008ec0:	2b47      	cmp	r3, #71	; 0x47
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	d109      	bne.n	8008eda <_printf_float+0x126>
 8008ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec8:	1cd8      	adds	r0, r3, #3
 8008eca:	db02      	blt.n	8008ed2 <_printf_float+0x11e>
 8008ecc:	6862      	ldr	r2, [r4, #4]
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	dd47      	ble.n	8008f62 <_printf_float+0x1ae>
 8008ed2:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ed6:	fa5f fa8a 	uxtb.w	sl, sl
 8008eda:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ee0:	d824      	bhi.n	8008f2c <_printf_float+0x178>
 8008ee2:	3901      	subs	r1, #1
 8008ee4:	4652      	mov	r2, sl
 8008ee6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008eea:	9109      	str	r1, [sp, #36]	; 0x24
 8008eec:	f7ff ff2f 	bl	8008d4e <__exponent>
 8008ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ef2:	1813      	adds	r3, r2, r0
 8008ef4:	2a01      	cmp	r2, #1
 8008ef6:	4681      	mov	r9, r0
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	dc02      	bgt.n	8008f02 <_printf_float+0x14e>
 8008efc:	6822      	ldr	r2, [r4, #0]
 8008efe:	07d1      	lsls	r1, r2, #31
 8008f00:	d501      	bpl.n	8008f06 <_printf_float+0x152>
 8008f02:	3301      	adds	r3, #1
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0a5      	beq.n	8008e5a <_printf_float+0xa6>
 8008f0e:	232d      	movs	r3, #45	; 0x2d
 8008f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f14:	e7a1      	b.n	8008e5a <_printf_float+0xa6>
 8008f16:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008f1a:	f000 8177 	beq.w	800920c <_printf_float+0x458>
 8008f1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008f22:	d1bb      	bne.n	8008e9c <_printf_float+0xe8>
 8008f24:	2900      	cmp	r1, #0
 8008f26:	d1b9      	bne.n	8008e9c <_printf_float+0xe8>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e7b6      	b.n	8008e9a <_printf_float+0xe6>
 8008f2c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008f30:	d119      	bne.n	8008f66 <_printf_float+0x1b2>
 8008f32:	2900      	cmp	r1, #0
 8008f34:	6863      	ldr	r3, [r4, #4]
 8008f36:	dd0c      	ble.n	8008f52 <_printf_float+0x19e>
 8008f38:	6121      	str	r1, [r4, #16]
 8008f3a:	b913      	cbnz	r3, 8008f42 <_printf_float+0x18e>
 8008f3c:	6822      	ldr	r2, [r4, #0]
 8008f3e:	07d2      	lsls	r2, r2, #31
 8008f40:	d502      	bpl.n	8008f48 <_printf_float+0x194>
 8008f42:	3301      	adds	r3, #1
 8008f44:	440b      	add	r3, r1
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4a:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f4c:	f04f 0900 	mov.w	r9, #0
 8008f50:	e7d9      	b.n	8008f06 <_printf_float+0x152>
 8008f52:	b913      	cbnz	r3, 8008f5a <_printf_float+0x1a6>
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	07d0      	lsls	r0, r2, #31
 8008f58:	d501      	bpl.n	8008f5e <_printf_float+0x1aa>
 8008f5a:	3302      	adds	r3, #2
 8008f5c:	e7f3      	b.n	8008f46 <_printf_float+0x192>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e7f1      	b.n	8008f46 <_printf_float+0x192>
 8008f62:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008f66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	db05      	blt.n	8008f7a <_printf_float+0x1c6>
 8008f6e:	6822      	ldr	r2, [r4, #0]
 8008f70:	6123      	str	r3, [r4, #16]
 8008f72:	07d1      	lsls	r1, r2, #31
 8008f74:	d5e8      	bpl.n	8008f48 <_printf_float+0x194>
 8008f76:	3301      	adds	r3, #1
 8008f78:	e7e5      	b.n	8008f46 <_printf_float+0x192>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bfd4      	ite	le
 8008f7e:	f1c3 0302 	rsble	r3, r3, #2
 8008f82:	2301      	movgt	r3, #1
 8008f84:	4413      	add	r3, r2
 8008f86:	e7de      	b.n	8008f46 <_printf_float+0x192>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	055a      	lsls	r2, r3, #21
 8008f8c:	d407      	bmi.n	8008f9e <_printf_float+0x1ea>
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	4642      	mov	r2, r8
 8008f92:	4631      	mov	r1, r6
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b8      	blx	r7
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d12b      	bne.n	8008ff4 <_printf_float+0x240>
 8008f9c:	e767      	b.n	8008e6e <_printf_float+0xba>
 8008f9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008fa2:	f240 80dc 	bls.w	800915e <_printf_float+0x3aa>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fae:	f7f7 fd93 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d033      	beq.n	800901e <_printf_float+0x26a>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4a41      	ldr	r2, [pc, #260]	; (80090c0 <_printf_float+0x30c>)
 8008fba:	4631      	mov	r1, r6
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	47b8      	blx	r7
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	f43f af54 	beq.w	8008e6e <_printf_float+0xba>
 8008fc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	db02      	blt.n	8008fd4 <_printf_float+0x220>
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	07d8      	lsls	r0, r3, #31
 8008fd2:	d50f      	bpl.n	8008ff4 <_printf_float+0x240>
 8008fd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4628      	mov	r0, r5
 8008fdc:	47b8      	blx	r7
 8008fde:	3001      	adds	r0, #1
 8008fe0:	f43f af45 	beq.w	8008e6e <_printf_float+0xba>
 8008fe4:	f04f 0800 	mov.w	r8, #0
 8008fe8:	f104 091a 	add.w	r9, r4, #26
 8008fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	4543      	cmp	r3, r8
 8008ff2:	dc09      	bgt.n	8009008 <_printf_float+0x254>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	079b      	lsls	r3, r3, #30
 8008ff8:	f100 8103 	bmi.w	8009202 <_printf_float+0x44e>
 8008ffc:	68e0      	ldr	r0, [r4, #12]
 8008ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009000:	4298      	cmp	r0, r3
 8009002:	bfb8      	it	lt
 8009004:	4618      	movlt	r0, r3
 8009006:	e734      	b.n	8008e72 <_printf_float+0xbe>
 8009008:	2301      	movs	r3, #1
 800900a:	464a      	mov	r2, r9
 800900c:	4631      	mov	r1, r6
 800900e:	4628      	mov	r0, r5
 8009010:	47b8      	blx	r7
 8009012:	3001      	adds	r0, #1
 8009014:	f43f af2b 	beq.w	8008e6e <_printf_float+0xba>
 8009018:	f108 0801 	add.w	r8, r8, #1
 800901c:	e7e6      	b.n	8008fec <_printf_float+0x238>
 800901e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc2b      	bgt.n	800907c <_printf_float+0x2c8>
 8009024:	2301      	movs	r3, #1
 8009026:	4a26      	ldr	r2, [pc, #152]	; (80090c0 <_printf_float+0x30c>)
 8009028:	4631      	mov	r1, r6
 800902a:	4628      	mov	r0, r5
 800902c:	47b8      	blx	r7
 800902e:	3001      	adds	r0, #1
 8009030:	f43f af1d 	beq.w	8008e6e <_printf_float+0xba>
 8009034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009036:	b923      	cbnz	r3, 8009042 <_printf_float+0x28e>
 8009038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903a:	b913      	cbnz	r3, 8009042 <_printf_float+0x28e>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	07d9      	lsls	r1, r3, #31
 8009040:	d5d8      	bpl.n	8008ff4 <_printf_float+0x240>
 8009042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009046:	4631      	mov	r1, r6
 8009048:	4628      	mov	r0, r5
 800904a:	47b8      	blx	r7
 800904c:	3001      	adds	r0, #1
 800904e:	f43f af0e 	beq.w	8008e6e <_printf_float+0xba>
 8009052:	f04f 0900 	mov.w	r9, #0
 8009056:	f104 0a1a 	add.w	sl, r4, #26
 800905a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905c:	425b      	negs	r3, r3
 800905e:	454b      	cmp	r3, r9
 8009060:	dc01      	bgt.n	8009066 <_printf_float+0x2b2>
 8009062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009064:	e794      	b.n	8008f90 <_printf_float+0x1dc>
 8009066:	2301      	movs	r3, #1
 8009068:	4652      	mov	r2, sl
 800906a:	4631      	mov	r1, r6
 800906c:	4628      	mov	r0, r5
 800906e:	47b8      	blx	r7
 8009070:	3001      	adds	r0, #1
 8009072:	f43f aefc 	beq.w	8008e6e <_printf_float+0xba>
 8009076:	f109 0901 	add.w	r9, r9, #1
 800907a:	e7ee      	b.n	800905a <_printf_float+0x2a6>
 800907c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800907e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009080:	429a      	cmp	r2, r3
 8009082:	bfa8      	it	ge
 8009084:	461a      	movge	r2, r3
 8009086:	2a00      	cmp	r2, #0
 8009088:	4691      	mov	r9, r2
 800908a:	dd07      	ble.n	800909c <_printf_float+0x2e8>
 800908c:	4613      	mov	r3, r2
 800908e:	4631      	mov	r1, r6
 8009090:	4642      	mov	r2, r8
 8009092:	4628      	mov	r0, r5
 8009094:	47b8      	blx	r7
 8009096:	3001      	adds	r0, #1
 8009098:	f43f aee9 	beq.w	8008e6e <_printf_float+0xba>
 800909c:	f104 031a 	add.w	r3, r4, #26
 80090a0:	f04f 0b00 	mov.w	fp, #0
 80090a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090a8:	9306      	str	r3, [sp, #24]
 80090aa:	e015      	b.n	80090d8 <_printf_float+0x324>
 80090ac:	7fefffff 	.word	0x7fefffff
 80090b0:	080104b4 	.word	0x080104b4
 80090b4:	080104b0 	.word	0x080104b0
 80090b8:	080104bc 	.word	0x080104bc
 80090bc:	080104b8 	.word	0x080104b8
 80090c0:	080106db 	.word	0x080106db
 80090c4:	2301      	movs	r3, #1
 80090c6:	9a06      	ldr	r2, [sp, #24]
 80090c8:	4631      	mov	r1, r6
 80090ca:	4628      	mov	r0, r5
 80090cc:	47b8      	blx	r7
 80090ce:	3001      	adds	r0, #1
 80090d0:	f43f aecd 	beq.w	8008e6e <_printf_float+0xba>
 80090d4:	f10b 0b01 	add.w	fp, fp, #1
 80090d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80090dc:	ebaa 0309 	sub.w	r3, sl, r9
 80090e0:	455b      	cmp	r3, fp
 80090e2:	dcef      	bgt.n	80090c4 <_printf_float+0x310>
 80090e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090e8:	429a      	cmp	r2, r3
 80090ea:	44d0      	add	r8, sl
 80090ec:	db15      	blt.n	800911a <_printf_float+0x366>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	07da      	lsls	r2, r3, #31
 80090f2:	d412      	bmi.n	800911a <_printf_float+0x366>
 80090f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090f8:	eba3 020a 	sub.w	r2, r3, sl
 80090fc:	eba3 0a01 	sub.w	sl, r3, r1
 8009100:	4592      	cmp	sl, r2
 8009102:	bfa8      	it	ge
 8009104:	4692      	movge	sl, r2
 8009106:	f1ba 0f00 	cmp.w	sl, #0
 800910a:	dc0e      	bgt.n	800912a <_printf_float+0x376>
 800910c:	f04f 0800 	mov.w	r8, #0
 8009110:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009114:	f104 091a 	add.w	r9, r4, #26
 8009118:	e019      	b.n	800914e <_printf_float+0x39a>
 800911a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	d1e5      	bne.n	80090f4 <_printf_float+0x340>
 8009128:	e6a1      	b.n	8008e6e <_printf_float+0xba>
 800912a:	4653      	mov	r3, sl
 800912c:	4642      	mov	r2, r8
 800912e:	4631      	mov	r1, r6
 8009130:	4628      	mov	r0, r5
 8009132:	47b8      	blx	r7
 8009134:	3001      	adds	r0, #1
 8009136:	d1e9      	bne.n	800910c <_printf_float+0x358>
 8009138:	e699      	b.n	8008e6e <_printf_float+0xba>
 800913a:	2301      	movs	r3, #1
 800913c:	464a      	mov	r2, r9
 800913e:	4631      	mov	r1, r6
 8009140:	4628      	mov	r0, r5
 8009142:	47b8      	blx	r7
 8009144:	3001      	adds	r0, #1
 8009146:	f43f ae92 	beq.w	8008e6e <_printf_float+0xba>
 800914a:	f108 0801 	add.w	r8, r8, #1
 800914e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	eba3 030a 	sub.w	r3, r3, sl
 8009158:	4543      	cmp	r3, r8
 800915a:	dcee      	bgt.n	800913a <_printf_float+0x386>
 800915c:	e74a      	b.n	8008ff4 <_printf_float+0x240>
 800915e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009160:	2a01      	cmp	r2, #1
 8009162:	dc01      	bgt.n	8009168 <_printf_float+0x3b4>
 8009164:	07db      	lsls	r3, r3, #31
 8009166:	d53a      	bpl.n	80091de <_printf_float+0x42a>
 8009168:	2301      	movs	r3, #1
 800916a:	4642      	mov	r2, r8
 800916c:	4631      	mov	r1, r6
 800916e:	4628      	mov	r0, r5
 8009170:	47b8      	blx	r7
 8009172:	3001      	adds	r0, #1
 8009174:	f43f ae7b 	beq.w	8008e6e <_printf_float+0xba>
 8009178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800917c:	4631      	mov	r1, r6
 800917e:	4628      	mov	r0, r5
 8009180:	47b8      	blx	r7
 8009182:	3001      	adds	r0, #1
 8009184:	f108 0801 	add.w	r8, r8, #1
 8009188:	f43f ae71 	beq.w	8008e6e <_printf_float+0xba>
 800918c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800918e:	2200      	movs	r2, #0
 8009190:	f103 3aff 	add.w	sl, r3, #4294967295
 8009194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009198:	2300      	movs	r3, #0
 800919a:	f7f7 fc9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800919e:	b9c8      	cbnz	r0, 80091d4 <_printf_float+0x420>
 80091a0:	4653      	mov	r3, sl
 80091a2:	4642      	mov	r2, r8
 80091a4:	4631      	mov	r1, r6
 80091a6:	4628      	mov	r0, r5
 80091a8:	47b8      	blx	r7
 80091aa:	3001      	adds	r0, #1
 80091ac:	d10e      	bne.n	80091cc <_printf_float+0x418>
 80091ae:	e65e      	b.n	8008e6e <_printf_float+0xba>
 80091b0:	2301      	movs	r3, #1
 80091b2:	4652      	mov	r2, sl
 80091b4:	4631      	mov	r1, r6
 80091b6:	4628      	mov	r0, r5
 80091b8:	47b8      	blx	r7
 80091ba:	3001      	adds	r0, #1
 80091bc:	f43f ae57 	beq.w	8008e6e <_printf_float+0xba>
 80091c0:	f108 0801 	add.w	r8, r8, #1
 80091c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c6:	3b01      	subs	r3, #1
 80091c8:	4543      	cmp	r3, r8
 80091ca:	dcf1      	bgt.n	80091b0 <_printf_float+0x3fc>
 80091cc:	464b      	mov	r3, r9
 80091ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091d2:	e6de      	b.n	8008f92 <_printf_float+0x1de>
 80091d4:	f04f 0800 	mov.w	r8, #0
 80091d8:	f104 0a1a 	add.w	sl, r4, #26
 80091dc:	e7f2      	b.n	80091c4 <_printf_float+0x410>
 80091de:	2301      	movs	r3, #1
 80091e0:	e7df      	b.n	80091a2 <_printf_float+0x3ee>
 80091e2:	2301      	movs	r3, #1
 80091e4:	464a      	mov	r2, r9
 80091e6:	4631      	mov	r1, r6
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b8      	blx	r7
 80091ec:	3001      	adds	r0, #1
 80091ee:	f43f ae3e 	beq.w	8008e6e <_printf_float+0xba>
 80091f2:	f108 0801 	add.w	r8, r8, #1
 80091f6:	68e3      	ldr	r3, [r4, #12]
 80091f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	4543      	cmp	r3, r8
 80091fe:	dcf0      	bgt.n	80091e2 <_printf_float+0x42e>
 8009200:	e6fc      	b.n	8008ffc <_printf_float+0x248>
 8009202:	f04f 0800 	mov.w	r8, #0
 8009206:	f104 0919 	add.w	r9, r4, #25
 800920a:	e7f4      	b.n	80091f6 <_printf_float+0x442>
 800920c:	2900      	cmp	r1, #0
 800920e:	f43f ae8b 	beq.w	8008f28 <_printf_float+0x174>
 8009212:	2300      	movs	r3, #0
 8009214:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009218:	ab09      	add	r3, sp, #36	; 0x24
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	ec49 8b10 	vmov	d0, r8, r9
 8009220:	6022      	str	r2, [r4, #0]
 8009222:	f8cd a004 	str.w	sl, [sp, #4]
 8009226:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800922a:	4628      	mov	r0, r5
 800922c:	f7ff fd2e 	bl	8008c8c <__cvt>
 8009230:	4680      	mov	r8, r0
 8009232:	e648      	b.n	8008ec6 <_printf_float+0x112>

08009234 <_printf_common>:
 8009234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009238:	4691      	mov	r9, r2
 800923a:	461f      	mov	r7, r3
 800923c:	688a      	ldr	r2, [r1, #8]
 800923e:	690b      	ldr	r3, [r1, #16]
 8009240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009244:	4293      	cmp	r3, r2
 8009246:	bfb8      	it	lt
 8009248:	4613      	movlt	r3, r2
 800924a:	f8c9 3000 	str.w	r3, [r9]
 800924e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009252:	4606      	mov	r6, r0
 8009254:	460c      	mov	r4, r1
 8009256:	b112      	cbz	r2, 800925e <_printf_common+0x2a>
 8009258:	3301      	adds	r3, #1
 800925a:	f8c9 3000 	str.w	r3, [r9]
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	0699      	lsls	r1, r3, #26
 8009262:	bf42      	ittt	mi
 8009264:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009268:	3302      	addmi	r3, #2
 800926a:	f8c9 3000 	strmi.w	r3, [r9]
 800926e:	6825      	ldr	r5, [r4, #0]
 8009270:	f015 0506 	ands.w	r5, r5, #6
 8009274:	d107      	bne.n	8009286 <_printf_common+0x52>
 8009276:	f104 0a19 	add.w	sl, r4, #25
 800927a:	68e3      	ldr	r3, [r4, #12]
 800927c:	f8d9 2000 	ldr.w	r2, [r9]
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	42ab      	cmp	r3, r5
 8009284:	dc28      	bgt.n	80092d8 <_printf_common+0xa4>
 8009286:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800928a:	6822      	ldr	r2, [r4, #0]
 800928c:	3300      	adds	r3, #0
 800928e:	bf18      	it	ne
 8009290:	2301      	movne	r3, #1
 8009292:	0692      	lsls	r2, r2, #26
 8009294:	d42d      	bmi.n	80092f2 <_printf_common+0xbe>
 8009296:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800929a:	4639      	mov	r1, r7
 800929c:	4630      	mov	r0, r6
 800929e:	47c0      	blx	r8
 80092a0:	3001      	adds	r0, #1
 80092a2:	d020      	beq.n	80092e6 <_printf_common+0xb2>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	68e5      	ldr	r5, [r4, #12]
 80092a8:	f8d9 2000 	ldr.w	r2, [r9]
 80092ac:	f003 0306 	and.w	r3, r3, #6
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	bf08      	it	eq
 80092b4:	1aad      	subeq	r5, r5, r2
 80092b6:	68a3      	ldr	r3, [r4, #8]
 80092b8:	6922      	ldr	r2, [r4, #16]
 80092ba:	bf0c      	ite	eq
 80092bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092c0:	2500      	movne	r5, #0
 80092c2:	4293      	cmp	r3, r2
 80092c4:	bfc4      	itt	gt
 80092c6:	1a9b      	subgt	r3, r3, r2
 80092c8:	18ed      	addgt	r5, r5, r3
 80092ca:	f04f 0900 	mov.w	r9, #0
 80092ce:	341a      	adds	r4, #26
 80092d0:	454d      	cmp	r5, r9
 80092d2:	d11a      	bne.n	800930a <_printf_common+0xd6>
 80092d4:	2000      	movs	r0, #0
 80092d6:	e008      	b.n	80092ea <_printf_common+0xb6>
 80092d8:	2301      	movs	r3, #1
 80092da:	4652      	mov	r2, sl
 80092dc:	4639      	mov	r1, r7
 80092de:	4630      	mov	r0, r6
 80092e0:	47c0      	blx	r8
 80092e2:	3001      	adds	r0, #1
 80092e4:	d103      	bne.n	80092ee <_printf_common+0xba>
 80092e6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ee:	3501      	adds	r5, #1
 80092f0:	e7c3      	b.n	800927a <_printf_common+0x46>
 80092f2:	18e1      	adds	r1, r4, r3
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	2030      	movs	r0, #48	; 0x30
 80092f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092fc:	4422      	add	r2, r4
 80092fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009302:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009306:	3302      	adds	r3, #2
 8009308:	e7c5      	b.n	8009296 <_printf_common+0x62>
 800930a:	2301      	movs	r3, #1
 800930c:	4622      	mov	r2, r4
 800930e:	4639      	mov	r1, r7
 8009310:	4630      	mov	r0, r6
 8009312:	47c0      	blx	r8
 8009314:	3001      	adds	r0, #1
 8009316:	d0e6      	beq.n	80092e6 <_printf_common+0xb2>
 8009318:	f109 0901 	add.w	r9, r9, #1
 800931c:	e7d8      	b.n	80092d0 <_printf_common+0x9c>
	...

08009320 <_printf_i>:
 8009320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009324:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009328:	460c      	mov	r4, r1
 800932a:	7e09      	ldrb	r1, [r1, #24]
 800932c:	b085      	sub	sp, #20
 800932e:	296e      	cmp	r1, #110	; 0x6e
 8009330:	4617      	mov	r7, r2
 8009332:	4606      	mov	r6, r0
 8009334:	4698      	mov	r8, r3
 8009336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009338:	f000 80b3 	beq.w	80094a2 <_printf_i+0x182>
 800933c:	d822      	bhi.n	8009384 <_printf_i+0x64>
 800933e:	2963      	cmp	r1, #99	; 0x63
 8009340:	d036      	beq.n	80093b0 <_printf_i+0x90>
 8009342:	d80a      	bhi.n	800935a <_printf_i+0x3a>
 8009344:	2900      	cmp	r1, #0
 8009346:	f000 80b9 	beq.w	80094bc <_printf_i+0x19c>
 800934a:	2958      	cmp	r1, #88	; 0x58
 800934c:	f000 8083 	beq.w	8009456 <_printf_i+0x136>
 8009350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009354:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009358:	e032      	b.n	80093c0 <_printf_i+0xa0>
 800935a:	2964      	cmp	r1, #100	; 0x64
 800935c:	d001      	beq.n	8009362 <_printf_i+0x42>
 800935e:	2969      	cmp	r1, #105	; 0x69
 8009360:	d1f6      	bne.n	8009350 <_printf_i+0x30>
 8009362:	6820      	ldr	r0, [r4, #0]
 8009364:	6813      	ldr	r3, [r2, #0]
 8009366:	0605      	lsls	r5, r0, #24
 8009368:	f103 0104 	add.w	r1, r3, #4
 800936c:	d52a      	bpl.n	80093c4 <_printf_i+0xa4>
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6011      	str	r1, [r2, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	da03      	bge.n	800937e <_printf_i+0x5e>
 8009376:	222d      	movs	r2, #45	; 0x2d
 8009378:	425b      	negs	r3, r3
 800937a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800937e:	486f      	ldr	r0, [pc, #444]	; (800953c <_printf_i+0x21c>)
 8009380:	220a      	movs	r2, #10
 8009382:	e039      	b.n	80093f8 <_printf_i+0xd8>
 8009384:	2973      	cmp	r1, #115	; 0x73
 8009386:	f000 809d 	beq.w	80094c4 <_printf_i+0x1a4>
 800938a:	d808      	bhi.n	800939e <_printf_i+0x7e>
 800938c:	296f      	cmp	r1, #111	; 0x6f
 800938e:	d020      	beq.n	80093d2 <_printf_i+0xb2>
 8009390:	2970      	cmp	r1, #112	; 0x70
 8009392:	d1dd      	bne.n	8009350 <_printf_i+0x30>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	f043 0320 	orr.w	r3, r3, #32
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	e003      	b.n	80093a6 <_printf_i+0x86>
 800939e:	2975      	cmp	r1, #117	; 0x75
 80093a0:	d017      	beq.n	80093d2 <_printf_i+0xb2>
 80093a2:	2978      	cmp	r1, #120	; 0x78
 80093a4:	d1d4      	bne.n	8009350 <_printf_i+0x30>
 80093a6:	2378      	movs	r3, #120	; 0x78
 80093a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ac:	4864      	ldr	r0, [pc, #400]	; (8009540 <_printf_i+0x220>)
 80093ae:	e055      	b.n	800945c <_printf_i+0x13c>
 80093b0:	6813      	ldr	r3, [r2, #0]
 80093b2:	1d19      	adds	r1, r3, #4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6011      	str	r1, [r2, #0]
 80093b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093c0:	2301      	movs	r3, #1
 80093c2:	e08c      	b.n	80094de <_printf_i+0x1be>
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6011      	str	r1, [r2, #0]
 80093c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093cc:	bf18      	it	ne
 80093ce:	b21b      	sxthne	r3, r3
 80093d0:	e7cf      	b.n	8009372 <_printf_i+0x52>
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	6825      	ldr	r5, [r4, #0]
 80093d6:	1d18      	adds	r0, r3, #4
 80093d8:	6010      	str	r0, [r2, #0]
 80093da:	0628      	lsls	r0, r5, #24
 80093dc:	d501      	bpl.n	80093e2 <_printf_i+0xc2>
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	e002      	b.n	80093e8 <_printf_i+0xc8>
 80093e2:	0668      	lsls	r0, r5, #25
 80093e4:	d5fb      	bpl.n	80093de <_printf_i+0xbe>
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	4854      	ldr	r0, [pc, #336]	; (800953c <_printf_i+0x21c>)
 80093ea:	296f      	cmp	r1, #111	; 0x6f
 80093ec:	bf14      	ite	ne
 80093ee:	220a      	movne	r2, #10
 80093f0:	2208      	moveq	r2, #8
 80093f2:	2100      	movs	r1, #0
 80093f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093f8:	6865      	ldr	r5, [r4, #4]
 80093fa:	60a5      	str	r5, [r4, #8]
 80093fc:	2d00      	cmp	r5, #0
 80093fe:	f2c0 8095 	blt.w	800952c <_printf_i+0x20c>
 8009402:	6821      	ldr	r1, [r4, #0]
 8009404:	f021 0104 	bic.w	r1, r1, #4
 8009408:	6021      	str	r1, [r4, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d13d      	bne.n	800948a <_printf_i+0x16a>
 800940e:	2d00      	cmp	r5, #0
 8009410:	f040 808e 	bne.w	8009530 <_printf_i+0x210>
 8009414:	4665      	mov	r5, ip
 8009416:	2a08      	cmp	r2, #8
 8009418:	d10b      	bne.n	8009432 <_printf_i+0x112>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	07db      	lsls	r3, r3, #31
 800941e:	d508      	bpl.n	8009432 <_printf_i+0x112>
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	6862      	ldr	r2, [r4, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	bfde      	ittt	le
 8009428:	2330      	movle	r3, #48	; 0x30
 800942a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800942e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009432:	ebac 0305 	sub.w	r3, ip, r5
 8009436:	6123      	str	r3, [r4, #16]
 8009438:	f8cd 8000 	str.w	r8, [sp]
 800943c:	463b      	mov	r3, r7
 800943e:	aa03      	add	r2, sp, #12
 8009440:	4621      	mov	r1, r4
 8009442:	4630      	mov	r0, r6
 8009444:	f7ff fef6 	bl	8009234 <_printf_common>
 8009448:	3001      	adds	r0, #1
 800944a:	d14d      	bne.n	80094e8 <_printf_i+0x1c8>
 800944c:	f04f 30ff 	mov.w	r0, #4294967295
 8009450:	b005      	add	sp, #20
 8009452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009456:	4839      	ldr	r0, [pc, #228]	; (800953c <_printf_i+0x21c>)
 8009458:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800945c:	6813      	ldr	r3, [r2, #0]
 800945e:	6821      	ldr	r1, [r4, #0]
 8009460:	1d1d      	adds	r5, r3, #4
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6015      	str	r5, [r2, #0]
 8009466:	060a      	lsls	r2, r1, #24
 8009468:	d50b      	bpl.n	8009482 <_printf_i+0x162>
 800946a:	07ca      	lsls	r2, r1, #31
 800946c:	bf44      	itt	mi
 800946e:	f041 0120 	orrmi.w	r1, r1, #32
 8009472:	6021      	strmi	r1, [r4, #0]
 8009474:	b91b      	cbnz	r3, 800947e <_printf_i+0x15e>
 8009476:	6822      	ldr	r2, [r4, #0]
 8009478:	f022 0220 	bic.w	r2, r2, #32
 800947c:	6022      	str	r2, [r4, #0]
 800947e:	2210      	movs	r2, #16
 8009480:	e7b7      	b.n	80093f2 <_printf_i+0xd2>
 8009482:	064d      	lsls	r5, r1, #25
 8009484:	bf48      	it	mi
 8009486:	b29b      	uxthmi	r3, r3
 8009488:	e7ef      	b.n	800946a <_printf_i+0x14a>
 800948a:	4665      	mov	r5, ip
 800948c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009490:	fb02 3311 	mls	r3, r2, r1, r3
 8009494:	5cc3      	ldrb	r3, [r0, r3]
 8009496:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800949a:	460b      	mov	r3, r1
 800949c:	2900      	cmp	r1, #0
 800949e:	d1f5      	bne.n	800948c <_printf_i+0x16c>
 80094a0:	e7b9      	b.n	8009416 <_printf_i+0xf6>
 80094a2:	6813      	ldr	r3, [r2, #0]
 80094a4:	6825      	ldr	r5, [r4, #0]
 80094a6:	6961      	ldr	r1, [r4, #20]
 80094a8:	1d18      	adds	r0, r3, #4
 80094aa:	6010      	str	r0, [r2, #0]
 80094ac:	0628      	lsls	r0, r5, #24
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	d501      	bpl.n	80094b6 <_printf_i+0x196>
 80094b2:	6019      	str	r1, [r3, #0]
 80094b4:	e002      	b.n	80094bc <_printf_i+0x19c>
 80094b6:	066a      	lsls	r2, r5, #25
 80094b8:	d5fb      	bpl.n	80094b2 <_printf_i+0x192>
 80094ba:	8019      	strh	r1, [r3, #0]
 80094bc:	2300      	movs	r3, #0
 80094be:	6123      	str	r3, [r4, #16]
 80094c0:	4665      	mov	r5, ip
 80094c2:	e7b9      	b.n	8009438 <_printf_i+0x118>
 80094c4:	6813      	ldr	r3, [r2, #0]
 80094c6:	1d19      	adds	r1, r3, #4
 80094c8:	6011      	str	r1, [r2, #0]
 80094ca:	681d      	ldr	r5, [r3, #0]
 80094cc:	6862      	ldr	r2, [r4, #4]
 80094ce:	2100      	movs	r1, #0
 80094d0:	4628      	mov	r0, r5
 80094d2:	f7f6 fe8d 	bl	80001f0 <memchr>
 80094d6:	b108      	cbz	r0, 80094dc <_printf_i+0x1bc>
 80094d8:	1b40      	subs	r0, r0, r5
 80094da:	6060      	str	r0, [r4, #4]
 80094dc:	6863      	ldr	r3, [r4, #4]
 80094de:	6123      	str	r3, [r4, #16]
 80094e0:	2300      	movs	r3, #0
 80094e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e6:	e7a7      	b.n	8009438 <_printf_i+0x118>
 80094e8:	6923      	ldr	r3, [r4, #16]
 80094ea:	462a      	mov	r2, r5
 80094ec:	4639      	mov	r1, r7
 80094ee:	4630      	mov	r0, r6
 80094f0:	47c0      	blx	r8
 80094f2:	3001      	adds	r0, #1
 80094f4:	d0aa      	beq.n	800944c <_printf_i+0x12c>
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	079b      	lsls	r3, r3, #30
 80094fa:	d413      	bmi.n	8009524 <_printf_i+0x204>
 80094fc:	68e0      	ldr	r0, [r4, #12]
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	4298      	cmp	r0, r3
 8009502:	bfb8      	it	lt
 8009504:	4618      	movlt	r0, r3
 8009506:	e7a3      	b.n	8009450 <_printf_i+0x130>
 8009508:	2301      	movs	r3, #1
 800950a:	464a      	mov	r2, r9
 800950c:	4639      	mov	r1, r7
 800950e:	4630      	mov	r0, r6
 8009510:	47c0      	blx	r8
 8009512:	3001      	adds	r0, #1
 8009514:	d09a      	beq.n	800944c <_printf_i+0x12c>
 8009516:	3501      	adds	r5, #1
 8009518:	68e3      	ldr	r3, [r4, #12]
 800951a:	9a03      	ldr	r2, [sp, #12]
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	42ab      	cmp	r3, r5
 8009520:	dcf2      	bgt.n	8009508 <_printf_i+0x1e8>
 8009522:	e7eb      	b.n	80094fc <_printf_i+0x1dc>
 8009524:	2500      	movs	r5, #0
 8009526:	f104 0919 	add.w	r9, r4, #25
 800952a:	e7f5      	b.n	8009518 <_printf_i+0x1f8>
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1ac      	bne.n	800948a <_printf_i+0x16a>
 8009530:	7803      	ldrb	r3, [r0, #0]
 8009532:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009536:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800953a:	e76c      	b.n	8009416 <_printf_i+0xf6>
 800953c:	080104c0 	.word	0x080104c0
 8009540:	080104d1 	.word	0x080104d1

08009544 <_scanf_float>:
 8009544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009548:	469a      	mov	sl, r3
 800954a:	688b      	ldr	r3, [r1, #8]
 800954c:	4616      	mov	r6, r2
 800954e:	1e5a      	subs	r2, r3, #1
 8009550:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009554:	b087      	sub	sp, #28
 8009556:	bf83      	ittte	hi
 8009558:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800955c:	189b      	addhi	r3, r3, r2
 800955e:	9301      	strhi	r3, [sp, #4]
 8009560:	2300      	movls	r3, #0
 8009562:	bf86      	itte	hi
 8009564:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009568:	608b      	strhi	r3, [r1, #8]
 800956a:	9301      	strls	r3, [sp, #4]
 800956c:	680b      	ldr	r3, [r1, #0]
 800956e:	4688      	mov	r8, r1
 8009570:	f04f 0b00 	mov.w	fp, #0
 8009574:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009578:	f848 3b1c 	str.w	r3, [r8], #28
 800957c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009580:	4607      	mov	r7, r0
 8009582:	460c      	mov	r4, r1
 8009584:	4645      	mov	r5, r8
 8009586:	465a      	mov	r2, fp
 8009588:	46d9      	mov	r9, fp
 800958a:	f8cd b008 	str.w	fp, [sp, #8]
 800958e:	68a1      	ldr	r1, [r4, #8]
 8009590:	b181      	cbz	r1, 80095b4 <_scanf_float+0x70>
 8009592:	6833      	ldr	r3, [r6, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b49      	cmp	r3, #73	; 0x49
 8009598:	d071      	beq.n	800967e <_scanf_float+0x13a>
 800959a:	d84d      	bhi.n	8009638 <_scanf_float+0xf4>
 800959c:	2b39      	cmp	r3, #57	; 0x39
 800959e:	d840      	bhi.n	8009622 <_scanf_float+0xde>
 80095a0:	2b31      	cmp	r3, #49	; 0x31
 80095a2:	f080 8088 	bcs.w	80096b6 <_scanf_float+0x172>
 80095a6:	2b2d      	cmp	r3, #45	; 0x2d
 80095a8:	f000 8090 	beq.w	80096cc <_scanf_float+0x188>
 80095ac:	d815      	bhi.n	80095da <_scanf_float+0x96>
 80095ae:	2b2b      	cmp	r3, #43	; 0x2b
 80095b0:	f000 808c 	beq.w	80096cc <_scanf_float+0x188>
 80095b4:	f1b9 0f00 	cmp.w	r9, #0
 80095b8:	d003      	beq.n	80095c2 <_scanf_float+0x7e>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	3a01      	subs	r2, #1
 80095c4:	2a01      	cmp	r2, #1
 80095c6:	f200 80ea 	bhi.w	800979e <_scanf_float+0x25a>
 80095ca:	4545      	cmp	r5, r8
 80095cc:	f200 80dc 	bhi.w	8009788 <_scanf_float+0x244>
 80095d0:	2601      	movs	r6, #1
 80095d2:	4630      	mov	r0, r6
 80095d4:	b007      	add	sp, #28
 80095d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095da:	2b2e      	cmp	r3, #46	; 0x2e
 80095dc:	f000 809f 	beq.w	800971e <_scanf_float+0x1da>
 80095e0:	2b30      	cmp	r3, #48	; 0x30
 80095e2:	d1e7      	bne.n	80095b4 <_scanf_float+0x70>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80095ea:	d064      	beq.n	80096b6 <_scanf_float+0x172>
 80095ec:	9b01      	ldr	r3, [sp, #4]
 80095ee:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80095f2:	6020      	str	r0, [r4, #0]
 80095f4:	f109 0901 	add.w	r9, r9, #1
 80095f8:	b11b      	cbz	r3, 8009602 <_scanf_float+0xbe>
 80095fa:	3b01      	subs	r3, #1
 80095fc:	3101      	adds	r1, #1
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	60a1      	str	r1, [r4, #8]
 8009602:	68a3      	ldr	r3, [r4, #8]
 8009604:	3b01      	subs	r3, #1
 8009606:	60a3      	str	r3, [r4, #8]
 8009608:	6923      	ldr	r3, [r4, #16]
 800960a:	3301      	adds	r3, #1
 800960c:	6123      	str	r3, [r4, #16]
 800960e:	6873      	ldr	r3, [r6, #4]
 8009610:	3b01      	subs	r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	6073      	str	r3, [r6, #4]
 8009616:	f340 80ac 	ble.w	8009772 <_scanf_float+0x22e>
 800961a:	6833      	ldr	r3, [r6, #0]
 800961c:	3301      	adds	r3, #1
 800961e:	6033      	str	r3, [r6, #0]
 8009620:	e7b5      	b.n	800958e <_scanf_float+0x4a>
 8009622:	2b45      	cmp	r3, #69	; 0x45
 8009624:	f000 8085 	beq.w	8009732 <_scanf_float+0x1ee>
 8009628:	2b46      	cmp	r3, #70	; 0x46
 800962a:	d06a      	beq.n	8009702 <_scanf_float+0x1be>
 800962c:	2b41      	cmp	r3, #65	; 0x41
 800962e:	d1c1      	bne.n	80095b4 <_scanf_float+0x70>
 8009630:	2a01      	cmp	r2, #1
 8009632:	d1bf      	bne.n	80095b4 <_scanf_float+0x70>
 8009634:	2202      	movs	r2, #2
 8009636:	e046      	b.n	80096c6 <_scanf_float+0x182>
 8009638:	2b65      	cmp	r3, #101	; 0x65
 800963a:	d07a      	beq.n	8009732 <_scanf_float+0x1ee>
 800963c:	d818      	bhi.n	8009670 <_scanf_float+0x12c>
 800963e:	2b54      	cmp	r3, #84	; 0x54
 8009640:	d066      	beq.n	8009710 <_scanf_float+0x1cc>
 8009642:	d811      	bhi.n	8009668 <_scanf_float+0x124>
 8009644:	2b4e      	cmp	r3, #78	; 0x4e
 8009646:	d1b5      	bne.n	80095b4 <_scanf_float+0x70>
 8009648:	2a00      	cmp	r2, #0
 800964a:	d146      	bne.n	80096da <_scanf_float+0x196>
 800964c:	f1b9 0f00 	cmp.w	r9, #0
 8009650:	d145      	bne.n	80096de <_scanf_float+0x19a>
 8009652:	6821      	ldr	r1, [r4, #0]
 8009654:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009658:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800965c:	d13f      	bne.n	80096de <_scanf_float+0x19a>
 800965e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009662:	6021      	str	r1, [r4, #0]
 8009664:	2201      	movs	r2, #1
 8009666:	e02e      	b.n	80096c6 <_scanf_float+0x182>
 8009668:	2b59      	cmp	r3, #89	; 0x59
 800966a:	d01e      	beq.n	80096aa <_scanf_float+0x166>
 800966c:	2b61      	cmp	r3, #97	; 0x61
 800966e:	e7de      	b.n	800962e <_scanf_float+0xea>
 8009670:	2b6e      	cmp	r3, #110	; 0x6e
 8009672:	d0e9      	beq.n	8009648 <_scanf_float+0x104>
 8009674:	d815      	bhi.n	80096a2 <_scanf_float+0x15e>
 8009676:	2b66      	cmp	r3, #102	; 0x66
 8009678:	d043      	beq.n	8009702 <_scanf_float+0x1be>
 800967a:	2b69      	cmp	r3, #105	; 0x69
 800967c:	d19a      	bne.n	80095b4 <_scanf_float+0x70>
 800967e:	f1bb 0f00 	cmp.w	fp, #0
 8009682:	d138      	bne.n	80096f6 <_scanf_float+0x1b2>
 8009684:	f1b9 0f00 	cmp.w	r9, #0
 8009688:	d197      	bne.n	80095ba <_scanf_float+0x76>
 800968a:	6821      	ldr	r1, [r4, #0]
 800968c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009690:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009694:	d195      	bne.n	80095c2 <_scanf_float+0x7e>
 8009696:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800969a:	6021      	str	r1, [r4, #0]
 800969c:	f04f 0b01 	mov.w	fp, #1
 80096a0:	e011      	b.n	80096c6 <_scanf_float+0x182>
 80096a2:	2b74      	cmp	r3, #116	; 0x74
 80096a4:	d034      	beq.n	8009710 <_scanf_float+0x1cc>
 80096a6:	2b79      	cmp	r3, #121	; 0x79
 80096a8:	d184      	bne.n	80095b4 <_scanf_float+0x70>
 80096aa:	f1bb 0f07 	cmp.w	fp, #7
 80096ae:	d181      	bne.n	80095b4 <_scanf_float+0x70>
 80096b0:	f04f 0b08 	mov.w	fp, #8
 80096b4:	e007      	b.n	80096c6 <_scanf_float+0x182>
 80096b6:	eb12 0f0b 	cmn.w	r2, fp
 80096ba:	f47f af7b 	bne.w	80095b4 <_scanf_float+0x70>
 80096be:	6821      	ldr	r1, [r4, #0]
 80096c0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80096c4:	6021      	str	r1, [r4, #0]
 80096c6:	702b      	strb	r3, [r5, #0]
 80096c8:	3501      	adds	r5, #1
 80096ca:	e79a      	b.n	8009602 <_scanf_float+0xbe>
 80096cc:	6821      	ldr	r1, [r4, #0]
 80096ce:	0608      	lsls	r0, r1, #24
 80096d0:	f57f af70 	bpl.w	80095b4 <_scanf_float+0x70>
 80096d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80096d8:	e7f4      	b.n	80096c4 <_scanf_float+0x180>
 80096da:	2a02      	cmp	r2, #2
 80096dc:	d047      	beq.n	800976e <_scanf_float+0x22a>
 80096de:	f1bb 0f01 	cmp.w	fp, #1
 80096e2:	d003      	beq.n	80096ec <_scanf_float+0x1a8>
 80096e4:	f1bb 0f04 	cmp.w	fp, #4
 80096e8:	f47f af64 	bne.w	80095b4 <_scanf_float+0x70>
 80096ec:	f10b 0b01 	add.w	fp, fp, #1
 80096f0:	fa5f fb8b 	uxtb.w	fp, fp
 80096f4:	e7e7      	b.n	80096c6 <_scanf_float+0x182>
 80096f6:	f1bb 0f03 	cmp.w	fp, #3
 80096fa:	d0f7      	beq.n	80096ec <_scanf_float+0x1a8>
 80096fc:	f1bb 0f05 	cmp.w	fp, #5
 8009700:	e7f2      	b.n	80096e8 <_scanf_float+0x1a4>
 8009702:	f1bb 0f02 	cmp.w	fp, #2
 8009706:	f47f af55 	bne.w	80095b4 <_scanf_float+0x70>
 800970a:	f04f 0b03 	mov.w	fp, #3
 800970e:	e7da      	b.n	80096c6 <_scanf_float+0x182>
 8009710:	f1bb 0f06 	cmp.w	fp, #6
 8009714:	f47f af4e 	bne.w	80095b4 <_scanf_float+0x70>
 8009718:	f04f 0b07 	mov.w	fp, #7
 800971c:	e7d3      	b.n	80096c6 <_scanf_float+0x182>
 800971e:	6821      	ldr	r1, [r4, #0]
 8009720:	0588      	lsls	r0, r1, #22
 8009722:	f57f af47 	bpl.w	80095b4 <_scanf_float+0x70>
 8009726:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800972a:	6021      	str	r1, [r4, #0]
 800972c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009730:	e7c9      	b.n	80096c6 <_scanf_float+0x182>
 8009732:	6821      	ldr	r1, [r4, #0]
 8009734:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009738:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800973c:	d006      	beq.n	800974c <_scanf_float+0x208>
 800973e:	0548      	lsls	r0, r1, #21
 8009740:	f57f af38 	bpl.w	80095b4 <_scanf_float+0x70>
 8009744:	f1b9 0f00 	cmp.w	r9, #0
 8009748:	f43f af3b 	beq.w	80095c2 <_scanf_float+0x7e>
 800974c:	0588      	lsls	r0, r1, #22
 800974e:	bf58      	it	pl
 8009750:	9802      	ldrpl	r0, [sp, #8]
 8009752:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009756:	bf58      	it	pl
 8009758:	eba9 0000 	subpl.w	r0, r9, r0
 800975c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009760:	bf58      	it	pl
 8009762:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009766:	6021      	str	r1, [r4, #0]
 8009768:	f04f 0900 	mov.w	r9, #0
 800976c:	e7ab      	b.n	80096c6 <_scanf_float+0x182>
 800976e:	2203      	movs	r2, #3
 8009770:	e7a9      	b.n	80096c6 <_scanf_float+0x182>
 8009772:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009776:	9205      	str	r2, [sp, #20]
 8009778:	4631      	mov	r1, r6
 800977a:	4638      	mov	r0, r7
 800977c:	4798      	blx	r3
 800977e:	9a05      	ldr	r2, [sp, #20]
 8009780:	2800      	cmp	r0, #0
 8009782:	f43f af04 	beq.w	800958e <_scanf_float+0x4a>
 8009786:	e715      	b.n	80095b4 <_scanf_float+0x70>
 8009788:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800978c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009790:	4632      	mov	r2, r6
 8009792:	4638      	mov	r0, r7
 8009794:	4798      	blx	r3
 8009796:	6923      	ldr	r3, [r4, #16]
 8009798:	3b01      	subs	r3, #1
 800979a:	6123      	str	r3, [r4, #16]
 800979c:	e715      	b.n	80095ca <_scanf_float+0x86>
 800979e:	f10b 33ff 	add.w	r3, fp, #4294967295
 80097a2:	2b06      	cmp	r3, #6
 80097a4:	d80a      	bhi.n	80097bc <_scanf_float+0x278>
 80097a6:	f1bb 0f02 	cmp.w	fp, #2
 80097aa:	d968      	bls.n	800987e <_scanf_float+0x33a>
 80097ac:	f1ab 0b03 	sub.w	fp, fp, #3
 80097b0:	fa5f fb8b 	uxtb.w	fp, fp
 80097b4:	eba5 0b0b 	sub.w	fp, r5, fp
 80097b8:	455d      	cmp	r5, fp
 80097ba:	d14b      	bne.n	8009854 <_scanf_float+0x310>
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	05da      	lsls	r2, r3, #23
 80097c0:	d51f      	bpl.n	8009802 <_scanf_float+0x2be>
 80097c2:	055b      	lsls	r3, r3, #21
 80097c4:	d468      	bmi.n	8009898 <_scanf_float+0x354>
 80097c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80097ca:	6923      	ldr	r3, [r4, #16]
 80097cc:	2965      	cmp	r1, #101	; 0x65
 80097ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80097d2:	f105 3bff 	add.w	fp, r5, #4294967295
 80097d6:	6123      	str	r3, [r4, #16]
 80097d8:	d00d      	beq.n	80097f6 <_scanf_float+0x2b2>
 80097da:	2945      	cmp	r1, #69	; 0x45
 80097dc:	d00b      	beq.n	80097f6 <_scanf_float+0x2b2>
 80097de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097e2:	4632      	mov	r2, r6
 80097e4:	4638      	mov	r0, r7
 80097e6:	4798      	blx	r3
 80097e8:	6923      	ldr	r3, [r4, #16]
 80097ea:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	f1a5 0b02 	sub.w	fp, r5, #2
 80097f4:	6123      	str	r3, [r4, #16]
 80097f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097fa:	4632      	mov	r2, r6
 80097fc:	4638      	mov	r0, r7
 80097fe:	4798      	blx	r3
 8009800:	465d      	mov	r5, fp
 8009802:	6826      	ldr	r6, [r4, #0]
 8009804:	f016 0610 	ands.w	r6, r6, #16
 8009808:	d17a      	bne.n	8009900 <_scanf_float+0x3bc>
 800980a:	702e      	strb	r6, [r5, #0]
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009816:	d142      	bne.n	800989e <_scanf_float+0x35a>
 8009818:	9b02      	ldr	r3, [sp, #8]
 800981a:	eba9 0303 	sub.w	r3, r9, r3
 800981e:	425a      	negs	r2, r3
 8009820:	2b00      	cmp	r3, #0
 8009822:	d149      	bne.n	80098b8 <_scanf_float+0x374>
 8009824:	2200      	movs	r2, #0
 8009826:	4641      	mov	r1, r8
 8009828:	4638      	mov	r0, r7
 800982a:	f000 ffb5 	bl	800a798 <_strtod_r>
 800982e:	6825      	ldr	r5, [r4, #0]
 8009830:	f8da 3000 	ldr.w	r3, [sl]
 8009834:	f015 0f02 	tst.w	r5, #2
 8009838:	f103 0204 	add.w	r2, r3, #4
 800983c:	ec59 8b10 	vmov	r8, r9, d0
 8009840:	f8ca 2000 	str.w	r2, [sl]
 8009844:	d043      	beq.n	80098ce <_scanf_float+0x38a>
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	e9c3 8900 	strd	r8, r9, [r3]
 800984c:	68e3      	ldr	r3, [r4, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60e3      	str	r3, [r4, #12]
 8009852:	e6be      	b.n	80095d2 <_scanf_float+0x8e>
 8009854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009858:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800985c:	4632      	mov	r2, r6
 800985e:	4638      	mov	r0, r7
 8009860:	4798      	blx	r3
 8009862:	6923      	ldr	r3, [r4, #16]
 8009864:	3b01      	subs	r3, #1
 8009866:	6123      	str	r3, [r4, #16]
 8009868:	e7a6      	b.n	80097b8 <_scanf_float+0x274>
 800986a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800986e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009872:	4632      	mov	r2, r6
 8009874:	4638      	mov	r0, r7
 8009876:	4798      	blx	r3
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	3b01      	subs	r3, #1
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	4545      	cmp	r5, r8
 8009880:	d8f3      	bhi.n	800986a <_scanf_float+0x326>
 8009882:	e6a5      	b.n	80095d0 <_scanf_float+0x8c>
 8009884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009888:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800988c:	4632      	mov	r2, r6
 800988e:	4638      	mov	r0, r7
 8009890:	4798      	blx	r3
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	3b01      	subs	r3, #1
 8009896:	6123      	str	r3, [r4, #16]
 8009898:	4545      	cmp	r5, r8
 800989a:	d8f3      	bhi.n	8009884 <_scanf_float+0x340>
 800989c:	e698      	b.n	80095d0 <_scanf_float+0x8c>
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0bf      	beq.n	8009824 <_scanf_float+0x2e0>
 80098a4:	9904      	ldr	r1, [sp, #16]
 80098a6:	230a      	movs	r3, #10
 80098a8:	4632      	mov	r2, r6
 80098aa:	3101      	adds	r1, #1
 80098ac:	4638      	mov	r0, r7
 80098ae:	f000 ffff 	bl	800a8b0 <_strtol_r>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	9d04      	ldr	r5, [sp, #16]
 80098b6:	1ac2      	subs	r2, r0, r3
 80098b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80098bc:	429d      	cmp	r5, r3
 80098be:	bf28      	it	cs
 80098c0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80098c4:	490f      	ldr	r1, [pc, #60]	; (8009904 <_scanf_float+0x3c0>)
 80098c6:	4628      	mov	r0, r5
 80098c8:	f000 f8b0 	bl	8009a2c <siprintf>
 80098cc:	e7aa      	b.n	8009824 <_scanf_float+0x2e0>
 80098ce:	f015 0504 	ands.w	r5, r5, #4
 80098d2:	d1b8      	bne.n	8009846 <_scanf_float+0x302>
 80098d4:	681f      	ldr	r7, [r3, #0]
 80098d6:	ee10 2a10 	vmov	r2, s0
 80098da:	464b      	mov	r3, r9
 80098dc:	ee10 0a10 	vmov	r0, s0
 80098e0:	4649      	mov	r1, r9
 80098e2:	f7f7 f92b 	bl	8000b3c <__aeabi_dcmpun>
 80098e6:	b128      	cbz	r0, 80098f4 <_scanf_float+0x3b0>
 80098e8:	4628      	mov	r0, r5
 80098ea:	f000 f899 	bl	8009a20 <nanf>
 80098ee:	ed87 0a00 	vstr	s0, [r7]
 80098f2:	e7ab      	b.n	800984c <_scanf_float+0x308>
 80098f4:	4640      	mov	r0, r8
 80098f6:	4649      	mov	r1, r9
 80098f8:	f7f7 f97e 	bl	8000bf8 <__aeabi_d2f>
 80098fc:	6038      	str	r0, [r7, #0]
 80098fe:	e7a5      	b.n	800984c <_scanf_float+0x308>
 8009900:	2600      	movs	r6, #0
 8009902:	e666      	b.n	80095d2 <_scanf_float+0x8e>
 8009904:	080104e2 	.word	0x080104e2

08009908 <iprintf>:
 8009908:	b40f      	push	{r0, r1, r2, r3}
 800990a:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <iprintf+0x2c>)
 800990c:	b513      	push	{r0, r1, r4, lr}
 800990e:	681c      	ldr	r4, [r3, #0]
 8009910:	b124      	cbz	r4, 800991c <iprintf+0x14>
 8009912:	69a3      	ldr	r3, [r4, #24]
 8009914:	b913      	cbnz	r3, 800991c <iprintf+0x14>
 8009916:	4620      	mov	r0, r4
 8009918:	f001 fff2 	bl	800b900 <__sinit>
 800991c:	ab05      	add	r3, sp, #20
 800991e:	9a04      	ldr	r2, [sp, #16]
 8009920:	68a1      	ldr	r1, [r4, #8]
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	4620      	mov	r0, r4
 8009926:	f003 fb85 	bl	800d034 <_vfiprintf_r>
 800992a:	b002      	add	sp, #8
 800992c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009930:	b004      	add	sp, #16
 8009932:	4770      	bx	lr
 8009934:	20000188 	.word	0x20000188

08009938 <_puts_r>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	460e      	mov	r6, r1
 800993c:	4605      	mov	r5, r0
 800993e:	b118      	cbz	r0, 8009948 <_puts_r+0x10>
 8009940:	6983      	ldr	r3, [r0, #24]
 8009942:	b90b      	cbnz	r3, 8009948 <_puts_r+0x10>
 8009944:	f001 ffdc 	bl	800b900 <__sinit>
 8009948:	69ab      	ldr	r3, [r5, #24]
 800994a:	68ac      	ldr	r4, [r5, #8]
 800994c:	b913      	cbnz	r3, 8009954 <_puts_r+0x1c>
 800994e:	4628      	mov	r0, r5
 8009950:	f001 ffd6 	bl	800b900 <__sinit>
 8009954:	4b23      	ldr	r3, [pc, #140]	; (80099e4 <_puts_r+0xac>)
 8009956:	429c      	cmp	r4, r3
 8009958:	d117      	bne.n	800998a <_puts_r+0x52>
 800995a:	686c      	ldr	r4, [r5, #4]
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	071b      	lsls	r3, r3, #28
 8009960:	d51d      	bpl.n	800999e <_puts_r+0x66>
 8009962:	6923      	ldr	r3, [r4, #16]
 8009964:	b1db      	cbz	r3, 800999e <_puts_r+0x66>
 8009966:	3e01      	subs	r6, #1
 8009968:	68a3      	ldr	r3, [r4, #8]
 800996a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800996e:	3b01      	subs	r3, #1
 8009970:	60a3      	str	r3, [r4, #8]
 8009972:	b9e9      	cbnz	r1, 80099b0 <_puts_r+0x78>
 8009974:	2b00      	cmp	r3, #0
 8009976:	da2e      	bge.n	80099d6 <_puts_r+0x9e>
 8009978:	4622      	mov	r2, r4
 800997a:	210a      	movs	r1, #10
 800997c:	4628      	mov	r0, r5
 800997e:	f000 ffa9 	bl	800a8d4 <__swbuf_r>
 8009982:	3001      	adds	r0, #1
 8009984:	d011      	beq.n	80099aa <_puts_r+0x72>
 8009986:	200a      	movs	r0, #10
 8009988:	e011      	b.n	80099ae <_puts_r+0x76>
 800998a:	4b17      	ldr	r3, [pc, #92]	; (80099e8 <_puts_r+0xb0>)
 800998c:	429c      	cmp	r4, r3
 800998e:	d101      	bne.n	8009994 <_puts_r+0x5c>
 8009990:	68ac      	ldr	r4, [r5, #8]
 8009992:	e7e3      	b.n	800995c <_puts_r+0x24>
 8009994:	4b15      	ldr	r3, [pc, #84]	; (80099ec <_puts_r+0xb4>)
 8009996:	429c      	cmp	r4, r3
 8009998:	bf08      	it	eq
 800999a:	68ec      	ldreq	r4, [r5, #12]
 800999c:	e7de      	b.n	800995c <_puts_r+0x24>
 800999e:	4621      	mov	r1, r4
 80099a0:	4628      	mov	r0, r5
 80099a2:	f000 fffb 	bl	800a99c <__swsetup_r>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d0dd      	beq.n	8009966 <_puts_r+0x2e>
 80099aa:	f04f 30ff 	mov.w	r0, #4294967295
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	da04      	bge.n	80099be <_puts_r+0x86>
 80099b4:	69a2      	ldr	r2, [r4, #24]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	dc06      	bgt.n	80099c8 <_puts_r+0x90>
 80099ba:	290a      	cmp	r1, #10
 80099bc:	d004      	beq.n	80099c8 <_puts_r+0x90>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	6022      	str	r2, [r4, #0]
 80099c4:	7019      	strb	r1, [r3, #0]
 80099c6:	e7cf      	b.n	8009968 <_puts_r+0x30>
 80099c8:	4622      	mov	r2, r4
 80099ca:	4628      	mov	r0, r5
 80099cc:	f000 ff82 	bl	800a8d4 <__swbuf_r>
 80099d0:	3001      	adds	r0, #1
 80099d2:	d1c9      	bne.n	8009968 <_puts_r+0x30>
 80099d4:	e7e9      	b.n	80099aa <_puts_r+0x72>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	200a      	movs	r0, #10
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	6022      	str	r2, [r4, #0]
 80099de:	7018      	strb	r0, [r3, #0]
 80099e0:	e7e5      	b.n	80099ae <_puts_r+0x76>
 80099e2:	bf00      	nop
 80099e4:	08010568 	.word	0x08010568
 80099e8:	08010588 	.word	0x08010588
 80099ec:	08010548 	.word	0x08010548

080099f0 <puts>:
 80099f0:	4b02      	ldr	r3, [pc, #8]	; (80099fc <puts+0xc>)
 80099f2:	4601      	mov	r1, r0
 80099f4:	6818      	ldr	r0, [r3, #0]
 80099f6:	f7ff bf9f 	b.w	8009938 <_puts_r>
 80099fa:	bf00      	nop
 80099fc:	20000188 	.word	0x20000188

08009a00 <_sbrk_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4c06      	ldr	r4, [pc, #24]	; (8009a1c <_sbrk_r+0x1c>)
 8009a04:	2300      	movs	r3, #0
 8009a06:	4605      	mov	r5, r0
 8009a08:	4608      	mov	r0, r1
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	f7f8 f93a 	bl	8001c84 <_sbrk>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d102      	bne.n	8009a1a <_sbrk_r+0x1a>
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	b103      	cbz	r3, 8009a1a <_sbrk_r+0x1a>
 8009a18:	602b      	str	r3, [r5, #0]
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	20000f98 	.word	0x20000f98

08009a20 <nanf>:
 8009a20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009a28 <nanf+0x8>
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	7fc00000 	.word	0x7fc00000

08009a2c <siprintf>:
 8009a2c:	b40e      	push	{r1, r2, r3}
 8009a2e:	b500      	push	{lr}
 8009a30:	b09c      	sub	sp, #112	; 0x70
 8009a32:	ab1d      	add	r3, sp, #116	; 0x74
 8009a34:	9002      	str	r0, [sp, #8]
 8009a36:	9006      	str	r0, [sp, #24]
 8009a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a3c:	4809      	ldr	r0, [pc, #36]	; (8009a64 <siprintf+0x38>)
 8009a3e:	9107      	str	r1, [sp, #28]
 8009a40:	9104      	str	r1, [sp, #16]
 8009a42:	4909      	ldr	r1, [pc, #36]	; (8009a68 <siprintf+0x3c>)
 8009a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a48:	9105      	str	r1, [sp, #20]
 8009a4a:	6800      	ldr	r0, [r0, #0]
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	a902      	add	r1, sp, #8
 8009a50:	f003 f824 	bl	800ca9c <_svfiprintf_r>
 8009a54:	9b02      	ldr	r3, [sp, #8]
 8009a56:	2200      	movs	r2, #0
 8009a58:	701a      	strb	r2, [r3, #0]
 8009a5a:	b01c      	add	sp, #112	; 0x70
 8009a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a60:	b003      	add	sp, #12
 8009a62:	4770      	bx	lr
 8009a64:	20000188 	.word	0x20000188
 8009a68:	ffff0208 	.word	0xffff0208

08009a6c <siscanf>:
 8009a6c:	b40e      	push	{r1, r2, r3}
 8009a6e:	b530      	push	{r4, r5, lr}
 8009a70:	b09c      	sub	sp, #112	; 0x70
 8009a72:	ac1f      	add	r4, sp, #124	; 0x7c
 8009a74:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009a78:	f854 5b04 	ldr.w	r5, [r4], #4
 8009a7c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009a80:	9002      	str	r0, [sp, #8]
 8009a82:	9006      	str	r0, [sp, #24]
 8009a84:	f7f6 fbac 	bl	80001e0 <strlen>
 8009a88:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <siscanf+0x4c>)
 8009a8a:	9003      	str	r0, [sp, #12]
 8009a8c:	9007      	str	r0, [sp, #28]
 8009a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a90:	480a      	ldr	r0, [pc, #40]	; (8009abc <siscanf+0x50>)
 8009a92:	9401      	str	r4, [sp, #4]
 8009a94:	2300      	movs	r3, #0
 8009a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a98:	9314      	str	r3, [sp, #80]	; 0x50
 8009a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009aa2:	462a      	mov	r2, r5
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	a902      	add	r1, sp, #8
 8009aa8:	6800      	ldr	r0, [r0, #0]
 8009aaa:	f003 f949 	bl	800cd40 <__ssvfiscanf_r>
 8009aae:	b01c      	add	sp, #112	; 0x70
 8009ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ab4:	b003      	add	sp, #12
 8009ab6:	4770      	bx	lr
 8009ab8:	08009ae3 	.word	0x08009ae3
 8009abc:	20000188 	.word	0x20000188

08009ac0 <__sread>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac8:	f003 fd22 	bl	800d510 <_read_r>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	bfab      	itete	ge
 8009ad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ad4:	181b      	addge	r3, r3, r0
 8009ad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ada:	bfac      	ite	ge
 8009adc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ade:	81a3      	strhlt	r3, [r4, #12]
 8009ae0:	bd10      	pop	{r4, pc}

08009ae2 <__seofread>:
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	4770      	bx	lr

08009ae6 <__swrite>:
 8009ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aea:	461f      	mov	r7, r3
 8009aec:	898b      	ldrh	r3, [r1, #12]
 8009aee:	05db      	lsls	r3, r3, #23
 8009af0:	4605      	mov	r5, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	4616      	mov	r6, r2
 8009af6:	d505      	bpl.n	8009b04 <__swrite+0x1e>
 8009af8:	2302      	movs	r3, #2
 8009afa:	2200      	movs	r2, #0
 8009afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b00:	f002 fad0 	bl	800c0a4 <_lseek_r>
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b0e:	81a3      	strh	r3, [r4, #12]
 8009b10:	4632      	mov	r2, r6
 8009b12:	463b      	mov	r3, r7
 8009b14:	4628      	mov	r0, r5
 8009b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1a:	f000 bf2d 	b.w	800a978 <_write_r>

08009b1e <__sseek>:
 8009b1e:	b510      	push	{r4, lr}
 8009b20:	460c      	mov	r4, r1
 8009b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b26:	f002 fabd 	bl	800c0a4 <_lseek_r>
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	bf15      	itete	ne
 8009b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b3a:	81a3      	strheq	r3, [r4, #12]
 8009b3c:	bf18      	it	ne
 8009b3e:	81a3      	strhne	r3, [r4, #12]
 8009b40:	bd10      	pop	{r4, pc}

08009b42 <__sclose>:
 8009b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b46:	f000 bf97 	b.w	800aa78 <_close_r>

08009b4a <strlcpy>:
 8009b4a:	b510      	push	{r4, lr}
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	b162      	cbz	r2, 8009b6a <strlcpy+0x20>
 8009b50:	3a01      	subs	r2, #1
 8009b52:	d008      	beq.n	8009b66 <strlcpy+0x1c>
 8009b54:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009b58:	f800 4b01 	strb.w	r4, [r0], #1
 8009b5c:	2c00      	cmp	r4, #0
 8009b5e:	d1f7      	bne.n	8009b50 <strlcpy+0x6>
 8009b60:	1a58      	subs	r0, r3, r1
 8009b62:	3801      	subs	r0, #1
 8009b64:	bd10      	pop	{r4, pc}
 8009b66:	2200      	movs	r2, #0
 8009b68:	7002      	strb	r2, [r0, #0]
 8009b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b6e:	2a00      	cmp	r2, #0
 8009b70:	d1fb      	bne.n	8009b6a <strlcpy+0x20>
 8009b72:	e7f5      	b.n	8009b60 <strlcpy+0x16>

08009b74 <sulp>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	4604      	mov	r4, r0
 8009b78:	460d      	mov	r5, r1
 8009b7a:	ec45 4b10 	vmov	d0, r4, r5
 8009b7e:	4616      	mov	r6, r2
 8009b80:	f002 fdf0 	bl	800c764 <__ulp>
 8009b84:	ec51 0b10 	vmov	r0, r1, d0
 8009b88:	b17e      	cbz	r6, 8009baa <sulp+0x36>
 8009b8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009b8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	dd09      	ble.n	8009baa <sulp+0x36>
 8009b96:	051b      	lsls	r3, r3, #20
 8009b98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b9c:	2400      	movs	r4, #0
 8009b9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009ba2:	4622      	mov	r2, r4
 8009ba4:	462b      	mov	r3, r5
 8009ba6:	f7f6 fd2f 	bl	8000608 <__aeabi_dmul>
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	0000      	movs	r0, r0
	...

08009bb0 <_strtod_l>:
 8009bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	461f      	mov	r7, r3
 8009bb6:	b0a1      	sub	sp, #132	; 0x84
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4681      	mov	r9, r0
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	460e      	mov	r6, r1
 8009bc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bc2:	931c      	str	r3, [sp, #112]	; 0x70
 8009bc4:	f002 fa5e 	bl	800c084 <__localeconv_l>
 8009bc8:	4680      	mov	r8, r0
 8009bca:	6800      	ldr	r0, [r0, #0]
 8009bcc:	f7f6 fb08 	bl	80001e0 <strlen>
 8009bd0:	f04f 0a00 	mov.w	sl, #0
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	f04f 0b00 	mov.w	fp, #0
 8009bda:	961b      	str	r6, [sp, #108]	; 0x6c
 8009bdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bde:	781a      	ldrb	r2, [r3, #0]
 8009be0:	2a0d      	cmp	r2, #13
 8009be2:	d832      	bhi.n	8009c4a <_strtod_l+0x9a>
 8009be4:	2a09      	cmp	r2, #9
 8009be6:	d236      	bcs.n	8009c56 <_strtod_l+0xa6>
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	d03e      	beq.n	8009c6a <_strtod_l+0xba>
 8009bec:	2300      	movs	r3, #0
 8009bee:	930d      	str	r3, [sp, #52]	; 0x34
 8009bf0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009bf2:	782b      	ldrb	r3, [r5, #0]
 8009bf4:	2b30      	cmp	r3, #48	; 0x30
 8009bf6:	f040 80ac 	bne.w	8009d52 <_strtod_l+0x1a2>
 8009bfa:	786b      	ldrb	r3, [r5, #1]
 8009bfc:	2b58      	cmp	r3, #88	; 0x58
 8009bfe:	d001      	beq.n	8009c04 <_strtod_l+0x54>
 8009c00:	2b78      	cmp	r3, #120	; 0x78
 8009c02:	d167      	bne.n	8009cd4 <_strtod_l+0x124>
 8009c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	ab1c      	add	r3, sp, #112	; 0x70
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	9702      	str	r7, [sp, #8]
 8009c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c10:	4a88      	ldr	r2, [pc, #544]	; (8009e34 <_strtod_l+0x284>)
 8009c12:	a91b      	add	r1, sp, #108	; 0x6c
 8009c14:	4648      	mov	r0, r9
 8009c16:	f001 ff4c 	bl	800bab2 <__gethex>
 8009c1a:	f010 0407 	ands.w	r4, r0, #7
 8009c1e:	4606      	mov	r6, r0
 8009c20:	d005      	beq.n	8009c2e <_strtod_l+0x7e>
 8009c22:	2c06      	cmp	r4, #6
 8009c24:	d12b      	bne.n	8009c7e <_strtod_l+0xce>
 8009c26:	3501      	adds	r5, #1
 8009c28:	2300      	movs	r3, #0
 8009c2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8009c2c:	930d      	str	r3, [sp, #52]	; 0x34
 8009c2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f040 859a 	bne.w	800a76a <_strtod_l+0xbba>
 8009c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c38:	b1e3      	cbz	r3, 8009c74 <_strtod_l+0xc4>
 8009c3a:	4652      	mov	r2, sl
 8009c3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c40:	ec43 2b10 	vmov	d0, r2, r3
 8009c44:	b021      	add	sp, #132	; 0x84
 8009c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4a:	2a2b      	cmp	r2, #43	; 0x2b
 8009c4c:	d015      	beq.n	8009c7a <_strtod_l+0xca>
 8009c4e:	2a2d      	cmp	r2, #45	; 0x2d
 8009c50:	d004      	beq.n	8009c5c <_strtod_l+0xac>
 8009c52:	2a20      	cmp	r2, #32
 8009c54:	d1ca      	bne.n	8009bec <_strtod_l+0x3c>
 8009c56:	3301      	adds	r3, #1
 8009c58:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c5a:	e7bf      	b.n	8009bdc <_strtod_l+0x2c>
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	920d      	str	r2, [sp, #52]	; 0x34
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c64:	785b      	ldrb	r3, [r3, #1]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1c2      	bne.n	8009bf0 <_strtod_l+0x40>
 8009c6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f040 8579 	bne.w	800a766 <_strtod_l+0xbb6>
 8009c74:	4652      	mov	r2, sl
 8009c76:	465b      	mov	r3, fp
 8009c78:	e7e2      	b.n	8009c40 <_strtod_l+0x90>
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	e7ef      	b.n	8009c5e <_strtod_l+0xae>
 8009c7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c80:	b13a      	cbz	r2, 8009c92 <_strtod_l+0xe2>
 8009c82:	2135      	movs	r1, #53	; 0x35
 8009c84:	a81e      	add	r0, sp, #120	; 0x78
 8009c86:	f002 fe65 	bl	800c954 <__copybits>
 8009c8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c8c:	4648      	mov	r0, r9
 8009c8e:	f002 fad2 	bl	800c236 <_Bfree>
 8009c92:	3c01      	subs	r4, #1
 8009c94:	2c04      	cmp	r4, #4
 8009c96:	d806      	bhi.n	8009ca6 <_strtod_l+0xf6>
 8009c98:	e8df f004 	tbb	[pc, r4]
 8009c9c:	1714030a 	.word	0x1714030a
 8009ca0:	0a          	.byte	0x0a
 8009ca1:	00          	.byte	0x00
 8009ca2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8009ca6:	0730      	lsls	r0, r6, #28
 8009ca8:	d5c1      	bpl.n	8009c2e <_strtod_l+0x7e>
 8009caa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009cae:	e7be      	b.n	8009c2e <_strtod_l+0x7e>
 8009cb0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8009cb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009cb6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009cba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009cbe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009cc2:	e7f0      	b.n	8009ca6 <_strtod_l+0xf6>
 8009cc4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009e38 <_strtod_l+0x288>
 8009cc8:	e7ed      	b.n	8009ca6 <_strtod_l+0xf6>
 8009cca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009cce:	f04f 3aff 	mov.w	sl, #4294967295
 8009cd2:	e7e8      	b.n	8009ca6 <_strtod_l+0xf6>
 8009cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8009cda:	785b      	ldrb	r3, [r3, #1]
 8009cdc:	2b30      	cmp	r3, #48	; 0x30
 8009cde:	d0f9      	beq.n	8009cd4 <_strtod_l+0x124>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0a4      	beq.n	8009c2e <_strtod_l+0x7e>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	2500      	movs	r5, #0
 8009ce8:	9306      	str	r3, [sp, #24]
 8009cea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cec:	9308      	str	r3, [sp, #32]
 8009cee:	9507      	str	r5, [sp, #28]
 8009cf0:	9505      	str	r5, [sp, #20]
 8009cf2:	220a      	movs	r2, #10
 8009cf4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009cf6:	7807      	ldrb	r7, [r0, #0]
 8009cf8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009cfc:	b2d9      	uxtb	r1, r3
 8009cfe:	2909      	cmp	r1, #9
 8009d00:	d929      	bls.n	8009d56 <_strtod_l+0x1a6>
 8009d02:	4622      	mov	r2, r4
 8009d04:	f8d8 1000 	ldr.w	r1, [r8]
 8009d08:	f003 fc46 	bl	800d598 <strncmp>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d031      	beq.n	8009d74 <_strtod_l+0x1c4>
 8009d10:	2000      	movs	r0, #0
 8009d12:	9c05      	ldr	r4, [sp, #20]
 8009d14:	9004      	str	r0, [sp, #16]
 8009d16:	463b      	mov	r3, r7
 8009d18:	4602      	mov	r2, r0
 8009d1a:	2b65      	cmp	r3, #101	; 0x65
 8009d1c:	d001      	beq.n	8009d22 <_strtod_l+0x172>
 8009d1e:	2b45      	cmp	r3, #69	; 0x45
 8009d20:	d114      	bne.n	8009d4c <_strtod_l+0x19c>
 8009d22:	b924      	cbnz	r4, 8009d2e <_strtod_l+0x17e>
 8009d24:	b910      	cbnz	r0, 8009d2c <_strtod_l+0x17c>
 8009d26:	9b06      	ldr	r3, [sp, #24]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d09e      	beq.n	8009c6a <_strtod_l+0xba>
 8009d2c:	2400      	movs	r4, #0
 8009d2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009d30:	1c73      	adds	r3, r6, #1
 8009d32:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d34:	7873      	ldrb	r3, [r6, #1]
 8009d36:	2b2b      	cmp	r3, #43	; 0x2b
 8009d38:	d078      	beq.n	8009e2c <_strtod_l+0x27c>
 8009d3a:	2b2d      	cmp	r3, #45	; 0x2d
 8009d3c:	d070      	beq.n	8009e20 <_strtod_l+0x270>
 8009d3e:	f04f 0c00 	mov.w	ip, #0
 8009d42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009d46:	2f09      	cmp	r7, #9
 8009d48:	d97c      	bls.n	8009e44 <_strtod_l+0x294>
 8009d4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8009d4c:	f04f 0e00 	mov.w	lr, #0
 8009d50:	e09a      	b.n	8009e88 <_strtod_l+0x2d8>
 8009d52:	2300      	movs	r3, #0
 8009d54:	e7c7      	b.n	8009ce6 <_strtod_l+0x136>
 8009d56:	9905      	ldr	r1, [sp, #20]
 8009d58:	2908      	cmp	r1, #8
 8009d5a:	bfdd      	ittte	le
 8009d5c:	9907      	ldrle	r1, [sp, #28]
 8009d5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d62:	9307      	strle	r3, [sp, #28]
 8009d64:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009d68:	9b05      	ldr	r3, [sp, #20]
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	901b      	str	r0, [sp, #108]	; 0x6c
 8009d72:	e7bf      	b.n	8009cf4 <_strtod_l+0x144>
 8009d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d76:	191a      	adds	r2, r3, r4
 8009d78:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d7a:	9a05      	ldr	r2, [sp, #20]
 8009d7c:	5d1b      	ldrb	r3, [r3, r4]
 8009d7e:	2a00      	cmp	r2, #0
 8009d80:	d037      	beq.n	8009df2 <_strtod_l+0x242>
 8009d82:	9c05      	ldr	r4, [sp, #20]
 8009d84:	4602      	mov	r2, r0
 8009d86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009d8a:	2909      	cmp	r1, #9
 8009d8c:	d913      	bls.n	8009db6 <_strtod_l+0x206>
 8009d8e:	2101      	movs	r1, #1
 8009d90:	9104      	str	r1, [sp, #16]
 8009d92:	e7c2      	b.n	8009d1a <_strtod_l+0x16a>
 8009d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d9a:	785b      	ldrb	r3, [r3, #1]
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	2b30      	cmp	r3, #48	; 0x30
 8009da0:	d0f8      	beq.n	8009d94 <_strtod_l+0x1e4>
 8009da2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009da6:	2a08      	cmp	r2, #8
 8009da8:	f200 84e4 	bhi.w	800a774 <_strtod_l+0xbc4>
 8009dac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009dae:	9208      	str	r2, [sp, #32]
 8009db0:	4602      	mov	r2, r0
 8009db2:	2000      	movs	r0, #0
 8009db4:	4604      	mov	r4, r0
 8009db6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009dba:	f100 0101 	add.w	r1, r0, #1
 8009dbe:	d012      	beq.n	8009de6 <_strtod_l+0x236>
 8009dc0:	440a      	add	r2, r1
 8009dc2:	eb00 0c04 	add.w	ip, r0, r4
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	270a      	movs	r7, #10
 8009dca:	458c      	cmp	ip, r1
 8009dcc:	d113      	bne.n	8009df6 <_strtod_l+0x246>
 8009dce:	1821      	adds	r1, r4, r0
 8009dd0:	2908      	cmp	r1, #8
 8009dd2:	f104 0401 	add.w	r4, r4, #1
 8009dd6:	4404      	add	r4, r0
 8009dd8:	dc19      	bgt.n	8009e0e <_strtod_l+0x25e>
 8009dda:	9b07      	ldr	r3, [sp, #28]
 8009ddc:	210a      	movs	r1, #10
 8009dde:	fb01 e303 	mla	r3, r1, r3, lr
 8009de2:	9307      	str	r3, [sp, #28]
 8009de4:	2100      	movs	r1, #0
 8009de6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009de8:	1c58      	adds	r0, r3, #1
 8009dea:	901b      	str	r0, [sp, #108]	; 0x6c
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	4608      	mov	r0, r1
 8009df0:	e7c9      	b.n	8009d86 <_strtod_l+0x1d6>
 8009df2:	9805      	ldr	r0, [sp, #20]
 8009df4:	e7d3      	b.n	8009d9e <_strtod_l+0x1ee>
 8009df6:	2908      	cmp	r1, #8
 8009df8:	f101 0101 	add.w	r1, r1, #1
 8009dfc:	dc03      	bgt.n	8009e06 <_strtod_l+0x256>
 8009dfe:	9b07      	ldr	r3, [sp, #28]
 8009e00:	437b      	muls	r3, r7
 8009e02:	9307      	str	r3, [sp, #28]
 8009e04:	e7e1      	b.n	8009dca <_strtod_l+0x21a>
 8009e06:	2910      	cmp	r1, #16
 8009e08:	bfd8      	it	le
 8009e0a:	437d      	mulle	r5, r7
 8009e0c:	e7dd      	b.n	8009dca <_strtod_l+0x21a>
 8009e0e:	2c10      	cmp	r4, #16
 8009e10:	bfdc      	itt	le
 8009e12:	210a      	movle	r1, #10
 8009e14:	fb01 e505 	mlale	r5, r1, r5, lr
 8009e18:	e7e4      	b.n	8009de4 <_strtod_l+0x234>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	9304      	str	r3, [sp, #16]
 8009e1e:	e781      	b.n	8009d24 <_strtod_l+0x174>
 8009e20:	f04f 0c01 	mov.w	ip, #1
 8009e24:	1cb3      	adds	r3, r6, #2
 8009e26:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e28:	78b3      	ldrb	r3, [r6, #2]
 8009e2a:	e78a      	b.n	8009d42 <_strtod_l+0x192>
 8009e2c:	f04f 0c00 	mov.w	ip, #0
 8009e30:	e7f8      	b.n	8009e24 <_strtod_l+0x274>
 8009e32:	bf00      	nop
 8009e34:	080104e8 	.word	0x080104e8
 8009e38:	7ff00000 	.word	0x7ff00000
 8009e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e3e:	1c5f      	adds	r7, r3, #1
 8009e40:	971b      	str	r7, [sp, #108]	; 0x6c
 8009e42:	785b      	ldrb	r3, [r3, #1]
 8009e44:	2b30      	cmp	r3, #48	; 0x30
 8009e46:	d0f9      	beq.n	8009e3c <_strtod_l+0x28c>
 8009e48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009e4c:	2f08      	cmp	r7, #8
 8009e4e:	f63f af7d 	bhi.w	8009d4c <_strtod_l+0x19c>
 8009e52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009e56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e58:	930a      	str	r3, [sp, #40]	; 0x28
 8009e5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e5c:	1c5f      	adds	r7, r3, #1
 8009e5e:	971b      	str	r7, [sp, #108]	; 0x6c
 8009e60:	785b      	ldrb	r3, [r3, #1]
 8009e62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009e66:	f1b8 0f09 	cmp.w	r8, #9
 8009e6a:	d937      	bls.n	8009edc <_strtod_l+0x32c>
 8009e6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e6e:	1a7f      	subs	r7, r7, r1
 8009e70:	2f08      	cmp	r7, #8
 8009e72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009e76:	dc37      	bgt.n	8009ee8 <_strtod_l+0x338>
 8009e78:	45be      	cmp	lr, r7
 8009e7a:	bfa8      	it	ge
 8009e7c:	46be      	movge	lr, r7
 8009e7e:	f1bc 0f00 	cmp.w	ip, #0
 8009e82:	d001      	beq.n	8009e88 <_strtod_l+0x2d8>
 8009e84:	f1ce 0e00 	rsb	lr, lr, #0
 8009e88:	2c00      	cmp	r4, #0
 8009e8a:	d151      	bne.n	8009f30 <_strtod_l+0x380>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f47f aece 	bne.w	8009c2e <_strtod_l+0x7e>
 8009e92:	9a06      	ldr	r2, [sp, #24]
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	f47f aeca 	bne.w	8009c2e <_strtod_l+0x7e>
 8009e9a:	9a04      	ldr	r2, [sp, #16]
 8009e9c:	2a00      	cmp	r2, #0
 8009e9e:	f47f aee4 	bne.w	8009c6a <_strtod_l+0xba>
 8009ea2:	2b4e      	cmp	r3, #78	; 0x4e
 8009ea4:	d027      	beq.n	8009ef6 <_strtod_l+0x346>
 8009ea6:	dc21      	bgt.n	8009eec <_strtod_l+0x33c>
 8009ea8:	2b49      	cmp	r3, #73	; 0x49
 8009eaa:	f47f aede 	bne.w	8009c6a <_strtod_l+0xba>
 8009eae:	49a0      	ldr	r1, [pc, #640]	; (800a130 <_strtod_l+0x580>)
 8009eb0:	a81b      	add	r0, sp, #108	; 0x6c
 8009eb2:	f002 f831 	bl	800bf18 <__match>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f43f aed7 	beq.w	8009c6a <_strtod_l+0xba>
 8009ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ebe:	499d      	ldr	r1, [pc, #628]	; (800a134 <_strtod_l+0x584>)
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	a81b      	add	r0, sp, #108	; 0x6c
 8009ec4:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ec6:	f002 f827 	bl	800bf18 <__match>
 8009eca:	b910      	cbnz	r0, 8009ed2 <_strtod_l+0x322>
 8009ecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ece:	3301      	adds	r3, #1
 8009ed0:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ed2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800a148 <_strtod_l+0x598>
 8009ed6:	f04f 0a00 	mov.w	sl, #0
 8009eda:	e6a8      	b.n	8009c2e <_strtod_l+0x7e>
 8009edc:	210a      	movs	r1, #10
 8009ede:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009ee2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009ee6:	e7b8      	b.n	8009e5a <_strtod_l+0x2aa>
 8009ee8:	46be      	mov	lr, r7
 8009eea:	e7c8      	b.n	8009e7e <_strtod_l+0x2ce>
 8009eec:	2b69      	cmp	r3, #105	; 0x69
 8009eee:	d0de      	beq.n	8009eae <_strtod_l+0x2fe>
 8009ef0:	2b6e      	cmp	r3, #110	; 0x6e
 8009ef2:	f47f aeba 	bne.w	8009c6a <_strtod_l+0xba>
 8009ef6:	4990      	ldr	r1, [pc, #576]	; (800a138 <_strtod_l+0x588>)
 8009ef8:	a81b      	add	r0, sp, #108	; 0x6c
 8009efa:	f002 f80d 	bl	800bf18 <__match>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	f43f aeb3 	beq.w	8009c6a <_strtod_l+0xba>
 8009f04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b28      	cmp	r3, #40	; 0x28
 8009f0a:	d10e      	bne.n	8009f2a <_strtod_l+0x37a>
 8009f0c:	aa1e      	add	r2, sp, #120	; 0x78
 8009f0e:	498b      	ldr	r1, [pc, #556]	; (800a13c <_strtod_l+0x58c>)
 8009f10:	a81b      	add	r0, sp, #108	; 0x6c
 8009f12:	f002 f815 	bl	800bf40 <__hexnan>
 8009f16:	2805      	cmp	r0, #5
 8009f18:	d107      	bne.n	8009f2a <_strtod_l+0x37a>
 8009f1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f1c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009f20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009f24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009f28:	e681      	b.n	8009c2e <_strtod_l+0x7e>
 8009f2a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800a150 <_strtod_l+0x5a0>
 8009f2e:	e7d2      	b.n	8009ed6 <_strtod_l+0x326>
 8009f30:	ebae 0302 	sub.w	r3, lr, r2
 8009f34:	9306      	str	r3, [sp, #24]
 8009f36:	9b05      	ldr	r3, [sp, #20]
 8009f38:	9807      	ldr	r0, [sp, #28]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	bf08      	it	eq
 8009f3e:	4623      	moveq	r3, r4
 8009f40:	2c10      	cmp	r4, #16
 8009f42:	9305      	str	r3, [sp, #20]
 8009f44:	46a0      	mov	r8, r4
 8009f46:	bfa8      	it	ge
 8009f48:	f04f 0810 	movge.w	r8, #16
 8009f4c:	f7f6 fae2 	bl	8000514 <__aeabi_ui2d>
 8009f50:	2c09      	cmp	r4, #9
 8009f52:	4682      	mov	sl, r0
 8009f54:	468b      	mov	fp, r1
 8009f56:	dc13      	bgt.n	8009f80 <_strtod_l+0x3d0>
 8009f58:	9b06      	ldr	r3, [sp, #24]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f43f ae67 	beq.w	8009c2e <_strtod_l+0x7e>
 8009f60:	9b06      	ldr	r3, [sp, #24]
 8009f62:	dd7a      	ble.n	800a05a <_strtod_l+0x4aa>
 8009f64:	2b16      	cmp	r3, #22
 8009f66:	dc61      	bgt.n	800a02c <_strtod_l+0x47c>
 8009f68:	4a75      	ldr	r2, [pc, #468]	; (800a140 <_strtod_l+0x590>)
 8009f6a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009f6e:	e9de 0100 	ldrd	r0, r1, [lr]
 8009f72:	4652      	mov	r2, sl
 8009f74:	465b      	mov	r3, fp
 8009f76:	f7f6 fb47 	bl	8000608 <__aeabi_dmul>
 8009f7a:	4682      	mov	sl, r0
 8009f7c:	468b      	mov	fp, r1
 8009f7e:	e656      	b.n	8009c2e <_strtod_l+0x7e>
 8009f80:	4b6f      	ldr	r3, [pc, #444]	; (800a140 <_strtod_l+0x590>)
 8009f82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009f86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f8a:	f7f6 fb3d 	bl	8000608 <__aeabi_dmul>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	4628      	mov	r0, r5
 8009f92:	460f      	mov	r7, r1
 8009f94:	f7f6 fabe 	bl	8000514 <__aeabi_ui2d>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	4639      	mov	r1, r7
 8009fa0:	f7f6 f97c 	bl	800029c <__adddf3>
 8009fa4:	2c0f      	cmp	r4, #15
 8009fa6:	4682      	mov	sl, r0
 8009fa8:	468b      	mov	fp, r1
 8009faa:	ddd5      	ble.n	8009f58 <_strtod_l+0x3a8>
 8009fac:	9b06      	ldr	r3, [sp, #24]
 8009fae:	eba4 0808 	sub.w	r8, r4, r8
 8009fb2:	4498      	add	r8, r3
 8009fb4:	f1b8 0f00 	cmp.w	r8, #0
 8009fb8:	f340 8096 	ble.w	800a0e8 <_strtod_l+0x538>
 8009fbc:	f018 030f 	ands.w	r3, r8, #15
 8009fc0:	d00a      	beq.n	8009fd8 <_strtod_l+0x428>
 8009fc2:	495f      	ldr	r1, [pc, #380]	; (800a140 <_strtod_l+0x590>)
 8009fc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fc8:	4652      	mov	r2, sl
 8009fca:	465b      	mov	r3, fp
 8009fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fd0:	f7f6 fb1a 	bl	8000608 <__aeabi_dmul>
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	468b      	mov	fp, r1
 8009fd8:	f038 080f 	bics.w	r8, r8, #15
 8009fdc:	d073      	beq.n	800a0c6 <_strtod_l+0x516>
 8009fde:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009fe2:	dd47      	ble.n	800a074 <_strtod_l+0x4c4>
 8009fe4:	2400      	movs	r4, #0
 8009fe6:	46a0      	mov	r8, r4
 8009fe8:	9407      	str	r4, [sp, #28]
 8009fea:	9405      	str	r4, [sp, #20]
 8009fec:	2322      	movs	r3, #34	; 0x22
 8009fee:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a148 <_strtod_l+0x598>
 8009ff2:	f8c9 3000 	str.w	r3, [r9]
 8009ff6:	f04f 0a00 	mov.w	sl, #0
 8009ffa:	9b07      	ldr	r3, [sp, #28]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f43f ae16 	beq.w	8009c2e <_strtod_l+0x7e>
 800a002:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a004:	4648      	mov	r0, r9
 800a006:	f002 f916 	bl	800c236 <_Bfree>
 800a00a:	9905      	ldr	r1, [sp, #20]
 800a00c:	4648      	mov	r0, r9
 800a00e:	f002 f912 	bl	800c236 <_Bfree>
 800a012:	4641      	mov	r1, r8
 800a014:	4648      	mov	r0, r9
 800a016:	f002 f90e 	bl	800c236 <_Bfree>
 800a01a:	9907      	ldr	r1, [sp, #28]
 800a01c:	4648      	mov	r0, r9
 800a01e:	f002 f90a 	bl	800c236 <_Bfree>
 800a022:	4621      	mov	r1, r4
 800a024:	4648      	mov	r0, r9
 800a026:	f002 f906 	bl	800c236 <_Bfree>
 800a02a:	e600      	b.n	8009c2e <_strtod_l+0x7e>
 800a02c:	9a06      	ldr	r2, [sp, #24]
 800a02e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a032:	4293      	cmp	r3, r2
 800a034:	dbba      	blt.n	8009fac <_strtod_l+0x3fc>
 800a036:	4d42      	ldr	r5, [pc, #264]	; (800a140 <_strtod_l+0x590>)
 800a038:	f1c4 040f 	rsb	r4, r4, #15
 800a03c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a040:	4652      	mov	r2, sl
 800a042:	465b      	mov	r3, fp
 800a044:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a048:	f7f6 fade 	bl	8000608 <__aeabi_dmul>
 800a04c:	9b06      	ldr	r3, [sp, #24]
 800a04e:	1b1c      	subs	r4, r3, r4
 800a050:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a054:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a058:	e78d      	b.n	8009f76 <_strtod_l+0x3c6>
 800a05a:	f113 0f16 	cmn.w	r3, #22
 800a05e:	dba5      	blt.n	8009fac <_strtod_l+0x3fc>
 800a060:	4a37      	ldr	r2, [pc, #220]	; (800a140 <_strtod_l+0x590>)
 800a062:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a066:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a06a:	4650      	mov	r0, sl
 800a06c:	4659      	mov	r1, fp
 800a06e:	f7f6 fbf5 	bl	800085c <__aeabi_ddiv>
 800a072:	e782      	b.n	8009f7a <_strtod_l+0x3ca>
 800a074:	2300      	movs	r3, #0
 800a076:	4e33      	ldr	r6, [pc, #204]	; (800a144 <_strtod_l+0x594>)
 800a078:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a07c:	4650      	mov	r0, sl
 800a07e:	4659      	mov	r1, fp
 800a080:	461d      	mov	r5, r3
 800a082:	f1b8 0f01 	cmp.w	r8, #1
 800a086:	dc21      	bgt.n	800a0cc <_strtod_l+0x51c>
 800a088:	b10b      	cbz	r3, 800a08e <_strtod_l+0x4de>
 800a08a:	4682      	mov	sl, r0
 800a08c:	468b      	mov	fp, r1
 800a08e:	4b2d      	ldr	r3, [pc, #180]	; (800a144 <_strtod_l+0x594>)
 800a090:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a094:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a098:	4652      	mov	r2, sl
 800a09a:	465b      	mov	r3, fp
 800a09c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a0a0:	f7f6 fab2 	bl	8000608 <__aeabi_dmul>
 800a0a4:	4b28      	ldr	r3, [pc, #160]	; (800a148 <_strtod_l+0x598>)
 800a0a6:	460a      	mov	r2, r1
 800a0a8:	400b      	ands	r3, r1
 800a0aa:	4928      	ldr	r1, [pc, #160]	; (800a14c <_strtod_l+0x59c>)
 800a0ac:	428b      	cmp	r3, r1
 800a0ae:	4682      	mov	sl, r0
 800a0b0:	d898      	bhi.n	8009fe4 <_strtod_l+0x434>
 800a0b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a0b6:	428b      	cmp	r3, r1
 800a0b8:	bf86      	itte	hi
 800a0ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a154 <_strtod_l+0x5a4>
 800a0be:	f04f 3aff 	movhi.w	sl, #4294967295
 800a0c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9304      	str	r3, [sp, #16]
 800a0ca:	e077      	b.n	800a1bc <_strtod_l+0x60c>
 800a0cc:	f018 0f01 	tst.w	r8, #1
 800a0d0:	d006      	beq.n	800a0e0 <_strtod_l+0x530>
 800a0d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0da:	f7f6 fa95 	bl	8000608 <__aeabi_dmul>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	3501      	adds	r5, #1
 800a0e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a0e6:	e7cc      	b.n	800a082 <_strtod_l+0x4d2>
 800a0e8:	d0ed      	beq.n	800a0c6 <_strtod_l+0x516>
 800a0ea:	f1c8 0800 	rsb	r8, r8, #0
 800a0ee:	f018 020f 	ands.w	r2, r8, #15
 800a0f2:	d00a      	beq.n	800a10a <_strtod_l+0x55a>
 800a0f4:	4b12      	ldr	r3, [pc, #72]	; (800a140 <_strtod_l+0x590>)
 800a0f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0fa:	4650      	mov	r0, sl
 800a0fc:	4659      	mov	r1, fp
 800a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a102:	f7f6 fbab 	bl	800085c <__aeabi_ddiv>
 800a106:	4682      	mov	sl, r0
 800a108:	468b      	mov	fp, r1
 800a10a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a10e:	d0da      	beq.n	800a0c6 <_strtod_l+0x516>
 800a110:	f1b8 0f1f 	cmp.w	r8, #31
 800a114:	dd20      	ble.n	800a158 <_strtod_l+0x5a8>
 800a116:	2400      	movs	r4, #0
 800a118:	46a0      	mov	r8, r4
 800a11a:	9407      	str	r4, [sp, #28]
 800a11c:	9405      	str	r4, [sp, #20]
 800a11e:	2322      	movs	r3, #34	; 0x22
 800a120:	f04f 0a00 	mov.w	sl, #0
 800a124:	f04f 0b00 	mov.w	fp, #0
 800a128:	f8c9 3000 	str.w	r3, [r9]
 800a12c:	e765      	b.n	8009ffa <_strtod_l+0x44a>
 800a12e:	bf00      	nop
 800a130:	080104b5 	.word	0x080104b5
 800a134:	0801053b 	.word	0x0801053b
 800a138:	080104bd 	.word	0x080104bd
 800a13c:	080104fc 	.word	0x080104fc
 800a140:	080105e0 	.word	0x080105e0
 800a144:	080105b8 	.word	0x080105b8
 800a148:	7ff00000 	.word	0x7ff00000
 800a14c:	7ca00000 	.word	0x7ca00000
 800a150:	fff80000 	.word	0xfff80000
 800a154:	7fefffff 	.word	0x7fefffff
 800a158:	f018 0310 	ands.w	r3, r8, #16
 800a15c:	bf18      	it	ne
 800a15e:	236a      	movne	r3, #106	; 0x6a
 800a160:	4da0      	ldr	r5, [pc, #640]	; (800a3e4 <_strtod_l+0x834>)
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	4650      	mov	r0, sl
 800a166:	4659      	mov	r1, fp
 800a168:	2300      	movs	r3, #0
 800a16a:	f1b8 0f00 	cmp.w	r8, #0
 800a16e:	f300 810a 	bgt.w	800a386 <_strtod_l+0x7d6>
 800a172:	b10b      	cbz	r3, 800a178 <_strtod_l+0x5c8>
 800a174:	4682      	mov	sl, r0
 800a176:	468b      	mov	fp, r1
 800a178:	9b04      	ldr	r3, [sp, #16]
 800a17a:	b1bb      	cbz	r3, 800a1ac <_strtod_l+0x5fc>
 800a17c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a180:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a184:	2b00      	cmp	r3, #0
 800a186:	4659      	mov	r1, fp
 800a188:	dd10      	ble.n	800a1ac <_strtod_l+0x5fc>
 800a18a:	2b1f      	cmp	r3, #31
 800a18c:	f340 8107 	ble.w	800a39e <_strtod_l+0x7ee>
 800a190:	2b34      	cmp	r3, #52	; 0x34
 800a192:	bfde      	ittt	le
 800a194:	3b20      	suble	r3, #32
 800a196:	f04f 32ff 	movle.w	r2, #4294967295
 800a19a:	fa02 f303 	lslle.w	r3, r2, r3
 800a19e:	f04f 0a00 	mov.w	sl, #0
 800a1a2:	bfcc      	ite	gt
 800a1a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a1a8:	ea03 0b01 	andle.w	fp, r3, r1
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	4650      	mov	r0, sl
 800a1b2:	4659      	mov	r1, fp
 800a1b4:	f7f6 fc90 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d1ac      	bne.n	800a116 <_strtod_l+0x566>
 800a1bc:	9b07      	ldr	r3, [sp, #28]
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	9a05      	ldr	r2, [sp, #20]
 800a1c2:	9908      	ldr	r1, [sp, #32]
 800a1c4:	4623      	mov	r3, r4
 800a1c6:	4648      	mov	r0, r9
 800a1c8:	f002 f887 	bl	800c2da <__s2b>
 800a1cc:	9007      	str	r0, [sp, #28]
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f43f af08 	beq.w	8009fe4 <_strtod_l+0x434>
 800a1d4:	9a06      	ldr	r2, [sp, #24]
 800a1d6:	9b06      	ldr	r3, [sp, #24]
 800a1d8:	2a00      	cmp	r2, #0
 800a1da:	f1c3 0300 	rsb	r3, r3, #0
 800a1de:	bfa8      	it	ge
 800a1e0:	2300      	movge	r3, #0
 800a1e2:	930e      	str	r3, [sp, #56]	; 0x38
 800a1e4:	2400      	movs	r4, #0
 800a1e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a1ea:	9316      	str	r3, [sp, #88]	; 0x58
 800a1ec:	46a0      	mov	r8, r4
 800a1ee:	9b07      	ldr	r3, [sp, #28]
 800a1f0:	4648      	mov	r0, r9
 800a1f2:	6859      	ldr	r1, [r3, #4]
 800a1f4:	f001 ffeb 	bl	800c1ce <_Balloc>
 800a1f8:	9005      	str	r0, [sp, #20]
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	f43f aef6 	beq.w	8009fec <_strtod_l+0x43c>
 800a200:	9b07      	ldr	r3, [sp, #28]
 800a202:	691a      	ldr	r2, [r3, #16]
 800a204:	3202      	adds	r2, #2
 800a206:	f103 010c 	add.w	r1, r3, #12
 800a20a:	0092      	lsls	r2, r2, #2
 800a20c:	300c      	adds	r0, #12
 800a20e:	f001 ffd1 	bl	800c1b4 <memcpy>
 800a212:	aa1e      	add	r2, sp, #120	; 0x78
 800a214:	a91d      	add	r1, sp, #116	; 0x74
 800a216:	ec4b ab10 	vmov	d0, sl, fp
 800a21a:	4648      	mov	r0, r9
 800a21c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a220:	f002 fb16 	bl	800c850 <__d2b>
 800a224:	901c      	str	r0, [sp, #112]	; 0x70
 800a226:	2800      	cmp	r0, #0
 800a228:	f43f aee0 	beq.w	8009fec <_strtod_l+0x43c>
 800a22c:	2101      	movs	r1, #1
 800a22e:	4648      	mov	r0, r9
 800a230:	f002 f8df 	bl	800c3f2 <__i2b>
 800a234:	4680      	mov	r8, r0
 800a236:	2800      	cmp	r0, #0
 800a238:	f43f aed8 	beq.w	8009fec <_strtod_l+0x43c>
 800a23c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a23e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a240:	2e00      	cmp	r6, #0
 800a242:	bfab      	itete	ge
 800a244:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a246:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a248:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a24a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800a24c:	bfac      	ite	ge
 800a24e:	18f7      	addge	r7, r6, r3
 800a250:	1b9d      	sublt	r5, r3, r6
 800a252:	9b04      	ldr	r3, [sp, #16]
 800a254:	1af6      	subs	r6, r6, r3
 800a256:	4416      	add	r6, r2
 800a258:	4b63      	ldr	r3, [pc, #396]	; (800a3e8 <_strtod_l+0x838>)
 800a25a:	3e01      	subs	r6, #1
 800a25c:	429e      	cmp	r6, r3
 800a25e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a262:	f280 80af 	bge.w	800a3c4 <_strtod_l+0x814>
 800a266:	1b9b      	subs	r3, r3, r6
 800a268:	2b1f      	cmp	r3, #31
 800a26a:	eba2 0203 	sub.w	r2, r2, r3
 800a26e:	f04f 0101 	mov.w	r1, #1
 800a272:	f300 809b 	bgt.w	800a3ac <_strtod_l+0x7fc>
 800a276:	fa01 f303 	lsl.w	r3, r1, r3
 800a27a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a27c:	2300      	movs	r3, #0
 800a27e:	930a      	str	r3, [sp, #40]	; 0x28
 800a280:	18be      	adds	r6, r7, r2
 800a282:	9b04      	ldr	r3, [sp, #16]
 800a284:	42b7      	cmp	r7, r6
 800a286:	4415      	add	r5, r2
 800a288:	441d      	add	r5, r3
 800a28a:	463b      	mov	r3, r7
 800a28c:	bfa8      	it	ge
 800a28e:	4633      	movge	r3, r6
 800a290:	42ab      	cmp	r3, r5
 800a292:	bfa8      	it	ge
 800a294:	462b      	movge	r3, r5
 800a296:	2b00      	cmp	r3, #0
 800a298:	bfc2      	ittt	gt
 800a29a:	1af6      	subgt	r6, r6, r3
 800a29c:	1aed      	subgt	r5, r5, r3
 800a29e:	1aff      	subgt	r7, r7, r3
 800a2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a2:	b1bb      	cbz	r3, 800a2d4 <_strtod_l+0x724>
 800a2a4:	4641      	mov	r1, r8
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	4648      	mov	r0, r9
 800a2aa:	f002 f941 	bl	800c530 <__pow5mult>
 800a2ae:	4680      	mov	r8, r0
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	f43f ae9b 	beq.w	8009fec <_strtod_l+0x43c>
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a2ba:	4648      	mov	r0, r9
 800a2bc:	f002 f8a2 	bl	800c404 <__multiply>
 800a2c0:	900c      	str	r0, [sp, #48]	; 0x30
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f43f ae92 	beq.w	8009fec <_strtod_l+0x43c>
 800a2c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a2ca:	4648      	mov	r0, r9
 800a2cc:	f001 ffb3 	bl	800c236 <_Bfree>
 800a2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2d2:	931c      	str	r3, [sp, #112]	; 0x70
 800a2d4:	2e00      	cmp	r6, #0
 800a2d6:	dc7a      	bgt.n	800a3ce <_strtod_l+0x81e>
 800a2d8:	9b06      	ldr	r3, [sp, #24]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd08      	ble.n	800a2f0 <_strtod_l+0x740>
 800a2de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2e0:	9905      	ldr	r1, [sp, #20]
 800a2e2:	4648      	mov	r0, r9
 800a2e4:	f002 f924 	bl	800c530 <__pow5mult>
 800a2e8:	9005      	str	r0, [sp, #20]
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	f43f ae7e 	beq.w	8009fec <_strtod_l+0x43c>
 800a2f0:	2d00      	cmp	r5, #0
 800a2f2:	dd08      	ble.n	800a306 <_strtod_l+0x756>
 800a2f4:	462a      	mov	r2, r5
 800a2f6:	9905      	ldr	r1, [sp, #20]
 800a2f8:	4648      	mov	r0, r9
 800a2fa:	f002 f967 	bl	800c5cc <__lshift>
 800a2fe:	9005      	str	r0, [sp, #20]
 800a300:	2800      	cmp	r0, #0
 800a302:	f43f ae73 	beq.w	8009fec <_strtod_l+0x43c>
 800a306:	2f00      	cmp	r7, #0
 800a308:	dd08      	ble.n	800a31c <_strtod_l+0x76c>
 800a30a:	4641      	mov	r1, r8
 800a30c:	463a      	mov	r2, r7
 800a30e:	4648      	mov	r0, r9
 800a310:	f002 f95c 	bl	800c5cc <__lshift>
 800a314:	4680      	mov	r8, r0
 800a316:	2800      	cmp	r0, #0
 800a318:	f43f ae68 	beq.w	8009fec <_strtod_l+0x43c>
 800a31c:	9a05      	ldr	r2, [sp, #20]
 800a31e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a320:	4648      	mov	r0, r9
 800a322:	f002 f9c1 	bl	800c6a8 <__mdiff>
 800a326:	4604      	mov	r4, r0
 800a328:	2800      	cmp	r0, #0
 800a32a:	f43f ae5f 	beq.w	8009fec <_strtod_l+0x43c>
 800a32e:	68c3      	ldr	r3, [r0, #12]
 800a330:	930c      	str	r3, [sp, #48]	; 0x30
 800a332:	2300      	movs	r3, #0
 800a334:	60c3      	str	r3, [r0, #12]
 800a336:	4641      	mov	r1, r8
 800a338:	f002 f99c 	bl	800c674 <__mcmp>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	da55      	bge.n	800a3ec <_strtod_l+0x83c>
 800a340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a342:	b9e3      	cbnz	r3, 800a37e <_strtod_l+0x7ce>
 800a344:	f1ba 0f00 	cmp.w	sl, #0
 800a348:	d119      	bne.n	800a37e <_strtod_l+0x7ce>
 800a34a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a34e:	b9b3      	cbnz	r3, 800a37e <_strtod_l+0x7ce>
 800a350:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a354:	0d1b      	lsrs	r3, r3, #20
 800a356:	051b      	lsls	r3, r3, #20
 800a358:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a35c:	d90f      	bls.n	800a37e <_strtod_l+0x7ce>
 800a35e:	6963      	ldr	r3, [r4, #20]
 800a360:	b913      	cbnz	r3, 800a368 <_strtod_l+0x7b8>
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	2b01      	cmp	r3, #1
 800a366:	dd0a      	ble.n	800a37e <_strtod_l+0x7ce>
 800a368:	4621      	mov	r1, r4
 800a36a:	2201      	movs	r2, #1
 800a36c:	4648      	mov	r0, r9
 800a36e:	f002 f92d 	bl	800c5cc <__lshift>
 800a372:	4641      	mov	r1, r8
 800a374:	4604      	mov	r4, r0
 800a376:	f002 f97d 	bl	800c674 <__mcmp>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	dc67      	bgt.n	800a44e <_strtod_l+0x89e>
 800a37e:	9b04      	ldr	r3, [sp, #16]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d171      	bne.n	800a468 <_strtod_l+0x8b8>
 800a384:	e63d      	b.n	800a002 <_strtod_l+0x452>
 800a386:	f018 0f01 	tst.w	r8, #1
 800a38a:	d004      	beq.n	800a396 <_strtod_l+0x7e6>
 800a38c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a390:	f7f6 f93a 	bl	8000608 <__aeabi_dmul>
 800a394:	2301      	movs	r3, #1
 800a396:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a39a:	3508      	adds	r5, #8
 800a39c:	e6e5      	b.n	800a16a <_strtod_l+0x5ba>
 800a39e:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a6:	ea03 0a0a 	and.w	sl, r3, sl
 800a3aa:	e6ff      	b.n	800a1ac <_strtod_l+0x5fc>
 800a3ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a3b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a3b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a3b8:	36e2      	adds	r6, #226	; 0xe2
 800a3ba:	fa01 f306 	lsl.w	r3, r1, r6
 800a3be:	930a      	str	r3, [sp, #40]	; 0x28
 800a3c0:	910f      	str	r1, [sp, #60]	; 0x3c
 800a3c2:	e75d      	b.n	800a280 <_strtod_l+0x6d0>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3cc:	e758      	b.n	800a280 <_strtod_l+0x6d0>
 800a3ce:	4632      	mov	r2, r6
 800a3d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3d2:	4648      	mov	r0, r9
 800a3d4:	f002 f8fa 	bl	800c5cc <__lshift>
 800a3d8:	901c      	str	r0, [sp, #112]	; 0x70
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	f47f af7c 	bne.w	800a2d8 <_strtod_l+0x728>
 800a3e0:	e604      	b.n	8009fec <_strtod_l+0x43c>
 800a3e2:	bf00      	nop
 800a3e4:	08010510 	.word	0x08010510
 800a3e8:	fffffc02 	.word	0xfffffc02
 800a3ec:	465d      	mov	r5, fp
 800a3ee:	f040 8086 	bne.w	800a4fe <_strtod_l+0x94e>
 800a3f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3f8:	b32a      	cbz	r2, 800a446 <_strtod_l+0x896>
 800a3fa:	4aaf      	ldr	r2, [pc, #700]	; (800a6b8 <_strtod_l+0xb08>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d153      	bne.n	800a4a8 <_strtod_l+0x8f8>
 800a400:	9b04      	ldr	r3, [sp, #16]
 800a402:	4650      	mov	r0, sl
 800a404:	b1d3      	cbz	r3, 800a43c <_strtod_l+0x88c>
 800a406:	4aad      	ldr	r2, [pc, #692]	; (800a6bc <_strtod_l+0xb0c>)
 800a408:	402a      	ands	r2, r5
 800a40a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a40e:	f04f 31ff 	mov.w	r1, #4294967295
 800a412:	d816      	bhi.n	800a442 <_strtod_l+0x892>
 800a414:	0d12      	lsrs	r2, r2, #20
 800a416:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a41a:	fa01 f303 	lsl.w	r3, r1, r3
 800a41e:	4298      	cmp	r0, r3
 800a420:	d142      	bne.n	800a4a8 <_strtod_l+0x8f8>
 800a422:	4ba7      	ldr	r3, [pc, #668]	; (800a6c0 <_strtod_l+0xb10>)
 800a424:	429d      	cmp	r5, r3
 800a426:	d102      	bne.n	800a42e <_strtod_l+0x87e>
 800a428:	3001      	adds	r0, #1
 800a42a:	f43f addf 	beq.w	8009fec <_strtod_l+0x43c>
 800a42e:	4ba3      	ldr	r3, [pc, #652]	; (800a6bc <_strtod_l+0xb0c>)
 800a430:	402b      	ands	r3, r5
 800a432:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a436:	f04f 0a00 	mov.w	sl, #0
 800a43a:	e7a0      	b.n	800a37e <_strtod_l+0x7ce>
 800a43c:	f04f 33ff 	mov.w	r3, #4294967295
 800a440:	e7ed      	b.n	800a41e <_strtod_l+0x86e>
 800a442:	460b      	mov	r3, r1
 800a444:	e7eb      	b.n	800a41e <_strtod_l+0x86e>
 800a446:	bb7b      	cbnz	r3, 800a4a8 <_strtod_l+0x8f8>
 800a448:	f1ba 0f00 	cmp.w	sl, #0
 800a44c:	d12c      	bne.n	800a4a8 <_strtod_l+0x8f8>
 800a44e:	9904      	ldr	r1, [sp, #16]
 800a450:	4a9a      	ldr	r2, [pc, #616]	; (800a6bc <_strtod_l+0xb0c>)
 800a452:	465b      	mov	r3, fp
 800a454:	b1f1      	cbz	r1, 800a494 <_strtod_l+0x8e4>
 800a456:	ea02 010b 	and.w	r1, r2, fp
 800a45a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a45e:	dc19      	bgt.n	800a494 <_strtod_l+0x8e4>
 800a460:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a464:	f77f ae5b 	ble.w	800a11e <_strtod_l+0x56e>
 800a468:	4a96      	ldr	r2, [pc, #600]	; (800a6c4 <_strtod_l+0xb14>)
 800a46a:	2300      	movs	r3, #0
 800a46c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a470:	4650      	mov	r0, sl
 800a472:	4659      	mov	r1, fp
 800a474:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a478:	f7f6 f8c6 	bl	8000608 <__aeabi_dmul>
 800a47c:	4682      	mov	sl, r0
 800a47e:	468b      	mov	fp, r1
 800a480:	2900      	cmp	r1, #0
 800a482:	f47f adbe 	bne.w	800a002 <_strtod_l+0x452>
 800a486:	2800      	cmp	r0, #0
 800a488:	f47f adbb 	bne.w	800a002 <_strtod_l+0x452>
 800a48c:	2322      	movs	r3, #34	; 0x22
 800a48e:	f8c9 3000 	str.w	r3, [r9]
 800a492:	e5b6      	b.n	800a002 <_strtod_l+0x452>
 800a494:	4013      	ands	r3, r2
 800a496:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a49a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a49e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a4a2:	f04f 3aff 	mov.w	sl, #4294967295
 800a4a6:	e76a      	b.n	800a37e <_strtod_l+0x7ce>
 800a4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4aa:	b193      	cbz	r3, 800a4d2 <_strtod_l+0x922>
 800a4ac:	422b      	tst	r3, r5
 800a4ae:	f43f af66 	beq.w	800a37e <_strtod_l+0x7ce>
 800a4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4b4:	9a04      	ldr	r2, [sp, #16]
 800a4b6:	4650      	mov	r0, sl
 800a4b8:	4659      	mov	r1, fp
 800a4ba:	b173      	cbz	r3, 800a4da <_strtod_l+0x92a>
 800a4bc:	f7ff fb5a 	bl	8009b74 <sulp>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4c8:	f7f5 fee8 	bl	800029c <__adddf3>
 800a4cc:	4682      	mov	sl, r0
 800a4ce:	468b      	mov	fp, r1
 800a4d0:	e755      	b.n	800a37e <_strtod_l+0x7ce>
 800a4d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4d4:	ea13 0f0a 	tst.w	r3, sl
 800a4d8:	e7e9      	b.n	800a4ae <_strtod_l+0x8fe>
 800a4da:	f7ff fb4b 	bl	8009b74 <sulp>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4e6:	f7f5 fed7 	bl	8000298 <__aeabi_dsub>
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4682      	mov	sl, r0
 800a4f0:	468b      	mov	fp, r1
 800a4f2:	f7f6 faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f47f ae11 	bne.w	800a11e <_strtod_l+0x56e>
 800a4fc:	e73f      	b.n	800a37e <_strtod_l+0x7ce>
 800a4fe:	4641      	mov	r1, r8
 800a500:	4620      	mov	r0, r4
 800a502:	f002 f9f4 	bl	800c8ee <__ratio>
 800a506:	ec57 6b10 	vmov	r6, r7, d0
 800a50a:	2200      	movs	r2, #0
 800a50c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a510:	ee10 0a10 	vmov	r0, s0
 800a514:	4639      	mov	r1, r7
 800a516:	f7f6 faf3 	bl	8000b00 <__aeabi_dcmple>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d077      	beq.n	800a60e <_strtod_l+0xa5e>
 800a51e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a520:	2b00      	cmp	r3, #0
 800a522:	d04a      	beq.n	800a5ba <_strtod_l+0xa0a>
 800a524:	4b68      	ldr	r3, [pc, #416]	; (800a6c8 <_strtod_l+0xb18>)
 800a526:	2200      	movs	r2, #0
 800a528:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a52c:	4f66      	ldr	r7, [pc, #408]	; (800a6c8 <_strtod_l+0xb18>)
 800a52e:	2600      	movs	r6, #0
 800a530:	4b62      	ldr	r3, [pc, #392]	; (800a6bc <_strtod_l+0xb0c>)
 800a532:	402b      	ands	r3, r5
 800a534:	930f      	str	r3, [sp, #60]	; 0x3c
 800a536:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a538:	4b64      	ldr	r3, [pc, #400]	; (800a6cc <_strtod_l+0xb1c>)
 800a53a:	429a      	cmp	r2, r3
 800a53c:	f040 80ce 	bne.w	800a6dc <_strtod_l+0xb2c>
 800a540:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a544:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a548:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a54c:	ec4b ab10 	vmov	d0, sl, fp
 800a550:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a554:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a558:	f002 f904 	bl	800c764 <__ulp>
 800a55c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a560:	ec53 2b10 	vmov	r2, r3, d0
 800a564:	f7f6 f850 	bl	8000608 <__aeabi_dmul>
 800a568:	4652      	mov	r2, sl
 800a56a:	465b      	mov	r3, fp
 800a56c:	f7f5 fe96 	bl	800029c <__adddf3>
 800a570:	460b      	mov	r3, r1
 800a572:	4952      	ldr	r1, [pc, #328]	; (800a6bc <_strtod_l+0xb0c>)
 800a574:	4a56      	ldr	r2, [pc, #344]	; (800a6d0 <_strtod_l+0xb20>)
 800a576:	4019      	ands	r1, r3
 800a578:	4291      	cmp	r1, r2
 800a57a:	4682      	mov	sl, r0
 800a57c:	d95b      	bls.n	800a636 <_strtod_l+0xa86>
 800a57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a580:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a584:	4293      	cmp	r3, r2
 800a586:	d103      	bne.n	800a590 <_strtod_l+0x9e0>
 800a588:	9b08      	ldr	r3, [sp, #32]
 800a58a:	3301      	adds	r3, #1
 800a58c:	f43f ad2e 	beq.w	8009fec <_strtod_l+0x43c>
 800a590:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a6c0 <_strtod_l+0xb10>
 800a594:	f04f 3aff 	mov.w	sl, #4294967295
 800a598:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a59a:	4648      	mov	r0, r9
 800a59c:	f001 fe4b 	bl	800c236 <_Bfree>
 800a5a0:	9905      	ldr	r1, [sp, #20]
 800a5a2:	4648      	mov	r0, r9
 800a5a4:	f001 fe47 	bl	800c236 <_Bfree>
 800a5a8:	4641      	mov	r1, r8
 800a5aa:	4648      	mov	r0, r9
 800a5ac:	f001 fe43 	bl	800c236 <_Bfree>
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4648      	mov	r0, r9
 800a5b4:	f001 fe3f 	bl	800c236 <_Bfree>
 800a5b8:	e619      	b.n	800a1ee <_strtod_l+0x63e>
 800a5ba:	f1ba 0f00 	cmp.w	sl, #0
 800a5be:	d11a      	bne.n	800a5f6 <_strtod_l+0xa46>
 800a5c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5c4:	b9eb      	cbnz	r3, 800a602 <_strtod_l+0xa52>
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	4b3f      	ldr	r3, [pc, #252]	; (800a6c8 <_strtod_l+0xb18>)
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	f7f6 fa8d 	bl	8000aec <__aeabi_dcmplt>
 800a5d2:	b9c8      	cbnz	r0, 800a608 <_strtod_l+0xa58>
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	2200      	movs	r2, #0
 800a5da:	4b3e      	ldr	r3, [pc, #248]	; (800a6d4 <_strtod_l+0xb24>)
 800a5dc:	f7f6 f814 	bl	8000608 <__aeabi_dmul>
 800a5e0:	4606      	mov	r6, r0
 800a5e2:	460f      	mov	r7, r1
 800a5e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a5e8:	9618      	str	r6, [sp, #96]	; 0x60
 800a5ea:	9319      	str	r3, [sp, #100]	; 0x64
 800a5ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a5f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a5f4:	e79c      	b.n	800a530 <_strtod_l+0x980>
 800a5f6:	f1ba 0f01 	cmp.w	sl, #1
 800a5fa:	d102      	bne.n	800a602 <_strtod_l+0xa52>
 800a5fc:	2d00      	cmp	r5, #0
 800a5fe:	f43f ad8e 	beq.w	800a11e <_strtod_l+0x56e>
 800a602:	2200      	movs	r2, #0
 800a604:	4b34      	ldr	r3, [pc, #208]	; (800a6d8 <_strtod_l+0xb28>)
 800a606:	e78f      	b.n	800a528 <_strtod_l+0x978>
 800a608:	2600      	movs	r6, #0
 800a60a:	4f32      	ldr	r7, [pc, #200]	; (800a6d4 <_strtod_l+0xb24>)
 800a60c:	e7ea      	b.n	800a5e4 <_strtod_l+0xa34>
 800a60e:	4b31      	ldr	r3, [pc, #196]	; (800a6d4 <_strtod_l+0xb24>)
 800a610:	4630      	mov	r0, r6
 800a612:	4639      	mov	r1, r7
 800a614:	2200      	movs	r2, #0
 800a616:	f7f5 fff7 	bl	8000608 <__aeabi_dmul>
 800a61a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a61c:	4606      	mov	r6, r0
 800a61e:	460f      	mov	r7, r1
 800a620:	b933      	cbnz	r3, 800a630 <_strtod_l+0xa80>
 800a622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a626:	9010      	str	r0, [sp, #64]	; 0x40
 800a628:	9311      	str	r3, [sp, #68]	; 0x44
 800a62a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a62e:	e7df      	b.n	800a5f0 <_strtod_l+0xa40>
 800a630:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a634:	e7f9      	b.n	800a62a <_strtod_l+0xa7a>
 800a636:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a63a:	9b04      	ldr	r3, [sp, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1ab      	bne.n	800a598 <_strtod_l+0x9e8>
 800a640:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a644:	0d1b      	lsrs	r3, r3, #20
 800a646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a648:	051b      	lsls	r3, r3, #20
 800a64a:	429a      	cmp	r2, r3
 800a64c:	465d      	mov	r5, fp
 800a64e:	d1a3      	bne.n	800a598 <_strtod_l+0x9e8>
 800a650:	4639      	mov	r1, r7
 800a652:	4630      	mov	r0, r6
 800a654:	f7f6 fa88 	bl	8000b68 <__aeabi_d2iz>
 800a658:	f7f5 ff6c 	bl	8000534 <__aeabi_i2d>
 800a65c:	460b      	mov	r3, r1
 800a65e:	4602      	mov	r2, r0
 800a660:	4639      	mov	r1, r7
 800a662:	4630      	mov	r0, r6
 800a664:	f7f5 fe18 	bl	8000298 <__aeabi_dsub>
 800a668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a66a:	4606      	mov	r6, r0
 800a66c:	460f      	mov	r7, r1
 800a66e:	b933      	cbnz	r3, 800a67e <_strtod_l+0xace>
 800a670:	f1ba 0f00 	cmp.w	sl, #0
 800a674:	d103      	bne.n	800a67e <_strtod_l+0xace>
 800a676:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a67a:	2d00      	cmp	r5, #0
 800a67c:	d06d      	beq.n	800a75a <_strtod_l+0xbaa>
 800a67e:	a30a      	add	r3, pc, #40	; (adr r3, 800a6a8 <_strtod_l+0xaf8>)
 800a680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f6 fa30 	bl	8000aec <__aeabi_dcmplt>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f47f acb8 	bne.w	800a002 <_strtod_l+0x452>
 800a692:	a307      	add	r3, pc, #28	; (adr r3, 800a6b0 <_strtod_l+0xb00>)
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	4630      	mov	r0, r6
 800a69a:	4639      	mov	r1, r7
 800a69c:	f7f6 fa44 	bl	8000b28 <__aeabi_dcmpgt>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	f43f af79 	beq.w	800a598 <_strtod_l+0x9e8>
 800a6a6:	e4ac      	b.n	800a002 <_strtod_l+0x452>
 800a6a8:	94a03595 	.word	0x94a03595
 800a6ac:	3fdfffff 	.word	0x3fdfffff
 800a6b0:	35afe535 	.word	0x35afe535
 800a6b4:	3fe00000 	.word	0x3fe00000
 800a6b8:	000fffff 	.word	0x000fffff
 800a6bc:	7ff00000 	.word	0x7ff00000
 800a6c0:	7fefffff 	.word	0x7fefffff
 800a6c4:	39500000 	.word	0x39500000
 800a6c8:	3ff00000 	.word	0x3ff00000
 800a6cc:	7fe00000 	.word	0x7fe00000
 800a6d0:	7c9fffff 	.word	0x7c9fffff
 800a6d4:	3fe00000 	.word	0x3fe00000
 800a6d8:	bff00000 	.word	0xbff00000
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	b333      	cbz	r3, 800a72e <_strtod_l+0xb7e>
 800a6e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6e6:	d822      	bhi.n	800a72e <_strtod_l+0xb7e>
 800a6e8:	a327      	add	r3, pc, #156	; (adr r3, 800a788 <_strtod_l+0xbd8>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	f7f6 fa05 	bl	8000b00 <__aeabi_dcmple>
 800a6f6:	b1a0      	cbz	r0, 800a722 <_strtod_l+0xb72>
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f7f6 fa5c 	bl	8000bb8 <__aeabi_d2uiz>
 800a700:	2800      	cmp	r0, #0
 800a702:	bf08      	it	eq
 800a704:	2001      	moveq	r0, #1
 800a706:	f7f5 ff05 	bl	8000514 <__aeabi_ui2d>
 800a70a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a70c:	4606      	mov	r6, r0
 800a70e:	460f      	mov	r7, r1
 800a710:	bb03      	cbnz	r3, 800a754 <_strtod_l+0xba4>
 800a712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a716:	9012      	str	r0, [sp, #72]	; 0x48
 800a718:	9313      	str	r3, [sp, #76]	; 0x4c
 800a71a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a71e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a726:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a72a:	1a9b      	subs	r3, r3, r2
 800a72c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a72e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a732:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a736:	f002 f815 	bl	800c764 <__ulp>
 800a73a:	4650      	mov	r0, sl
 800a73c:	ec53 2b10 	vmov	r2, r3, d0
 800a740:	4659      	mov	r1, fp
 800a742:	f7f5 ff61 	bl	8000608 <__aeabi_dmul>
 800a746:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a74a:	f7f5 fda7 	bl	800029c <__adddf3>
 800a74e:	4682      	mov	sl, r0
 800a750:	468b      	mov	fp, r1
 800a752:	e772      	b.n	800a63a <_strtod_l+0xa8a>
 800a754:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a758:	e7df      	b.n	800a71a <_strtod_l+0xb6a>
 800a75a:	a30d      	add	r3, pc, #52	; (adr r3, 800a790 <_strtod_l+0xbe0>)
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	f7f6 f9c4 	bl	8000aec <__aeabi_dcmplt>
 800a764:	e79c      	b.n	800a6a0 <_strtod_l+0xaf0>
 800a766:	2300      	movs	r3, #0
 800a768:	930d      	str	r3, [sp, #52]	; 0x34
 800a76a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a76c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	f7ff ba61 	b.w	8009c36 <_strtod_l+0x86>
 800a774:	2b65      	cmp	r3, #101	; 0x65
 800a776:	f04f 0200 	mov.w	r2, #0
 800a77a:	f43f ab4e 	beq.w	8009e1a <_strtod_l+0x26a>
 800a77e:	2101      	movs	r1, #1
 800a780:	4614      	mov	r4, r2
 800a782:	9104      	str	r1, [sp, #16]
 800a784:	f7ff bacb 	b.w	8009d1e <_strtod_l+0x16e>
 800a788:	ffc00000 	.word	0xffc00000
 800a78c:	41dfffff 	.word	0x41dfffff
 800a790:	94a03595 	.word	0x94a03595
 800a794:	3fcfffff 	.word	0x3fcfffff

0800a798 <_strtod_r>:
 800a798:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <_strtod_r+0x18>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	b410      	push	{r4}
 800a79e:	6a1b      	ldr	r3, [r3, #32]
 800a7a0:	4c04      	ldr	r4, [pc, #16]	; (800a7b4 <_strtod_r+0x1c>)
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	bf08      	it	eq
 800a7a6:	4623      	moveq	r3, r4
 800a7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ac:	f7ff ba00 	b.w	8009bb0 <_strtod_l>
 800a7b0:	20000188 	.word	0x20000188
 800a7b4:	200001ec 	.word	0x200001ec

0800a7b8 <_strtol_l.isra.0>:
 800a7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7bc:	4680      	mov	r8, r0
 800a7be:	4689      	mov	r9, r1
 800a7c0:	4692      	mov	sl, r2
 800a7c2:	461e      	mov	r6, r3
 800a7c4:	460f      	mov	r7, r1
 800a7c6:	463d      	mov	r5, r7
 800a7c8:	9808      	ldr	r0, [sp, #32]
 800a7ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7ce:	f001 fc47 	bl	800c060 <__locale_ctype_ptr_l>
 800a7d2:	4420      	add	r0, r4
 800a7d4:	7843      	ldrb	r3, [r0, #1]
 800a7d6:	f013 0308 	ands.w	r3, r3, #8
 800a7da:	d132      	bne.n	800a842 <_strtol_l.isra.0+0x8a>
 800a7dc:	2c2d      	cmp	r4, #45	; 0x2d
 800a7de:	d132      	bne.n	800a846 <_strtol_l.isra.0+0x8e>
 800a7e0:	787c      	ldrb	r4, [r7, #1]
 800a7e2:	1cbd      	adds	r5, r7, #2
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	2e00      	cmp	r6, #0
 800a7e8:	d05d      	beq.n	800a8a6 <_strtol_l.isra.0+0xee>
 800a7ea:	2e10      	cmp	r6, #16
 800a7ec:	d109      	bne.n	800a802 <_strtol_l.isra.0+0x4a>
 800a7ee:	2c30      	cmp	r4, #48	; 0x30
 800a7f0:	d107      	bne.n	800a802 <_strtol_l.isra.0+0x4a>
 800a7f2:	782b      	ldrb	r3, [r5, #0]
 800a7f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7f8:	2b58      	cmp	r3, #88	; 0x58
 800a7fa:	d14f      	bne.n	800a89c <_strtol_l.isra.0+0xe4>
 800a7fc:	786c      	ldrb	r4, [r5, #1]
 800a7fe:	2610      	movs	r6, #16
 800a800:	3502      	adds	r5, #2
 800a802:	2a00      	cmp	r2, #0
 800a804:	bf14      	ite	ne
 800a806:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a80a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a80e:	2700      	movs	r7, #0
 800a810:	fbb1 fcf6 	udiv	ip, r1, r6
 800a814:	4638      	mov	r0, r7
 800a816:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a81a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a81e:	2b09      	cmp	r3, #9
 800a820:	d817      	bhi.n	800a852 <_strtol_l.isra.0+0x9a>
 800a822:	461c      	mov	r4, r3
 800a824:	42a6      	cmp	r6, r4
 800a826:	dd23      	ble.n	800a870 <_strtol_l.isra.0+0xb8>
 800a828:	1c7b      	adds	r3, r7, #1
 800a82a:	d007      	beq.n	800a83c <_strtol_l.isra.0+0x84>
 800a82c:	4584      	cmp	ip, r0
 800a82e:	d31c      	bcc.n	800a86a <_strtol_l.isra.0+0xb2>
 800a830:	d101      	bne.n	800a836 <_strtol_l.isra.0+0x7e>
 800a832:	45a6      	cmp	lr, r4
 800a834:	db19      	blt.n	800a86a <_strtol_l.isra.0+0xb2>
 800a836:	fb00 4006 	mla	r0, r0, r6, r4
 800a83a:	2701      	movs	r7, #1
 800a83c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a840:	e7eb      	b.n	800a81a <_strtol_l.isra.0+0x62>
 800a842:	462f      	mov	r7, r5
 800a844:	e7bf      	b.n	800a7c6 <_strtol_l.isra.0+0xe>
 800a846:	2c2b      	cmp	r4, #43	; 0x2b
 800a848:	bf04      	itt	eq
 800a84a:	1cbd      	addeq	r5, r7, #2
 800a84c:	787c      	ldrbeq	r4, [r7, #1]
 800a84e:	461a      	mov	r2, r3
 800a850:	e7c9      	b.n	800a7e6 <_strtol_l.isra.0+0x2e>
 800a852:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a856:	2b19      	cmp	r3, #25
 800a858:	d801      	bhi.n	800a85e <_strtol_l.isra.0+0xa6>
 800a85a:	3c37      	subs	r4, #55	; 0x37
 800a85c:	e7e2      	b.n	800a824 <_strtol_l.isra.0+0x6c>
 800a85e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a862:	2b19      	cmp	r3, #25
 800a864:	d804      	bhi.n	800a870 <_strtol_l.isra.0+0xb8>
 800a866:	3c57      	subs	r4, #87	; 0x57
 800a868:	e7dc      	b.n	800a824 <_strtol_l.isra.0+0x6c>
 800a86a:	f04f 37ff 	mov.w	r7, #4294967295
 800a86e:	e7e5      	b.n	800a83c <_strtol_l.isra.0+0x84>
 800a870:	1c7b      	adds	r3, r7, #1
 800a872:	d108      	bne.n	800a886 <_strtol_l.isra.0+0xce>
 800a874:	2322      	movs	r3, #34	; 0x22
 800a876:	f8c8 3000 	str.w	r3, [r8]
 800a87a:	4608      	mov	r0, r1
 800a87c:	f1ba 0f00 	cmp.w	sl, #0
 800a880:	d107      	bne.n	800a892 <_strtol_l.isra.0+0xda>
 800a882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a886:	b102      	cbz	r2, 800a88a <_strtol_l.isra.0+0xd2>
 800a888:	4240      	negs	r0, r0
 800a88a:	f1ba 0f00 	cmp.w	sl, #0
 800a88e:	d0f8      	beq.n	800a882 <_strtol_l.isra.0+0xca>
 800a890:	b10f      	cbz	r7, 800a896 <_strtol_l.isra.0+0xde>
 800a892:	f105 39ff 	add.w	r9, r5, #4294967295
 800a896:	f8ca 9000 	str.w	r9, [sl]
 800a89a:	e7f2      	b.n	800a882 <_strtol_l.isra.0+0xca>
 800a89c:	2430      	movs	r4, #48	; 0x30
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	d1af      	bne.n	800a802 <_strtol_l.isra.0+0x4a>
 800a8a2:	2608      	movs	r6, #8
 800a8a4:	e7ad      	b.n	800a802 <_strtol_l.isra.0+0x4a>
 800a8a6:	2c30      	cmp	r4, #48	; 0x30
 800a8a8:	d0a3      	beq.n	800a7f2 <_strtol_l.isra.0+0x3a>
 800a8aa:	260a      	movs	r6, #10
 800a8ac:	e7a9      	b.n	800a802 <_strtol_l.isra.0+0x4a>
	...

0800a8b0 <_strtol_r>:
 800a8b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8b2:	4c06      	ldr	r4, [pc, #24]	; (800a8cc <_strtol_r+0x1c>)
 800a8b4:	4d06      	ldr	r5, [pc, #24]	; (800a8d0 <_strtol_r+0x20>)
 800a8b6:	6824      	ldr	r4, [r4, #0]
 800a8b8:	6a24      	ldr	r4, [r4, #32]
 800a8ba:	2c00      	cmp	r4, #0
 800a8bc:	bf08      	it	eq
 800a8be:	462c      	moveq	r4, r5
 800a8c0:	9400      	str	r4, [sp, #0]
 800a8c2:	f7ff ff79 	bl	800a7b8 <_strtol_l.isra.0>
 800a8c6:	b003      	add	sp, #12
 800a8c8:	bd30      	pop	{r4, r5, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20000188 	.word	0x20000188
 800a8d0:	200001ec 	.word	0x200001ec

0800a8d4 <__swbuf_r>:
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	460e      	mov	r6, r1
 800a8d8:	4614      	mov	r4, r2
 800a8da:	4605      	mov	r5, r0
 800a8dc:	b118      	cbz	r0, 800a8e6 <__swbuf_r+0x12>
 800a8de:	6983      	ldr	r3, [r0, #24]
 800a8e0:	b90b      	cbnz	r3, 800a8e6 <__swbuf_r+0x12>
 800a8e2:	f001 f80d 	bl	800b900 <__sinit>
 800a8e6:	4b21      	ldr	r3, [pc, #132]	; (800a96c <__swbuf_r+0x98>)
 800a8e8:	429c      	cmp	r4, r3
 800a8ea:	d12a      	bne.n	800a942 <__swbuf_r+0x6e>
 800a8ec:	686c      	ldr	r4, [r5, #4]
 800a8ee:	69a3      	ldr	r3, [r4, #24]
 800a8f0:	60a3      	str	r3, [r4, #8]
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	071a      	lsls	r2, r3, #28
 800a8f6:	d52e      	bpl.n	800a956 <__swbuf_r+0x82>
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	b363      	cbz	r3, 800a956 <__swbuf_r+0x82>
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	1ac0      	subs	r0, r0, r3
 800a902:	6963      	ldr	r3, [r4, #20]
 800a904:	b2f6      	uxtb	r6, r6
 800a906:	4283      	cmp	r3, r0
 800a908:	4637      	mov	r7, r6
 800a90a:	dc04      	bgt.n	800a916 <__swbuf_r+0x42>
 800a90c:	4621      	mov	r1, r4
 800a90e:	4628      	mov	r0, r5
 800a910:	f000 ff8c 	bl	800b82c <_fflush_r>
 800a914:	bb28      	cbnz	r0, 800a962 <__swbuf_r+0x8e>
 800a916:	68a3      	ldr	r3, [r4, #8]
 800a918:	3b01      	subs	r3, #1
 800a91a:	60a3      	str	r3, [r4, #8]
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	6022      	str	r2, [r4, #0]
 800a922:	701e      	strb	r6, [r3, #0]
 800a924:	6963      	ldr	r3, [r4, #20]
 800a926:	3001      	adds	r0, #1
 800a928:	4283      	cmp	r3, r0
 800a92a:	d004      	beq.n	800a936 <__swbuf_r+0x62>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	07db      	lsls	r3, r3, #31
 800a930:	d519      	bpl.n	800a966 <__swbuf_r+0x92>
 800a932:	2e0a      	cmp	r6, #10
 800a934:	d117      	bne.n	800a966 <__swbuf_r+0x92>
 800a936:	4621      	mov	r1, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f000 ff77 	bl	800b82c <_fflush_r>
 800a93e:	b190      	cbz	r0, 800a966 <__swbuf_r+0x92>
 800a940:	e00f      	b.n	800a962 <__swbuf_r+0x8e>
 800a942:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <__swbuf_r+0x9c>)
 800a944:	429c      	cmp	r4, r3
 800a946:	d101      	bne.n	800a94c <__swbuf_r+0x78>
 800a948:	68ac      	ldr	r4, [r5, #8]
 800a94a:	e7d0      	b.n	800a8ee <__swbuf_r+0x1a>
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <__swbuf_r+0xa0>)
 800a94e:	429c      	cmp	r4, r3
 800a950:	bf08      	it	eq
 800a952:	68ec      	ldreq	r4, [r5, #12]
 800a954:	e7cb      	b.n	800a8ee <__swbuf_r+0x1a>
 800a956:	4621      	mov	r1, r4
 800a958:	4628      	mov	r0, r5
 800a95a:	f000 f81f 	bl	800a99c <__swsetup_r>
 800a95e:	2800      	cmp	r0, #0
 800a960:	d0cc      	beq.n	800a8fc <__swbuf_r+0x28>
 800a962:	f04f 37ff 	mov.w	r7, #4294967295
 800a966:	4638      	mov	r0, r7
 800a968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a96a:	bf00      	nop
 800a96c:	08010568 	.word	0x08010568
 800a970:	08010588 	.word	0x08010588
 800a974:	08010548 	.word	0x08010548

0800a978 <_write_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4c07      	ldr	r4, [pc, #28]	; (800a998 <_write_r+0x20>)
 800a97c:	4605      	mov	r5, r0
 800a97e:	4608      	mov	r0, r1
 800a980:	4611      	mov	r1, r2
 800a982:	2200      	movs	r2, #0
 800a984:	6022      	str	r2, [r4, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	f7f6 fb66 	bl	8001058 <_write>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d102      	bne.n	800a996 <_write_r+0x1e>
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	b103      	cbz	r3, 800a996 <_write_r+0x1e>
 800a994:	602b      	str	r3, [r5, #0]
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	20000f98 	.word	0x20000f98

0800a99c <__swsetup_r>:
 800a99c:	4b32      	ldr	r3, [pc, #200]	; (800aa68 <__swsetup_r+0xcc>)
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	681d      	ldr	r5, [r3, #0]
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	b125      	cbz	r5, 800a9b2 <__swsetup_r+0x16>
 800a9a8:	69ab      	ldr	r3, [r5, #24]
 800a9aa:	b913      	cbnz	r3, 800a9b2 <__swsetup_r+0x16>
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 ffa7 	bl	800b900 <__sinit>
 800a9b2:	4b2e      	ldr	r3, [pc, #184]	; (800aa6c <__swsetup_r+0xd0>)
 800a9b4:	429c      	cmp	r4, r3
 800a9b6:	d10f      	bne.n	800a9d8 <__swsetup_r+0x3c>
 800a9b8:	686c      	ldr	r4, [r5, #4]
 800a9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	0715      	lsls	r5, r2, #28
 800a9c2:	d42c      	bmi.n	800aa1e <__swsetup_r+0x82>
 800a9c4:	06d0      	lsls	r0, r2, #27
 800a9c6:	d411      	bmi.n	800a9ec <__swsetup_r+0x50>
 800a9c8:	2209      	movs	r2, #9
 800a9ca:	6032      	str	r2, [r6, #0]
 800a9cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d0:	81a3      	strh	r3, [r4, #12]
 800a9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d6:	e03e      	b.n	800aa56 <__swsetup_r+0xba>
 800a9d8:	4b25      	ldr	r3, [pc, #148]	; (800aa70 <__swsetup_r+0xd4>)
 800a9da:	429c      	cmp	r4, r3
 800a9dc:	d101      	bne.n	800a9e2 <__swsetup_r+0x46>
 800a9de:	68ac      	ldr	r4, [r5, #8]
 800a9e0:	e7eb      	b.n	800a9ba <__swsetup_r+0x1e>
 800a9e2:	4b24      	ldr	r3, [pc, #144]	; (800aa74 <__swsetup_r+0xd8>)
 800a9e4:	429c      	cmp	r4, r3
 800a9e6:	bf08      	it	eq
 800a9e8:	68ec      	ldreq	r4, [r5, #12]
 800a9ea:	e7e6      	b.n	800a9ba <__swsetup_r+0x1e>
 800a9ec:	0751      	lsls	r1, r2, #29
 800a9ee:	d512      	bpl.n	800aa16 <__swsetup_r+0x7a>
 800a9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9f2:	b141      	cbz	r1, 800aa06 <__swsetup_r+0x6a>
 800a9f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9f8:	4299      	cmp	r1, r3
 800a9fa:	d002      	beq.n	800aa02 <__swsetup_r+0x66>
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f7fe f89d 	bl	8008b3c <_free_r>
 800aa02:	2300      	movs	r3, #0
 800aa04:	6363      	str	r3, [r4, #52]	; 0x34
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa0c:	81a3      	strh	r3, [r4, #12]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	6063      	str	r3, [r4, #4]
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	f043 0308 	orr.w	r3, r3, #8
 800aa1c:	81a3      	strh	r3, [r4, #12]
 800aa1e:	6923      	ldr	r3, [r4, #16]
 800aa20:	b94b      	cbnz	r3, 800aa36 <__swsetup_r+0x9a>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa2c:	d003      	beq.n	800aa36 <__swsetup_r+0x9a>
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4630      	mov	r0, r6
 800aa32:	f001 fb6d 	bl	800c110 <__smakebuf_r>
 800aa36:	89a2      	ldrh	r2, [r4, #12]
 800aa38:	f012 0301 	ands.w	r3, r2, #1
 800aa3c:	d00c      	beq.n	800aa58 <__swsetup_r+0xbc>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60a3      	str	r3, [r4, #8]
 800aa42:	6963      	ldr	r3, [r4, #20]
 800aa44:	425b      	negs	r3, r3
 800aa46:	61a3      	str	r3, [r4, #24]
 800aa48:	6923      	ldr	r3, [r4, #16]
 800aa4a:	b953      	cbnz	r3, 800aa62 <__swsetup_r+0xc6>
 800aa4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800aa54:	d1ba      	bne.n	800a9cc <__swsetup_r+0x30>
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	0792      	lsls	r2, r2, #30
 800aa5a:	bf58      	it	pl
 800aa5c:	6963      	ldrpl	r3, [r4, #20]
 800aa5e:	60a3      	str	r3, [r4, #8]
 800aa60:	e7f2      	b.n	800aa48 <__swsetup_r+0xac>
 800aa62:	2000      	movs	r0, #0
 800aa64:	e7f7      	b.n	800aa56 <__swsetup_r+0xba>
 800aa66:	bf00      	nop
 800aa68:	20000188 	.word	0x20000188
 800aa6c:	08010568 	.word	0x08010568
 800aa70:	08010588 	.word	0x08010588
 800aa74:	08010548 	.word	0x08010548

0800aa78 <_close_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4c06      	ldr	r4, [pc, #24]	; (800aa94 <_close_r+0x1c>)
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4605      	mov	r5, r0
 800aa80:	4608      	mov	r0, r1
 800aa82:	6023      	str	r3, [r4, #0]
 800aa84:	f7f7 f8c9 	bl	8001c1a <_close>
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	d102      	bne.n	800aa92 <_close_r+0x1a>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	b103      	cbz	r3, 800aa92 <_close_r+0x1a>
 800aa90:	602b      	str	r3, [r5, #0]
 800aa92:	bd38      	pop	{r3, r4, r5, pc}
 800aa94:	20000f98 	.word	0x20000f98

0800aa98 <quorem>:
 800aa98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	6903      	ldr	r3, [r0, #16]
 800aa9e:	690c      	ldr	r4, [r1, #16]
 800aaa0:	42a3      	cmp	r3, r4
 800aaa2:	4680      	mov	r8, r0
 800aaa4:	f2c0 8082 	blt.w	800abac <quorem+0x114>
 800aaa8:	3c01      	subs	r4, #1
 800aaaa:	f101 0714 	add.w	r7, r1, #20
 800aaae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800aab2:	f100 0614 	add.w	r6, r0, #20
 800aab6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800aaba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800aabe:	eb06 030c 	add.w	r3, r6, ip
 800aac2:	3501      	adds	r5, #1
 800aac4:	eb07 090c 	add.w	r9, r7, ip
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	fbb0 f5f5 	udiv	r5, r0, r5
 800aace:	b395      	cbz	r5, 800ab36 <quorem+0x9e>
 800aad0:	f04f 0a00 	mov.w	sl, #0
 800aad4:	4638      	mov	r0, r7
 800aad6:	46b6      	mov	lr, r6
 800aad8:	46d3      	mov	fp, sl
 800aada:	f850 2b04 	ldr.w	r2, [r0], #4
 800aade:	b293      	uxth	r3, r2
 800aae0:	fb05 a303 	mla	r3, r5, r3, sl
 800aae4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	ebab 0303 	sub.w	r3, fp, r3
 800aaee:	0c12      	lsrs	r2, r2, #16
 800aaf0:	f8de b000 	ldr.w	fp, [lr]
 800aaf4:	fb05 a202 	mla	r2, r5, r2, sl
 800aaf8:	fa13 f38b 	uxtah	r3, r3, fp
 800aafc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ab00:	fa1f fb82 	uxth.w	fp, r2
 800ab04:	f8de 2000 	ldr.w	r2, [lr]
 800ab08:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ab0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab16:	4581      	cmp	r9, r0
 800ab18:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ab1c:	f84e 3b04 	str.w	r3, [lr], #4
 800ab20:	d2db      	bcs.n	800aada <quorem+0x42>
 800ab22:	f856 300c 	ldr.w	r3, [r6, ip]
 800ab26:	b933      	cbnz	r3, 800ab36 <quorem+0x9e>
 800ab28:	9b01      	ldr	r3, [sp, #4]
 800ab2a:	3b04      	subs	r3, #4
 800ab2c:	429e      	cmp	r6, r3
 800ab2e:	461a      	mov	r2, r3
 800ab30:	d330      	bcc.n	800ab94 <quorem+0xfc>
 800ab32:	f8c8 4010 	str.w	r4, [r8, #16]
 800ab36:	4640      	mov	r0, r8
 800ab38:	f001 fd9c 	bl	800c674 <__mcmp>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	db25      	blt.n	800ab8c <quorem+0xf4>
 800ab40:	3501      	adds	r5, #1
 800ab42:	4630      	mov	r0, r6
 800ab44:	f04f 0c00 	mov.w	ip, #0
 800ab48:	f857 2b04 	ldr.w	r2, [r7], #4
 800ab4c:	f8d0 e000 	ldr.w	lr, [r0]
 800ab50:	b293      	uxth	r3, r2
 800ab52:	ebac 0303 	sub.w	r3, ip, r3
 800ab56:	0c12      	lsrs	r2, r2, #16
 800ab58:	fa13 f38e 	uxtah	r3, r3, lr
 800ab5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab6a:	45b9      	cmp	r9, r7
 800ab6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab70:	f840 3b04 	str.w	r3, [r0], #4
 800ab74:	d2e8      	bcs.n	800ab48 <quorem+0xb0>
 800ab76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ab7a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ab7e:	b92a      	cbnz	r2, 800ab8c <quorem+0xf4>
 800ab80:	3b04      	subs	r3, #4
 800ab82:	429e      	cmp	r6, r3
 800ab84:	461a      	mov	r2, r3
 800ab86:	d30b      	bcc.n	800aba0 <quorem+0x108>
 800ab88:	f8c8 4010 	str.w	r4, [r8, #16]
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	b003      	add	sp, #12
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	3b04      	subs	r3, #4
 800ab98:	2a00      	cmp	r2, #0
 800ab9a:	d1ca      	bne.n	800ab32 <quorem+0x9a>
 800ab9c:	3c01      	subs	r4, #1
 800ab9e:	e7c5      	b.n	800ab2c <quorem+0x94>
 800aba0:	6812      	ldr	r2, [r2, #0]
 800aba2:	3b04      	subs	r3, #4
 800aba4:	2a00      	cmp	r2, #0
 800aba6:	d1ef      	bne.n	800ab88 <quorem+0xf0>
 800aba8:	3c01      	subs	r4, #1
 800abaa:	e7ea      	b.n	800ab82 <quorem+0xea>
 800abac:	2000      	movs	r0, #0
 800abae:	e7ee      	b.n	800ab8e <quorem+0xf6>

0800abb0 <_dtoa_r>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	ec57 6b10 	vmov	r6, r7, d0
 800abb8:	b097      	sub	sp, #92	; 0x5c
 800abba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800abbc:	9106      	str	r1, [sp, #24]
 800abbe:	4604      	mov	r4, r0
 800abc0:	920b      	str	r2, [sp, #44]	; 0x2c
 800abc2:	9312      	str	r3, [sp, #72]	; 0x48
 800abc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800abc8:	e9cd 6700 	strd	r6, r7, [sp]
 800abcc:	b93d      	cbnz	r5, 800abde <_dtoa_r+0x2e>
 800abce:	2010      	movs	r0, #16
 800abd0:	f7fd ff9c 	bl	8008b0c <malloc>
 800abd4:	6260      	str	r0, [r4, #36]	; 0x24
 800abd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800abda:	6005      	str	r5, [r0, #0]
 800abdc:	60c5      	str	r5, [r0, #12]
 800abde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abe0:	6819      	ldr	r1, [r3, #0]
 800abe2:	b151      	cbz	r1, 800abfa <_dtoa_r+0x4a>
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	604a      	str	r2, [r1, #4]
 800abe8:	2301      	movs	r3, #1
 800abea:	4093      	lsls	r3, r2
 800abec:	608b      	str	r3, [r1, #8]
 800abee:	4620      	mov	r0, r4
 800abf0:	f001 fb21 	bl	800c236 <_Bfree>
 800abf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abf6:	2200      	movs	r2, #0
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	1e3b      	subs	r3, r7, #0
 800abfc:	bfbb      	ittet	lt
 800abfe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ac02:	9301      	strlt	r3, [sp, #4]
 800ac04:	2300      	movge	r3, #0
 800ac06:	2201      	movlt	r2, #1
 800ac08:	bfac      	ite	ge
 800ac0a:	f8c8 3000 	strge.w	r3, [r8]
 800ac0e:	f8c8 2000 	strlt.w	r2, [r8]
 800ac12:	4baf      	ldr	r3, [pc, #700]	; (800aed0 <_dtoa_r+0x320>)
 800ac14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac18:	ea33 0308 	bics.w	r3, r3, r8
 800ac1c:	d114      	bne.n	800ac48 <_dtoa_r+0x98>
 800ac1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac20:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac24:	6013      	str	r3, [r2, #0]
 800ac26:	9b00      	ldr	r3, [sp, #0]
 800ac28:	b923      	cbnz	r3, 800ac34 <_dtoa_r+0x84>
 800ac2a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	f000 8542 	beq.w	800b6b8 <_dtoa_r+0xb08>
 800ac34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac36:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800aee4 <_dtoa_r+0x334>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f000 8544 	beq.w	800b6c8 <_dtoa_r+0xb18>
 800ac40:	f10b 0303 	add.w	r3, fp, #3
 800ac44:	f000 bd3e 	b.w	800b6c4 <_dtoa_r+0xb14>
 800ac48:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2300      	movs	r3, #0
 800ac50:	4630      	mov	r0, r6
 800ac52:	4639      	mov	r1, r7
 800ac54:	f7f5 ff40 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac58:	4681      	mov	r9, r0
 800ac5a:	b168      	cbz	r0, 800ac78 <_dtoa_r+0xc8>
 800ac5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac5e:	2301      	movs	r3, #1
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 8524 	beq.w	800b6b2 <_dtoa_r+0xb02>
 800ac6a:	4b9a      	ldr	r3, [pc, #616]	; (800aed4 <_dtoa_r+0x324>)
 800ac6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac6e:	f103 3bff 	add.w	fp, r3, #4294967295
 800ac72:	6013      	str	r3, [r2, #0]
 800ac74:	f000 bd28 	b.w	800b6c8 <_dtoa_r+0xb18>
 800ac78:	aa14      	add	r2, sp, #80	; 0x50
 800ac7a:	a915      	add	r1, sp, #84	; 0x54
 800ac7c:	ec47 6b10 	vmov	d0, r6, r7
 800ac80:	4620      	mov	r0, r4
 800ac82:	f001 fde5 	bl	800c850 <__d2b>
 800ac86:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ac8a:	9004      	str	r0, [sp, #16]
 800ac8c:	2d00      	cmp	r5, #0
 800ac8e:	d07c      	beq.n	800ad8a <_dtoa_r+0x1da>
 800ac90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac94:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ac98:	46b2      	mov	sl, r6
 800ac9a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ac9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aca2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800aca6:	2200      	movs	r2, #0
 800aca8:	4b8b      	ldr	r3, [pc, #556]	; (800aed8 <_dtoa_r+0x328>)
 800acaa:	4650      	mov	r0, sl
 800acac:	4659      	mov	r1, fp
 800acae:	f7f5 faf3 	bl	8000298 <__aeabi_dsub>
 800acb2:	a381      	add	r3, pc, #516	; (adr r3, 800aeb8 <_dtoa_r+0x308>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	f7f5 fca6 	bl	8000608 <__aeabi_dmul>
 800acbc:	a380      	add	r3, pc, #512	; (adr r3, 800aec0 <_dtoa_r+0x310>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 faeb 	bl	800029c <__adddf3>
 800acc6:	4606      	mov	r6, r0
 800acc8:	4628      	mov	r0, r5
 800acca:	460f      	mov	r7, r1
 800accc:	f7f5 fc32 	bl	8000534 <__aeabi_i2d>
 800acd0:	a37d      	add	r3, pc, #500	; (adr r3, 800aec8 <_dtoa_r+0x318>)
 800acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd6:	f7f5 fc97 	bl	8000608 <__aeabi_dmul>
 800acda:	4602      	mov	r2, r0
 800acdc:	460b      	mov	r3, r1
 800acde:	4630      	mov	r0, r6
 800ace0:	4639      	mov	r1, r7
 800ace2:	f7f5 fadb 	bl	800029c <__adddf3>
 800ace6:	4606      	mov	r6, r0
 800ace8:	460f      	mov	r7, r1
 800acea:	f7f5 ff3d 	bl	8000b68 <__aeabi_d2iz>
 800acee:	2200      	movs	r2, #0
 800acf0:	4682      	mov	sl, r0
 800acf2:	2300      	movs	r3, #0
 800acf4:	4630      	mov	r0, r6
 800acf6:	4639      	mov	r1, r7
 800acf8:	f7f5 fef8 	bl	8000aec <__aeabi_dcmplt>
 800acfc:	b148      	cbz	r0, 800ad12 <_dtoa_r+0x162>
 800acfe:	4650      	mov	r0, sl
 800ad00:	f7f5 fc18 	bl	8000534 <__aeabi_i2d>
 800ad04:	4632      	mov	r2, r6
 800ad06:	463b      	mov	r3, r7
 800ad08:	f7f5 fee6 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad0c:	b908      	cbnz	r0, 800ad12 <_dtoa_r+0x162>
 800ad0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad12:	f1ba 0f16 	cmp.w	sl, #22
 800ad16:	d859      	bhi.n	800adcc <_dtoa_r+0x21c>
 800ad18:	4970      	ldr	r1, [pc, #448]	; (800aedc <_dtoa_r+0x32c>)
 800ad1a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ad1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad26:	f7f5 feff 	bl	8000b28 <__aeabi_dcmpgt>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d050      	beq.n	800add0 <_dtoa_r+0x220>
 800ad2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad32:	2300      	movs	r3, #0
 800ad34:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad38:	1b5d      	subs	r5, r3, r5
 800ad3a:	f1b5 0801 	subs.w	r8, r5, #1
 800ad3e:	bf49      	itett	mi
 800ad40:	f1c5 0301 	rsbmi	r3, r5, #1
 800ad44:	2300      	movpl	r3, #0
 800ad46:	9305      	strmi	r3, [sp, #20]
 800ad48:	f04f 0800 	movmi.w	r8, #0
 800ad4c:	bf58      	it	pl
 800ad4e:	9305      	strpl	r3, [sp, #20]
 800ad50:	f1ba 0f00 	cmp.w	sl, #0
 800ad54:	db3e      	blt.n	800add4 <_dtoa_r+0x224>
 800ad56:	2300      	movs	r3, #0
 800ad58:	44d0      	add	r8, sl
 800ad5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ad5e:	9307      	str	r3, [sp, #28]
 800ad60:	9b06      	ldr	r3, [sp, #24]
 800ad62:	2b09      	cmp	r3, #9
 800ad64:	f200 8090 	bhi.w	800ae88 <_dtoa_r+0x2d8>
 800ad68:	2b05      	cmp	r3, #5
 800ad6a:	bfc4      	itt	gt
 800ad6c:	3b04      	subgt	r3, #4
 800ad6e:	9306      	strgt	r3, [sp, #24]
 800ad70:	9b06      	ldr	r3, [sp, #24]
 800ad72:	f1a3 0302 	sub.w	r3, r3, #2
 800ad76:	bfcc      	ite	gt
 800ad78:	2500      	movgt	r5, #0
 800ad7a:	2501      	movle	r5, #1
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	f200 808f 	bhi.w	800aea0 <_dtoa_r+0x2f0>
 800ad82:	e8df f003 	tbb	[pc, r3]
 800ad86:	7f7d      	.short	0x7f7d
 800ad88:	7131      	.short	0x7131
 800ad8a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ad8e:	441d      	add	r5, r3
 800ad90:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ad94:	2820      	cmp	r0, #32
 800ad96:	dd13      	ble.n	800adc0 <_dtoa_r+0x210>
 800ad98:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ad9c:	9b00      	ldr	r3, [sp, #0]
 800ad9e:	fa08 f800 	lsl.w	r8, r8, r0
 800ada2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ada6:	fa23 f000 	lsr.w	r0, r3, r0
 800adaa:	ea48 0000 	orr.w	r0, r8, r0
 800adae:	f7f5 fbb1 	bl	8000514 <__aeabi_ui2d>
 800adb2:	2301      	movs	r3, #1
 800adb4:	4682      	mov	sl, r0
 800adb6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800adba:	3d01      	subs	r5, #1
 800adbc:	9313      	str	r3, [sp, #76]	; 0x4c
 800adbe:	e772      	b.n	800aca6 <_dtoa_r+0xf6>
 800adc0:	9b00      	ldr	r3, [sp, #0]
 800adc2:	f1c0 0020 	rsb	r0, r0, #32
 800adc6:	fa03 f000 	lsl.w	r0, r3, r0
 800adca:	e7f0      	b.n	800adae <_dtoa_r+0x1fe>
 800adcc:	2301      	movs	r3, #1
 800adce:	e7b1      	b.n	800ad34 <_dtoa_r+0x184>
 800add0:	900f      	str	r0, [sp, #60]	; 0x3c
 800add2:	e7b0      	b.n	800ad36 <_dtoa_r+0x186>
 800add4:	9b05      	ldr	r3, [sp, #20]
 800add6:	eba3 030a 	sub.w	r3, r3, sl
 800adda:	9305      	str	r3, [sp, #20]
 800addc:	f1ca 0300 	rsb	r3, sl, #0
 800ade0:	9307      	str	r3, [sp, #28]
 800ade2:	2300      	movs	r3, #0
 800ade4:	930e      	str	r3, [sp, #56]	; 0x38
 800ade6:	e7bb      	b.n	800ad60 <_dtoa_r+0x1b0>
 800ade8:	2301      	movs	r3, #1
 800adea:	930a      	str	r3, [sp, #40]	; 0x28
 800adec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	dd59      	ble.n	800aea6 <_dtoa_r+0x2f6>
 800adf2:	9302      	str	r3, [sp, #8]
 800adf4:	4699      	mov	r9, r3
 800adf6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800adf8:	2200      	movs	r2, #0
 800adfa:	6072      	str	r2, [r6, #4]
 800adfc:	2204      	movs	r2, #4
 800adfe:	f102 0014 	add.w	r0, r2, #20
 800ae02:	4298      	cmp	r0, r3
 800ae04:	6871      	ldr	r1, [r6, #4]
 800ae06:	d953      	bls.n	800aeb0 <_dtoa_r+0x300>
 800ae08:	4620      	mov	r0, r4
 800ae0a:	f001 f9e0 	bl	800c1ce <_Balloc>
 800ae0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae10:	6030      	str	r0, [r6, #0]
 800ae12:	f1b9 0f0e 	cmp.w	r9, #14
 800ae16:	f8d3 b000 	ldr.w	fp, [r3]
 800ae1a:	f200 80e6 	bhi.w	800afea <_dtoa_r+0x43a>
 800ae1e:	2d00      	cmp	r5, #0
 800ae20:	f000 80e3 	beq.w	800afea <_dtoa_r+0x43a>
 800ae24:	ed9d 7b00 	vldr	d7, [sp]
 800ae28:	f1ba 0f00 	cmp.w	sl, #0
 800ae2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ae30:	dd74      	ble.n	800af1c <_dtoa_r+0x36c>
 800ae32:	4a2a      	ldr	r2, [pc, #168]	; (800aedc <_dtoa_r+0x32c>)
 800ae34:	f00a 030f 	and.w	r3, sl, #15
 800ae38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae3c:	ed93 7b00 	vldr	d7, [r3]
 800ae40:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ae44:	06f0      	lsls	r0, r6, #27
 800ae46:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ae4a:	d565      	bpl.n	800af18 <_dtoa_r+0x368>
 800ae4c:	4b24      	ldr	r3, [pc, #144]	; (800aee0 <_dtoa_r+0x330>)
 800ae4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae56:	f7f5 fd01 	bl	800085c <__aeabi_ddiv>
 800ae5a:	e9cd 0100 	strd	r0, r1, [sp]
 800ae5e:	f006 060f 	and.w	r6, r6, #15
 800ae62:	2503      	movs	r5, #3
 800ae64:	4f1e      	ldr	r7, [pc, #120]	; (800aee0 <_dtoa_r+0x330>)
 800ae66:	e04c      	b.n	800af02 <_dtoa_r+0x352>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	930a      	str	r3, [sp, #40]	; 0x28
 800ae6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae6e:	4453      	add	r3, sl
 800ae70:	f103 0901 	add.w	r9, r3, #1
 800ae74:	9302      	str	r3, [sp, #8]
 800ae76:	464b      	mov	r3, r9
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	bfb8      	it	lt
 800ae7c:	2301      	movlt	r3, #1
 800ae7e:	e7ba      	b.n	800adf6 <_dtoa_r+0x246>
 800ae80:	2300      	movs	r3, #0
 800ae82:	e7b2      	b.n	800adea <_dtoa_r+0x23a>
 800ae84:	2300      	movs	r3, #0
 800ae86:	e7f0      	b.n	800ae6a <_dtoa_r+0x2ba>
 800ae88:	2501      	movs	r5, #1
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	9306      	str	r3, [sp, #24]
 800ae8e:	950a      	str	r5, [sp, #40]	; 0x28
 800ae90:	f04f 33ff 	mov.w	r3, #4294967295
 800ae94:	9302      	str	r3, [sp, #8]
 800ae96:	4699      	mov	r9, r3
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2312      	movs	r3, #18
 800ae9c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ae9e:	e7aa      	b.n	800adf6 <_dtoa_r+0x246>
 800aea0:	2301      	movs	r3, #1
 800aea2:	930a      	str	r3, [sp, #40]	; 0x28
 800aea4:	e7f4      	b.n	800ae90 <_dtoa_r+0x2e0>
 800aea6:	2301      	movs	r3, #1
 800aea8:	9302      	str	r3, [sp, #8]
 800aeaa:	4699      	mov	r9, r3
 800aeac:	461a      	mov	r2, r3
 800aeae:	e7f5      	b.n	800ae9c <_dtoa_r+0x2ec>
 800aeb0:	3101      	adds	r1, #1
 800aeb2:	6071      	str	r1, [r6, #4]
 800aeb4:	0052      	lsls	r2, r2, #1
 800aeb6:	e7a2      	b.n	800adfe <_dtoa_r+0x24e>
 800aeb8:	636f4361 	.word	0x636f4361
 800aebc:	3fd287a7 	.word	0x3fd287a7
 800aec0:	8b60c8b3 	.word	0x8b60c8b3
 800aec4:	3fc68a28 	.word	0x3fc68a28
 800aec8:	509f79fb 	.word	0x509f79fb
 800aecc:	3fd34413 	.word	0x3fd34413
 800aed0:	7ff00000 	.word	0x7ff00000
 800aed4:	080106dc 	.word	0x080106dc
 800aed8:	3ff80000 	.word	0x3ff80000
 800aedc:	080105e0 	.word	0x080105e0
 800aee0:	080105b8 	.word	0x080105b8
 800aee4:	08010541 	.word	0x08010541
 800aee8:	07f1      	lsls	r1, r6, #31
 800aeea:	d508      	bpl.n	800aefe <_dtoa_r+0x34e>
 800aeec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aef4:	f7f5 fb88 	bl	8000608 <__aeabi_dmul>
 800aef8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aefc:	3501      	adds	r5, #1
 800aefe:	1076      	asrs	r6, r6, #1
 800af00:	3708      	adds	r7, #8
 800af02:	2e00      	cmp	r6, #0
 800af04:	d1f0      	bne.n	800aee8 <_dtoa_r+0x338>
 800af06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800af0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af0e:	f7f5 fca5 	bl	800085c <__aeabi_ddiv>
 800af12:	e9cd 0100 	strd	r0, r1, [sp]
 800af16:	e01a      	b.n	800af4e <_dtoa_r+0x39e>
 800af18:	2502      	movs	r5, #2
 800af1a:	e7a3      	b.n	800ae64 <_dtoa_r+0x2b4>
 800af1c:	f000 80a0 	beq.w	800b060 <_dtoa_r+0x4b0>
 800af20:	f1ca 0600 	rsb	r6, sl, #0
 800af24:	4b9f      	ldr	r3, [pc, #636]	; (800b1a4 <_dtoa_r+0x5f4>)
 800af26:	4fa0      	ldr	r7, [pc, #640]	; (800b1a8 <_dtoa_r+0x5f8>)
 800af28:	f006 020f 	and.w	r2, r6, #15
 800af2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af38:	f7f5 fb66 	bl	8000608 <__aeabi_dmul>
 800af3c:	e9cd 0100 	strd	r0, r1, [sp]
 800af40:	1136      	asrs	r6, r6, #4
 800af42:	2300      	movs	r3, #0
 800af44:	2502      	movs	r5, #2
 800af46:	2e00      	cmp	r6, #0
 800af48:	d17f      	bne.n	800b04a <_dtoa_r+0x49a>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1e1      	bne.n	800af12 <_dtoa_r+0x362>
 800af4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8087 	beq.w	800b064 <_dtoa_r+0x4b4>
 800af56:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af5a:	2200      	movs	r2, #0
 800af5c:	4b93      	ldr	r3, [pc, #588]	; (800b1ac <_dtoa_r+0x5fc>)
 800af5e:	4630      	mov	r0, r6
 800af60:	4639      	mov	r1, r7
 800af62:	f7f5 fdc3 	bl	8000aec <__aeabi_dcmplt>
 800af66:	2800      	cmp	r0, #0
 800af68:	d07c      	beq.n	800b064 <_dtoa_r+0x4b4>
 800af6a:	f1b9 0f00 	cmp.w	r9, #0
 800af6e:	d079      	beq.n	800b064 <_dtoa_r+0x4b4>
 800af70:	9b02      	ldr	r3, [sp, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	dd35      	ble.n	800afe2 <_dtoa_r+0x432>
 800af76:	f10a 33ff 	add.w	r3, sl, #4294967295
 800af7a:	9308      	str	r3, [sp, #32]
 800af7c:	4639      	mov	r1, r7
 800af7e:	2200      	movs	r2, #0
 800af80:	4b8b      	ldr	r3, [pc, #556]	; (800b1b0 <_dtoa_r+0x600>)
 800af82:	4630      	mov	r0, r6
 800af84:	f7f5 fb40 	bl	8000608 <__aeabi_dmul>
 800af88:	e9cd 0100 	strd	r0, r1, [sp]
 800af8c:	9f02      	ldr	r7, [sp, #8]
 800af8e:	3501      	adds	r5, #1
 800af90:	4628      	mov	r0, r5
 800af92:	f7f5 facf 	bl	8000534 <__aeabi_i2d>
 800af96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af9a:	f7f5 fb35 	bl	8000608 <__aeabi_dmul>
 800af9e:	2200      	movs	r2, #0
 800afa0:	4b84      	ldr	r3, [pc, #528]	; (800b1b4 <_dtoa_r+0x604>)
 800afa2:	f7f5 f97b 	bl	800029c <__adddf3>
 800afa6:	4605      	mov	r5, r0
 800afa8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800afac:	2f00      	cmp	r7, #0
 800afae:	d15d      	bne.n	800b06c <_dtoa_r+0x4bc>
 800afb0:	2200      	movs	r2, #0
 800afb2:	4b81      	ldr	r3, [pc, #516]	; (800b1b8 <_dtoa_r+0x608>)
 800afb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afb8:	f7f5 f96e 	bl	8000298 <__aeabi_dsub>
 800afbc:	462a      	mov	r2, r5
 800afbe:	4633      	mov	r3, r6
 800afc0:	e9cd 0100 	strd	r0, r1, [sp]
 800afc4:	f7f5 fdb0 	bl	8000b28 <__aeabi_dcmpgt>
 800afc8:	2800      	cmp	r0, #0
 800afca:	f040 8288 	bne.w	800b4de <_dtoa_r+0x92e>
 800afce:	462a      	mov	r2, r5
 800afd0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800afd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afd8:	f7f5 fd88 	bl	8000aec <__aeabi_dcmplt>
 800afdc:	2800      	cmp	r0, #0
 800afde:	f040 827c 	bne.w	800b4da <_dtoa_r+0x92a>
 800afe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800afe6:	e9cd 2300 	strd	r2, r3, [sp]
 800afea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afec:	2b00      	cmp	r3, #0
 800afee:	f2c0 8150 	blt.w	800b292 <_dtoa_r+0x6e2>
 800aff2:	f1ba 0f0e 	cmp.w	sl, #14
 800aff6:	f300 814c 	bgt.w	800b292 <_dtoa_r+0x6e2>
 800affa:	4b6a      	ldr	r3, [pc, #424]	; (800b1a4 <_dtoa_r+0x5f4>)
 800affc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b000:	ed93 7b00 	vldr	d7, [r3]
 800b004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b006:	2b00      	cmp	r3, #0
 800b008:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b00c:	f280 80d8 	bge.w	800b1c0 <_dtoa_r+0x610>
 800b010:	f1b9 0f00 	cmp.w	r9, #0
 800b014:	f300 80d4 	bgt.w	800b1c0 <_dtoa_r+0x610>
 800b018:	f040 825e 	bne.w	800b4d8 <_dtoa_r+0x928>
 800b01c:	2200      	movs	r2, #0
 800b01e:	4b66      	ldr	r3, [pc, #408]	; (800b1b8 <_dtoa_r+0x608>)
 800b020:	ec51 0b17 	vmov	r0, r1, d7
 800b024:	f7f5 faf0 	bl	8000608 <__aeabi_dmul>
 800b028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b02c:	f7f5 fd72 	bl	8000b14 <__aeabi_dcmpge>
 800b030:	464f      	mov	r7, r9
 800b032:	464e      	mov	r6, r9
 800b034:	2800      	cmp	r0, #0
 800b036:	f040 8234 	bne.w	800b4a2 <_dtoa_r+0x8f2>
 800b03a:	2331      	movs	r3, #49	; 0x31
 800b03c:	f10b 0501 	add.w	r5, fp, #1
 800b040:	f88b 3000 	strb.w	r3, [fp]
 800b044:	f10a 0a01 	add.w	sl, sl, #1
 800b048:	e22f      	b.n	800b4aa <_dtoa_r+0x8fa>
 800b04a:	07f2      	lsls	r2, r6, #31
 800b04c:	d505      	bpl.n	800b05a <_dtoa_r+0x4aa>
 800b04e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b052:	f7f5 fad9 	bl	8000608 <__aeabi_dmul>
 800b056:	3501      	adds	r5, #1
 800b058:	2301      	movs	r3, #1
 800b05a:	1076      	asrs	r6, r6, #1
 800b05c:	3708      	adds	r7, #8
 800b05e:	e772      	b.n	800af46 <_dtoa_r+0x396>
 800b060:	2502      	movs	r5, #2
 800b062:	e774      	b.n	800af4e <_dtoa_r+0x39e>
 800b064:	f8cd a020 	str.w	sl, [sp, #32]
 800b068:	464f      	mov	r7, r9
 800b06a:	e791      	b.n	800af90 <_dtoa_r+0x3e0>
 800b06c:	4b4d      	ldr	r3, [pc, #308]	; (800b1a4 <_dtoa_r+0x5f4>)
 800b06e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b072:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d047      	beq.n	800b10c <_dtoa_r+0x55c>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	2000      	movs	r0, #0
 800b082:	494e      	ldr	r1, [pc, #312]	; (800b1bc <_dtoa_r+0x60c>)
 800b084:	f7f5 fbea 	bl	800085c <__aeabi_ddiv>
 800b088:	462a      	mov	r2, r5
 800b08a:	4633      	mov	r3, r6
 800b08c:	f7f5 f904 	bl	8000298 <__aeabi_dsub>
 800b090:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b094:	465d      	mov	r5, fp
 800b096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b09a:	f7f5 fd65 	bl	8000b68 <__aeabi_d2iz>
 800b09e:	4606      	mov	r6, r0
 800b0a0:	f7f5 fa48 	bl	8000534 <__aeabi_i2d>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0ac:	f7f5 f8f4 	bl	8000298 <__aeabi_dsub>
 800b0b0:	3630      	adds	r6, #48	; 0x30
 800b0b2:	f805 6b01 	strb.w	r6, [r5], #1
 800b0b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b0ba:	e9cd 0100 	strd	r0, r1, [sp]
 800b0be:	f7f5 fd15 	bl	8000aec <__aeabi_dcmplt>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d163      	bne.n	800b18e <_dtoa_r+0x5de>
 800b0c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0ca:	2000      	movs	r0, #0
 800b0cc:	4937      	ldr	r1, [pc, #220]	; (800b1ac <_dtoa_r+0x5fc>)
 800b0ce:	f7f5 f8e3 	bl	8000298 <__aeabi_dsub>
 800b0d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b0d6:	f7f5 fd09 	bl	8000aec <__aeabi_dcmplt>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	f040 80b7 	bne.w	800b24e <_dtoa_r+0x69e>
 800b0e0:	eba5 030b 	sub.w	r3, r5, fp
 800b0e4:	429f      	cmp	r7, r3
 800b0e6:	f77f af7c 	ble.w	800afe2 <_dtoa_r+0x432>
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	4b30      	ldr	r3, [pc, #192]	; (800b1b0 <_dtoa_r+0x600>)
 800b0ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0f2:	f7f5 fa89 	bl	8000608 <__aeabi_dmul>
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b0fc:	4b2c      	ldr	r3, [pc, #176]	; (800b1b0 <_dtoa_r+0x600>)
 800b0fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b102:	f7f5 fa81 	bl	8000608 <__aeabi_dmul>
 800b106:	e9cd 0100 	strd	r0, r1, [sp]
 800b10a:	e7c4      	b.n	800b096 <_dtoa_r+0x4e6>
 800b10c:	462a      	mov	r2, r5
 800b10e:	4633      	mov	r3, r6
 800b110:	f7f5 fa7a 	bl	8000608 <__aeabi_dmul>
 800b114:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b118:	eb0b 0507 	add.w	r5, fp, r7
 800b11c:	465e      	mov	r6, fp
 800b11e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b122:	f7f5 fd21 	bl	8000b68 <__aeabi_d2iz>
 800b126:	4607      	mov	r7, r0
 800b128:	f7f5 fa04 	bl	8000534 <__aeabi_i2d>
 800b12c:	3730      	adds	r7, #48	; 0x30
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b136:	f7f5 f8af 	bl	8000298 <__aeabi_dsub>
 800b13a:	f806 7b01 	strb.w	r7, [r6], #1
 800b13e:	42ae      	cmp	r6, r5
 800b140:	e9cd 0100 	strd	r0, r1, [sp]
 800b144:	f04f 0200 	mov.w	r2, #0
 800b148:	d126      	bne.n	800b198 <_dtoa_r+0x5e8>
 800b14a:	4b1c      	ldr	r3, [pc, #112]	; (800b1bc <_dtoa_r+0x60c>)
 800b14c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b150:	f7f5 f8a4 	bl	800029c <__adddf3>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b15c:	f7f5 fce4 	bl	8000b28 <__aeabi_dcmpgt>
 800b160:	2800      	cmp	r0, #0
 800b162:	d174      	bne.n	800b24e <_dtoa_r+0x69e>
 800b164:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b168:	2000      	movs	r0, #0
 800b16a:	4914      	ldr	r1, [pc, #80]	; (800b1bc <_dtoa_r+0x60c>)
 800b16c:	f7f5 f894 	bl	8000298 <__aeabi_dsub>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b178:	f7f5 fcb8 	bl	8000aec <__aeabi_dcmplt>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	f43f af30 	beq.w	800afe2 <_dtoa_r+0x432>
 800b182:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b186:	2b30      	cmp	r3, #48	; 0x30
 800b188:	f105 32ff 	add.w	r2, r5, #4294967295
 800b18c:	d002      	beq.n	800b194 <_dtoa_r+0x5e4>
 800b18e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b192:	e04a      	b.n	800b22a <_dtoa_r+0x67a>
 800b194:	4615      	mov	r5, r2
 800b196:	e7f4      	b.n	800b182 <_dtoa_r+0x5d2>
 800b198:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <_dtoa_r+0x600>)
 800b19a:	f7f5 fa35 	bl	8000608 <__aeabi_dmul>
 800b19e:	e9cd 0100 	strd	r0, r1, [sp]
 800b1a2:	e7bc      	b.n	800b11e <_dtoa_r+0x56e>
 800b1a4:	080105e0 	.word	0x080105e0
 800b1a8:	080105b8 	.word	0x080105b8
 800b1ac:	3ff00000 	.word	0x3ff00000
 800b1b0:	40240000 	.word	0x40240000
 800b1b4:	401c0000 	.word	0x401c0000
 800b1b8:	40140000 	.word	0x40140000
 800b1bc:	3fe00000 	.word	0x3fe00000
 800b1c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b1c4:	465d      	mov	r5, fp
 800b1c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	4639      	mov	r1, r7
 800b1ce:	f7f5 fb45 	bl	800085c <__aeabi_ddiv>
 800b1d2:	f7f5 fcc9 	bl	8000b68 <__aeabi_d2iz>
 800b1d6:	4680      	mov	r8, r0
 800b1d8:	f7f5 f9ac 	bl	8000534 <__aeabi_i2d>
 800b1dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1e0:	f7f5 fa12 	bl	8000608 <__aeabi_dmul>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	4639      	mov	r1, r7
 800b1ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b1f0:	f7f5 f852 	bl	8000298 <__aeabi_dsub>
 800b1f4:	f805 6b01 	strb.w	r6, [r5], #1
 800b1f8:	eba5 060b 	sub.w	r6, r5, fp
 800b1fc:	45b1      	cmp	r9, r6
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	d139      	bne.n	800b278 <_dtoa_r+0x6c8>
 800b204:	f7f5 f84a 	bl	800029c <__adddf3>
 800b208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b20c:	4606      	mov	r6, r0
 800b20e:	460f      	mov	r7, r1
 800b210:	f7f5 fc8a 	bl	8000b28 <__aeabi_dcmpgt>
 800b214:	b9c8      	cbnz	r0, 800b24a <_dtoa_r+0x69a>
 800b216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b21a:	4630      	mov	r0, r6
 800b21c:	4639      	mov	r1, r7
 800b21e:	f7f5 fc5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b222:	b110      	cbz	r0, 800b22a <_dtoa_r+0x67a>
 800b224:	f018 0f01 	tst.w	r8, #1
 800b228:	d10f      	bne.n	800b24a <_dtoa_r+0x69a>
 800b22a:	9904      	ldr	r1, [sp, #16]
 800b22c:	4620      	mov	r0, r4
 800b22e:	f001 f802 	bl	800c236 <_Bfree>
 800b232:	2300      	movs	r3, #0
 800b234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b236:	702b      	strb	r3, [r5, #0]
 800b238:	f10a 0301 	add.w	r3, sl, #1
 800b23c:	6013      	str	r3, [r2, #0]
 800b23e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 8241 	beq.w	800b6c8 <_dtoa_r+0xb18>
 800b246:	601d      	str	r5, [r3, #0]
 800b248:	e23e      	b.n	800b6c8 <_dtoa_r+0xb18>
 800b24a:	f8cd a020 	str.w	sl, [sp, #32]
 800b24e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b252:	2a39      	cmp	r2, #57	; 0x39
 800b254:	f105 33ff 	add.w	r3, r5, #4294967295
 800b258:	d108      	bne.n	800b26c <_dtoa_r+0x6bc>
 800b25a:	459b      	cmp	fp, r3
 800b25c:	d10a      	bne.n	800b274 <_dtoa_r+0x6c4>
 800b25e:	9b08      	ldr	r3, [sp, #32]
 800b260:	3301      	adds	r3, #1
 800b262:	9308      	str	r3, [sp, #32]
 800b264:	2330      	movs	r3, #48	; 0x30
 800b266:	f88b 3000 	strb.w	r3, [fp]
 800b26a:	465b      	mov	r3, fp
 800b26c:	781a      	ldrb	r2, [r3, #0]
 800b26e:	3201      	adds	r2, #1
 800b270:	701a      	strb	r2, [r3, #0]
 800b272:	e78c      	b.n	800b18e <_dtoa_r+0x5de>
 800b274:	461d      	mov	r5, r3
 800b276:	e7ea      	b.n	800b24e <_dtoa_r+0x69e>
 800b278:	2200      	movs	r2, #0
 800b27a:	4b9b      	ldr	r3, [pc, #620]	; (800b4e8 <_dtoa_r+0x938>)
 800b27c:	f7f5 f9c4 	bl	8000608 <__aeabi_dmul>
 800b280:	2200      	movs	r2, #0
 800b282:	2300      	movs	r3, #0
 800b284:	4606      	mov	r6, r0
 800b286:	460f      	mov	r7, r1
 800b288:	f7f5 fc26 	bl	8000ad8 <__aeabi_dcmpeq>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d09a      	beq.n	800b1c6 <_dtoa_r+0x616>
 800b290:	e7cb      	b.n	800b22a <_dtoa_r+0x67a>
 800b292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b294:	2a00      	cmp	r2, #0
 800b296:	f000 808b 	beq.w	800b3b0 <_dtoa_r+0x800>
 800b29a:	9a06      	ldr	r2, [sp, #24]
 800b29c:	2a01      	cmp	r2, #1
 800b29e:	dc6e      	bgt.n	800b37e <_dtoa_r+0x7ce>
 800b2a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	d067      	beq.n	800b376 <_dtoa_r+0x7c6>
 800b2a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2aa:	9f07      	ldr	r7, [sp, #28]
 800b2ac:	9d05      	ldr	r5, [sp, #20]
 800b2ae:	9a05      	ldr	r2, [sp, #20]
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	441a      	add	r2, r3
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	9205      	str	r2, [sp, #20]
 800b2b8:	4498      	add	r8, r3
 800b2ba:	f001 f89a 	bl	800c3f2 <__i2b>
 800b2be:	4606      	mov	r6, r0
 800b2c0:	2d00      	cmp	r5, #0
 800b2c2:	dd0c      	ble.n	800b2de <_dtoa_r+0x72e>
 800b2c4:	f1b8 0f00 	cmp.w	r8, #0
 800b2c8:	dd09      	ble.n	800b2de <_dtoa_r+0x72e>
 800b2ca:	4545      	cmp	r5, r8
 800b2cc:	9a05      	ldr	r2, [sp, #20]
 800b2ce:	462b      	mov	r3, r5
 800b2d0:	bfa8      	it	ge
 800b2d2:	4643      	movge	r3, r8
 800b2d4:	1ad2      	subs	r2, r2, r3
 800b2d6:	9205      	str	r2, [sp, #20]
 800b2d8:	1aed      	subs	r5, r5, r3
 800b2da:	eba8 0803 	sub.w	r8, r8, r3
 800b2de:	9b07      	ldr	r3, [sp, #28]
 800b2e0:	b1eb      	cbz	r3, 800b31e <_dtoa_r+0x76e>
 800b2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d067      	beq.n	800b3b8 <_dtoa_r+0x808>
 800b2e8:	b18f      	cbz	r7, 800b30e <_dtoa_r+0x75e>
 800b2ea:	4631      	mov	r1, r6
 800b2ec:	463a      	mov	r2, r7
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f001 f91e 	bl	800c530 <__pow5mult>
 800b2f4:	9a04      	ldr	r2, [sp, #16]
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f001 f882 	bl	800c404 <__multiply>
 800b300:	9904      	ldr	r1, [sp, #16]
 800b302:	9008      	str	r0, [sp, #32]
 800b304:	4620      	mov	r0, r4
 800b306:	f000 ff96 	bl	800c236 <_Bfree>
 800b30a:	9b08      	ldr	r3, [sp, #32]
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	9b07      	ldr	r3, [sp, #28]
 800b310:	1bda      	subs	r2, r3, r7
 800b312:	d004      	beq.n	800b31e <_dtoa_r+0x76e>
 800b314:	9904      	ldr	r1, [sp, #16]
 800b316:	4620      	mov	r0, r4
 800b318:	f001 f90a 	bl	800c530 <__pow5mult>
 800b31c:	9004      	str	r0, [sp, #16]
 800b31e:	2101      	movs	r1, #1
 800b320:	4620      	mov	r0, r4
 800b322:	f001 f866 	bl	800c3f2 <__i2b>
 800b326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b328:	4607      	mov	r7, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 81d0 	beq.w	800b6d0 <_dtoa_r+0xb20>
 800b330:	461a      	mov	r2, r3
 800b332:	4601      	mov	r1, r0
 800b334:	4620      	mov	r0, r4
 800b336:	f001 f8fb 	bl	800c530 <__pow5mult>
 800b33a:	9b06      	ldr	r3, [sp, #24]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	4607      	mov	r7, r0
 800b340:	dc40      	bgt.n	800b3c4 <_dtoa_r+0x814>
 800b342:	9b00      	ldr	r3, [sp, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d139      	bne.n	800b3bc <_dtoa_r+0x80c>
 800b348:	9b01      	ldr	r3, [sp, #4]
 800b34a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d136      	bne.n	800b3c0 <_dtoa_r+0x810>
 800b352:	9b01      	ldr	r3, [sp, #4]
 800b354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b358:	0d1b      	lsrs	r3, r3, #20
 800b35a:	051b      	lsls	r3, r3, #20
 800b35c:	b12b      	cbz	r3, 800b36a <_dtoa_r+0x7ba>
 800b35e:	9b05      	ldr	r3, [sp, #20]
 800b360:	3301      	adds	r3, #1
 800b362:	9305      	str	r3, [sp, #20]
 800b364:	f108 0801 	add.w	r8, r8, #1
 800b368:	2301      	movs	r3, #1
 800b36a:	9307      	str	r3, [sp, #28]
 800b36c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d12a      	bne.n	800b3c8 <_dtoa_r+0x818>
 800b372:	2001      	movs	r0, #1
 800b374:	e030      	b.n	800b3d8 <_dtoa_r+0x828>
 800b376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b378:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b37c:	e795      	b.n	800b2aa <_dtoa_r+0x6fa>
 800b37e:	9b07      	ldr	r3, [sp, #28]
 800b380:	f109 37ff 	add.w	r7, r9, #4294967295
 800b384:	42bb      	cmp	r3, r7
 800b386:	bfbf      	itttt	lt
 800b388:	9b07      	ldrlt	r3, [sp, #28]
 800b38a:	9707      	strlt	r7, [sp, #28]
 800b38c:	1afa      	sublt	r2, r7, r3
 800b38e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b390:	bfbb      	ittet	lt
 800b392:	189b      	addlt	r3, r3, r2
 800b394:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b396:	1bdf      	subge	r7, r3, r7
 800b398:	2700      	movlt	r7, #0
 800b39a:	f1b9 0f00 	cmp.w	r9, #0
 800b39e:	bfb5      	itete	lt
 800b3a0:	9b05      	ldrlt	r3, [sp, #20]
 800b3a2:	9d05      	ldrge	r5, [sp, #20]
 800b3a4:	eba3 0509 	sublt.w	r5, r3, r9
 800b3a8:	464b      	movge	r3, r9
 800b3aa:	bfb8      	it	lt
 800b3ac:	2300      	movlt	r3, #0
 800b3ae:	e77e      	b.n	800b2ae <_dtoa_r+0x6fe>
 800b3b0:	9f07      	ldr	r7, [sp, #28]
 800b3b2:	9d05      	ldr	r5, [sp, #20]
 800b3b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b3b6:	e783      	b.n	800b2c0 <_dtoa_r+0x710>
 800b3b8:	9a07      	ldr	r2, [sp, #28]
 800b3ba:	e7ab      	b.n	800b314 <_dtoa_r+0x764>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e7d4      	b.n	800b36a <_dtoa_r+0x7ba>
 800b3c0:	9b00      	ldr	r3, [sp, #0]
 800b3c2:	e7d2      	b.n	800b36a <_dtoa_r+0x7ba>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	9307      	str	r3, [sp, #28]
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b3ce:	6918      	ldr	r0, [r3, #16]
 800b3d0:	f000 ffc1 	bl	800c356 <__hi0bits>
 800b3d4:	f1c0 0020 	rsb	r0, r0, #32
 800b3d8:	4440      	add	r0, r8
 800b3da:	f010 001f 	ands.w	r0, r0, #31
 800b3de:	d047      	beq.n	800b470 <_dtoa_r+0x8c0>
 800b3e0:	f1c0 0320 	rsb	r3, r0, #32
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	dd3b      	ble.n	800b460 <_dtoa_r+0x8b0>
 800b3e8:	9b05      	ldr	r3, [sp, #20]
 800b3ea:	f1c0 001c 	rsb	r0, r0, #28
 800b3ee:	4403      	add	r3, r0
 800b3f0:	9305      	str	r3, [sp, #20]
 800b3f2:	4405      	add	r5, r0
 800b3f4:	4480      	add	r8, r0
 800b3f6:	9b05      	ldr	r3, [sp, #20]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	dd05      	ble.n	800b408 <_dtoa_r+0x858>
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	9904      	ldr	r1, [sp, #16]
 800b400:	4620      	mov	r0, r4
 800b402:	f001 f8e3 	bl	800c5cc <__lshift>
 800b406:	9004      	str	r0, [sp, #16]
 800b408:	f1b8 0f00 	cmp.w	r8, #0
 800b40c:	dd05      	ble.n	800b41a <_dtoa_r+0x86a>
 800b40e:	4639      	mov	r1, r7
 800b410:	4642      	mov	r2, r8
 800b412:	4620      	mov	r0, r4
 800b414:	f001 f8da 	bl	800c5cc <__lshift>
 800b418:	4607      	mov	r7, r0
 800b41a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b41c:	b353      	cbz	r3, 800b474 <_dtoa_r+0x8c4>
 800b41e:	4639      	mov	r1, r7
 800b420:	9804      	ldr	r0, [sp, #16]
 800b422:	f001 f927 	bl	800c674 <__mcmp>
 800b426:	2800      	cmp	r0, #0
 800b428:	da24      	bge.n	800b474 <_dtoa_r+0x8c4>
 800b42a:	2300      	movs	r3, #0
 800b42c:	220a      	movs	r2, #10
 800b42e:	9904      	ldr	r1, [sp, #16]
 800b430:	4620      	mov	r0, r4
 800b432:	f000 ff17 	bl	800c264 <__multadd>
 800b436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b438:	9004      	str	r0, [sp, #16]
 800b43a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 814d 	beq.w	800b6de <_dtoa_r+0xb2e>
 800b444:	2300      	movs	r3, #0
 800b446:	4631      	mov	r1, r6
 800b448:	220a      	movs	r2, #10
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 ff0a 	bl	800c264 <__multadd>
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	4606      	mov	r6, r0
 800b456:	dc4f      	bgt.n	800b4f8 <_dtoa_r+0x948>
 800b458:	9b06      	ldr	r3, [sp, #24]
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	dd4c      	ble.n	800b4f8 <_dtoa_r+0x948>
 800b45e:	e011      	b.n	800b484 <_dtoa_r+0x8d4>
 800b460:	d0c9      	beq.n	800b3f6 <_dtoa_r+0x846>
 800b462:	9a05      	ldr	r2, [sp, #20]
 800b464:	331c      	adds	r3, #28
 800b466:	441a      	add	r2, r3
 800b468:	9205      	str	r2, [sp, #20]
 800b46a:	441d      	add	r5, r3
 800b46c:	4498      	add	r8, r3
 800b46e:	e7c2      	b.n	800b3f6 <_dtoa_r+0x846>
 800b470:	4603      	mov	r3, r0
 800b472:	e7f6      	b.n	800b462 <_dtoa_r+0x8b2>
 800b474:	f1b9 0f00 	cmp.w	r9, #0
 800b478:	dc38      	bgt.n	800b4ec <_dtoa_r+0x93c>
 800b47a:	9b06      	ldr	r3, [sp, #24]
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	dd35      	ble.n	800b4ec <_dtoa_r+0x93c>
 800b480:	f8cd 9008 	str.w	r9, [sp, #8]
 800b484:	9b02      	ldr	r3, [sp, #8]
 800b486:	b963      	cbnz	r3, 800b4a2 <_dtoa_r+0x8f2>
 800b488:	4639      	mov	r1, r7
 800b48a:	2205      	movs	r2, #5
 800b48c:	4620      	mov	r0, r4
 800b48e:	f000 fee9 	bl	800c264 <__multadd>
 800b492:	4601      	mov	r1, r0
 800b494:	4607      	mov	r7, r0
 800b496:	9804      	ldr	r0, [sp, #16]
 800b498:	f001 f8ec 	bl	800c674 <__mcmp>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f73f adcc 	bgt.w	800b03a <_dtoa_r+0x48a>
 800b4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a4:	465d      	mov	r5, fp
 800b4a6:	ea6f 0a03 	mvn.w	sl, r3
 800b4aa:	f04f 0900 	mov.w	r9, #0
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f000 fec0 	bl	800c236 <_Bfree>
 800b4b6:	2e00      	cmp	r6, #0
 800b4b8:	f43f aeb7 	beq.w	800b22a <_dtoa_r+0x67a>
 800b4bc:	f1b9 0f00 	cmp.w	r9, #0
 800b4c0:	d005      	beq.n	800b4ce <_dtoa_r+0x91e>
 800b4c2:	45b1      	cmp	r9, r6
 800b4c4:	d003      	beq.n	800b4ce <_dtoa_r+0x91e>
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f000 feb4 	bl	800c236 <_Bfree>
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 feb0 	bl	800c236 <_Bfree>
 800b4d6:	e6a8      	b.n	800b22a <_dtoa_r+0x67a>
 800b4d8:	2700      	movs	r7, #0
 800b4da:	463e      	mov	r6, r7
 800b4dc:	e7e1      	b.n	800b4a2 <_dtoa_r+0x8f2>
 800b4de:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b4e2:	463e      	mov	r6, r7
 800b4e4:	e5a9      	b.n	800b03a <_dtoa_r+0x48a>
 800b4e6:	bf00      	nop
 800b4e8:	40240000 	.word	0x40240000
 800b4ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ee:	f8cd 9008 	str.w	r9, [sp, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 80fa 	beq.w	800b6ec <_dtoa_r+0xb3c>
 800b4f8:	2d00      	cmp	r5, #0
 800b4fa:	dd05      	ble.n	800b508 <_dtoa_r+0x958>
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	462a      	mov	r2, r5
 800b500:	4620      	mov	r0, r4
 800b502:	f001 f863 	bl	800c5cc <__lshift>
 800b506:	4606      	mov	r6, r0
 800b508:	9b07      	ldr	r3, [sp, #28]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d04c      	beq.n	800b5a8 <_dtoa_r+0x9f8>
 800b50e:	6871      	ldr	r1, [r6, #4]
 800b510:	4620      	mov	r0, r4
 800b512:	f000 fe5c 	bl	800c1ce <_Balloc>
 800b516:	6932      	ldr	r2, [r6, #16]
 800b518:	3202      	adds	r2, #2
 800b51a:	4605      	mov	r5, r0
 800b51c:	0092      	lsls	r2, r2, #2
 800b51e:	f106 010c 	add.w	r1, r6, #12
 800b522:	300c      	adds	r0, #12
 800b524:	f000 fe46 	bl	800c1b4 <memcpy>
 800b528:	2201      	movs	r2, #1
 800b52a:	4629      	mov	r1, r5
 800b52c:	4620      	mov	r0, r4
 800b52e:	f001 f84d 	bl	800c5cc <__lshift>
 800b532:	9b00      	ldr	r3, [sp, #0]
 800b534:	f8cd b014 	str.w	fp, [sp, #20]
 800b538:	f003 0301 	and.w	r3, r3, #1
 800b53c:	46b1      	mov	r9, r6
 800b53e:	9307      	str	r3, [sp, #28]
 800b540:	4606      	mov	r6, r0
 800b542:	4639      	mov	r1, r7
 800b544:	9804      	ldr	r0, [sp, #16]
 800b546:	f7ff faa7 	bl	800aa98 <quorem>
 800b54a:	4649      	mov	r1, r9
 800b54c:	4605      	mov	r5, r0
 800b54e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b552:	9804      	ldr	r0, [sp, #16]
 800b554:	f001 f88e 	bl	800c674 <__mcmp>
 800b558:	4632      	mov	r2, r6
 800b55a:	9000      	str	r0, [sp, #0]
 800b55c:	4639      	mov	r1, r7
 800b55e:	4620      	mov	r0, r4
 800b560:	f001 f8a2 	bl	800c6a8 <__mdiff>
 800b564:	68c3      	ldr	r3, [r0, #12]
 800b566:	4602      	mov	r2, r0
 800b568:	bb03      	cbnz	r3, 800b5ac <_dtoa_r+0x9fc>
 800b56a:	4601      	mov	r1, r0
 800b56c:	9008      	str	r0, [sp, #32]
 800b56e:	9804      	ldr	r0, [sp, #16]
 800b570:	f001 f880 	bl	800c674 <__mcmp>
 800b574:	9a08      	ldr	r2, [sp, #32]
 800b576:	4603      	mov	r3, r0
 800b578:	4611      	mov	r1, r2
 800b57a:	4620      	mov	r0, r4
 800b57c:	9308      	str	r3, [sp, #32]
 800b57e:	f000 fe5a 	bl	800c236 <_Bfree>
 800b582:	9b08      	ldr	r3, [sp, #32]
 800b584:	b9a3      	cbnz	r3, 800b5b0 <_dtoa_r+0xa00>
 800b586:	9a06      	ldr	r2, [sp, #24]
 800b588:	b992      	cbnz	r2, 800b5b0 <_dtoa_r+0xa00>
 800b58a:	9a07      	ldr	r2, [sp, #28]
 800b58c:	b982      	cbnz	r2, 800b5b0 <_dtoa_r+0xa00>
 800b58e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b592:	d029      	beq.n	800b5e8 <_dtoa_r+0xa38>
 800b594:	9b00      	ldr	r3, [sp, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	dd01      	ble.n	800b59e <_dtoa_r+0x9ee>
 800b59a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b59e:	9b05      	ldr	r3, [sp, #20]
 800b5a0:	1c5d      	adds	r5, r3, #1
 800b5a2:	f883 8000 	strb.w	r8, [r3]
 800b5a6:	e782      	b.n	800b4ae <_dtoa_r+0x8fe>
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	e7c2      	b.n	800b532 <_dtoa_r+0x982>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e7e3      	b.n	800b578 <_dtoa_r+0x9c8>
 800b5b0:	9a00      	ldr	r2, [sp, #0]
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	db04      	blt.n	800b5c0 <_dtoa_r+0xa10>
 800b5b6:	d125      	bne.n	800b604 <_dtoa_r+0xa54>
 800b5b8:	9a06      	ldr	r2, [sp, #24]
 800b5ba:	bb1a      	cbnz	r2, 800b604 <_dtoa_r+0xa54>
 800b5bc:	9a07      	ldr	r2, [sp, #28]
 800b5be:	bb0a      	cbnz	r2, 800b604 <_dtoa_r+0xa54>
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	ddec      	ble.n	800b59e <_dtoa_r+0x9ee>
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	9904      	ldr	r1, [sp, #16]
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f000 ffff 	bl	800c5cc <__lshift>
 800b5ce:	4639      	mov	r1, r7
 800b5d0:	9004      	str	r0, [sp, #16]
 800b5d2:	f001 f84f 	bl	800c674 <__mcmp>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	dc03      	bgt.n	800b5e2 <_dtoa_r+0xa32>
 800b5da:	d1e0      	bne.n	800b59e <_dtoa_r+0x9ee>
 800b5dc:	f018 0f01 	tst.w	r8, #1
 800b5e0:	d0dd      	beq.n	800b59e <_dtoa_r+0x9ee>
 800b5e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b5e6:	d1d8      	bne.n	800b59a <_dtoa_r+0x9ea>
 800b5e8:	9b05      	ldr	r3, [sp, #20]
 800b5ea:	9a05      	ldr	r2, [sp, #20]
 800b5ec:	1c5d      	adds	r5, r3, #1
 800b5ee:	2339      	movs	r3, #57	; 0x39
 800b5f0:	7013      	strb	r3, [r2, #0]
 800b5f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5f6:	2b39      	cmp	r3, #57	; 0x39
 800b5f8:	f105 32ff 	add.w	r2, r5, #4294967295
 800b5fc:	d04f      	beq.n	800b69e <_dtoa_r+0xaee>
 800b5fe:	3301      	adds	r3, #1
 800b600:	7013      	strb	r3, [r2, #0]
 800b602:	e754      	b.n	800b4ae <_dtoa_r+0x8fe>
 800b604:	9a05      	ldr	r2, [sp, #20]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f102 0501 	add.w	r5, r2, #1
 800b60c:	dd06      	ble.n	800b61c <_dtoa_r+0xa6c>
 800b60e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b612:	d0e9      	beq.n	800b5e8 <_dtoa_r+0xa38>
 800b614:	f108 0801 	add.w	r8, r8, #1
 800b618:	9b05      	ldr	r3, [sp, #20]
 800b61a:	e7c2      	b.n	800b5a2 <_dtoa_r+0x9f2>
 800b61c:	9a02      	ldr	r2, [sp, #8]
 800b61e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b622:	eba5 030b 	sub.w	r3, r5, fp
 800b626:	4293      	cmp	r3, r2
 800b628:	d021      	beq.n	800b66e <_dtoa_r+0xabe>
 800b62a:	2300      	movs	r3, #0
 800b62c:	220a      	movs	r2, #10
 800b62e:	9904      	ldr	r1, [sp, #16]
 800b630:	4620      	mov	r0, r4
 800b632:	f000 fe17 	bl	800c264 <__multadd>
 800b636:	45b1      	cmp	r9, r6
 800b638:	9004      	str	r0, [sp, #16]
 800b63a:	f04f 0300 	mov.w	r3, #0
 800b63e:	f04f 020a 	mov.w	r2, #10
 800b642:	4649      	mov	r1, r9
 800b644:	4620      	mov	r0, r4
 800b646:	d105      	bne.n	800b654 <_dtoa_r+0xaa4>
 800b648:	f000 fe0c 	bl	800c264 <__multadd>
 800b64c:	4681      	mov	r9, r0
 800b64e:	4606      	mov	r6, r0
 800b650:	9505      	str	r5, [sp, #20]
 800b652:	e776      	b.n	800b542 <_dtoa_r+0x992>
 800b654:	f000 fe06 	bl	800c264 <__multadd>
 800b658:	4631      	mov	r1, r6
 800b65a:	4681      	mov	r9, r0
 800b65c:	2300      	movs	r3, #0
 800b65e:	220a      	movs	r2, #10
 800b660:	4620      	mov	r0, r4
 800b662:	f000 fdff 	bl	800c264 <__multadd>
 800b666:	4606      	mov	r6, r0
 800b668:	e7f2      	b.n	800b650 <_dtoa_r+0xaa0>
 800b66a:	f04f 0900 	mov.w	r9, #0
 800b66e:	2201      	movs	r2, #1
 800b670:	9904      	ldr	r1, [sp, #16]
 800b672:	4620      	mov	r0, r4
 800b674:	f000 ffaa 	bl	800c5cc <__lshift>
 800b678:	4639      	mov	r1, r7
 800b67a:	9004      	str	r0, [sp, #16]
 800b67c:	f000 fffa 	bl	800c674 <__mcmp>
 800b680:	2800      	cmp	r0, #0
 800b682:	dcb6      	bgt.n	800b5f2 <_dtoa_r+0xa42>
 800b684:	d102      	bne.n	800b68c <_dtoa_r+0xadc>
 800b686:	f018 0f01 	tst.w	r8, #1
 800b68a:	d1b2      	bne.n	800b5f2 <_dtoa_r+0xa42>
 800b68c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b690:	2b30      	cmp	r3, #48	; 0x30
 800b692:	f105 32ff 	add.w	r2, r5, #4294967295
 800b696:	f47f af0a 	bne.w	800b4ae <_dtoa_r+0x8fe>
 800b69a:	4615      	mov	r5, r2
 800b69c:	e7f6      	b.n	800b68c <_dtoa_r+0xadc>
 800b69e:	4593      	cmp	fp, r2
 800b6a0:	d105      	bne.n	800b6ae <_dtoa_r+0xafe>
 800b6a2:	2331      	movs	r3, #49	; 0x31
 800b6a4:	f10a 0a01 	add.w	sl, sl, #1
 800b6a8:	f88b 3000 	strb.w	r3, [fp]
 800b6ac:	e6ff      	b.n	800b4ae <_dtoa_r+0x8fe>
 800b6ae:	4615      	mov	r5, r2
 800b6b0:	e79f      	b.n	800b5f2 <_dtoa_r+0xa42>
 800b6b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b718 <_dtoa_r+0xb68>
 800b6b6:	e007      	b.n	800b6c8 <_dtoa_r+0xb18>
 800b6b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b71c <_dtoa_r+0xb6c>
 800b6be:	b11b      	cbz	r3, 800b6c8 <_dtoa_r+0xb18>
 800b6c0:	f10b 0308 	add.w	r3, fp, #8
 800b6c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	4658      	mov	r0, fp
 800b6ca:	b017      	add	sp, #92	; 0x5c
 800b6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d0:	9b06      	ldr	r3, [sp, #24]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	f77f ae35 	ble.w	800b342 <_dtoa_r+0x792>
 800b6d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6da:	9307      	str	r3, [sp, #28]
 800b6dc:	e649      	b.n	800b372 <_dtoa_r+0x7c2>
 800b6de:	9b02      	ldr	r3, [sp, #8]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dc03      	bgt.n	800b6ec <_dtoa_r+0xb3c>
 800b6e4:	9b06      	ldr	r3, [sp, #24]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	f73f aecc 	bgt.w	800b484 <_dtoa_r+0x8d4>
 800b6ec:	465d      	mov	r5, fp
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	9804      	ldr	r0, [sp, #16]
 800b6f2:	f7ff f9d1 	bl	800aa98 <quorem>
 800b6f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b6fa:	f805 8b01 	strb.w	r8, [r5], #1
 800b6fe:	9a02      	ldr	r2, [sp, #8]
 800b700:	eba5 030b 	sub.w	r3, r5, fp
 800b704:	429a      	cmp	r2, r3
 800b706:	ddb0      	ble.n	800b66a <_dtoa_r+0xaba>
 800b708:	2300      	movs	r3, #0
 800b70a:	220a      	movs	r2, #10
 800b70c:	9904      	ldr	r1, [sp, #16]
 800b70e:	4620      	mov	r0, r4
 800b710:	f000 fda8 	bl	800c264 <__multadd>
 800b714:	9004      	str	r0, [sp, #16]
 800b716:	e7ea      	b.n	800b6ee <_dtoa_r+0xb3e>
 800b718:	080106db 	.word	0x080106db
 800b71c:	08010538 	.word	0x08010538

0800b720 <__sflush_r>:
 800b720:	898a      	ldrh	r2, [r1, #12]
 800b722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b726:	4605      	mov	r5, r0
 800b728:	0710      	lsls	r0, r2, #28
 800b72a:	460c      	mov	r4, r1
 800b72c:	d458      	bmi.n	800b7e0 <__sflush_r+0xc0>
 800b72e:	684b      	ldr	r3, [r1, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	dc05      	bgt.n	800b740 <__sflush_r+0x20>
 800b734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b736:	2b00      	cmp	r3, #0
 800b738:	dc02      	bgt.n	800b740 <__sflush_r+0x20>
 800b73a:	2000      	movs	r0, #0
 800b73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b742:	2e00      	cmp	r6, #0
 800b744:	d0f9      	beq.n	800b73a <__sflush_r+0x1a>
 800b746:	2300      	movs	r3, #0
 800b748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b74c:	682f      	ldr	r7, [r5, #0]
 800b74e:	6a21      	ldr	r1, [r4, #32]
 800b750:	602b      	str	r3, [r5, #0]
 800b752:	d032      	beq.n	800b7ba <__sflush_r+0x9a>
 800b754:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	075a      	lsls	r2, r3, #29
 800b75a:	d505      	bpl.n	800b768 <__sflush_r+0x48>
 800b75c:	6863      	ldr	r3, [r4, #4]
 800b75e:	1ac0      	subs	r0, r0, r3
 800b760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b762:	b10b      	cbz	r3, 800b768 <__sflush_r+0x48>
 800b764:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b766:	1ac0      	subs	r0, r0, r3
 800b768:	2300      	movs	r3, #0
 800b76a:	4602      	mov	r2, r0
 800b76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b76e:	6a21      	ldr	r1, [r4, #32]
 800b770:	4628      	mov	r0, r5
 800b772:	47b0      	blx	r6
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	d106      	bne.n	800b788 <__sflush_r+0x68>
 800b77a:	6829      	ldr	r1, [r5, #0]
 800b77c:	291d      	cmp	r1, #29
 800b77e:	d848      	bhi.n	800b812 <__sflush_r+0xf2>
 800b780:	4a29      	ldr	r2, [pc, #164]	; (800b828 <__sflush_r+0x108>)
 800b782:	40ca      	lsrs	r2, r1
 800b784:	07d6      	lsls	r6, r2, #31
 800b786:	d544      	bpl.n	800b812 <__sflush_r+0xf2>
 800b788:	2200      	movs	r2, #0
 800b78a:	6062      	str	r2, [r4, #4]
 800b78c:	04d9      	lsls	r1, r3, #19
 800b78e:	6922      	ldr	r2, [r4, #16]
 800b790:	6022      	str	r2, [r4, #0]
 800b792:	d504      	bpl.n	800b79e <__sflush_r+0x7e>
 800b794:	1c42      	adds	r2, r0, #1
 800b796:	d101      	bne.n	800b79c <__sflush_r+0x7c>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b903      	cbnz	r3, 800b79e <__sflush_r+0x7e>
 800b79c:	6560      	str	r0, [r4, #84]	; 0x54
 800b79e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7a0:	602f      	str	r7, [r5, #0]
 800b7a2:	2900      	cmp	r1, #0
 800b7a4:	d0c9      	beq.n	800b73a <__sflush_r+0x1a>
 800b7a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7aa:	4299      	cmp	r1, r3
 800b7ac:	d002      	beq.n	800b7b4 <__sflush_r+0x94>
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f7fd f9c4 	bl	8008b3c <_free_r>
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	6360      	str	r0, [r4, #52]	; 0x34
 800b7b8:	e7c0      	b.n	800b73c <__sflush_r+0x1c>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	4628      	mov	r0, r5
 800b7be:	47b0      	blx	r6
 800b7c0:	1c41      	adds	r1, r0, #1
 800b7c2:	d1c8      	bne.n	800b756 <__sflush_r+0x36>
 800b7c4:	682b      	ldr	r3, [r5, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d0c5      	beq.n	800b756 <__sflush_r+0x36>
 800b7ca:	2b1d      	cmp	r3, #29
 800b7cc:	d001      	beq.n	800b7d2 <__sflush_r+0xb2>
 800b7ce:	2b16      	cmp	r3, #22
 800b7d0:	d101      	bne.n	800b7d6 <__sflush_r+0xb6>
 800b7d2:	602f      	str	r7, [r5, #0]
 800b7d4:	e7b1      	b.n	800b73a <__sflush_r+0x1a>
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7dc:	81a3      	strh	r3, [r4, #12]
 800b7de:	e7ad      	b.n	800b73c <__sflush_r+0x1c>
 800b7e0:	690f      	ldr	r7, [r1, #16]
 800b7e2:	2f00      	cmp	r7, #0
 800b7e4:	d0a9      	beq.n	800b73a <__sflush_r+0x1a>
 800b7e6:	0793      	lsls	r3, r2, #30
 800b7e8:	680e      	ldr	r6, [r1, #0]
 800b7ea:	bf08      	it	eq
 800b7ec:	694b      	ldreq	r3, [r1, #20]
 800b7ee:	600f      	str	r7, [r1, #0]
 800b7f0:	bf18      	it	ne
 800b7f2:	2300      	movne	r3, #0
 800b7f4:	eba6 0807 	sub.w	r8, r6, r7
 800b7f8:	608b      	str	r3, [r1, #8]
 800b7fa:	f1b8 0f00 	cmp.w	r8, #0
 800b7fe:	dd9c      	ble.n	800b73a <__sflush_r+0x1a>
 800b800:	4643      	mov	r3, r8
 800b802:	463a      	mov	r2, r7
 800b804:	6a21      	ldr	r1, [r4, #32]
 800b806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b808:	4628      	mov	r0, r5
 800b80a:	47b0      	blx	r6
 800b80c:	2800      	cmp	r0, #0
 800b80e:	dc06      	bgt.n	800b81e <__sflush_r+0xfe>
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b816:	81a3      	strh	r3, [r4, #12]
 800b818:	f04f 30ff 	mov.w	r0, #4294967295
 800b81c:	e78e      	b.n	800b73c <__sflush_r+0x1c>
 800b81e:	4407      	add	r7, r0
 800b820:	eba8 0800 	sub.w	r8, r8, r0
 800b824:	e7e9      	b.n	800b7fa <__sflush_r+0xda>
 800b826:	bf00      	nop
 800b828:	20400001 	.word	0x20400001

0800b82c <_fflush_r>:
 800b82c:	b538      	push	{r3, r4, r5, lr}
 800b82e:	690b      	ldr	r3, [r1, #16]
 800b830:	4605      	mov	r5, r0
 800b832:	460c      	mov	r4, r1
 800b834:	b1db      	cbz	r3, 800b86e <_fflush_r+0x42>
 800b836:	b118      	cbz	r0, 800b840 <_fflush_r+0x14>
 800b838:	6983      	ldr	r3, [r0, #24]
 800b83a:	b90b      	cbnz	r3, 800b840 <_fflush_r+0x14>
 800b83c:	f000 f860 	bl	800b900 <__sinit>
 800b840:	4b0c      	ldr	r3, [pc, #48]	; (800b874 <_fflush_r+0x48>)
 800b842:	429c      	cmp	r4, r3
 800b844:	d109      	bne.n	800b85a <_fflush_r+0x2e>
 800b846:	686c      	ldr	r4, [r5, #4]
 800b848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84c:	b17b      	cbz	r3, 800b86e <_fflush_r+0x42>
 800b84e:	4621      	mov	r1, r4
 800b850:	4628      	mov	r0, r5
 800b852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b856:	f7ff bf63 	b.w	800b720 <__sflush_r>
 800b85a:	4b07      	ldr	r3, [pc, #28]	; (800b878 <_fflush_r+0x4c>)
 800b85c:	429c      	cmp	r4, r3
 800b85e:	d101      	bne.n	800b864 <_fflush_r+0x38>
 800b860:	68ac      	ldr	r4, [r5, #8]
 800b862:	e7f1      	b.n	800b848 <_fflush_r+0x1c>
 800b864:	4b05      	ldr	r3, [pc, #20]	; (800b87c <_fflush_r+0x50>)
 800b866:	429c      	cmp	r4, r3
 800b868:	bf08      	it	eq
 800b86a:	68ec      	ldreq	r4, [r5, #12]
 800b86c:	e7ec      	b.n	800b848 <_fflush_r+0x1c>
 800b86e:	2000      	movs	r0, #0
 800b870:	bd38      	pop	{r3, r4, r5, pc}
 800b872:	bf00      	nop
 800b874:	08010568 	.word	0x08010568
 800b878:	08010588 	.word	0x08010588
 800b87c:	08010548 	.word	0x08010548

0800b880 <std>:
 800b880:	2300      	movs	r3, #0
 800b882:	b510      	push	{r4, lr}
 800b884:	4604      	mov	r4, r0
 800b886:	e9c0 3300 	strd	r3, r3, [r0]
 800b88a:	6083      	str	r3, [r0, #8]
 800b88c:	8181      	strh	r1, [r0, #12]
 800b88e:	6643      	str	r3, [r0, #100]	; 0x64
 800b890:	81c2      	strh	r2, [r0, #14]
 800b892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b896:	6183      	str	r3, [r0, #24]
 800b898:	4619      	mov	r1, r3
 800b89a:	2208      	movs	r2, #8
 800b89c:	305c      	adds	r0, #92	; 0x5c
 800b89e:	f7fd f945 	bl	8008b2c <memset>
 800b8a2:	4b05      	ldr	r3, [pc, #20]	; (800b8b8 <std+0x38>)
 800b8a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b8a6:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <std+0x3c>)
 800b8a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8aa:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <std+0x40>)
 800b8ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <std+0x44>)
 800b8b0:	6224      	str	r4, [r4, #32]
 800b8b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b8b4:	bd10      	pop	{r4, pc}
 800b8b6:	bf00      	nop
 800b8b8:	08009ac1 	.word	0x08009ac1
 800b8bc:	08009ae7 	.word	0x08009ae7
 800b8c0:	08009b1f 	.word	0x08009b1f
 800b8c4:	08009b43 	.word	0x08009b43

0800b8c8 <_cleanup_r>:
 800b8c8:	4901      	ldr	r1, [pc, #4]	; (800b8d0 <_cleanup_r+0x8>)
 800b8ca:	f000 b885 	b.w	800b9d8 <_fwalk_reent>
 800b8ce:	bf00      	nop
 800b8d0:	0800b82d 	.word	0x0800b82d

0800b8d4 <__sfmoreglue>:
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	1e4a      	subs	r2, r1, #1
 800b8d8:	2568      	movs	r5, #104	; 0x68
 800b8da:	4355      	muls	r5, r2
 800b8dc:	460e      	mov	r6, r1
 800b8de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8e2:	f7fd f979 	bl	8008bd8 <_malloc_r>
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	b140      	cbz	r0, 800b8fc <__sfmoreglue+0x28>
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	e9c0 1600 	strd	r1, r6, [r0]
 800b8f0:	300c      	adds	r0, #12
 800b8f2:	60a0      	str	r0, [r4, #8]
 800b8f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8f8:	f7fd f918 	bl	8008b2c <memset>
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}

0800b900 <__sinit>:
 800b900:	6983      	ldr	r3, [r0, #24]
 800b902:	b510      	push	{r4, lr}
 800b904:	4604      	mov	r4, r0
 800b906:	bb33      	cbnz	r3, 800b956 <__sinit+0x56>
 800b908:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b90c:	6503      	str	r3, [r0, #80]	; 0x50
 800b90e:	4b12      	ldr	r3, [pc, #72]	; (800b958 <__sinit+0x58>)
 800b910:	4a12      	ldr	r2, [pc, #72]	; (800b95c <__sinit+0x5c>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6282      	str	r2, [r0, #40]	; 0x28
 800b916:	4298      	cmp	r0, r3
 800b918:	bf04      	itt	eq
 800b91a:	2301      	moveq	r3, #1
 800b91c:	6183      	streq	r3, [r0, #24]
 800b91e:	f000 f81f 	bl	800b960 <__sfp>
 800b922:	6060      	str	r0, [r4, #4]
 800b924:	4620      	mov	r0, r4
 800b926:	f000 f81b 	bl	800b960 <__sfp>
 800b92a:	60a0      	str	r0, [r4, #8]
 800b92c:	4620      	mov	r0, r4
 800b92e:	f000 f817 	bl	800b960 <__sfp>
 800b932:	2200      	movs	r2, #0
 800b934:	60e0      	str	r0, [r4, #12]
 800b936:	2104      	movs	r1, #4
 800b938:	6860      	ldr	r0, [r4, #4]
 800b93a:	f7ff ffa1 	bl	800b880 <std>
 800b93e:	2201      	movs	r2, #1
 800b940:	2109      	movs	r1, #9
 800b942:	68a0      	ldr	r0, [r4, #8]
 800b944:	f7ff ff9c 	bl	800b880 <std>
 800b948:	2202      	movs	r2, #2
 800b94a:	2112      	movs	r1, #18
 800b94c:	68e0      	ldr	r0, [r4, #12]
 800b94e:	f7ff ff97 	bl	800b880 <std>
 800b952:	2301      	movs	r3, #1
 800b954:	61a3      	str	r3, [r4, #24]
 800b956:	bd10      	pop	{r4, pc}
 800b958:	080104ac 	.word	0x080104ac
 800b95c:	0800b8c9 	.word	0x0800b8c9

0800b960 <__sfp>:
 800b960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b962:	4b1b      	ldr	r3, [pc, #108]	; (800b9d0 <__sfp+0x70>)
 800b964:	681e      	ldr	r6, [r3, #0]
 800b966:	69b3      	ldr	r3, [r6, #24]
 800b968:	4607      	mov	r7, r0
 800b96a:	b913      	cbnz	r3, 800b972 <__sfp+0x12>
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7ff ffc7 	bl	800b900 <__sinit>
 800b972:	3648      	adds	r6, #72	; 0x48
 800b974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b978:	3b01      	subs	r3, #1
 800b97a:	d503      	bpl.n	800b984 <__sfp+0x24>
 800b97c:	6833      	ldr	r3, [r6, #0]
 800b97e:	b133      	cbz	r3, 800b98e <__sfp+0x2e>
 800b980:	6836      	ldr	r6, [r6, #0]
 800b982:	e7f7      	b.n	800b974 <__sfp+0x14>
 800b984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b988:	b16d      	cbz	r5, 800b9a6 <__sfp+0x46>
 800b98a:	3468      	adds	r4, #104	; 0x68
 800b98c:	e7f4      	b.n	800b978 <__sfp+0x18>
 800b98e:	2104      	movs	r1, #4
 800b990:	4638      	mov	r0, r7
 800b992:	f7ff ff9f 	bl	800b8d4 <__sfmoreglue>
 800b996:	6030      	str	r0, [r6, #0]
 800b998:	2800      	cmp	r0, #0
 800b99a:	d1f1      	bne.n	800b980 <__sfp+0x20>
 800b99c:	230c      	movs	r3, #12
 800b99e:	603b      	str	r3, [r7, #0]
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9a6:	4b0b      	ldr	r3, [pc, #44]	; (800b9d4 <__sfp+0x74>)
 800b9a8:	6665      	str	r5, [r4, #100]	; 0x64
 800b9aa:	e9c4 5500 	strd	r5, r5, [r4]
 800b9ae:	60a5      	str	r5, [r4, #8]
 800b9b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b9b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b9b8:	2208      	movs	r2, #8
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9c0:	f7fd f8b4 	bl	8008b2c <memset>
 800b9c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9cc:	e7e9      	b.n	800b9a2 <__sfp+0x42>
 800b9ce:	bf00      	nop
 800b9d0:	080104ac 	.word	0x080104ac
 800b9d4:	ffff0001 	.word	0xffff0001

0800b9d8 <_fwalk_reent>:
 800b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4689      	mov	r9, r1
 800b9e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9e4:	2600      	movs	r6, #0
 800b9e6:	b914      	cbnz	r4, 800b9ee <_fwalk_reent+0x16>
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b9f2:	3f01      	subs	r7, #1
 800b9f4:	d501      	bpl.n	800b9fa <_fwalk_reent+0x22>
 800b9f6:	6824      	ldr	r4, [r4, #0]
 800b9f8:	e7f5      	b.n	800b9e6 <_fwalk_reent+0xe>
 800b9fa:	89ab      	ldrh	r3, [r5, #12]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d907      	bls.n	800ba10 <_fwalk_reent+0x38>
 800ba00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba04:	3301      	adds	r3, #1
 800ba06:	d003      	beq.n	800ba10 <_fwalk_reent+0x38>
 800ba08:	4629      	mov	r1, r5
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	47c8      	blx	r9
 800ba0e:	4306      	orrs	r6, r0
 800ba10:	3568      	adds	r5, #104	; 0x68
 800ba12:	e7ee      	b.n	800b9f2 <_fwalk_reent+0x1a>

0800ba14 <rshift>:
 800ba14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba16:	6906      	ldr	r6, [r0, #16]
 800ba18:	114b      	asrs	r3, r1, #5
 800ba1a:	429e      	cmp	r6, r3
 800ba1c:	f100 0414 	add.w	r4, r0, #20
 800ba20:	dd30      	ble.n	800ba84 <rshift+0x70>
 800ba22:	f011 011f 	ands.w	r1, r1, #31
 800ba26:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ba2a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ba2e:	d108      	bne.n	800ba42 <rshift+0x2e>
 800ba30:	4621      	mov	r1, r4
 800ba32:	42b2      	cmp	r2, r6
 800ba34:	460b      	mov	r3, r1
 800ba36:	d211      	bcs.n	800ba5c <rshift+0x48>
 800ba38:	f852 3b04 	ldr.w	r3, [r2], #4
 800ba3c:	f841 3b04 	str.w	r3, [r1], #4
 800ba40:	e7f7      	b.n	800ba32 <rshift+0x1e>
 800ba42:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ba46:	f1c1 0c20 	rsb	ip, r1, #32
 800ba4a:	40cd      	lsrs	r5, r1
 800ba4c:	3204      	adds	r2, #4
 800ba4e:	4623      	mov	r3, r4
 800ba50:	42b2      	cmp	r2, r6
 800ba52:	4617      	mov	r7, r2
 800ba54:	d30c      	bcc.n	800ba70 <rshift+0x5c>
 800ba56:	601d      	str	r5, [r3, #0]
 800ba58:	b105      	cbz	r5, 800ba5c <rshift+0x48>
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	1b1a      	subs	r2, r3, r4
 800ba5e:	42a3      	cmp	r3, r4
 800ba60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba64:	bf08      	it	eq
 800ba66:	2300      	moveq	r3, #0
 800ba68:	6102      	str	r2, [r0, #16]
 800ba6a:	bf08      	it	eq
 800ba6c:	6143      	streq	r3, [r0, #20]
 800ba6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba70:	683f      	ldr	r7, [r7, #0]
 800ba72:	fa07 f70c 	lsl.w	r7, r7, ip
 800ba76:	433d      	orrs	r5, r7
 800ba78:	f843 5b04 	str.w	r5, [r3], #4
 800ba7c:	f852 5b04 	ldr.w	r5, [r2], #4
 800ba80:	40cd      	lsrs	r5, r1
 800ba82:	e7e5      	b.n	800ba50 <rshift+0x3c>
 800ba84:	4623      	mov	r3, r4
 800ba86:	e7e9      	b.n	800ba5c <rshift+0x48>

0800ba88 <__hexdig_fun>:
 800ba88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba8c:	2b09      	cmp	r3, #9
 800ba8e:	d802      	bhi.n	800ba96 <__hexdig_fun+0xe>
 800ba90:	3820      	subs	r0, #32
 800ba92:	b2c0      	uxtb	r0, r0
 800ba94:	4770      	bx	lr
 800ba96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba9a:	2b05      	cmp	r3, #5
 800ba9c:	d801      	bhi.n	800baa2 <__hexdig_fun+0x1a>
 800ba9e:	3847      	subs	r0, #71	; 0x47
 800baa0:	e7f7      	b.n	800ba92 <__hexdig_fun+0xa>
 800baa2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800baa6:	2b05      	cmp	r3, #5
 800baa8:	d801      	bhi.n	800baae <__hexdig_fun+0x26>
 800baaa:	3827      	subs	r0, #39	; 0x27
 800baac:	e7f1      	b.n	800ba92 <__hexdig_fun+0xa>
 800baae:	2000      	movs	r0, #0
 800bab0:	4770      	bx	lr

0800bab2 <__gethex>:
 800bab2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab6:	b08b      	sub	sp, #44	; 0x2c
 800bab8:	468a      	mov	sl, r1
 800baba:	9002      	str	r0, [sp, #8]
 800babc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800babe:	9306      	str	r3, [sp, #24]
 800bac0:	4690      	mov	r8, r2
 800bac2:	f000 fadf 	bl	800c084 <__localeconv_l>
 800bac6:	6803      	ldr	r3, [r0, #0]
 800bac8:	9303      	str	r3, [sp, #12]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f4 fb88 	bl	80001e0 <strlen>
 800bad0:	9b03      	ldr	r3, [sp, #12]
 800bad2:	9001      	str	r0, [sp, #4]
 800bad4:	4403      	add	r3, r0
 800bad6:	f04f 0b00 	mov.w	fp, #0
 800bada:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bade:	9307      	str	r3, [sp, #28]
 800bae0:	f8da 3000 	ldr.w	r3, [sl]
 800bae4:	3302      	adds	r3, #2
 800bae6:	461f      	mov	r7, r3
 800bae8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800baec:	2830      	cmp	r0, #48	; 0x30
 800baee:	d06c      	beq.n	800bbca <__gethex+0x118>
 800baf0:	f7ff ffca 	bl	800ba88 <__hexdig_fun>
 800baf4:	4604      	mov	r4, r0
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d16a      	bne.n	800bbd0 <__gethex+0x11e>
 800bafa:	9a01      	ldr	r2, [sp, #4]
 800bafc:	9903      	ldr	r1, [sp, #12]
 800bafe:	4638      	mov	r0, r7
 800bb00:	f001 fd4a 	bl	800d598 <strncmp>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d166      	bne.n	800bbd6 <__gethex+0x124>
 800bb08:	9b01      	ldr	r3, [sp, #4]
 800bb0a:	5cf8      	ldrb	r0, [r7, r3]
 800bb0c:	18fe      	adds	r6, r7, r3
 800bb0e:	f7ff ffbb 	bl	800ba88 <__hexdig_fun>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	d062      	beq.n	800bbdc <__gethex+0x12a>
 800bb16:	4633      	mov	r3, r6
 800bb18:	7818      	ldrb	r0, [r3, #0]
 800bb1a:	2830      	cmp	r0, #48	; 0x30
 800bb1c:	461f      	mov	r7, r3
 800bb1e:	f103 0301 	add.w	r3, r3, #1
 800bb22:	d0f9      	beq.n	800bb18 <__gethex+0x66>
 800bb24:	f7ff ffb0 	bl	800ba88 <__hexdig_fun>
 800bb28:	fab0 f580 	clz	r5, r0
 800bb2c:	096d      	lsrs	r5, r5, #5
 800bb2e:	4634      	mov	r4, r6
 800bb30:	f04f 0b01 	mov.w	fp, #1
 800bb34:	463a      	mov	r2, r7
 800bb36:	4616      	mov	r6, r2
 800bb38:	3201      	adds	r2, #1
 800bb3a:	7830      	ldrb	r0, [r6, #0]
 800bb3c:	f7ff ffa4 	bl	800ba88 <__hexdig_fun>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d1f8      	bne.n	800bb36 <__gethex+0x84>
 800bb44:	9a01      	ldr	r2, [sp, #4]
 800bb46:	9903      	ldr	r1, [sp, #12]
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f001 fd25 	bl	800d598 <strncmp>
 800bb4e:	b950      	cbnz	r0, 800bb66 <__gethex+0xb4>
 800bb50:	b954      	cbnz	r4, 800bb68 <__gethex+0xb6>
 800bb52:	9b01      	ldr	r3, [sp, #4]
 800bb54:	18f4      	adds	r4, r6, r3
 800bb56:	4622      	mov	r2, r4
 800bb58:	4616      	mov	r6, r2
 800bb5a:	3201      	adds	r2, #1
 800bb5c:	7830      	ldrb	r0, [r6, #0]
 800bb5e:	f7ff ff93 	bl	800ba88 <__hexdig_fun>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d1f8      	bne.n	800bb58 <__gethex+0xa6>
 800bb66:	b10c      	cbz	r4, 800bb6c <__gethex+0xba>
 800bb68:	1ba4      	subs	r4, r4, r6
 800bb6a:	00a4      	lsls	r4, r4, #2
 800bb6c:	7833      	ldrb	r3, [r6, #0]
 800bb6e:	2b50      	cmp	r3, #80	; 0x50
 800bb70:	d001      	beq.n	800bb76 <__gethex+0xc4>
 800bb72:	2b70      	cmp	r3, #112	; 0x70
 800bb74:	d140      	bne.n	800bbf8 <__gethex+0x146>
 800bb76:	7873      	ldrb	r3, [r6, #1]
 800bb78:	2b2b      	cmp	r3, #43	; 0x2b
 800bb7a:	d031      	beq.n	800bbe0 <__gethex+0x12e>
 800bb7c:	2b2d      	cmp	r3, #45	; 0x2d
 800bb7e:	d033      	beq.n	800bbe8 <__gethex+0x136>
 800bb80:	1c71      	adds	r1, r6, #1
 800bb82:	f04f 0900 	mov.w	r9, #0
 800bb86:	7808      	ldrb	r0, [r1, #0]
 800bb88:	f7ff ff7e 	bl	800ba88 <__hexdig_fun>
 800bb8c:	1e43      	subs	r3, r0, #1
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	2b18      	cmp	r3, #24
 800bb92:	d831      	bhi.n	800bbf8 <__gethex+0x146>
 800bb94:	f1a0 0210 	sub.w	r2, r0, #16
 800bb98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb9c:	f7ff ff74 	bl	800ba88 <__hexdig_fun>
 800bba0:	1e43      	subs	r3, r0, #1
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	2b18      	cmp	r3, #24
 800bba6:	d922      	bls.n	800bbee <__gethex+0x13c>
 800bba8:	f1b9 0f00 	cmp.w	r9, #0
 800bbac:	d000      	beq.n	800bbb0 <__gethex+0xfe>
 800bbae:	4252      	negs	r2, r2
 800bbb0:	4414      	add	r4, r2
 800bbb2:	f8ca 1000 	str.w	r1, [sl]
 800bbb6:	b30d      	cbz	r5, 800bbfc <__gethex+0x14a>
 800bbb8:	f1bb 0f00 	cmp.w	fp, #0
 800bbbc:	bf0c      	ite	eq
 800bbbe:	2706      	moveq	r7, #6
 800bbc0:	2700      	movne	r7, #0
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	b00b      	add	sp, #44	; 0x2c
 800bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbca:	f10b 0b01 	add.w	fp, fp, #1
 800bbce:	e78a      	b.n	800bae6 <__gethex+0x34>
 800bbd0:	2500      	movs	r5, #0
 800bbd2:	462c      	mov	r4, r5
 800bbd4:	e7ae      	b.n	800bb34 <__gethex+0x82>
 800bbd6:	463e      	mov	r6, r7
 800bbd8:	2501      	movs	r5, #1
 800bbda:	e7c7      	b.n	800bb6c <__gethex+0xba>
 800bbdc:	4604      	mov	r4, r0
 800bbde:	e7fb      	b.n	800bbd8 <__gethex+0x126>
 800bbe0:	f04f 0900 	mov.w	r9, #0
 800bbe4:	1cb1      	adds	r1, r6, #2
 800bbe6:	e7ce      	b.n	800bb86 <__gethex+0xd4>
 800bbe8:	f04f 0901 	mov.w	r9, #1
 800bbec:	e7fa      	b.n	800bbe4 <__gethex+0x132>
 800bbee:	230a      	movs	r3, #10
 800bbf0:	fb03 0202 	mla	r2, r3, r2, r0
 800bbf4:	3a10      	subs	r2, #16
 800bbf6:	e7cf      	b.n	800bb98 <__gethex+0xe6>
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	e7da      	b.n	800bbb2 <__gethex+0x100>
 800bbfc:	1bf3      	subs	r3, r6, r7
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	4629      	mov	r1, r5
 800bc02:	2b07      	cmp	r3, #7
 800bc04:	dc49      	bgt.n	800bc9a <__gethex+0x1e8>
 800bc06:	9802      	ldr	r0, [sp, #8]
 800bc08:	f000 fae1 	bl	800c1ce <_Balloc>
 800bc0c:	9b01      	ldr	r3, [sp, #4]
 800bc0e:	f100 0914 	add.w	r9, r0, #20
 800bc12:	f04f 0b00 	mov.w	fp, #0
 800bc16:	f1c3 0301 	rsb	r3, r3, #1
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	f8cd 9010 	str.w	r9, [sp, #16]
 800bc20:	46da      	mov	sl, fp
 800bc22:	9308      	str	r3, [sp, #32]
 800bc24:	42b7      	cmp	r7, r6
 800bc26:	d33b      	bcc.n	800bca0 <__gethex+0x1ee>
 800bc28:	9804      	ldr	r0, [sp, #16]
 800bc2a:	f840 ab04 	str.w	sl, [r0], #4
 800bc2e:	eba0 0009 	sub.w	r0, r0, r9
 800bc32:	1080      	asrs	r0, r0, #2
 800bc34:	6128      	str	r0, [r5, #16]
 800bc36:	0147      	lsls	r7, r0, #5
 800bc38:	4650      	mov	r0, sl
 800bc3a:	f000 fb8c 	bl	800c356 <__hi0bits>
 800bc3e:	f8d8 6000 	ldr.w	r6, [r8]
 800bc42:	1a3f      	subs	r7, r7, r0
 800bc44:	42b7      	cmp	r7, r6
 800bc46:	dd64      	ble.n	800bd12 <__gethex+0x260>
 800bc48:	1bbf      	subs	r7, r7, r6
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	f000 fe9b 	bl	800c988 <__any_on>
 800bc52:	4682      	mov	sl, r0
 800bc54:	b178      	cbz	r0, 800bc76 <__gethex+0x1c4>
 800bc56:	1e7b      	subs	r3, r7, #1
 800bc58:	1159      	asrs	r1, r3, #5
 800bc5a:	f003 021f 	and.w	r2, r3, #31
 800bc5e:	f04f 0a01 	mov.w	sl, #1
 800bc62:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bc66:	fa0a f202 	lsl.w	r2, sl, r2
 800bc6a:	420a      	tst	r2, r1
 800bc6c:	d003      	beq.n	800bc76 <__gethex+0x1c4>
 800bc6e:	4553      	cmp	r3, sl
 800bc70:	dc46      	bgt.n	800bd00 <__gethex+0x24e>
 800bc72:	f04f 0a02 	mov.w	sl, #2
 800bc76:	4639      	mov	r1, r7
 800bc78:	4628      	mov	r0, r5
 800bc7a:	f7ff fecb 	bl	800ba14 <rshift>
 800bc7e:	443c      	add	r4, r7
 800bc80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc84:	42a3      	cmp	r3, r4
 800bc86:	da52      	bge.n	800bd2e <__gethex+0x27c>
 800bc88:	4629      	mov	r1, r5
 800bc8a:	9802      	ldr	r0, [sp, #8]
 800bc8c:	f000 fad3 	bl	800c236 <_Bfree>
 800bc90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc92:	2300      	movs	r3, #0
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	27a3      	movs	r7, #163	; 0xa3
 800bc98:	e793      	b.n	800bbc2 <__gethex+0x110>
 800bc9a:	3101      	adds	r1, #1
 800bc9c:	105b      	asrs	r3, r3, #1
 800bc9e:	e7b0      	b.n	800bc02 <__gethex+0x150>
 800bca0:	1e73      	subs	r3, r6, #1
 800bca2:	9305      	str	r3, [sp, #20]
 800bca4:	9a07      	ldr	r2, [sp, #28]
 800bca6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d018      	beq.n	800bce0 <__gethex+0x22e>
 800bcae:	f1bb 0f20 	cmp.w	fp, #32
 800bcb2:	d107      	bne.n	800bcc4 <__gethex+0x212>
 800bcb4:	9b04      	ldr	r3, [sp, #16]
 800bcb6:	f8c3 a000 	str.w	sl, [r3]
 800bcba:	3304      	adds	r3, #4
 800bcbc:	f04f 0a00 	mov.w	sl, #0
 800bcc0:	9304      	str	r3, [sp, #16]
 800bcc2:	46d3      	mov	fp, sl
 800bcc4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bcc8:	f7ff fede 	bl	800ba88 <__hexdig_fun>
 800bccc:	f000 000f 	and.w	r0, r0, #15
 800bcd0:	fa00 f00b 	lsl.w	r0, r0, fp
 800bcd4:	ea4a 0a00 	orr.w	sl, sl, r0
 800bcd8:	f10b 0b04 	add.w	fp, fp, #4
 800bcdc:	9b05      	ldr	r3, [sp, #20]
 800bcde:	e00d      	b.n	800bcfc <__gethex+0x24a>
 800bce0:	9b05      	ldr	r3, [sp, #20]
 800bce2:	9a08      	ldr	r2, [sp, #32]
 800bce4:	4413      	add	r3, r2
 800bce6:	42bb      	cmp	r3, r7
 800bce8:	d3e1      	bcc.n	800bcae <__gethex+0x1fc>
 800bcea:	4618      	mov	r0, r3
 800bcec:	9a01      	ldr	r2, [sp, #4]
 800bcee:	9903      	ldr	r1, [sp, #12]
 800bcf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf2:	f001 fc51 	bl	800d598 <strncmp>
 800bcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d1d8      	bne.n	800bcae <__gethex+0x1fc>
 800bcfc:	461e      	mov	r6, r3
 800bcfe:	e791      	b.n	800bc24 <__gethex+0x172>
 800bd00:	1eb9      	subs	r1, r7, #2
 800bd02:	4628      	mov	r0, r5
 800bd04:	f000 fe40 	bl	800c988 <__any_on>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d0b2      	beq.n	800bc72 <__gethex+0x1c0>
 800bd0c:	f04f 0a03 	mov.w	sl, #3
 800bd10:	e7b1      	b.n	800bc76 <__gethex+0x1c4>
 800bd12:	da09      	bge.n	800bd28 <__gethex+0x276>
 800bd14:	1bf7      	subs	r7, r6, r7
 800bd16:	4629      	mov	r1, r5
 800bd18:	463a      	mov	r2, r7
 800bd1a:	9802      	ldr	r0, [sp, #8]
 800bd1c:	f000 fc56 	bl	800c5cc <__lshift>
 800bd20:	1be4      	subs	r4, r4, r7
 800bd22:	4605      	mov	r5, r0
 800bd24:	f100 0914 	add.w	r9, r0, #20
 800bd28:	f04f 0a00 	mov.w	sl, #0
 800bd2c:	e7a8      	b.n	800bc80 <__gethex+0x1ce>
 800bd2e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bd32:	42a0      	cmp	r0, r4
 800bd34:	dd6a      	ble.n	800be0c <__gethex+0x35a>
 800bd36:	1b04      	subs	r4, r0, r4
 800bd38:	42a6      	cmp	r6, r4
 800bd3a:	dc2e      	bgt.n	800bd9a <__gethex+0x2e8>
 800bd3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d022      	beq.n	800bd8a <__gethex+0x2d8>
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	d024      	beq.n	800bd92 <__gethex+0x2e0>
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d115      	bne.n	800bd78 <__gethex+0x2c6>
 800bd4c:	42a6      	cmp	r6, r4
 800bd4e:	d113      	bne.n	800bd78 <__gethex+0x2c6>
 800bd50:	2e01      	cmp	r6, #1
 800bd52:	dc0b      	bgt.n	800bd6c <__gethex+0x2ba>
 800bd54:	9a06      	ldr	r2, [sp, #24]
 800bd56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	612b      	str	r3, [r5, #16]
 800bd60:	f8c9 3000 	str.w	r3, [r9]
 800bd64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd66:	2762      	movs	r7, #98	; 0x62
 800bd68:	601d      	str	r5, [r3, #0]
 800bd6a:	e72a      	b.n	800bbc2 <__gethex+0x110>
 800bd6c:	1e71      	subs	r1, r6, #1
 800bd6e:	4628      	mov	r0, r5
 800bd70:	f000 fe0a 	bl	800c988 <__any_on>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d1ed      	bne.n	800bd54 <__gethex+0x2a2>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	9802      	ldr	r0, [sp, #8]
 800bd7c:	f000 fa5b 	bl	800c236 <_Bfree>
 800bd80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd82:	2300      	movs	r3, #0
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	2750      	movs	r7, #80	; 0x50
 800bd88:	e71b      	b.n	800bbc2 <__gethex+0x110>
 800bd8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d0e1      	beq.n	800bd54 <__gethex+0x2a2>
 800bd90:	e7f2      	b.n	800bd78 <__gethex+0x2c6>
 800bd92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1dd      	bne.n	800bd54 <__gethex+0x2a2>
 800bd98:	e7ee      	b.n	800bd78 <__gethex+0x2c6>
 800bd9a:	1e67      	subs	r7, r4, #1
 800bd9c:	f1ba 0f00 	cmp.w	sl, #0
 800bda0:	d131      	bne.n	800be06 <__gethex+0x354>
 800bda2:	b127      	cbz	r7, 800bdae <__gethex+0x2fc>
 800bda4:	4639      	mov	r1, r7
 800bda6:	4628      	mov	r0, r5
 800bda8:	f000 fdee 	bl	800c988 <__any_on>
 800bdac:	4682      	mov	sl, r0
 800bdae:	117a      	asrs	r2, r7, #5
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	f007 071f 	and.w	r7, r7, #31
 800bdb6:	fa03 f707 	lsl.w	r7, r3, r7
 800bdba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	421f      	tst	r7, r3
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	bf18      	it	ne
 800bdc6:	f04a 0a02 	orrne.w	sl, sl, #2
 800bdca:	1b36      	subs	r6, r6, r4
 800bdcc:	f7ff fe22 	bl	800ba14 <rshift>
 800bdd0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800bdd4:	2702      	movs	r7, #2
 800bdd6:	f1ba 0f00 	cmp.w	sl, #0
 800bdda:	d048      	beq.n	800be6e <__gethex+0x3bc>
 800bddc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d015      	beq.n	800be10 <__gethex+0x35e>
 800bde4:	2b03      	cmp	r3, #3
 800bde6:	d017      	beq.n	800be18 <__gethex+0x366>
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d109      	bne.n	800be00 <__gethex+0x34e>
 800bdec:	f01a 0f02 	tst.w	sl, #2
 800bdf0:	d006      	beq.n	800be00 <__gethex+0x34e>
 800bdf2:	f8d9 3000 	ldr.w	r3, [r9]
 800bdf6:	ea4a 0a03 	orr.w	sl, sl, r3
 800bdfa:	f01a 0f01 	tst.w	sl, #1
 800bdfe:	d10e      	bne.n	800be1e <__gethex+0x36c>
 800be00:	f047 0710 	orr.w	r7, r7, #16
 800be04:	e033      	b.n	800be6e <__gethex+0x3bc>
 800be06:	f04f 0a01 	mov.w	sl, #1
 800be0a:	e7d0      	b.n	800bdae <__gethex+0x2fc>
 800be0c:	2701      	movs	r7, #1
 800be0e:	e7e2      	b.n	800bdd6 <__gethex+0x324>
 800be10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be12:	f1c3 0301 	rsb	r3, r3, #1
 800be16:	9315      	str	r3, [sp, #84]	; 0x54
 800be18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d0f0      	beq.n	800be00 <__gethex+0x34e>
 800be1e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800be22:	f105 0314 	add.w	r3, r5, #20
 800be26:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800be2a:	eb03 010a 	add.w	r1, r3, sl
 800be2e:	f04f 0c00 	mov.w	ip, #0
 800be32:	4618      	mov	r0, r3
 800be34:	f853 2b04 	ldr.w	r2, [r3], #4
 800be38:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be3c:	d01c      	beq.n	800be78 <__gethex+0x3c6>
 800be3e:	3201      	adds	r2, #1
 800be40:	6002      	str	r2, [r0, #0]
 800be42:	2f02      	cmp	r7, #2
 800be44:	f105 0314 	add.w	r3, r5, #20
 800be48:	d138      	bne.n	800bebc <__gethex+0x40a>
 800be4a:	f8d8 2000 	ldr.w	r2, [r8]
 800be4e:	3a01      	subs	r2, #1
 800be50:	42b2      	cmp	r2, r6
 800be52:	d10a      	bne.n	800be6a <__gethex+0x3b8>
 800be54:	1171      	asrs	r1, r6, #5
 800be56:	2201      	movs	r2, #1
 800be58:	f006 061f 	and.w	r6, r6, #31
 800be5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be60:	fa02 f606 	lsl.w	r6, r2, r6
 800be64:	421e      	tst	r6, r3
 800be66:	bf18      	it	ne
 800be68:	4617      	movne	r7, r2
 800be6a:	f047 0720 	orr.w	r7, r7, #32
 800be6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be70:	601d      	str	r5, [r3, #0]
 800be72:	9b06      	ldr	r3, [sp, #24]
 800be74:	601c      	str	r4, [r3, #0]
 800be76:	e6a4      	b.n	800bbc2 <__gethex+0x110>
 800be78:	4299      	cmp	r1, r3
 800be7a:	f843 cc04 	str.w	ip, [r3, #-4]
 800be7e:	d8d8      	bhi.n	800be32 <__gethex+0x380>
 800be80:	68ab      	ldr	r3, [r5, #8]
 800be82:	4599      	cmp	r9, r3
 800be84:	db12      	blt.n	800beac <__gethex+0x3fa>
 800be86:	6869      	ldr	r1, [r5, #4]
 800be88:	9802      	ldr	r0, [sp, #8]
 800be8a:	3101      	adds	r1, #1
 800be8c:	f000 f99f 	bl	800c1ce <_Balloc>
 800be90:	692a      	ldr	r2, [r5, #16]
 800be92:	3202      	adds	r2, #2
 800be94:	f105 010c 	add.w	r1, r5, #12
 800be98:	4683      	mov	fp, r0
 800be9a:	0092      	lsls	r2, r2, #2
 800be9c:	300c      	adds	r0, #12
 800be9e:	f000 f989 	bl	800c1b4 <memcpy>
 800bea2:	4629      	mov	r1, r5
 800bea4:	9802      	ldr	r0, [sp, #8]
 800bea6:	f000 f9c6 	bl	800c236 <_Bfree>
 800beaa:	465d      	mov	r5, fp
 800beac:	692b      	ldr	r3, [r5, #16]
 800beae:	1c5a      	adds	r2, r3, #1
 800beb0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800beb4:	612a      	str	r2, [r5, #16]
 800beb6:	2201      	movs	r2, #1
 800beb8:	615a      	str	r2, [r3, #20]
 800beba:	e7c2      	b.n	800be42 <__gethex+0x390>
 800bebc:	692a      	ldr	r2, [r5, #16]
 800bebe:	454a      	cmp	r2, r9
 800bec0:	dd0b      	ble.n	800beda <__gethex+0x428>
 800bec2:	2101      	movs	r1, #1
 800bec4:	4628      	mov	r0, r5
 800bec6:	f7ff fda5 	bl	800ba14 <rshift>
 800beca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bece:	3401      	adds	r4, #1
 800bed0:	42a3      	cmp	r3, r4
 800bed2:	f6ff aed9 	blt.w	800bc88 <__gethex+0x1d6>
 800bed6:	2701      	movs	r7, #1
 800bed8:	e7c7      	b.n	800be6a <__gethex+0x3b8>
 800beda:	f016 061f 	ands.w	r6, r6, #31
 800bede:	d0fa      	beq.n	800bed6 <__gethex+0x424>
 800bee0:	449a      	add	sl, r3
 800bee2:	f1c6 0620 	rsb	r6, r6, #32
 800bee6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800beea:	f000 fa34 	bl	800c356 <__hi0bits>
 800beee:	42b0      	cmp	r0, r6
 800bef0:	dbe7      	blt.n	800bec2 <__gethex+0x410>
 800bef2:	e7f0      	b.n	800bed6 <__gethex+0x424>

0800bef4 <L_shift>:
 800bef4:	f1c2 0208 	rsb	r2, r2, #8
 800bef8:	0092      	lsls	r2, r2, #2
 800befa:	b570      	push	{r4, r5, r6, lr}
 800befc:	f1c2 0620 	rsb	r6, r2, #32
 800bf00:	6843      	ldr	r3, [r0, #4]
 800bf02:	6804      	ldr	r4, [r0, #0]
 800bf04:	fa03 f506 	lsl.w	r5, r3, r6
 800bf08:	432c      	orrs	r4, r5
 800bf0a:	40d3      	lsrs	r3, r2
 800bf0c:	6004      	str	r4, [r0, #0]
 800bf0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf12:	4288      	cmp	r0, r1
 800bf14:	d3f4      	bcc.n	800bf00 <L_shift+0xc>
 800bf16:	bd70      	pop	{r4, r5, r6, pc}

0800bf18 <__match>:
 800bf18:	b530      	push	{r4, r5, lr}
 800bf1a:	6803      	ldr	r3, [r0, #0]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf22:	b914      	cbnz	r4, 800bf2a <__match+0x12>
 800bf24:	6003      	str	r3, [r0, #0]
 800bf26:	2001      	movs	r0, #1
 800bf28:	bd30      	pop	{r4, r5, pc}
 800bf2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf32:	2d19      	cmp	r5, #25
 800bf34:	bf98      	it	ls
 800bf36:	3220      	addls	r2, #32
 800bf38:	42a2      	cmp	r2, r4
 800bf3a:	d0f0      	beq.n	800bf1e <__match+0x6>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	e7f3      	b.n	800bf28 <__match+0x10>

0800bf40 <__hexnan>:
 800bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	680b      	ldr	r3, [r1, #0]
 800bf46:	6801      	ldr	r1, [r0, #0]
 800bf48:	115f      	asrs	r7, r3, #5
 800bf4a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800bf4e:	f013 031f 	ands.w	r3, r3, #31
 800bf52:	b087      	sub	sp, #28
 800bf54:	bf18      	it	ne
 800bf56:	3704      	addne	r7, #4
 800bf58:	2500      	movs	r5, #0
 800bf5a:	1f3e      	subs	r6, r7, #4
 800bf5c:	4682      	mov	sl, r0
 800bf5e:	4690      	mov	r8, r2
 800bf60:	9301      	str	r3, [sp, #4]
 800bf62:	f847 5c04 	str.w	r5, [r7, #-4]
 800bf66:	46b1      	mov	r9, r6
 800bf68:	4634      	mov	r4, r6
 800bf6a:	9502      	str	r5, [sp, #8]
 800bf6c:	46ab      	mov	fp, r5
 800bf6e:	784a      	ldrb	r2, [r1, #1]
 800bf70:	1c4b      	adds	r3, r1, #1
 800bf72:	9303      	str	r3, [sp, #12]
 800bf74:	b342      	cbz	r2, 800bfc8 <__hexnan+0x88>
 800bf76:	4610      	mov	r0, r2
 800bf78:	9105      	str	r1, [sp, #20]
 800bf7a:	9204      	str	r2, [sp, #16]
 800bf7c:	f7ff fd84 	bl	800ba88 <__hexdig_fun>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d143      	bne.n	800c00c <__hexnan+0xcc>
 800bf84:	9a04      	ldr	r2, [sp, #16]
 800bf86:	9905      	ldr	r1, [sp, #20]
 800bf88:	2a20      	cmp	r2, #32
 800bf8a:	d818      	bhi.n	800bfbe <__hexnan+0x7e>
 800bf8c:	9b02      	ldr	r3, [sp, #8]
 800bf8e:	459b      	cmp	fp, r3
 800bf90:	dd13      	ble.n	800bfba <__hexnan+0x7a>
 800bf92:	454c      	cmp	r4, r9
 800bf94:	d206      	bcs.n	800bfa4 <__hexnan+0x64>
 800bf96:	2d07      	cmp	r5, #7
 800bf98:	dc04      	bgt.n	800bfa4 <__hexnan+0x64>
 800bf9a:	462a      	mov	r2, r5
 800bf9c:	4649      	mov	r1, r9
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f7ff ffa8 	bl	800bef4 <L_shift>
 800bfa4:	4544      	cmp	r4, r8
 800bfa6:	d944      	bls.n	800c032 <__hexnan+0xf2>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	f1a4 0904 	sub.w	r9, r4, #4
 800bfae:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfb2:	f8cd b008 	str.w	fp, [sp, #8]
 800bfb6:	464c      	mov	r4, r9
 800bfb8:	461d      	mov	r5, r3
 800bfba:	9903      	ldr	r1, [sp, #12]
 800bfbc:	e7d7      	b.n	800bf6e <__hexnan+0x2e>
 800bfbe:	2a29      	cmp	r2, #41	; 0x29
 800bfc0:	d14a      	bne.n	800c058 <__hexnan+0x118>
 800bfc2:	3102      	adds	r1, #2
 800bfc4:	f8ca 1000 	str.w	r1, [sl]
 800bfc8:	f1bb 0f00 	cmp.w	fp, #0
 800bfcc:	d044      	beq.n	800c058 <__hexnan+0x118>
 800bfce:	454c      	cmp	r4, r9
 800bfd0:	d206      	bcs.n	800bfe0 <__hexnan+0xa0>
 800bfd2:	2d07      	cmp	r5, #7
 800bfd4:	dc04      	bgt.n	800bfe0 <__hexnan+0xa0>
 800bfd6:	462a      	mov	r2, r5
 800bfd8:	4649      	mov	r1, r9
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f7ff ff8a 	bl	800bef4 <L_shift>
 800bfe0:	4544      	cmp	r4, r8
 800bfe2:	d928      	bls.n	800c036 <__hexnan+0xf6>
 800bfe4:	4643      	mov	r3, r8
 800bfe6:	f854 2b04 	ldr.w	r2, [r4], #4
 800bfea:	f843 2b04 	str.w	r2, [r3], #4
 800bfee:	42a6      	cmp	r6, r4
 800bff0:	d2f9      	bcs.n	800bfe6 <__hexnan+0xa6>
 800bff2:	2200      	movs	r2, #0
 800bff4:	f843 2b04 	str.w	r2, [r3], #4
 800bff8:	429e      	cmp	r6, r3
 800bffa:	d2fb      	bcs.n	800bff4 <__hexnan+0xb4>
 800bffc:	6833      	ldr	r3, [r6, #0]
 800bffe:	b91b      	cbnz	r3, 800c008 <__hexnan+0xc8>
 800c000:	4546      	cmp	r6, r8
 800c002:	d127      	bne.n	800c054 <__hexnan+0x114>
 800c004:	2301      	movs	r3, #1
 800c006:	6033      	str	r3, [r6, #0]
 800c008:	2005      	movs	r0, #5
 800c00a:	e026      	b.n	800c05a <__hexnan+0x11a>
 800c00c:	3501      	adds	r5, #1
 800c00e:	2d08      	cmp	r5, #8
 800c010:	f10b 0b01 	add.w	fp, fp, #1
 800c014:	dd06      	ble.n	800c024 <__hexnan+0xe4>
 800c016:	4544      	cmp	r4, r8
 800c018:	d9cf      	bls.n	800bfba <__hexnan+0x7a>
 800c01a:	2300      	movs	r3, #0
 800c01c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c020:	2501      	movs	r5, #1
 800c022:	3c04      	subs	r4, #4
 800c024:	6822      	ldr	r2, [r4, #0]
 800c026:	f000 000f 	and.w	r0, r0, #15
 800c02a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c02e:	6020      	str	r0, [r4, #0]
 800c030:	e7c3      	b.n	800bfba <__hexnan+0x7a>
 800c032:	2508      	movs	r5, #8
 800c034:	e7c1      	b.n	800bfba <__hexnan+0x7a>
 800c036:	9b01      	ldr	r3, [sp, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d0df      	beq.n	800bffc <__hexnan+0xbc>
 800c03c:	f04f 32ff 	mov.w	r2, #4294967295
 800c040:	f1c3 0320 	rsb	r3, r3, #32
 800c044:	fa22 f303 	lsr.w	r3, r2, r3
 800c048:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c04c:	401a      	ands	r2, r3
 800c04e:	f847 2c04 	str.w	r2, [r7, #-4]
 800c052:	e7d3      	b.n	800bffc <__hexnan+0xbc>
 800c054:	3e04      	subs	r6, #4
 800c056:	e7d1      	b.n	800bffc <__hexnan+0xbc>
 800c058:	2004      	movs	r0, #4
 800c05a:	b007      	add	sp, #28
 800c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c060 <__locale_ctype_ptr_l>:
 800c060:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c064:	4770      	bx	lr
	...

0800c068 <__locale_ctype_ptr>:
 800c068:	4b04      	ldr	r3, [pc, #16]	; (800c07c <__locale_ctype_ptr+0x14>)
 800c06a:	4a05      	ldr	r2, [pc, #20]	; (800c080 <__locale_ctype_ptr+0x18>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6a1b      	ldr	r3, [r3, #32]
 800c070:	2b00      	cmp	r3, #0
 800c072:	bf08      	it	eq
 800c074:	4613      	moveq	r3, r2
 800c076:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c07a:	4770      	bx	lr
 800c07c:	20000188 	.word	0x20000188
 800c080:	200001ec 	.word	0x200001ec

0800c084 <__localeconv_l>:
 800c084:	30f0      	adds	r0, #240	; 0xf0
 800c086:	4770      	bx	lr

0800c088 <_localeconv_r>:
 800c088:	4b04      	ldr	r3, [pc, #16]	; (800c09c <_localeconv_r+0x14>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6a18      	ldr	r0, [r3, #32]
 800c08e:	4b04      	ldr	r3, [pc, #16]	; (800c0a0 <_localeconv_r+0x18>)
 800c090:	2800      	cmp	r0, #0
 800c092:	bf08      	it	eq
 800c094:	4618      	moveq	r0, r3
 800c096:	30f0      	adds	r0, #240	; 0xf0
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	20000188 	.word	0x20000188
 800c0a0:	200001ec 	.word	0x200001ec

0800c0a4 <_lseek_r>:
 800c0a4:	b538      	push	{r3, r4, r5, lr}
 800c0a6:	4c07      	ldr	r4, [pc, #28]	; (800c0c4 <_lseek_r+0x20>)
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	4608      	mov	r0, r1
 800c0ac:	4611      	mov	r1, r2
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	6022      	str	r2, [r4, #0]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	f7f5 fdd8 	bl	8001c68 <_lseek>
 800c0b8:	1c43      	adds	r3, r0, #1
 800c0ba:	d102      	bne.n	800c0c2 <_lseek_r+0x1e>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	b103      	cbz	r3, 800c0c2 <_lseek_r+0x1e>
 800c0c0:	602b      	str	r3, [r5, #0]
 800c0c2:	bd38      	pop	{r3, r4, r5, pc}
 800c0c4:	20000f98 	.word	0x20000f98

0800c0c8 <__swhatbuf_r>:
 800c0c8:	b570      	push	{r4, r5, r6, lr}
 800c0ca:	460e      	mov	r6, r1
 800c0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d0:	2900      	cmp	r1, #0
 800c0d2:	b096      	sub	sp, #88	; 0x58
 800c0d4:	4614      	mov	r4, r2
 800c0d6:	461d      	mov	r5, r3
 800c0d8:	da07      	bge.n	800c0ea <__swhatbuf_r+0x22>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	89b3      	ldrh	r3, [r6, #12]
 800c0e0:	061a      	lsls	r2, r3, #24
 800c0e2:	d410      	bmi.n	800c106 <__swhatbuf_r+0x3e>
 800c0e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0e8:	e00e      	b.n	800c108 <__swhatbuf_r+0x40>
 800c0ea:	466a      	mov	r2, sp
 800c0ec:	f001 fb3a 	bl	800d764 <_fstat_r>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	dbf2      	blt.n	800c0da <__swhatbuf_r+0x12>
 800c0f4:	9a01      	ldr	r2, [sp, #4]
 800c0f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0fe:	425a      	negs	r2, r3
 800c100:	415a      	adcs	r2, r3
 800c102:	602a      	str	r2, [r5, #0]
 800c104:	e7ee      	b.n	800c0e4 <__swhatbuf_r+0x1c>
 800c106:	2340      	movs	r3, #64	; 0x40
 800c108:	2000      	movs	r0, #0
 800c10a:	6023      	str	r3, [r4, #0]
 800c10c:	b016      	add	sp, #88	; 0x58
 800c10e:	bd70      	pop	{r4, r5, r6, pc}

0800c110 <__smakebuf_r>:
 800c110:	898b      	ldrh	r3, [r1, #12]
 800c112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c114:	079d      	lsls	r5, r3, #30
 800c116:	4606      	mov	r6, r0
 800c118:	460c      	mov	r4, r1
 800c11a:	d507      	bpl.n	800c12c <__smakebuf_r+0x1c>
 800c11c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	6123      	str	r3, [r4, #16]
 800c124:	2301      	movs	r3, #1
 800c126:	6163      	str	r3, [r4, #20]
 800c128:	b002      	add	sp, #8
 800c12a:	bd70      	pop	{r4, r5, r6, pc}
 800c12c:	ab01      	add	r3, sp, #4
 800c12e:	466a      	mov	r2, sp
 800c130:	f7ff ffca 	bl	800c0c8 <__swhatbuf_r>
 800c134:	9900      	ldr	r1, [sp, #0]
 800c136:	4605      	mov	r5, r0
 800c138:	4630      	mov	r0, r6
 800c13a:	f7fc fd4d 	bl	8008bd8 <_malloc_r>
 800c13e:	b948      	cbnz	r0, 800c154 <__smakebuf_r+0x44>
 800c140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c144:	059a      	lsls	r2, r3, #22
 800c146:	d4ef      	bmi.n	800c128 <__smakebuf_r+0x18>
 800c148:	f023 0303 	bic.w	r3, r3, #3
 800c14c:	f043 0302 	orr.w	r3, r3, #2
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	e7e3      	b.n	800c11c <__smakebuf_r+0xc>
 800c154:	4b0d      	ldr	r3, [pc, #52]	; (800c18c <__smakebuf_r+0x7c>)
 800c156:	62b3      	str	r3, [r6, #40]	; 0x28
 800c158:	89a3      	ldrh	r3, [r4, #12]
 800c15a:	6020      	str	r0, [r4, #0]
 800c15c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c160:	81a3      	strh	r3, [r4, #12]
 800c162:	9b00      	ldr	r3, [sp, #0]
 800c164:	6163      	str	r3, [r4, #20]
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	6120      	str	r0, [r4, #16]
 800c16a:	b15b      	cbz	r3, 800c184 <__smakebuf_r+0x74>
 800c16c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c170:	4630      	mov	r0, r6
 800c172:	f001 fb09 	bl	800d788 <_isatty_r>
 800c176:	b128      	cbz	r0, 800c184 <__smakebuf_r+0x74>
 800c178:	89a3      	ldrh	r3, [r4, #12]
 800c17a:	f023 0303 	bic.w	r3, r3, #3
 800c17e:	f043 0301 	orr.w	r3, r3, #1
 800c182:	81a3      	strh	r3, [r4, #12]
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	431d      	orrs	r5, r3
 800c188:	81a5      	strh	r5, [r4, #12]
 800c18a:	e7cd      	b.n	800c128 <__smakebuf_r+0x18>
 800c18c:	0800b8c9 	.word	0x0800b8c9

0800c190 <__ascii_mbtowc>:
 800c190:	b082      	sub	sp, #8
 800c192:	b901      	cbnz	r1, 800c196 <__ascii_mbtowc+0x6>
 800c194:	a901      	add	r1, sp, #4
 800c196:	b142      	cbz	r2, 800c1aa <__ascii_mbtowc+0x1a>
 800c198:	b14b      	cbz	r3, 800c1ae <__ascii_mbtowc+0x1e>
 800c19a:	7813      	ldrb	r3, [r2, #0]
 800c19c:	600b      	str	r3, [r1, #0]
 800c19e:	7812      	ldrb	r2, [r2, #0]
 800c1a0:	1c10      	adds	r0, r2, #0
 800c1a2:	bf18      	it	ne
 800c1a4:	2001      	movne	r0, #1
 800c1a6:	b002      	add	sp, #8
 800c1a8:	4770      	bx	lr
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	e7fb      	b.n	800c1a6 <__ascii_mbtowc+0x16>
 800c1ae:	f06f 0001 	mvn.w	r0, #1
 800c1b2:	e7f8      	b.n	800c1a6 <__ascii_mbtowc+0x16>

0800c1b4 <memcpy>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	1e43      	subs	r3, r0, #1
 800c1b8:	440a      	add	r2, r1
 800c1ba:	4291      	cmp	r1, r2
 800c1bc:	d100      	bne.n	800c1c0 <memcpy+0xc>
 800c1be:	bd10      	pop	{r4, pc}
 800c1c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1c8:	e7f7      	b.n	800c1ba <memcpy+0x6>

0800c1ca <__malloc_lock>:
 800c1ca:	4770      	bx	lr

0800c1cc <__malloc_unlock>:
 800c1cc:	4770      	bx	lr

0800c1ce <_Balloc>:
 800c1ce:	b570      	push	{r4, r5, r6, lr}
 800c1d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	460e      	mov	r6, r1
 800c1d6:	b93d      	cbnz	r5, 800c1e8 <_Balloc+0x1a>
 800c1d8:	2010      	movs	r0, #16
 800c1da:	f7fc fc97 	bl	8008b0c <malloc>
 800c1de:	6260      	str	r0, [r4, #36]	; 0x24
 800c1e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c1e4:	6005      	str	r5, [r0, #0]
 800c1e6:	60c5      	str	r5, [r0, #12]
 800c1e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c1ea:	68eb      	ldr	r3, [r5, #12]
 800c1ec:	b183      	cbz	r3, 800c210 <_Balloc+0x42>
 800c1ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c1f6:	b9b8      	cbnz	r0, 800c228 <_Balloc+0x5a>
 800c1f8:	2101      	movs	r1, #1
 800c1fa:	fa01 f506 	lsl.w	r5, r1, r6
 800c1fe:	1d6a      	adds	r2, r5, #5
 800c200:	0092      	lsls	r2, r2, #2
 800c202:	4620      	mov	r0, r4
 800c204:	f000 fbe1 	bl	800c9ca <_calloc_r>
 800c208:	b160      	cbz	r0, 800c224 <_Balloc+0x56>
 800c20a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c20e:	e00e      	b.n	800c22e <_Balloc+0x60>
 800c210:	2221      	movs	r2, #33	; 0x21
 800c212:	2104      	movs	r1, #4
 800c214:	4620      	mov	r0, r4
 800c216:	f000 fbd8 	bl	800c9ca <_calloc_r>
 800c21a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c21c:	60e8      	str	r0, [r5, #12]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1e4      	bne.n	800c1ee <_Balloc+0x20>
 800c224:	2000      	movs	r0, #0
 800c226:	bd70      	pop	{r4, r5, r6, pc}
 800c228:	6802      	ldr	r2, [r0, #0]
 800c22a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c22e:	2300      	movs	r3, #0
 800c230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c234:	e7f7      	b.n	800c226 <_Balloc+0x58>

0800c236 <_Bfree>:
 800c236:	b570      	push	{r4, r5, r6, lr}
 800c238:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c23a:	4606      	mov	r6, r0
 800c23c:	460d      	mov	r5, r1
 800c23e:	b93c      	cbnz	r4, 800c250 <_Bfree+0x1a>
 800c240:	2010      	movs	r0, #16
 800c242:	f7fc fc63 	bl	8008b0c <malloc>
 800c246:	6270      	str	r0, [r6, #36]	; 0x24
 800c248:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c24c:	6004      	str	r4, [r0, #0]
 800c24e:	60c4      	str	r4, [r0, #12]
 800c250:	b13d      	cbz	r5, 800c262 <_Bfree+0x2c>
 800c252:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c254:	686a      	ldr	r2, [r5, #4]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c25c:	6029      	str	r1, [r5, #0]
 800c25e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c262:	bd70      	pop	{r4, r5, r6, pc}

0800c264 <__multadd>:
 800c264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c268:	690d      	ldr	r5, [r1, #16]
 800c26a:	461f      	mov	r7, r3
 800c26c:	4606      	mov	r6, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	f101 0c14 	add.w	ip, r1, #20
 800c274:	2300      	movs	r3, #0
 800c276:	f8dc 0000 	ldr.w	r0, [ip]
 800c27a:	b281      	uxth	r1, r0
 800c27c:	fb02 7101 	mla	r1, r2, r1, r7
 800c280:	0c0f      	lsrs	r7, r1, #16
 800c282:	0c00      	lsrs	r0, r0, #16
 800c284:	fb02 7000 	mla	r0, r2, r0, r7
 800c288:	b289      	uxth	r1, r1
 800c28a:	3301      	adds	r3, #1
 800c28c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c290:	429d      	cmp	r5, r3
 800c292:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c296:	f84c 1b04 	str.w	r1, [ip], #4
 800c29a:	dcec      	bgt.n	800c276 <__multadd+0x12>
 800c29c:	b1d7      	cbz	r7, 800c2d4 <__multadd+0x70>
 800c29e:	68a3      	ldr	r3, [r4, #8]
 800c2a0:	42ab      	cmp	r3, r5
 800c2a2:	dc12      	bgt.n	800c2ca <__multadd+0x66>
 800c2a4:	6861      	ldr	r1, [r4, #4]
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	3101      	adds	r1, #1
 800c2aa:	f7ff ff90 	bl	800c1ce <_Balloc>
 800c2ae:	6922      	ldr	r2, [r4, #16]
 800c2b0:	3202      	adds	r2, #2
 800c2b2:	f104 010c 	add.w	r1, r4, #12
 800c2b6:	4680      	mov	r8, r0
 800c2b8:	0092      	lsls	r2, r2, #2
 800c2ba:	300c      	adds	r0, #12
 800c2bc:	f7ff ff7a 	bl	800c1b4 <memcpy>
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	f7ff ffb7 	bl	800c236 <_Bfree>
 800c2c8:	4644      	mov	r4, r8
 800c2ca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2ce:	3501      	adds	r5, #1
 800c2d0:	615f      	str	r7, [r3, #20]
 800c2d2:	6125      	str	r5, [r4, #16]
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c2da <__s2b>:
 800c2da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2de:	460c      	mov	r4, r1
 800c2e0:	4615      	mov	r5, r2
 800c2e2:	461f      	mov	r7, r3
 800c2e4:	2209      	movs	r2, #9
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	db20      	blt.n	800c338 <__s2b+0x5e>
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	f7ff ff69 	bl	800c1ce <_Balloc>
 800c2fc:	9b08      	ldr	r3, [sp, #32]
 800c2fe:	6143      	str	r3, [r0, #20]
 800c300:	2d09      	cmp	r5, #9
 800c302:	f04f 0301 	mov.w	r3, #1
 800c306:	6103      	str	r3, [r0, #16]
 800c308:	dd19      	ble.n	800c33e <__s2b+0x64>
 800c30a:	f104 0809 	add.w	r8, r4, #9
 800c30e:	46c1      	mov	r9, r8
 800c310:	442c      	add	r4, r5
 800c312:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c316:	4601      	mov	r1, r0
 800c318:	3b30      	subs	r3, #48	; 0x30
 800c31a:	220a      	movs	r2, #10
 800c31c:	4630      	mov	r0, r6
 800c31e:	f7ff ffa1 	bl	800c264 <__multadd>
 800c322:	45a1      	cmp	r9, r4
 800c324:	d1f5      	bne.n	800c312 <__s2b+0x38>
 800c326:	eb08 0405 	add.w	r4, r8, r5
 800c32a:	3c08      	subs	r4, #8
 800c32c:	1b2d      	subs	r5, r5, r4
 800c32e:	1963      	adds	r3, r4, r5
 800c330:	42bb      	cmp	r3, r7
 800c332:	db07      	blt.n	800c344 <__s2b+0x6a>
 800c334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c338:	0052      	lsls	r2, r2, #1
 800c33a:	3101      	adds	r1, #1
 800c33c:	e7d9      	b.n	800c2f2 <__s2b+0x18>
 800c33e:	340a      	adds	r4, #10
 800c340:	2509      	movs	r5, #9
 800c342:	e7f3      	b.n	800c32c <__s2b+0x52>
 800c344:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c348:	4601      	mov	r1, r0
 800c34a:	3b30      	subs	r3, #48	; 0x30
 800c34c:	220a      	movs	r2, #10
 800c34e:	4630      	mov	r0, r6
 800c350:	f7ff ff88 	bl	800c264 <__multadd>
 800c354:	e7eb      	b.n	800c32e <__s2b+0x54>

0800c356 <__hi0bits>:
 800c356:	0c02      	lsrs	r2, r0, #16
 800c358:	0412      	lsls	r2, r2, #16
 800c35a:	4603      	mov	r3, r0
 800c35c:	b9b2      	cbnz	r2, 800c38c <__hi0bits+0x36>
 800c35e:	0403      	lsls	r3, r0, #16
 800c360:	2010      	movs	r0, #16
 800c362:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c366:	bf04      	itt	eq
 800c368:	021b      	lsleq	r3, r3, #8
 800c36a:	3008      	addeq	r0, #8
 800c36c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c370:	bf04      	itt	eq
 800c372:	011b      	lsleq	r3, r3, #4
 800c374:	3004      	addeq	r0, #4
 800c376:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c37a:	bf04      	itt	eq
 800c37c:	009b      	lsleq	r3, r3, #2
 800c37e:	3002      	addeq	r0, #2
 800c380:	2b00      	cmp	r3, #0
 800c382:	db06      	blt.n	800c392 <__hi0bits+0x3c>
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	d503      	bpl.n	800c390 <__hi0bits+0x3a>
 800c388:	3001      	adds	r0, #1
 800c38a:	4770      	bx	lr
 800c38c:	2000      	movs	r0, #0
 800c38e:	e7e8      	b.n	800c362 <__hi0bits+0xc>
 800c390:	2020      	movs	r0, #32
 800c392:	4770      	bx	lr

0800c394 <__lo0bits>:
 800c394:	6803      	ldr	r3, [r0, #0]
 800c396:	f013 0207 	ands.w	r2, r3, #7
 800c39a:	4601      	mov	r1, r0
 800c39c:	d00b      	beq.n	800c3b6 <__lo0bits+0x22>
 800c39e:	07da      	lsls	r2, r3, #31
 800c3a0:	d423      	bmi.n	800c3ea <__lo0bits+0x56>
 800c3a2:	0798      	lsls	r0, r3, #30
 800c3a4:	bf49      	itett	mi
 800c3a6:	085b      	lsrmi	r3, r3, #1
 800c3a8:	089b      	lsrpl	r3, r3, #2
 800c3aa:	2001      	movmi	r0, #1
 800c3ac:	600b      	strmi	r3, [r1, #0]
 800c3ae:	bf5c      	itt	pl
 800c3b0:	600b      	strpl	r3, [r1, #0]
 800c3b2:	2002      	movpl	r0, #2
 800c3b4:	4770      	bx	lr
 800c3b6:	b298      	uxth	r0, r3
 800c3b8:	b9a8      	cbnz	r0, 800c3e6 <__lo0bits+0x52>
 800c3ba:	0c1b      	lsrs	r3, r3, #16
 800c3bc:	2010      	movs	r0, #16
 800c3be:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c3c2:	bf04      	itt	eq
 800c3c4:	0a1b      	lsreq	r3, r3, #8
 800c3c6:	3008      	addeq	r0, #8
 800c3c8:	071a      	lsls	r2, r3, #28
 800c3ca:	bf04      	itt	eq
 800c3cc:	091b      	lsreq	r3, r3, #4
 800c3ce:	3004      	addeq	r0, #4
 800c3d0:	079a      	lsls	r2, r3, #30
 800c3d2:	bf04      	itt	eq
 800c3d4:	089b      	lsreq	r3, r3, #2
 800c3d6:	3002      	addeq	r0, #2
 800c3d8:	07da      	lsls	r2, r3, #31
 800c3da:	d402      	bmi.n	800c3e2 <__lo0bits+0x4e>
 800c3dc:	085b      	lsrs	r3, r3, #1
 800c3de:	d006      	beq.n	800c3ee <__lo0bits+0x5a>
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	600b      	str	r3, [r1, #0]
 800c3e4:	4770      	bx	lr
 800c3e6:	4610      	mov	r0, r2
 800c3e8:	e7e9      	b.n	800c3be <__lo0bits+0x2a>
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	4770      	bx	lr
 800c3ee:	2020      	movs	r0, #32
 800c3f0:	4770      	bx	lr

0800c3f2 <__i2b>:
 800c3f2:	b510      	push	{r4, lr}
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	f7ff fee9 	bl	800c1ce <_Balloc>
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	6144      	str	r4, [r0, #20]
 800c400:	6102      	str	r2, [r0, #16]
 800c402:	bd10      	pop	{r4, pc}

0800c404 <__multiply>:
 800c404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c408:	4614      	mov	r4, r2
 800c40a:	690a      	ldr	r2, [r1, #16]
 800c40c:	6923      	ldr	r3, [r4, #16]
 800c40e:	429a      	cmp	r2, r3
 800c410:	bfb8      	it	lt
 800c412:	460b      	movlt	r3, r1
 800c414:	4688      	mov	r8, r1
 800c416:	bfbc      	itt	lt
 800c418:	46a0      	movlt	r8, r4
 800c41a:	461c      	movlt	r4, r3
 800c41c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c420:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c424:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c428:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c42c:	eb07 0609 	add.w	r6, r7, r9
 800c430:	42b3      	cmp	r3, r6
 800c432:	bfb8      	it	lt
 800c434:	3101      	addlt	r1, #1
 800c436:	f7ff feca 	bl	800c1ce <_Balloc>
 800c43a:	f100 0514 	add.w	r5, r0, #20
 800c43e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c442:	462b      	mov	r3, r5
 800c444:	2200      	movs	r2, #0
 800c446:	4573      	cmp	r3, lr
 800c448:	d316      	bcc.n	800c478 <__multiply+0x74>
 800c44a:	f104 0214 	add.w	r2, r4, #20
 800c44e:	f108 0114 	add.w	r1, r8, #20
 800c452:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c456:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	9b00      	ldr	r3, [sp, #0]
 800c45e:	9201      	str	r2, [sp, #4]
 800c460:	4293      	cmp	r3, r2
 800c462:	d80c      	bhi.n	800c47e <__multiply+0x7a>
 800c464:	2e00      	cmp	r6, #0
 800c466:	dd03      	ble.n	800c470 <__multiply+0x6c>
 800c468:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d05d      	beq.n	800c52c <__multiply+0x128>
 800c470:	6106      	str	r6, [r0, #16]
 800c472:	b003      	add	sp, #12
 800c474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c478:	f843 2b04 	str.w	r2, [r3], #4
 800c47c:	e7e3      	b.n	800c446 <__multiply+0x42>
 800c47e:	f8b2 b000 	ldrh.w	fp, [r2]
 800c482:	f1bb 0f00 	cmp.w	fp, #0
 800c486:	d023      	beq.n	800c4d0 <__multiply+0xcc>
 800c488:	4689      	mov	r9, r1
 800c48a:	46ac      	mov	ip, r5
 800c48c:	f04f 0800 	mov.w	r8, #0
 800c490:	f859 4b04 	ldr.w	r4, [r9], #4
 800c494:	f8dc a000 	ldr.w	sl, [ip]
 800c498:	b2a3      	uxth	r3, r4
 800c49a:	fa1f fa8a 	uxth.w	sl, sl
 800c49e:	fb0b a303 	mla	r3, fp, r3, sl
 800c4a2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c4a6:	f8dc 4000 	ldr.w	r4, [ip]
 800c4aa:	4443      	add	r3, r8
 800c4ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c4b0:	fb0b 840a 	mla	r4, fp, sl, r8
 800c4b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c4b8:	46e2      	mov	sl, ip
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c4c0:	454f      	cmp	r7, r9
 800c4c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c4c6:	f84a 3b04 	str.w	r3, [sl], #4
 800c4ca:	d82b      	bhi.n	800c524 <__multiply+0x120>
 800c4cc:	f8cc 8004 	str.w	r8, [ip, #4]
 800c4d0:	9b01      	ldr	r3, [sp, #4]
 800c4d2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c4d6:	3204      	adds	r2, #4
 800c4d8:	f1ba 0f00 	cmp.w	sl, #0
 800c4dc:	d020      	beq.n	800c520 <__multiply+0x11c>
 800c4de:	682b      	ldr	r3, [r5, #0]
 800c4e0:	4689      	mov	r9, r1
 800c4e2:	46a8      	mov	r8, r5
 800c4e4:	f04f 0b00 	mov.w	fp, #0
 800c4e8:	f8b9 c000 	ldrh.w	ip, [r9]
 800c4ec:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c4f0:	fb0a 440c 	mla	r4, sl, ip, r4
 800c4f4:	445c      	add	r4, fp
 800c4f6:	46c4      	mov	ip, r8
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c4fe:	f84c 3b04 	str.w	r3, [ip], #4
 800c502:	f859 3b04 	ldr.w	r3, [r9], #4
 800c506:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c50a:	0c1b      	lsrs	r3, r3, #16
 800c50c:	fb0a b303 	mla	r3, sl, r3, fp
 800c510:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c514:	454f      	cmp	r7, r9
 800c516:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c51a:	d805      	bhi.n	800c528 <__multiply+0x124>
 800c51c:	f8c8 3004 	str.w	r3, [r8, #4]
 800c520:	3504      	adds	r5, #4
 800c522:	e79b      	b.n	800c45c <__multiply+0x58>
 800c524:	46d4      	mov	ip, sl
 800c526:	e7b3      	b.n	800c490 <__multiply+0x8c>
 800c528:	46e0      	mov	r8, ip
 800c52a:	e7dd      	b.n	800c4e8 <__multiply+0xe4>
 800c52c:	3e01      	subs	r6, #1
 800c52e:	e799      	b.n	800c464 <__multiply+0x60>

0800c530 <__pow5mult>:
 800c530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c534:	4615      	mov	r5, r2
 800c536:	f012 0203 	ands.w	r2, r2, #3
 800c53a:	4606      	mov	r6, r0
 800c53c:	460f      	mov	r7, r1
 800c53e:	d007      	beq.n	800c550 <__pow5mult+0x20>
 800c540:	3a01      	subs	r2, #1
 800c542:	4c21      	ldr	r4, [pc, #132]	; (800c5c8 <__pow5mult+0x98>)
 800c544:	2300      	movs	r3, #0
 800c546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c54a:	f7ff fe8b 	bl	800c264 <__multadd>
 800c54e:	4607      	mov	r7, r0
 800c550:	10ad      	asrs	r5, r5, #2
 800c552:	d035      	beq.n	800c5c0 <__pow5mult+0x90>
 800c554:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c556:	b93c      	cbnz	r4, 800c568 <__pow5mult+0x38>
 800c558:	2010      	movs	r0, #16
 800c55a:	f7fc fad7 	bl	8008b0c <malloc>
 800c55e:	6270      	str	r0, [r6, #36]	; 0x24
 800c560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c564:	6004      	str	r4, [r0, #0]
 800c566:	60c4      	str	r4, [r0, #12]
 800c568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c570:	b94c      	cbnz	r4, 800c586 <__pow5mult+0x56>
 800c572:	f240 2171 	movw	r1, #625	; 0x271
 800c576:	4630      	mov	r0, r6
 800c578:	f7ff ff3b 	bl	800c3f2 <__i2b>
 800c57c:	2300      	movs	r3, #0
 800c57e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c582:	4604      	mov	r4, r0
 800c584:	6003      	str	r3, [r0, #0]
 800c586:	f04f 0800 	mov.w	r8, #0
 800c58a:	07eb      	lsls	r3, r5, #31
 800c58c:	d50a      	bpl.n	800c5a4 <__pow5mult+0x74>
 800c58e:	4639      	mov	r1, r7
 800c590:	4622      	mov	r2, r4
 800c592:	4630      	mov	r0, r6
 800c594:	f7ff ff36 	bl	800c404 <__multiply>
 800c598:	4639      	mov	r1, r7
 800c59a:	4681      	mov	r9, r0
 800c59c:	4630      	mov	r0, r6
 800c59e:	f7ff fe4a 	bl	800c236 <_Bfree>
 800c5a2:	464f      	mov	r7, r9
 800c5a4:	106d      	asrs	r5, r5, #1
 800c5a6:	d00b      	beq.n	800c5c0 <__pow5mult+0x90>
 800c5a8:	6820      	ldr	r0, [r4, #0]
 800c5aa:	b938      	cbnz	r0, 800c5bc <__pow5mult+0x8c>
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	4621      	mov	r1, r4
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f7ff ff27 	bl	800c404 <__multiply>
 800c5b6:	6020      	str	r0, [r4, #0]
 800c5b8:	f8c0 8000 	str.w	r8, [r0]
 800c5bc:	4604      	mov	r4, r0
 800c5be:	e7e4      	b.n	800c58a <__pow5mult+0x5a>
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5c6:	bf00      	nop
 800c5c8:	080106a8 	.word	0x080106a8

0800c5cc <__lshift>:
 800c5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5d6:	6923      	ldr	r3, [r4, #16]
 800c5d8:	6849      	ldr	r1, [r1, #4]
 800c5da:	eb0a 0903 	add.w	r9, sl, r3
 800c5de:	68a3      	ldr	r3, [r4, #8]
 800c5e0:	4607      	mov	r7, r0
 800c5e2:	4616      	mov	r6, r2
 800c5e4:	f109 0501 	add.w	r5, r9, #1
 800c5e8:	42ab      	cmp	r3, r5
 800c5ea:	db32      	blt.n	800c652 <__lshift+0x86>
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	f7ff fdee 	bl	800c1ce <_Balloc>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	f100 0114 	add.w	r1, r0, #20
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	4553      	cmp	r3, sl
 800c5fe:	db2b      	blt.n	800c658 <__lshift+0x8c>
 800c600:	6920      	ldr	r0, [r4, #16]
 800c602:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c606:	f104 0314 	add.w	r3, r4, #20
 800c60a:	f016 021f 	ands.w	r2, r6, #31
 800c60e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c612:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c616:	d025      	beq.n	800c664 <__lshift+0x98>
 800c618:	f1c2 0e20 	rsb	lr, r2, #32
 800c61c:	2000      	movs	r0, #0
 800c61e:	681e      	ldr	r6, [r3, #0]
 800c620:	468a      	mov	sl, r1
 800c622:	4096      	lsls	r6, r2
 800c624:	4330      	orrs	r0, r6
 800c626:	f84a 0b04 	str.w	r0, [sl], #4
 800c62a:	f853 0b04 	ldr.w	r0, [r3], #4
 800c62e:	459c      	cmp	ip, r3
 800c630:	fa20 f00e 	lsr.w	r0, r0, lr
 800c634:	d814      	bhi.n	800c660 <__lshift+0x94>
 800c636:	6048      	str	r0, [r1, #4]
 800c638:	b108      	cbz	r0, 800c63e <__lshift+0x72>
 800c63a:	f109 0502 	add.w	r5, r9, #2
 800c63e:	3d01      	subs	r5, #1
 800c640:	4638      	mov	r0, r7
 800c642:	f8c8 5010 	str.w	r5, [r8, #16]
 800c646:	4621      	mov	r1, r4
 800c648:	f7ff fdf5 	bl	800c236 <_Bfree>
 800c64c:	4640      	mov	r0, r8
 800c64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c652:	3101      	adds	r1, #1
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	e7c7      	b.n	800c5e8 <__lshift+0x1c>
 800c658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c65c:	3301      	adds	r3, #1
 800c65e:	e7cd      	b.n	800c5fc <__lshift+0x30>
 800c660:	4651      	mov	r1, sl
 800c662:	e7dc      	b.n	800c61e <__lshift+0x52>
 800c664:	3904      	subs	r1, #4
 800c666:	f853 2b04 	ldr.w	r2, [r3], #4
 800c66a:	f841 2f04 	str.w	r2, [r1, #4]!
 800c66e:	459c      	cmp	ip, r3
 800c670:	d8f9      	bhi.n	800c666 <__lshift+0x9a>
 800c672:	e7e4      	b.n	800c63e <__lshift+0x72>

0800c674 <__mcmp>:
 800c674:	6903      	ldr	r3, [r0, #16]
 800c676:	690a      	ldr	r2, [r1, #16]
 800c678:	1a9b      	subs	r3, r3, r2
 800c67a:	b530      	push	{r4, r5, lr}
 800c67c:	d10c      	bne.n	800c698 <__mcmp+0x24>
 800c67e:	0092      	lsls	r2, r2, #2
 800c680:	3014      	adds	r0, #20
 800c682:	3114      	adds	r1, #20
 800c684:	1884      	adds	r4, r0, r2
 800c686:	4411      	add	r1, r2
 800c688:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c68c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c690:	4295      	cmp	r5, r2
 800c692:	d003      	beq.n	800c69c <__mcmp+0x28>
 800c694:	d305      	bcc.n	800c6a2 <__mcmp+0x2e>
 800c696:	2301      	movs	r3, #1
 800c698:	4618      	mov	r0, r3
 800c69a:	bd30      	pop	{r4, r5, pc}
 800c69c:	42a0      	cmp	r0, r4
 800c69e:	d3f3      	bcc.n	800c688 <__mcmp+0x14>
 800c6a0:	e7fa      	b.n	800c698 <__mcmp+0x24>
 800c6a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a6:	e7f7      	b.n	800c698 <__mcmp+0x24>

0800c6a8 <__mdiff>:
 800c6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ac:	460d      	mov	r5, r1
 800c6ae:	4607      	mov	r7, r0
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	4614      	mov	r4, r2
 800c6b6:	f7ff ffdd 	bl	800c674 <__mcmp>
 800c6ba:	1e06      	subs	r6, r0, #0
 800c6bc:	d108      	bne.n	800c6d0 <__mdiff+0x28>
 800c6be:	4631      	mov	r1, r6
 800c6c0:	4638      	mov	r0, r7
 800c6c2:	f7ff fd84 	bl	800c1ce <_Balloc>
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d0:	bfa4      	itt	ge
 800c6d2:	4623      	movge	r3, r4
 800c6d4:	462c      	movge	r4, r5
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	6861      	ldr	r1, [r4, #4]
 800c6da:	bfa6      	itte	ge
 800c6dc:	461d      	movge	r5, r3
 800c6de:	2600      	movge	r6, #0
 800c6e0:	2601      	movlt	r6, #1
 800c6e2:	f7ff fd74 	bl	800c1ce <_Balloc>
 800c6e6:	692b      	ldr	r3, [r5, #16]
 800c6e8:	60c6      	str	r6, [r0, #12]
 800c6ea:	6926      	ldr	r6, [r4, #16]
 800c6ec:	f105 0914 	add.w	r9, r5, #20
 800c6f0:	f104 0214 	add.w	r2, r4, #20
 800c6f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c6f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c6fc:	f100 0514 	add.w	r5, r0, #20
 800c700:	f04f 0e00 	mov.w	lr, #0
 800c704:	f852 ab04 	ldr.w	sl, [r2], #4
 800c708:	f859 4b04 	ldr.w	r4, [r9], #4
 800c70c:	fa1e f18a 	uxtah	r1, lr, sl
 800c710:	b2a3      	uxth	r3, r4
 800c712:	1ac9      	subs	r1, r1, r3
 800c714:	0c23      	lsrs	r3, r4, #16
 800c716:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c71a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c71e:	b289      	uxth	r1, r1
 800c720:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c724:	45c8      	cmp	r8, r9
 800c726:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c72a:	4694      	mov	ip, r2
 800c72c:	f845 3b04 	str.w	r3, [r5], #4
 800c730:	d8e8      	bhi.n	800c704 <__mdiff+0x5c>
 800c732:	45bc      	cmp	ip, r7
 800c734:	d304      	bcc.n	800c740 <__mdiff+0x98>
 800c736:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c73a:	b183      	cbz	r3, 800c75e <__mdiff+0xb6>
 800c73c:	6106      	str	r6, [r0, #16]
 800c73e:	e7c5      	b.n	800c6cc <__mdiff+0x24>
 800c740:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c744:	fa1e f381 	uxtah	r3, lr, r1
 800c748:	141a      	asrs	r2, r3, #16
 800c74a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c74e:	b29b      	uxth	r3, r3
 800c750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c754:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c758:	f845 3b04 	str.w	r3, [r5], #4
 800c75c:	e7e9      	b.n	800c732 <__mdiff+0x8a>
 800c75e:	3e01      	subs	r6, #1
 800c760:	e7e9      	b.n	800c736 <__mdiff+0x8e>
	...

0800c764 <__ulp>:
 800c764:	4b12      	ldr	r3, [pc, #72]	; (800c7b0 <__ulp+0x4c>)
 800c766:	ee10 2a90 	vmov	r2, s1
 800c76a:	401a      	ands	r2, r3
 800c76c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c770:	2b00      	cmp	r3, #0
 800c772:	dd04      	ble.n	800c77e <__ulp+0x1a>
 800c774:	2000      	movs	r0, #0
 800c776:	4619      	mov	r1, r3
 800c778:	ec41 0b10 	vmov	d0, r0, r1
 800c77c:	4770      	bx	lr
 800c77e:	425b      	negs	r3, r3
 800c780:	151b      	asrs	r3, r3, #20
 800c782:	2b13      	cmp	r3, #19
 800c784:	f04f 0000 	mov.w	r0, #0
 800c788:	f04f 0100 	mov.w	r1, #0
 800c78c:	dc04      	bgt.n	800c798 <__ulp+0x34>
 800c78e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c792:	fa42 f103 	asr.w	r1, r2, r3
 800c796:	e7ef      	b.n	800c778 <__ulp+0x14>
 800c798:	3b14      	subs	r3, #20
 800c79a:	2b1e      	cmp	r3, #30
 800c79c:	f04f 0201 	mov.w	r2, #1
 800c7a0:	bfda      	itte	le
 800c7a2:	f1c3 031f 	rsble	r3, r3, #31
 800c7a6:	fa02 f303 	lslle.w	r3, r2, r3
 800c7aa:	4613      	movgt	r3, r2
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	e7e3      	b.n	800c778 <__ulp+0x14>
 800c7b0:	7ff00000 	.word	0x7ff00000

0800c7b4 <__b2d>:
 800c7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b6:	6905      	ldr	r5, [r0, #16]
 800c7b8:	f100 0714 	add.w	r7, r0, #20
 800c7bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c7c0:	1f2e      	subs	r6, r5, #4
 800c7c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f7ff fdc5 	bl	800c356 <__hi0bits>
 800c7cc:	f1c0 0320 	rsb	r3, r0, #32
 800c7d0:	280a      	cmp	r0, #10
 800c7d2:	600b      	str	r3, [r1, #0]
 800c7d4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c84c <__b2d+0x98>
 800c7d8:	dc14      	bgt.n	800c804 <__b2d+0x50>
 800c7da:	f1c0 0e0b 	rsb	lr, r0, #11
 800c7de:	fa24 f10e 	lsr.w	r1, r4, lr
 800c7e2:	42b7      	cmp	r7, r6
 800c7e4:	ea41 030c 	orr.w	r3, r1, ip
 800c7e8:	bf34      	ite	cc
 800c7ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c7ee:	2100      	movcs	r1, #0
 800c7f0:	3015      	adds	r0, #21
 800c7f2:	fa04 f000 	lsl.w	r0, r4, r0
 800c7f6:	fa21 f10e 	lsr.w	r1, r1, lr
 800c7fa:	ea40 0201 	orr.w	r2, r0, r1
 800c7fe:	ec43 2b10 	vmov	d0, r2, r3
 800c802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c804:	42b7      	cmp	r7, r6
 800c806:	bf3a      	itte	cc
 800c808:	f1a5 0608 	subcc.w	r6, r5, #8
 800c80c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c810:	2100      	movcs	r1, #0
 800c812:	380b      	subs	r0, #11
 800c814:	d015      	beq.n	800c842 <__b2d+0x8e>
 800c816:	4084      	lsls	r4, r0
 800c818:	f1c0 0520 	rsb	r5, r0, #32
 800c81c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c820:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c824:	42be      	cmp	r6, r7
 800c826:	fa21 fc05 	lsr.w	ip, r1, r5
 800c82a:	ea44 030c 	orr.w	r3, r4, ip
 800c82e:	bf8c      	ite	hi
 800c830:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c834:	2400      	movls	r4, #0
 800c836:	fa01 f000 	lsl.w	r0, r1, r0
 800c83a:	40ec      	lsrs	r4, r5
 800c83c:	ea40 0204 	orr.w	r2, r0, r4
 800c840:	e7dd      	b.n	800c7fe <__b2d+0x4a>
 800c842:	ea44 030c 	orr.w	r3, r4, ip
 800c846:	460a      	mov	r2, r1
 800c848:	e7d9      	b.n	800c7fe <__b2d+0x4a>
 800c84a:	bf00      	nop
 800c84c:	3ff00000 	.word	0x3ff00000

0800c850 <__d2b>:
 800c850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c854:	460e      	mov	r6, r1
 800c856:	2101      	movs	r1, #1
 800c858:	ec59 8b10 	vmov	r8, r9, d0
 800c85c:	4615      	mov	r5, r2
 800c85e:	f7ff fcb6 	bl	800c1ce <_Balloc>
 800c862:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c866:	4607      	mov	r7, r0
 800c868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c86c:	bb34      	cbnz	r4, 800c8bc <__d2b+0x6c>
 800c86e:	9301      	str	r3, [sp, #4]
 800c870:	f1b8 0300 	subs.w	r3, r8, #0
 800c874:	d027      	beq.n	800c8c6 <__d2b+0x76>
 800c876:	a802      	add	r0, sp, #8
 800c878:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c87c:	f7ff fd8a 	bl	800c394 <__lo0bits>
 800c880:	9900      	ldr	r1, [sp, #0]
 800c882:	b1f0      	cbz	r0, 800c8c2 <__d2b+0x72>
 800c884:	9a01      	ldr	r2, [sp, #4]
 800c886:	f1c0 0320 	rsb	r3, r0, #32
 800c88a:	fa02 f303 	lsl.w	r3, r2, r3
 800c88e:	430b      	orrs	r3, r1
 800c890:	40c2      	lsrs	r2, r0
 800c892:	617b      	str	r3, [r7, #20]
 800c894:	9201      	str	r2, [sp, #4]
 800c896:	9b01      	ldr	r3, [sp, #4]
 800c898:	61bb      	str	r3, [r7, #24]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	bf14      	ite	ne
 800c89e:	2102      	movne	r1, #2
 800c8a0:	2101      	moveq	r1, #1
 800c8a2:	6139      	str	r1, [r7, #16]
 800c8a4:	b1c4      	cbz	r4, 800c8d8 <__d2b+0x88>
 800c8a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c8aa:	4404      	add	r4, r0
 800c8ac:	6034      	str	r4, [r6, #0]
 800c8ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c8b2:	6028      	str	r0, [r5, #0]
 800c8b4:	4638      	mov	r0, r7
 800c8b6:	b003      	add	sp, #12
 800c8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8c0:	e7d5      	b.n	800c86e <__d2b+0x1e>
 800c8c2:	6179      	str	r1, [r7, #20]
 800c8c4:	e7e7      	b.n	800c896 <__d2b+0x46>
 800c8c6:	a801      	add	r0, sp, #4
 800c8c8:	f7ff fd64 	bl	800c394 <__lo0bits>
 800c8cc:	9b01      	ldr	r3, [sp, #4]
 800c8ce:	617b      	str	r3, [r7, #20]
 800c8d0:	2101      	movs	r1, #1
 800c8d2:	6139      	str	r1, [r7, #16]
 800c8d4:	3020      	adds	r0, #32
 800c8d6:	e7e5      	b.n	800c8a4 <__d2b+0x54>
 800c8d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c8dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c8e0:	6030      	str	r0, [r6, #0]
 800c8e2:	6918      	ldr	r0, [r3, #16]
 800c8e4:	f7ff fd37 	bl	800c356 <__hi0bits>
 800c8e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c8ec:	e7e1      	b.n	800c8b2 <__d2b+0x62>

0800c8ee <__ratio>:
 800c8ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f2:	4688      	mov	r8, r1
 800c8f4:	4669      	mov	r1, sp
 800c8f6:	4681      	mov	r9, r0
 800c8f8:	f7ff ff5c 	bl	800c7b4 <__b2d>
 800c8fc:	a901      	add	r1, sp, #4
 800c8fe:	4640      	mov	r0, r8
 800c900:	ec57 6b10 	vmov	r6, r7, d0
 800c904:	f7ff ff56 	bl	800c7b4 <__b2d>
 800c908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c90c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c910:	eba3 0c02 	sub.w	ip, r3, r2
 800c914:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c918:	1a9b      	subs	r3, r3, r2
 800c91a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c91e:	ec5b ab10 	vmov	sl, fp, d0
 800c922:	2b00      	cmp	r3, #0
 800c924:	bfce      	itee	gt
 800c926:	463a      	movgt	r2, r7
 800c928:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c92c:	465a      	movle	r2, fp
 800c92e:	4659      	mov	r1, fp
 800c930:	463d      	mov	r5, r7
 800c932:	bfd4      	ite	le
 800c934:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c938:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c93c:	4630      	mov	r0, r6
 800c93e:	ee10 2a10 	vmov	r2, s0
 800c942:	460b      	mov	r3, r1
 800c944:	4629      	mov	r1, r5
 800c946:	f7f3 ff89 	bl	800085c <__aeabi_ddiv>
 800c94a:	ec41 0b10 	vmov	d0, r0, r1
 800c94e:	b003      	add	sp, #12
 800c950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c954 <__copybits>:
 800c954:	3901      	subs	r1, #1
 800c956:	b510      	push	{r4, lr}
 800c958:	1149      	asrs	r1, r1, #5
 800c95a:	6914      	ldr	r4, [r2, #16]
 800c95c:	3101      	adds	r1, #1
 800c95e:	f102 0314 	add.w	r3, r2, #20
 800c962:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c966:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c96a:	42a3      	cmp	r3, r4
 800c96c:	4602      	mov	r2, r0
 800c96e:	d303      	bcc.n	800c978 <__copybits+0x24>
 800c970:	2300      	movs	r3, #0
 800c972:	428a      	cmp	r2, r1
 800c974:	d305      	bcc.n	800c982 <__copybits+0x2e>
 800c976:	bd10      	pop	{r4, pc}
 800c978:	f853 2b04 	ldr.w	r2, [r3], #4
 800c97c:	f840 2b04 	str.w	r2, [r0], #4
 800c980:	e7f3      	b.n	800c96a <__copybits+0x16>
 800c982:	f842 3b04 	str.w	r3, [r2], #4
 800c986:	e7f4      	b.n	800c972 <__copybits+0x1e>

0800c988 <__any_on>:
 800c988:	f100 0214 	add.w	r2, r0, #20
 800c98c:	6900      	ldr	r0, [r0, #16]
 800c98e:	114b      	asrs	r3, r1, #5
 800c990:	4298      	cmp	r0, r3
 800c992:	b510      	push	{r4, lr}
 800c994:	db11      	blt.n	800c9ba <__any_on+0x32>
 800c996:	dd0a      	ble.n	800c9ae <__any_on+0x26>
 800c998:	f011 011f 	ands.w	r1, r1, #31
 800c99c:	d007      	beq.n	800c9ae <__any_on+0x26>
 800c99e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9a2:	fa24 f001 	lsr.w	r0, r4, r1
 800c9a6:	fa00 f101 	lsl.w	r1, r0, r1
 800c9aa:	428c      	cmp	r4, r1
 800c9ac:	d10b      	bne.n	800c9c6 <__any_on+0x3e>
 800c9ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d803      	bhi.n	800c9be <__any_on+0x36>
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	bd10      	pop	{r4, pc}
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	e7f7      	b.n	800c9ae <__any_on+0x26>
 800c9be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9c2:	2900      	cmp	r1, #0
 800c9c4:	d0f5      	beq.n	800c9b2 <__any_on+0x2a>
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	e7f6      	b.n	800c9b8 <__any_on+0x30>

0800c9ca <_calloc_r>:
 800c9ca:	b538      	push	{r3, r4, r5, lr}
 800c9cc:	fb02 f401 	mul.w	r4, r2, r1
 800c9d0:	4621      	mov	r1, r4
 800c9d2:	f7fc f901 	bl	8008bd8 <_malloc_r>
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	b118      	cbz	r0, 800c9e2 <_calloc_r+0x18>
 800c9da:	4622      	mov	r2, r4
 800c9dc:	2100      	movs	r1, #0
 800c9de:	f7fc f8a5 	bl	8008b2c <memset>
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	bd38      	pop	{r3, r4, r5, pc}

0800c9e6 <__ssputs_r>:
 800c9e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ea:	688e      	ldr	r6, [r1, #8]
 800c9ec:	429e      	cmp	r6, r3
 800c9ee:	4682      	mov	sl, r0
 800c9f0:	460c      	mov	r4, r1
 800c9f2:	4690      	mov	r8, r2
 800c9f4:	4699      	mov	r9, r3
 800c9f6:	d837      	bhi.n	800ca68 <__ssputs_r+0x82>
 800c9f8:	898a      	ldrh	r2, [r1, #12]
 800c9fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9fe:	d031      	beq.n	800ca64 <__ssputs_r+0x7e>
 800ca00:	6825      	ldr	r5, [r4, #0]
 800ca02:	6909      	ldr	r1, [r1, #16]
 800ca04:	1a6f      	subs	r7, r5, r1
 800ca06:	6965      	ldr	r5, [r4, #20]
 800ca08:	2302      	movs	r3, #2
 800ca0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca0e:	fb95 f5f3 	sdiv	r5, r5, r3
 800ca12:	f109 0301 	add.w	r3, r9, #1
 800ca16:	443b      	add	r3, r7
 800ca18:	429d      	cmp	r5, r3
 800ca1a:	bf38      	it	cc
 800ca1c:	461d      	movcc	r5, r3
 800ca1e:	0553      	lsls	r3, r2, #21
 800ca20:	d530      	bpl.n	800ca84 <__ssputs_r+0x9e>
 800ca22:	4629      	mov	r1, r5
 800ca24:	f7fc f8d8 	bl	8008bd8 <_malloc_r>
 800ca28:	4606      	mov	r6, r0
 800ca2a:	b950      	cbnz	r0, 800ca42 <__ssputs_r+0x5c>
 800ca2c:	230c      	movs	r3, #12
 800ca2e:	f8ca 3000 	str.w	r3, [sl]
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca38:	81a3      	strh	r3, [r4, #12]
 800ca3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca42:	463a      	mov	r2, r7
 800ca44:	6921      	ldr	r1, [r4, #16]
 800ca46:	f7ff fbb5 	bl	800c1b4 <memcpy>
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca54:	81a3      	strh	r3, [r4, #12]
 800ca56:	6126      	str	r6, [r4, #16]
 800ca58:	6165      	str	r5, [r4, #20]
 800ca5a:	443e      	add	r6, r7
 800ca5c:	1bed      	subs	r5, r5, r7
 800ca5e:	6026      	str	r6, [r4, #0]
 800ca60:	60a5      	str	r5, [r4, #8]
 800ca62:	464e      	mov	r6, r9
 800ca64:	454e      	cmp	r6, r9
 800ca66:	d900      	bls.n	800ca6a <__ssputs_r+0x84>
 800ca68:	464e      	mov	r6, r9
 800ca6a:	4632      	mov	r2, r6
 800ca6c:	4641      	mov	r1, r8
 800ca6e:	6820      	ldr	r0, [r4, #0]
 800ca70:	f000 fe9a 	bl	800d7a8 <memmove>
 800ca74:	68a3      	ldr	r3, [r4, #8]
 800ca76:	1b9b      	subs	r3, r3, r6
 800ca78:	60a3      	str	r3, [r4, #8]
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	441e      	add	r6, r3
 800ca7e:	6026      	str	r6, [r4, #0]
 800ca80:	2000      	movs	r0, #0
 800ca82:	e7dc      	b.n	800ca3e <__ssputs_r+0x58>
 800ca84:	462a      	mov	r2, r5
 800ca86:	f000 fea8 	bl	800d7da <_realloc_r>
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d1e2      	bne.n	800ca56 <__ssputs_r+0x70>
 800ca90:	6921      	ldr	r1, [r4, #16]
 800ca92:	4650      	mov	r0, sl
 800ca94:	f7fc f852 	bl	8008b3c <_free_r>
 800ca98:	e7c8      	b.n	800ca2c <__ssputs_r+0x46>
	...

0800ca9c <_svfiprintf_r>:
 800ca9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa0:	461d      	mov	r5, r3
 800caa2:	898b      	ldrh	r3, [r1, #12]
 800caa4:	061f      	lsls	r7, r3, #24
 800caa6:	b09d      	sub	sp, #116	; 0x74
 800caa8:	4680      	mov	r8, r0
 800caaa:	460c      	mov	r4, r1
 800caac:	4616      	mov	r6, r2
 800caae:	d50f      	bpl.n	800cad0 <_svfiprintf_r+0x34>
 800cab0:	690b      	ldr	r3, [r1, #16]
 800cab2:	b96b      	cbnz	r3, 800cad0 <_svfiprintf_r+0x34>
 800cab4:	2140      	movs	r1, #64	; 0x40
 800cab6:	f7fc f88f 	bl	8008bd8 <_malloc_r>
 800caba:	6020      	str	r0, [r4, #0]
 800cabc:	6120      	str	r0, [r4, #16]
 800cabe:	b928      	cbnz	r0, 800cacc <_svfiprintf_r+0x30>
 800cac0:	230c      	movs	r3, #12
 800cac2:	f8c8 3000 	str.w	r3, [r8]
 800cac6:	f04f 30ff 	mov.w	r0, #4294967295
 800caca:	e0c8      	b.n	800cc5e <_svfiprintf_r+0x1c2>
 800cacc:	2340      	movs	r3, #64	; 0x40
 800cace:	6163      	str	r3, [r4, #20]
 800cad0:	2300      	movs	r3, #0
 800cad2:	9309      	str	r3, [sp, #36]	; 0x24
 800cad4:	2320      	movs	r3, #32
 800cad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cada:	2330      	movs	r3, #48	; 0x30
 800cadc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cae0:	9503      	str	r5, [sp, #12]
 800cae2:	f04f 0b01 	mov.w	fp, #1
 800cae6:	4637      	mov	r7, r6
 800cae8:	463d      	mov	r5, r7
 800caea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800caee:	b10b      	cbz	r3, 800caf4 <_svfiprintf_r+0x58>
 800caf0:	2b25      	cmp	r3, #37	; 0x25
 800caf2:	d13e      	bne.n	800cb72 <_svfiprintf_r+0xd6>
 800caf4:	ebb7 0a06 	subs.w	sl, r7, r6
 800caf8:	d00b      	beq.n	800cb12 <_svfiprintf_r+0x76>
 800cafa:	4653      	mov	r3, sl
 800cafc:	4632      	mov	r2, r6
 800cafe:	4621      	mov	r1, r4
 800cb00:	4640      	mov	r0, r8
 800cb02:	f7ff ff70 	bl	800c9e6 <__ssputs_r>
 800cb06:	3001      	adds	r0, #1
 800cb08:	f000 80a4 	beq.w	800cc54 <_svfiprintf_r+0x1b8>
 800cb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb0e:	4453      	add	r3, sl
 800cb10:	9309      	str	r3, [sp, #36]	; 0x24
 800cb12:	783b      	ldrb	r3, [r7, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f000 809d 	beq.w	800cc54 <_svfiprintf_r+0x1b8>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb24:	9304      	str	r3, [sp, #16]
 800cb26:	9307      	str	r3, [sp, #28]
 800cb28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb2c:	931a      	str	r3, [sp, #104]	; 0x68
 800cb2e:	462f      	mov	r7, r5
 800cb30:	2205      	movs	r2, #5
 800cb32:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cb36:	4850      	ldr	r0, [pc, #320]	; (800cc78 <_svfiprintf_r+0x1dc>)
 800cb38:	f7f3 fb5a 	bl	80001f0 <memchr>
 800cb3c:	9b04      	ldr	r3, [sp, #16]
 800cb3e:	b9d0      	cbnz	r0, 800cb76 <_svfiprintf_r+0xda>
 800cb40:	06d9      	lsls	r1, r3, #27
 800cb42:	bf44      	itt	mi
 800cb44:	2220      	movmi	r2, #32
 800cb46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb4a:	071a      	lsls	r2, r3, #28
 800cb4c:	bf44      	itt	mi
 800cb4e:	222b      	movmi	r2, #43	; 0x2b
 800cb50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb54:	782a      	ldrb	r2, [r5, #0]
 800cb56:	2a2a      	cmp	r2, #42	; 0x2a
 800cb58:	d015      	beq.n	800cb86 <_svfiprintf_r+0xea>
 800cb5a:	9a07      	ldr	r2, [sp, #28]
 800cb5c:	462f      	mov	r7, r5
 800cb5e:	2000      	movs	r0, #0
 800cb60:	250a      	movs	r5, #10
 800cb62:	4639      	mov	r1, r7
 800cb64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb68:	3b30      	subs	r3, #48	; 0x30
 800cb6a:	2b09      	cmp	r3, #9
 800cb6c:	d94d      	bls.n	800cc0a <_svfiprintf_r+0x16e>
 800cb6e:	b1b8      	cbz	r0, 800cba0 <_svfiprintf_r+0x104>
 800cb70:	e00f      	b.n	800cb92 <_svfiprintf_r+0xf6>
 800cb72:	462f      	mov	r7, r5
 800cb74:	e7b8      	b.n	800cae8 <_svfiprintf_r+0x4c>
 800cb76:	4a40      	ldr	r2, [pc, #256]	; (800cc78 <_svfiprintf_r+0x1dc>)
 800cb78:	1a80      	subs	r0, r0, r2
 800cb7a:	fa0b f000 	lsl.w	r0, fp, r0
 800cb7e:	4318      	orrs	r0, r3
 800cb80:	9004      	str	r0, [sp, #16]
 800cb82:	463d      	mov	r5, r7
 800cb84:	e7d3      	b.n	800cb2e <_svfiprintf_r+0x92>
 800cb86:	9a03      	ldr	r2, [sp, #12]
 800cb88:	1d11      	adds	r1, r2, #4
 800cb8a:	6812      	ldr	r2, [r2, #0]
 800cb8c:	9103      	str	r1, [sp, #12]
 800cb8e:	2a00      	cmp	r2, #0
 800cb90:	db01      	blt.n	800cb96 <_svfiprintf_r+0xfa>
 800cb92:	9207      	str	r2, [sp, #28]
 800cb94:	e004      	b.n	800cba0 <_svfiprintf_r+0x104>
 800cb96:	4252      	negs	r2, r2
 800cb98:	f043 0302 	orr.w	r3, r3, #2
 800cb9c:	9207      	str	r2, [sp, #28]
 800cb9e:	9304      	str	r3, [sp, #16]
 800cba0:	783b      	ldrb	r3, [r7, #0]
 800cba2:	2b2e      	cmp	r3, #46	; 0x2e
 800cba4:	d10c      	bne.n	800cbc0 <_svfiprintf_r+0x124>
 800cba6:	787b      	ldrb	r3, [r7, #1]
 800cba8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbaa:	d133      	bne.n	800cc14 <_svfiprintf_r+0x178>
 800cbac:	9b03      	ldr	r3, [sp, #12]
 800cbae:	1d1a      	adds	r2, r3, #4
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	9203      	str	r2, [sp, #12]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	bfb8      	it	lt
 800cbb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbbc:	3702      	adds	r7, #2
 800cbbe:	9305      	str	r3, [sp, #20]
 800cbc0:	4d2e      	ldr	r5, [pc, #184]	; (800cc7c <_svfiprintf_r+0x1e0>)
 800cbc2:	7839      	ldrb	r1, [r7, #0]
 800cbc4:	2203      	movs	r2, #3
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	f7f3 fb12 	bl	80001f0 <memchr>
 800cbcc:	b138      	cbz	r0, 800cbde <_svfiprintf_r+0x142>
 800cbce:	2340      	movs	r3, #64	; 0x40
 800cbd0:	1b40      	subs	r0, r0, r5
 800cbd2:	fa03 f000 	lsl.w	r0, r3, r0
 800cbd6:	9b04      	ldr	r3, [sp, #16]
 800cbd8:	4303      	orrs	r3, r0
 800cbda:	3701      	adds	r7, #1
 800cbdc:	9304      	str	r3, [sp, #16]
 800cbde:	7839      	ldrb	r1, [r7, #0]
 800cbe0:	4827      	ldr	r0, [pc, #156]	; (800cc80 <_svfiprintf_r+0x1e4>)
 800cbe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbe6:	2206      	movs	r2, #6
 800cbe8:	1c7e      	adds	r6, r7, #1
 800cbea:	f7f3 fb01 	bl	80001f0 <memchr>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d038      	beq.n	800cc64 <_svfiprintf_r+0x1c8>
 800cbf2:	4b24      	ldr	r3, [pc, #144]	; (800cc84 <_svfiprintf_r+0x1e8>)
 800cbf4:	bb13      	cbnz	r3, 800cc3c <_svfiprintf_r+0x1a0>
 800cbf6:	9b03      	ldr	r3, [sp, #12]
 800cbf8:	3307      	adds	r3, #7
 800cbfa:	f023 0307 	bic.w	r3, r3, #7
 800cbfe:	3308      	adds	r3, #8
 800cc00:	9303      	str	r3, [sp, #12]
 800cc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc04:	444b      	add	r3, r9
 800cc06:	9309      	str	r3, [sp, #36]	; 0x24
 800cc08:	e76d      	b.n	800cae6 <_svfiprintf_r+0x4a>
 800cc0a:	fb05 3202 	mla	r2, r5, r2, r3
 800cc0e:	2001      	movs	r0, #1
 800cc10:	460f      	mov	r7, r1
 800cc12:	e7a6      	b.n	800cb62 <_svfiprintf_r+0xc6>
 800cc14:	2300      	movs	r3, #0
 800cc16:	3701      	adds	r7, #1
 800cc18:	9305      	str	r3, [sp, #20]
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	250a      	movs	r5, #10
 800cc1e:	4638      	mov	r0, r7
 800cc20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc24:	3a30      	subs	r2, #48	; 0x30
 800cc26:	2a09      	cmp	r2, #9
 800cc28:	d903      	bls.n	800cc32 <_svfiprintf_r+0x196>
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0c8      	beq.n	800cbc0 <_svfiprintf_r+0x124>
 800cc2e:	9105      	str	r1, [sp, #20]
 800cc30:	e7c6      	b.n	800cbc0 <_svfiprintf_r+0x124>
 800cc32:	fb05 2101 	mla	r1, r5, r1, r2
 800cc36:	2301      	movs	r3, #1
 800cc38:	4607      	mov	r7, r0
 800cc3a:	e7f0      	b.n	800cc1e <_svfiprintf_r+0x182>
 800cc3c:	ab03      	add	r3, sp, #12
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	4622      	mov	r2, r4
 800cc42:	4b11      	ldr	r3, [pc, #68]	; (800cc88 <_svfiprintf_r+0x1ec>)
 800cc44:	a904      	add	r1, sp, #16
 800cc46:	4640      	mov	r0, r8
 800cc48:	f7fc f8b4 	bl	8008db4 <_printf_float>
 800cc4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cc50:	4681      	mov	r9, r0
 800cc52:	d1d6      	bne.n	800cc02 <_svfiprintf_r+0x166>
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	065b      	lsls	r3, r3, #25
 800cc58:	f53f af35 	bmi.w	800cac6 <_svfiprintf_r+0x2a>
 800cc5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc5e:	b01d      	add	sp, #116	; 0x74
 800cc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc64:	ab03      	add	r3, sp, #12
 800cc66:	9300      	str	r3, [sp, #0]
 800cc68:	4622      	mov	r2, r4
 800cc6a:	4b07      	ldr	r3, [pc, #28]	; (800cc88 <_svfiprintf_r+0x1ec>)
 800cc6c:	a904      	add	r1, sp, #16
 800cc6e:	4640      	mov	r0, r8
 800cc70:	f7fc fb56 	bl	8009320 <_printf_i>
 800cc74:	e7ea      	b.n	800cc4c <_svfiprintf_r+0x1b0>
 800cc76:	bf00      	nop
 800cc78:	080106b4 	.word	0x080106b4
 800cc7c:	080106ba 	.word	0x080106ba
 800cc80:	080106be 	.word	0x080106be
 800cc84:	08008db5 	.word	0x08008db5
 800cc88:	0800c9e7 	.word	0x0800c9e7

0800cc8c <_sungetc_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	1c4b      	adds	r3, r1, #1
 800cc90:	4614      	mov	r4, r2
 800cc92:	d103      	bne.n	800cc9c <_sungetc_r+0x10>
 800cc94:	f04f 35ff 	mov.w	r5, #4294967295
 800cc98:	4628      	mov	r0, r5
 800cc9a:	bd38      	pop	{r3, r4, r5, pc}
 800cc9c:	8993      	ldrh	r3, [r2, #12]
 800cc9e:	f023 0320 	bic.w	r3, r3, #32
 800cca2:	8193      	strh	r3, [r2, #12]
 800cca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cca6:	6852      	ldr	r2, [r2, #4]
 800cca8:	b2cd      	uxtb	r5, r1
 800ccaa:	b18b      	cbz	r3, 800ccd0 <_sungetc_r+0x44>
 800ccac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	dd08      	ble.n	800ccc4 <_sungetc_r+0x38>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	1e5a      	subs	r2, r3, #1
 800ccb6:	6022      	str	r2, [r4, #0]
 800ccb8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ccbc:	6863      	ldr	r3, [r4, #4]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	6063      	str	r3, [r4, #4]
 800ccc2:	e7e9      	b.n	800cc98 <_sungetc_r+0xc>
 800ccc4:	4621      	mov	r1, r4
 800ccc6:	f000 fd05 	bl	800d6d4 <__submore>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	d0f1      	beq.n	800ccb2 <_sungetc_r+0x26>
 800ccce:	e7e1      	b.n	800cc94 <_sungetc_r+0x8>
 800ccd0:	6921      	ldr	r1, [r4, #16]
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	b151      	cbz	r1, 800ccec <_sungetc_r+0x60>
 800ccd6:	4299      	cmp	r1, r3
 800ccd8:	d208      	bcs.n	800ccec <_sungetc_r+0x60>
 800ccda:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ccde:	42a9      	cmp	r1, r5
 800cce0:	d104      	bne.n	800ccec <_sungetc_r+0x60>
 800cce2:	3b01      	subs	r3, #1
 800cce4:	3201      	adds	r2, #1
 800cce6:	6023      	str	r3, [r4, #0]
 800cce8:	6062      	str	r2, [r4, #4]
 800ccea:	e7d5      	b.n	800cc98 <_sungetc_r+0xc>
 800ccec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ccf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccf4:	6363      	str	r3, [r4, #52]	; 0x34
 800ccf6:	2303      	movs	r3, #3
 800ccf8:	63a3      	str	r3, [r4, #56]	; 0x38
 800ccfa:	4623      	mov	r3, r4
 800ccfc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	2301      	movs	r3, #1
 800cd04:	e7dc      	b.n	800ccc0 <_sungetc_r+0x34>

0800cd06 <__ssrefill_r>:
 800cd06:	b510      	push	{r4, lr}
 800cd08:	460c      	mov	r4, r1
 800cd0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cd0c:	b169      	cbz	r1, 800cd2a <__ssrefill_r+0x24>
 800cd0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd12:	4299      	cmp	r1, r3
 800cd14:	d001      	beq.n	800cd1a <__ssrefill_r+0x14>
 800cd16:	f7fb ff11 	bl	8008b3c <_free_r>
 800cd1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd1c:	6063      	str	r3, [r4, #4]
 800cd1e:	2000      	movs	r0, #0
 800cd20:	6360      	str	r0, [r4, #52]	; 0x34
 800cd22:	b113      	cbz	r3, 800cd2a <__ssrefill_r+0x24>
 800cd24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cd26:	6023      	str	r3, [r4, #0]
 800cd28:	bd10      	pop	{r4, pc}
 800cd2a:	6923      	ldr	r3, [r4, #16]
 800cd2c:	6023      	str	r3, [r4, #0]
 800cd2e:	2300      	movs	r3, #0
 800cd30:	6063      	str	r3, [r4, #4]
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	f043 0320 	orr.w	r3, r3, #32
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3e:	e7f3      	b.n	800cd28 <__ssrefill_r+0x22>

0800cd40 <__ssvfiscanf_r>:
 800cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd44:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800cd48:	460c      	mov	r4, r1
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	9144      	str	r1, [sp, #272]	; 0x110
 800cd4e:	9145      	str	r1, [sp, #276]	; 0x114
 800cd50:	499f      	ldr	r1, [pc, #636]	; (800cfd0 <__ssvfiscanf_r+0x290>)
 800cd52:	91a0      	str	r1, [sp, #640]	; 0x280
 800cd54:	f10d 0804 	add.w	r8, sp, #4
 800cd58:	499e      	ldr	r1, [pc, #632]	; (800cfd4 <__ssvfiscanf_r+0x294>)
 800cd5a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800cfd8 <__ssvfiscanf_r+0x298>
 800cd5e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cd62:	4606      	mov	r6, r0
 800cd64:	4692      	mov	sl, r2
 800cd66:	91a1      	str	r1, [sp, #644]	; 0x284
 800cd68:	9300      	str	r3, [sp, #0]
 800cd6a:	270a      	movs	r7, #10
 800cd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f000 812a 	beq.w	800cfca <__ssvfiscanf_r+0x28a>
 800cd76:	4655      	mov	r5, sl
 800cd78:	f7ff f976 	bl	800c068 <__locale_ctype_ptr>
 800cd7c:	f815 bb01 	ldrb.w	fp, [r5], #1
 800cd80:	4458      	add	r0, fp
 800cd82:	7843      	ldrb	r3, [r0, #1]
 800cd84:	f013 0308 	ands.w	r3, r3, #8
 800cd88:	d01c      	beq.n	800cdc4 <__ssvfiscanf_r+0x84>
 800cd8a:	6863      	ldr	r3, [r4, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	dd12      	ble.n	800cdb6 <__ssvfiscanf_r+0x76>
 800cd90:	f7ff f96a 	bl	800c068 <__locale_ctype_ptr>
 800cd94:	6823      	ldr	r3, [r4, #0]
 800cd96:	781a      	ldrb	r2, [r3, #0]
 800cd98:	4410      	add	r0, r2
 800cd9a:	7842      	ldrb	r2, [r0, #1]
 800cd9c:	0712      	lsls	r2, r2, #28
 800cd9e:	d401      	bmi.n	800cda4 <__ssvfiscanf_r+0x64>
 800cda0:	46aa      	mov	sl, r5
 800cda2:	e7e3      	b.n	800cd6c <__ssvfiscanf_r+0x2c>
 800cda4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cda6:	3201      	adds	r2, #1
 800cda8:	9245      	str	r2, [sp, #276]	; 0x114
 800cdaa:	6862      	ldr	r2, [r4, #4]
 800cdac:	3301      	adds	r3, #1
 800cdae:	3a01      	subs	r2, #1
 800cdb0:	6062      	str	r2, [r4, #4]
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	e7e9      	b.n	800cd8a <__ssvfiscanf_r+0x4a>
 800cdb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cdb8:	4621      	mov	r1, r4
 800cdba:	4630      	mov	r0, r6
 800cdbc:	4798      	blx	r3
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d0e6      	beq.n	800cd90 <__ssvfiscanf_r+0x50>
 800cdc2:	e7ed      	b.n	800cda0 <__ssvfiscanf_r+0x60>
 800cdc4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800cdc8:	f040 8082 	bne.w	800ced0 <__ssvfiscanf_r+0x190>
 800cdcc:	9343      	str	r3, [sp, #268]	; 0x10c
 800cdce:	9341      	str	r3, [sp, #260]	; 0x104
 800cdd0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800cdd4:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd6:	d103      	bne.n	800cde0 <__ssvfiscanf_r+0xa0>
 800cdd8:	2310      	movs	r3, #16
 800cdda:	9341      	str	r3, [sp, #260]	; 0x104
 800cddc:	f10a 0502 	add.w	r5, sl, #2
 800cde0:	46aa      	mov	sl, r5
 800cde2:	f815 1b01 	ldrb.w	r1, [r5], #1
 800cde6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cdea:	2a09      	cmp	r2, #9
 800cdec:	d922      	bls.n	800ce34 <__ssvfiscanf_r+0xf4>
 800cdee:	2203      	movs	r2, #3
 800cdf0:	4879      	ldr	r0, [pc, #484]	; (800cfd8 <__ssvfiscanf_r+0x298>)
 800cdf2:	f7f3 f9fd 	bl	80001f0 <memchr>
 800cdf6:	b138      	cbz	r0, 800ce08 <__ssvfiscanf_r+0xc8>
 800cdf8:	eba0 0309 	sub.w	r3, r0, r9
 800cdfc:	2001      	movs	r0, #1
 800cdfe:	4098      	lsls	r0, r3
 800ce00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ce02:	4318      	orrs	r0, r3
 800ce04:	9041      	str	r0, [sp, #260]	; 0x104
 800ce06:	46aa      	mov	sl, r5
 800ce08:	f89a 3000 	ldrb.w	r3, [sl]
 800ce0c:	2b67      	cmp	r3, #103	; 0x67
 800ce0e:	f10a 0501 	add.w	r5, sl, #1
 800ce12:	d82b      	bhi.n	800ce6c <__ssvfiscanf_r+0x12c>
 800ce14:	2b65      	cmp	r3, #101	; 0x65
 800ce16:	f080 809f 	bcs.w	800cf58 <__ssvfiscanf_r+0x218>
 800ce1a:	2b47      	cmp	r3, #71	; 0x47
 800ce1c:	d810      	bhi.n	800ce40 <__ssvfiscanf_r+0x100>
 800ce1e:	2b45      	cmp	r3, #69	; 0x45
 800ce20:	f080 809a 	bcs.w	800cf58 <__ssvfiscanf_r+0x218>
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d06c      	beq.n	800cf02 <__ssvfiscanf_r+0x1c2>
 800ce28:	2b25      	cmp	r3, #37	; 0x25
 800ce2a:	d051      	beq.n	800ced0 <__ssvfiscanf_r+0x190>
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ce30:	9742      	str	r7, [sp, #264]	; 0x108
 800ce32:	e027      	b.n	800ce84 <__ssvfiscanf_r+0x144>
 800ce34:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ce36:	fb07 1303 	mla	r3, r7, r3, r1
 800ce3a:	3b30      	subs	r3, #48	; 0x30
 800ce3c:	9343      	str	r3, [sp, #268]	; 0x10c
 800ce3e:	e7cf      	b.n	800cde0 <__ssvfiscanf_r+0xa0>
 800ce40:	2b5b      	cmp	r3, #91	; 0x5b
 800ce42:	d06a      	beq.n	800cf1a <__ssvfiscanf_r+0x1da>
 800ce44:	d80c      	bhi.n	800ce60 <__ssvfiscanf_r+0x120>
 800ce46:	2b58      	cmp	r3, #88	; 0x58
 800ce48:	d1f0      	bne.n	800ce2c <__ssvfiscanf_r+0xec>
 800ce4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ce4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce50:	9241      	str	r2, [sp, #260]	; 0x104
 800ce52:	2210      	movs	r2, #16
 800ce54:	9242      	str	r2, [sp, #264]	; 0x108
 800ce56:	2b6e      	cmp	r3, #110	; 0x6e
 800ce58:	bf8c      	ite	hi
 800ce5a:	2304      	movhi	r3, #4
 800ce5c:	2303      	movls	r3, #3
 800ce5e:	e010      	b.n	800ce82 <__ssvfiscanf_r+0x142>
 800ce60:	2b63      	cmp	r3, #99	; 0x63
 800ce62:	d065      	beq.n	800cf30 <__ssvfiscanf_r+0x1f0>
 800ce64:	2b64      	cmp	r3, #100	; 0x64
 800ce66:	d1e1      	bne.n	800ce2c <__ssvfiscanf_r+0xec>
 800ce68:	9742      	str	r7, [sp, #264]	; 0x108
 800ce6a:	e7f4      	b.n	800ce56 <__ssvfiscanf_r+0x116>
 800ce6c:	2b70      	cmp	r3, #112	; 0x70
 800ce6e:	d04b      	beq.n	800cf08 <__ssvfiscanf_r+0x1c8>
 800ce70:	d826      	bhi.n	800cec0 <__ssvfiscanf_r+0x180>
 800ce72:	2b6e      	cmp	r3, #110	; 0x6e
 800ce74:	d062      	beq.n	800cf3c <__ssvfiscanf_r+0x1fc>
 800ce76:	d84c      	bhi.n	800cf12 <__ssvfiscanf_r+0x1d2>
 800ce78:	2b69      	cmp	r3, #105	; 0x69
 800ce7a:	d1d7      	bne.n	800ce2c <__ssvfiscanf_r+0xec>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	9342      	str	r3, [sp, #264]	; 0x108
 800ce80:	2303      	movs	r3, #3
 800ce82:	9347      	str	r3, [sp, #284]	; 0x11c
 800ce84:	6863      	ldr	r3, [r4, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	dd68      	ble.n	800cf5c <__ssvfiscanf_r+0x21c>
 800ce8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ce8c:	0659      	lsls	r1, r3, #25
 800ce8e:	d407      	bmi.n	800cea0 <__ssvfiscanf_r+0x160>
 800ce90:	f7ff f8ea 	bl	800c068 <__locale_ctype_ptr>
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	781a      	ldrb	r2, [r3, #0]
 800ce98:	4410      	add	r0, r2
 800ce9a:	7842      	ldrb	r2, [r0, #1]
 800ce9c:	0712      	lsls	r2, r2, #28
 800ce9e:	d464      	bmi.n	800cf6a <__ssvfiscanf_r+0x22a>
 800cea0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	dc73      	bgt.n	800cf8e <__ssvfiscanf_r+0x24e>
 800cea6:	466b      	mov	r3, sp
 800cea8:	4622      	mov	r2, r4
 800ceaa:	a941      	add	r1, sp, #260	; 0x104
 800ceac:	4630      	mov	r0, r6
 800ceae:	f000 f9d7 	bl	800d260 <_scanf_chars>
 800ceb2:	2801      	cmp	r0, #1
 800ceb4:	f000 8089 	beq.w	800cfca <__ssvfiscanf_r+0x28a>
 800ceb8:	2802      	cmp	r0, #2
 800ceba:	f47f af71 	bne.w	800cda0 <__ssvfiscanf_r+0x60>
 800cebe:	e01d      	b.n	800cefc <__ssvfiscanf_r+0x1bc>
 800cec0:	2b75      	cmp	r3, #117	; 0x75
 800cec2:	d0d1      	beq.n	800ce68 <__ssvfiscanf_r+0x128>
 800cec4:	2b78      	cmp	r3, #120	; 0x78
 800cec6:	d0c0      	beq.n	800ce4a <__ssvfiscanf_r+0x10a>
 800cec8:	2b73      	cmp	r3, #115	; 0x73
 800ceca:	d1af      	bne.n	800ce2c <__ssvfiscanf_r+0xec>
 800cecc:	2302      	movs	r3, #2
 800cece:	e7d8      	b.n	800ce82 <__ssvfiscanf_r+0x142>
 800ced0:	6863      	ldr	r3, [r4, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	dd0c      	ble.n	800cef0 <__ssvfiscanf_r+0x1b0>
 800ced6:	6823      	ldr	r3, [r4, #0]
 800ced8:	781a      	ldrb	r2, [r3, #0]
 800ceda:	455a      	cmp	r2, fp
 800cedc:	d175      	bne.n	800cfca <__ssvfiscanf_r+0x28a>
 800cede:	3301      	adds	r3, #1
 800cee0:	6862      	ldr	r2, [r4, #4]
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cee6:	3a01      	subs	r2, #1
 800cee8:	3301      	adds	r3, #1
 800ceea:	6062      	str	r2, [r4, #4]
 800ceec:	9345      	str	r3, [sp, #276]	; 0x114
 800ceee:	e757      	b.n	800cda0 <__ssvfiscanf_r+0x60>
 800cef0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cef2:	4621      	mov	r1, r4
 800cef4:	4630      	mov	r0, r6
 800cef6:	4798      	blx	r3
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d0ec      	beq.n	800ced6 <__ssvfiscanf_r+0x196>
 800cefc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cefe:	2800      	cmp	r0, #0
 800cf00:	d159      	bne.n	800cfb6 <__ssvfiscanf_r+0x276>
 800cf02:	f04f 30ff 	mov.w	r0, #4294967295
 800cf06:	e05c      	b.n	800cfc2 <__ssvfiscanf_r+0x282>
 800cf08:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cf0a:	f042 0220 	orr.w	r2, r2, #32
 800cf0e:	9241      	str	r2, [sp, #260]	; 0x104
 800cf10:	e79b      	b.n	800ce4a <__ssvfiscanf_r+0x10a>
 800cf12:	2308      	movs	r3, #8
 800cf14:	9342      	str	r3, [sp, #264]	; 0x108
 800cf16:	2304      	movs	r3, #4
 800cf18:	e7b3      	b.n	800ce82 <__ssvfiscanf_r+0x142>
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	f000 fb09 	bl	800d534 <__sccl>
 800cf22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cf24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf28:	9341      	str	r3, [sp, #260]	; 0x104
 800cf2a:	4605      	mov	r5, r0
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e7a8      	b.n	800ce82 <__ssvfiscanf_r+0x142>
 800cf30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cf32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf36:	9341      	str	r3, [sp, #260]	; 0x104
 800cf38:	2300      	movs	r3, #0
 800cf3a:	e7a2      	b.n	800ce82 <__ssvfiscanf_r+0x142>
 800cf3c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cf3e:	06c3      	lsls	r3, r0, #27
 800cf40:	f53f af2e 	bmi.w	800cda0 <__ssvfiscanf_r+0x60>
 800cf44:	9b00      	ldr	r3, [sp, #0]
 800cf46:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cf48:	1d19      	adds	r1, r3, #4
 800cf4a:	9100      	str	r1, [sp, #0]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	07c0      	lsls	r0, r0, #31
 800cf50:	bf4c      	ite	mi
 800cf52:	801a      	strhmi	r2, [r3, #0]
 800cf54:	601a      	strpl	r2, [r3, #0]
 800cf56:	e723      	b.n	800cda0 <__ssvfiscanf_r+0x60>
 800cf58:	2305      	movs	r3, #5
 800cf5a:	e792      	b.n	800ce82 <__ssvfiscanf_r+0x142>
 800cf5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cf5e:	4621      	mov	r1, r4
 800cf60:	4630      	mov	r0, r6
 800cf62:	4798      	blx	r3
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d090      	beq.n	800ce8a <__ssvfiscanf_r+0x14a>
 800cf68:	e7c8      	b.n	800cefc <__ssvfiscanf_r+0x1bc>
 800cf6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cf6c:	3201      	adds	r2, #1
 800cf6e:	9245      	str	r2, [sp, #276]	; 0x114
 800cf70:	6862      	ldr	r2, [r4, #4]
 800cf72:	3a01      	subs	r2, #1
 800cf74:	2a00      	cmp	r2, #0
 800cf76:	6062      	str	r2, [r4, #4]
 800cf78:	dd02      	ble.n	800cf80 <__ssvfiscanf_r+0x240>
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	6023      	str	r3, [r4, #0]
 800cf7e:	e787      	b.n	800ce90 <__ssvfiscanf_r+0x150>
 800cf80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cf82:	4621      	mov	r1, r4
 800cf84:	4630      	mov	r0, r6
 800cf86:	4798      	blx	r3
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d081      	beq.n	800ce90 <__ssvfiscanf_r+0x150>
 800cf8c:	e7b6      	b.n	800cefc <__ssvfiscanf_r+0x1bc>
 800cf8e:	2b04      	cmp	r3, #4
 800cf90:	dc06      	bgt.n	800cfa0 <__ssvfiscanf_r+0x260>
 800cf92:	466b      	mov	r3, sp
 800cf94:	4622      	mov	r2, r4
 800cf96:	a941      	add	r1, sp, #260	; 0x104
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f000 f9c5 	bl	800d328 <_scanf_i>
 800cf9e:	e788      	b.n	800ceb2 <__ssvfiscanf_r+0x172>
 800cfa0:	4b0e      	ldr	r3, [pc, #56]	; (800cfdc <__ssvfiscanf_r+0x29c>)
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f43f aefc 	beq.w	800cda0 <__ssvfiscanf_r+0x60>
 800cfa8:	466b      	mov	r3, sp
 800cfaa:	4622      	mov	r2, r4
 800cfac:	a941      	add	r1, sp, #260	; 0x104
 800cfae:	4630      	mov	r0, r6
 800cfb0:	f7fc fac8 	bl	8009544 <_scanf_float>
 800cfb4:	e77d      	b.n	800ceb2 <__ssvfiscanf_r+0x172>
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cfbc:	bf18      	it	ne
 800cfbe:	f04f 30ff 	movne.w	r0, #4294967295
 800cfc2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800cfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfca:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cfcc:	e7f9      	b.n	800cfc2 <__ssvfiscanf_r+0x282>
 800cfce:	bf00      	nop
 800cfd0:	0800cc8d 	.word	0x0800cc8d
 800cfd4:	0800cd07 	.word	0x0800cd07
 800cfd8:	080106ba 	.word	0x080106ba
 800cfdc:	08009545 	.word	0x08009545

0800cfe0 <__sfputc_r>:
 800cfe0:	6893      	ldr	r3, [r2, #8]
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	b410      	push	{r4}
 800cfe8:	6093      	str	r3, [r2, #8]
 800cfea:	da08      	bge.n	800cffe <__sfputc_r+0x1e>
 800cfec:	6994      	ldr	r4, [r2, #24]
 800cfee:	42a3      	cmp	r3, r4
 800cff0:	db01      	blt.n	800cff6 <__sfputc_r+0x16>
 800cff2:	290a      	cmp	r1, #10
 800cff4:	d103      	bne.n	800cffe <__sfputc_r+0x1e>
 800cff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cffa:	f7fd bc6b 	b.w	800a8d4 <__swbuf_r>
 800cffe:	6813      	ldr	r3, [r2, #0]
 800d000:	1c58      	adds	r0, r3, #1
 800d002:	6010      	str	r0, [r2, #0]
 800d004:	7019      	strb	r1, [r3, #0]
 800d006:	4608      	mov	r0, r1
 800d008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d00c:	4770      	bx	lr

0800d00e <__sfputs_r>:
 800d00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d010:	4606      	mov	r6, r0
 800d012:	460f      	mov	r7, r1
 800d014:	4614      	mov	r4, r2
 800d016:	18d5      	adds	r5, r2, r3
 800d018:	42ac      	cmp	r4, r5
 800d01a:	d101      	bne.n	800d020 <__sfputs_r+0x12>
 800d01c:	2000      	movs	r0, #0
 800d01e:	e007      	b.n	800d030 <__sfputs_r+0x22>
 800d020:	463a      	mov	r2, r7
 800d022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d026:	4630      	mov	r0, r6
 800d028:	f7ff ffda 	bl	800cfe0 <__sfputc_r>
 800d02c:	1c43      	adds	r3, r0, #1
 800d02e:	d1f3      	bne.n	800d018 <__sfputs_r+0xa>
 800d030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d034 <_vfiprintf_r>:
 800d034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d038:	460c      	mov	r4, r1
 800d03a:	b09d      	sub	sp, #116	; 0x74
 800d03c:	4617      	mov	r7, r2
 800d03e:	461d      	mov	r5, r3
 800d040:	4606      	mov	r6, r0
 800d042:	b118      	cbz	r0, 800d04c <_vfiprintf_r+0x18>
 800d044:	6983      	ldr	r3, [r0, #24]
 800d046:	b90b      	cbnz	r3, 800d04c <_vfiprintf_r+0x18>
 800d048:	f7fe fc5a 	bl	800b900 <__sinit>
 800d04c:	4b7c      	ldr	r3, [pc, #496]	; (800d240 <_vfiprintf_r+0x20c>)
 800d04e:	429c      	cmp	r4, r3
 800d050:	d158      	bne.n	800d104 <_vfiprintf_r+0xd0>
 800d052:	6874      	ldr	r4, [r6, #4]
 800d054:	89a3      	ldrh	r3, [r4, #12]
 800d056:	0718      	lsls	r0, r3, #28
 800d058:	d55e      	bpl.n	800d118 <_vfiprintf_r+0xe4>
 800d05a:	6923      	ldr	r3, [r4, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d05b      	beq.n	800d118 <_vfiprintf_r+0xe4>
 800d060:	2300      	movs	r3, #0
 800d062:	9309      	str	r3, [sp, #36]	; 0x24
 800d064:	2320      	movs	r3, #32
 800d066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d06a:	2330      	movs	r3, #48	; 0x30
 800d06c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d070:	9503      	str	r5, [sp, #12]
 800d072:	f04f 0b01 	mov.w	fp, #1
 800d076:	46b8      	mov	r8, r7
 800d078:	4645      	mov	r5, r8
 800d07a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d07e:	b10b      	cbz	r3, 800d084 <_vfiprintf_r+0x50>
 800d080:	2b25      	cmp	r3, #37	; 0x25
 800d082:	d154      	bne.n	800d12e <_vfiprintf_r+0xfa>
 800d084:	ebb8 0a07 	subs.w	sl, r8, r7
 800d088:	d00b      	beq.n	800d0a2 <_vfiprintf_r+0x6e>
 800d08a:	4653      	mov	r3, sl
 800d08c:	463a      	mov	r2, r7
 800d08e:	4621      	mov	r1, r4
 800d090:	4630      	mov	r0, r6
 800d092:	f7ff ffbc 	bl	800d00e <__sfputs_r>
 800d096:	3001      	adds	r0, #1
 800d098:	f000 80c2 	beq.w	800d220 <_vfiprintf_r+0x1ec>
 800d09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09e:	4453      	add	r3, sl
 800d0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d0a2:	f898 3000 	ldrb.w	r3, [r8]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 80ba 	beq.w	800d220 <_vfiprintf_r+0x1ec>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0b6:	9304      	str	r3, [sp, #16]
 800d0b8:	9307      	str	r3, [sp, #28]
 800d0ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0be:	931a      	str	r3, [sp, #104]	; 0x68
 800d0c0:	46a8      	mov	r8, r5
 800d0c2:	2205      	movs	r2, #5
 800d0c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d0c8:	485e      	ldr	r0, [pc, #376]	; (800d244 <_vfiprintf_r+0x210>)
 800d0ca:	f7f3 f891 	bl	80001f0 <memchr>
 800d0ce:	9b04      	ldr	r3, [sp, #16]
 800d0d0:	bb78      	cbnz	r0, 800d132 <_vfiprintf_r+0xfe>
 800d0d2:	06d9      	lsls	r1, r3, #27
 800d0d4:	bf44      	itt	mi
 800d0d6:	2220      	movmi	r2, #32
 800d0d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d0dc:	071a      	lsls	r2, r3, #28
 800d0de:	bf44      	itt	mi
 800d0e0:	222b      	movmi	r2, #43	; 0x2b
 800d0e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d0e6:	782a      	ldrb	r2, [r5, #0]
 800d0e8:	2a2a      	cmp	r2, #42	; 0x2a
 800d0ea:	d02a      	beq.n	800d142 <_vfiprintf_r+0x10e>
 800d0ec:	9a07      	ldr	r2, [sp, #28]
 800d0ee:	46a8      	mov	r8, r5
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	250a      	movs	r5, #10
 800d0f4:	4641      	mov	r1, r8
 800d0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0fa:	3b30      	subs	r3, #48	; 0x30
 800d0fc:	2b09      	cmp	r3, #9
 800d0fe:	d969      	bls.n	800d1d4 <_vfiprintf_r+0x1a0>
 800d100:	b360      	cbz	r0, 800d15c <_vfiprintf_r+0x128>
 800d102:	e024      	b.n	800d14e <_vfiprintf_r+0x11a>
 800d104:	4b50      	ldr	r3, [pc, #320]	; (800d248 <_vfiprintf_r+0x214>)
 800d106:	429c      	cmp	r4, r3
 800d108:	d101      	bne.n	800d10e <_vfiprintf_r+0xda>
 800d10a:	68b4      	ldr	r4, [r6, #8]
 800d10c:	e7a2      	b.n	800d054 <_vfiprintf_r+0x20>
 800d10e:	4b4f      	ldr	r3, [pc, #316]	; (800d24c <_vfiprintf_r+0x218>)
 800d110:	429c      	cmp	r4, r3
 800d112:	bf08      	it	eq
 800d114:	68f4      	ldreq	r4, [r6, #12]
 800d116:	e79d      	b.n	800d054 <_vfiprintf_r+0x20>
 800d118:	4621      	mov	r1, r4
 800d11a:	4630      	mov	r0, r6
 800d11c:	f7fd fc3e 	bl	800a99c <__swsetup_r>
 800d120:	2800      	cmp	r0, #0
 800d122:	d09d      	beq.n	800d060 <_vfiprintf_r+0x2c>
 800d124:	f04f 30ff 	mov.w	r0, #4294967295
 800d128:	b01d      	add	sp, #116	; 0x74
 800d12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d12e:	46a8      	mov	r8, r5
 800d130:	e7a2      	b.n	800d078 <_vfiprintf_r+0x44>
 800d132:	4a44      	ldr	r2, [pc, #272]	; (800d244 <_vfiprintf_r+0x210>)
 800d134:	1a80      	subs	r0, r0, r2
 800d136:	fa0b f000 	lsl.w	r0, fp, r0
 800d13a:	4318      	orrs	r0, r3
 800d13c:	9004      	str	r0, [sp, #16]
 800d13e:	4645      	mov	r5, r8
 800d140:	e7be      	b.n	800d0c0 <_vfiprintf_r+0x8c>
 800d142:	9a03      	ldr	r2, [sp, #12]
 800d144:	1d11      	adds	r1, r2, #4
 800d146:	6812      	ldr	r2, [r2, #0]
 800d148:	9103      	str	r1, [sp, #12]
 800d14a:	2a00      	cmp	r2, #0
 800d14c:	db01      	blt.n	800d152 <_vfiprintf_r+0x11e>
 800d14e:	9207      	str	r2, [sp, #28]
 800d150:	e004      	b.n	800d15c <_vfiprintf_r+0x128>
 800d152:	4252      	negs	r2, r2
 800d154:	f043 0302 	orr.w	r3, r3, #2
 800d158:	9207      	str	r2, [sp, #28]
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	f898 3000 	ldrb.w	r3, [r8]
 800d160:	2b2e      	cmp	r3, #46	; 0x2e
 800d162:	d10e      	bne.n	800d182 <_vfiprintf_r+0x14e>
 800d164:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d168:	2b2a      	cmp	r3, #42	; 0x2a
 800d16a:	d138      	bne.n	800d1de <_vfiprintf_r+0x1aa>
 800d16c:	9b03      	ldr	r3, [sp, #12]
 800d16e:	1d1a      	adds	r2, r3, #4
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	9203      	str	r2, [sp, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	bfb8      	it	lt
 800d178:	f04f 33ff 	movlt.w	r3, #4294967295
 800d17c:	f108 0802 	add.w	r8, r8, #2
 800d180:	9305      	str	r3, [sp, #20]
 800d182:	4d33      	ldr	r5, [pc, #204]	; (800d250 <_vfiprintf_r+0x21c>)
 800d184:	f898 1000 	ldrb.w	r1, [r8]
 800d188:	2203      	movs	r2, #3
 800d18a:	4628      	mov	r0, r5
 800d18c:	f7f3 f830 	bl	80001f0 <memchr>
 800d190:	b140      	cbz	r0, 800d1a4 <_vfiprintf_r+0x170>
 800d192:	2340      	movs	r3, #64	; 0x40
 800d194:	1b40      	subs	r0, r0, r5
 800d196:	fa03 f000 	lsl.w	r0, r3, r0
 800d19a:	9b04      	ldr	r3, [sp, #16]
 800d19c:	4303      	orrs	r3, r0
 800d19e:	f108 0801 	add.w	r8, r8, #1
 800d1a2:	9304      	str	r3, [sp, #16]
 800d1a4:	f898 1000 	ldrb.w	r1, [r8]
 800d1a8:	482a      	ldr	r0, [pc, #168]	; (800d254 <_vfiprintf_r+0x220>)
 800d1aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1ae:	2206      	movs	r2, #6
 800d1b0:	f108 0701 	add.w	r7, r8, #1
 800d1b4:	f7f3 f81c 	bl	80001f0 <memchr>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d037      	beq.n	800d22c <_vfiprintf_r+0x1f8>
 800d1bc:	4b26      	ldr	r3, [pc, #152]	; (800d258 <_vfiprintf_r+0x224>)
 800d1be:	bb1b      	cbnz	r3, 800d208 <_vfiprintf_r+0x1d4>
 800d1c0:	9b03      	ldr	r3, [sp, #12]
 800d1c2:	3307      	adds	r3, #7
 800d1c4:	f023 0307 	bic.w	r3, r3, #7
 800d1c8:	3308      	adds	r3, #8
 800d1ca:	9303      	str	r3, [sp, #12]
 800d1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ce:	444b      	add	r3, r9
 800d1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d1d2:	e750      	b.n	800d076 <_vfiprintf_r+0x42>
 800d1d4:	fb05 3202 	mla	r2, r5, r2, r3
 800d1d8:	2001      	movs	r0, #1
 800d1da:	4688      	mov	r8, r1
 800d1dc:	e78a      	b.n	800d0f4 <_vfiprintf_r+0xc0>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f108 0801 	add.w	r8, r8, #1
 800d1e4:	9305      	str	r3, [sp, #20]
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	250a      	movs	r5, #10
 800d1ea:	4640      	mov	r0, r8
 800d1ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1f0:	3a30      	subs	r2, #48	; 0x30
 800d1f2:	2a09      	cmp	r2, #9
 800d1f4:	d903      	bls.n	800d1fe <_vfiprintf_r+0x1ca>
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d0c3      	beq.n	800d182 <_vfiprintf_r+0x14e>
 800d1fa:	9105      	str	r1, [sp, #20]
 800d1fc:	e7c1      	b.n	800d182 <_vfiprintf_r+0x14e>
 800d1fe:	fb05 2101 	mla	r1, r5, r1, r2
 800d202:	2301      	movs	r3, #1
 800d204:	4680      	mov	r8, r0
 800d206:	e7f0      	b.n	800d1ea <_vfiprintf_r+0x1b6>
 800d208:	ab03      	add	r3, sp, #12
 800d20a:	9300      	str	r3, [sp, #0]
 800d20c:	4622      	mov	r2, r4
 800d20e:	4b13      	ldr	r3, [pc, #76]	; (800d25c <_vfiprintf_r+0x228>)
 800d210:	a904      	add	r1, sp, #16
 800d212:	4630      	mov	r0, r6
 800d214:	f7fb fdce 	bl	8008db4 <_printf_float>
 800d218:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d21c:	4681      	mov	r9, r0
 800d21e:	d1d5      	bne.n	800d1cc <_vfiprintf_r+0x198>
 800d220:	89a3      	ldrh	r3, [r4, #12]
 800d222:	065b      	lsls	r3, r3, #25
 800d224:	f53f af7e 	bmi.w	800d124 <_vfiprintf_r+0xf0>
 800d228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d22a:	e77d      	b.n	800d128 <_vfiprintf_r+0xf4>
 800d22c:	ab03      	add	r3, sp, #12
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	4622      	mov	r2, r4
 800d232:	4b0a      	ldr	r3, [pc, #40]	; (800d25c <_vfiprintf_r+0x228>)
 800d234:	a904      	add	r1, sp, #16
 800d236:	4630      	mov	r0, r6
 800d238:	f7fc f872 	bl	8009320 <_printf_i>
 800d23c:	e7ec      	b.n	800d218 <_vfiprintf_r+0x1e4>
 800d23e:	bf00      	nop
 800d240:	08010568 	.word	0x08010568
 800d244:	080106b4 	.word	0x080106b4
 800d248:	08010588 	.word	0x08010588
 800d24c:	08010548 	.word	0x08010548
 800d250:	080106ba 	.word	0x080106ba
 800d254:	080106be 	.word	0x080106be
 800d258:	08008db5 	.word	0x08008db5
 800d25c:	0800d00f 	.word	0x0800d00f

0800d260 <_scanf_chars>:
 800d260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d264:	4615      	mov	r5, r2
 800d266:	688a      	ldr	r2, [r1, #8]
 800d268:	4680      	mov	r8, r0
 800d26a:	460c      	mov	r4, r1
 800d26c:	b932      	cbnz	r2, 800d27c <_scanf_chars+0x1c>
 800d26e:	698a      	ldr	r2, [r1, #24]
 800d270:	2a00      	cmp	r2, #0
 800d272:	bf14      	ite	ne
 800d274:	f04f 32ff 	movne.w	r2, #4294967295
 800d278:	2201      	moveq	r2, #1
 800d27a:	608a      	str	r2, [r1, #8]
 800d27c:	6822      	ldr	r2, [r4, #0]
 800d27e:	06d1      	lsls	r1, r2, #27
 800d280:	bf5f      	itttt	pl
 800d282:	681a      	ldrpl	r2, [r3, #0]
 800d284:	1d11      	addpl	r1, r2, #4
 800d286:	6019      	strpl	r1, [r3, #0]
 800d288:	6817      	ldrpl	r7, [r2, #0]
 800d28a:	2600      	movs	r6, #0
 800d28c:	69a3      	ldr	r3, [r4, #24]
 800d28e:	b1db      	cbz	r3, 800d2c8 <_scanf_chars+0x68>
 800d290:	2b01      	cmp	r3, #1
 800d292:	d107      	bne.n	800d2a4 <_scanf_chars+0x44>
 800d294:	682b      	ldr	r3, [r5, #0]
 800d296:	6962      	ldr	r2, [r4, #20]
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	5cd3      	ldrb	r3, [r2, r3]
 800d29c:	b9a3      	cbnz	r3, 800d2c8 <_scanf_chars+0x68>
 800d29e:	2e00      	cmp	r6, #0
 800d2a0:	d132      	bne.n	800d308 <_scanf_chars+0xa8>
 800d2a2:	e006      	b.n	800d2b2 <_scanf_chars+0x52>
 800d2a4:	2b02      	cmp	r3, #2
 800d2a6:	d007      	beq.n	800d2b8 <_scanf_chars+0x58>
 800d2a8:	2e00      	cmp	r6, #0
 800d2aa:	d12d      	bne.n	800d308 <_scanf_chars+0xa8>
 800d2ac:	69a3      	ldr	r3, [r4, #24]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d12a      	bne.n	800d308 <_scanf_chars+0xa8>
 800d2b2:	2001      	movs	r0, #1
 800d2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b8:	f7fe fed6 	bl	800c068 <__locale_ctype_ptr>
 800d2bc:	682b      	ldr	r3, [r5, #0]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	4418      	add	r0, r3
 800d2c2:	7843      	ldrb	r3, [r0, #1]
 800d2c4:	071b      	lsls	r3, r3, #28
 800d2c6:	d4ef      	bmi.n	800d2a8 <_scanf_chars+0x48>
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	06da      	lsls	r2, r3, #27
 800d2cc:	bf5e      	ittt	pl
 800d2ce:	682b      	ldrpl	r3, [r5, #0]
 800d2d0:	781b      	ldrbpl	r3, [r3, #0]
 800d2d2:	703b      	strbpl	r3, [r7, #0]
 800d2d4:	682a      	ldr	r2, [r5, #0]
 800d2d6:	686b      	ldr	r3, [r5, #4]
 800d2d8:	f102 0201 	add.w	r2, r2, #1
 800d2dc:	602a      	str	r2, [r5, #0]
 800d2de:	68a2      	ldr	r2, [r4, #8]
 800d2e0:	f103 33ff 	add.w	r3, r3, #4294967295
 800d2e4:	f102 32ff 	add.w	r2, r2, #4294967295
 800d2e8:	606b      	str	r3, [r5, #4]
 800d2ea:	f106 0601 	add.w	r6, r6, #1
 800d2ee:	bf58      	it	pl
 800d2f0:	3701      	addpl	r7, #1
 800d2f2:	60a2      	str	r2, [r4, #8]
 800d2f4:	b142      	cbz	r2, 800d308 <_scanf_chars+0xa8>
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	dcc8      	bgt.n	800d28c <_scanf_chars+0x2c>
 800d2fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d2fe:	4629      	mov	r1, r5
 800d300:	4640      	mov	r0, r8
 800d302:	4798      	blx	r3
 800d304:	2800      	cmp	r0, #0
 800d306:	d0c1      	beq.n	800d28c <_scanf_chars+0x2c>
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	f013 0310 	ands.w	r3, r3, #16
 800d30e:	d105      	bne.n	800d31c <_scanf_chars+0xbc>
 800d310:	68e2      	ldr	r2, [r4, #12]
 800d312:	3201      	adds	r2, #1
 800d314:	60e2      	str	r2, [r4, #12]
 800d316:	69a2      	ldr	r2, [r4, #24]
 800d318:	b102      	cbz	r2, 800d31c <_scanf_chars+0xbc>
 800d31a:	703b      	strb	r3, [r7, #0]
 800d31c:	6923      	ldr	r3, [r4, #16]
 800d31e:	441e      	add	r6, r3
 800d320:	6126      	str	r6, [r4, #16]
 800d322:	2000      	movs	r0, #0
 800d324:	e7c6      	b.n	800d2b4 <_scanf_chars+0x54>
	...

0800d328 <_scanf_i>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	469a      	mov	sl, r3
 800d32e:	4b74      	ldr	r3, [pc, #464]	; (800d500 <_scanf_i+0x1d8>)
 800d330:	460c      	mov	r4, r1
 800d332:	4683      	mov	fp, r0
 800d334:	4616      	mov	r6, r2
 800d336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d33a:	b087      	sub	sp, #28
 800d33c:	ab03      	add	r3, sp, #12
 800d33e:	68a7      	ldr	r7, [r4, #8]
 800d340:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d344:	4b6f      	ldr	r3, [pc, #444]	; (800d504 <_scanf_i+0x1dc>)
 800d346:	69a1      	ldr	r1, [r4, #24]
 800d348:	4a6f      	ldr	r2, [pc, #444]	; (800d508 <_scanf_i+0x1e0>)
 800d34a:	2903      	cmp	r1, #3
 800d34c:	bf08      	it	eq
 800d34e:	461a      	moveq	r2, r3
 800d350:	1e7b      	subs	r3, r7, #1
 800d352:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800d356:	bf84      	itt	hi
 800d358:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d35c:	60a3      	strhi	r3, [r4, #8]
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	9200      	str	r2, [sp, #0]
 800d362:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d366:	bf88      	it	hi
 800d368:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d36c:	f104 091c 	add.w	r9, r4, #28
 800d370:	6023      	str	r3, [r4, #0]
 800d372:	bf8c      	ite	hi
 800d374:	197f      	addhi	r7, r7, r5
 800d376:	2700      	movls	r7, #0
 800d378:	464b      	mov	r3, r9
 800d37a:	f04f 0800 	mov.w	r8, #0
 800d37e:	9301      	str	r3, [sp, #4]
 800d380:	6831      	ldr	r1, [r6, #0]
 800d382:	ab03      	add	r3, sp, #12
 800d384:	2202      	movs	r2, #2
 800d386:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d38a:	7809      	ldrb	r1, [r1, #0]
 800d38c:	f7f2 ff30 	bl	80001f0 <memchr>
 800d390:	9b01      	ldr	r3, [sp, #4]
 800d392:	b330      	cbz	r0, 800d3e2 <_scanf_i+0xba>
 800d394:	f1b8 0f01 	cmp.w	r8, #1
 800d398:	d15a      	bne.n	800d450 <_scanf_i+0x128>
 800d39a:	6862      	ldr	r2, [r4, #4]
 800d39c:	b92a      	cbnz	r2, 800d3aa <_scanf_i+0x82>
 800d39e:	6822      	ldr	r2, [r4, #0]
 800d3a0:	2108      	movs	r1, #8
 800d3a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3a6:	6061      	str	r1, [r4, #4]
 800d3a8:	6022      	str	r2, [r4, #0]
 800d3aa:	6822      	ldr	r2, [r4, #0]
 800d3ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d3b0:	6022      	str	r2, [r4, #0]
 800d3b2:	68a2      	ldr	r2, [r4, #8]
 800d3b4:	1e51      	subs	r1, r2, #1
 800d3b6:	60a1      	str	r1, [r4, #8]
 800d3b8:	b19a      	cbz	r2, 800d3e2 <_scanf_i+0xba>
 800d3ba:	6832      	ldr	r2, [r6, #0]
 800d3bc:	1c51      	adds	r1, r2, #1
 800d3be:	6031      	str	r1, [r6, #0]
 800d3c0:	7812      	ldrb	r2, [r2, #0]
 800d3c2:	701a      	strb	r2, [r3, #0]
 800d3c4:	1c5d      	adds	r5, r3, #1
 800d3c6:	6873      	ldr	r3, [r6, #4]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	6073      	str	r3, [r6, #4]
 800d3ce:	dc07      	bgt.n	800d3e0 <_scanf_i+0xb8>
 800d3d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	4658      	mov	r0, fp
 800d3d8:	4798      	blx	r3
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	f040 8086 	bne.w	800d4ec <_scanf_i+0x1c4>
 800d3e0:	462b      	mov	r3, r5
 800d3e2:	f108 0801 	add.w	r8, r8, #1
 800d3e6:	f1b8 0f03 	cmp.w	r8, #3
 800d3ea:	d1c8      	bne.n	800d37e <_scanf_i+0x56>
 800d3ec:	6862      	ldr	r2, [r4, #4]
 800d3ee:	b90a      	cbnz	r2, 800d3f4 <_scanf_i+0xcc>
 800d3f0:	220a      	movs	r2, #10
 800d3f2:	6062      	str	r2, [r4, #4]
 800d3f4:	6862      	ldr	r2, [r4, #4]
 800d3f6:	4945      	ldr	r1, [pc, #276]	; (800d50c <_scanf_i+0x1e4>)
 800d3f8:	6960      	ldr	r0, [r4, #20]
 800d3fa:	9301      	str	r3, [sp, #4]
 800d3fc:	1a89      	subs	r1, r1, r2
 800d3fe:	f000 f899 	bl	800d534 <__sccl>
 800d402:	9b01      	ldr	r3, [sp, #4]
 800d404:	f04f 0800 	mov.w	r8, #0
 800d408:	461d      	mov	r5, r3
 800d40a:	68a3      	ldr	r3, [r4, #8]
 800d40c:	6822      	ldr	r2, [r4, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d03a      	beq.n	800d488 <_scanf_i+0x160>
 800d412:	6831      	ldr	r1, [r6, #0]
 800d414:	6960      	ldr	r0, [r4, #20]
 800d416:	f891 c000 	ldrb.w	ip, [r1]
 800d41a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d41e:	2800      	cmp	r0, #0
 800d420:	d032      	beq.n	800d488 <_scanf_i+0x160>
 800d422:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d426:	d121      	bne.n	800d46c <_scanf_i+0x144>
 800d428:	0510      	lsls	r0, r2, #20
 800d42a:	d51f      	bpl.n	800d46c <_scanf_i+0x144>
 800d42c:	f108 0801 	add.w	r8, r8, #1
 800d430:	b117      	cbz	r7, 800d438 <_scanf_i+0x110>
 800d432:	3301      	adds	r3, #1
 800d434:	3f01      	subs	r7, #1
 800d436:	60a3      	str	r3, [r4, #8]
 800d438:	6873      	ldr	r3, [r6, #4]
 800d43a:	3b01      	subs	r3, #1
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	6073      	str	r3, [r6, #4]
 800d440:	dd1b      	ble.n	800d47a <_scanf_i+0x152>
 800d442:	6833      	ldr	r3, [r6, #0]
 800d444:	3301      	adds	r3, #1
 800d446:	6033      	str	r3, [r6, #0]
 800d448:	68a3      	ldr	r3, [r4, #8]
 800d44a:	3b01      	subs	r3, #1
 800d44c:	60a3      	str	r3, [r4, #8]
 800d44e:	e7dc      	b.n	800d40a <_scanf_i+0xe2>
 800d450:	f1b8 0f02 	cmp.w	r8, #2
 800d454:	d1ad      	bne.n	800d3b2 <_scanf_i+0x8a>
 800d456:	6822      	ldr	r2, [r4, #0]
 800d458:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d45c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d460:	d1bf      	bne.n	800d3e2 <_scanf_i+0xba>
 800d462:	2110      	movs	r1, #16
 800d464:	6061      	str	r1, [r4, #4]
 800d466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d46a:	e7a1      	b.n	800d3b0 <_scanf_i+0x88>
 800d46c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d470:	6022      	str	r2, [r4, #0]
 800d472:	780b      	ldrb	r3, [r1, #0]
 800d474:	702b      	strb	r3, [r5, #0]
 800d476:	3501      	adds	r5, #1
 800d478:	e7de      	b.n	800d438 <_scanf_i+0x110>
 800d47a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d47e:	4631      	mov	r1, r6
 800d480:	4658      	mov	r0, fp
 800d482:	4798      	blx	r3
 800d484:	2800      	cmp	r0, #0
 800d486:	d0df      	beq.n	800d448 <_scanf_i+0x120>
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	05d9      	lsls	r1, r3, #23
 800d48c:	d50c      	bpl.n	800d4a8 <_scanf_i+0x180>
 800d48e:	454d      	cmp	r5, r9
 800d490:	d908      	bls.n	800d4a4 <_scanf_i+0x17c>
 800d492:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d496:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d49a:	4632      	mov	r2, r6
 800d49c:	4658      	mov	r0, fp
 800d49e:	4798      	blx	r3
 800d4a0:	1e6f      	subs	r7, r5, #1
 800d4a2:	463d      	mov	r5, r7
 800d4a4:	454d      	cmp	r5, r9
 800d4a6:	d029      	beq.n	800d4fc <_scanf_i+0x1d4>
 800d4a8:	6822      	ldr	r2, [r4, #0]
 800d4aa:	f012 0210 	ands.w	r2, r2, #16
 800d4ae:	d113      	bne.n	800d4d8 <_scanf_i+0x1b0>
 800d4b0:	702a      	strb	r2, [r5, #0]
 800d4b2:	6863      	ldr	r3, [r4, #4]
 800d4b4:	9e00      	ldr	r6, [sp, #0]
 800d4b6:	4649      	mov	r1, r9
 800d4b8:	4658      	mov	r0, fp
 800d4ba:	47b0      	blx	r6
 800d4bc:	f8da 3000 	ldr.w	r3, [sl]
 800d4c0:	6821      	ldr	r1, [r4, #0]
 800d4c2:	1d1a      	adds	r2, r3, #4
 800d4c4:	f8ca 2000 	str.w	r2, [sl]
 800d4c8:	f011 0f20 	tst.w	r1, #32
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	d010      	beq.n	800d4f2 <_scanf_i+0x1ca>
 800d4d0:	6018      	str	r0, [r3, #0]
 800d4d2:	68e3      	ldr	r3, [r4, #12]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	60e3      	str	r3, [r4, #12]
 800d4d8:	eba5 0509 	sub.w	r5, r5, r9
 800d4dc:	44a8      	add	r8, r5
 800d4de:	6925      	ldr	r5, [r4, #16]
 800d4e0:	4445      	add	r5, r8
 800d4e2:	6125      	str	r5, [r4, #16]
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	b007      	add	sp, #28
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	f04f 0800 	mov.w	r8, #0
 800d4f0:	e7ca      	b.n	800d488 <_scanf_i+0x160>
 800d4f2:	07ca      	lsls	r2, r1, #31
 800d4f4:	bf4c      	ite	mi
 800d4f6:	8018      	strhmi	r0, [r3, #0]
 800d4f8:	6018      	strpl	r0, [r3, #0]
 800d4fa:	e7ea      	b.n	800d4d2 <_scanf_i+0x1aa>
 800d4fc:	2001      	movs	r0, #1
 800d4fe:	e7f2      	b.n	800d4e6 <_scanf_i+0x1be>
 800d500:	08010490 	.word	0x08010490
 800d504:	0800a8b1 	.word	0x0800a8b1
 800d508:	0800d6b1 	.word	0x0800d6b1
 800d50c:	080106d5 	.word	0x080106d5

0800d510 <_read_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	4c07      	ldr	r4, [pc, #28]	; (800d530 <_read_r+0x20>)
 800d514:	4605      	mov	r5, r0
 800d516:	4608      	mov	r0, r1
 800d518:	4611      	mov	r1, r2
 800d51a:	2200      	movs	r2, #0
 800d51c:	6022      	str	r2, [r4, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	f7f4 fb5e 	bl	8001be0 <_read>
 800d524:	1c43      	adds	r3, r0, #1
 800d526:	d102      	bne.n	800d52e <_read_r+0x1e>
 800d528:	6823      	ldr	r3, [r4, #0]
 800d52a:	b103      	cbz	r3, 800d52e <_read_r+0x1e>
 800d52c:	602b      	str	r3, [r5, #0]
 800d52e:	bd38      	pop	{r3, r4, r5, pc}
 800d530:	20000f98 	.word	0x20000f98

0800d534 <__sccl>:
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	780b      	ldrb	r3, [r1, #0]
 800d538:	2b5e      	cmp	r3, #94	; 0x5e
 800d53a:	bf13      	iteet	ne
 800d53c:	1c4a      	addne	r2, r1, #1
 800d53e:	1c8a      	addeq	r2, r1, #2
 800d540:	784b      	ldrbeq	r3, [r1, #1]
 800d542:	2100      	movne	r1, #0
 800d544:	bf08      	it	eq
 800d546:	2101      	moveq	r1, #1
 800d548:	1e44      	subs	r4, r0, #1
 800d54a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800d54e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800d552:	42ac      	cmp	r4, r5
 800d554:	d1fb      	bne.n	800d54e <__sccl+0x1a>
 800d556:	b913      	cbnz	r3, 800d55e <__sccl+0x2a>
 800d558:	3a01      	subs	r2, #1
 800d55a:	4610      	mov	r0, r2
 800d55c:	bd70      	pop	{r4, r5, r6, pc}
 800d55e:	f081 0401 	eor.w	r4, r1, #1
 800d562:	54c4      	strb	r4, [r0, r3]
 800d564:	1c51      	adds	r1, r2, #1
 800d566:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800d56a:	2d2d      	cmp	r5, #45	; 0x2d
 800d56c:	f101 36ff 	add.w	r6, r1, #4294967295
 800d570:	460a      	mov	r2, r1
 800d572:	d006      	beq.n	800d582 <__sccl+0x4e>
 800d574:	2d5d      	cmp	r5, #93	; 0x5d
 800d576:	d0f0      	beq.n	800d55a <__sccl+0x26>
 800d578:	b90d      	cbnz	r5, 800d57e <__sccl+0x4a>
 800d57a:	4632      	mov	r2, r6
 800d57c:	e7ed      	b.n	800d55a <__sccl+0x26>
 800d57e:	462b      	mov	r3, r5
 800d580:	e7ef      	b.n	800d562 <__sccl+0x2e>
 800d582:	780e      	ldrb	r6, [r1, #0]
 800d584:	2e5d      	cmp	r6, #93	; 0x5d
 800d586:	d0fa      	beq.n	800d57e <__sccl+0x4a>
 800d588:	42b3      	cmp	r3, r6
 800d58a:	dcf8      	bgt.n	800d57e <__sccl+0x4a>
 800d58c:	3301      	adds	r3, #1
 800d58e:	429e      	cmp	r6, r3
 800d590:	54c4      	strb	r4, [r0, r3]
 800d592:	dcfb      	bgt.n	800d58c <__sccl+0x58>
 800d594:	3102      	adds	r1, #2
 800d596:	e7e6      	b.n	800d566 <__sccl+0x32>

0800d598 <strncmp>:
 800d598:	b510      	push	{r4, lr}
 800d59a:	b16a      	cbz	r2, 800d5b8 <strncmp+0x20>
 800d59c:	3901      	subs	r1, #1
 800d59e:	1884      	adds	r4, r0, r2
 800d5a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d103      	bne.n	800d5b4 <strncmp+0x1c>
 800d5ac:	42a0      	cmp	r0, r4
 800d5ae:	d001      	beq.n	800d5b4 <strncmp+0x1c>
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1f5      	bne.n	800d5a0 <strncmp+0x8>
 800d5b4:	1a98      	subs	r0, r3, r2
 800d5b6:	bd10      	pop	{r4, pc}
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	e7fc      	b.n	800d5b6 <strncmp+0x1e>

0800d5bc <_strtoul_l.isra.0>:
 800d5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c0:	4680      	mov	r8, r0
 800d5c2:	4689      	mov	r9, r1
 800d5c4:	4692      	mov	sl, r2
 800d5c6:	461e      	mov	r6, r3
 800d5c8:	460f      	mov	r7, r1
 800d5ca:	463d      	mov	r5, r7
 800d5cc:	9808      	ldr	r0, [sp, #32]
 800d5ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5d2:	f7fe fd45 	bl	800c060 <__locale_ctype_ptr_l>
 800d5d6:	4420      	add	r0, r4
 800d5d8:	7843      	ldrb	r3, [r0, #1]
 800d5da:	f013 0308 	ands.w	r3, r3, #8
 800d5de:	d130      	bne.n	800d642 <_strtoul_l.isra.0+0x86>
 800d5e0:	2c2d      	cmp	r4, #45	; 0x2d
 800d5e2:	d130      	bne.n	800d646 <_strtoul_l.isra.0+0x8a>
 800d5e4:	787c      	ldrb	r4, [r7, #1]
 800d5e6:	1cbd      	adds	r5, r7, #2
 800d5e8:	2101      	movs	r1, #1
 800d5ea:	2e00      	cmp	r6, #0
 800d5ec:	d05c      	beq.n	800d6a8 <_strtoul_l.isra.0+0xec>
 800d5ee:	2e10      	cmp	r6, #16
 800d5f0:	d109      	bne.n	800d606 <_strtoul_l.isra.0+0x4a>
 800d5f2:	2c30      	cmp	r4, #48	; 0x30
 800d5f4:	d107      	bne.n	800d606 <_strtoul_l.isra.0+0x4a>
 800d5f6:	782b      	ldrb	r3, [r5, #0]
 800d5f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d5fc:	2b58      	cmp	r3, #88	; 0x58
 800d5fe:	d14e      	bne.n	800d69e <_strtoul_l.isra.0+0xe2>
 800d600:	786c      	ldrb	r4, [r5, #1]
 800d602:	2610      	movs	r6, #16
 800d604:	3502      	adds	r5, #2
 800d606:	f04f 32ff 	mov.w	r2, #4294967295
 800d60a:	2300      	movs	r3, #0
 800d60c:	fbb2 f2f6 	udiv	r2, r2, r6
 800d610:	fb06 fc02 	mul.w	ip, r6, r2
 800d614:	ea6f 0c0c 	mvn.w	ip, ip
 800d618:	4618      	mov	r0, r3
 800d61a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d61e:	2f09      	cmp	r7, #9
 800d620:	d817      	bhi.n	800d652 <_strtoul_l.isra.0+0x96>
 800d622:	463c      	mov	r4, r7
 800d624:	42a6      	cmp	r6, r4
 800d626:	dd23      	ble.n	800d670 <_strtoul_l.isra.0+0xb4>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	db1e      	blt.n	800d66a <_strtoul_l.isra.0+0xae>
 800d62c:	4282      	cmp	r2, r0
 800d62e:	d31c      	bcc.n	800d66a <_strtoul_l.isra.0+0xae>
 800d630:	d101      	bne.n	800d636 <_strtoul_l.isra.0+0x7a>
 800d632:	45a4      	cmp	ip, r4
 800d634:	db19      	blt.n	800d66a <_strtoul_l.isra.0+0xae>
 800d636:	fb00 4006 	mla	r0, r0, r6, r4
 800d63a:	2301      	movs	r3, #1
 800d63c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d640:	e7eb      	b.n	800d61a <_strtoul_l.isra.0+0x5e>
 800d642:	462f      	mov	r7, r5
 800d644:	e7c1      	b.n	800d5ca <_strtoul_l.isra.0+0xe>
 800d646:	2c2b      	cmp	r4, #43	; 0x2b
 800d648:	bf04      	itt	eq
 800d64a:	1cbd      	addeq	r5, r7, #2
 800d64c:	787c      	ldrbeq	r4, [r7, #1]
 800d64e:	4619      	mov	r1, r3
 800d650:	e7cb      	b.n	800d5ea <_strtoul_l.isra.0+0x2e>
 800d652:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d656:	2f19      	cmp	r7, #25
 800d658:	d801      	bhi.n	800d65e <_strtoul_l.isra.0+0xa2>
 800d65a:	3c37      	subs	r4, #55	; 0x37
 800d65c:	e7e2      	b.n	800d624 <_strtoul_l.isra.0+0x68>
 800d65e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d662:	2f19      	cmp	r7, #25
 800d664:	d804      	bhi.n	800d670 <_strtoul_l.isra.0+0xb4>
 800d666:	3c57      	subs	r4, #87	; 0x57
 800d668:	e7dc      	b.n	800d624 <_strtoul_l.isra.0+0x68>
 800d66a:	f04f 33ff 	mov.w	r3, #4294967295
 800d66e:	e7e5      	b.n	800d63c <_strtoul_l.isra.0+0x80>
 800d670:	2b00      	cmp	r3, #0
 800d672:	da09      	bge.n	800d688 <_strtoul_l.isra.0+0xcc>
 800d674:	2322      	movs	r3, #34	; 0x22
 800d676:	f8c8 3000 	str.w	r3, [r8]
 800d67a:	f04f 30ff 	mov.w	r0, #4294967295
 800d67e:	f1ba 0f00 	cmp.w	sl, #0
 800d682:	d107      	bne.n	800d694 <_strtoul_l.isra.0+0xd8>
 800d684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d688:	b101      	cbz	r1, 800d68c <_strtoul_l.isra.0+0xd0>
 800d68a:	4240      	negs	r0, r0
 800d68c:	f1ba 0f00 	cmp.w	sl, #0
 800d690:	d0f8      	beq.n	800d684 <_strtoul_l.isra.0+0xc8>
 800d692:	b10b      	cbz	r3, 800d698 <_strtoul_l.isra.0+0xdc>
 800d694:	f105 39ff 	add.w	r9, r5, #4294967295
 800d698:	f8ca 9000 	str.w	r9, [sl]
 800d69c:	e7f2      	b.n	800d684 <_strtoul_l.isra.0+0xc8>
 800d69e:	2430      	movs	r4, #48	; 0x30
 800d6a0:	2e00      	cmp	r6, #0
 800d6a2:	d1b0      	bne.n	800d606 <_strtoul_l.isra.0+0x4a>
 800d6a4:	2608      	movs	r6, #8
 800d6a6:	e7ae      	b.n	800d606 <_strtoul_l.isra.0+0x4a>
 800d6a8:	2c30      	cmp	r4, #48	; 0x30
 800d6aa:	d0a4      	beq.n	800d5f6 <_strtoul_l.isra.0+0x3a>
 800d6ac:	260a      	movs	r6, #10
 800d6ae:	e7aa      	b.n	800d606 <_strtoul_l.isra.0+0x4a>

0800d6b0 <_strtoul_r>:
 800d6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6b2:	4c06      	ldr	r4, [pc, #24]	; (800d6cc <_strtoul_r+0x1c>)
 800d6b4:	4d06      	ldr	r5, [pc, #24]	; (800d6d0 <_strtoul_r+0x20>)
 800d6b6:	6824      	ldr	r4, [r4, #0]
 800d6b8:	6a24      	ldr	r4, [r4, #32]
 800d6ba:	2c00      	cmp	r4, #0
 800d6bc:	bf08      	it	eq
 800d6be:	462c      	moveq	r4, r5
 800d6c0:	9400      	str	r4, [sp, #0]
 800d6c2:	f7ff ff7b 	bl	800d5bc <_strtoul_l.isra.0>
 800d6c6:	b003      	add	sp, #12
 800d6c8:	bd30      	pop	{r4, r5, pc}
 800d6ca:	bf00      	nop
 800d6cc:	20000188 	.word	0x20000188
 800d6d0:	200001ec 	.word	0x200001ec

0800d6d4 <__submore>:
 800d6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d8:	460c      	mov	r4, r1
 800d6da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6e0:	4299      	cmp	r1, r3
 800d6e2:	d11d      	bne.n	800d720 <__submore+0x4c>
 800d6e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d6e8:	f7fb fa76 	bl	8008bd8 <_malloc_r>
 800d6ec:	b918      	cbnz	r0, 800d6f6 <__submore+0x22>
 800d6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6fa:	63a3      	str	r3, [r4, #56]	; 0x38
 800d6fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d700:	6360      	str	r0, [r4, #52]	; 0x34
 800d702:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d706:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d70a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d70e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d712:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d716:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d71a:	6020      	str	r0, [r4, #0]
 800d71c:	2000      	movs	r0, #0
 800d71e:	e7e8      	b.n	800d6f2 <__submore+0x1e>
 800d720:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d722:	0077      	lsls	r7, r6, #1
 800d724:	463a      	mov	r2, r7
 800d726:	f000 f858 	bl	800d7da <_realloc_r>
 800d72a:	4605      	mov	r5, r0
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d0de      	beq.n	800d6ee <__submore+0x1a>
 800d730:	eb00 0806 	add.w	r8, r0, r6
 800d734:	4601      	mov	r1, r0
 800d736:	4632      	mov	r2, r6
 800d738:	4640      	mov	r0, r8
 800d73a:	f7fe fd3b 	bl	800c1b4 <memcpy>
 800d73e:	f8c4 8000 	str.w	r8, [r4]
 800d742:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d746:	e7e9      	b.n	800d71c <__submore+0x48>

0800d748 <__ascii_wctomb>:
 800d748:	b149      	cbz	r1, 800d75e <__ascii_wctomb+0x16>
 800d74a:	2aff      	cmp	r2, #255	; 0xff
 800d74c:	bf85      	ittet	hi
 800d74e:	238a      	movhi	r3, #138	; 0x8a
 800d750:	6003      	strhi	r3, [r0, #0]
 800d752:	700a      	strbls	r2, [r1, #0]
 800d754:	f04f 30ff 	movhi.w	r0, #4294967295
 800d758:	bf98      	it	ls
 800d75a:	2001      	movls	r0, #1
 800d75c:	4770      	bx	lr
 800d75e:	4608      	mov	r0, r1
 800d760:	4770      	bx	lr
	...

0800d764 <_fstat_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	4c07      	ldr	r4, [pc, #28]	; (800d784 <_fstat_r+0x20>)
 800d768:	2300      	movs	r3, #0
 800d76a:	4605      	mov	r5, r0
 800d76c:	4608      	mov	r0, r1
 800d76e:	4611      	mov	r1, r2
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	f7f4 fa5e 	bl	8001c32 <_fstat>
 800d776:	1c43      	adds	r3, r0, #1
 800d778:	d102      	bne.n	800d780 <_fstat_r+0x1c>
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	b103      	cbz	r3, 800d780 <_fstat_r+0x1c>
 800d77e:	602b      	str	r3, [r5, #0]
 800d780:	bd38      	pop	{r3, r4, r5, pc}
 800d782:	bf00      	nop
 800d784:	20000f98 	.word	0x20000f98

0800d788 <_isatty_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	4c06      	ldr	r4, [pc, #24]	; (800d7a4 <_isatty_r+0x1c>)
 800d78c:	2300      	movs	r3, #0
 800d78e:	4605      	mov	r5, r0
 800d790:	4608      	mov	r0, r1
 800d792:	6023      	str	r3, [r4, #0]
 800d794:	f7f4 fa5d 	bl	8001c52 <_isatty>
 800d798:	1c43      	adds	r3, r0, #1
 800d79a:	d102      	bne.n	800d7a2 <_isatty_r+0x1a>
 800d79c:	6823      	ldr	r3, [r4, #0]
 800d79e:	b103      	cbz	r3, 800d7a2 <_isatty_r+0x1a>
 800d7a0:	602b      	str	r3, [r5, #0]
 800d7a2:	bd38      	pop	{r3, r4, r5, pc}
 800d7a4:	20000f98 	.word	0x20000f98

0800d7a8 <memmove>:
 800d7a8:	4288      	cmp	r0, r1
 800d7aa:	b510      	push	{r4, lr}
 800d7ac:	eb01 0302 	add.w	r3, r1, r2
 800d7b0:	d807      	bhi.n	800d7c2 <memmove+0x1a>
 800d7b2:	1e42      	subs	r2, r0, #1
 800d7b4:	4299      	cmp	r1, r3
 800d7b6:	d00a      	beq.n	800d7ce <memmove+0x26>
 800d7b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d7c0:	e7f8      	b.n	800d7b4 <memmove+0xc>
 800d7c2:	4283      	cmp	r3, r0
 800d7c4:	d9f5      	bls.n	800d7b2 <memmove+0xa>
 800d7c6:	1881      	adds	r1, r0, r2
 800d7c8:	1ad2      	subs	r2, r2, r3
 800d7ca:	42d3      	cmn	r3, r2
 800d7cc:	d100      	bne.n	800d7d0 <memmove+0x28>
 800d7ce:	bd10      	pop	{r4, pc}
 800d7d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d7d8:	e7f7      	b.n	800d7ca <memmove+0x22>

0800d7da <_realloc_r>:
 800d7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7dc:	4607      	mov	r7, r0
 800d7de:	4614      	mov	r4, r2
 800d7e0:	460e      	mov	r6, r1
 800d7e2:	b921      	cbnz	r1, 800d7ee <_realloc_r+0x14>
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d7ea:	f7fb b9f5 	b.w	8008bd8 <_malloc_r>
 800d7ee:	b922      	cbnz	r2, 800d7fa <_realloc_r+0x20>
 800d7f0:	f7fb f9a4 	bl	8008b3c <_free_r>
 800d7f4:	4625      	mov	r5, r4
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7fa:	f000 f814 	bl	800d826 <_malloc_usable_size_r>
 800d7fe:	42a0      	cmp	r0, r4
 800d800:	d20f      	bcs.n	800d822 <_realloc_r+0x48>
 800d802:	4621      	mov	r1, r4
 800d804:	4638      	mov	r0, r7
 800d806:	f7fb f9e7 	bl	8008bd8 <_malloc_r>
 800d80a:	4605      	mov	r5, r0
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d0f2      	beq.n	800d7f6 <_realloc_r+0x1c>
 800d810:	4631      	mov	r1, r6
 800d812:	4622      	mov	r2, r4
 800d814:	f7fe fcce 	bl	800c1b4 <memcpy>
 800d818:	4631      	mov	r1, r6
 800d81a:	4638      	mov	r0, r7
 800d81c:	f7fb f98e 	bl	8008b3c <_free_r>
 800d820:	e7e9      	b.n	800d7f6 <_realloc_r+0x1c>
 800d822:	4635      	mov	r5, r6
 800d824:	e7e7      	b.n	800d7f6 <_realloc_r+0x1c>

0800d826 <_malloc_usable_size_r>:
 800d826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d82a:	1f18      	subs	r0, r3, #4
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	bfbc      	itt	lt
 800d830:	580b      	ldrlt	r3, [r1, r0]
 800d832:	18c0      	addlt	r0, r0, r3
 800d834:	4770      	bx	lr
	...

0800d838 <cos>:
 800d838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d83a:	ec51 0b10 	vmov	r0, r1, d0
 800d83e:	4a1e      	ldr	r2, [pc, #120]	; (800d8b8 <cos+0x80>)
 800d840:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d844:	4293      	cmp	r3, r2
 800d846:	dc06      	bgt.n	800d856 <cos+0x1e>
 800d848:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800d8b0 <cos+0x78>
 800d84c:	f001 fd94 	bl	800f378 <__kernel_cos>
 800d850:	ec51 0b10 	vmov	r0, r1, d0
 800d854:	e007      	b.n	800d866 <cos+0x2e>
 800d856:	4a19      	ldr	r2, [pc, #100]	; (800d8bc <cos+0x84>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	dd09      	ble.n	800d870 <cos+0x38>
 800d85c:	ee10 2a10 	vmov	r2, s0
 800d860:	460b      	mov	r3, r1
 800d862:	f7f2 fd19 	bl	8000298 <__aeabi_dsub>
 800d866:	ec41 0b10 	vmov	d0, r0, r1
 800d86a:	b005      	add	sp, #20
 800d86c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d870:	4668      	mov	r0, sp
 800d872:	f001 fadd 	bl	800ee30 <__ieee754_rem_pio2>
 800d876:	f000 0003 	and.w	r0, r0, #3
 800d87a:	2801      	cmp	r0, #1
 800d87c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d880:	ed9d 0b00 	vldr	d0, [sp]
 800d884:	d007      	beq.n	800d896 <cos+0x5e>
 800d886:	2802      	cmp	r0, #2
 800d888:	d00e      	beq.n	800d8a8 <cos+0x70>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d0de      	beq.n	800d84c <cos+0x14>
 800d88e:	2001      	movs	r0, #1
 800d890:	f002 f97a 	bl	800fb88 <__kernel_sin>
 800d894:	e7dc      	b.n	800d850 <cos+0x18>
 800d896:	f002 f977 	bl	800fb88 <__kernel_sin>
 800d89a:	ec53 2b10 	vmov	r2, r3, d0
 800d89e:	ee10 0a10 	vmov	r0, s0
 800d8a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d8a6:	e7de      	b.n	800d866 <cos+0x2e>
 800d8a8:	f001 fd66 	bl	800f378 <__kernel_cos>
 800d8ac:	e7f5      	b.n	800d89a <cos+0x62>
 800d8ae:	bf00      	nop
	...
 800d8b8:	3fe921fb 	.word	0x3fe921fb
 800d8bc:	7fefffff 	.word	0x7fefffff

0800d8c0 <sin>:
 800d8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8c2:	ec51 0b10 	vmov	r0, r1, d0
 800d8c6:	4a20      	ldr	r2, [pc, #128]	; (800d948 <sin+0x88>)
 800d8c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	dc07      	bgt.n	800d8e0 <sin+0x20>
 800d8d0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800d940 <sin+0x80>
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	f002 f957 	bl	800fb88 <__kernel_sin>
 800d8da:	ec51 0b10 	vmov	r0, r1, d0
 800d8de:	e007      	b.n	800d8f0 <sin+0x30>
 800d8e0:	4a1a      	ldr	r2, [pc, #104]	; (800d94c <sin+0x8c>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	dd09      	ble.n	800d8fa <sin+0x3a>
 800d8e6:	ee10 2a10 	vmov	r2, s0
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	f7f2 fcd4 	bl	8000298 <__aeabi_dsub>
 800d8f0:	ec41 0b10 	vmov	d0, r0, r1
 800d8f4:	b005      	add	sp, #20
 800d8f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8fa:	4668      	mov	r0, sp
 800d8fc:	f001 fa98 	bl	800ee30 <__ieee754_rem_pio2>
 800d900:	f000 0003 	and.w	r0, r0, #3
 800d904:	2801      	cmp	r0, #1
 800d906:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d90a:	ed9d 0b00 	vldr	d0, [sp]
 800d90e:	d004      	beq.n	800d91a <sin+0x5a>
 800d910:	2802      	cmp	r0, #2
 800d912:	d005      	beq.n	800d920 <sin+0x60>
 800d914:	b970      	cbnz	r0, 800d934 <sin+0x74>
 800d916:	2001      	movs	r0, #1
 800d918:	e7dd      	b.n	800d8d6 <sin+0x16>
 800d91a:	f001 fd2d 	bl	800f378 <__kernel_cos>
 800d91e:	e7dc      	b.n	800d8da <sin+0x1a>
 800d920:	2001      	movs	r0, #1
 800d922:	f002 f931 	bl	800fb88 <__kernel_sin>
 800d926:	ec53 2b10 	vmov	r2, r3, d0
 800d92a:	ee10 0a10 	vmov	r0, s0
 800d92e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d932:	e7dd      	b.n	800d8f0 <sin+0x30>
 800d934:	f001 fd20 	bl	800f378 <__kernel_cos>
 800d938:	e7f5      	b.n	800d926 <sin+0x66>
 800d93a:	bf00      	nop
 800d93c:	f3af 8000 	nop.w
	...
 800d948:	3fe921fb 	.word	0x3fe921fb
 800d94c:	7fefffff 	.word	0x7fefffff

0800d950 <acos>:
 800d950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d952:	ed2d 8b02 	vpush	{d8}
 800d956:	4e26      	ldr	r6, [pc, #152]	; (800d9f0 <acos+0xa0>)
 800d958:	b08b      	sub	sp, #44	; 0x2c
 800d95a:	ec55 4b10 	vmov	r4, r5, d0
 800d95e:	f000 fa1b 	bl	800dd98 <__ieee754_acos>
 800d962:	f996 3000 	ldrsb.w	r3, [r6]
 800d966:	eeb0 8a40 	vmov.f32	s16, s0
 800d96a:	eef0 8a60 	vmov.f32	s17, s1
 800d96e:	3301      	adds	r3, #1
 800d970:	d036      	beq.n	800d9e0 <acos+0x90>
 800d972:	4622      	mov	r2, r4
 800d974:	462b      	mov	r3, r5
 800d976:	4620      	mov	r0, r4
 800d978:	4629      	mov	r1, r5
 800d97a:	f7f3 f8df 	bl	8000b3c <__aeabi_dcmpun>
 800d97e:	4607      	mov	r7, r0
 800d980:	bb70      	cbnz	r0, 800d9e0 <acos+0x90>
 800d982:	ec45 4b10 	vmov	d0, r4, r5
 800d986:	f002 fb5b 	bl	8010040 <fabs>
 800d98a:	2200      	movs	r2, #0
 800d98c:	4b19      	ldr	r3, [pc, #100]	; (800d9f4 <acos+0xa4>)
 800d98e:	ec51 0b10 	vmov	r0, r1, d0
 800d992:	f7f3 f8c9 	bl	8000b28 <__aeabi_dcmpgt>
 800d996:	b318      	cbz	r0, 800d9e0 <acos+0x90>
 800d998:	2301      	movs	r3, #1
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	4816      	ldr	r0, [pc, #88]	; (800d9f8 <acos+0xa8>)
 800d99e:	4b17      	ldr	r3, [pc, #92]	; (800d9fc <acos+0xac>)
 800d9a0:	9301      	str	r3, [sp, #4]
 800d9a2:	9708      	str	r7, [sp, #32]
 800d9a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d9a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d9ac:	f002 fbe4 	bl	8010178 <nan>
 800d9b0:	f996 3000 	ldrsb.w	r3, [r6]
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d9ba:	d104      	bne.n	800d9c6 <acos+0x76>
 800d9bc:	f7fb f87c 	bl	8008ab8 <__errno>
 800d9c0:	2321      	movs	r3, #33	; 0x21
 800d9c2:	6003      	str	r3, [r0, #0]
 800d9c4:	e004      	b.n	800d9d0 <acos+0x80>
 800d9c6:	4668      	mov	r0, sp
 800d9c8:	f002 fbd2 	bl	8010170 <matherr>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d0f5      	beq.n	800d9bc <acos+0x6c>
 800d9d0:	9b08      	ldr	r3, [sp, #32]
 800d9d2:	b11b      	cbz	r3, 800d9dc <acos+0x8c>
 800d9d4:	f7fb f870 	bl	8008ab8 <__errno>
 800d9d8:	9b08      	ldr	r3, [sp, #32]
 800d9da:	6003      	str	r3, [r0, #0]
 800d9dc:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d9e0:	eeb0 0a48 	vmov.f32	s0, s16
 800d9e4:	eef0 0a68 	vmov.f32	s1, s17
 800d9e8:	b00b      	add	sp, #44	; 0x2c
 800d9ea:	ecbd 8b02 	vpop	{d8}
 800d9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9f0:	20000358 	.word	0x20000358
 800d9f4:	3ff00000 	.word	0x3ff00000
 800d9f8:	080106b9 	.word	0x080106b9
 800d9fc:	080107e1 	.word	0x080107e1

0800da00 <atan2>:
 800da00:	f000 bc26 	b.w	800e250 <__ieee754_atan2>

0800da04 <pow>:
 800da04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da08:	ed2d 8b04 	vpush	{d8-d9}
 800da0c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800dce0 <pow+0x2dc>
 800da10:	b08d      	sub	sp, #52	; 0x34
 800da12:	ec57 6b10 	vmov	r6, r7, d0
 800da16:	ec55 4b11 	vmov	r4, r5, d1
 800da1a:	f000 fcf9 	bl	800e410 <__ieee754_pow>
 800da1e:	f999 3000 	ldrsb.w	r3, [r9]
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	3301      	adds	r3, #1
 800da26:	eeb0 8a40 	vmov.f32	s16, s0
 800da2a:	eef0 8a60 	vmov.f32	s17, s1
 800da2e:	46c8      	mov	r8, r9
 800da30:	d05f      	beq.n	800daf2 <pow+0xee>
 800da32:	4622      	mov	r2, r4
 800da34:	462b      	mov	r3, r5
 800da36:	4620      	mov	r0, r4
 800da38:	4629      	mov	r1, r5
 800da3a:	f7f3 f87f 	bl	8000b3c <__aeabi_dcmpun>
 800da3e:	4683      	mov	fp, r0
 800da40:	2800      	cmp	r0, #0
 800da42:	d156      	bne.n	800daf2 <pow+0xee>
 800da44:	4632      	mov	r2, r6
 800da46:	463b      	mov	r3, r7
 800da48:	4630      	mov	r0, r6
 800da4a:	4639      	mov	r1, r7
 800da4c:	f7f3 f876 	bl	8000b3c <__aeabi_dcmpun>
 800da50:	9001      	str	r0, [sp, #4]
 800da52:	b1e8      	cbz	r0, 800da90 <pow+0x8c>
 800da54:	2200      	movs	r2, #0
 800da56:	2300      	movs	r3, #0
 800da58:	4620      	mov	r0, r4
 800da5a:	4629      	mov	r1, r5
 800da5c:	f7f3 f83c 	bl	8000ad8 <__aeabi_dcmpeq>
 800da60:	2800      	cmp	r0, #0
 800da62:	d046      	beq.n	800daf2 <pow+0xee>
 800da64:	2301      	movs	r3, #1
 800da66:	9302      	str	r3, [sp, #8]
 800da68:	4b96      	ldr	r3, [pc, #600]	; (800dcc4 <pow+0x2c0>)
 800da6a:	9303      	str	r3, [sp, #12]
 800da6c:	4b96      	ldr	r3, [pc, #600]	; (800dcc8 <pow+0x2c4>)
 800da6e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800da72:	2200      	movs	r2, #0
 800da74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800da78:	9b00      	ldr	r3, [sp, #0]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800da80:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800da84:	d033      	beq.n	800daee <pow+0xea>
 800da86:	a802      	add	r0, sp, #8
 800da88:	f002 fb72 	bl	8010170 <matherr>
 800da8c:	bb48      	cbnz	r0, 800dae2 <pow+0xde>
 800da8e:	e05d      	b.n	800db4c <pow+0x148>
 800da90:	f04f 0a00 	mov.w	sl, #0
 800da94:	f04f 0b00 	mov.w	fp, #0
 800da98:	4652      	mov	r2, sl
 800da9a:	465b      	mov	r3, fp
 800da9c:	4630      	mov	r0, r6
 800da9e:	4639      	mov	r1, r7
 800daa0:	f7f3 f81a 	bl	8000ad8 <__aeabi_dcmpeq>
 800daa4:	ec4b ab19 	vmov	d9, sl, fp
 800daa8:	2800      	cmp	r0, #0
 800daaa:	d054      	beq.n	800db56 <pow+0x152>
 800daac:	4652      	mov	r2, sl
 800daae:	465b      	mov	r3, fp
 800dab0:	4620      	mov	r0, r4
 800dab2:	4629      	mov	r1, r5
 800dab4:	f7f3 f810 	bl	8000ad8 <__aeabi_dcmpeq>
 800dab8:	4680      	mov	r8, r0
 800daba:	b318      	cbz	r0, 800db04 <pow+0x100>
 800dabc:	2301      	movs	r3, #1
 800dabe:	9302      	str	r3, [sp, #8]
 800dac0:	4b80      	ldr	r3, [pc, #512]	; (800dcc4 <pow+0x2c0>)
 800dac2:	9303      	str	r3, [sp, #12]
 800dac4:	9b01      	ldr	r3, [sp, #4]
 800dac6:	930a      	str	r3, [sp, #40]	; 0x28
 800dac8:	9b00      	ldr	r3, [sp, #0]
 800daca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dace:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dad2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d0d5      	beq.n	800da86 <pow+0x82>
 800dada:	4b7b      	ldr	r3, [pc, #492]	; (800dcc8 <pow+0x2c4>)
 800dadc:	2200      	movs	r2, #0
 800dade:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae4:	b11b      	cbz	r3, 800daee <pow+0xea>
 800dae6:	f7fa ffe7 	bl	8008ab8 <__errno>
 800daea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daec:	6003      	str	r3, [r0, #0]
 800daee:	ed9d 8b08 	vldr	d8, [sp, #32]
 800daf2:	eeb0 0a48 	vmov.f32	s0, s16
 800daf6:	eef0 0a68 	vmov.f32	s1, s17
 800dafa:	b00d      	add	sp, #52	; 0x34
 800dafc:	ecbd 8b04 	vpop	{d8-d9}
 800db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db04:	ec45 4b10 	vmov	d0, r4, r5
 800db08:	f002 faa3 	bl	8010052 <finite>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d0f0      	beq.n	800daf2 <pow+0xee>
 800db10:	4652      	mov	r2, sl
 800db12:	465b      	mov	r3, fp
 800db14:	4620      	mov	r0, r4
 800db16:	4629      	mov	r1, r5
 800db18:	f7f2 ffe8 	bl	8000aec <__aeabi_dcmplt>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d0e8      	beq.n	800daf2 <pow+0xee>
 800db20:	2301      	movs	r3, #1
 800db22:	9302      	str	r3, [sp, #8]
 800db24:	4b67      	ldr	r3, [pc, #412]	; (800dcc4 <pow+0x2c0>)
 800db26:	9303      	str	r3, [sp, #12]
 800db28:	f999 3000 	ldrsb.w	r3, [r9]
 800db2c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800db30:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800db34:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800db38:	b913      	cbnz	r3, 800db40 <pow+0x13c>
 800db3a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800db3e:	e7a2      	b.n	800da86 <pow+0x82>
 800db40:	4962      	ldr	r1, [pc, #392]	; (800dccc <pow+0x2c8>)
 800db42:	2000      	movs	r0, #0
 800db44:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800db48:	2b02      	cmp	r3, #2
 800db4a:	d19c      	bne.n	800da86 <pow+0x82>
 800db4c:	f7fa ffb4 	bl	8008ab8 <__errno>
 800db50:	2321      	movs	r3, #33	; 0x21
 800db52:	6003      	str	r3, [r0, #0]
 800db54:	e7c5      	b.n	800dae2 <pow+0xde>
 800db56:	eeb0 0a48 	vmov.f32	s0, s16
 800db5a:	eef0 0a68 	vmov.f32	s1, s17
 800db5e:	f002 fa78 	bl	8010052 <finite>
 800db62:	9000      	str	r0, [sp, #0]
 800db64:	2800      	cmp	r0, #0
 800db66:	f040 8081 	bne.w	800dc6c <pow+0x268>
 800db6a:	ec47 6b10 	vmov	d0, r6, r7
 800db6e:	f002 fa70 	bl	8010052 <finite>
 800db72:	2800      	cmp	r0, #0
 800db74:	d07a      	beq.n	800dc6c <pow+0x268>
 800db76:	ec45 4b10 	vmov	d0, r4, r5
 800db7a:	f002 fa6a 	bl	8010052 <finite>
 800db7e:	2800      	cmp	r0, #0
 800db80:	d074      	beq.n	800dc6c <pow+0x268>
 800db82:	ec53 2b18 	vmov	r2, r3, d8
 800db86:	ee18 0a10 	vmov	r0, s16
 800db8a:	4619      	mov	r1, r3
 800db8c:	f7f2 ffd6 	bl	8000b3c <__aeabi_dcmpun>
 800db90:	f999 9000 	ldrsb.w	r9, [r9]
 800db94:	4b4b      	ldr	r3, [pc, #300]	; (800dcc4 <pow+0x2c0>)
 800db96:	b1b0      	cbz	r0, 800dbc6 <pow+0x1c2>
 800db98:	2201      	movs	r2, #1
 800db9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db9e:	9b00      	ldr	r3, [sp, #0]
 800dba0:	930a      	str	r3, [sp, #40]	; 0x28
 800dba2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dba6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dbaa:	f1b9 0f00 	cmp.w	r9, #0
 800dbae:	d0c4      	beq.n	800db3a <pow+0x136>
 800dbb0:	4652      	mov	r2, sl
 800dbb2:	465b      	mov	r3, fp
 800dbb4:	4650      	mov	r0, sl
 800dbb6:	4659      	mov	r1, fp
 800dbb8:	f7f2 fe50 	bl	800085c <__aeabi_ddiv>
 800dbbc:	f1b9 0f02 	cmp.w	r9, #2
 800dbc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dbc4:	e7c1      	b.n	800db4a <pow+0x146>
 800dbc6:	2203      	movs	r2, #3
 800dbc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dbcc:	900a      	str	r0, [sp, #40]	; 0x28
 800dbce:	4629      	mov	r1, r5
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	4b3e      	ldr	r3, [pc, #248]	; (800dcd0 <pow+0x2cc>)
 800dbd6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dbda:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dbde:	f7f2 fd13 	bl	8000608 <__aeabi_dmul>
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	460d      	mov	r5, r1
 800dbe6:	f1b9 0f00 	cmp.w	r9, #0
 800dbea:	d124      	bne.n	800dc36 <pow+0x232>
 800dbec:	4b39      	ldr	r3, [pc, #228]	; (800dcd4 <pow+0x2d0>)
 800dbee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800dbf2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	4652      	mov	r2, sl
 800dbfa:	465b      	mov	r3, fp
 800dbfc:	4639      	mov	r1, r7
 800dbfe:	f7f2 ff75 	bl	8000aec <__aeabi_dcmplt>
 800dc02:	2800      	cmp	r0, #0
 800dc04:	d056      	beq.n	800dcb4 <pow+0x2b0>
 800dc06:	ec45 4b10 	vmov	d0, r4, r5
 800dc0a:	f002 fabd 	bl	8010188 <rint>
 800dc0e:	4622      	mov	r2, r4
 800dc10:	462b      	mov	r3, r5
 800dc12:	ec51 0b10 	vmov	r0, r1, d0
 800dc16:	f7f2 ff5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc1a:	b920      	cbnz	r0, 800dc26 <pow+0x222>
 800dc1c:	4b2e      	ldr	r3, [pc, #184]	; (800dcd8 <pow+0x2d4>)
 800dc1e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800dc22:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc26:	f998 3000 	ldrsb.w	r3, [r8]
 800dc2a:	2b02      	cmp	r3, #2
 800dc2c:	d142      	bne.n	800dcb4 <pow+0x2b0>
 800dc2e:	f7fa ff43 	bl	8008ab8 <__errno>
 800dc32:	2322      	movs	r3, #34	; 0x22
 800dc34:	e78d      	b.n	800db52 <pow+0x14e>
 800dc36:	4b29      	ldr	r3, [pc, #164]	; (800dcdc <pow+0x2d8>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc3e:	4630      	mov	r0, r6
 800dc40:	4652      	mov	r2, sl
 800dc42:	465b      	mov	r3, fp
 800dc44:	4639      	mov	r1, r7
 800dc46:	f7f2 ff51 	bl	8000aec <__aeabi_dcmplt>
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	d0eb      	beq.n	800dc26 <pow+0x222>
 800dc4e:	ec45 4b10 	vmov	d0, r4, r5
 800dc52:	f002 fa99 	bl	8010188 <rint>
 800dc56:	4622      	mov	r2, r4
 800dc58:	462b      	mov	r3, r5
 800dc5a:	ec51 0b10 	vmov	r0, r1, d0
 800dc5e:	f7f2 ff3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	d1df      	bne.n	800dc26 <pow+0x222>
 800dc66:	2200      	movs	r2, #0
 800dc68:	4b18      	ldr	r3, [pc, #96]	; (800dccc <pow+0x2c8>)
 800dc6a:	e7da      	b.n	800dc22 <pow+0x21e>
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2300      	movs	r3, #0
 800dc70:	ec51 0b18 	vmov	r0, r1, d8
 800dc74:	f7f2 ff30 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	f43f af3a 	beq.w	800daf2 <pow+0xee>
 800dc7e:	ec47 6b10 	vmov	d0, r6, r7
 800dc82:	f002 f9e6 	bl	8010052 <finite>
 800dc86:	2800      	cmp	r0, #0
 800dc88:	f43f af33 	beq.w	800daf2 <pow+0xee>
 800dc8c:	ec45 4b10 	vmov	d0, r4, r5
 800dc90:	f002 f9df 	bl	8010052 <finite>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	f43f af2c 	beq.w	800daf2 <pow+0xee>
 800dc9a:	2304      	movs	r3, #4
 800dc9c:	9302      	str	r3, [sp, #8]
 800dc9e:	4b09      	ldr	r3, [pc, #36]	; (800dcc4 <pow+0x2c0>)
 800dca0:	9303      	str	r3, [sp, #12]
 800dca2:	2300      	movs	r3, #0
 800dca4:	930a      	str	r3, [sp, #40]	; 0x28
 800dca6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dcaa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800dcae:	ed8d 9b08 	vstr	d9, [sp, #32]
 800dcb2:	e7b8      	b.n	800dc26 <pow+0x222>
 800dcb4:	a802      	add	r0, sp, #8
 800dcb6:	f002 fa5b 	bl	8010170 <matherr>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	f47f af11 	bne.w	800dae2 <pow+0xde>
 800dcc0:	e7b5      	b.n	800dc2e <pow+0x22a>
 800dcc2:	bf00      	nop
 800dcc4:	080107e6 	.word	0x080107e6
 800dcc8:	3ff00000 	.word	0x3ff00000
 800dccc:	fff00000 	.word	0xfff00000
 800dcd0:	3fe00000 	.word	0x3fe00000
 800dcd4:	47efffff 	.word	0x47efffff
 800dcd8:	c7efffff 	.word	0xc7efffff
 800dcdc:	7ff00000 	.word	0x7ff00000
 800dce0:	20000358 	.word	0x20000358

0800dce4 <sqrt>:
 800dce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dce8:	ed2d 8b02 	vpush	{d8}
 800dcec:	b08b      	sub	sp, #44	; 0x2c
 800dcee:	ec55 4b10 	vmov	r4, r5, d0
 800dcf2:	f001 fa8f 	bl	800f214 <__ieee754_sqrt>
 800dcf6:	4b26      	ldr	r3, [pc, #152]	; (800dd90 <sqrt+0xac>)
 800dcf8:	eeb0 8a40 	vmov.f32	s16, s0
 800dcfc:	eef0 8a60 	vmov.f32	s17, s1
 800dd00:	f993 6000 	ldrsb.w	r6, [r3]
 800dd04:	1c73      	adds	r3, r6, #1
 800dd06:	d02a      	beq.n	800dd5e <sqrt+0x7a>
 800dd08:	4622      	mov	r2, r4
 800dd0a:	462b      	mov	r3, r5
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	4629      	mov	r1, r5
 800dd10:	f7f2 ff14 	bl	8000b3c <__aeabi_dcmpun>
 800dd14:	4607      	mov	r7, r0
 800dd16:	bb10      	cbnz	r0, 800dd5e <sqrt+0x7a>
 800dd18:	f04f 0800 	mov.w	r8, #0
 800dd1c:	f04f 0900 	mov.w	r9, #0
 800dd20:	4642      	mov	r2, r8
 800dd22:	464b      	mov	r3, r9
 800dd24:	4620      	mov	r0, r4
 800dd26:	4629      	mov	r1, r5
 800dd28:	f7f2 fee0 	bl	8000aec <__aeabi_dcmplt>
 800dd2c:	b1b8      	cbz	r0, 800dd5e <sqrt+0x7a>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	4b18      	ldr	r3, [pc, #96]	; (800dd94 <sqrt+0xb0>)
 800dd34:	9301      	str	r3, [sp, #4]
 800dd36:	9708      	str	r7, [sp, #32]
 800dd38:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800dd3c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800dd40:	b9b6      	cbnz	r6, 800dd70 <sqrt+0x8c>
 800dd42:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800dd46:	4668      	mov	r0, sp
 800dd48:	f002 fa12 	bl	8010170 <matherr>
 800dd4c:	b1d0      	cbz	r0, 800dd84 <sqrt+0xa0>
 800dd4e:	9b08      	ldr	r3, [sp, #32]
 800dd50:	b11b      	cbz	r3, 800dd5a <sqrt+0x76>
 800dd52:	f7fa feb1 	bl	8008ab8 <__errno>
 800dd56:	9b08      	ldr	r3, [sp, #32]
 800dd58:	6003      	str	r3, [r0, #0]
 800dd5a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800dd5e:	eeb0 0a48 	vmov.f32	s0, s16
 800dd62:	eef0 0a68 	vmov.f32	s1, s17
 800dd66:	b00b      	add	sp, #44	; 0x2c
 800dd68:	ecbd 8b02 	vpop	{d8}
 800dd6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd70:	4642      	mov	r2, r8
 800dd72:	464b      	mov	r3, r9
 800dd74:	4640      	mov	r0, r8
 800dd76:	4649      	mov	r1, r9
 800dd78:	f7f2 fd70 	bl	800085c <__aeabi_ddiv>
 800dd7c:	2e02      	cmp	r6, #2
 800dd7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dd82:	d1e0      	bne.n	800dd46 <sqrt+0x62>
 800dd84:	f7fa fe98 	bl	8008ab8 <__errno>
 800dd88:	2321      	movs	r3, #33	; 0x21
 800dd8a:	6003      	str	r3, [r0, #0]
 800dd8c:	e7df      	b.n	800dd4e <sqrt+0x6a>
 800dd8e:	bf00      	nop
 800dd90:	20000358 	.word	0x20000358
 800dd94:	080107ea 	.word	0x080107ea

0800dd98 <__ieee754_acos>:
 800dd98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9c:	ec55 4b10 	vmov	r4, r5, d0
 800dda0:	49b7      	ldr	r1, [pc, #732]	; (800e080 <__ieee754_acos+0x2e8>)
 800dda2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dda6:	428b      	cmp	r3, r1
 800dda8:	dd1b      	ble.n	800dde2 <__ieee754_acos+0x4a>
 800ddaa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800ddae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ddb2:	4323      	orrs	r3, r4
 800ddb4:	d109      	bne.n	800ddca <__ieee754_acos+0x32>
 800ddb6:	2d00      	cmp	r5, #0
 800ddb8:	f300 8211 	bgt.w	800e1de <__ieee754_acos+0x446>
 800ddbc:	a196      	add	r1, pc, #600	; (adr r1, 800e018 <__ieee754_acos+0x280>)
 800ddbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddc2:	ec41 0b10 	vmov	d0, r0, r1
 800ddc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddca:	ee10 2a10 	vmov	r2, s0
 800ddce:	462b      	mov	r3, r5
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	f7f2 fa60 	bl	8000298 <__aeabi_dsub>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	460b      	mov	r3, r1
 800dddc:	f7f2 fd3e 	bl	800085c <__aeabi_ddiv>
 800dde0:	e7ef      	b.n	800ddc2 <__ieee754_acos+0x2a>
 800dde2:	49a8      	ldr	r1, [pc, #672]	; (800e084 <__ieee754_acos+0x2ec>)
 800dde4:	428b      	cmp	r3, r1
 800dde6:	f300 8087 	bgt.w	800def8 <__ieee754_acos+0x160>
 800ddea:	4aa7      	ldr	r2, [pc, #668]	; (800e088 <__ieee754_acos+0x2f0>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	f340 81f9 	ble.w	800e1e4 <__ieee754_acos+0x44c>
 800ddf2:	ee10 2a10 	vmov	r2, s0
 800ddf6:	ee10 0a10 	vmov	r0, s0
 800ddfa:	462b      	mov	r3, r5
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	f7f2 fc03 	bl	8000608 <__aeabi_dmul>
 800de02:	a387      	add	r3, pc, #540	; (adr r3, 800e020 <__ieee754_acos+0x288>)
 800de04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de08:	4606      	mov	r6, r0
 800de0a:	460f      	mov	r7, r1
 800de0c:	f7f2 fbfc 	bl	8000608 <__aeabi_dmul>
 800de10:	a385      	add	r3, pc, #532	; (adr r3, 800e028 <__ieee754_acos+0x290>)
 800de12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de16:	f7f2 fa41 	bl	800029c <__adddf3>
 800de1a:	4632      	mov	r2, r6
 800de1c:	463b      	mov	r3, r7
 800de1e:	f7f2 fbf3 	bl	8000608 <__aeabi_dmul>
 800de22:	a383      	add	r3, pc, #524	; (adr r3, 800e030 <__ieee754_acos+0x298>)
 800de24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de28:	f7f2 fa36 	bl	8000298 <__aeabi_dsub>
 800de2c:	4632      	mov	r2, r6
 800de2e:	463b      	mov	r3, r7
 800de30:	f7f2 fbea 	bl	8000608 <__aeabi_dmul>
 800de34:	a380      	add	r3, pc, #512	; (adr r3, 800e038 <__ieee754_acos+0x2a0>)
 800de36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3a:	f7f2 fa2f 	bl	800029c <__adddf3>
 800de3e:	4632      	mov	r2, r6
 800de40:	463b      	mov	r3, r7
 800de42:	f7f2 fbe1 	bl	8000608 <__aeabi_dmul>
 800de46:	a37e      	add	r3, pc, #504	; (adr r3, 800e040 <__ieee754_acos+0x2a8>)
 800de48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4c:	f7f2 fa24 	bl	8000298 <__aeabi_dsub>
 800de50:	4632      	mov	r2, r6
 800de52:	463b      	mov	r3, r7
 800de54:	f7f2 fbd8 	bl	8000608 <__aeabi_dmul>
 800de58:	a37b      	add	r3, pc, #492	; (adr r3, 800e048 <__ieee754_acos+0x2b0>)
 800de5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5e:	f7f2 fa1d 	bl	800029c <__adddf3>
 800de62:	4632      	mov	r2, r6
 800de64:	463b      	mov	r3, r7
 800de66:	f7f2 fbcf 	bl	8000608 <__aeabi_dmul>
 800de6a:	a379      	add	r3, pc, #484	; (adr r3, 800e050 <__ieee754_acos+0x2b8>)
 800de6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de70:	4680      	mov	r8, r0
 800de72:	4689      	mov	r9, r1
 800de74:	4630      	mov	r0, r6
 800de76:	4639      	mov	r1, r7
 800de78:	f7f2 fbc6 	bl	8000608 <__aeabi_dmul>
 800de7c:	a376      	add	r3, pc, #472	; (adr r3, 800e058 <__ieee754_acos+0x2c0>)
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	f7f2 fa09 	bl	8000298 <__aeabi_dsub>
 800de86:	4632      	mov	r2, r6
 800de88:	463b      	mov	r3, r7
 800de8a:	f7f2 fbbd 	bl	8000608 <__aeabi_dmul>
 800de8e:	a374      	add	r3, pc, #464	; (adr r3, 800e060 <__ieee754_acos+0x2c8>)
 800de90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de94:	f7f2 fa02 	bl	800029c <__adddf3>
 800de98:	4632      	mov	r2, r6
 800de9a:	463b      	mov	r3, r7
 800de9c:	f7f2 fbb4 	bl	8000608 <__aeabi_dmul>
 800dea0:	a371      	add	r3, pc, #452	; (adr r3, 800e068 <__ieee754_acos+0x2d0>)
 800dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea6:	f7f2 f9f7 	bl	8000298 <__aeabi_dsub>
 800deaa:	4632      	mov	r2, r6
 800deac:	463b      	mov	r3, r7
 800deae:	f7f2 fbab 	bl	8000608 <__aeabi_dmul>
 800deb2:	2200      	movs	r2, #0
 800deb4:	4b75      	ldr	r3, [pc, #468]	; (800e08c <__ieee754_acos+0x2f4>)
 800deb6:	f7f2 f9f1 	bl	800029c <__adddf3>
 800deba:	4602      	mov	r2, r0
 800debc:	460b      	mov	r3, r1
 800debe:	4640      	mov	r0, r8
 800dec0:	4649      	mov	r1, r9
 800dec2:	f7f2 fccb 	bl	800085c <__aeabi_ddiv>
 800dec6:	4622      	mov	r2, r4
 800dec8:	462b      	mov	r3, r5
 800deca:	f7f2 fb9d 	bl	8000608 <__aeabi_dmul>
 800dece:	4602      	mov	r2, r0
 800ded0:	460b      	mov	r3, r1
 800ded2:	a167      	add	r1, pc, #412	; (adr r1, 800e070 <__ieee754_acos+0x2d8>)
 800ded4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ded8:	f7f2 f9de 	bl	8000298 <__aeabi_dsub>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4620      	mov	r0, r4
 800dee2:	4629      	mov	r1, r5
 800dee4:	f7f2 f9d8 	bl	8000298 <__aeabi_dsub>
 800dee8:	4602      	mov	r2, r0
 800deea:	460b      	mov	r3, r1
 800deec:	a162      	add	r1, pc, #392	; (adr r1, 800e078 <__ieee754_acos+0x2e0>)
 800deee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800def2:	f7f2 f9d1 	bl	8000298 <__aeabi_dsub>
 800def6:	e764      	b.n	800ddc2 <__ieee754_acos+0x2a>
 800def8:	2d00      	cmp	r5, #0
 800defa:	f280 80cb 	bge.w	800e094 <__ieee754_acos+0x2fc>
 800defe:	ee10 0a10 	vmov	r0, s0
 800df02:	2200      	movs	r2, #0
 800df04:	4b61      	ldr	r3, [pc, #388]	; (800e08c <__ieee754_acos+0x2f4>)
 800df06:	4629      	mov	r1, r5
 800df08:	f7f2 f9c8 	bl	800029c <__adddf3>
 800df0c:	2200      	movs	r2, #0
 800df0e:	4b60      	ldr	r3, [pc, #384]	; (800e090 <__ieee754_acos+0x2f8>)
 800df10:	f7f2 fb7a 	bl	8000608 <__aeabi_dmul>
 800df14:	a342      	add	r3, pc, #264	; (adr r3, 800e020 <__ieee754_acos+0x288>)
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	4604      	mov	r4, r0
 800df1c:	460d      	mov	r5, r1
 800df1e:	f7f2 fb73 	bl	8000608 <__aeabi_dmul>
 800df22:	a341      	add	r3, pc, #260	; (adr r3, 800e028 <__ieee754_acos+0x290>)
 800df24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df28:	f7f2 f9b8 	bl	800029c <__adddf3>
 800df2c:	4622      	mov	r2, r4
 800df2e:	462b      	mov	r3, r5
 800df30:	f7f2 fb6a 	bl	8000608 <__aeabi_dmul>
 800df34:	a33e      	add	r3, pc, #248	; (adr r3, 800e030 <__ieee754_acos+0x298>)
 800df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3a:	f7f2 f9ad 	bl	8000298 <__aeabi_dsub>
 800df3e:	4622      	mov	r2, r4
 800df40:	462b      	mov	r3, r5
 800df42:	f7f2 fb61 	bl	8000608 <__aeabi_dmul>
 800df46:	a33c      	add	r3, pc, #240	; (adr r3, 800e038 <__ieee754_acos+0x2a0>)
 800df48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4c:	f7f2 f9a6 	bl	800029c <__adddf3>
 800df50:	4622      	mov	r2, r4
 800df52:	462b      	mov	r3, r5
 800df54:	f7f2 fb58 	bl	8000608 <__aeabi_dmul>
 800df58:	a339      	add	r3, pc, #228	; (adr r3, 800e040 <__ieee754_acos+0x2a8>)
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	f7f2 f99b 	bl	8000298 <__aeabi_dsub>
 800df62:	4622      	mov	r2, r4
 800df64:	462b      	mov	r3, r5
 800df66:	f7f2 fb4f 	bl	8000608 <__aeabi_dmul>
 800df6a:	a337      	add	r3, pc, #220	; (adr r3, 800e048 <__ieee754_acos+0x2b0>)
 800df6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df70:	f7f2 f994 	bl	800029c <__adddf3>
 800df74:	4622      	mov	r2, r4
 800df76:	462b      	mov	r3, r5
 800df78:	f7f2 fb46 	bl	8000608 <__aeabi_dmul>
 800df7c:	ec45 4b10 	vmov	d0, r4, r5
 800df80:	4680      	mov	r8, r0
 800df82:	4689      	mov	r9, r1
 800df84:	f001 f946 	bl	800f214 <__ieee754_sqrt>
 800df88:	a331      	add	r3, pc, #196	; (adr r3, 800e050 <__ieee754_acos+0x2b8>)
 800df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8e:	4620      	mov	r0, r4
 800df90:	4629      	mov	r1, r5
 800df92:	ec57 6b10 	vmov	r6, r7, d0
 800df96:	f7f2 fb37 	bl	8000608 <__aeabi_dmul>
 800df9a:	a32f      	add	r3, pc, #188	; (adr r3, 800e058 <__ieee754_acos+0x2c0>)
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	f7f2 f97a 	bl	8000298 <__aeabi_dsub>
 800dfa4:	4622      	mov	r2, r4
 800dfa6:	462b      	mov	r3, r5
 800dfa8:	f7f2 fb2e 	bl	8000608 <__aeabi_dmul>
 800dfac:	a32c      	add	r3, pc, #176	; (adr r3, 800e060 <__ieee754_acos+0x2c8>)
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	f7f2 f973 	bl	800029c <__adddf3>
 800dfb6:	4622      	mov	r2, r4
 800dfb8:	462b      	mov	r3, r5
 800dfba:	f7f2 fb25 	bl	8000608 <__aeabi_dmul>
 800dfbe:	a32a      	add	r3, pc, #168	; (adr r3, 800e068 <__ieee754_acos+0x2d0>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	f7f2 f968 	bl	8000298 <__aeabi_dsub>
 800dfc8:	4622      	mov	r2, r4
 800dfca:	462b      	mov	r3, r5
 800dfcc:	f7f2 fb1c 	bl	8000608 <__aeabi_dmul>
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	4b2e      	ldr	r3, [pc, #184]	; (800e08c <__ieee754_acos+0x2f4>)
 800dfd4:	f7f2 f962 	bl	800029c <__adddf3>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4640      	mov	r0, r8
 800dfde:	4649      	mov	r1, r9
 800dfe0:	f7f2 fc3c 	bl	800085c <__aeabi_ddiv>
 800dfe4:	4632      	mov	r2, r6
 800dfe6:	463b      	mov	r3, r7
 800dfe8:	f7f2 fb0e 	bl	8000608 <__aeabi_dmul>
 800dfec:	a320      	add	r3, pc, #128	; (adr r3, 800e070 <__ieee754_acos+0x2d8>)
 800dfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff2:	f7f2 f951 	bl	8000298 <__aeabi_dsub>
 800dff6:	4632      	mov	r2, r6
 800dff8:	463b      	mov	r3, r7
 800dffa:	f7f2 f94f 	bl	800029c <__adddf3>
 800dffe:	4602      	mov	r2, r0
 800e000:	460b      	mov	r3, r1
 800e002:	f7f2 f94b 	bl	800029c <__adddf3>
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	a103      	add	r1, pc, #12	; (adr r1, 800e018 <__ieee754_acos+0x280>)
 800e00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e010:	e76f      	b.n	800def2 <__ieee754_acos+0x15a>
 800e012:	bf00      	nop
 800e014:	f3af 8000 	nop.w
 800e018:	54442d18 	.word	0x54442d18
 800e01c:	400921fb 	.word	0x400921fb
 800e020:	0dfdf709 	.word	0x0dfdf709
 800e024:	3f023de1 	.word	0x3f023de1
 800e028:	7501b288 	.word	0x7501b288
 800e02c:	3f49efe0 	.word	0x3f49efe0
 800e030:	b5688f3b 	.word	0xb5688f3b
 800e034:	3fa48228 	.word	0x3fa48228
 800e038:	0e884455 	.word	0x0e884455
 800e03c:	3fc9c155 	.word	0x3fc9c155
 800e040:	03eb6f7d 	.word	0x03eb6f7d
 800e044:	3fd4d612 	.word	0x3fd4d612
 800e048:	55555555 	.word	0x55555555
 800e04c:	3fc55555 	.word	0x3fc55555
 800e050:	b12e9282 	.word	0xb12e9282
 800e054:	3fb3b8c5 	.word	0x3fb3b8c5
 800e058:	1b8d0159 	.word	0x1b8d0159
 800e05c:	3fe6066c 	.word	0x3fe6066c
 800e060:	9c598ac8 	.word	0x9c598ac8
 800e064:	40002ae5 	.word	0x40002ae5
 800e068:	1c8a2d4b 	.word	0x1c8a2d4b
 800e06c:	40033a27 	.word	0x40033a27
 800e070:	33145c07 	.word	0x33145c07
 800e074:	3c91a626 	.word	0x3c91a626
 800e078:	54442d18 	.word	0x54442d18
 800e07c:	3ff921fb 	.word	0x3ff921fb
 800e080:	3fefffff 	.word	0x3fefffff
 800e084:	3fdfffff 	.word	0x3fdfffff
 800e088:	3c600000 	.word	0x3c600000
 800e08c:	3ff00000 	.word	0x3ff00000
 800e090:	3fe00000 	.word	0x3fe00000
 800e094:	ee10 2a10 	vmov	r2, s0
 800e098:	462b      	mov	r3, r5
 800e09a:	2000      	movs	r0, #0
 800e09c:	496a      	ldr	r1, [pc, #424]	; (800e248 <__ieee754_acos+0x4b0>)
 800e09e:	f7f2 f8fb 	bl	8000298 <__aeabi_dsub>
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	4b69      	ldr	r3, [pc, #420]	; (800e24c <__ieee754_acos+0x4b4>)
 800e0a6:	f7f2 faaf 	bl	8000608 <__aeabi_dmul>
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	460d      	mov	r5, r1
 800e0ae:	ec45 4b10 	vmov	d0, r4, r5
 800e0b2:	f001 f8af 	bl	800f214 <__ieee754_sqrt>
 800e0b6:	a34e      	add	r3, pc, #312	; (adr r3, 800e1f0 <__ieee754_acos+0x458>)
 800e0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0bc:	4620      	mov	r0, r4
 800e0be:	4629      	mov	r1, r5
 800e0c0:	ec59 8b10 	vmov	r8, r9, d0
 800e0c4:	f7f2 faa0 	bl	8000608 <__aeabi_dmul>
 800e0c8:	a34b      	add	r3, pc, #300	; (adr r3, 800e1f8 <__ieee754_acos+0x460>)
 800e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ce:	f7f2 f8e5 	bl	800029c <__adddf3>
 800e0d2:	4622      	mov	r2, r4
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	f7f2 fa97 	bl	8000608 <__aeabi_dmul>
 800e0da:	a349      	add	r3, pc, #292	; (adr r3, 800e200 <__ieee754_acos+0x468>)
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	f7f2 f8da 	bl	8000298 <__aeabi_dsub>
 800e0e4:	4622      	mov	r2, r4
 800e0e6:	462b      	mov	r3, r5
 800e0e8:	f7f2 fa8e 	bl	8000608 <__aeabi_dmul>
 800e0ec:	a346      	add	r3, pc, #280	; (adr r3, 800e208 <__ieee754_acos+0x470>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	f7f2 f8d3 	bl	800029c <__adddf3>
 800e0f6:	4622      	mov	r2, r4
 800e0f8:	462b      	mov	r3, r5
 800e0fa:	f7f2 fa85 	bl	8000608 <__aeabi_dmul>
 800e0fe:	a344      	add	r3, pc, #272	; (adr r3, 800e210 <__ieee754_acos+0x478>)
 800e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e104:	f7f2 f8c8 	bl	8000298 <__aeabi_dsub>
 800e108:	4622      	mov	r2, r4
 800e10a:	462b      	mov	r3, r5
 800e10c:	f7f2 fa7c 	bl	8000608 <__aeabi_dmul>
 800e110:	a341      	add	r3, pc, #260	; (adr r3, 800e218 <__ieee754_acos+0x480>)
 800e112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e116:	f7f2 f8c1 	bl	800029c <__adddf3>
 800e11a:	4622      	mov	r2, r4
 800e11c:	462b      	mov	r3, r5
 800e11e:	f7f2 fa73 	bl	8000608 <__aeabi_dmul>
 800e122:	a33f      	add	r3, pc, #252	; (adr r3, 800e220 <__ieee754_acos+0x488>)
 800e124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e128:	4682      	mov	sl, r0
 800e12a:	468b      	mov	fp, r1
 800e12c:	4620      	mov	r0, r4
 800e12e:	4629      	mov	r1, r5
 800e130:	f7f2 fa6a 	bl	8000608 <__aeabi_dmul>
 800e134:	a33c      	add	r3, pc, #240	; (adr r3, 800e228 <__ieee754_acos+0x490>)
 800e136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13a:	f7f2 f8ad 	bl	8000298 <__aeabi_dsub>
 800e13e:	4622      	mov	r2, r4
 800e140:	462b      	mov	r3, r5
 800e142:	f7f2 fa61 	bl	8000608 <__aeabi_dmul>
 800e146:	a33a      	add	r3, pc, #232	; (adr r3, 800e230 <__ieee754_acos+0x498>)
 800e148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14c:	f7f2 f8a6 	bl	800029c <__adddf3>
 800e150:	4622      	mov	r2, r4
 800e152:	462b      	mov	r3, r5
 800e154:	f7f2 fa58 	bl	8000608 <__aeabi_dmul>
 800e158:	a337      	add	r3, pc, #220	; (adr r3, 800e238 <__ieee754_acos+0x4a0>)
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	f7f2 f89b 	bl	8000298 <__aeabi_dsub>
 800e162:	4622      	mov	r2, r4
 800e164:	462b      	mov	r3, r5
 800e166:	f7f2 fa4f 	bl	8000608 <__aeabi_dmul>
 800e16a:	2200      	movs	r2, #0
 800e16c:	4b36      	ldr	r3, [pc, #216]	; (800e248 <__ieee754_acos+0x4b0>)
 800e16e:	f7f2 f895 	bl	800029c <__adddf3>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	4650      	mov	r0, sl
 800e178:	4659      	mov	r1, fp
 800e17a:	f7f2 fb6f 	bl	800085c <__aeabi_ddiv>
 800e17e:	4642      	mov	r2, r8
 800e180:	464b      	mov	r3, r9
 800e182:	f7f2 fa41 	bl	8000608 <__aeabi_dmul>
 800e186:	2600      	movs	r6, #0
 800e188:	4682      	mov	sl, r0
 800e18a:	468b      	mov	fp, r1
 800e18c:	4632      	mov	r2, r6
 800e18e:	464b      	mov	r3, r9
 800e190:	4630      	mov	r0, r6
 800e192:	4649      	mov	r1, r9
 800e194:	f7f2 fa38 	bl	8000608 <__aeabi_dmul>
 800e198:	4602      	mov	r2, r0
 800e19a:	460b      	mov	r3, r1
 800e19c:	4620      	mov	r0, r4
 800e19e:	4629      	mov	r1, r5
 800e1a0:	f7f2 f87a 	bl	8000298 <__aeabi_dsub>
 800e1a4:	4632      	mov	r2, r6
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	460d      	mov	r5, r1
 800e1aa:	464b      	mov	r3, r9
 800e1ac:	4640      	mov	r0, r8
 800e1ae:	4649      	mov	r1, r9
 800e1b0:	f7f2 f874 	bl	800029c <__adddf3>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	f7f2 fb4e 	bl	800085c <__aeabi_ddiv>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	4650      	mov	r0, sl
 800e1c6:	4659      	mov	r1, fp
 800e1c8:	f7f2 f868 	bl	800029c <__adddf3>
 800e1cc:	4632      	mov	r2, r6
 800e1ce:	464b      	mov	r3, r9
 800e1d0:	f7f2 f864 	bl	800029c <__adddf3>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	f7f2 f860 	bl	800029c <__adddf3>
 800e1dc:	e5f1      	b.n	800ddc2 <__ieee754_acos+0x2a>
 800e1de:	2000      	movs	r0, #0
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	e5ee      	b.n	800ddc2 <__ieee754_acos+0x2a>
 800e1e4:	a116      	add	r1, pc, #88	; (adr r1, 800e240 <__ieee754_acos+0x4a8>)
 800e1e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ea:	e5ea      	b.n	800ddc2 <__ieee754_acos+0x2a>
 800e1ec:	f3af 8000 	nop.w
 800e1f0:	0dfdf709 	.word	0x0dfdf709
 800e1f4:	3f023de1 	.word	0x3f023de1
 800e1f8:	7501b288 	.word	0x7501b288
 800e1fc:	3f49efe0 	.word	0x3f49efe0
 800e200:	b5688f3b 	.word	0xb5688f3b
 800e204:	3fa48228 	.word	0x3fa48228
 800e208:	0e884455 	.word	0x0e884455
 800e20c:	3fc9c155 	.word	0x3fc9c155
 800e210:	03eb6f7d 	.word	0x03eb6f7d
 800e214:	3fd4d612 	.word	0x3fd4d612
 800e218:	55555555 	.word	0x55555555
 800e21c:	3fc55555 	.word	0x3fc55555
 800e220:	b12e9282 	.word	0xb12e9282
 800e224:	3fb3b8c5 	.word	0x3fb3b8c5
 800e228:	1b8d0159 	.word	0x1b8d0159
 800e22c:	3fe6066c 	.word	0x3fe6066c
 800e230:	9c598ac8 	.word	0x9c598ac8
 800e234:	40002ae5 	.word	0x40002ae5
 800e238:	1c8a2d4b 	.word	0x1c8a2d4b
 800e23c:	40033a27 	.word	0x40033a27
 800e240:	54442d18 	.word	0x54442d18
 800e244:	3ff921fb 	.word	0x3ff921fb
 800e248:	3ff00000 	.word	0x3ff00000
 800e24c:	3fe00000 	.word	0x3fe00000

0800e250 <__ieee754_atan2>:
 800e250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e254:	ec57 6b11 	vmov	r6, r7, d1
 800e258:	4273      	negs	r3, r6
 800e25a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e25e:	4333      	orrs	r3, r6
 800e260:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800e408 <__ieee754_atan2+0x1b8>
 800e264:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e268:	4573      	cmp	r3, lr
 800e26a:	ec51 0b10 	vmov	r0, r1, d0
 800e26e:	ee11 8a10 	vmov	r8, s2
 800e272:	d80a      	bhi.n	800e28a <__ieee754_atan2+0x3a>
 800e274:	4244      	negs	r4, r0
 800e276:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e27a:	4304      	orrs	r4, r0
 800e27c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e280:	4574      	cmp	r4, lr
 800e282:	468c      	mov	ip, r1
 800e284:	ee10 9a10 	vmov	r9, s0
 800e288:	d907      	bls.n	800e29a <__ieee754_atan2+0x4a>
 800e28a:	4632      	mov	r2, r6
 800e28c:	463b      	mov	r3, r7
 800e28e:	f7f2 f805 	bl	800029c <__adddf3>
 800e292:	ec41 0b10 	vmov	d0, r0, r1
 800e296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e29a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e29e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2a2:	4334      	orrs	r4, r6
 800e2a4:	d103      	bne.n	800e2ae <__ieee754_atan2+0x5e>
 800e2a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2aa:	f001 bd29 	b.w	800fd00 <atan>
 800e2ae:	17bc      	asrs	r4, r7, #30
 800e2b0:	f004 0402 	and.w	r4, r4, #2
 800e2b4:	ea53 0909 	orrs.w	r9, r3, r9
 800e2b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e2bc:	d107      	bne.n	800e2ce <__ieee754_atan2+0x7e>
 800e2be:	2c02      	cmp	r4, #2
 800e2c0:	d073      	beq.n	800e3aa <__ieee754_atan2+0x15a>
 800e2c2:	2c03      	cmp	r4, #3
 800e2c4:	d1e5      	bne.n	800e292 <__ieee754_atan2+0x42>
 800e2c6:	a13e      	add	r1, pc, #248	; (adr r1, 800e3c0 <__ieee754_atan2+0x170>)
 800e2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2cc:	e7e1      	b.n	800e292 <__ieee754_atan2+0x42>
 800e2ce:	ea52 0808 	orrs.w	r8, r2, r8
 800e2d2:	d106      	bne.n	800e2e2 <__ieee754_atan2+0x92>
 800e2d4:	f1bc 0f00 	cmp.w	ip, #0
 800e2d8:	da6b      	bge.n	800e3b2 <__ieee754_atan2+0x162>
 800e2da:	a13b      	add	r1, pc, #236	; (adr r1, 800e3c8 <__ieee754_atan2+0x178>)
 800e2dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2e0:	e7d7      	b.n	800e292 <__ieee754_atan2+0x42>
 800e2e2:	4572      	cmp	r2, lr
 800e2e4:	d120      	bne.n	800e328 <__ieee754_atan2+0xd8>
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d111      	bne.n	800e30e <__ieee754_atan2+0xbe>
 800e2ea:	2c02      	cmp	r4, #2
 800e2ec:	d007      	beq.n	800e2fe <__ieee754_atan2+0xae>
 800e2ee:	2c03      	cmp	r4, #3
 800e2f0:	d009      	beq.n	800e306 <__ieee754_atan2+0xb6>
 800e2f2:	2c01      	cmp	r4, #1
 800e2f4:	d155      	bne.n	800e3a2 <__ieee754_atan2+0x152>
 800e2f6:	a136      	add	r1, pc, #216	; (adr r1, 800e3d0 <__ieee754_atan2+0x180>)
 800e2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2fc:	e7c9      	b.n	800e292 <__ieee754_atan2+0x42>
 800e2fe:	a136      	add	r1, pc, #216	; (adr r1, 800e3d8 <__ieee754_atan2+0x188>)
 800e300:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e304:	e7c5      	b.n	800e292 <__ieee754_atan2+0x42>
 800e306:	a136      	add	r1, pc, #216	; (adr r1, 800e3e0 <__ieee754_atan2+0x190>)
 800e308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e30c:	e7c1      	b.n	800e292 <__ieee754_atan2+0x42>
 800e30e:	2c02      	cmp	r4, #2
 800e310:	d04b      	beq.n	800e3aa <__ieee754_atan2+0x15a>
 800e312:	2c03      	cmp	r4, #3
 800e314:	d0d7      	beq.n	800e2c6 <__ieee754_atan2+0x76>
 800e316:	2c01      	cmp	r4, #1
 800e318:	f04f 0000 	mov.w	r0, #0
 800e31c:	d102      	bne.n	800e324 <__ieee754_atan2+0xd4>
 800e31e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e322:	e7b6      	b.n	800e292 <__ieee754_atan2+0x42>
 800e324:	2100      	movs	r1, #0
 800e326:	e7b4      	b.n	800e292 <__ieee754_atan2+0x42>
 800e328:	4573      	cmp	r3, lr
 800e32a:	d0d3      	beq.n	800e2d4 <__ieee754_atan2+0x84>
 800e32c:	1a9b      	subs	r3, r3, r2
 800e32e:	151b      	asrs	r3, r3, #20
 800e330:	2b3c      	cmp	r3, #60	; 0x3c
 800e332:	dc1e      	bgt.n	800e372 <__ieee754_atan2+0x122>
 800e334:	2f00      	cmp	r7, #0
 800e336:	da01      	bge.n	800e33c <__ieee754_atan2+0xec>
 800e338:	333c      	adds	r3, #60	; 0x3c
 800e33a:	db1e      	blt.n	800e37a <__ieee754_atan2+0x12a>
 800e33c:	4632      	mov	r2, r6
 800e33e:	463b      	mov	r3, r7
 800e340:	f7f2 fa8c 	bl	800085c <__aeabi_ddiv>
 800e344:	ec41 0b10 	vmov	d0, r0, r1
 800e348:	f001 fe7a 	bl	8010040 <fabs>
 800e34c:	f001 fcd8 	bl	800fd00 <atan>
 800e350:	ec51 0b10 	vmov	r0, r1, d0
 800e354:	2c01      	cmp	r4, #1
 800e356:	d013      	beq.n	800e380 <__ieee754_atan2+0x130>
 800e358:	2c02      	cmp	r4, #2
 800e35a:	d015      	beq.n	800e388 <__ieee754_atan2+0x138>
 800e35c:	2c00      	cmp	r4, #0
 800e35e:	d098      	beq.n	800e292 <__ieee754_atan2+0x42>
 800e360:	a321      	add	r3, pc, #132	; (adr r3, 800e3e8 <__ieee754_atan2+0x198>)
 800e362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e366:	f7f1 ff97 	bl	8000298 <__aeabi_dsub>
 800e36a:	a321      	add	r3, pc, #132	; (adr r3, 800e3f0 <__ieee754_atan2+0x1a0>)
 800e36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e370:	e014      	b.n	800e39c <__ieee754_atan2+0x14c>
 800e372:	a121      	add	r1, pc, #132	; (adr r1, 800e3f8 <__ieee754_atan2+0x1a8>)
 800e374:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e378:	e7ec      	b.n	800e354 <__ieee754_atan2+0x104>
 800e37a:	2000      	movs	r0, #0
 800e37c:	2100      	movs	r1, #0
 800e37e:	e7e9      	b.n	800e354 <__ieee754_atan2+0x104>
 800e380:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e384:	4619      	mov	r1, r3
 800e386:	e784      	b.n	800e292 <__ieee754_atan2+0x42>
 800e388:	a317      	add	r3, pc, #92	; (adr r3, 800e3e8 <__ieee754_atan2+0x198>)
 800e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38e:	f7f1 ff83 	bl	8000298 <__aeabi_dsub>
 800e392:	4602      	mov	r2, r0
 800e394:	460b      	mov	r3, r1
 800e396:	a116      	add	r1, pc, #88	; (adr r1, 800e3f0 <__ieee754_atan2+0x1a0>)
 800e398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e39c:	f7f1 ff7c 	bl	8000298 <__aeabi_dsub>
 800e3a0:	e777      	b.n	800e292 <__ieee754_atan2+0x42>
 800e3a2:	a117      	add	r1, pc, #92	; (adr r1, 800e400 <__ieee754_atan2+0x1b0>)
 800e3a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3a8:	e773      	b.n	800e292 <__ieee754_atan2+0x42>
 800e3aa:	a111      	add	r1, pc, #68	; (adr r1, 800e3f0 <__ieee754_atan2+0x1a0>)
 800e3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3b0:	e76f      	b.n	800e292 <__ieee754_atan2+0x42>
 800e3b2:	a111      	add	r1, pc, #68	; (adr r1, 800e3f8 <__ieee754_atan2+0x1a8>)
 800e3b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3b8:	e76b      	b.n	800e292 <__ieee754_atan2+0x42>
 800e3ba:	bf00      	nop
 800e3bc:	f3af 8000 	nop.w
 800e3c0:	54442d18 	.word	0x54442d18
 800e3c4:	c00921fb 	.word	0xc00921fb
 800e3c8:	54442d18 	.word	0x54442d18
 800e3cc:	bff921fb 	.word	0xbff921fb
 800e3d0:	54442d18 	.word	0x54442d18
 800e3d4:	bfe921fb 	.word	0xbfe921fb
 800e3d8:	7f3321d2 	.word	0x7f3321d2
 800e3dc:	4002d97c 	.word	0x4002d97c
 800e3e0:	7f3321d2 	.word	0x7f3321d2
 800e3e4:	c002d97c 	.word	0xc002d97c
 800e3e8:	33145c07 	.word	0x33145c07
 800e3ec:	3ca1a626 	.word	0x3ca1a626
 800e3f0:	54442d18 	.word	0x54442d18
 800e3f4:	400921fb 	.word	0x400921fb
 800e3f8:	54442d18 	.word	0x54442d18
 800e3fc:	3ff921fb 	.word	0x3ff921fb
 800e400:	54442d18 	.word	0x54442d18
 800e404:	3fe921fb 	.word	0x3fe921fb
 800e408:	7ff00000 	.word	0x7ff00000
 800e40c:	00000000 	.word	0x00000000

0800e410 <__ieee754_pow>:
 800e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e414:	b091      	sub	sp, #68	; 0x44
 800e416:	ed8d 1b00 	vstr	d1, [sp]
 800e41a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e41e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e422:	ea58 0302 	orrs.w	r3, r8, r2
 800e426:	ec57 6b10 	vmov	r6, r7, d0
 800e42a:	f000 84be 	beq.w	800edaa <__ieee754_pow+0x99a>
 800e42e:	4b7a      	ldr	r3, [pc, #488]	; (800e618 <__ieee754_pow+0x208>)
 800e430:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e434:	429c      	cmp	r4, r3
 800e436:	463d      	mov	r5, r7
 800e438:	ee10 aa10 	vmov	sl, s0
 800e43c:	dc09      	bgt.n	800e452 <__ieee754_pow+0x42>
 800e43e:	d103      	bne.n	800e448 <__ieee754_pow+0x38>
 800e440:	b93e      	cbnz	r6, 800e452 <__ieee754_pow+0x42>
 800e442:	45a0      	cmp	r8, r4
 800e444:	dc0d      	bgt.n	800e462 <__ieee754_pow+0x52>
 800e446:	e001      	b.n	800e44c <__ieee754_pow+0x3c>
 800e448:	4598      	cmp	r8, r3
 800e44a:	dc02      	bgt.n	800e452 <__ieee754_pow+0x42>
 800e44c:	4598      	cmp	r8, r3
 800e44e:	d10e      	bne.n	800e46e <__ieee754_pow+0x5e>
 800e450:	b16a      	cbz	r2, 800e46e <__ieee754_pow+0x5e>
 800e452:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e456:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e45a:	ea54 030a 	orrs.w	r3, r4, sl
 800e45e:	f000 84a4 	beq.w	800edaa <__ieee754_pow+0x99a>
 800e462:	486e      	ldr	r0, [pc, #440]	; (800e61c <__ieee754_pow+0x20c>)
 800e464:	b011      	add	sp, #68	; 0x44
 800e466:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46a:	f001 be85 	b.w	8010178 <nan>
 800e46e:	2d00      	cmp	r5, #0
 800e470:	da53      	bge.n	800e51a <__ieee754_pow+0x10a>
 800e472:	4b6b      	ldr	r3, [pc, #428]	; (800e620 <__ieee754_pow+0x210>)
 800e474:	4598      	cmp	r8, r3
 800e476:	dc4d      	bgt.n	800e514 <__ieee754_pow+0x104>
 800e478:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e47c:	4598      	cmp	r8, r3
 800e47e:	dd4c      	ble.n	800e51a <__ieee754_pow+0x10a>
 800e480:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e484:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e488:	2b14      	cmp	r3, #20
 800e48a:	dd26      	ble.n	800e4da <__ieee754_pow+0xca>
 800e48c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e490:	fa22 f103 	lsr.w	r1, r2, r3
 800e494:	fa01 f303 	lsl.w	r3, r1, r3
 800e498:	4293      	cmp	r3, r2
 800e49a:	d13e      	bne.n	800e51a <__ieee754_pow+0x10a>
 800e49c:	f001 0101 	and.w	r1, r1, #1
 800e4a0:	f1c1 0b02 	rsb	fp, r1, #2
 800e4a4:	2a00      	cmp	r2, #0
 800e4a6:	d15b      	bne.n	800e560 <__ieee754_pow+0x150>
 800e4a8:	4b5b      	ldr	r3, [pc, #364]	; (800e618 <__ieee754_pow+0x208>)
 800e4aa:	4598      	cmp	r8, r3
 800e4ac:	d124      	bne.n	800e4f8 <__ieee754_pow+0xe8>
 800e4ae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e4b2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e4b6:	ea53 030a 	orrs.w	r3, r3, sl
 800e4ba:	f000 8476 	beq.w	800edaa <__ieee754_pow+0x99a>
 800e4be:	4b59      	ldr	r3, [pc, #356]	; (800e624 <__ieee754_pow+0x214>)
 800e4c0:	429c      	cmp	r4, r3
 800e4c2:	dd2d      	ble.n	800e520 <__ieee754_pow+0x110>
 800e4c4:	f1b9 0f00 	cmp.w	r9, #0
 800e4c8:	f280 8473 	bge.w	800edb2 <__ieee754_pow+0x9a2>
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	ec41 0b10 	vmov	d0, r0, r1
 800e4d4:	b011      	add	sp, #68	; 0x44
 800e4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4da:	2a00      	cmp	r2, #0
 800e4dc:	d13e      	bne.n	800e55c <__ieee754_pow+0x14c>
 800e4de:	f1c3 0314 	rsb	r3, r3, #20
 800e4e2:	fa48 f103 	asr.w	r1, r8, r3
 800e4e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e4ea:	4543      	cmp	r3, r8
 800e4ec:	f040 8469 	bne.w	800edc2 <__ieee754_pow+0x9b2>
 800e4f0:	f001 0101 	and.w	r1, r1, #1
 800e4f4:	f1c1 0b02 	rsb	fp, r1, #2
 800e4f8:	4b4b      	ldr	r3, [pc, #300]	; (800e628 <__ieee754_pow+0x218>)
 800e4fa:	4598      	cmp	r8, r3
 800e4fc:	d118      	bne.n	800e530 <__ieee754_pow+0x120>
 800e4fe:	f1b9 0f00 	cmp.w	r9, #0
 800e502:	f280 845a 	bge.w	800edba <__ieee754_pow+0x9aa>
 800e506:	4948      	ldr	r1, [pc, #288]	; (800e628 <__ieee754_pow+0x218>)
 800e508:	4632      	mov	r2, r6
 800e50a:	463b      	mov	r3, r7
 800e50c:	2000      	movs	r0, #0
 800e50e:	f7f2 f9a5 	bl	800085c <__aeabi_ddiv>
 800e512:	e7dd      	b.n	800e4d0 <__ieee754_pow+0xc0>
 800e514:	f04f 0b02 	mov.w	fp, #2
 800e518:	e7c4      	b.n	800e4a4 <__ieee754_pow+0x94>
 800e51a:	f04f 0b00 	mov.w	fp, #0
 800e51e:	e7c1      	b.n	800e4a4 <__ieee754_pow+0x94>
 800e520:	f1b9 0f00 	cmp.w	r9, #0
 800e524:	dad2      	bge.n	800e4cc <__ieee754_pow+0xbc>
 800e526:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e52a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e52e:	e7cf      	b.n	800e4d0 <__ieee754_pow+0xc0>
 800e530:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e534:	d106      	bne.n	800e544 <__ieee754_pow+0x134>
 800e536:	4632      	mov	r2, r6
 800e538:	463b      	mov	r3, r7
 800e53a:	4610      	mov	r0, r2
 800e53c:	4619      	mov	r1, r3
 800e53e:	f7f2 f863 	bl	8000608 <__aeabi_dmul>
 800e542:	e7c5      	b.n	800e4d0 <__ieee754_pow+0xc0>
 800e544:	4b39      	ldr	r3, [pc, #228]	; (800e62c <__ieee754_pow+0x21c>)
 800e546:	4599      	cmp	r9, r3
 800e548:	d10a      	bne.n	800e560 <__ieee754_pow+0x150>
 800e54a:	2d00      	cmp	r5, #0
 800e54c:	db08      	blt.n	800e560 <__ieee754_pow+0x150>
 800e54e:	ec47 6b10 	vmov	d0, r6, r7
 800e552:	b011      	add	sp, #68	; 0x44
 800e554:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e558:	f000 be5c 	b.w	800f214 <__ieee754_sqrt>
 800e55c:	f04f 0b00 	mov.w	fp, #0
 800e560:	ec47 6b10 	vmov	d0, r6, r7
 800e564:	f001 fd6c 	bl	8010040 <fabs>
 800e568:	ec51 0b10 	vmov	r0, r1, d0
 800e56c:	f1ba 0f00 	cmp.w	sl, #0
 800e570:	d127      	bne.n	800e5c2 <__ieee754_pow+0x1b2>
 800e572:	b124      	cbz	r4, 800e57e <__ieee754_pow+0x16e>
 800e574:	4b2c      	ldr	r3, [pc, #176]	; (800e628 <__ieee754_pow+0x218>)
 800e576:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d121      	bne.n	800e5c2 <__ieee754_pow+0x1b2>
 800e57e:	f1b9 0f00 	cmp.w	r9, #0
 800e582:	da05      	bge.n	800e590 <__ieee754_pow+0x180>
 800e584:	4602      	mov	r2, r0
 800e586:	460b      	mov	r3, r1
 800e588:	2000      	movs	r0, #0
 800e58a:	4927      	ldr	r1, [pc, #156]	; (800e628 <__ieee754_pow+0x218>)
 800e58c:	f7f2 f966 	bl	800085c <__aeabi_ddiv>
 800e590:	2d00      	cmp	r5, #0
 800e592:	da9d      	bge.n	800e4d0 <__ieee754_pow+0xc0>
 800e594:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e598:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e59c:	ea54 030b 	orrs.w	r3, r4, fp
 800e5a0:	d108      	bne.n	800e5b4 <__ieee754_pow+0x1a4>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4610      	mov	r0, r2
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	f7f1 fe75 	bl	8000298 <__aeabi_dsub>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	e7ac      	b.n	800e50e <__ieee754_pow+0xfe>
 800e5b4:	f1bb 0f01 	cmp.w	fp, #1
 800e5b8:	d18a      	bne.n	800e4d0 <__ieee754_pow+0xc0>
 800e5ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5be:	4619      	mov	r1, r3
 800e5c0:	e786      	b.n	800e4d0 <__ieee754_pow+0xc0>
 800e5c2:	0fed      	lsrs	r5, r5, #31
 800e5c4:	1e6b      	subs	r3, r5, #1
 800e5c6:	930d      	str	r3, [sp, #52]	; 0x34
 800e5c8:	ea5b 0303 	orrs.w	r3, fp, r3
 800e5cc:	d102      	bne.n	800e5d4 <__ieee754_pow+0x1c4>
 800e5ce:	4632      	mov	r2, r6
 800e5d0:	463b      	mov	r3, r7
 800e5d2:	e7e8      	b.n	800e5a6 <__ieee754_pow+0x196>
 800e5d4:	4b16      	ldr	r3, [pc, #88]	; (800e630 <__ieee754_pow+0x220>)
 800e5d6:	4598      	cmp	r8, r3
 800e5d8:	f340 80fe 	ble.w	800e7d8 <__ieee754_pow+0x3c8>
 800e5dc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e5e0:	4598      	cmp	r8, r3
 800e5e2:	dd0a      	ble.n	800e5fa <__ieee754_pow+0x1ea>
 800e5e4:	4b0f      	ldr	r3, [pc, #60]	; (800e624 <__ieee754_pow+0x214>)
 800e5e6:	429c      	cmp	r4, r3
 800e5e8:	dc0d      	bgt.n	800e606 <__ieee754_pow+0x1f6>
 800e5ea:	f1b9 0f00 	cmp.w	r9, #0
 800e5ee:	f6bf af6d 	bge.w	800e4cc <__ieee754_pow+0xbc>
 800e5f2:	a307      	add	r3, pc, #28	; (adr r3, 800e610 <__ieee754_pow+0x200>)
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	e79f      	b.n	800e53a <__ieee754_pow+0x12a>
 800e5fa:	4b0e      	ldr	r3, [pc, #56]	; (800e634 <__ieee754_pow+0x224>)
 800e5fc:	429c      	cmp	r4, r3
 800e5fe:	ddf4      	ble.n	800e5ea <__ieee754_pow+0x1da>
 800e600:	4b09      	ldr	r3, [pc, #36]	; (800e628 <__ieee754_pow+0x218>)
 800e602:	429c      	cmp	r4, r3
 800e604:	dd18      	ble.n	800e638 <__ieee754_pow+0x228>
 800e606:	f1b9 0f00 	cmp.w	r9, #0
 800e60a:	dcf2      	bgt.n	800e5f2 <__ieee754_pow+0x1e2>
 800e60c:	e75e      	b.n	800e4cc <__ieee754_pow+0xbc>
 800e60e:	bf00      	nop
 800e610:	8800759c 	.word	0x8800759c
 800e614:	7e37e43c 	.word	0x7e37e43c
 800e618:	7ff00000 	.word	0x7ff00000
 800e61c:	080106b9 	.word	0x080106b9
 800e620:	433fffff 	.word	0x433fffff
 800e624:	3fefffff 	.word	0x3fefffff
 800e628:	3ff00000 	.word	0x3ff00000
 800e62c:	3fe00000 	.word	0x3fe00000
 800e630:	41e00000 	.word	0x41e00000
 800e634:	3feffffe 	.word	0x3feffffe
 800e638:	2200      	movs	r2, #0
 800e63a:	4b63      	ldr	r3, [pc, #396]	; (800e7c8 <__ieee754_pow+0x3b8>)
 800e63c:	f7f1 fe2c 	bl	8000298 <__aeabi_dsub>
 800e640:	a355      	add	r3, pc, #340	; (adr r3, 800e798 <__ieee754_pow+0x388>)
 800e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e646:	4604      	mov	r4, r0
 800e648:	460d      	mov	r5, r1
 800e64a:	f7f1 ffdd 	bl	8000608 <__aeabi_dmul>
 800e64e:	a354      	add	r3, pc, #336	; (adr r3, 800e7a0 <__ieee754_pow+0x390>)
 800e650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e654:	4606      	mov	r6, r0
 800e656:	460f      	mov	r7, r1
 800e658:	4620      	mov	r0, r4
 800e65a:	4629      	mov	r1, r5
 800e65c:	f7f1 ffd4 	bl	8000608 <__aeabi_dmul>
 800e660:	2200      	movs	r2, #0
 800e662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e666:	4b59      	ldr	r3, [pc, #356]	; (800e7cc <__ieee754_pow+0x3bc>)
 800e668:	4620      	mov	r0, r4
 800e66a:	4629      	mov	r1, r5
 800e66c:	f7f1 ffcc 	bl	8000608 <__aeabi_dmul>
 800e670:	4602      	mov	r2, r0
 800e672:	460b      	mov	r3, r1
 800e674:	a14c      	add	r1, pc, #304	; (adr r1, 800e7a8 <__ieee754_pow+0x398>)
 800e676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e67a:	f7f1 fe0d 	bl	8000298 <__aeabi_dsub>
 800e67e:	4622      	mov	r2, r4
 800e680:	462b      	mov	r3, r5
 800e682:	f7f1 ffc1 	bl	8000608 <__aeabi_dmul>
 800e686:	4602      	mov	r2, r0
 800e688:	460b      	mov	r3, r1
 800e68a:	2000      	movs	r0, #0
 800e68c:	4950      	ldr	r1, [pc, #320]	; (800e7d0 <__ieee754_pow+0x3c0>)
 800e68e:	f7f1 fe03 	bl	8000298 <__aeabi_dsub>
 800e692:	4622      	mov	r2, r4
 800e694:	462b      	mov	r3, r5
 800e696:	4680      	mov	r8, r0
 800e698:	4689      	mov	r9, r1
 800e69a:	4620      	mov	r0, r4
 800e69c:	4629      	mov	r1, r5
 800e69e:	f7f1 ffb3 	bl	8000608 <__aeabi_dmul>
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	4640      	mov	r0, r8
 800e6a8:	4649      	mov	r1, r9
 800e6aa:	f7f1 ffad 	bl	8000608 <__aeabi_dmul>
 800e6ae:	a340      	add	r3, pc, #256	; (adr r3, 800e7b0 <__ieee754_pow+0x3a0>)
 800e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b4:	f7f1 ffa8 	bl	8000608 <__aeabi_dmul>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6c0:	f7f1 fdea 	bl	8000298 <__aeabi_dsub>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	460d      	mov	r5, r1
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	4639      	mov	r1, r7
 800e6d0:	f7f1 fde4 	bl	800029c <__adddf3>
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e6da:	4632      	mov	r2, r6
 800e6dc:	463b      	mov	r3, r7
 800e6de:	f7f1 fddb 	bl	8000298 <__aeabi_dsub>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	4629      	mov	r1, r5
 800e6ea:	f7f1 fdd5 	bl	8000298 <__aeabi_dsub>
 800e6ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e6f4:	4313      	orrs	r3, r2
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	460f      	mov	r7, r1
 800e6fa:	f040 81eb 	bne.w	800ead4 <__ieee754_pow+0x6c4>
 800e6fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e7b8 <__ieee754_pow+0x3a8>
 800e702:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e706:	2400      	movs	r4, #0
 800e708:	4622      	mov	r2, r4
 800e70a:	462b      	mov	r3, r5
 800e70c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e710:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e714:	f7f1 fdc0 	bl	8000298 <__aeabi_dsub>
 800e718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e71c:	f7f1 ff74 	bl	8000608 <__aeabi_dmul>
 800e720:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e724:	4680      	mov	r8, r0
 800e726:	4689      	mov	r9, r1
 800e728:	4630      	mov	r0, r6
 800e72a:	4639      	mov	r1, r7
 800e72c:	f7f1 ff6c 	bl	8000608 <__aeabi_dmul>
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	4640      	mov	r0, r8
 800e736:	4649      	mov	r1, r9
 800e738:	f7f1 fdb0 	bl	800029c <__adddf3>
 800e73c:	4622      	mov	r2, r4
 800e73e:	462b      	mov	r3, r5
 800e740:	4680      	mov	r8, r0
 800e742:	4689      	mov	r9, r1
 800e744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e748:	f7f1 ff5e 	bl	8000608 <__aeabi_dmul>
 800e74c:	460b      	mov	r3, r1
 800e74e:	4604      	mov	r4, r0
 800e750:	460d      	mov	r5, r1
 800e752:	4602      	mov	r2, r0
 800e754:	4649      	mov	r1, r9
 800e756:	4640      	mov	r0, r8
 800e758:	e9cd 4500 	strd	r4, r5, [sp]
 800e75c:	f7f1 fd9e 	bl	800029c <__adddf3>
 800e760:	4b1c      	ldr	r3, [pc, #112]	; (800e7d4 <__ieee754_pow+0x3c4>)
 800e762:	4299      	cmp	r1, r3
 800e764:	4606      	mov	r6, r0
 800e766:	460f      	mov	r7, r1
 800e768:	468b      	mov	fp, r1
 800e76a:	f340 82f7 	ble.w	800ed5c <__ieee754_pow+0x94c>
 800e76e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e772:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e776:	4303      	orrs	r3, r0
 800e778:	f000 81ea 	beq.w	800eb50 <__ieee754_pow+0x740>
 800e77c:	a310      	add	r3, pc, #64	; (adr r3, 800e7c0 <__ieee754_pow+0x3b0>)
 800e77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e786:	f7f1 ff3f 	bl	8000608 <__aeabi_dmul>
 800e78a:	a30d      	add	r3, pc, #52	; (adr r3, 800e7c0 <__ieee754_pow+0x3b0>)
 800e78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e790:	e6d5      	b.n	800e53e <__ieee754_pow+0x12e>
 800e792:	bf00      	nop
 800e794:	f3af 8000 	nop.w
 800e798:	60000000 	.word	0x60000000
 800e79c:	3ff71547 	.word	0x3ff71547
 800e7a0:	f85ddf44 	.word	0xf85ddf44
 800e7a4:	3e54ae0b 	.word	0x3e54ae0b
 800e7a8:	55555555 	.word	0x55555555
 800e7ac:	3fd55555 	.word	0x3fd55555
 800e7b0:	652b82fe 	.word	0x652b82fe
 800e7b4:	3ff71547 	.word	0x3ff71547
 800e7b8:	00000000 	.word	0x00000000
 800e7bc:	bff00000 	.word	0xbff00000
 800e7c0:	8800759c 	.word	0x8800759c
 800e7c4:	7e37e43c 	.word	0x7e37e43c
 800e7c8:	3ff00000 	.word	0x3ff00000
 800e7cc:	3fd00000 	.word	0x3fd00000
 800e7d0:	3fe00000 	.word	0x3fe00000
 800e7d4:	408fffff 	.word	0x408fffff
 800e7d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e7dc:	f04f 0200 	mov.w	r2, #0
 800e7e0:	da05      	bge.n	800e7ee <__ieee754_pow+0x3de>
 800e7e2:	4bd3      	ldr	r3, [pc, #844]	; (800eb30 <__ieee754_pow+0x720>)
 800e7e4:	f7f1 ff10 	bl	8000608 <__aeabi_dmul>
 800e7e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e7ec:	460c      	mov	r4, r1
 800e7ee:	1523      	asrs	r3, r4, #20
 800e7f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e7f4:	4413      	add	r3, r2
 800e7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e7f8:	4bce      	ldr	r3, [pc, #824]	; (800eb34 <__ieee754_pow+0x724>)
 800e7fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e7fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e802:	429c      	cmp	r4, r3
 800e804:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e808:	dd08      	ble.n	800e81c <__ieee754_pow+0x40c>
 800e80a:	4bcb      	ldr	r3, [pc, #812]	; (800eb38 <__ieee754_pow+0x728>)
 800e80c:	429c      	cmp	r4, r3
 800e80e:	f340 815e 	ble.w	800eace <__ieee754_pow+0x6be>
 800e812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e814:	3301      	adds	r3, #1
 800e816:	9309      	str	r3, [sp, #36]	; 0x24
 800e818:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e81c:	f04f 0a00 	mov.w	sl, #0
 800e820:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e824:	930c      	str	r3, [sp, #48]	; 0x30
 800e826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e828:	4bc4      	ldr	r3, [pc, #784]	; (800eb3c <__ieee754_pow+0x72c>)
 800e82a:	4413      	add	r3, r2
 800e82c:	ed93 7b00 	vldr	d7, [r3]
 800e830:	4629      	mov	r1, r5
 800e832:	ec53 2b17 	vmov	r2, r3, d7
 800e836:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e83a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e83e:	f7f1 fd2b 	bl	8000298 <__aeabi_dsub>
 800e842:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e846:	4606      	mov	r6, r0
 800e848:	460f      	mov	r7, r1
 800e84a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e84e:	f7f1 fd25 	bl	800029c <__adddf3>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	2000      	movs	r0, #0
 800e858:	49b9      	ldr	r1, [pc, #740]	; (800eb40 <__ieee754_pow+0x730>)
 800e85a:	f7f1 ffff 	bl	800085c <__aeabi_ddiv>
 800e85e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e862:	4602      	mov	r2, r0
 800e864:	460b      	mov	r3, r1
 800e866:	4630      	mov	r0, r6
 800e868:	4639      	mov	r1, r7
 800e86a:	f7f1 fecd 	bl	8000608 <__aeabi_dmul>
 800e86e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e872:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e876:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e87a:	2300      	movs	r3, #0
 800e87c:	9302      	str	r3, [sp, #8]
 800e87e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e882:	106d      	asrs	r5, r5, #1
 800e884:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e888:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e88c:	2200      	movs	r2, #0
 800e88e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e892:	4640      	mov	r0, r8
 800e894:	4649      	mov	r1, r9
 800e896:	4614      	mov	r4, r2
 800e898:	461d      	mov	r5, r3
 800e89a:	f7f1 feb5 	bl	8000608 <__aeabi_dmul>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	4639      	mov	r1, r7
 800e8a6:	f7f1 fcf7 	bl	8000298 <__aeabi_dsub>
 800e8aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	460f      	mov	r7, r1
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	4629      	mov	r1, r5
 800e8b6:	f7f1 fcef 	bl	8000298 <__aeabi_dsub>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	460b      	mov	r3, r1
 800e8be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8c2:	f7f1 fce9 	bl	8000298 <__aeabi_dsub>
 800e8c6:	4642      	mov	r2, r8
 800e8c8:	464b      	mov	r3, r9
 800e8ca:	f7f1 fe9d 	bl	8000608 <__aeabi_dmul>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	4639      	mov	r1, r7
 800e8d6:	f7f1 fcdf 	bl	8000298 <__aeabi_dsub>
 800e8da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e8de:	f7f1 fe93 	bl	8000608 <__aeabi_dmul>
 800e8e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e8ea:	4610      	mov	r0, r2
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	f7f1 fe8b 	bl	8000608 <__aeabi_dmul>
 800e8f2:	a37b      	add	r3, pc, #492	; (adr r3, 800eae0 <__ieee754_pow+0x6d0>)
 800e8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f8:	4604      	mov	r4, r0
 800e8fa:	460d      	mov	r5, r1
 800e8fc:	f7f1 fe84 	bl	8000608 <__aeabi_dmul>
 800e900:	a379      	add	r3, pc, #484	; (adr r3, 800eae8 <__ieee754_pow+0x6d8>)
 800e902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e906:	f7f1 fcc9 	bl	800029c <__adddf3>
 800e90a:	4622      	mov	r2, r4
 800e90c:	462b      	mov	r3, r5
 800e90e:	f7f1 fe7b 	bl	8000608 <__aeabi_dmul>
 800e912:	a377      	add	r3, pc, #476	; (adr r3, 800eaf0 <__ieee754_pow+0x6e0>)
 800e914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e918:	f7f1 fcc0 	bl	800029c <__adddf3>
 800e91c:	4622      	mov	r2, r4
 800e91e:	462b      	mov	r3, r5
 800e920:	f7f1 fe72 	bl	8000608 <__aeabi_dmul>
 800e924:	a374      	add	r3, pc, #464	; (adr r3, 800eaf8 <__ieee754_pow+0x6e8>)
 800e926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92a:	f7f1 fcb7 	bl	800029c <__adddf3>
 800e92e:	4622      	mov	r2, r4
 800e930:	462b      	mov	r3, r5
 800e932:	f7f1 fe69 	bl	8000608 <__aeabi_dmul>
 800e936:	a372      	add	r3, pc, #456	; (adr r3, 800eb00 <__ieee754_pow+0x6f0>)
 800e938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93c:	f7f1 fcae 	bl	800029c <__adddf3>
 800e940:	4622      	mov	r2, r4
 800e942:	462b      	mov	r3, r5
 800e944:	f7f1 fe60 	bl	8000608 <__aeabi_dmul>
 800e948:	a36f      	add	r3, pc, #444	; (adr r3, 800eb08 <__ieee754_pow+0x6f8>)
 800e94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94e:	f7f1 fca5 	bl	800029c <__adddf3>
 800e952:	4622      	mov	r2, r4
 800e954:	4606      	mov	r6, r0
 800e956:	460f      	mov	r7, r1
 800e958:	462b      	mov	r3, r5
 800e95a:	4620      	mov	r0, r4
 800e95c:	4629      	mov	r1, r5
 800e95e:	f7f1 fe53 	bl	8000608 <__aeabi_dmul>
 800e962:	4602      	mov	r2, r0
 800e964:	460b      	mov	r3, r1
 800e966:	4630      	mov	r0, r6
 800e968:	4639      	mov	r1, r7
 800e96a:	f7f1 fe4d 	bl	8000608 <__aeabi_dmul>
 800e96e:	4642      	mov	r2, r8
 800e970:	4604      	mov	r4, r0
 800e972:	460d      	mov	r5, r1
 800e974:	464b      	mov	r3, r9
 800e976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e97a:	f7f1 fc8f 	bl	800029c <__adddf3>
 800e97e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e982:	f7f1 fe41 	bl	8000608 <__aeabi_dmul>
 800e986:	4622      	mov	r2, r4
 800e988:	462b      	mov	r3, r5
 800e98a:	f7f1 fc87 	bl	800029c <__adddf3>
 800e98e:	4642      	mov	r2, r8
 800e990:	4606      	mov	r6, r0
 800e992:	460f      	mov	r7, r1
 800e994:	464b      	mov	r3, r9
 800e996:	4640      	mov	r0, r8
 800e998:	4649      	mov	r1, r9
 800e99a:	f7f1 fe35 	bl	8000608 <__aeabi_dmul>
 800e99e:	2200      	movs	r2, #0
 800e9a0:	4b68      	ldr	r3, [pc, #416]	; (800eb44 <__ieee754_pow+0x734>)
 800e9a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e9a6:	f7f1 fc79 	bl	800029c <__adddf3>
 800e9aa:	4632      	mov	r2, r6
 800e9ac:	463b      	mov	r3, r7
 800e9ae:	f7f1 fc75 	bl	800029c <__adddf3>
 800e9b2:	9802      	ldr	r0, [sp, #8]
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4640      	mov	r0, r8
 800e9be:	4649      	mov	r1, r9
 800e9c0:	f7f1 fe22 	bl	8000608 <__aeabi_dmul>
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	4680      	mov	r8, r0
 800e9c8:	4689      	mov	r9, r1
 800e9ca:	4b5e      	ldr	r3, [pc, #376]	; (800eb44 <__ieee754_pow+0x734>)
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	4629      	mov	r1, r5
 800e9d0:	f7f1 fc62 	bl	8000298 <__aeabi_dsub>
 800e9d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e9d8:	f7f1 fc5e 	bl	8000298 <__aeabi_dsub>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	4639      	mov	r1, r7
 800e9e4:	f7f1 fc58 	bl	8000298 <__aeabi_dsub>
 800e9e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9ec:	f7f1 fe0c 	bl	8000608 <__aeabi_dmul>
 800e9f0:	4622      	mov	r2, r4
 800e9f2:	4606      	mov	r6, r0
 800e9f4:	460f      	mov	r7, r1
 800e9f6:	462b      	mov	r3, r5
 800e9f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9fc:	f7f1 fe04 	bl	8000608 <__aeabi_dmul>
 800ea00:	4602      	mov	r2, r0
 800ea02:	460b      	mov	r3, r1
 800ea04:	4630      	mov	r0, r6
 800ea06:	4639      	mov	r1, r7
 800ea08:	f7f1 fc48 	bl	800029c <__adddf3>
 800ea0c:	4606      	mov	r6, r0
 800ea0e:	460f      	mov	r7, r1
 800ea10:	4602      	mov	r2, r0
 800ea12:	460b      	mov	r3, r1
 800ea14:	4640      	mov	r0, r8
 800ea16:	4649      	mov	r1, r9
 800ea18:	f7f1 fc40 	bl	800029c <__adddf3>
 800ea1c:	9802      	ldr	r0, [sp, #8]
 800ea1e:	a33c      	add	r3, pc, #240	; (adr r3, 800eb10 <__ieee754_pow+0x700>)
 800ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea24:	4604      	mov	r4, r0
 800ea26:	460d      	mov	r5, r1
 800ea28:	f7f1 fdee 	bl	8000608 <__aeabi_dmul>
 800ea2c:	4642      	mov	r2, r8
 800ea2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea32:	464b      	mov	r3, r9
 800ea34:	4620      	mov	r0, r4
 800ea36:	4629      	mov	r1, r5
 800ea38:	f7f1 fc2e 	bl	8000298 <__aeabi_dsub>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	460b      	mov	r3, r1
 800ea40:	4630      	mov	r0, r6
 800ea42:	4639      	mov	r1, r7
 800ea44:	f7f1 fc28 	bl	8000298 <__aeabi_dsub>
 800ea48:	a333      	add	r3, pc, #204	; (adr r3, 800eb18 <__ieee754_pow+0x708>)
 800ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4e:	f7f1 fddb 	bl	8000608 <__aeabi_dmul>
 800ea52:	a333      	add	r3, pc, #204	; (adr r3, 800eb20 <__ieee754_pow+0x710>)
 800ea54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea58:	4606      	mov	r6, r0
 800ea5a:	460f      	mov	r7, r1
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	4629      	mov	r1, r5
 800ea60:	f7f1 fdd2 	bl	8000608 <__aeabi_dmul>
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	4630      	mov	r0, r6
 800ea6a:	4639      	mov	r1, r7
 800ea6c:	f7f1 fc16 	bl	800029c <__adddf3>
 800ea70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea72:	4b35      	ldr	r3, [pc, #212]	; (800eb48 <__ieee754_pow+0x738>)
 800ea74:	4413      	add	r3, r2
 800ea76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7a:	f7f1 fc0f 	bl	800029c <__adddf3>
 800ea7e:	4604      	mov	r4, r0
 800ea80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea82:	460d      	mov	r5, r1
 800ea84:	f7f1 fd56 	bl	8000534 <__aeabi_i2d>
 800ea88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea8a:	4b30      	ldr	r3, [pc, #192]	; (800eb4c <__ieee754_pow+0x73c>)
 800ea8c:	4413      	add	r3, r2
 800ea8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea92:	4606      	mov	r6, r0
 800ea94:	460f      	mov	r7, r1
 800ea96:	4622      	mov	r2, r4
 800ea98:	462b      	mov	r3, r5
 800ea9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea9e:	f7f1 fbfd 	bl	800029c <__adddf3>
 800eaa2:	4642      	mov	r2, r8
 800eaa4:	464b      	mov	r3, r9
 800eaa6:	f7f1 fbf9 	bl	800029c <__adddf3>
 800eaaa:	4632      	mov	r2, r6
 800eaac:	463b      	mov	r3, r7
 800eaae:	f7f1 fbf5 	bl	800029c <__adddf3>
 800eab2:	9802      	ldr	r0, [sp, #8]
 800eab4:	4632      	mov	r2, r6
 800eab6:	463b      	mov	r3, r7
 800eab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eabc:	f7f1 fbec 	bl	8000298 <__aeabi_dsub>
 800eac0:	4642      	mov	r2, r8
 800eac2:	464b      	mov	r3, r9
 800eac4:	f7f1 fbe8 	bl	8000298 <__aeabi_dsub>
 800eac8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eacc:	e607      	b.n	800e6de <__ieee754_pow+0x2ce>
 800eace:	f04f 0a01 	mov.w	sl, #1
 800ead2:	e6a5      	b.n	800e820 <__ieee754_pow+0x410>
 800ead4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800eb28 <__ieee754_pow+0x718>
 800ead8:	e613      	b.n	800e702 <__ieee754_pow+0x2f2>
 800eada:	bf00      	nop
 800eadc:	f3af 8000 	nop.w
 800eae0:	4a454eef 	.word	0x4a454eef
 800eae4:	3fca7e28 	.word	0x3fca7e28
 800eae8:	93c9db65 	.word	0x93c9db65
 800eaec:	3fcd864a 	.word	0x3fcd864a
 800eaf0:	a91d4101 	.word	0xa91d4101
 800eaf4:	3fd17460 	.word	0x3fd17460
 800eaf8:	518f264d 	.word	0x518f264d
 800eafc:	3fd55555 	.word	0x3fd55555
 800eb00:	db6fabff 	.word	0xdb6fabff
 800eb04:	3fdb6db6 	.word	0x3fdb6db6
 800eb08:	33333303 	.word	0x33333303
 800eb0c:	3fe33333 	.word	0x3fe33333
 800eb10:	e0000000 	.word	0xe0000000
 800eb14:	3feec709 	.word	0x3feec709
 800eb18:	dc3a03fd 	.word	0xdc3a03fd
 800eb1c:	3feec709 	.word	0x3feec709
 800eb20:	145b01f5 	.word	0x145b01f5
 800eb24:	be3e2fe0 	.word	0xbe3e2fe0
 800eb28:	00000000 	.word	0x00000000
 800eb2c:	3ff00000 	.word	0x3ff00000
 800eb30:	43400000 	.word	0x43400000
 800eb34:	0003988e 	.word	0x0003988e
 800eb38:	000bb679 	.word	0x000bb679
 800eb3c:	080107f0 	.word	0x080107f0
 800eb40:	3ff00000 	.word	0x3ff00000
 800eb44:	40080000 	.word	0x40080000
 800eb48:	08010810 	.word	0x08010810
 800eb4c:	08010800 	.word	0x08010800
 800eb50:	a3b4      	add	r3, pc, #720	; (adr r3, 800ee24 <__ieee754_pow+0xa14>)
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	4640      	mov	r0, r8
 800eb58:	4649      	mov	r1, r9
 800eb5a:	f7f1 fb9f 	bl	800029c <__adddf3>
 800eb5e:	4622      	mov	r2, r4
 800eb60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb64:	462b      	mov	r3, r5
 800eb66:	4630      	mov	r0, r6
 800eb68:	4639      	mov	r1, r7
 800eb6a:	f7f1 fb95 	bl	8000298 <__aeabi_dsub>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb76:	f7f1 ffd7 	bl	8000b28 <__aeabi_dcmpgt>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	f47f adfe 	bne.w	800e77c <__ieee754_pow+0x36c>
 800eb80:	4aa3      	ldr	r2, [pc, #652]	; (800ee10 <__ieee754_pow+0xa00>)
 800eb82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb86:	4293      	cmp	r3, r2
 800eb88:	f340 810a 	ble.w	800eda0 <__ieee754_pow+0x990>
 800eb8c:	151b      	asrs	r3, r3, #20
 800eb8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800eb92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800eb96:	fa4a f303 	asr.w	r3, sl, r3
 800eb9a:	445b      	add	r3, fp
 800eb9c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800eba0:	4e9c      	ldr	r6, [pc, #624]	; (800ee14 <__ieee754_pow+0xa04>)
 800eba2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800eba6:	4116      	asrs	r6, r2
 800eba8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ebac:	2000      	movs	r0, #0
 800ebae:	ea23 0106 	bic.w	r1, r3, r6
 800ebb2:	f1c2 0214 	rsb	r2, r2, #20
 800ebb6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ebba:	fa4a fa02 	asr.w	sl, sl, r2
 800ebbe:	f1bb 0f00 	cmp.w	fp, #0
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	4629      	mov	r1, r5
 800ebca:	bfb8      	it	lt
 800ebcc:	f1ca 0a00 	rsblt	sl, sl, #0
 800ebd0:	f7f1 fb62 	bl	8000298 <__aeabi_dsub>
 800ebd4:	e9cd 0100 	strd	r0, r1, [sp]
 800ebd8:	4642      	mov	r2, r8
 800ebda:	464b      	mov	r3, r9
 800ebdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebe0:	f7f1 fb5c 	bl	800029c <__adddf3>
 800ebe4:	2000      	movs	r0, #0
 800ebe6:	a378      	add	r3, pc, #480	; (adr r3, 800edc8 <__ieee754_pow+0x9b8>)
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	4604      	mov	r4, r0
 800ebee:	460d      	mov	r5, r1
 800ebf0:	f7f1 fd0a 	bl	8000608 <__aeabi_dmul>
 800ebf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebf8:	4606      	mov	r6, r0
 800ebfa:	460f      	mov	r7, r1
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	4629      	mov	r1, r5
 800ec00:	f7f1 fb4a 	bl	8000298 <__aeabi_dsub>
 800ec04:	4602      	mov	r2, r0
 800ec06:	460b      	mov	r3, r1
 800ec08:	4640      	mov	r0, r8
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	f7f1 fb44 	bl	8000298 <__aeabi_dsub>
 800ec10:	a36f      	add	r3, pc, #444	; (adr r3, 800edd0 <__ieee754_pow+0x9c0>)
 800ec12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec16:	f7f1 fcf7 	bl	8000608 <__aeabi_dmul>
 800ec1a:	a36f      	add	r3, pc, #444	; (adr r3, 800edd8 <__ieee754_pow+0x9c8>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	4680      	mov	r8, r0
 800ec22:	4689      	mov	r9, r1
 800ec24:	4620      	mov	r0, r4
 800ec26:	4629      	mov	r1, r5
 800ec28:	f7f1 fcee 	bl	8000608 <__aeabi_dmul>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	460b      	mov	r3, r1
 800ec30:	4640      	mov	r0, r8
 800ec32:	4649      	mov	r1, r9
 800ec34:	f7f1 fb32 	bl	800029c <__adddf3>
 800ec38:	4604      	mov	r4, r0
 800ec3a:	460d      	mov	r5, r1
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	460b      	mov	r3, r1
 800ec40:	4630      	mov	r0, r6
 800ec42:	4639      	mov	r1, r7
 800ec44:	f7f1 fb2a 	bl	800029c <__adddf3>
 800ec48:	4632      	mov	r2, r6
 800ec4a:	463b      	mov	r3, r7
 800ec4c:	4680      	mov	r8, r0
 800ec4e:	4689      	mov	r9, r1
 800ec50:	f7f1 fb22 	bl	8000298 <__aeabi_dsub>
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	4620      	mov	r0, r4
 800ec5a:	4629      	mov	r1, r5
 800ec5c:	f7f1 fb1c 	bl	8000298 <__aeabi_dsub>
 800ec60:	4642      	mov	r2, r8
 800ec62:	4606      	mov	r6, r0
 800ec64:	460f      	mov	r7, r1
 800ec66:	464b      	mov	r3, r9
 800ec68:	4640      	mov	r0, r8
 800ec6a:	4649      	mov	r1, r9
 800ec6c:	f7f1 fccc 	bl	8000608 <__aeabi_dmul>
 800ec70:	a35b      	add	r3, pc, #364	; (adr r3, 800ede0 <__ieee754_pow+0x9d0>)
 800ec72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec76:	4604      	mov	r4, r0
 800ec78:	460d      	mov	r5, r1
 800ec7a:	f7f1 fcc5 	bl	8000608 <__aeabi_dmul>
 800ec7e:	a35a      	add	r3, pc, #360	; (adr r3, 800ede8 <__ieee754_pow+0x9d8>)
 800ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec84:	f7f1 fb08 	bl	8000298 <__aeabi_dsub>
 800ec88:	4622      	mov	r2, r4
 800ec8a:	462b      	mov	r3, r5
 800ec8c:	f7f1 fcbc 	bl	8000608 <__aeabi_dmul>
 800ec90:	a357      	add	r3, pc, #348	; (adr r3, 800edf0 <__ieee754_pow+0x9e0>)
 800ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec96:	f7f1 fb01 	bl	800029c <__adddf3>
 800ec9a:	4622      	mov	r2, r4
 800ec9c:	462b      	mov	r3, r5
 800ec9e:	f7f1 fcb3 	bl	8000608 <__aeabi_dmul>
 800eca2:	a355      	add	r3, pc, #340	; (adr r3, 800edf8 <__ieee754_pow+0x9e8>)
 800eca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca8:	f7f1 faf6 	bl	8000298 <__aeabi_dsub>
 800ecac:	4622      	mov	r2, r4
 800ecae:	462b      	mov	r3, r5
 800ecb0:	f7f1 fcaa 	bl	8000608 <__aeabi_dmul>
 800ecb4:	a352      	add	r3, pc, #328	; (adr r3, 800ee00 <__ieee754_pow+0x9f0>)
 800ecb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecba:	f7f1 faef 	bl	800029c <__adddf3>
 800ecbe:	4622      	mov	r2, r4
 800ecc0:	462b      	mov	r3, r5
 800ecc2:	f7f1 fca1 	bl	8000608 <__aeabi_dmul>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	460b      	mov	r3, r1
 800ecca:	4640      	mov	r0, r8
 800eccc:	4649      	mov	r1, r9
 800ecce:	f7f1 fae3 	bl	8000298 <__aeabi_dsub>
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	460d      	mov	r5, r1
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	460b      	mov	r3, r1
 800ecda:	4640      	mov	r0, r8
 800ecdc:	4649      	mov	r1, r9
 800ecde:	f7f1 fc93 	bl	8000608 <__aeabi_dmul>
 800ece2:	2200      	movs	r2, #0
 800ece4:	e9cd 0100 	strd	r0, r1, [sp]
 800ece8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ecec:	4620      	mov	r0, r4
 800ecee:	4629      	mov	r1, r5
 800ecf0:	f7f1 fad2 	bl	8000298 <__aeabi_dsub>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecfc:	f7f1 fdae 	bl	800085c <__aeabi_ddiv>
 800ed00:	4632      	mov	r2, r6
 800ed02:	4604      	mov	r4, r0
 800ed04:	460d      	mov	r5, r1
 800ed06:	463b      	mov	r3, r7
 800ed08:	4640      	mov	r0, r8
 800ed0a:	4649      	mov	r1, r9
 800ed0c:	f7f1 fc7c 	bl	8000608 <__aeabi_dmul>
 800ed10:	4632      	mov	r2, r6
 800ed12:	463b      	mov	r3, r7
 800ed14:	f7f1 fac2 	bl	800029c <__adddf3>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	4629      	mov	r1, r5
 800ed20:	f7f1 faba 	bl	8000298 <__aeabi_dsub>
 800ed24:	4642      	mov	r2, r8
 800ed26:	464b      	mov	r3, r9
 800ed28:	f7f1 fab6 	bl	8000298 <__aeabi_dsub>
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	460b      	mov	r3, r1
 800ed30:	2000      	movs	r0, #0
 800ed32:	4939      	ldr	r1, [pc, #228]	; (800ee18 <__ieee754_pow+0xa08>)
 800ed34:	f7f1 fab0 	bl	8000298 <__aeabi_dsub>
 800ed38:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ed3c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ed40:	4602      	mov	r2, r0
 800ed42:	460b      	mov	r3, r1
 800ed44:	da2f      	bge.n	800eda6 <__ieee754_pow+0x996>
 800ed46:	4650      	mov	r0, sl
 800ed48:	ec43 2b10 	vmov	d0, r2, r3
 800ed4c:	f001 faa0 	bl	8010290 <scalbn>
 800ed50:	ec51 0b10 	vmov	r0, r1, d0
 800ed54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed58:	f7ff bbf1 	b.w	800e53e <__ieee754_pow+0x12e>
 800ed5c:	4b2f      	ldr	r3, [pc, #188]	; (800ee1c <__ieee754_pow+0xa0c>)
 800ed5e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ed62:	429e      	cmp	r6, r3
 800ed64:	f77f af0c 	ble.w	800eb80 <__ieee754_pow+0x770>
 800ed68:	4b2d      	ldr	r3, [pc, #180]	; (800ee20 <__ieee754_pow+0xa10>)
 800ed6a:	440b      	add	r3, r1
 800ed6c:	4303      	orrs	r3, r0
 800ed6e:	d00b      	beq.n	800ed88 <__ieee754_pow+0x978>
 800ed70:	a325      	add	r3, pc, #148	; (adr r3, 800ee08 <__ieee754_pow+0x9f8>)
 800ed72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed7a:	f7f1 fc45 	bl	8000608 <__aeabi_dmul>
 800ed7e:	a322      	add	r3, pc, #136	; (adr r3, 800ee08 <__ieee754_pow+0x9f8>)
 800ed80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed84:	f7ff bbdb 	b.w	800e53e <__ieee754_pow+0x12e>
 800ed88:	4622      	mov	r2, r4
 800ed8a:	462b      	mov	r3, r5
 800ed8c:	f7f1 fa84 	bl	8000298 <__aeabi_dsub>
 800ed90:	4642      	mov	r2, r8
 800ed92:	464b      	mov	r3, r9
 800ed94:	f7f1 febe 	bl	8000b14 <__aeabi_dcmpge>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	f43f aef1 	beq.w	800eb80 <__ieee754_pow+0x770>
 800ed9e:	e7e7      	b.n	800ed70 <__ieee754_pow+0x960>
 800eda0:	f04f 0a00 	mov.w	sl, #0
 800eda4:	e718      	b.n	800ebd8 <__ieee754_pow+0x7c8>
 800eda6:	4621      	mov	r1, r4
 800eda8:	e7d4      	b.n	800ed54 <__ieee754_pow+0x944>
 800edaa:	2000      	movs	r0, #0
 800edac:	491a      	ldr	r1, [pc, #104]	; (800ee18 <__ieee754_pow+0xa08>)
 800edae:	f7ff bb8f 	b.w	800e4d0 <__ieee754_pow+0xc0>
 800edb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edb6:	f7ff bb8b 	b.w	800e4d0 <__ieee754_pow+0xc0>
 800edba:	4630      	mov	r0, r6
 800edbc:	4639      	mov	r1, r7
 800edbe:	f7ff bb87 	b.w	800e4d0 <__ieee754_pow+0xc0>
 800edc2:	4693      	mov	fp, r2
 800edc4:	f7ff bb98 	b.w	800e4f8 <__ieee754_pow+0xe8>
 800edc8:	00000000 	.word	0x00000000
 800edcc:	3fe62e43 	.word	0x3fe62e43
 800edd0:	fefa39ef 	.word	0xfefa39ef
 800edd4:	3fe62e42 	.word	0x3fe62e42
 800edd8:	0ca86c39 	.word	0x0ca86c39
 800eddc:	be205c61 	.word	0xbe205c61
 800ede0:	72bea4d0 	.word	0x72bea4d0
 800ede4:	3e663769 	.word	0x3e663769
 800ede8:	c5d26bf1 	.word	0xc5d26bf1
 800edec:	3ebbbd41 	.word	0x3ebbbd41
 800edf0:	af25de2c 	.word	0xaf25de2c
 800edf4:	3f11566a 	.word	0x3f11566a
 800edf8:	16bebd93 	.word	0x16bebd93
 800edfc:	3f66c16c 	.word	0x3f66c16c
 800ee00:	5555553e 	.word	0x5555553e
 800ee04:	3fc55555 	.word	0x3fc55555
 800ee08:	c2f8f359 	.word	0xc2f8f359
 800ee0c:	01a56e1f 	.word	0x01a56e1f
 800ee10:	3fe00000 	.word	0x3fe00000
 800ee14:	000fffff 	.word	0x000fffff
 800ee18:	3ff00000 	.word	0x3ff00000
 800ee1c:	4090cbff 	.word	0x4090cbff
 800ee20:	3f6f3400 	.word	0x3f6f3400
 800ee24:	652b82fe 	.word	0x652b82fe
 800ee28:	3c971547 	.word	0x3c971547
 800ee2c:	00000000 	.word	0x00000000

0800ee30 <__ieee754_rem_pio2>:
 800ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	ec57 6b10 	vmov	r6, r7, d0
 800ee38:	4bc3      	ldr	r3, [pc, #780]	; (800f148 <__ieee754_rem_pio2+0x318>)
 800ee3a:	b08d      	sub	sp, #52	; 0x34
 800ee3c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ee40:	4598      	cmp	r8, r3
 800ee42:	4604      	mov	r4, r0
 800ee44:	9704      	str	r7, [sp, #16]
 800ee46:	dc07      	bgt.n	800ee58 <__ieee754_rem_pio2+0x28>
 800ee48:	2200      	movs	r2, #0
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	ed84 0b00 	vstr	d0, [r4]
 800ee50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ee54:	2500      	movs	r5, #0
 800ee56:	e027      	b.n	800eea8 <__ieee754_rem_pio2+0x78>
 800ee58:	4bbc      	ldr	r3, [pc, #752]	; (800f14c <__ieee754_rem_pio2+0x31c>)
 800ee5a:	4598      	cmp	r8, r3
 800ee5c:	dc75      	bgt.n	800ef4a <__ieee754_rem_pio2+0x11a>
 800ee5e:	9b04      	ldr	r3, [sp, #16]
 800ee60:	4dbb      	ldr	r5, [pc, #748]	; (800f150 <__ieee754_rem_pio2+0x320>)
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	ee10 0a10 	vmov	r0, s0
 800ee68:	a3a9      	add	r3, pc, #676	; (adr r3, 800f110 <__ieee754_rem_pio2+0x2e0>)
 800ee6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6e:	4639      	mov	r1, r7
 800ee70:	dd36      	ble.n	800eee0 <__ieee754_rem_pio2+0xb0>
 800ee72:	f7f1 fa11 	bl	8000298 <__aeabi_dsub>
 800ee76:	45a8      	cmp	r8, r5
 800ee78:	4606      	mov	r6, r0
 800ee7a:	460f      	mov	r7, r1
 800ee7c:	d018      	beq.n	800eeb0 <__ieee754_rem_pio2+0x80>
 800ee7e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f118 <__ieee754_rem_pio2+0x2e8>)
 800ee80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee84:	f7f1 fa08 	bl	8000298 <__aeabi_dsub>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	e9c4 2300 	strd	r2, r3, [r4]
 800ee90:	4630      	mov	r0, r6
 800ee92:	4639      	mov	r1, r7
 800ee94:	f7f1 fa00 	bl	8000298 <__aeabi_dsub>
 800ee98:	a39f      	add	r3, pc, #636	; (adr r3, 800f118 <__ieee754_rem_pio2+0x2e8>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 f9fb 	bl	8000298 <__aeabi_dsub>
 800eea2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eea6:	2501      	movs	r5, #1
 800eea8:	4628      	mov	r0, r5
 800eeaa:	b00d      	add	sp, #52	; 0x34
 800eeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb0:	a39b      	add	r3, pc, #620	; (adr r3, 800f120 <__ieee754_rem_pio2+0x2f0>)
 800eeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb6:	f7f1 f9ef 	bl	8000298 <__aeabi_dsub>
 800eeba:	a39b      	add	r3, pc, #620	; (adr r3, 800f128 <__ieee754_rem_pio2+0x2f8>)
 800eebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec0:	4606      	mov	r6, r0
 800eec2:	460f      	mov	r7, r1
 800eec4:	f7f1 f9e8 	bl	8000298 <__aeabi_dsub>
 800eec8:	4602      	mov	r2, r0
 800eeca:	460b      	mov	r3, r1
 800eecc:	e9c4 2300 	strd	r2, r3, [r4]
 800eed0:	4630      	mov	r0, r6
 800eed2:	4639      	mov	r1, r7
 800eed4:	f7f1 f9e0 	bl	8000298 <__aeabi_dsub>
 800eed8:	a393      	add	r3, pc, #588	; (adr r3, 800f128 <__ieee754_rem_pio2+0x2f8>)
 800eeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eede:	e7de      	b.n	800ee9e <__ieee754_rem_pio2+0x6e>
 800eee0:	f7f1 f9dc 	bl	800029c <__adddf3>
 800eee4:	45a8      	cmp	r8, r5
 800eee6:	4606      	mov	r6, r0
 800eee8:	460f      	mov	r7, r1
 800eeea:	d016      	beq.n	800ef1a <__ieee754_rem_pio2+0xea>
 800eeec:	a38a      	add	r3, pc, #552	; (adr r3, 800f118 <__ieee754_rem_pio2+0x2e8>)
 800eeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef2:	f7f1 f9d3 	bl	800029c <__adddf3>
 800eef6:	4602      	mov	r2, r0
 800eef8:	460b      	mov	r3, r1
 800eefa:	e9c4 2300 	strd	r2, r3, [r4]
 800eefe:	4630      	mov	r0, r6
 800ef00:	4639      	mov	r1, r7
 800ef02:	f7f1 f9c9 	bl	8000298 <__aeabi_dsub>
 800ef06:	a384      	add	r3, pc, #528	; (adr r3, 800f118 <__ieee754_rem_pio2+0x2e8>)
 800ef08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0c:	f7f1 f9c6 	bl	800029c <__adddf3>
 800ef10:	f04f 35ff 	mov.w	r5, #4294967295
 800ef14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ef18:	e7c6      	b.n	800eea8 <__ieee754_rem_pio2+0x78>
 800ef1a:	a381      	add	r3, pc, #516	; (adr r3, 800f120 <__ieee754_rem_pio2+0x2f0>)
 800ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef20:	f7f1 f9bc 	bl	800029c <__adddf3>
 800ef24:	a380      	add	r3, pc, #512	; (adr r3, 800f128 <__ieee754_rem_pio2+0x2f8>)
 800ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2a:	4606      	mov	r6, r0
 800ef2c:	460f      	mov	r7, r1
 800ef2e:	f7f1 f9b5 	bl	800029c <__adddf3>
 800ef32:	4602      	mov	r2, r0
 800ef34:	460b      	mov	r3, r1
 800ef36:	e9c4 2300 	strd	r2, r3, [r4]
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	4639      	mov	r1, r7
 800ef3e:	f7f1 f9ab 	bl	8000298 <__aeabi_dsub>
 800ef42:	a379      	add	r3, pc, #484	; (adr r3, 800f128 <__ieee754_rem_pio2+0x2f8>)
 800ef44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef48:	e7e0      	b.n	800ef0c <__ieee754_rem_pio2+0xdc>
 800ef4a:	4b82      	ldr	r3, [pc, #520]	; (800f154 <__ieee754_rem_pio2+0x324>)
 800ef4c:	4598      	cmp	r8, r3
 800ef4e:	f300 80d0 	bgt.w	800f0f2 <__ieee754_rem_pio2+0x2c2>
 800ef52:	f001 f875 	bl	8010040 <fabs>
 800ef56:	ec57 6b10 	vmov	r6, r7, d0
 800ef5a:	ee10 0a10 	vmov	r0, s0
 800ef5e:	a374      	add	r3, pc, #464	; (adr r3, 800f130 <__ieee754_rem_pio2+0x300>)
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	4639      	mov	r1, r7
 800ef66:	f7f1 fb4f 	bl	8000608 <__aeabi_dmul>
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	4b7a      	ldr	r3, [pc, #488]	; (800f158 <__ieee754_rem_pio2+0x328>)
 800ef6e:	f7f1 f995 	bl	800029c <__adddf3>
 800ef72:	f7f1 fdf9 	bl	8000b68 <__aeabi_d2iz>
 800ef76:	4605      	mov	r5, r0
 800ef78:	f7f1 fadc 	bl	8000534 <__aeabi_i2d>
 800ef7c:	a364      	add	r3, pc, #400	; (adr r3, 800f110 <__ieee754_rem_pio2+0x2e0>)
 800ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef86:	f7f1 fb3f 	bl	8000608 <__aeabi_dmul>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	4630      	mov	r0, r6
 800ef90:	4639      	mov	r1, r7
 800ef92:	f7f1 f981 	bl	8000298 <__aeabi_dsub>
 800ef96:	a360      	add	r3, pc, #384	; (adr r3, 800f118 <__ieee754_rem_pio2+0x2e8>)
 800ef98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9c:	4682      	mov	sl, r0
 800ef9e:	468b      	mov	fp, r1
 800efa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efa4:	f7f1 fb30 	bl	8000608 <__aeabi_dmul>
 800efa8:	2d1f      	cmp	r5, #31
 800efaa:	4606      	mov	r6, r0
 800efac:	460f      	mov	r7, r1
 800efae:	dc0c      	bgt.n	800efca <__ieee754_rem_pio2+0x19a>
 800efb0:	1e6a      	subs	r2, r5, #1
 800efb2:	4b6a      	ldr	r3, [pc, #424]	; (800f15c <__ieee754_rem_pio2+0x32c>)
 800efb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efb8:	4543      	cmp	r3, r8
 800efba:	d006      	beq.n	800efca <__ieee754_rem_pio2+0x19a>
 800efbc:	4632      	mov	r2, r6
 800efbe:	463b      	mov	r3, r7
 800efc0:	4650      	mov	r0, sl
 800efc2:	4659      	mov	r1, fp
 800efc4:	f7f1 f968 	bl	8000298 <__aeabi_dsub>
 800efc8:	e00e      	b.n	800efe8 <__ieee754_rem_pio2+0x1b8>
 800efca:	4632      	mov	r2, r6
 800efcc:	463b      	mov	r3, r7
 800efce:	4650      	mov	r0, sl
 800efd0:	4659      	mov	r1, fp
 800efd2:	f7f1 f961 	bl	8000298 <__aeabi_dsub>
 800efd6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800efda:	9305      	str	r3, [sp, #20]
 800efdc:	9a05      	ldr	r2, [sp, #20]
 800efde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	2b10      	cmp	r3, #16
 800efe6:	dc02      	bgt.n	800efee <__ieee754_rem_pio2+0x1be>
 800efe8:	e9c4 0100 	strd	r0, r1, [r4]
 800efec:	e039      	b.n	800f062 <__ieee754_rem_pio2+0x232>
 800efee:	a34c      	add	r3, pc, #304	; (adr r3, 800f120 <__ieee754_rem_pio2+0x2f0>)
 800eff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eff8:	f7f1 fb06 	bl	8000608 <__aeabi_dmul>
 800effc:	4606      	mov	r6, r0
 800effe:	460f      	mov	r7, r1
 800f000:	4602      	mov	r2, r0
 800f002:	460b      	mov	r3, r1
 800f004:	4650      	mov	r0, sl
 800f006:	4659      	mov	r1, fp
 800f008:	f7f1 f946 	bl	8000298 <__aeabi_dsub>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	4680      	mov	r8, r0
 800f012:	4689      	mov	r9, r1
 800f014:	4650      	mov	r0, sl
 800f016:	4659      	mov	r1, fp
 800f018:	f7f1 f93e 	bl	8000298 <__aeabi_dsub>
 800f01c:	4632      	mov	r2, r6
 800f01e:	463b      	mov	r3, r7
 800f020:	f7f1 f93a 	bl	8000298 <__aeabi_dsub>
 800f024:	a340      	add	r3, pc, #256	; (adr r3, 800f128 <__ieee754_rem_pio2+0x2f8>)
 800f026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02a:	4606      	mov	r6, r0
 800f02c:	460f      	mov	r7, r1
 800f02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f032:	f7f1 fae9 	bl	8000608 <__aeabi_dmul>
 800f036:	4632      	mov	r2, r6
 800f038:	463b      	mov	r3, r7
 800f03a:	f7f1 f92d 	bl	8000298 <__aeabi_dsub>
 800f03e:	4602      	mov	r2, r0
 800f040:	460b      	mov	r3, r1
 800f042:	4606      	mov	r6, r0
 800f044:	460f      	mov	r7, r1
 800f046:	4640      	mov	r0, r8
 800f048:	4649      	mov	r1, r9
 800f04a:	f7f1 f925 	bl	8000298 <__aeabi_dsub>
 800f04e:	9a05      	ldr	r2, [sp, #20]
 800f050:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f054:	1ad3      	subs	r3, r2, r3
 800f056:	2b31      	cmp	r3, #49	; 0x31
 800f058:	dc20      	bgt.n	800f09c <__ieee754_rem_pio2+0x26c>
 800f05a:	e9c4 0100 	strd	r0, r1, [r4]
 800f05e:	46c2      	mov	sl, r8
 800f060:	46cb      	mov	fp, r9
 800f062:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f066:	4650      	mov	r0, sl
 800f068:	4642      	mov	r2, r8
 800f06a:	464b      	mov	r3, r9
 800f06c:	4659      	mov	r1, fp
 800f06e:	f7f1 f913 	bl	8000298 <__aeabi_dsub>
 800f072:	463b      	mov	r3, r7
 800f074:	4632      	mov	r2, r6
 800f076:	f7f1 f90f 	bl	8000298 <__aeabi_dsub>
 800f07a:	9b04      	ldr	r3, [sp, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f082:	f6bf af11 	bge.w	800eea8 <__ieee754_rem_pio2+0x78>
 800f086:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f08a:	6063      	str	r3, [r4, #4]
 800f08c:	f8c4 8000 	str.w	r8, [r4]
 800f090:	60a0      	str	r0, [r4, #8]
 800f092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f096:	60e3      	str	r3, [r4, #12]
 800f098:	426d      	negs	r5, r5
 800f09a:	e705      	b.n	800eea8 <__ieee754_rem_pio2+0x78>
 800f09c:	a326      	add	r3, pc, #152	; (adr r3, 800f138 <__ieee754_rem_pio2+0x308>)
 800f09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0a6:	f7f1 faaf 	bl	8000608 <__aeabi_dmul>
 800f0aa:	4606      	mov	r6, r0
 800f0ac:	460f      	mov	r7, r1
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	4640      	mov	r0, r8
 800f0b4:	4649      	mov	r1, r9
 800f0b6:	f7f1 f8ef 	bl	8000298 <__aeabi_dsub>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	460b      	mov	r3, r1
 800f0be:	4682      	mov	sl, r0
 800f0c0:	468b      	mov	fp, r1
 800f0c2:	4640      	mov	r0, r8
 800f0c4:	4649      	mov	r1, r9
 800f0c6:	f7f1 f8e7 	bl	8000298 <__aeabi_dsub>
 800f0ca:	4632      	mov	r2, r6
 800f0cc:	463b      	mov	r3, r7
 800f0ce:	f7f1 f8e3 	bl	8000298 <__aeabi_dsub>
 800f0d2:	a31b      	add	r3, pc, #108	; (adr r3, 800f140 <__ieee754_rem_pio2+0x310>)
 800f0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d8:	4606      	mov	r6, r0
 800f0da:	460f      	mov	r7, r1
 800f0dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0e0:	f7f1 fa92 	bl	8000608 <__aeabi_dmul>
 800f0e4:	4632      	mov	r2, r6
 800f0e6:	463b      	mov	r3, r7
 800f0e8:	f7f1 f8d6 	bl	8000298 <__aeabi_dsub>
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	460f      	mov	r7, r1
 800f0f0:	e764      	b.n	800efbc <__ieee754_rem_pio2+0x18c>
 800f0f2:	4b1b      	ldr	r3, [pc, #108]	; (800f160 <__ieee754_rem_pio2+0x330>)
 800f0f4:	4598      	cmp	r8, r3
 800f0f6:	dd35      	ble.n	800f164 <__ieee754_rem_pio2+0x334>
 800f0f8:	ee10 2a10 	vmov	r2, s0
 800f0fc:	463b      	mov	r3, r7
 800f0fe:	4630      	mov	r0, r6
 800f100:	4639      	mov	r1, r7
 800f102:	f7f1 f8c9 	bl	8000298 <__aeabi_dsub>
 800f106:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f10a:	e9c4 0100 	strd	r0, r1, [r4]
 800f10e:	e6a1      	b.n	800ee54 <__ieee754_rem_pio2+0x24>
 800f110:	54400000 	.word	0x54400000
 800f114:	3ff921fb 	.word	0x3ff921fb
 800f118:	1a626331 	.word	0x1a626331
 800f11c:	3dd0b461 	.word	0x3dd0b461
 800f120:	1a600000 	.word	0x1a600000
 800f124:	3dd0b461 	.word	0x3dd0b461
 800f128:	2e037073 	.word	0x2e037073
 800f12c:	3ba3198a 	.word	0x3ba3198a
 800f130:	6dc9c883 	.word	0x6dc9c883
 800f134:	3fe45f30 	.word	0x3fe45f30
 800f138:	2e000000 	.word	0x2e000000
 800f13c:	3ba3198a 	.word	0x3ba3198a
 800f140:	252049c1 	.word	0x252049c1
 800f144:	397b839a 	.word	0x397b839a
 800f148:	3fe921fb 	.word	0x3fe921fb
 800f14c:	4002d97b 	.word	0x4002d97b
 800f150:	3ff921fb 	.word	0x3ff921fb
 800f154:	413921fb 	.word	0x413921fb
 800f158:	3fe00000 	.word	0x3fe00000
 800f15c:	08010820 	.word	0x08010820
 800f160:	7fefffff 	.word	0x7fefffff
 800f164:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f168:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800f16c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f170:	4630      	mov	r0, r6
 800f172:	460f      	mov	r7, r1
 800f174:	f7f1 fcf8 	bl	8000b68 <__aeabi_d2iz>
 800f178:	f7f1 f9dc 	bl	8000534 <__aeabi_i2d>
 800f17c:	4602      	mov	r2, r0
 800f17e:	460b      	mov	r3, r1
 800f180:	4630      	mov	r0, r6
 800f182:	4639      	mov	r1, r7
 800f184:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f188:	f7f1 f886 	bl	8000298 <__aeabi_dsub>
 800f18c:	2200      	movs	r2, #0
 800f18e:	4b1f      	ldr	r3, [pc, #124]	; (800f20c <__ieee754_rem_pio2+0x3dc>)
 800f190:	f7f1 fa3a 	bl	8000608 <__aeabi_dmul>
 800f194:	460f      	mov	r7, r1
 800f196:	4606      	mov	r6, r0
 800f198:	f7f1 fce6 	bl	8000b68 <__aeabi_d2iz>
 800f19c:	f7f1 f9ca 	bl	8000534 <__aeabi_i2d>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	4630      	mov	r0, r6
 800f1a6:	4639      	mov	r1, r7
 800f1a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f1ac:	f7f1 f874 	bl	8000298 <__aeabi_dsub>
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	4b16      	ldr	r3, [pc, #88]	; (800f20c <__ieee754_rem_pio2+0x3dc>)
 800f1b4:	f7f1 fa28 	bl	8000608 <__aeabi_dmul>
 800f1b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f1bc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800f1c0:	f04f 0803 	mov.w	r8, #3
 800f1c4:	2600      	movs	r6, #0
 800f1c6:	2700      	movs	r7, #0
 800f1c8:	4632      	mov	r2, r6
 800f1ca:	463b      	mov	r3, r7
 800f1cc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f1d0:	f108 3aff 	add.w	sl, r8, #4294967295
 800f1d4:	f7f1 fc80 	bl	8000ad8 <__aeabi_dcmpeq>
 800f1d8:	b9b0      	cbnz	r0, 800f208 <__ieee754_rem_pio2+0x3d8>
 800f1da:	4b0d      	ldr	r3, [pc, #52]	; (800f210 <__ieee754_rem_pio2+0x3e0>)
 800f1dc:	9301      	str	r3, [sp, #4]
 800f1de:	2302      	movs	r3, #2
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	462a      	mov	r2, r5
 800f1e4:	4643      	mov	r3, r8
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	a806      	add	r0, sp, #24
 800f1ea:	f000 f98d 	bl	800f508 <__kernel_rem_pio2>
 800f1ee:	9b04      	ldr	r3, [sp, #16]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	4605      	mov	r5, r0
 800f1f4:	f6bf ae58 	bge.w	800eea8 <__ieee754_rem_pio2+0x78>
 800f1f8:	6863      	ldr	r3, [r4, #4]
 800f1fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f1fe:	6063      	str	r3, [r4, #4]
 800f200:	68e3      	ldr	r3, [r4, #12]
 800f202:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f206:	e746      	b.n	800f096 <__ieee754_rem_pio2+0x266>
 800f208:	46d0      	mov	r8, sl
 800f20a:	e7dd      	b.n	800f1c8 <__ieee754_rem_pio2+0x398>
 800f20c:	41700000 	.word	0x41700000
 800f210:	080108a0 	.word	0x080108a0

0800f214 <__ieee754_sqrt>:
 800f214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f218:	4955      	ldr	r1, [pc, #340]	; (800f370 <__ieee754_sqrt+0x15c>)
 800f21a:	ec55 4b10 	vmov	r4, r5, d0
 800f21e:	43a9      	bics	r1, r5
 800f220:	462b      	mov	r3, r5
 800f222:	462a      	mov	r2, r5
 800f224:	d112      	bne.n	800f24c <__ieee754_sqrt+0x38>
 800f226:	ee10 2a10 	vmov	r2, s0
 800f22a:	ee10 0a10 	vmov	r0, s0
 800f22e:	4629      	mov	r1, r5
 800f230:	f7f1 f9ea 	bl	8000608 <__aeabi_dmul>
 800f234:	4602      	mov	r2, r0
 800f236:	460b      	mov	r3, r1
 800f238:	4620      	mov	r0, r4
 800f23a:	4629      	mov	r1, r5
 800f23c:	f7f1 f82e 	bl	800029c <__adddf3>
 800f240:	4604      	mov	r4, r0
 800f242:	460d      	mov	r5, r1
 800f244:	ec45 4b10 	vmov	d0, r4, r5
 800f248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f24c:	2d00      	cmp	r5, #0
 800f24e:	ee10 0a10 	vmov	r0, s0
 800f252:	4621      	mov	r1, r4
 800f254:	dc0f      	bgt.n	800f276 <__ieee754_sqrt+0x62>
 800f256:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f25a:	4330      	orrs	r0, r6
 800f25c:	d0f2      	beq.n	800f244 <__ieee754_sqrt+0x30>
 800f25e:	b155      	cbz	r5, 800f276 <__ieee754_sqrt+0x62>
 800f260:	ee10 2a10 	vmov	r2, s0
 800f264:	4620      	mov	r0, r4
 800f266:	4629      	mov	r1, r5
 800f268:	f7f1 f816 	bl	8000298 <__aeabi_dsub>
 800f26c:	4602      	mov	r2, r0
 800f26e:	460b      	mov	r3, r1
 800f270:	f7f1 faf4 	bl	800085c <__aeabi_ddiv>
 800f274:	e7e4      	b.n	800f240 <__ieee754_sqrt+0x2c>
 800f276:	151b      	asrs	r3, r3, #20
 800f278:	d073      	beq.n	800f362 <__ieee754_sqrt+0x14e>
 800f27a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f27e:	07dd      	lsls	r5, r3, #31
 800f280:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f284:	bf48      	it	mi
 800f286:	0fc8      	lsrmi	r0, r1, #31
 800f288:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f28c:	bf44      	itt	mi
 800f28e:	0049      	lslmi	r1, r1, #1
 800f290:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800f294:	2500      	movs	r5, #0
 800f296:	1058      	asrs	r0, r3, #1
 800f298:	0fcb      	lsrs	r3, r1, #31
 800f29a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800f29e:	0049      	lsls	r1, r1, #1
 800f2a0:	2316      	movs	r3, #22
 800f2a2:	462c      	mov	r4, r5
 800f2a4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800f2a8:	19a7      	adds	r7, r4, r6
 800f2aa:	4297      	cmp	r7, r2
 800f2ac:	bfde      	ittt	le
 800f2ae:	19bc      	addle	r4, r7, r6
 800f2b0:	1bd2      	suble	r2, r2, r7
 800f2b2:	19ad      	addle	r5, r5, r6
 800f2b4:	0fcf      	lsrs	r7, r1, #31
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800f2bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f2c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f2c4:	d1f0      	bne.n	800f2a8 <__ieee754_sqrt+0x94>
 800f2c6:	f04f 0c20 	mov.w	ip, #32
 800f2ca:	469e      	mov	lr, r3
 800f2cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f2d0:	42a2      	cmp	r2, r4
 800f2d2:	eb06 070e 	add.w	r7, r6, lr
 800f2d6:	dc02      	bgt.n	800f2de <__ieee754_sqrt+0xca>
 800f2d8:	d112      	bne.n	800f300 <__ieee754_sqrt+0xec>
 800f2da:	428f      	cmp	r7, r1
 800f2dc:	d810      	bhi.n	800f300 <__ieee754_sqrt+0xec>
 800f2de:	2f00      	cmp	r7, #0
 800f2e0:	eb07 0e06 	add.w	lr, r7, r6
 800f2e4:	da42      	bge.n	800f36c <__ieee754_sqrt+0x158>
 800f2e6:	f1be 0f00 	cmp.w	lr, #0
 800f2ea:	db3f      	blt.n	800f36c <__ieee754_sqrt+0x158>
 800f2ec:	f104 0801 	add.w	r8, r4, #1
 800f2f0:	1b12      	subs	r2, r2, r4
 800f2f2:	428f      	cmp	r7, r1
 800f2f4:	bf88      	it	hi
 800f2f6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f2fa:	1bc9      	subs	r1, r1, r7
 800f2fc:	4433      	add	r3, r6
 800f2fe:	4644      	mov	r4, r8
 800f300:	0052      	lsls	r2, r2, #1
 800f302:	f1bc 0c01 	subs.w	ip, ip, #1
 800f306:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800f30a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f30e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f312:	d1dd      	bne.n	800f2d0 <__ieee754_sqrt+0xbc>
 800f314:	430a      	orrs	r2, r1
 800f316:	d006      	beq.n	800f326 <__ieee754_sqrt+0x112>
 800f318:	1c5c      	adds	r4, r3, #1
 800f31a:	bf13      	iteet	ne
 800f31c:	3301      	addne	r3, #1
 800f31e:	3501      	addeq	r5, #1
 800f320:	4663      	moveq	r3, ip
 800f322:	f023 0301 	bicne.w	r3, r3, #1
 800f326:	106a      	asrs	r2, r5, #1
 800f328:	085b      	lsrs	r3, r3, #1
 800f32a:	07e9      	lsls	r1, r5, #31
 800f32c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f330:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f334:	bf48      	it	mi
 800f336:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f33a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800f33e:	461c      	mov	r4, r3
 800f340:	e780      	b.n	800f244 <__ieee754_sqrt+0x30>
 800f342:	0aca      	lsrs	r2, r1, #11
 800f344:	3815      	subs	r0, #21
 800f346:	0549      	lsls	r1, r1, #21
 800f348:	2a00      	cmp	r2, #0
 800f34a:	d0fa      	beq.n	800f342 <__ieee754_sqrt+0x12e>
 800f34c:	02d6      	lsls	r6, r2, #11
 800f34e:	d50a      	bpl.n	800f366 <__ieee754_sqrt+0x152>
 800f350:	f1c3 0420 	rsb	r4, r3, #32
 800f354:	fa21 f404 	lsr.w	r4, r1, r4
 800f358:	1e5d      	subs	r5, r3, #1
 800f35a:	4099      	lsls	r1, r3
 800f35c:	4322      	orrs	r2, r4
 800f35e:	1b43      	subs	r3, r0, r5
 800f360:	e78b      	b.n	800f27a <__ieee754_sqrt+0x66>
 800f362:	4618      	mov	r0, r3
 800f364:	e7f0      	b.n	800f348 <__ieee754_sqrt+0x134>
 800f366:	0052      	lsls	r2, r2, #1
 800f368:	3301      	adds	r3, #1
 800f36a:	e7ef      	b.n	800f34c <__ieee754_sqrt+0x138>
 800f36c:	46a0      	mov	r8, r4
 800f36e:	e7bf      	b.n	800f2f0 <__ieee754_sqrt+0xdc>
 800f370:	7ff00000 	.word	0x7ff00000
 800f374:	00000000 	.word	0x00000000

0800f378 <__kernel_cos>:
 800f378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f37c:	ec59 8b10 	vmov	r8, r9, d0
 800f380:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800f384:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800f388:	ed2d 8b02 	vpush	{d8}
 800f38c:	eeb0 8a41 	vmov.f32	s16, s2
 800f390:	eef0 8a61 	vmov.f32	s17, s3
 800f394:	da07      	bge.n	800f3a6 <__kernel_cos+0x2e>
 800f396:	ee10 0a10 	vmov	r0, s0
 800f39a:	4649      	mov	r1, r9
 800f39c:	f7f1 fbe4 	bl	8000b68 <__aeabi_d2iz>
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	f000 8089 	beq.w	800f4b8 <__kernel_cos+0x140>
 800f3a6:	4642      	mov	r2, r8
 800f3a8:	464b      	mov	r3, r9
 800f3aa:	4640      	mov	r0, r8
 800f3ac:	4649      	mov	r1, r9
 800f3ae:	f7f1 f92b 	bl	8000608 <__aeabi_dmul>
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	4b4e      	ldr	r3, [pc, #312]	; (800f4f0 <__kernel_cos+0x178>)
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	460d      	mov	r5, r1
 800f3ba:	f7f1 f925 	bl	8000608 <__aeabi_dmul>
 800f3be:	a340      	add	r3, pc, #256	; (adr r3, 800f4c0 <__kernel_cos+0x148>)
 800f3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c4:	4682      	mov	sl, r0
 800f3c6:	468b      	mov	fp, r1
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	4629      	mov	r1, r5
 800f3cc:	f7f1 f91c 	bl	8000608 <__aeabi_dmul>
 800f3d0:	a33d      	add	r3, pc, #244	; (adr r3, 800f4c8 <__kernel_cos+0x150>)
 800f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d6:	f7f0 ff61 	bl	800029c <__adddf3>
 800f3da:	4622      	mov	r2, r4
 800f3dc:	462b      	mov	r3, r5
 800f3de:	f7f1 f913 	bl	8000608 <__aeabi_dmul>
 800f3e2:	a33b      	add	r3, pc, #236	; (adr r3, 800f4d0 <__kernel_cos+0x158>)
 800f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e8:	f7f0 ff56 	bl	8000298 <__aeabi_dsub>
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	462b      	mov	r3, r5
 800f3f0:	f7f1 f90a 	bl	8000608 <__aeabi_dmul>
 800f3f4:	a338      	add	r3, pc, #224	; (adr r3, 800f4d8 <__kernel_cos+0x160>)
 800f3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3fa:	f7f0 ff4f 	bl	800029c <__adddf3>
 800f3fe:	4622      	mov	r2, r4
 800f400:	462b      	mov	r3, r5
 800f402:	f7f1 f901 	bl	8000608 <__aeabi_dmul>
 800f406:	a336      	add	r3, pc, #216	; (adr r3, 800f4e0 <__kernel_cos+0x168>)
 800f408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40c:	f7f0 ff44 	bl	8000298 <__aeabi_dsub>
 800f410:	4622      	mov	r2, r4
 800f412:	462b      	mov	r3, r5
 800f414:	f7f1 f8f8 	bl	8000608 <__aeabi_dmul>
 800f418:	a333      	add	r3, pc, #204	; (adr r3, 800f4e8 <__kernel_cos+0x170>)
 800f41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41e:	f7f0 ff3d 	bl	800029c <__adddf3>
 800f422:	4622      	mov	r2, r4
 800f424:	462b      	mov	r3, r5
 800f426:	f7f1 f8ef 	bl	8000608 <__aeabi_dmul>
 800f42a:	4622      	mov	r2, r4
 800f42c:	462b      	mov	r3, r5
 800f42e:	f7f1 f8eb 	bl	8000608 <__aeabi_dmul>
 800f432:	ec53 2b18 	vmov	r2, r3, d8
 800f436:	4604      	mov	r4, r0
 800f438:	460d      	mov	r5, r1
 800f43a:	4640      	mov	r0, r8
 800f43c:	4649      	mov	r1, r9
 800f43e:	f7f1 f8e3 	bl	8000608 <__aeabi_dmul>
 800f442:	460b      	mov	r3, r1
 800f444:	4602      	mov	r2, r0
 800f446:	4629      	mov	r1, r5
 800f448:	4620      	mov	r0, r4
 800f44a:	f7f0 ff25 	bl	8000298 <__aeabi_dsub>
 800f44e:	4b29      	ldr	r3, [pc, #164]	; (800f4f4 <__kernel_cos+0x17c>)
 800f450:	429e      	cmp	r6, r3
 800f452:	4680      	mov	r8, r0
 800f454:	4689      	mov	r9, r1
 800f456:	dc11      	bgt.n	800f47c <__kernel_cos+0x104>
 800f458:	4602      	mov	r2, r0
 800f45a:	460b      	mov	r3, r1
 800f45c:	4650      	mov	r0, sl
 800f45e:	4659      	mov	r1, fp
 800f460:	f7f0 ff1a 	bl	8000298 <__aeabi_dsub>
 800f464:	460b      	mov	r3, r1
 800f466:	4924      	ldr	r1, [pc, #144]	; (800f4f8 <__kernel_cos+0x180>)
 800f468:	4602      	mov	r2, r0
 800f46a:	2000      	movs	r0, #0
 800f46c:	f7f0 ff14 	bl	8000298 <__aeabi_dsub>
 800f470:	ecbd 8b02 	vpop	{d8}
 800f474:	ec41 0b10 	vmov	d0, r0, r1
 800f478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f47c:	4b1f      	ldr	r3, [pc, #124]	; (800f4fc <__kernel_cos+0x184>)
 800f47e:	491e      	ldr	r1, [pc, #120]	; (800f4f8 <__kernel_cos+0x180>)
 800f480:	429e      	cmp	r6, r3
 800f482:	bfcc      	ite	gt
 800f484:	4d1e      	ldrgt	r5, [pc, #120]	; (800f500 <__kernel_cos+0x188>)
 800f486:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800f48a:	2400      	movs	r4, #0
 800f48c:	4622      	mov	r2, r4
 800f48e:	462b      	mov	r3, r5
 800f490:	2000      	movs	r0, #0
 800f492:	f7f0 ff01 	bl	8000298 <__aeabi_dsub>
 800f496:	4622      	mov	r2, r4
 800f498:	4606      	mov	r6, r0
 800f49a:	460f      	mov	r7, r1
 800f49c:	462b      	mov	r3, r5
 800f49e:	4650      	mov	r0, sl
 800f4a0:	4659      	mov	r1, fp
 800f4a2:	f7f0 fef9 	bl	8000298 <__aeabi_dsub>
 800f4a6:	4642      	mov	r2, r8
 800f4a8:	464b      	mov	r3, r9
 800f4aa:	f7f0 fef5 	bl	8000298 <__aeabi_dsub>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	4639      	mov	r1, r7
 800f4b6:	e7d9      	b.n	800f46c <__kernel_cos+0xf4>
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	490f      	ldr	r1, [pc, #60]	; (800f4f8 <__kernel_cos+0x180>)
 800f4bc:	e7d8      	b.n	800f470 <__kernel_cos+0xf8>
 800f4be:	bf00      	nop
 800f4c0:	be8838d4 	.word	0xbe8838d4
 800f4c4:	bda8fae9 	.word	0xbda8fae9
 800f4c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f4cc:	3e21ee9e 	.word	0x3e21ee9e
 800f4d0:	809c52ad 	.word	0x809c52ad
 800f4d4:	3e927e4f 	.word	0x3e927e4f
 800f4d8:	19cb1590 	.word	0x19cb1590
 800f4dc:	3efa01a0 	.word	0x3efa01a0
 800f4e0:	16c15177 	.word	0x16c15177
 800f4e4:	3f56c16c 	.word	0x3f56c16c
 800f4e8:	5555554c 	.word	0x5555554c
 800f4ec:	3fa55555 	.word	0x3fa55555
 800f4f0:	3fe00000 	.word	0x3fe00000
 800f4f4:	3fd33332 	.word	0x3fd33332
 800f4f8:	3ff00000 	.word	0x3ff00000
 800f4fc:	3fe90000 	.word	0x3fe90000
 800f500:	3fd20000 	.word	0x3fd20000
 800f504:	00000000 	.word	0x00000000

0800f508 <__kernel_rem_pio2>:
 800f508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50c:	ed2d 8b02 	vpush	{d8}
 800f510:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f514:	1ed4      	subs	r4, r2, #3
 800f516:	9308      	str	r3, [sp, #32]
 800f518:	9101      	str	r1, [sp, #4]
 800f51a:	4bc5      	ldr	r3, [pc, #788]	; (800f830 <__kernel_rem_pio2+0x328>)
 800f51c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f51e:	9009      	str	r0, [sp, #36]	; 0x24
 800f520:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f524:	9304      	str	r3, [sp, #16]
 800f526:	9b08      	ldr	r3, [sp, #32]
 800f528:	3b01      	subs	r3, #1
 800f52a:	9307      	str	r3, [sp, #28]
 800f52c:	2318      	movs	r3, #24
 800f52e:	fb94 f4f3 	sdiv	r4, r4, r3
 800f532:	f06f 0317 	mvn.w	r3, #23
 800f536:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800f53a:	fb04 3303 	mla	r3, r4, r3, r3
 800f53e:	eb03 0a02 	add.w	sl, r3, r2
 800f542:	9b04      	ldr	r3, [sp, #16]
 800f544:	9a07      	ldr	r2, [sp, #28]
 800f546:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f820 <__kernel_rem_pio2+0x318>
 800f54a:	eb03 0802 	add.w	r8, r3, r2
 800f54e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f550:	1aa7      	subs	r7, r4, r2
 800f552:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f556:	ae22      	add	r6, sp, #136	; 0x88
 800f558:	2500      	movs	r5, #0
 800f55a:	4545      	cmp	r5, r8
 800f55c:	dd13      	ble.n	800f586 <__kernel_rem_pio2+0x7e>
 800f55e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800f820 <__kernel_rem_pio2+0x318>
 800f562:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f566:	2600      	movs	r6, #0
 800f568:	9b04      	ldr	r3, [sp, #16]
 800f56a:	429e      	cmp	r6, r3
 800f56c:	dc32      	bgt.n	800f5d4 <__kernel_rem_pio2+0xcc>
 800f56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f570:	9302      	str	r3, [sp, #8]
 800f572:	9b08      	ldr	r3, [sp, #32]
 800f574:	199d      	adds	r5, r3, r6
 800f576:	ab22      	add	r3, sp, #136	; 0x88
 800f578:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f57c:	9306      	str	r3, [sp, #24]
 800f57e:	ec59 8b18 	vmov	r8, r9, d8
 800f582:	2700      	movs	r7, #0
 800f584:	e01f      	b.n	800f5c6 <__kernel_rem_pio2+0xbe>
 800f586:	42ef      	cmn	r7, r5
 800f588:	d407      	bmi.n	800f59a <__kernel_rem_pio2+0x92>
 800f58a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f58e:	f7f0 ffd1 	bl	8000534 <__aeabi_i2d>
 800f592:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f596:	3501      	adds	r5, #1
 800f598:	e7df      	b.n	800f55a <__kernel_rem_pio2+0x52>
 800f59a:	ec51 0b18 	vmov	r0, r1, d8
 800f59e:	e7f8      	b.n	800f592 <__kernel_rem_pio2+0x8a>
 800f5a0:	9906      	ldr	r1, [sp, #24]
 800f5a2:	9d02      	ldr	r5, [sp, #8]
 800f5a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800f5a8:	9106      	str	r1, [sp, #24]
 800f5aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800f5ae:	9502      	str	r5, [sp, #8]
 800f5b0:	f7f1 f82a 	bl	8000608 <__aeabi_dmul>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	4640      	mov	r0, r8
 800f5ba:	4649      	mov	r1, r9
 800f5bc:	f7f0 fe6e 	bl	800029c <__adddf3>
 800f5c0:	3701      	adds	r7, #1
 800f5c2:	4680      	mov	r8, r0
 800f5c4:	4689      	mov	r9, r1
 800f5c6:	9b07      	ldr	r3, [sp, #28]
 800f5c8:	429f      	cmp	r7, r3
 800f5ca:	dde9      	ble.n	800f5a0 <__kernel_rem_pio2+0x98>
 800f5cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800f5d0:	3601      	adds	r6, #1
 800f5d2:	e7c9      	b.n	800f568 <__kernel_rem_pio2+0x60>
 800f5d4:	9b04      	ldr	r3, [sp, #16]
 800f5d6:	aa0e      	add	r2, sp, #56	; 0x38
 800f5d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f5dc:	930c      	str	r3, [sp, #48]	; 0x30
 800f5de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f5e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f5e4:	9c04      	ldr	r4, [sp, #16]
 800f5e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5e8:	ab9a      	add	r3, sp, #616	; 0x268
 800f5ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800f5ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f5f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800f5fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800f5fe:	ab9a      	add	r3, sp, #616	; 0x268
 800f600:	445b      	add	r3, fp
 800f602:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800f606:	2500      	movs	r5, #0
 800f608:	1b63      	subs	r3, r4, r5
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	dc78      	bgt.n	800f700 <__kernel_rem_pio2+0x1f8>
 800f60e:	4650      	mov	r0, sl
 800f610:	ec49 8b10 	vmov	d0, r8, r9
 800f614:	f000 fe3c 	bl	8010290 <scalbn>
 800f618:	ec57 6b10 	vmov	r6, r7, d0
 800f61c:	2200      	movs	r2, #0
 800f61e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f622:	ee10 0a10 	vmov	r0, s0
 800f626:	4639      	mov	r1, r7
 800f628:	f7f0 ffee 	bl	8000608 <__aeabi_dmul>
 800f62c:	ec41 0b10 	vmov	d0, r0, r1
 800f630:	f000 fd1a 	bl	8010068 <floor>
 800f634:	2200      	movs	r2, #0
 800f636:	ec51 0b10 	vmov	r0, r1, d0
 800f63a:	4b7e      	ldr	r3, [pc, #504]	; (800f834 <__kernel_rem_pio2+0x32c>)
 800f63c:	f7f0 ffe4 	bl	8000608 <__aeabi_dmul>
 800f640:	4602      	mov	r2, r0
 800f642:	460b      	mov	r3, r1
 800f644:	4630      	mov	r0, r6
 800f646:	4639      	mov	r1, r7
 800f648:	f7f0 fe26 	bl	8000298 <__aeabi_dsub>
 800f64c:	460f      	mov	r7, r1
 800f64e:	4606      	mov	r6, r0
 800f650:	f7f1 fa8a 	bl	8000b68 <__aeabi_d2iz>
 800f654:	9006      	str	r0, [sp, #24]
 800f656:	f7f0 ff6d 	bl	8000534 <__aeabi_i2d>
 800f65a:	4602      	mov	r2, r0
 800f65c:	460b      	mov	r3, r1
 800f65e:	4630      	mov	r0, r6
 800f660:	4639      	mov	r1, r7
 800f662:	f7f0 fe19 	bl	8000298 <__aeabi_dsub>
 800f666:	f1ba 0f00 	cmp.w	sl, #0
 800f66a:	4606      	mov	r6, r0
 800f66c:	460f      	mov	r7, r1
 800f66e:	dd6c      	ble.n	800f74a <__kernel_rem_pio2+0x242>
 800f670:	1e62      	subs	r2, r4, #1
 800f672:	ab0e      	add	r3, sp, #56	; 0x38
 800f674:	f1ca 0118 	rsb	r1, sl, #24
 800f678:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f67c:	9d06      	ldr	r5, [sp, #24]
 800f67e:	fa40 f301 	asr.w	r3, r0, r1
 800f682:	441d      	add	r5, r3
 800f684:	408b      	lsls	r3, r1
 800f686:	1ac0      	subs	r0, r0, r3
 800f688:	ab0e      	add	r3, sp, #56	; 0x38
 800f68a:	9506      	str	r5, [sp, #24]
 800f68c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f690:	f1ca 0317 	rsb	r3, sl, #23
 800f694:	fa40 f303 	asr.w	r3, r0, r3
 800f698:	9302      	str	r3, [sp, #8]
 800f69a:	9b02      	ldr	r3, [sp, #8]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	dd62      	ble.n	800f766 <__kernel_rem_pio2+0x25e>
 800f6a0:	9b06      	ldr	r3, [sp, #24]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	9306      	str	r3, [sp, #24]
 800f6a8:	4615      	mov	r5, r2
 800f6aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f6ae:	4294      	cmp	r4, r2
 800f6b0:	f300 8095 	bgt.w	800f7de <__kernel_rem_pio2+0x2d6>
 800f6b4:	f1ba 0f00 	cmp.w	sl, #0
 800f6b8:	dd07      	ble.n	800f6ca <__kernel_rem_pio2+0x1c2>
 800f6ba:	f1ba 0f01 	cmp.w	sl, #1
 800f6be:	f000 80a2 	beq.w	800f806 <__kernel_rem_pio2+0x2fe>
 800f6c2:	f1ba 0f02 	cmp.w	sl, #2
 800f6c6:	f000 80c1 	beq.w	800f84c <__kernel_rem_pio2+0x344>
 800f6ca:	9b02      	ldr	r3, [sp, #8]
 800f6cc:	2b02      	cmp	r3, #2
 800f6ce:	d14a      	bne.n	800f766 <__kernel_rem_pio2+0x25e>
 800f6d0:	4632      	mov	r2, r6
 800f6d2:	463b      	mov	r3, r7
 800f6d4:	2000      	movs	r0, #0
 800f6d6:	4958      	ldr	r1, [pc, #352]	; (800f838 <__kernel_rem_pio2+0x330>)
 800f6d8:	f7f0 fdde 	bl	8000298 <__aeabi_dsub>
 800f6dc:	4606      	mov	r6, r0
 800f6de:	460f      	mov	r7, r1
 800f6e0:	2d00      	cmp	r5, #0
 800f6e2:	d040      	beq.n	800f766 <__kernel_rem_pio2+0x25e>
 800f6e4:	4650      	mov	r0, sl
 800f6e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f828 <__kernel_rem_pio2+0x320>
 800f6ea:	f000 fdd1 	bl	8010290 <scalbn>
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	4639      	mov	r1, r7
 800f6f2:	ec53 2b10 	vmov	r2, r3, d0
 800f6f6:	f7f0 fdcf 	bl	8000298 <__aeabi_dsub>
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	460f      	mov	r7, r1
 800f6fe:	e032      	b.n	800f766 <__kernel_rem_pio2+0x25e>
 800f700:	2200      	movs	r2, #0
 800f702:	4b4e      	ldr	r3, [pc, #312]	; (800f83c <__kernel_rem_pio2+0x334>)
 800f704:	4640      	mov	r0, r8
 800f706:	4649      	mov	r1, r9
 800f708:	f7f0 ff7e 	bl	8000608 <__aeabi_dmul>
 800f70c:	f7f1 fa2c 	bl	8000b68 <__aeabi_d2iz>
 800f710:	f7f0 ff10 	bl	8000534 <__aeabi_i2d>
 800f714:	2200      	movs	r2, #0
 800f716:	4b4a      	ldr	r3, [pc, #296]	; (800f840 <__kernel_rem_pio2+0x338>)
 800f718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f71c:	f7f0 ff74 	bl	8000608 <__aeabi_dmul>
 800f720:	4602      	mov	r2, r0
 800f722:	460b      	mov	r3, r1
 800f724:	4640      	mov	r0, r8
 800f726:	4649      	mov	r1, r9
 800f728:	f7f0 fdb6 	bl	8000298 <__aeabi_dsub>
 800f72c:	f7f1 fa1c 	bl	8000b68 <__aeabi_d2iz>
 800f730:	ab0e      	add	r3, sp, #56	; 0x38
 800f732:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f736:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f73e:	f7f0 fdad 	bl	800029c <__adddf3>
 800f742:	3501      	adds	r5, #1
 800f744:	4680      	mov	r8, r0
 800f746:	4689      	mov	r9, r1
 800f748:	e75e      	b.n	800f608 <__kernel_rem_pio2+0x100>
 800f74a:	d105      	bne.n	800f758 <__kernel_rem_pio2+0x250>
 800f74c:	1e63      	subs	r3, r4, #1
 800f74e:	aa0e      	add	r2, sp, #56	; 0x38
 800f750:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f754:	15c3      	asrs	r3, r0, #23
 800f756:	e79f      	b.n	800f698 <__kernel_rem_pio2+0x190>
 800f758:	2200      	movs	r2, #0
 800f75a:	4b3a      	ldr	r3, [pc, #232]	; (800f844 <__kernel_rem_pio2+0x33c>)
 800f75c:	f7f1 f9da 	bl	8000b14 <__aeabi_dcmpge>
 800f760:	2800      	cmp	r0, #0
 800f762:	d139      	bne.n	800f7d8 <__kernel_rem_pio2+0x2d0>
 800f764:	9002      	str	r0, [sp, #8]
 800f766:	2200      	movs	r2, #0
 800f768:	2300      	movs	r3, #0
 800f76a:	4630      	mov	r0, r6
 800f76c:	4639      	mov	r1, r7
 800f76e:	f7f1 f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 800f772:	2800      	cmp	r0, #0
 800f774:	f000 80c7 	beq.w	800f906 <__kernel_rem_pio2+0x3fe>
 800f778:	1e65      	subs	r5, r4, #1
 800f77a:	462b      	mov	r3, r5
 800f77c:	2200      	movs	r2, #0
 800f77e:	9904      	ldr	r1, [sp, #16]
 800f780:	428b      	cmp	r3, r1
 800f782:	da6a      	bge.n	800f85a <__kernel_rem_pio2+0x352>
 800f784:	2a00      	cmp	r2, #0
 800f786:	f000 8088 	beq.w	800f89a <__kernel_rem_pio2+0x392>
 800f78a:	ab0e      	add	r3, sp, #56	; 0x38
 800f78c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f790:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f794:	2b00      	cmp	r3, #0
 800f796:	f000 80b4 	beq.w	800f902 <__kernel_rem_pio2+0x3fa>
 800f79a:	4650      	mov	r0, sl
 800f79c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800f828 <__kernel_rem_pio2+0x320>
 800f7a0:	f000 fd76 	bl	8010290 <scalbn>
 800f7a4:	00ec      	lsls	r4, r5, #3
 800f7a6:	ab72      	add	r3, sp, #456	; 0x1c8
 800f7a8:	191e      	adds	r6, r3, r4
 800f7aa:	ec59 8b10 	vmov	r8, r9, d0
 800f7ae:	f106 0a08 	add.w	sl, r6, #8
 800f7b2:	462f      	mov	r7, r5
 800f7b4:	2f00      	cmp	r7, #0
 800f7b6:	f280 80df 	bge.w	800f978 <__kernel_rem_pio2+0x470>
 800f7ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800f820 <__kernel_rem_pio2+0x318>
 800f7be:	f04f 0a00 	mov.w	sl, #0
 800f7c2:	eba5 030a 	sub.w	r3, r5, sl
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	f2c0 810a 	blt.w	800f9e0 <__kernel_rem_pio2+0x4d8>
 800f7cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 800f848 <__kernel_rem_pio2+0x340>
 800f7d0:	ec59 8b18 	vmov	r8, r9, d8
 800f7d4:	2700      	movs	r7, #0
 800f7d6:	e0f5      	b.n	800f9c4 <__kernel_rem_pio2+0x4bc>
 800f7d8:	2302      	movs	r3, #2
 800f7da:	9302      	str	r3, [sp, #8]
 800f7dc:	e760      	b.n	800f6a0 <__kernel_rem_pio2+0x198>
 800f7de:	ab0e      	add	r3, sp, #56	; 0x38
 800f7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e4:	b94d      	cbnz	r5, 800f7fa <__kernel_rem_pio2+0x2f2>
 800f7e6:	b12b      	cbz	r3, 800f7f4 <__kernel_rem_pio2+0x2ec>
 800f7e8:	a80e      	add	r0, sp, #56	; 0x38
 800f7ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f7ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	3201      	adds	r2, #1
 800f7f6:	461d      	mov	r5, r3
 800f7f8:	e759      	b.n	800f6ae <__kernel_rem_pio2+0x1a6>
 800f7fa:	a80e      	add	r0, sp, #56	; 0x38
 800f7fc:	1acb      	subs	r3, r1, r3
 800f7fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f802:	462b      	mov	r3, r5
 800f804:	e7f6      	b.n	800f7f4 <__kernel_rem_pio2+0x2ec>
 800f806:	1e62      	subs	r2, r4, #1
 800f808:	ab0e      	add	r3, sp, #56	; 0x38
 800f80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f80e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f812:	a90e      	add	r1, sp, #56	; 0x38
 800f814:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f818:	e757      	b.n	800f6ca <__kernel_rem_pio2+0x1c2>
 800f81a:	bf00      	nop
 800f81c:	f3af 8000 	nop.w
	...
 800f82c:	3ff00000 	.word	0x3ff00000
 800f830:	080109e8 	.word	0x080109e8
 800f834:	40200000 	.word	0x40200000
 800f838:	3ff00000 	.word	0x3ff00000
 800f83c:	3e700000 	.word	0x3e700000
 800f840:	41700000 	.word	0x41700000
 800f844:	3fe00000 	.word	0x3fe00000
 800f848:	080109a8 	.word	0x080109a8
 800f84c:	1e62      	subs	r2, r4, #1
 800f84e:	ab0e      	add	r3, sp, #56	; 0x38
 800f850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f854:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f858:	e7db      	b.n	800f812 <__kernel_rem_pio2+0x30a>
 800f85a:	a90e      	add	r1, sp, #56	; 0x38
 800f85c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f860:	3b01      	subs	r3, #1
 800f862:	430a      	orrs	r2, r1
 800f864:	e78b      	b.n	800f77e <__kernel_rem_pio2+0x276>
 800f866:	3301      	adds	r3, #1
 800f868:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f86c:	2900      	cmp	r1, #0
 800f86e:	d0fa      	beq.n	800f866 <__kernel_rem_pio2+0x35e>
 800f870:	9a08      	ldr	r2, [sp, #32]
 800f872:	4422      	add	r2, r4
 800f874:	00d2      	lsls	r2, r2, #3
 800f876:	a922      	add	r1, sp, #136	; 0x88
 800f878:	18e3      	adds	r3, r4, r3
 800f87a:	9206      	str	r2, [sp, #24]
 800f87c:	440a      	add	r2, r1
 800f87e:	9302      	str	r3, [sp, #8]
 800f880:	f10b 0108 	add.w	r1, fp, #8
 800f884:	f102 0308 	add.w	r3, r2, #8
 800f888:	1c66      	adds	r6, r4, #1
 800f88a:	910a      	str	r1, [sp, #40]	; 0x28
 800f88c:	2500      	movs	r5, #0
 800f88e:	930d      	str	r3, [sp, #52]	; 0x34
 800f890:	9b02      	ldr	r3, [sp, #8]
 800f892:	42b3      	cmp	r3, r6
 800f894:	da04      	bge.n	800f8a0 <__kernel_rem_pio2+0x398>
 800f896:	461c      	mov	r4, r3
 800f898:	e6a6      	b.n	800f5e8 <__kernel_rem_pio2+0xe0>
 800f89a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f89c:	2301      	movs	r3, #1
 800f89e:	e7e3      	b.n	800f868 <__kernel_rem_pio2+0x360>
 800f8a0:	9b06      	ldr	r3, [sp, #24]
 800f8a2:	18ef      	adds	r7, r5, r3
 800f8a4:	ab22      	add	r3, sp, #136	; 0x88
 800f8a6:	441f      	add	r7, r3
 800f8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f8ae:	f7f0 fe41 	bl	8000534 <__aeabi_i2d>
 800f8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8b4:	461c      	mov	r4, r3
 800f8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8b8:	e9c7 0100 	strd	r0, r1, [r7]
 800f8bc:	eb03 0b05 	add.w	fp, r3, r5
 800f8c0:	2700      	movs	r7, #0
 800f8c2:	f04f 0800 	mov.w	r8, #0
 800f8c6:	f04f 0900 	mov.w	r9, #0
 800f8ca:	9b07      	ldr	r3, [sp, #28]
 800f8cc:	429f      	cmp	r7, r3
 800f8ce:	dd08      	ble.n	800f8e2 <__kernel_rem_pio2+0x3da>
 800f8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8d2:	aa72      	add	r2, sp, #456	; 0x1c8
 800f8d4:	18eb      	adds	r3, r5, r3
 800f8d6:	4413      	add	r3, r2
 800f8d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800f8dc:	3601      	adds	r6, #1
 800f8de:	3508      	adds	r5, #8
 800f8e0:	e7d6      	b.n	800f890 <__kernel_rem_pio2+0x388>
 800f8e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f8e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f8ea:	f7f0 fe8d 	bl	8000608 <__aeabi_dmul>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	4649      	mov	r1, r9
 800f8f6:	f7f0 fcd1 	bl	800029c <__adddf3>
 800f8fa:	3701      	adds	r7, #1
 800f8fc:	4680      	mov	r8, r0
 800f8fe:	4689      	mov	r9, r1
 800f900:	e7e3      	b.n	800f8ca <__kernel_rem_pio2+0x3c2>
 800f902:	3d01      	subs	r5, #1
 800f904:	e741      	b.n	800f78a <__kernel_rem_pio2+0x282>
 800f906:	f1ca 0000 	rsb	r0, sl, #0
 800f90a:	ec47 6b10 	vmov	d0, r6, r7
 800f90e:	f000 fcbf 	bl	8010290 <scalbn>
 800f912:	ec57 6b10 	vmov	r6, r7, d0
 800f916:	2200      	movs	r2, #0
 800f918:	4b99      	ldr	r3, [pc, #612]	; (800fb80 <__kernel_rem_pio2+0x678>)
 800f91a:	ee10 0a10 	vmov	r0, s0
 800f91e:	4639      	mov	r1, r7
 800f920:	f7f1 f8f8 	bl	8000b14 <__aeabi_dcmpge>
 800f924:	b1f8      	cbz	r0, 800f966 <__kernel_rem_pio2+0x45e>
 800f926:	2200      	movs	r2, #0
 800f928:	4b96      	ldr	r3, [pc, #600]	; (800fb84 <__kernel_rem_pio2+0x67c>)
 800f92a:	4630      	mov	r0, r6
 800f92c:	4639      	mov	r1, r7
 800f92e:	f7f0 fe6b 	bl	8000608 <__aeabi_dmul>
 800f932:	f7f1 f919 	bl	8000b68 <__aeabi_d2iz>
 800f936:	4680      	mov	r8, r0
 800f938:	f7f0 fdfc 	bl	8000534 <__aeabi_i2d>
 800f93c:	2200      	movs	r2, #0
 800f93e:	4b90      	ldr	r3, [pc, #576]	; (800fb80 <__kernel_rem_pio2+0x678>)
 800f940:	f7f0 fe62 	bl	8000608 <__aeabi_dmul>
 800f944:	460b      	mov	r3, r1
 800f946:	4602      	mov	r2, r0
 800f948:	4639      	mov	r1, r7
 800f94a:	4630      	mov	r0, r6
 800f94c:	f7f0 fca4 	bl	8000298 <__aeabi_dsub>
 800f950:	f7f1 f90a 	bl	8000b68 <__aeabi_d2iz>
 800f954:	1c65      	adds	r5, r4, #1
 800f956:	ab0e      	add	r3, sp, #56	; 0x38
 800f958:	f10a 0a18 	add.w	sl, sl, #24
 800f95c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f960:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f964:	e719      	b.n	800f79a <__kernel_rem_pio2+0x292>
 800f966:	4630      	mov	r0, r6
 800f968:	4639      	mov	r1, r7
 800f96a:	f7f1 f8fd 	bl	8000b68 <__aeabi_d2iz>
 800f96e:	ab0e      	add	r3, sp, #56	; 0x38
 800f970:	4625      	mov	r5, r4
 800f972:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f976:	e710      	b.n	800f79a <__kernel_rem_pio2+0x292>
 800f978:	ab0e      	add	r3, sp, #56	; 0x38
 800f97a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f97e:	f7f0 fdd9 	bl	8000534 <__aeabi_i2d>
 800f982:	4642      	mov	r2, r8
 800f984:	464b      	mov	r3, r9
 800f986:	f7f0 fe3f 	bl	8000608 <__aeabi_dmul>
 800f98a:	2200      	movs	r2, #0
 800f98c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f990:	4b7c      	ldr	r3, [pc, #496]	; (800fb84 <__kernel_rem_pio2+0x67c>)
 800f992:	4640      	mov	r0, r8
 800f994:	4649      	mov	r1, r9
 800f996:	f7f0 fe37 	bl	8000608 <__aeabi_dmul>
 800f99a:	3f01      	subs	r7, #1
 800f99c:	4680      	mov	r8, r0
 800f99e:	4689      	mov	r9, r1
 800f9a0:	e708      	b.n	800f7b4 <__kernel_rem_pio2+0x2ac>
 800f9a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800f9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800f9ae:	f7f0 fe2b 	bl	8000608 <__aeabi_dmul>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	4640      	mov	r0, r8
 800f9b8:	4649      	mov	r1, r9
 800f9ba:	f7f0 fc6f 	bl	800029c <__adddf3>
 800f9be:	3701      	adds	r7, #1
 800f9c0:	4680      	mov	r8, r0
 800f9c2:	4689      	mov	r9, r1
 800f9c4:	9b04      	ldr	r3, [sp, #16]
 800f9c6:	429f      	cmp	r7, r3
 800f9c8:	dc01      	bgt.n	800f9ce <__kernel_rem_pio2+0x4c6>
 800f9ca:	45ba      	cmp	sl, r7
 800f9cc:	dae9      	bge.n	800f9a2 <__kernel_rem_pio2+0x49a>
 800f9ce:	ab4a      	add	r3, sp, #296	; 0x128
 800f9d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f9d4:	e9c3 8900 	strd	r8, r9, [r3]
 800f9d8:	f10a 0a01 	add.w	sl, sl, #1
 800f9dc:	3e08      	subs	r6, #8
 800f9de:	e6f0      	b.n	800f7c2 <__kernel_rem_pio2+0x2ba>
 800f9e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f9e2:	2b03      	cmp	r3, #3
 800f9e4:	d85b      	bhi.n	800fa9e <__kernel_rem_pio2+0x596>
 800f9e6:	e8df f003 	tbb	[pc, r3]
 800f9ea:	264a      	.short	0x264a
 800f9ec:	0226      	.short	0x0226
 800f9ee:	ab9a      	add	r3, sp, #616	; 0x268
 800f9f0:	441c      	add	r4, r3
 800f9f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f9f6:	46a2      	mov	sl, r4
 800f9f8:	46ab      	mov	fp, r5
 800f9fa:	f1bb 0f00 	cmp.w	fp, #0
 800f9fe:	dc6c      	bgt.n	800fada <__kernel_rem_pio2+0x5d2>
 800fa00:	46a2      	mov	sl, r4
 800fa02:	46ab      	mov	fp, r5
 800fa04:	f1bb 0f01 	cmp.w	fp, #1
 800fa08:	f300 8086 	bgt.w	800fb18 <__kernel_rem_pio2+0x610>
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	2100      	movs	r1, #0
 800fa10:	2d01      	cmp	r5, #1
 800fa12:	f300 80a0 	bgt.w	800fb56 <__kernel_rem_pio2+0x64e>
 800fa16:	9b02      	ldr	r3, [sp, #8]
 800fa18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800fa1c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f040 809e 	bne.w	800fb62 <__kernel_rem_pio2+0x65a>
 800fa26:	9b01      	ldr	r3, [sp, #4]
 800fa28:	e9c3 7800 	strd	r7, r8, [r3]
 800fa2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800fa30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fa34:	e033      	b.n	800fa9e <__kernel_rem_pio2+0x596>
 800fa36:	3408      	adds	r4, #8
 800fa38:	ab4a      	add	r3, sp, #296	; 0x128
 800fa3a:	441c      	add	r4, r3
 800fa3c:	462e      	mov	r6, r5
 800fa3e:	2000      	movs	r0, #0
 800fa40:	2100      	movs	r1, #0
 800fa42:	2e00      	cmp	r6, #0
 800fa44:	da3a      	bge.n	800fabc <__kernel_rem_pio2+0x5b4>
 800fa46:	9b02      	ldr	r3, [sp, #8]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d03d      	beq.n	800fac8 <__kernel_rem_pio2+0x5c0>
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa52:	9c01      	ldr	r4, [sp, #4]
 800fa54:	e9c4 2300 	strd	r2, r3, [r4]
 800fa58:	4602      	mov	r2, r0
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800fa60:	f7f0 fc1a 	bl	8000298 <__aeabi_dsub>
 800fa64:	ae4c      	add	r6, sp, #304	; 0x130
 800fa66:	2401      	movs	r4, #1
 800fa68:	42a5      	cmp	r5, r4
 800fa6a:	da30      	bge.n	800face <__kernel_rem_pio2+0x5c6>
 800fa6c:	9b02      	ldr	r3, [sp, #8]
 800fa6e:	b113      	cbz	r3, 800fa76 <__kernel_rem_pio2+0x56e>
 800fa70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa74:	4619      	mov	r1, r3
 800fa76:	9b01      	ldr	r3, [sp, #4]
 800fa78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fa7c:	e00f      	b.n	800fa9e <__kernel_rem_pio2+0x596>
 800fa7e:	ab9a      	add	r3, sp, #616	; 0x268
 800fa80:	441c      	add	r4, r3
 800fa82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800fa86:	2000      	movs	r0, #0
 800fa88:	2100      	movs	r1, #0
 800fa8a:	2d00      	cmp	r5, #0
 800fa8c:	da10      	bge.n	800fab0 <__kernel_rem_pio2+0x5a8>
 800fa8e:	9b02      	ldr	r3, [sp, #8]
 800fa90:	b113      	cbz	r3, 800fa98 <__kernel_rem_pio2+0x590>
 800fa92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa96:	4619      	mov	r1, r3
 800fa98:	9b01      	ldr	r3, [sp, #4]
 800fa9a:	e9c3 0100 	strd	r0, r1, [r3]
 800fa9e:	9b06      	ldr	r3, [sp, #24]
 800faa0:	f003 0007 	and.w	r0, r3, #7
 800faa4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800faa8:	ecbd 8b02 	vpop	{d8}
 800faac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fab4:	f7f0 fbf2 	bl	800029c <__adddf3>
 800fab8:	3d01      	subs	r5, #1
 800faba:	e7e6      	b.n	800fa8a <__kernel_rem_pio2+0x582>
 800fabc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fac0:	f7f0 fbec 	bl	800029c <__adddf3>
 800fac4:	3e01      	subs	r6, #1
 800fac6:	e7bc      	b.n	800fa42 <__kernel_rem_pio2+0x53a>
 800fac8:	4602      	mov	r2, r0
 800faca:	460b      	mov	r3, r1
 800facc:	e7c1      	b.n	800fa52 <__kernel_rem_pio2+0x54a>
 800face:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fad2:	f7f0 fbe3 	bl	800029c <__adddf3>
 800fad6:	3401      	adds	r4, #1
 800fad8:	e7c6      	b.n	800fa68 <__kernel_rem_pio2+0x560>
 800fada:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800fade:	ed3a 7b02 	vldmdb	sl!, {d7}
 800fae2:	4640      	mov	r0, r8
 800fae4:	ec53 2b17 	vmov	r2, r3, d7
 800fae8:	4649      	mov	r1, r9
 800faea:	ed8d 7b04 	vstr	d7, [sp, #16]
 800faee:	f7f0 fbd5 	bl	800029c <__adddf3>
 800faf2:	4602      	mov	r2, r0
 800faf4:	460b      	mov	r3, r1
 800faf6:	4606      	mov	r6, r0
 800faf8:	460f      	mov	r7, r1
 800fafa:	4640      	mov	r0, r8
 800fafc:	4649      	mov	r1, r9
 800fafe:	f7f0 fbcb 	bl	8000298 <__aeabi_dsub>
 800fb02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb06:	f7f0 fbc9 	bl	800029c <__adddf3>
 800fb0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb0e:	e9ca 0100 	strd	r0, r1, [sl]
 800fb12:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800fb16:	e770      	b.n	800f9fa <__kernel_rem_pio2+0x4f2>
 800fb18:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800fb1c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800fb20:	4630      	mov	r0, r6
 800fb22:	ec53 2b17 	vmov	r2, r3, d7
 800fb26:	4639      	mov	r1, r7
 800fb28:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fb2c:	f7f0 fbb6 	bl	800029c <__adddf3>
 800fb30:	4602      	mov	r2, r0
 800fb32:	460b      	mov	r3, r1
 800fb34:	4680      	mov	r8, r0
 800fb36:	4689      	mov	r9, r1
 800fb38:	4630      	mov	r0, r6
 800fb3a:	4639      	mov	r1, r7
 800fb3c:	f7f0 fbac 	bl	8000298 <__aeabi_dsub>
 800fb40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb44:	f7f0 fbaa 	bl	800029c <__adddf3>
 800fb48:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb4c:	e9ca 0100 	strd	r0, r1, [sl]
 800fb50:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800fb54:	e756      	b.n	800fa04 <__kernel_rem_pio2+0x4fc>
 800fb56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fb5a:	f7f0 fb9f 	bl	800029c <__adddf3>
 800fb5e:	3d01      	subs	r5, #1
 800fb60:	e756      	b.n	800fa10 <__kernel_rem_pio2+0x508>
 800fb62:	9b01      	ldr	r3, [sp, #4]
 800fb64:	9a01      	ldr	r2, [sp, #4]
 800fb66:	601f      	str	r7, [r3, #0]
 800fb68:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800fb6c:	605c      	str	r4, [r3, #4]
 800fb6e:	609d      	str	r5, [r3, #8]
 800fb70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fb74:	60d3      	str	r3, [r2, #12]
 800fb76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb7a:	6110      	str	r0, [r2, #16]
 800fb7c:	6153      	str	r3, [r2, #20]
 800fb7e:	e78e      	b.n	800fa9e <__kernel_rem_pio2+0x596>
 800fb80:	41700000 	.word	0x41700000
 800fb84:	3e700000 	.word	0x3e700000

0800fb88 <__kernel_sin>:
 800fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8c:	ec55 4b10 	vmov	r4, r5, d0
 800fb90:	b085      	sub	sp, #20
 800fb92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fb96:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fb9a:	ed8d 1b00 	vstr	d1, [sp]
 800fb9e:	9002      	str	r0, [sp, #8]
 800fba0:	da06      	bge.n	800fbb0 <__kernel_sin+0x28>
 800fba2:	ee10 0a10 	vmov	r0, s0
 800fba6:	4629      	mov	r1, r5
 800fba8:	f7f0 ffde 	bl	8000b68 <__aeabi_d2iz>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d051      	beq.n	800fc54 <__kernel_sin+0xcc>
 800fbb0:	4622      	mov	r2, r4
 800fbb2:	462b      	mov	r3, r5
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	f7f0 fd26 	bl	8000608 <__aeabi_dmul>
 800fbbc:	4682      	mov	sl, r0
 800fbbe:	468b      	mov	fp, r1
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	4629      	mov	r1, r5
 800fbc8:	f7f0 fd1e 	bl	8000608 <__aeabi_dmul>
 800fbcc:	a341      	add	r3, pc, #260	; (adr r3, 800fcd4 <__kernel_sin+0x14c>)
 800fbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd2:	4680      	mov	r8, r0
 800fbd4:	4689      	mov	r9, r1
 800fbd6:	4650      	mov	r0, sl
 800fbd8:	4659      	mov	r1, fp
 800fbda:	f7f0 fd15 	bl	8000608 <__aeabi_dmul>
 800fbde:	a33f      	add	r3, pc, #252	; (adr r3, 800fcdc <__kernel_sin+0x154>)
 800fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe4:	f7f0 fb58 	bl	8000298 <__aeabi_dsub>
 800fbe8:	4652      	mov	r2, sl
 800fbea:	465b      	mov	r3, fp
 800fbec:	f7f0 fd0c 	bl	8000608 <__aeabi_dmul>
 800fbf0:	a33c      	add	r3, pc, #240	; (adr r3, 800fce4 <__kernel_sin+0x15c>)
 800fbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf6:	f7f0 fb51 	bl	800029c <__adddf3>
 800fbfa:	4652      	mov	r2, sl
 800fbfc:	465b      	mov	r3, fp
 800fbfe:	f7f0 fd03 	bl	8000608 <__aeabi_dmul>
 800fc02:	a33a      	add	r3, pc, #232	; (adr r3, 800fcec <__kernel_sin+0x164>)
 800fc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc08:	f7f0 fb46 	bl	8000298 <__aeabi_dsub>
 800fc0c:	4652      	mov	r2, sl
 800fc0e:	465b      	mov	r3, fp
 800fc10:	f7f0 fcfa 	bl	8000608 <__aeabi_dmul>
 800fc14:	a337      	add	r3, pc, #220	; (adr r3, 800fcf4 <__kernel_sin+0x16c>)
 800fc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1a:	f7f0 fb3f 	bl	800029c <__adddf3>
 800fc1e:	9b02      	ldr	r3, [sp, #8]
 800fc20:	4606      	mov	r6, r0
 800fc22:	460f      	mov	r7, r1
 800fc24:	b9db      	cbnz	r3, 800fc5e <__kernel_sin+0xd6>
 800fc26:	4602      	mov	r2, r0
 800fc28:	460b      	mov	r3, r1
 800fc2a:	4650      	mov	r0, sl
 800fc2c:	4659      	mov	r1, fp
 800fc2e:	f7f0 fceb 	bl	8000608 <__aeabi_dmul>
 800fc32:	a325      	add	r3, pc, #148	; (adr r3, 800fcc8 <__kernel_sin+0x140>)
 800fc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc38:	f7f0 fb2e 	bl	8000298 <__aeabi_dsub>
 800fc3c:	4642      	mov	r2, r8
 800fc3e:	464b      	mov	r3, r9
 800fc40:	f7f0 fce2 	bl	8000608 <__aeabi_dmul>
 800fc44:	4602      	mov	r2, r0
 800fc46:	460b      	mov	r3, r1
 800fc48:	4620      	mov	r0, r4
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	f7f0 fb26 	bl	800029c <__adddf3>
 800fc50:	4604      	mov	r4, r0
 800fc52:	460d      	mov	r5, r1
 800fc54:	ec45 4b10 	vmov	d0, r4, r5
 800fc58:	b005      	add	sp, #20
 800fc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5e:	2200      	movs	r2, #0
 800fc60:	4b1b      	ldr	r3, [pc, #108]	; (800fcd0 <__kernel_sin+0x148>)
 800fc62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc66:	f7f0 fccf 	bl	8000608 <__aeabi_dmul>
 800fc6a:	4632      	mov	r2, r6
 800fc6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc70:	463b      	mov	r3, r7
 800fc72:	4640      	mov	r0, r8
 800fc74:	4649      	mov	r1, r9
 800fc76:	f7f0 fcc7 	bl	8000608 <__aeabi_dmul>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc82:	f7f0 fb09 	bl	8000298 <__aeabi_dsub>
 800fc86:	4652      	mov	r2, sl
 800fc88:	465b      	mov	r3, fp
 800fc8a:	f7f0 fcbd 	bl	8000608 <__aeabi_dmul>
 800fc8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc92:	f7f0 fb01 	bl	8000298 <__aeabi_dsub>
 800fc96:	a30c      	add	r3, pc, #48	; (adr r3, 800fcc8 <__kernel_sin+0x140>)
 800fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9c:	4606      	mov	r6, r0
 800fc9e:	460f      	mov	r7, r1
 800fca0:	4640      	mov	r0, r8
 800fca2:	4649      	mov	r1, r9
 800fca4:	f7f0 fcb0 	bl	8000608 <__aeabi_dmul>
 800fca8:	4602      	mov	r2, r0
 800fcaa:	460b      	mov	r3, r1
 800fcac:	4630      	mov	r0, r6
 800fcae:	4639      	mov	r1, r7
 800fcb0:	f7f0 faf4 	bl	800029c <__adddf3>
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	4620      	mov	r0, r4
 800fcba:	4629      	mov	r1, r5
 800fcbc:	f7f0 faec 	bl	8000298 <__aeabi_dsub>
 800fcc0:	e7c6      	b.n	800fc50 <__kernel_sin+0xc8>
 800fcc2:	bf00      	nop
 800fcc4:	f3af 8000 	nop.w
 800fcc8:	55555549 	.word	0x55555549
 800fccc:	3fc55555 	.word	0x3fc55555
 800fcd0:	3fe00000 	.word	0x3fe00000
 800fcd4:	5acfd57c 	.word	0x5acfd57c
 800fcd8:	3de5d93a 	.word	0x3de5d93a
 800fcdc:	8a2b9ceb 	.word	0x8a2b9ceb
 800fce0:	3e5ae5e6 	.word	0x3e5ae5e6
 800fce4:	57b1fe7d 	.word	0x57b1fe7d
 800fce8:	3ec71de3 	.word	0x3ec71de3
 800fcec:	19c161d5 	.word	0x19c161d5
 800fcf0:	3f2a01a0 	.word	0x3f2a01a0
 800fcf4:	1110f8a6 	.word	0x1110f8a6
 800fcf8:	3f811111 	.word	0x3f811111
 800fcfc:	00000000 	.word	0x00000000

0800fd00 <atan>:
 800fd00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd04:	ec55 4b10 	vmov	r4, r5, d0
 800fd08:	4bc3      	ldr	r3, [pc, #780]	; (8010018 <atan+0x318>)
 800fd0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fd0e:	429e      	cmp	r6, r3
 800fd10:	46ab      	mov	fp, r5
 800fd12:	dd18      	ble.n	800fd46 <atan+0x46>
 800fd14:	4bc1      	ldr	r3, [pc, #772]	; (801001c <atan+0x31c>)
 800fd16:	429e      	cmp	r6, r3
 800fd18:	dc01      	bgt.n	800fd1e <atan+0x1e>
 800fd1a:	d109      	bne.n	800fd30 <atan+0x30>
 800fd1c:	b144      	cbz	r4, 800fd30 <atan+0x30>
 800fd1e:	4622      	mov	r2, r4
 800fd20:	462b      	mov	r3, r5
 800fd22:	4620      	mov	r0, r4
 800fd24:	4629      	mov	r1, r5
 800fd26:	f7f0 fab9 	bl	800029c <__adddf3>
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	460d      	mov	r5, r1
 800fd2e:	e006      	b.n	800fd3e <atan+0x3e>
 800fd30:	f1bb 0f00 	cmp.w	fp, #0
 800fd34:	f340 8131 	ble.w	800ff9a <atan+0x29a>
 800fd38:	a59b      	add	r5, pc, #620	; (adr r5, 800ffa8 <atan+0x2a8>)
 800fd3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fd3e:	ec45 4b10 	vmov	d0, r4, r5
 800fd42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd46:	4bb6      	ldr	r3, [pc, #728]	; (8010020 <atan+0x320>)
 800fd48:	429e      	cmp	r6, r3
 800fd4a:	dc14      	bgt.n	800fd76 <atan+0x76>
 800fd4c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fd50:	429e      	cmp	r6, r3
 800fd52:	dc0d      	bgt.n	800fd70 <atan+0x70>
 800fd54:	a396      	add	r3, pc, #600	; (adr r3, 800ffb0 <atan+0x2b0>)
 800fd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5a:	ee10 0a10 	vmov	r0, s0
 800fd5e:	4629      	mov	r1, r5
 800fd60:	f7f0 fa9c 	bl	800029c <__adddf3>
 800fd64:	2200      	movs	r2, #0
 800fd66:	4baf      	ldr	r3, [pc, #700]	; (8010024 <atan+0x324>)
 800fd68:	f7f0 fede 	bl	8000b28 <__aeabi_dcmpgt>
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	d1e6      	bne.n	800fd3e <atan+0x3e>
 800fd70:	f04f 3aff 	mov.w	sl, #4294967295
 800fd74:	e02b      	b.n	800fdce <atan+0xce>
 800fd76:	f000 f963 	bl	8010040 <fabs>
 800fd7a:	4bab      	ldr	r3, [pc, #684]	; (8010028 <atan+0x328>)
 800fd7c:	429e      	cmp	r6, r3
 800fd7e:	ec55 4b10 	vmov	r4, r5, d0
 800fd82:	f300 80bf 	bgt.w	800ff04 <atan+0x204>
 800fd86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fd8a:	429e      	cmp	r6, r3
 800fd8c:	f300 80a0 	bgt.w	800fed0 <atan+0x1d0>
 800fd90:	ee10 2a10 	vmov	r2, s0
 800fd94:	ee10 0a10 	vmov	r0, s0
 800fd98:	462b      	mov	r3, r5
 800fd9a:	4629      	mov	r1, r5
 800fd9c:	f7f0 fa7e 	bl	800029c <__adddf3>
 800fda0:	2200      	movs	r2, #0
 800fda2:	4ba0      	ldr	r3, [pc, #640]	; (8010024 <atan+0x324>)
 800fda4:	f7f0 fa78 	bl	8000298 <__aeabi_dsub>
 800fda8:	2200      	movs	r2, #0
 800fdaa:	4606      	mov	r6, r0
 800fdac:	460f      	mov	r7, r1
 800fdae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	4629      	mov	r1, r5
 800fdb6:	f7f0 fa71 	bl	800029c <__adddf3>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	4639      	mov	r1, r7
 800fdc2:	f7f0 fd4b 	bl	800085c <__aeabi_ddiv>
 800fdc6:	f04f 0a00 	mov.w	sl, #0
 800fdca:	4604      	mov	r4, r0
 800fdcc:	460d      	mov	r5, r1
 800fdce:	4622      	mov	r2, r4
 800fdd0:	462b      	mov	r3, r5
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	f7f0 fc17 	bl	8000608 <__aeabi_dmul>
 800fdda:	4602      	mov	r2, r0
 800fddc:	460b      	mov	r3, r1
 800fdde:	4680      	mov	r8, r0
 800fde0:	4689      	mov	r9, r1
 800fde2:	f7f0 fc11 	bl	8000608 <__aeabi_dmul>
 800fde6:	a374      	add	r3, pc, #464	; (adr r3, 800ffb8 <atan+0x2b8>)
 800fde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdec:	4606      	mov	r6, r0
 800fdee:	460f      	mov	r7, r1
 800fdf0:	f7f0 fc0a 	bl	8000608 <__aeabi_dmul>
 800fdf4:	a372      	add	r3, pc, #456	; (adr r3, 800ffc0 <atan+0x2c0>)
 800fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfa:	f7f0 fa4f 	bl	800029c <__adddf3>
 800fdfe:	4632      	mov	r2, r6
 800fe00:	463b      	mov	r3, r7
 800fe02:	f7f0 fc01 	bl	8000608 <__aeabi_dmul>
 800fe06:	a370      	add	r3, pc, #448	; (adr r3, 800ffc8 <atan+0x2c8>)
 800fe08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0c:	f7f0 fa46 	bl	800029c <__adddf3>
 800fe10:	4632      	mov	r2, r6
 800fe12:	463b      	mov	r3, r7
 800fe14:	f7f0 fbf8 	bl	8000608 <__aeabi_dmul>
 800fe18:	a36d      	add	r3, pc, #436	; (adr r3, 800ffd0 <atan+0x2d0>)
 800fe1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1e:	f7f0 fa3d 	bl	800029c <__adddf3>
 800fe22:	4632      	mov	r2, r6
 800fe24:	463b      	mov	r3, r7
 800fe26:	f7f0 fbef 	bl	8000608 <__aeabi_dmul>
 800fe2a:	a36b      	add	r3, pc, #428	; (adr r3, 800ffd8 <atan+0x2d8>)
 800fe2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe30:	f7f0 fa34 	bl	800029c <__adddf3>
 800fe34:	4632      	mov	r2, r6
 800fe36:	463b      	mov	r3, r7
 800fe38:	f7f0 fbe6 	bl	8000608 <__aeabi_dmul>
 800fe3c:	a368      	add	r3, pc, #416	; (adr r3, 800ffe0 <atan+0x2e0>)
 800fe3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe42:	f7f0 fa2b 	bl	800029c <__adddf3>
 800fe46:	4642      	mov	r2, r8
 800fe48:	464b      	mov	r3, r9
 800fe4a:	f7f0 fbdd 	bl	8000608 <__aeabi_dmul>
 800fe4e:	a366      	add	r3, pc, #408	; (adr r3, 800ffe8 <atan+0x2e8>)
 800fe50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe54:	4680      	mov	r8, r0
 800fe56:	4689      	mov	r9, r1
 800fe58:	4630      	mov	r0, r6
 800fe5a:	4639      	mov	r1, r7
 800fe5c:	f7f0 fbd4 	bl	8000608 <__aeabi_dmul>
 800fe60:	a363      	add	r3, pc, #396	; (adr r3, 800fff0 <atan+0x2f0>)
 800fe62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe66:	f7f0 fa17 	bl	8000298 <__aeabi_dsub>
 800fe6a:	4632      	mov	r2, r6
 800fe6c:	463b      	mov	r3, r7
 800fe6e:	f7f0 fbcb 	bl	8000608 <__aeabi_dmul>
 800fe72:	a361      	add	r3, pc, #388	; (adr r3, 800fff8 <atan+0x2f8>)
 800fe74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe78:	f7f0 fa0e 	bl	8000298 <__aeabi_dsub>
 800fe7c:	4632      	mov	r2, r6
 800fe7e:	463b      	mov	r3, r7
 800fe80:	f7f0 fbc2 	bl	8000608 <__aeabi_dmul>
 800fe84:	a35e      	add	r3, pc, #376	; (adr r3, 8010000 <atan+0x300>)
 800fe86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8a:	f7f0 fa05 	bl	8000298 <__aeabi_dsub>
 800fe8e:	4632      	mov	r2, r6
 800fe90:	463b      	mov	r3, r7
 800fe92:	f7f0 fbb9 	bl	8000608 <__aeabi_dmul>
 800fe96:	a35c      	add	r3, pc, #368	; (adr r3, 8010008 <atan+0x308>)
 800fe98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9c:	f7f0 f9fc 	bl	8000298 <__aeabi_dsub>
 800fea0:	4632      	mov	r2, r6
 800fea2:	463b      	mov	r3, r7
 800fea4:	f7f0 fbb0 	bl	8000608 <__aeabi_dmul>
 800fea8:	4602      	mov	r2, r0
 800feaa:	460b      	mov	r3, r1
 800feac:	4640      	mov	r0, r8
 800feae:	4649      	mov	r1, r9
 800feb0:	f7f0 f9f4 	bl	800029c <__adddf3>
 800feb4:	4622      	mov	r2, r4
 800feb6:	462b      	mov	r3, r5
 800feb8:	f7f0 fba6 	bl	8000608 <__aeabi_dmul>
 800febc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fec0:	4602      	mov	r2, r0
 800fec2:	460b      	mov	r3, r1
 800fec4:	d14b      	bne.n	800ff5e <atan+0x25e>
 800fec6:	4620      	mov	r0, r4
 800fec8:	4629      	mov	r1, r5
 800feca:	f7f0 f9e5 	bl	8000298 <__aeabi_dsub>
 800fece:	e72c      	b.n	800fd2a <atan+0x2a>
 800fed0:	ee10 0a10 	vmov	r0, s0
 800fed4:	2200      	movs	r2, #0
 800fed6:	4b53      	ldr	r3, [pc, #332]	; (8010024 <atan+0x324>)
 800fed8:	4629      	mov	r1, r5
 800feda:	f7f0 f9dd 	bl	8000298 <__aeabi_dsub>
 800fede:	2200      	movs	r2, #0
 800fee0:	4606      	mov	r6, r0
 800fee2:	460f      	mov	r7, r1
 800fee4:	4b4f      	ldr	r3, [pc, #316]	; (8010024 <atan+0x324>)
 800fee6:	4620      	mov	r0, r4
 800fee8:	4629      	mov	r1, r5
 800feea:	f7f0 f9d7 	bl	800029c <__adddf3>
 800feee:	4602      	mov	r2, r0
 800fef0:	460b      	mov	r3, r1
 800fef2:	4630      	mov	r0, r6
 800fef4:	4639      	mov	r1, r7
 800fef6:	f7f0 fcb1 	bl	800085c <__aeabi_ddiv>
 800fefa:	f04f 0a01 	mov.w	sl, #1
 800fefe:	4604      	mov	r4, r0
 800ff00:	460d      	mov	r5, r1
 800ff02:	e764      	b.n	800fdce <atan+0xce>
 800ff04:	4b49      	ldr	r3, [pc, #292]	; (801002c <atan+0x32c>)
 800ff06:	429e      	cmp	r6, r3
 800ff08:	dc1d      	bgt.n	800ff46 <atan+0x246>
 800ff0a:	ee10 0a10 	vmov	r0, s0
 800ff0e:	2200      	movs	r2, #0
 800ff10:	4b47      	ldr	r3, [pc, #284]	; (8010030 <atan+0x330>)
 800ff12:	4629      	mov	r1, r5
 800ff14:	f7f0 f9c0 	bl	8000298 <__aeabi_dsub>
 800ff18:	2200      	movs	r2, #0
 800ff1a:	4606      	mov	r6, r0
 800ff1c:	460f      	mov	r7, r1
 800ff1e:	4b44      	ldr	r3, [pc, #272]	; (8010030 <atan+0x330>)
 800ff20:	4620      	mov	r0, r4
 800ff22:	4629      	mov	r1, r5
 800ff24:	f7f0 fb70 	bl	8000608 <__aeabi_dmul>
 800ff28:	2200      	movs	r2, #0
 800ff2a:	4b3e      	ldr	r3, [pc, #248]	; (8010024 <atan+0x324>)
 800ff2c:	f7f0 f9b6 	bl	800029c <__adddf3>
 800ff30:	4602      	mov	r2, r0
 800ff32:	460b      	mov	r3, r1
 800ff34:	4630      	mov	r0, r6
 800ff36:	4639      	mov	r1, r7
 800ff38:	f7f0 fc90 	bl	800085c <__aeabi_ddiv>
 800ff3c:	f04f 0a02 	mov.w	sl, #2
 800ff40:	4604      	mov	r4, r0
 800ff42:	460d      	mov	r5, r1
 800ff44:	e743      	b.n	800fdce <atan+0xce>
 800ff46:	462b      	mov	r3, r5
 800ff48:	ee10 2a10 	vmov	r2, s0
 800ff4c:	2000      	movs	r0, #0
 800ff4e:	4939      	ldr	r1, [pc, #228]	; (8010034 <atan+0x334>)
 800ff50:	f7f0 fc84 	bl	800085c <__aeabi_ddiv>
 800ff54:	f04f 0a03 	mov.w	sl, #3
 800ff58:	4604      	mov	r4, r0
 800ff5a:	460d      	mov	r5, r1
 800ff5c:	e737      	b.n	800fdce <atan+0xce>
 800ff5e:	4b36      	ldr	r3, [pc, #216]	; (8010038 <atan+0x338>)
 800ff60:	4e36      	ldr	r6, [pc, #216]	; (801003c <atan+0x33c>)
 800ff62:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800ff66:	4456      	add	r6, sl
 800ff68:	449a      	add	sl, r3
 800ff6a:	e9da 2300 	ldrd	r2, r3, [sl]
 800ff6e:	f7f0 f993 	bl	8000298 <__aeabi_dsub>
 800ff72:	4622      	mov	r2, r4
 800ff74:	462b      	mov	r3, r5
 800ff76:	f7f0 f98f 	bl	8000298 <__aeabi_dsub>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ff82:	f7f0 f989 	bl	8000298 <__aeabi_dsub>
 800ff86:	f1bb 0f00 	cmp.w	fp, #0
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	460d      	mov	r5, r1
 800ff8e:	f6bf aed6 	bge.w	800fd3e <atan+0x3e>
 800ff92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff96:	461d      	mov	r5, r3
 800ff98:	e6d1      	b.n	800fd3e <atan+0x3e>
 800ff9a:	a51d      	add	r5, pc, #116	; (adr r5, 8010010 <atan+0x310>)
 800ff9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ffa0:	e6cd      	b.n	800fd3e <atan+0x3e>
 800ffa2:	bf00      	nop
 800ffa4:	f3af 8000 	nop.w
 800ffa8:	54442d18 	.word	0x54442d18
 800ffac:	3ff921fb 	.word	0x3ff921fb
 800ffb0:	8800759c 	.word	0x8800759c
 800ffb4:	7e37e43c 	.word	0x7e37e43c
 800ffb8:	e322da11 	.word	0xe322da11
 800ffbc:	3f90ad3a 	.word	0x3f90ad3a
 800ffc0:	24760deb 	.word	0x24760deb
 800ffc4:	3fa97b4b 	.word	0x3fa97b4b
 800ffc8:	a0d03d51 	.word	0xa0d03d51
 800ffcc:	3fb10d66 	.word	0x3fb10d66
 800ffd0:	c54c206e 	.word	0xc54c206e
 800ffd4:	3fb745cd 	.word	0x3fb745cd
 800ffd8:	920083ff 	.word	0x920083ff
 800ffdc:	3fc24924 	.word	0x3fc24924
 800ffe0:	5555550d 	.word	0x5555550d
 800ffe4:	3fd55555 	.word	0x3fd55555
 800ffe8:	2c6a6c2f 	.word	0x2c6a6c2f
 800ffec:	bfa2b444 	.word	0xbfa2b444
 800fff0:	52defd9a 	.word	0x52defd9a
 800fff4:	3fadde2d 	.word	0x3fadde2d
 800fff8:	af749a6d 	.word	0xaf749a6d
 800fffc:	3fb3b0f2 	.word	0x3fb3b0f2
 8010000:	fe231671 	.word	0xfe231671
 8010004:	3fbc71c6 	.word	0x3fbc71c6
 8010008:	9998ebc4 	.word	0x9998ebc4
 801000c:	3fc99999 	.word	0x3fc99999
 8010010:	54442d18 	.word	0x54442d18
 8010014:	bff921fb 	.word	0xbff921fb
 8010018:	440fffff 	.word	0x440fffff
 801001c:	7ff00000 	.word	0x7ff00000
 8010020:	3fdbffff 	.word	0x3fdbffff
 8010024:	3ff00000 	.word	0x3ff00000
 8010028:	3ff2ffff 	.word	0x3ff2ffff
 801002c:	40037fff 	.word	0x40037fff
 8010030:	3ff80000 	.word	0x3ff80000
 8010034:	bff00000 	.word	0xbff00000
 8010038:	08010a18 	.word	0x08010a18
 801003c:	080109f8 	.word	0x080109f8

08010040 <fabs>:
 8010040:	ec51 0b10 	vmov	r0, r1, d0
 8010044:	ee10 2a10 	vmov	r2, s0
 8010048:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801004c:	ec43 2b10 	vmov	d0, r2, r3
 8010050:	4770      	bx	lr

08010052 <finite>:
 8010052:	ee10 3a90 	vmov	r3, s1
 8010056:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801005a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801005e:	0fc0      	lsrs	r0, r0, #31
 8010060:	4770      	bx	lr
 8010062:	0000      	movs	r0, r0
 8010064:	0000      	movs	r0, r0
	...

08010068 <floor>:
 8010068:	ec51 0b10 	vmov	r0, r1, d0
 801006c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010070:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010074:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010078:	2e13      	cmp	r6, #19
 801007a:	460c      	mov	r4, r1
 801007c:	ee10 5a10 	vmov	r5, s0
 8010080:	4680      	mov	r8, r0
 8010082:	dc34      	bgt.n	80100ee <floor+0x86>
 8010084:	2e00      	cmp	r6, #0
 8010086:	da16      	bge.n	80100b6 <floor+0x4e>
 8010088:	a335      	add	r3, pc, #212	; (adr r3, 8010160 <floor+0xf8>)
 801008a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008e:	f7f0 f905 	bl	800029c <__adddf3>
 8010092:	2200      	movs	r2, #0
 8010094:	2300      	movs	r3, #0
 8010096:	f7f0 fd47 	bl	8000b28 <__aeabi_dcmpgt>
 801009a:	b148      	cbz	r0, 80100b0 <floor+0x48>
 801009c:	2c00      	cmp	r4, #0
 801009e:	da59      	bge.n	8010154 <floor+0xec>
 80100a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80100a4:	4a30      	ldr	r2, [pc, #192]	; (8010168 <floor+0x100>)
 80100a6:	432b      	orrs	r3, r5
 80100a8:	2500      	movs	r5, #0
 80100aa:	42ab      	cmp	r3, r5
 80100ac:	bf18      	it	ne
 80100ae:	4614      	movne	r4, r2
 80100b0:	4621      	mov	r1, r4
 80100b2:	4628      	mov	r0, r5
 80100b4:	e025      	b.n	8010102 <floor+0x9a>
 80100b6:	4f2d      	ldr	r7, [pc, #180]	; (801016c <floor+0x104>)
 80100b8:	4137      	asrs	r7, r6
 80100ba:	ea01 0307 	and.w	r3, r1, r7
 80100be:	4303      	orrs	r3, r0
 80100c0:	d01f      	beq.n	8010102 <floor+0x9a>
 80100c2:	a327      	add	r3, pc, #156	; (adr r3, 8010160 <floor+0xf8>)
 80100c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c8:	f7f0 f8e8 	bl	800029c <__adddf3>
 80100cc:	2200      	movs	r2, #0
 80100ce:	2300      	movs	r3, #0
 80100d0:	f7f0 fd2a 	bl	8000b28 <__aeabi_dcmpgt>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	d0eb      	beq.n	80100b0 <floor+0x48>
 80100d8:	2c00      	cmp	r4, #0
 80100da:	bfbe      	ittt	lt
 80100dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80100e0:	fa43 f606 	asrlt.w	r6, r3, r6
 80100e4:	19a4      	addlt	r4, r4, r6
 80100e6:	ea24 0407 	bic.w	r4, r4, r7
 80100ea:	2500      	movs	r5, #0
 80100ec:	e7e0      	b.n	80100b0 <floor+0x48>
 80100ee:	2e33      	cmp	r6, #51	; 0x33
 80100f0:	dd0b      	ble.n	801010a <floor+0xa2>
 80100f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80100f6:	d104      	bne.n	8010102 <floor+0x9a>
 80100f8:	ee10 2a10 	vmov	r2, s0
 80100fc:	460b      	mov	r3, r1
 80100fe:	f7f0 f8cd 	bl	800029c <__adddf3>
 8010102:	ec41 0b10 	vmov	d0, r0, r1
 8010106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801010a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801010e:	f04f 33ff 	mov.w	r3, #4294967295
 8010112:	fa23 f707 	lsr.w	r7, r3, r7
 8010116:	4207      	tst	r7, r0
 8010118:	d0f3      	beq.n	8010102 <floor+0x9a>
 801011a:	a311      	add	r3, pc, #68	; (adr r3, 8010160 <floor+0xf8>)
 801011c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010120:	f7f0 f8bc 	bl	800029c <__adddf3>
 8010124:	2200      	movs	r2, #0
 8010126:	2300      	movs	r3, #0
 8010128:	f7f0 fcfe 	bl	8000b28 <__aeabi_dcmpgt>
 801012c:	2800      	cmp	r0, #0
 801012e:	d0bf      	beq.n	80100b0 <floor+0x48>
 8010130:	2c00      	cmp	r4, #0
 8010132:	da02      	bge.n	801013a <floor+0xd2>
 8010134:	2e14      	cmp	r6, #20
 8010136:	d103      	bne.n	8010140 <floor+0xd8>
 8010138:	3401      	adds	r4, #1
 801013a:	ea25 0507 	bic.w	r5, r5, r7
 801013e:	e7b7      	b.n	80100b0 <floor+0x48>
 8010140:	2301      	movs	r3, #1
 8010142:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010146:	fa03 f606 	lsl.w	r6, r3, r6
 801014a:	4435      	add	r5, r6
 801014c:	4545      	cmp	r5, r8
 801014e:	bf38      	it	cc
 8010150:	18e4      	addcc	r4, r4, r3
 8010152:	e7f2      	b.n	801013a <floor+0xd2>
 8010154:	2500      	movs	r5, #0
 8010156:	462c      	mov	r4, r5
 8010158:	e7aa      	b.n	80100b0 <floor+0x48>
 801015a:	bf00      	nop
 801015c:	f3af 8000 	nop.w
 8010160:	8800759c 	.word	0x8800759c
 8010164:	7e37e43c 	.word	0x7e37e43c
 8010168:	bff00000 	.word	0xbff00000
 801016c:	000fffff 	.word	0x000fffff

08010170 <matherr>:
 8010170:	2000      	movs	r0, #0
 8010172:	4770      	bx	lr
 8010174:	0000      	movs	r0, r0
	...

08010178 <nan>:
 8010178:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010180 <nan+0x8>
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	00000000 	.word	0x00000000
 8010184:	7ff80000 	.word	0x7ff80000

08010188 <rint>:
 8010188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801018a:	ec51 0b10 	vmov	r0, r1, d0
 801018e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010192:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8010196:	2e13      	cmp	r6, #19
 8010198:	460b      	mov	r3, r1
 801019a:	ee10 4a10 	vmov	r4, s0
 801019e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80101a2:	dc56      	bgt.n	8010252 <rint+0xca>
 80101a4:	2e00      	cmp	r6, #0
 80101a6:	da2b      	bge.n	8010200 <rint+0x78>
 80101a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80101ac:	4302      	orrs	r2, r0
 80101ae:	d023      	beq.n	80101f8 <rint+0x70>
 80101b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80101b4:	4302      	orrs	r2, r0
 80101b6:	4254      	negs	r4, r2
 80101b8:	4314      	orrs	r4, r2
 80101ba:	0c4b      	lsrs	r3, r1, #17
 80101bc:	0b24      	lsrs	r4, r4, #12
 80101be:	045b      	lsls	r3, r3, #17
 80101c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80101c4:	ea44 0103 	orr.w	r1, r4, r3
 80101c8:	460b      	mov	r3, r1
 80101ca:	492f      	ldr	r1, [pc, #188]	; (8010288 <rint+0x100>)
 80101cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80101d0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80101d4:	4602      	mov	r2, r0
 80101d6:	4639      	mov	r1, r7
 80101d8:	4630      	mov	r0, r6
 80101da:	f7f0 f85f 	bl	800029c <__adddf3>
 80101de:	e9cd 0100 	strd	r0, r1, [sp]
 80101e2:	463b      	mov	r3, r7
 80101e4:	4632      	mov	r2, r6
 80101e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101ea:	f7f0 f855 	bl	8000298 <__aeabi_dsub>
 80101ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80101f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80101f6:	4639      	mov	r1, r7
 80101f8:	ec41 0b10 	vmov	d0, r0, r1
 80101fc:	b003      	add	sp, #12
 80101fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010200:	4a22      	ldr	r2, [pc, #136]	; (801028c <rint+0x104>)
 8010202:	4132      	asrs	r2, r6
 8010204:	ea01 0702 	and.w	r7, r1, r2
 8010208:	4307      	orrs	r7, r0
 801020a:	d0f5      	beq.n	80101f8 <rint+0x70>
 801020c:	0852      	lsrs	r2, r2, #1
 801020e:	4011      	ands	r1, r2
 8010210:	430c      	orrs	r4, r1
 8010212:	d00b      	beq.n	801022c <rint+0xa4>
 8010214:	ea23 0202 	bic.w	r2, r3, r2
 8010218:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801021c:	2e13      	cmp	r6, #19
 801021e:	fa43 f306 	asr.w	r3, r3, r6
 8010222:	bf0c      	ite	eq
 8010224:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8010228:	2400      	movne	r4, #0
 801022a:	4313      	orrs	r3, r2
 801022c:	4916      	ldr	r1, [pc, #88]	; (8010288 <rint+0x100>)
 801022e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8010232:	4622      	mov	r2, r4
 8010234:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010238:	4620      	mov	r0, r4
 801023a:	4629      	mov	r1, r5
 801023c:	f7f0 f82e 	bl	800029c <__adddf3>
 8010240:	e9cd 0100 	strd	r0, r1, [sp]
 8010244:	4622      	mov	r2, r4
 8010246:	462b      	mov	r3, r5
 8010248:	e9dd 0100 	ldrd	r0, r1, [sp]
 801024c:	f7f0 f824 	bl	8000298 <__aeabi_dsub>
 8010250:	e7d2      	b.n	80101f8 <rint+0x70>
 8010252:	2e33      	cmp	r6, #51	; 0x33
 8010254:	dd07      	ble.n	8010266 <rint+0xde>
 8010256:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801025a:	d1cd      	bne.n	80101f8 <rint+0x70>
 801025c:	ee10 2a10 	vmov	r2, s0
 8010260:	f7f0 f81c 	bl	800029c <__adddf3>
 8010264:	e7c8      	b.n	80101f8 <rint+0x70>
 8010266:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801026a:	f04f 32ff 	mov.w	r2, #4294967295
 801026e:	40f2      	lsrs	r2, r6
 8010270:	4210      	tst	r0, r2
 8010272:	d0c1      	beq.n	80101f8 <rint+0x70>
 8010274:	0852      	lsrs	r2, r2, #1
 8010276:	4210      	tst	r0, r2
 8010278:	bf1f      	itttt	ne
 801027a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801027e:	ea20 0202 	bicne.w	r2, r0, r2
 8010282:	4134      	asrne	r4, r6
 8010284:	4314      	orrne	r4, r2
 8010286:	e7d1      	b.n	801022c <rint+0xa4>
 8010288:	08010a38 	.word	0x08010a38
 801028c:	000fffff 	.word	0x000fffff

08010290 <scalbn>:
 8010290:	b570      	push	{r4, r5, r6, lr}
 8010292:	ec55 4b10 	vmov	r4, r5, d0
 8010296:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801029a:	4606      	mov	r6, r0
 801029c:	462b      	mov	r3, r5
 801029e:	b9aa      	cbnz	r2, 80102cc <scalbn+0x3c>
 80102a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80102a4:	4323      	orrs	r3, r4
 80102a6:	d03b      	beq.n	8010320 <scalbn+0x90>
 80102a8:	4b31      	ldr	r3, [pc, #196]	; (8010370 <scalbn+0xe0>)
 80102aa:	4629      	mov	r1, r5
 80102ac:	2200      	movs	r2, #0
 80102ae:	ee10 0a10 	vmov	r0, s0
 80102b2:	f7f0 f9a9 	bl	8000608 <__aeabi_dmul>
 80102b6:	4b2f      	ldr	r3, [pc, #188]	; (8010374 <scalbn+0xe4>)
 80102b8:	429e      	cmp	r6, r3
 80102ba:	4604      	mov	r4, r0
 80102bc:	460d      	mov	r5, r1
 80102be:	da12      	bge.n	80102e6 <scalbn+0x56>
 80102c0:	a327      	add	r3, pc, #156	; (adr r3, 8010360 <scalbn+0xd0>)
 80102c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c6:	f7f0 f99f 	bl	8000608 <__aeabi_dmul>
 80102ca:	e009      	b.n	80102e0 <scalbn+0x50>
 80102cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80102d0:	428a      	cmp	r2, r1
 80102d2:	d10c      	bne.n	80102ee <scalbn+0x5e>
 80102d4:	ee10 2a10 	vmov	r2, s0
 80102d8:	4620      	mov	r0, r4
 80102da:	4629      	mov	r1, r5
 80102dc:	f7ef ffde 	bl	800029c <__adddf3>
 80102e0:	4604      	mov	r4, r0
 80102e2:	460d      	mov	r5, r1
 80102e4:	e01c      	b.n	8010320 <scalbn+0x90>
 80102e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80102ea:	460b      	mov	r3, r1
 80102ec:	3a36      	subs	r2, #54	; 0x36
 80102ee:	4432      	add	r2, r6
 80102f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80102f4:	428a      	cmp	r2, r1
 80102f6:	dd0b      	ble.n	8010310 <scalbn+0x80>
 80102f8:	ec45 4b11 	vmov	d1, r4, r5
 80102fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010368 <scalbn+0xd8>
 8010300:	f000 f83c 	bl	801037c <copysign>
 8010304:	a318      	add	r3, pc, #96	; (adr r3, 8010368 <scalbn+0xd8>)
 8010306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030a:	ec51 0b10 	vmov	r0, r1, d0
 801030e:	e7da      	b.n	80102c6 <scalbn+0x36>
 8010310:	2a00      	cmp	r2, #0
 8010312:	dd08      	ble.n	8010326 <scalbn+0x96>
 8010314:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010318:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801031c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010320:	ec45 4b10 	vmov	d0, r4, r5
 8010324:	bd70      	pop	{r4, r5, r6, pc}
 8010326:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801032a:	da0d      	bge.n	8010348 <scalbn+0xb8>
 801032c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010330:	429e      	cmp	r6, r3
 8010332:	ec45 4b11 	vmov	d1, r4, r5
 8010336:	dce1      	bgt.n	80102fc <scalbn+0x6c>
 8010338:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8010360 <scalbn+0xd0>
 801033c:	f000 f81e 	bl	801037c <copysign>
 8010340:	a307      	add	r3, pc, #28	; (adr r3, 8010360 <scalbn+0xd0>)
 8010342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010346:	e7e0      	b.n	801030a <scalbn+0x7a>
 8010348:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801034c:	3236      	adds	r2, #54	; 0x36
 801034e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010352:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010356:	4620      	mov	r0, r4
 8010358:	4629      	mov	r1, r5
 801035a:	2200      	movs	r2, #0
 801035c:	4b06      	ldr	r3, [pc, #24]	; (8010378 <scalbn+0xe8>)
 801035e:	e7b2      	b.n	80102c6 <scalbn+0x36>
 8010360:	c2f8f359 	.word	0xc2f8f359
 8010364:	01a56e1f 	.word	0x01a56e1f
 8010368:	8800759c 	.word	0x8800759c
 801036c:	7e37e43c 	.word	0x7e37e43c
 8010370:	43500000 	.word	0x43500000
 8010374:	ffff3cb0 	.word	0xffff3cb0
 8010378:	3c900000 	.word	0x3c900000

0801037c <copysign>:
 801037c:	ec51 0b10 	vmov	r0, r1, d0
 8010380:	ee11 0a90 	vmov	r0, s3
 8010384:	ee10 2a10 	vmov	r2, s0
 8010388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801038c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8010390:	ea41 0300 	orr.w	r3, r1, r0
 8010394:	ec43 2b10 	vmov	d0, r2, r3
 8010398:	4770      	bx	lr
	...

0801039c <_init>:
 801039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801039e:	bf00      	nop
 80103a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103a2:	bc08      	pop	{r3}
 80103a4:	469e      	mov	lr, r3
 80103a6:	4770      	bx	lr

080103a8 <_fini>:
 80103a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103aa:	bf00      	nop
 80103ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ae:	bc08      	pop	{r3}
 80103b0:	469e      	mov	lr, r3
 80103b2:	4770      	bx	lr
